public class android.test.RenamingDelegatingContext extends android.content.ContextWrapper
{
    private java.io.File mCacheDir;
    private java.util.Set mDatabaseNames;
    private android.content.Context mFileContext;
    private java.util.Set mFileNames;
    private java.lang.String mFilePrefix;
    private final java.lang.Object mSync;

    public void <init>(android.content.Context, android.content.Context, java.lang.String)
    {
        android.test.RenamingDelegatingContext r0;
        android.content.Context r1, r2;
        java.lang.String r3;
        java.lang.Object $r4;
        java.util.HashSet $r5, $r6;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<android.content.ContextWrapper: void <init>(android.content.Context)>(r1);

        r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix> = null;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.test.RenamingDelegatingContext: java.lang.Object mSync> = $r4;

        $r5 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames> = $r5;

        $r6 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames> = $r6;

        r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext> = r2;

        r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix> = r3;

        return;
    }

    public void <init>(android.content.Context, java.lang.String)
    {
        android.test.RenamingDelegatingContext r0;
        android.content.Context r1;
        java.lang.String r2;
        java.lang.Object $r3;
        java.util.HashSet $r4, $r5;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.content.ContextWrapper: void <init>(android.content.Context)>(r1);

        r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix> = null;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.test.RenamingDelegatingContext: java.lang.Object mSync> = $r3;

        $r4 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames> = $r4;

        $r5 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames> = $r5;

        r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext> = r1;

        r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix> = r2;

        return;
    }

    public static android.content.ContentProvider providerWithRenamedContext(java.lang.Class, android.content.Context, java.lang.String) throws java.lang.IllegalAccessException, java.lang.InstantiationException
    {
        java.lang.Class r0;
        android.content.Context r1;
        java.lang.String r2;
        android.content.ContentProvider $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <android.test.RenamingDelegatingContext: android.content.ContentProvider providerWithRenamedContext(java.lang.Class,android.content.Context,java.lang.String,boolean)>(r0, r1, r2, 0);

        return $r3;
    }

    public static android.content.ContentProvider providerWithRenamedContext(java.lang.Class, android.content.Context, java.lang.String, boolean) throws java.lang.IllegalAccessException, java.lang.InstantiationException
    {
        java.lang.Class r0;
        android.content.Context r1;
        java.lang.String r2;
        boolean z0;
        android.content.ContentProvider r3;
        android.test.RenamingDelegatingContext r4, $r6;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        r3 = (android.content.ContentProvider) $r5;

        $r6 = new android.test.RenamingDelegatingContext;

        specialinvoke $r6.<android.test.RenamingDelegatingContext: void <init>(android.content.Context,java.lang.String)>(r1, r2);

        r4 = $r6;

        if z0 == 0 goto label1;

        virtualinvoke r4.<android.test.RenamingDelegatingContext: void makeExistingFilesAndDbsAccessible()>();

     label1:
        virtualinvoke r3.<android.content.ContentProvider: void attachInfoForTesting(android.content.Context,android.content.pm.ProviderInfo)>(r4, null);

        return r3;
    }

    private java.lang.String renamedFileName(java.lang.String)
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String r1, $r3, $r6;
        java.lang.StringBuilder $r2, $r4, $r5;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String[] databaseList()
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String[] $r1, $r4;
        java.util.Set $r2;
        java.lang.Object[] $r3;

        r0 := @this: android.test.RenamingDelegatingContext;

        $r2 = r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        $r1 = newarray (java.lang.String)[0];

        $r3 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r4 = (java.lang.String[]) $r3;

        return $r4;
    }

    public boolean deleteDatabase(java.lang.String)
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String r1, $r5;
        java.util.Set $r2, $r3;
        boolean $z0, $z2;
        android.content.Context $r4;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $r4 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r5 = specialinvoke r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>(r1);

        $z2 = virtualinvoke $r4.<android.content.Context: boolean deleteDatabase(java.lang.String)>($r5);

        return $z2;

     label1:
        return 0;
    }

    public boolean deleteFile(java.lang.String)
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String r1, $r5;
        java.util.Set $r2, $r3;
        boolean $z0, $z2;
        android.content.Context $r4;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $r4 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r5 = specialinvoke r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>(r1);

        $z2 = virtualinvoke $r4.<android.content.Context: boolean deleteFile(java.lang.String)>($r5);

        return $z2;

     label1:
        return 0;
    }

    public java.lang.String[] fileList()
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String[] $r1, $r4;
        java.util.Set $r2;
        java.lang.Object[] $r3;

        r0 := @this: android.test.RenamingDelegatingContext;

        $r2 = r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        $r1 = newarray (java.lang.String)[0];

        $r3 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r4 = (java.lang.String[]) $r3;

        return $r4;
    }

    public java.io.File getCacheDir()
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r13;
        java.io.File $r3, $r4, $r5, $r6, $r7, $r10, $r12;
        boolean $z0, $z1;
        java.lang.String $r8, $r11;
        android.content.Context $r9;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 = r0.<android.test.RenamingDelegatingContext: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.test.RenamingDelegatingContext: java.io.File mCacheDir>;

        if $r3 != null goto label2;

        $r10 = new java.io.File;

        $r9 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r12 = virtualinvoke $r9.<android.content.Context: java.io.File getCacheDir()>();

        $r11 = specialinvoke r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>("cache");

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, $r11);

        r0.<android.test.RenamingDelegatingContext: java.io.File mCacheDir> = $r10;

     label2:
        $r4 = r0.<android.test.RenamingDelegatingContext: java.io.File mCacheDir>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label5;

        $r6 = r0.<android.test.RenamingDelegatingContext: java.io.File mCacheDir>;

        $z1 = virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RenamingDelegatingContext", "Unable to create cache directory");

        exitmonitor r1;

     label3:
        return null;

     label4:
        $r7 = r0.<android.test.RenamingDelegatingContext: java.io.File mCacheDir>;

        $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r8, 505, -1, -1);

     label5:
        exitmonitor r1;

     label6:
        $r5 = r0.<android.test.RenamingDelegatingContext: java.io.File mCacheDir>;

        return $r5;

     label7:
        $r13 := @caughtexception;

        r2 = $r13;

     label8:
        exitmonitor r1;

     label9:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.io.File getDatabasePath(java.lang.String)
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String r1, $r3;
        android.content.Context $r2;
        java.io.File $r4;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r3 = specialinvoke r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>($r3);

        return $r4;
    }

    public java.lang.String getDatabasePrefix()
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String $r1;

        r0 := @this: android.test.RenamingDelegatingContext;

        $r1 = r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix>;

        return $r1;
    }

    public java.io.File getFileStreamPath(java.lang.String)
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String r1, $r3;
        android.content.Context $r2;
        java.io.File $r4;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r3 = specialinvoke r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>($r3);

        return $r4;
    }

    public void makeExistingFilesAndDbsAccessible()
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String[] r1, r2;
        int i0, i1, i2, i3;
        java.lang.String r3, r4, $r8, $r10;
        android.content.Context $r5, $r6;
        boolean $z0, $z2;
        java.util.Set $r7, $r9;

        r0 := @this: android.test.RenamingDelegatingContext;

        $r5 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        r1 = virtualinvoke $r5.<android.content.Context: java.lang.String[] databaseList()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r1[i1];

        $z2 = virtualinvoke r0.<android.test.RenamingDelegatingContext: boolean shouldDiskNameBeVisible(java.lang.String)>(r4);

        if $z2 == 0 goto label2;

        $r9 = r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        $r10 = virtualinvoke r0.<android.test.RenamingDelegatingContext: java.lang.String publicNameFromDiskName(java.lang.String)>(r4);

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r10);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r6 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        r2 = virtualinvoke $r6.<android.content.Context: java.lang.String[] fileList()>();

        i2 = lengthof r2;

        i3 = 0;

     label4:
        if i3 >= i2 goto label6;

        r3 = r2[i3];

        $z0 = virtualinvoke r0.<android.test.RenamingDelegatingContext: boolean shouldDiskNameBeVisible(java.lang.String)>(r3);

        if $z0 == 0 goto label5;

        $r7 = r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        $r8 = virtualinvoke r0.<android.test.RenamingDelegatingContext: java.lang.String publicNameFromDiskName(java.lang.String)>(r3);

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return;
    }

    public java.io.FileInputStream openFileInput(java.lang.String) throws java.io.FileNotFoundException
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String r1, r2;
        java.util.Set $r3;
        boolean $z0;
        java.io.FileNotFoundException $r4;
        android.content.Context $r5;
        java.io.FileInputStream $r6;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>(r1);

        $r3 = r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>(r2);

        return $r6;

     label1:
        $r4 = new java.io.FileNotFoundException;

        specialinvoke $r4.<java.io.FileNotFoundException: void <init>(java.lang.String)>(r2);

        throw $r4;
    }

    public java.io.FileOutputStream openFileOutput(java.lang.String, int) throws java.io.FileNotFoundException
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String r1, $r4;
        int i0;
        java.util.Set $r2;
        android.content.Context $r3;
        java.io.FileOutputStream $r5;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r4 = specialinvoke r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>(r1);

        $r5 = virtualinvoke $r3.<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>($r4, i0);

        return $r5;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String r1, r3;
        int i0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r2;
        java.util.Set $r4, $r7;
        boolean $z0;
        android.content.Context $r5, $r8;
        android.database.sqlite.SQLiteDatabase $r6;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r3 = specialinvoke r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>(r1);

        $r4 = r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r7 = r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r8 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        virtualinvoke $r8.<android.content.Context: boolean deleteDatabase(java.lang.String)>(r3);

     label1:
        $r5 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>(r3, i0, r2);

        return $r6;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler)
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String r1, r4;
        int i0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r2;
        android.database.DatabaseErrorHandler r3;
        java.util.Set $r5, $r8;
        boolean $z0;
        android.content.Context $r6, $r9;
        android.database.sqlite.SQLiteDatabase $r7;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r3 := @parameter3: android.database.DatabaseErrorHandler;

        r4 = specialinvoke r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>(r1);

        $r5 = r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r9 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        virtualinvoke $r9.<android.content.Context: boolean deleteDatabase(java.lang.String)>(r4);

     label1:
        $r6 = r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>(r4, i0, r2, r3);

        return $r7;
    }

    java.lang.String publicNameFromDiskName(java.lang.String)
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String r1, $r2, $r3, $r8;
        boolean $z0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<android.test.RenamingDelegatingContext: boolean shouldDiskNameBeVisible(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("disk file should not be visible: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r2 = r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r3;
    }

    boolean shouldDiskNameBeVisible(java.lang.String)
    {
        android.test.RenamingDelegatingContext r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: android.test.RenamingDelegatingContext;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        return $z0;
    }
}
