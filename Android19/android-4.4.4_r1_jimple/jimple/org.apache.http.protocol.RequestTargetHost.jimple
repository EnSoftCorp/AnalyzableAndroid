public class org.apache.http.protocol.RequestTargetHost extends java.lang.Object implements org.apache.http.HttpRequestInterceptor
{

    public void <init>()
    {
        org.apache.http.protocol.RequestTargetHost r0;

        r0 := @this: org.apache.http.protocol.RequestTargetHost;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.RequestTargetHost r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.HttpHost r3, $r16;
        org.apache.http.HttpConnection r4;
        java.net.InetAddress r5;
        int i0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r8;
        java.lang.String $r7, $r15;
        org.apache.http.RequestLine $r9;
        org.apache.http.ProtocolVersion $r10;
        org.apache.http.HttpVersion $r11;
        org.apache.http.ProtocolException $r12;
        org.apache.http.HttpInetConnection $r13, $r14;
        java.lang.IllegalArgumentException $r17, $r18;

        r0 := @this: org.apache.http.protocol.RequestTargetHost;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        if r1 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r17;

     label1:
        if r2 != null goto label2;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r18;

     label2:
        $z0 = interfaceinvoke r1.<org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>("Host");

        if $z0 != 0 goto label4;

        $r6 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.target_host");

        r3 = (org.apache.http.HttpHost) $r6;

        if r3 != null goto label6;

        $r8 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.connection");

        r4 = (org.apache.http.HttpConnection) $r8;

        $z1 = r4 instanceof org.apache.http.HttpInetConnection;

        if $z1 == 0 goto label3;

        $r13 = (org.apache.http.HttpInetConnection) r4;

        r5 = interfaceinvoke $r13.<org.apache.http.HttpInetConnection: java.net.InetAddress getRemoteAddress()>();

        $r14 = (org.apache.http.HttpInetConnection) r4;

        i0 = interfaceinvoke $r14.<org.apache.http.HttpInetConnection: int getRemotePort()>();

        if r5 == null goto label3;

        $r16 = new org.apache.http.HttpHost;

        $r15 = virtualinvoke r5.<java.net.InetAddress: java.lang.String getHostName()>();

        specialinvoke $r16.<org.apache.http.HttpHost: void <init>(java.lang.String,int)>($r15, i0);

        r3 = $r16;

     label3:
        if r3 != null goto label6;

        $r9 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r10 = interfaceinvoke $r9.<org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r11 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z2 = virtualinvoke $r10.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r11);

        if $z2 == 0 goto label5;

     label4:
        return;

     label5:
        $r12 = new org.apache.http.ProtocolException;

        specialinvoke $r12.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Target host missing");

        throw $r12;

     label6:
        $r7 = virtualinvoke r3.<org.apache.http.HttpHost: java.lang.String toHostString()>();

        interfaceinvoke r1.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("Host", $r7);

        return;
    }
}
