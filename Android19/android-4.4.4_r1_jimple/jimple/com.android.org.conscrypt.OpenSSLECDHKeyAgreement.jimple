public final class com.android.org.conscrypt.OpenSSLECDHKeyAgreement extends javax.crypto.KeyAgreementSpi
{
    private int mExpectedResultLength;
    private com.android.org.conscrypt.OpenSSLKey mOpenSslPrivateKey;
    private byte[] mResult;

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLECDHKeyAgreement r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLECDHKeyAgreement;

        specialinvoke r0.<javax.crypto.KeyAgreementSpi: void <init>()>();

        return;
    }

    private void checkCompleted()
    {
        com.android.org.conscrypt.OpenSSLECDHKeyAgreement r0;
        byte[] $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLECDHKeyAgreement;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: byte[] mResult>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Key agreement not completed");

        throw $r2;

     label1:
        return;
    }

    private static com.android.org.conscrypt.OpenSSLKey translateKeyToEcOpenSSLKey(java.security.Key) throws java.security.InvalidKeyException
    {
        java.security.Key r0, $r4;
        java.lang.Exception r1, $r6;
        com.android.org.conscrypt.OpenSSLKey r2;
        java.security.KeyFactory $r3;
        com.android.org.conscrypt.OpenSSLKeyHolder $r5;
        java.security.InvalidKeyException $r7;

        r0 := @parameter0: java.security.Key;

     label1:
        $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>("EC", "AndroidOpenSSL");

        $r4 = virtualinvoke $r3.<java.security.KeyFactory: java.security.Key translateKey(java.security.Key)>(r0);

        $r5 = (com.android.org.conscrypt.OpenSSLKeyHolder) $r4;

        r2 = interfaceinvoke $r5.<com.android.org.conscrypt.OpenSSLKeyHolder: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.security.InvalidKeyException;

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to translate key to OpenSSL EC key", r1);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.security.Key engineDoPhase(java.security.Key, boolean) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLECDHKeyAgreement r0;
        java.security.Key r1;
        boolean z0, $z1;
        com.android.org.conscrypt.OpenSSLKey r2, $r5, $r6;
        byte[] r3, r4, $r14, $r16;
        int i0, $i1, $i4, $i5, $i6, $i7;
        long $l2, $l3;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r13, $r17, $r18, $r20, $r21, $r23, $r25;
        java.lang.RuntimeException $r8, $r15;
        java.lang.String $r12, $r22, $r24;
        java.security.InvalidKeyException $r19, $r28;
        java.lang.Class $r26;
        java.lang.IllegalStateException $r27, $r29;

        r0 := @this: com.android.org.conscrypt.OpenSSLECDHKeyAgreement;

        r1 := @parameter0: java.security.Key;

        z0 := @parameter1: boolean;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: com.android.org.conscrypt.OpenSSLKey mOpenSslPrivateKey>;

        if $r5 != null goto label1;

        $r27 = new java.lang.IllegalStateException;

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not initialized");

        throw $r27;

     label1:
        if z0 != 0 goto label2;

        $r29 = new java.lang.IllegalStateException;

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ECDH only has one phase");

        throw $r29;

     label2:
        if r1 != null goto label3;

        $r28 = new java.security.InvalidKeyException;

        specialinvoke $r28.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r28;

     label3:
        $z1 = r1 instanceof java.security.PublicKey;

        if $z1 != 0 goto label4;

        $r19 = new java.security.InvalidKeyException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a public key: ");

        $r26 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label4:
        r2 = staticinvoke <com.android.org.conscrypt.OpenSSLECDHKeyAgreement: com.android.org.conscrypt.OpenSSLKey translateKeyToEcOpenSSLKey(java.security.Key)>(r1);

        $i1 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: int mExpectedResultLength>;

        r3 = newarray (byte)[$i1];

        $l2 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r6 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: com.android.org.conscrypt.OpenSSLKey mOpenSslPrivateKey>;

        $l3 = virtualinvoke $r6.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        i0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int ECDH_compute_key(byte[],int,long,long)>(r3, 0, $l2, $l3);

        if i0 != -1 goto label5;

        $r15 = new java.lang.RuntimeException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Engine returned ");

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label5:
        $i5 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: int mExpectedResultLength>;

        if i0 != $i5 goto label7;

        r4 = r3;

     label6:
        r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: byte[] mResult> = r4;

        return null;

     label7:
        $i4 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: int mExpectedResultLength>;

        if i0 >= $i4 goto label8;

        r4 = newarray (byte)[i0];

        $r16 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: byte[] mResult>;

        $r14 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: byte[] mResult>;

        $i7 = lengthof $r14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r16, 0, $i7);

        goto label6;

     label8:
        $r8 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Engine produced a longer than expected result. Expected: ");

        $i6 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: int mExpectedResultLength>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual: ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r8;
    }

    protected int engineGenerateSecret(byte[], int) throws javax.crypto.ShortBufferException
    {
        com.android.org.conscrypt.OpenSSLECDHKeyAgreement r0;
        byte[] r1, $r2, $r3, $r4, $r5, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        javax.crypto.ShortBufferException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @this: com.android.org.conscrypt.OpenSSLECDHKeyAgreement;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: void checkCompleted()>();

        $i2 = lengthof r1;

        i1 = $i2 - i0;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: byte[] mResult>;

        $i3 = lengthof $r2;

        if $i3 <= i1 goto label1;

        $r6 = new javax.crypto.ShortBufferException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Needed: ");

        $r9 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: byte[] mResult>;

        $i6 = lengthof $r9;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", available: ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label1:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: byte[] mResult>;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: byte[] mResult>;

        $i4 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, i0, $i4);

        $r5 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: byte[] mResult>;

        $i5 = lengthof $r5;

        return $i5;
    }

    protected javax.crypto.SecretKey engineGenerateSecret(java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLECDHKeyAgreement r0;
        java.lang.String r1;
        javax.crypto.spec.SecretKeySpec $r2;
        byte[] $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLECDHKeyAgreement;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: void checkCompleted()>();

        $r2 = new javax.crypto.spec.SecretKeySpec;

        $r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: byte[] engineGenerateSecret()>();

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, r1);

        return $r2;
    }

    protected byte[] engineGenerateSecret()
    {
        com.android.org.conscrypt.OpenSSLECDHKeyAgreement r0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLECDHKeyAgreement;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: void checkCompleted()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: byte[] mResult>;

        return $r1;
    }

    protected void engineInit(java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLECDHKeyAgreement r0;
        java.security.Key r1;
        java.security.SecureRandom r2;
        com.android.org.conscrypt.OpenSSLKey r3;
        boolean $z0;
        long $l0, $l1;
        int $i2, $i3, $i4;
        java.security.InvalidKeyException $r4, $r10;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.Class $r7;
        java.lang.String $r8;

        r0 := @this: com.android.org.conscrypt.OpenSSLECDHKeyAgreement;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.SecureRandom;

        if r1 != null goto label1;

        $r10 = new java.security.InvalidKeyException;

        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r10;

     label1:
        $z0 = r1 instanceof java.security.PrivateKey;

        if $z0 != 0 goto label2;

        $r4 = new java.security.InvalidKeyException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a private key: ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        r3 = staticinvoke <com.android.org.conscrypt.OpenSSLECDHKeyAgreement: com.android.org.conscrypt.OpenSSLKey translateKeyToEcOpenSSLKey(java.security.Key)>(r1);

        $l0 = virtualinvoke r3.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_KEY_get0_group(long)>($l0);

        $i2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EC_GROUP_get_degree(long)>($l1);

        $i3 = 7 + $i2;

        $i4 = $i3 / 8;

        r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: int mExpectedResultLength> = $i4;

        r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: com.android.org.conscrypt.OpenSSLKey mOpenSslPrivateKey> = r3;

        return;
    }

    protected void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        com.android.org.conscrypt.OpenSSLECDHKeyAgreement r0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        java.security.SecureRandom r3;
        java.security.InvalidAlgorithmParameterException $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLECDHKeyAgreement;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        r3 := @parameter2: java.security.SecureRandom;

        if r2 == null goto label1;

        $r4 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r4.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("No algorithm parameters supported");

        throw $r4;

     label1:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECDHKeyAgreement: void engineInit(java.security.Key,java.security.SecureRandom)>(r1, r3);

        return;
    }
}
