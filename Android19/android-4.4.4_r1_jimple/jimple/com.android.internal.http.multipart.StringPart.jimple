public class com.android.internal.http.multipart.StringPart extends com.android.internal.http.multipart.PartBase
{
    public static final java.lang.String DEFAULT_CHARSET;
    public static final java.lang.String DEFAULT_CONTENT_TYPE;
    public static final java.lang.String DEFAULT_TRANSFER_ENCODING;
    private static final org.apache.commons.logging.Log LOG;
    private byte[] content;
    private java.lang.String value;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <com.android.internal.http.multipart.StringPart: java.lang.String DEFAULT_TRANSFER_ENCODING> = "8bit";

        <com.android.internal.http.multipart.StringPart: java.lang.String DEFAULT_CONTENT_TYPE> = "text/plain";

        <com.android.internal.http.multipart.StringPart: java.lang.String DEFAULT_CHARSET> = "US-ASCII";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "com/android/internal/http/multipart/StringPart");

        <com.android.internal.http.multipart.StringPart: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        com.android.internal.http.multipart.StringPart r0;
        java.lang.String r1, r2;

        r0 := @this: com.android.internal.http.multipart.StringPart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.internal.http.multipart.StringPart: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.internal.http.multipart.StringPart r0;
        java.lang.String r1, r2, r3;
        int $i0;
        java.lang.IllegalArgumentException $r4, $r5;

        r0 := @this: com.android.internal.http.multipart.StringPart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r3 != null goto label1;

        r3 = "US-ASCII";

     label1:
        specialinvoke r0.<com.android.internal.http.multipart.PartBase: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, "text/plain", r3, "8bit");

        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value may not be null");

        throw $r5;

     label2:
        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(0);

        if $i0 == -1 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NULs may not be present in string parts");

        throw $r4;

     label3:
        r0.<com.android.internal.http.multipart.StringPart: java.lang.String value> = r2;

        return;
    }

    private byte[] getContent()
    {
        com.android.internal.http.multipart.StringPart r0;
        byte[] $r1, $r2, $r5;
        java.lang.String $r3, $r4;

        r0 := @this: com.android.internal.http.multipart.StringPart;

        $r1 = r0.<com.android.internal.http.multipart.StringPart: byte[] content>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.internal.http.multipart.StringPart: java.lang.String value>;

        $r4 = virtualinvoke r0.<com.android.internal.http.multipart.StringPart: java.lang.String getCharSet()>();

        $r5 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getBytes(java.lang.String,java.lang.String)>($r3, $r4);

        r0.<com.android.internal.http.multipart.StringPart: byte[] content> = $r5;

     label1:
        $r2 = r0.<com.android.internal.http.multipart.StringPart: byte[] content>;

        return $r2;
    }

    protected long lengthOfData()
    {
        com.android.internal.http.multipart.StringPart r0;
        org.apache.commons.logging.Log $r1;
        byte[] $r2;
        int $i0;
        long $l1;

        r0 := @this: com.android.internal.http.multipart.StringPart;

        $r1 = <com.android.internal.http.multipart.StringPart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter lengthOfData()");

        $r2 = specialinvoke r0.<com.android.internal.http.multipart.StringPart: byte[] getContent()>();

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        return $l1;
    }

    protected void sendData(java.io.OutputStream) throws java.io.IOException
    {
        com.android.internal.http.multipart.StringPart r0;
        java.io.OutputStream r1;
        org.apache.commons.logging.Log $r2;
        byte[] $r3;

        r0 := @this: com.android.internal.http.multipart.StringPart;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = <com.android.internal.http.multipart.StringPart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendData(OutputStream)");

        $r3 = specialinvoke r0.<com.android.internal.http.multipart.StringPart: byte[] getContent()>();

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

        return;
    }

    public void setCharSet(java.lang.String)
    {
        com.android.internal.http.multipart.StringPart r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.http.multipart.StringPart;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.internal.http.multipart.PartBase: void setCharSet(java.lang.String)>(r1);

        r0.<com.android.internal.http.multipart.StringPart: byte[] content> = null;

        return;
    }
}
