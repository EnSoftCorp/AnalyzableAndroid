public class com.android.server.usb.UsbDebuggingManager extends java.lang.Object implements java.lang.Runnable
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private final java.lang.String ADBD_SOCKET;
    private final java.lang.String ADB_DIRECTORY;
    private final java.lang.String ADB_KEYS_FILE;
    private final int BUFFER_SIZE;
    private boolean mAdbEnabled;
    private final android.content.Context mContext;
    private java.lang.String mFingerprints;
    private final android.os.Handler mHandler;
    private java.io.OutputStream mOutputStream;
    private android.net.LocalSocket mSocket;
    private java.lang.Thread mThread;

    public void <init>(android.content.Context)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        android.content.Context r1;
        com.android.server.usb.UsbDebuggingManager$UsbDebuggingHandler $r2;
        com.android.server.FgThread $r3;
        android.os.Looper $r4;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String ADBD_SOCKET> = "adbd";

        r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String ADB_DIRECTORY> = "misc/adb";

        r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String ADB_KEYS_FILE> = "adb_keys";

        r0.<com.android.server.usb.UsbDebuggingManager: int BUFFER_SIZE> = 4096;

        r0.<com.android.server.usb.UsbDebuggingManager: boolean mAdbEnabled> = 0;

        r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket> = null;

        r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream> = null;

        $r2 = new com.android.server.usb.UsbDebuggingManager$UsbDebuggingHandler;

        $r3 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r4 = virtualinvoke $r3.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r2.<com.android.server.usb.UsbDebuggingManager$UsbDebuggingHandler: void <init>(com.android.server.usb.UsbDebuggingManager,android.os.Looper)>(r0, $r4);

        r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler> = $r2;

        r0.<com.android.server.usb.UsbDebuggingManager: android.content.Context mContext> = r1;

        return;
    }

    static boolean access$000(com.android.server.usb.UsbDebuggingManager)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        $z0 = r0.<com.android.server.usb.UsbDebuggingManager: boolean mAdbEnabled>;

        return $z0;
    }

    static boolean access$002(com.android.server.usb.UsbDebuggingManager, boolean)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        boolean z0;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        z0 := @parameter1: boolean;

        r0.<com.android.server.usb.UsbDebuggingManager: boolean mAdbEnabled> = z0;

        return z0;
    }

    static java.lang.Thread access$100(com.android.server.usb.UsbDebuggingManager)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.Thread $r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        $r1 = r0.<com.android.server.usb.UsbDebuggingManager: java.lang.Thread mThread>;

        return $r1;
    }

    static void access$1000(com.android.server.usb.UsbDebuggingManager)
    {
        com.android.server.usb.UsbDebuggingManager r0;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void deleteKeyFile()>();

        return;
    }

    static java.lang.Thread access$102(com.android.server.usb.UsbDebuggingManager, java.lang.Thread)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.Thread r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.Thread;

        r0.<com.android.server.usb.UsbDebuggingManager: java.lang.Thread mThread> = r1;

        return r1;
    }

    static void access$200(com.android.server.usb.UsbDebuggingManager)
    {
        com.android.server.usb.UsbDebuggingManager r0;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void closeSocket()>();

        return;
    }

    static java.io.OutputStream access$302(com.android.server.usb.UsbDebuggingManager, java.io.OutputStream)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.io.OutputStream r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.io.OutputStream;

        r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream> = r1;

        return r1;
    }

    static android.net.LocalSocket access$402(com.android.server.usb.UsbDebuggingManager, android.net.LocalSocket)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        android.net.LocalSocket r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: android.net.LocalSocket;

        r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket> = r1;

        return r1;
    }

    static java.lang.String access$500(com.android.server.usb.UsbDebuggingManager, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String getFingerprints(java.lang.String)>(r1);

        return $r2;
    }

    static java.lang.String access$600(com.android.server.usb.UsbDebuggingManager)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        $r1 = r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String mFingerprints>;

        return $r1;
    }

    static java.lang.String access$602(com.android.server.usb.UsbDebuggingManager, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String mFingerprints> = r1;

        return r1;
    }

    static void access$700(com.android.server.usb.UsbDebuggingManager, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void writeKey(java.lang.String)>(r1);

        return;
    }

    static void access$800(com.android.server.usb.UsbDebuggingManager, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void sendResponse(java.lang.String)>(r1);

        return;
    }

    static void access$900(com.android.server.usb.UsbDebuggingManager, java.lang.String, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void showConfirmationDialog(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    private void closeSocket()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.io.IOException r1, r2, $r5, $r10;
        java.io.OutputStream $r3;
        android.net.LocalSocket $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13;
        java.lang.String $r9, $r14;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

     label1:
        $r3 = r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream>;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label2:
        $r4 = r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket>;

        virtualinvoke $r4.<android.net.LocalSocket: void close()>();

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed closing output stream: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r9);

        goto label2;

     label5:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed closing socket: ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r14);

        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label5;
    }

    private void deleteKeyFile()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.io.File r1;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 = specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: java.io.File getUserKeyFile()>();

        if r1 == null goto label1;

        virtualinvoke r1.<java.io.File: boolean delete()>();

     label1:
        return;
    }

    private java.lang.String getFingerprints(java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1, $r8, $r11, $r12, $r14, $r21;
        java.lang.StringBuilder r2, $r6, $r18, $r19, $r20;
        java.lang.Exception r3, $r16;
        java.security.MessageDigest r4;
        byte[] r5, $r9, $r10;
        int i0, $i1, $i9, $i10;
        java.lang.String[] $r7;
        byte $b2, $b3, $b4, $b6, $b7;
        char $c5, $c8;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: java.lang.String;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r2 = $r6;

     label1:
        r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

     label2:
        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $r8 = $r7[0];

        $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>();

        $r10 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r9, 0);

        r5 = virtualinvoke r4.<java.security.MessageDigest: byte[] digest(byte[])>($r10);

        i0 = 0;

     label3:
        $i1 = lengthof r5;

        if i0 >= $i1 goto label6;

        $r12 = "0123456789ABCDEF";

        $b2 = r5[i0];

        $b4 = $b2 >> 4;

        $b3 = 15 & $b4;

        $c5 = virtualinvoke $r12.<java.lang.String: char charAt(int)>($b3);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r14 = "0123456789ABCDEF";

        $b6 = r5[i0];

        $b7 = 15 & $b6;

        $c8 = virtualinvoke $r14.<java.lang.String: char charAt(int)>($b7);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        $i10 = lengthof r5;

        $i9 = -1 + $i10;

        if i0 >= $i9 goto label4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        $r16 := @caughtexception;

        r3 = $r16;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error getting digester: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r21);

        return "";

     label6:
        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

        catch java.lang.Exception from label1 to label2 with label5;
    }

    private java.io.File getUserKeyFile()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.io.File r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        $r2 = new java.io.File;

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "misc/adb");

        r1 = $r2;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", "ADB data directory does not exist");

        return null;

     label1:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "adb_keys");

        return $r4;
    }

    private void listenToSocket() throws java.io.IOException
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.Throwable r1, $r35;
        java.io.IOException r2, $r32;
        byte[] r3, $r17, $r23;
        android.net.LocalSocketAddress r4, $r8;
        java.io.InputStream r5;
        int i0;
        java.lang.String r6, $r18, $r19, $r22, $r24, $r33;
        android.os.Message r7;
        android.net.LocalSocketAddress$Namespace $r9;
        android.net.LocalSocket $r10, $r11, $r12, $r13;
        java.io.OutputStream $r14;
        java.lang.StringBuilder $r15, $r16, $r20, $r21, $r25, $r26, $r29, $r30, $r31, $r34;
        byte $b1, $b2;
        android.os.Handler $r27, $r28;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

     label01:
        r3 = newarray (byte)[4096];

        $r8 = new android.net.LocalSocketAddress;

        $r9 = <android.net.LocalSocketAddress$Namespace: android.net.LocalSocketAddress$Namespace RESERVED>;

        specialinvoke $r8.<android.net.LocalSocketAddress: void <init>(java.lang.String,android.net.LocalSocketAddress$Namespace)>("adbd", $r9);

        r4 = $r8;

        $r10 = new android.net.LocalSocket;

        specialinvoke $r10.<android.net.LocalSocket: void <init>()>();

        r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket> = $r10;

        $r12 = r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket>;

        virtualinvoke $r12.<android.net.LocalSocket: void connect(android.net.LocalSocketAddress)>(r4);

        $r11 = r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket>;

        $r14 = virtualinvoke $r11.<android.net.LocalSocket: java.io.OutputStream getOutputStream()>();

        r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream> = $r14;

        $r13 = r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket>;

        r5 = virtualinvoke $r13.<android.net.LocalSocket: java.io.InputStream getInputStream()>();

     label02:
        i0 = virtualinvoke r5.<java.io.InputStream: int read(byte[])>(r3);

     label03:
        if i0 >= 0 goto label06;

     label04:
        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reading");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r33);

     label05:
        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void closeSocket()>();

        return;

     label06:
        $b1 = r3[0];

        if $b1 != 80 goto label11;

        $b2 = r3[1];

        if $b2 != 75 goto label11;

        $r22 = new java.lang.String;

        $r23 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r3, 2, i0);

        specialinvoke $r22.<java.lang.String: void <init>(byte[])>($r23);

        r6 = $r22;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received public key: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r24);

        $r28 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        r7 = virtualinvoke $r28.<android.os.Handler: android.os.Message obtainMessage(int)>(5);

        r7.<android.os.Message: java.lang.Object obj> = r6;

        $r27 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r27.<android.os.Handler: boolean sendMessage(android.os.Message)>(r7);

     label07:
        goto label02;

     label08:
        $r32 := @caughtexception;

        r2 = $r32;

     label09:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbDebuggingManager", "Communication error: ", r2);

        throw r2;

     label10:
        $r35 := @caughtexception;

        r1 = $r35;

        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void closeSocket()>();

        throw r1;

     label11:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong message: ");

        $r18 = new java.lang.String;

        $r17 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r3, 0, 2);

        specialinvoke $r18.<java.lang.String: void <init>(byte[])>($r17);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r19);

     label12:
        goto label05;

        catch java.io.IOException from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.io.IOException from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.io.IOException from label04 to label05 with label08;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.io.IOException from label11 to label12 with label08;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void sendResponse(java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1;
        java.io.IOException r2, $r6;
        java.io.OutputStream $r3, $r4;
        byte[] $r5;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream>;

        $r5 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r5);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbDebuggingManager", "Failed to write response:", r2);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void showConfirmationDialog(java.lang.String, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1, r2;
        android.content.Intent r3, $r5;
        android.content.Context $r10;
        android.content.ActivityNotFoundException $r11;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>()>();

        r3 = $r5;

        virtualinvoke r3.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.usb.UsbDebuggingActivity");

        virtualinvoke r3.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("key", r1);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("fingerprints", r2);

     label1:
        $r10 = r0.<com.android.server.usb.UsbDebuggingManager: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: void startActivity(android.content.Intent)>(r3);

     label2:
        return;

     label3:
        $r11 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", "unable to start UsbDebuggingActivity");

        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    private void writeKey(java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1, $r7, $r12;
        java.io.IOException r2, $r8;
        java.io.File r3;
        java.io.FileOutputStream r4, $r5;
        boolean $z0;
        byte[] $r6;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: java.lang.String;

     label1:
        r3 = specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: java.io.File getUserKeyFile()>();

     label2:
        if r3 != null goto label3;

        return;

     label3:
        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label4;

        virtualinvoke r3.<java.io.File: boolean createNewFile()>();

        $r7 = virtualinvoke r3.<java.io.File: java.lang.String toString()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r7, 416, -1, -1);

     label4:
        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r3, 1);

        r4 = $r5;

        $r6 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r4.<java.io.FileOutputStream: void write(byte[])>($r6);

        virtualinvoke r4.<java.io.FileOutputStream: void write(int)>(10);

        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing key:");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r12);

        return;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public void allowUsbDebugging(boolean, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        boolean z0;
        java.lang.String r1;
        android.os.Message r2;
        byte b0;
        android.os.Handler $r3, $r4;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        r2 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        if z0 == 0 goto label2;

        b0 = 1;

     label1:
        r2.<android.os.Message: int arg1> = b0;

        r2.<android.os.Message: java.lang.Object obj> = r1;

        $r4 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>(r2);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public void clearUsbDebuggingKeys()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        $r1 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(6);

        return;
    }

    public void denyUsbDebugging()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        $r1 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(4);

        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.StringBuilder r3, $r7, $r8, $r10, $r11, $r13, $r20, $r21, $r23, $r24, $r26, $r27;
        java.io.OutputStream r4;
        boolean z0;
        java.io.IOException r5, r6, $r18, $r25;
        java.lang.String $r9, $r12, $r15, $r17, $r19, $r22, $r28;
        java.io.File $r14, $r16;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  USB Debugging State:");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Connected to adbd: ");

        r4 = r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream>;

        z0 = 0;

        if r4 == null goto label1;

        z0 = 1;

     label1:
        $r8 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Last key received: ");

        $r12 = r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String mFingerprints>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    User keys:");

     label2:
        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>("/data/misc/adb/adb_keys");

        $r17 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>($r14, 0, null);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r17);

     label3:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    System keys:");

     label4:
        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>("/adb_keys");

        $r19 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>($r16, 0, null);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r19);

     label5:
        return;

     label6:
        $r18 := @caughtexception;

        r5 = $r18;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException: ");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r22);

        goto label3;

     label7:
        $r25 := @caughtexception;

        r6 = $r25;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException: ");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        return;

        catch java.io.IOException from label2 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label7;
    }

    public void run()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        boolean $z0;
        java.lang.Exception $r2;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

     label1:
        $z0 = r0.<com.android.server.usb.UsbDebuggingManager: boolean mAdbEnabled>;

        if $z0 == 0 goto label5;

     label2:
        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void listenToSocket()>();

     label3:
        goto label1;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.os.SystemClock: void sleep(long)>(1000L);

        goto label1;

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void setAdbEnabled(boolean)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        boolean z0;
        android.os.Handler r1;
        byte b0;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        if z0 == 0 goto label2;

        b0 = 1;

     label1:
        virtualinvoke r1.<android.os.Handler: boolean sendEmptyMessage(int)>(b0);

        return;

     label2:
        b0 = 2;

        goto label1;
    }

    public static void <clinit>()
    {
        <com.android.server.usb.UsbDebuggingManager: java.lang.String TAG> = "UsbDebuggingManager";

        <com.android.server.usb.UsbDebuggingManager: boolean DEBUG> = 0;

        return;
    }
}
