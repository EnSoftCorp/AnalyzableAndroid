public abstract class com.android.internal.policy.impl.WindowOrientationListener extends java.lang.Object
{
    private static final boolean LOG;
    private static final java.lang.String TAG;
    private static final boolean USE_GRAVITY_SENSOR;
    private int mCurrentRotation;
    private boolean mEnabled;
    private android.os.Handler mHandler;
    private final java.lang.Object mLock;
    private int mRate;
    private android.hardware.Sensor mSensor;
    private com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener;
    private android.hardware.SensorManager mSensorManager;

    static void <clinit>()
    {
        boolean $z0;

        <com.android.internal.policy.impl.WindowOrientationListener: java.lang.String TAG> = "WindowOrientationListener";

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.orientation.log", 0);

        <com.android.internal.policy.impl.WindowOrientationListener: boolean LOG> = $z0;

        return;
    }

    public void <init>(android.content.Context, android.os.Handler)
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        android.content.Context r1;
        android.os.Handler r2;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener: void <init>(android.content.Context,android.os.Handler,int)>(r1, r2, 2);

        return;
    }

    private void <init>(android.content.Context, android.os.Handler, int)
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        android.content.Context r1;
        android.os.Handler r2;
        int i0;
        java.lang.Object $r3, $r4;
        android.hardware.SensorManager $r5, $r6;
        android.hardware.Sensor $r7, $r8;
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl $r9;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.impl.WindowOrientationListener: int mCurrentRotation> = -1;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock> = $r3;

        r0.<com.android.internal.policy.impl.WindowOrientationListener: android.os.Handler mHandler> = r2;

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        $r5 = (android.hardware.SensorManager) $r4;

        r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.SensorManager mSensorManager> = $r5;

        r0.<com.android.internal.policy.impl.WindowOrientationListener: int mRate> = i0;

        $r6 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r7 = virtualinvoke $r6.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(1);

        r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor> = $r7;

        $r8 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r8 == null goto label1;

        $r9 = new com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        specialinvoke $r9.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void <init>(com.android.internal.policy.impl.WindowOrientationListener)>(r0);

        r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener> = $r9;

     label1:
        return;
    }

    static java.lang.Object access$100(com.android.internal.policy.impl.WindowOrientationListener)
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.internal.policy.impl.WindowOrientationListener;

        $r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$200()
    {
        boolean $z0;

        $z0 = <com.android.internal.policy.impl.WindowOrientationListener: boolean LOG>;

        return $z0;
    }

    static int access$300(com.android.internal.policy.impl.WindowOrientationListener)
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.WindowOrientationListener;

        $i0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: int mCurrentRotation>;

        return $i0;
    }

    public boolean canDetectOrientation()
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean z0;
        android.hardware.Sensor $r3;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r3 == null goto label8;

     label2:
        z0 = 1;

     label3:
        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        z0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void disable()
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r6;
        android.hardware.Sensor $r3;
        boolean $z0, $z1;
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl $r4;
        android.hardware.SensorManager $r5;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r3 != null goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowOrientationListener", "Cannot detect sensors. Invalid disable");

        exitmonitor r1;

     label2:
        return;

     label3:
        $z0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: boolean mEnabled>;

        if $z0 != 1 goto label5;

        $z1 = <com.android.internal.policy.impl.WindowOrientationListener: boolean LOG>;

        if $z1 == 0 goto label4;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WindowOrientationListener", "WindowOrientationListener disabled");

     label4:
        $r5 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r4 = r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener>;

        virtualinvoke $r5.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r4);

        r0.<com.android.internal.policy.impl.WindowOrientationListener: boolean mEnabled> = 0;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r6 := @caughtexception;

        r2 = $r6;

     label8:
        exitmonitor r1;

     label9:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void enable()
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r9;
        android.hardware.Sensor $r3, $r6;
        boolean $z0, $z1;
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl $r4, $r7;
        android.os.Handler $r5;
        int $i0;
        android.hardware.SensorManager $r8;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r3 != null goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowOrientationListener", "Cannot detect sensors. Not enabled");

        exitmonitor r1;

     label2:
        return;

     label3:
        $z0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: boolean mEnabled>;

        if $z0 != 0 goto label5;

        $z1 = <com.android.internal.policy.impl.WindowOrientationListener: boolean LOG>;

        if $z1 == 0 goto label4;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WindowOrientationListener", "WindowOrientationListener enabled");

     label4:
        $r4 = r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener>;

        staticinvoke <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void access$000(com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl)>($r4);

        $r8 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r7 = r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener>;

        $r6 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor>;

        $i0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: int mRate>;

        $r5 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.os.Handler mHandler>;

        virtualinvoke $r8.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>($r7, $r6, $i0, $r5);

        r0.<com.android.internal.policy.impl.WindowOrientationListener: boolean mEnabled> = 1;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r9 := @caughtexception;

        r2 = $r9;

     label8:
        exitmonitor r1;

     label9:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public int getProposedRotation()
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        int i0;
        boolean $z0;
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl $r3;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: boolean mEnabled>;

        if $z0 == 0 goto label3;

        $r3 = r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener>;

        i0 = virtualinvoke $r3.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int getProposedRotationLocked()>();

        exitmonitor r1;

     label2:
        return i0;

     label3:
        exitmonitor r1;

     label4:
        return -1;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public abstract void onProposedRotationChanged(int);

    public void setCurrentRotation(int)
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        i0 := @parameter0: int;

        r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.internal.policy.impl.WindowOrientationListener: int mCurrentRotation> = i0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
