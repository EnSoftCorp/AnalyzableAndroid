class java.util.Formatter$FormatSpecifierParser extends java.lang.Object
{
    private java.lang.String format;
    private int i;
    private int length;
    private int startIndex;

    void <init>(java.lang.String)
    {
        java.util.Formatter$FormatSpecifierParser r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Formatter$FormatSpecifierParser: java.lang.String format> = r1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r0.<java.util.Formatter$FormatSpecifierParser: int length> = $i0;

        return;
    }

    static int access$000(java.util.Formatter$FormatSpecifierParser)
    {
        java.util.Formatter$FormatSpecifierParser r0;
        int $i0;

        r0 := @parameter0: java.util.Formatter$FormatSpecifierParser;

        $i0 = r0.<java.util.Formatter$FormatSpecifierParser: int i>;

        return $i0;
    }

    private char advance()
    {
        java.util.Formatter$FormatSpecifierParser r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3;
        char $c4;
        java.util.UnknownFormatConversionException $r2;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

        $i2 = r0.<java.util.Formatter$FormatSpecifierParser: int i>;

        $i1 = r0.<java.util.Formatter$FormatSpecifierParser: int length>;

        if $i2 < $i1 goto label1;

        $r2 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.util.UnknownFormatConversionException unknownFormatConversionException()>();

        throw $r2;

     label1:
        r1 = r0.<java.util.Formatter$FormatSpecifierParser: java.lang.String format>;

        i0 = r0.<java.util.Formatter$FormatSpecifierParser: int i>;

        $i3 = i0 + 1;

        r0.<java.util.Formatter$FormatSpecifierParser: int i> = $i3;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        return $c4;
    }

    private int failNextInt()
    {
        java.util.Formatter$FormatSpecifierParser r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

     label1:
        $i0 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: int peek()>();

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(int)>($i0);

        if $z0 == 0 goto label2;

        specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: char advance()>();

        goto label1;

     label2:
        return -1;
    }

    private int nextInt()
    {
        java.util.Formatter$FormatSpecifierParser r0;
        long l0, l1, $l12;
        java.lang.String r1, $r2;
        int i2, $i3, $i4, $i5, $i6, $i8, $i9, $i13;
        char $c7, $c10;
        boolean $z0;
        byte $b11;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

        l0 = 0L;

     label1:
        $i4 = r0.<java.util.Formatter$FormatSpecifierParser: int i>;

        $i3 = r0.<java.util.Formatter$FormatSpecifierParser: int length>;

        if $i4 >= $i3 goto label2;

        $r2 = r0.<java.util.Formatter$FormatSpecifierParser: java.lang.String format>;

        $i6 = r0.<java.util.Formatter$FormatSpecifierParser: int i>;

        $c7 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i6);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c7);

        if $z0 == 0 goto label2;

        l1 = 10L * l0;

        r1 = r0.<java.util.Formatter$FormatSpecifierParser: java.lang.String format>;

        i2 = r0.<java.util.Formatter$FormatSpecifierParser: int i>;

        $i8 = i2 + 1;

        r0.<java.util.Formatter$FormatSpecifierParser: int i> = $i8;

        $c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i9 = -48 + $c10;

        $l12 = (long) $i9;

        l0 = l1 + $l12;

        $b11 = l0 cmp 2147483647L;

        if $b11 <= 0 goto label1;

        $i13 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: int failNextInt()>();

        return $i13;

     label2:
        $i5 = (int) l0;

        return $i5;
    }

    private java.util.Formatter$FormatToken parseArgumentIndexAndFlags(java.util.Formatter$FormatToken)
    {
        java.util.Formatter$FormatSpecifierParser r0;
        java.util.Formatter$FormatToken r1, $r2, $r3, $r4, $r5;
        int i0, i1, i2, i3, $i4, $i5, $i8, $i10, $i11;
        boolean $z0, $z1, $z2;
        java.lang.String $r6;
        java.util.MissingFormatArgumentException $r7;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

        r1 := @parameter0: java.util.Formatter$FormatToken;

        i0 = r0.<java.util.Formatter$FormatSpecifierParser: int i>;

        i1 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: int peek()>();

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(int)>(i1);

        if $z0 == 0 goto label5;

        i3 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: int nextInt()>();

        $i8 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: int peek()>();

        if $i8 != 36 goto label3;

        specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: char advance()>();

        if i3 != -1 goto label1;

        $r7 = new java.util.MissingFormatArgumentException;

        $r6 = virtualinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.lang.String getFormatSpecifierText()>();

        specialinvoke $r7.<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>($r6);

        throw $r7;

     label1:
        $i11 = i3 - 1;

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i11);

        virtualinvoke r1.<java.util.Formatter$FormatToken: void setArgIndex(int)>($i10);

     label2:
        $i4 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: int peek()>();

        $z1 = virtualinvoke r1.<java.util.Formatter$FormatToken: boolean setFlag(int)>($i4);

        if $z1 == 0 goto label6;

        specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: char advance()>();

        goto label2;

     label3:
        if i1 != 48 goto label4;

        r0.<java.util.Formatter$FormatSpecifierParser: int i> = i0;

        goto label2;

     label4:
        $r5 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parseWidth(java.util.Formatter$FormatToken,int)>(r1, i3);

        return $r5;

     label5:
        if i1 != 60 goto label2;

        virtualinvoke r1.<java.util.Formatter$FormatToken: void setArgIndex(int)>(-2);

        specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: char advance()>();

        goto label2;

     label6:
        i2 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: int peek()>();

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(int)>(i2);

        if $z2 == 0 goto label7;

        $i5 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: int nextInt()>();

        $r4 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parseWidth(java.util.Formatter$FormatToken,int)>(r1, $i5);

        return $r4;

     label7:
        if i2 != 46 goto label8;

        $r3 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parsePrecision(java.util.Formatter$FormatToken)>(r1);

        return $r3;

     label8:
        $r2 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parseConversionType(java.util.Formatter$FormatToken)>(r1);

        return $r2;
    }

    private java.util.Formatter$FormatToken parseConversionType(java.util.Formatter$FormatToken)
    {
        java.util.Formatter$FormatSpecifierParser r0;
        java.util.Formatter$FormatToken r1;
        char c0, $c1;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

        r1 := @parameter0: java.util.Formatter$FormatToken;

        c0 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: char advance()>();

        virtualinvoke r1.<java.util.Formatter$FormatToken: void setConversionType(char)>(c0);

        if c0 == 116 goto label1;

        if c0 != 84 goto label2;

     label1:
        $c1 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: char advance()>();

        virtualinvoke r1.<java.util.Formatter$FormatToken: void setDateSuffix(char)>($c1);

     label2:
        return r1;
    }

    private java.util.Formatter$FormatToken parsePrecision(java.util.Formatter$FormatToken)
    {
        java.util.Formatter$FormatSpecifierParser r0;
        java.util.Formatter$FormatToken r1, $r3;
        int $i1, $i2;
        boolean $z0;
        java.util.UnknownFormatConversionException $r2;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

        r1 := @parameter0: java.util.Formatter$FormatToken;

        specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: char advance()>();

        $i1 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: int peek()>();

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(int)>($i1);

        if $z0 == 0 goto label1;

        $i2 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: int nextInt()>();

        virtualinvoke r1.<java.util.Formatter$FormatToken: void setPrecision(int)>($i2);

        $r3 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parseConversionType(java.util.Formatter$FormatToken)>(r1);

        return $r3;

     label1:
        $r2 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.util.UnknownFormatConversionException unknownFormatConversionException()>();

        throw $r2;
    }

    private java.util.Formatter$FormatToken parseWidth(java.util.Formatter$FormatToken, int)
    {
        java.util.Formatter$FormatSpecifierParser r0;
        java.util.Formatter$FormatToken r1, $r2, $r3;
        int i0, $i1;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

        r1 := @parameter0: java.util.Formatter$FormatToken;

        i0 := @parameter1: int;

        virtualinvoke r1.<java.util.Formatter$FormatToken: void setWidth(int)>(i0);

        $i1 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: int peek()>();

        if $i1 != 46 goto label1;

        $r3 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parsePrecision(java.util.Formatter$FormatToken)>(r1);

        return $r3;

     label1:
        $r2 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parseConversionType(java.util.Formatter$FormatToken)>(r1);

        return $r2;
    }

    private int peek()
    {
        java.util.Formatter$FormatSpecifierParser r0;
        int $i0, $i1, $i2;
        java.lang.String $r1;
        char $c3;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

        $i1 = r0.<java.util.Formatter$FormatSpecifierParser: int i>;

        $i0 = r0.<java.util.Formatter$FormatSpecifierParser: int length>;

        if $i1 >= $i0 goto label1;

        $r1 = r0.<java.util.Formatter$FormatSpecifierParser: java.lang.String format>;

        $i2 = r0.<java.util.Formatter$FormatSpecifierParser: int i>;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        return $c3;

     label1:
        return -1;
    }

    private java.util.UnknownFormatConversionException unknownFormatConversionException()
    {
        java.util.Formatter$FormatSpecifierParser r0;
        java.util.UnknownFormatConversionException $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

        $r1 = new java.util.UnknownFormatConversionException;

        $r2 = virtualinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.lang.String getFormatSpecifierText()>();

        specialinvoke $r1.<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    java.lang.String getFormatSpecifierText()
    {
        java.util.Formatter$FormatSpecifierParser r0;
        int $i0, $i1;
        java.lang.String $r1, $r2;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

        $r1 = r0.<java.util.Formatter$FormatSpecifierParser: java.lang.String format>;

        $i1 = r0.<java.util.Formatter$FormatSpecifierParser: int startIndex>;

        $i0 = r0.<java.util.Formatter$FormatSpecifierParser: int i>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0);

        return $r2;
    }

    java.util.Formatter$FormatToken parseFormatToken(int)
    {
        java.util.Formatter$FormatSpecifierParser r0;
        int i0;
        java.util.Formatter$FormatToken $r1, $r2;

        r0 := @this: java.util.Formatter$FormatSpecifierParser;

        i0 := @parameter0: int;

        r0.<java.util.Formatter$FormatSpecifierParser: int startIndex> = i0;

        r0.<java.util.Formatter$FormatSpecifierParser: int i> = i0;

        $r1 = new java.util.Formatter$FormatToken;

        specialinvoke $r1.<java.util.Formatter$FormatToken: void <init>(java.util.Formatter$1)>(null);

        $r2 = specialinvoke r0.<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parseArgumentIndexAndFlags(java.util.Formatter$FormatToken)>($r1);

        return $r2;
    }
}
