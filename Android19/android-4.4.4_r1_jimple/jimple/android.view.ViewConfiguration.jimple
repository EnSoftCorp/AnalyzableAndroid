public class android.view.ViewConfiguration extends java.lang.Object
{
    private static final int DEFAULT_LONG_PRESS_TIMEOUT;
    private static final int DOUBLE_TAP_MIN_TIME;
    private static final int DOUBLE_TAP_SLOP;
    private static final int DOUBLE_TAP_TIMEOUT;
    private static final int DOUBLE_TAP_TOUCH_SLOP;
    private static final int EDGE_SLOP;
    private static final int FADING_EDGE_LENGTH;
    private static final int GLOBAL_ACTIONS_KEY_TIMEOUT;
    private static final int HAS_PERMANENT_MENU_KEY_AUTODETECT;
    private static final int HAS_PERMANENT_MENU_KEY_FALSE;
    private static final int HAS_PERMANENT_MENU_KEY_TRUE;
    private static final int HOVER_TAP_SLOP;
    private static final int HOVER_TAP_TIMEOUT;
    private static final int JUMP_TAP_TIMEOUT;
    private static final int KEY_REPEAT_DELAY;
    private static final int MAXIMUM_DRAWING_CACHE_SIZE;
    private static final int MAXIMUM_FLING_VELOCITY;
    private static final int MINIMUM_FLING_VELOCITY;
    private static final int OVERFLING_DISTANCE;
    private static final int OVERSCROLL_DISTANCE;
    private static final int PAGING_TOUCH_SLOP;
    private static final int PRESSED_STATE_DURATION;
    private static final int SCROLL_BAR_DEFAULT_DELAY;
    private static final int SCROLL_BAR_FADE_DURATION;
    private static final int SCROLL_BAR_SIZE;
    private static final float SCROLL_FRICTION;
    private static final long SEND_RECURRING_ACCESSIBILITY_EVENTS_INTERVAL_MILLIS;
    private static final int TAP_TIMEOUT;
    private static final int TOUCH_SLOP;
    private static final int WINDOW_TOUCH_SLOP;
    private static final int ZOOM_CONTROLS_TIMEOUT;
    static final android.util.SparseArray sConfigurations;
    private final int mDoubleTapSlop;
    private final int mDoubleTapTouchSlop;
    private final int mEdgeSlop;
    private final int mFadingEdgeLength;
    private final boolean mFadingMarqueeEnabled;
    private final int mMaximumDrawingCacheSize;
    private final int mMaximumFlingVelocity;
    private final int mMinimumFlingVelocity;
    private final int mOverflingDistance;
    private final int mOverscrollDistance;
    private final int mPagingTouchSlop;
    private final int mScrollbarSize;
    private final int mTouchSlop;
    private final int mWindowTouchSlop;
    private boolean sHasPermanentMenuKey;
    private boolean sHasPermanentMenuKeySet;

    static void <clinit>()
    {
        android.util.SparseArray $r0;

        <android.view.ViewConfiguration: int ZOOM_CONTROLS_TIMEOUT> = 3000;

        <android.view.ViewConfiguration: int WINDOW_TOUCH_SLOP> = 16;

        <android.view.ViewConfiguration: int TOUCH_SLOP> = 8;

        <android.view.ViewConfiguration: int TAP_TIMEOUT> = 180;

        <android.view.ViewConfiguration: long SEND_RECURRING_ACCESSIBILITY_EVENTS_INTERVAL_MILLIS> = 100L;

        <android.view.ViewConfiguration: float SCROLL_FRICTION> = 0.015F;

        <android.view.ViewConfiguration: int SCROLL_BAR_SIZE> = 10;

        <android.view.ViewConfiguration: int SCROLL_BAR_FADE_DURATION> = 250;

        <android.view.ViewConfiguration: int SCROLL_BAR_DEFAULT_DELAY> = 300;

        <android.view.ViewConfiguration: int PRESSED_STATE_DURATION> = 64;

        <android.view.ViewConfiguration: int PAGING_TOUCH_SLOP> = 16;

        <android.view.ViewConfiguration: int OVERSCROLL_DISTANCE> = 0;

        <android.view.ViewConfiguration: int OVERFLING_DISTANCE> = 6;

        <android.view.ViewConfiguration: int MINIMUM_FLING_VELOCITY> = 50;

        <android.view.ViewConfiguration: int MAXIMUM_FLING_VELOCITY> = 8000;

        <android.view.ViewConfiguration: int MAXIMUM_DRAWING_CACHE_SIZE> = 1536000;

        <android.view.ViewConfiguration: int KEY_REPEAT_DELAY> = 50;

        <android.view.ViewConfiguration: int JUMP_TAP_TIMEOUT> = 500;

        <android.view.ViewConfiguration: int HOVER_TAP_TIMEOUT> = 150;

        <android.view.ViewConfiguration: int HOVER_TAP_SLOP> = 20;

        <android.view.ViewConfiguration: int HAS_PERMANENT_MENU_KEY_TRUE> = 1;

        <android.view.ViewConfiguration: int HAS_PERMANENT_MENU_KEY_FALSE> = 2;

        <android.view.ViewConfiguration: int HAS_PERMANENT_MENU_KEY_AUTODETECT> = 0;

        <android.view.ViewConfiguration: int GLOBAL_ACTIONS_KEY_TIMEOUT> = 500;

        <android.view.ViewConfiguration: int FADING_EDGE_LENGTH> = 12;

        <android.view.ViewConfiguration: int EDGE_SLOP> = 12;

        <android.view.ViewConfiguration: int DOUBLE_TAP_TOUCH_SLOP> = 8;

        <android.view.ViewConfiguration: int DOUBLE_TAP_TIMEOUT> = 300;

        <android.view.ViewConfiguration: int DOUBLE_TAP_SLOP> = 100;

        <android.view.ViewConfiguration: int DOUBLE_TAP_MIN_TIME> = 40;

        <android.view.ViewConfiguration: int DEFAULT_LONG_PRESS_TIMEOUT> = 500;

        $r0 = new android.util.SparseArray;

        specialinvoke $r0.<android.util.SparseArray: void <init>(int)>(2);

        <android.view.ViewConfiguration: android.util.SparseArray sConfigurations> = $r0;

        return;
    }

    public void <init>()
    {
        android.view.ViewConfiguration r0;

        r0 := @this: android.view.ViewConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.ViewConfiguration: int mEdgeSlop> = 12;

        r0.<android.view.ViewConfiguration: int mFadingEdgeLength> = 12;

        r0.<android.view.ViewConfiguration: int mMinimumFlingVelocity> = 50;

        r0.<android.view.ViewConfiguration: int mMaximumFlingVelocity> = 8000;

        r0.<android.view.ViewConfiguration: int mScrollbarSize> = 10;

        r0.<android.view.ViewConfiguration: int mTouchSlop> = 8;

        r0.<android.view.ViewConfiguration: int mDoubleTapTouchSlop> = 8;

        r0.<android.view.ViewConfiguration: int mPagingTouchSlop> = 16;

        r0.<android.view.ViewConfiguration: int mDoubleTapSlop> = 100;

        r0.<android.view.ViewConfiguration: int mWindowTouchSlop> = 16;

        r0.<android.view.ViewConfiguration: int mMaximumDrawingCacheSize> = 1536000;

        r0.<android.view.ViewConfiguration: int mOverscrollDistance> = 0;

        r0.<android.view.ViewConfiguration: int mOverflingDistance> = 6;

        r0.<android.view.ViewConfiguration: boolean mFadingMarqueeEnabled> = 1;

        return;
    }

    private void <init>(android.content.Context)
    {
        android.view.ViewConfiguration r0;
        android.content.Context r1;
        android.content.res.Resources r2;
        android.util.DisplayMetrics r3;
        android.content.res.Configuration r4;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        android.view.Display r5;
        android.graphics.Point r6, $r11;
        android.view.IWindowManager r7;
        boolean z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        android.view.WindowManager $r9;
        java.lang.Object $r10;
        android.os.RemoteException $r12;

        r0 := @this: android.view.ViewConfiguration;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r3 = virtualinvoke r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        r4 = virtualinvoke r2.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        f0 = r3.<android.util.DisplayMetrics: float density>;

        $z1 = virtualinvoke r4.<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>(4);

        if $z1 == 0 goto label07;

        f1 = f0 * 1.5F;

     label01:
        $f3 = 12.0F * f1;

        $f2 = 0.5F + $f3;

        $i0 = (int) $f2;

        r0.<android.view.ViewConfiguration: int mEdgeSlop> = $i0;

        $f4 = 12.0F * f1;

        $f5 = 0.5F + $f4;

        $i1 = (int) $f5;

        r0.<android.view.ViewConfiguration: int mFadingEdgeLength> = $i1;

        $f7 = 50.0F * f0;

        $f6 = 0.5F + $f7;

        $i2 = (int) $f6;

        r0.<android.view.ViewConfiguration: int mMinimumFlingVelocity> = $i2;

        $f8 = 8000.0F * f0;

        $f9 = 0.5F + $f8;

        $i3 = (int) $f9;

        r0.<android.view.ViewConfiguration: int mMaximumFlingVelocity> = $i3;

        $f11 = 10.0F * f0;

        $f10 = 0.5F + $f11;

        $i4 = (int) $f10;

        r0.<android.view.ViewConfiguration: int mScrollbarSize> = $i4;

        $f12 = 100.0F * f1;

        $f15 = 0.5F + $f12;

        $i5 = (int) $f15;

        r0.<android.view.ViewConfiguration: int mDoubleTapSlop> = $i5;

        $f13 = 16.0F * f1;

        $f14 = 0.5F + $f13;

        $i6 = (int) $f14;

        r0.<android.view.ViewConfiguration: int mWindowTouchSlop> = $i6;

        $r10 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r9 = (android.view.WindowManager) $r10;

        r5 = interfaceinvoke $r9.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $r11 = new android.graphics.Point;

        specialinvoke $r11.<android.graphics.Point: void <init>()>();

        r6 = $r11;

        virtualinvoke r5.<android.view.Display: void getRealSize(android.graphics.Point)>(r6);

        $i9 = r6.<android.graphics.Point: int x>;

        $i8 = 4 * $i9;

        $i7 = r6.<android.graphics.Point: int y>;

        $i11 = $i8 * $i7;

        r0.<android.view.ViewConfiguration: int mMaximumDrawingCacheSize> = $i11;

        $f17 = 0.0F * f1;

        $f16 = 0.5F + $f17;

        $i10 = (int) $f16;

        r0.<android.view.ViewConfiguration: int mOverscrollDistance> = $i10;

        $f19 = 6.0F * f1;

        $f18 = 0.5F + $f19;

        $i12 = (int) $f18;

        r0.<android.view.ViewConfiguration: int mOverflingDistance> = $i12;

        $z2 = r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKeySet>;

        if $z2 != 0 goto label06;

        $i16 = virtualinvoke r2.<android.content.res.Resources: int getInteger(int)>(17694793);

        tableswitch($i16)
        {
            case 1: goto label10;
            case 2: goto label11;
            default: goto label02;
        };

     label02:
        r7 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

     label03:
        $z4 = interfaceinvoke r7.<android.view.IWindowManager: boolean hasNavigationBar()>();

        if $z4 != 0 goto label08;

     label04:
        z0 = 1;

     label05:
        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKey> = z0;

        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKeySet> = 1;

     label06:
        $z3 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17891347);

        r0.<android.view.ViewConfiguration: boolean mFadingMarqueeEnabled> = $z3;

        $i15 = virtualinvoke r2.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104904);

        r0.<android.view.ViewConfiguration: int mTouchSlop> = $i15;

        $i14 = r0.<android.view.ViewConfiguration: int mTouchSlop>;

        $i13 = 2 * $i14;

        r0.<android.view.ViewConfiguration: int mPagingTouchSlop> = $i13;

        $i17 = r0.<android.view.ViewConfiguration: int mTouchSlop>;

        r0.<android.view.ViewConfiguration: int mDoubleTapTouchSlop> = $i17;

        return;

     label07:
        f1 = f0;

        goto label01;

     label08:
        z0 = 0;

        goto label05;

     label09:
        $r12 := @caughtexception;

        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKey> = 0;

        goto label06;

     label10:
        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKey> = 1;

        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKeySet> = 1;

        goto label06;

     label11:
        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKey> = 0;

        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKeySet> = 1;

        goto label06;

        catch android.os.RemoteException from label03 to label04 with label09;
        catch android.os.RemoteException from label05 to label06 with label09;
    }

    public static android.view.ViewConfiguration get(android.content.Context)
    {
        android.content.Context r0;
        int i0;
        android.view.ViewConfiguration r1, $r6;
        android.content.res.Resources $r2;
        android.util.DisplayMetrics $r3;
        float $f0, $f1;
        android.util.SparseArray $r4, $r7;
        java.lang.Object $r5;

        r0 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r3.<android.util.DisplayMetrics: float density>;

        $f1 = 100.0F * $f0;

        i0 = (int) $f1;

        $r4 = <android.view.ViewConfiguration: android.util.SparseArray sConfigurations>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.view.ViewConfiguration) $r5;

        if r1 != null goto label1;

        $r6 = new android.view.ViewConfiguration;

        specialinvoke $r6.<android.view.ViewConfiguration: void <init>(android.content.Context)>(r0);

        r1 = $r6;

        $r7 = <android.view.ViewConfiguration: android.util.SparseArray sConfigurations>;

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

     label1:
        return r1;
    }

    public static int getDoubleTapMinTime()
    {
        return 40;
    }

    public static int getDoubleTapSlop()
    {
        return 100;
    }

    public static int getDoubleTapTimeout()
    {
        return 300;
    }

    public static int getEdgeSlop()
    {
        return 12;
    }

    public static int getFadingEdgeLength()
    {
        return 12;
    }

    public static long getGlobalActionKeyTimeout()
    {
        return 500L;
    }

    public static int getHoverTapSlop()
    {
        return 20;
    }

    public static int getHoverTapTimeout()
    {
        return 150;
    }

    public static int getJumpTapTimeout()
    {
        return 500;
    }

    public static int getKeyRepeatDelay()
    {
        return 50;
    }

    public static int getKeyRepeatTimeout()
    {
        int $i0;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        return $i0;
    }

    public static int getLongPressTimeout()
    {
        int $i0;

        $i0 = staticinvoke <android.app.AppGlobals: int getIntCoreSetting(java.lang.String,int)>("long_press_timeout", 500);

        return $i0;
    }

    public static int getMaximumDrawingCacheSize()
    {
        return 1536000;
    }

    public static int getMaximumFlingVelocity()
    {
        return 8000;
    }

    public static int getMinimumFlingVelocity()
    {
        return 50;
    }

    public static int getPressedStateDuration()
    {
        return 64;
    }

    public static int getScrollBarFadeDuration()
    {
        return 250;
    }

    public static int getScrollBarSize()
    {
        return 10;
    }

    public static int getScrollDefaultDelay()
    {
        return 300;
    }

    public static float getScrollFriction()
    {
        return 0.015F;
    }

    public static long getSendRecurringAccessibilityEventsInterval()
    {
        return 100L;
    }

    public static int getTapTimeout()
    {
        return 180;
    }

    public static int getTouchSlop()
    {
        return 8;
    }

    public static int getWindowTouchSlop()
    {
        return 16;
    }

    public static long getZoomControlsTimeout()
    {
        return 3000L;
    }

    public int getScaledDoubleTapSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mDoubleTapSlop>;

        return $i0;
    }

    public int getScaledDoubleTapTouchSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mDoubleTapTouchSlop>;

        return $i0;
    }

    public int getScaledEdgeSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mEdgeSlop>;

        return $i0;
    }

    public int getScaledFadingEdgeLength()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mFadingEdgeLength>;

        return $i0;
    }

    public int getScaledMaximumDrawingCacheSize()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mMaximumDrawingCacheSize>;

        return $i0;
    }

    public int getScaledMaximumFlingVelocity()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mMaximumFlingVelocity>;

        return $i0;
    }

    public int getScaledMinimumFlingVelocity()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mMinimumFlingVelocity>;

        return $i0;
    }

    public int getScaledOverflingDistance()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mOverflingDistance>;

        return $i0;
    }

    public int getScaledOverscrollDistance()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mOverscrollDistance>;

        return $i0;
    }

    public int getScaledPagingTouchSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mPagingTouchSlop>;

        return $i0;
    }

    public int getScaledScrollBarSize()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mScrollbarSize>;

        return $i0;
    }

    public int getScaledTouchSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mTouchSlop>;

        return $i0;
    }

    public int getScaledWindowTouchSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mWindowTouchSlop>;

        return $i0;
    }

    public boolean hasPermanentMenuKey()
    {
        android.view.ViewConfiguration r0;
        boolean $z0;

        r0 := @this: android.view.ViewConfiguration;

        $z0 = r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKey>;

        return $z0;
    }

    public boolean isFadingMarqueeEnabled()
    {
        android.view.ViewConfiguration r0;
        boolean $z0;

        r0 := @this: android.view.ViewConfiguration;

        $z0 = r0.<android.view.ViewConfiguration: boolean mFadingMarqueeEnabled>;

        return $z0;
    }
}
