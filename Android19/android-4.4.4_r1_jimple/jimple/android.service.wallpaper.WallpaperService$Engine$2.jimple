class android.service.wallpaper.WallpaperService$Engine$2 extends com.android.internal.view.BaseSurfaceHolder
{
    final android.service.wallpaper.WallpaperService$Engine this$1;

    void <init>(android.service.wallpaper.WallpaperService$Engine)
    {
        android.service.wallpaper.WallpaperService$Engine$2 r0;
        android.service.wallpaper.WallpaperService$Engine r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$2;

        r1 := @parameter0: android.service.wallpaper.WallpaperService$Engine;

        r0.<android.service.wallpaper.WallpaperService$Engine$2: android.service.wallpaper.WallpaperService$Engine this$1> = r1;

        specialinvoke r0.<com.android.internal.view.BaseSurfaceHolder: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine$2: int mRequestedFormat> = 2;

        return;
    }

    public boolean isCreating()
    {
        android.service.wallpaper.WallpaperService$Engine$2 r0;
        android.service.wallpaper.WallpaperService$Engine $r1;
        boolean $z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$2;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine$2: android.service.wallpaper.WallpaperService$Engine this$1>;

        $z0 = $r1.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating>;

        return $z0;
    }

    public boolean onAllowLockCanvas()
    {
        android.service.wallpaper.WallpaperService$Engine$2 r0;
        android.service.wallpaper.WallpaperService$Engine $r1;
        boolean $z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$2;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine$2: android.service.wallpaper.WallpaperService$Engine this$1>;

        $z0 = $r1.<android.service.wallpaper.WallpaperService$Engine: boolean mDrawingAllowed>;

        return $z0;
    }

    public void onRelayoutContainer()
    {
        android.service.wallpaper.WallpaperService$Engine$2 r0;
        android.os.Message r1;
        android.service.wallpaper.WallpaperService$Engine $r2, $r4;
        com.android.internal.os.HandlerCaller $r3, $r5;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$2;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine$2: android.service.wallpaper.WallpaperService$Engine this$1>;

        $r3 = $r2.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        r1 = virtualinvoke $r3.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessage(int)>(10000);

        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine$2: android.service.wallpaper.WallpaperService$Engine this$1>;

        $r5 = $r4.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        virtualinvoke $r5.<com.android.internal.os.HandlerCaller: void sendMessage(android.os.Message)>(r1);

        return;
    }

    public void onUpdateSurface()
    {
        android.service.wallpaper.WallpaperService$Engine$2 r0;
        android.os.Message r1;
        android.service.wallpaper.WallpaperService$Engine $r2, $r4;
        com.android.internal.os.HandlerCaller $r3, $r5;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$2;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine$2: android.service.wallpaper.WallpaperService$Engine this$1>;

        $r3 = $r2.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        r1 = virtualinvoke $r3.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessage(int)>(10000);

        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine$2: android.service.wallpaper.WallpaperService$Engine this$1>;

        $r5 = $r4.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        virtualinvoke $r5.<com.android.internal.os.HandlerCaller: void sendMessage(android.os.Message)>(r1);

        return;
    }

    public void setFixedSize(int, int)
    {
        android.service.wallpaper.WallpaperService$Engine$2 r0;
        int i0, i1;
        android.service.wallpaper.WallpaperService$Engine $r1;
        boolean $z0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine$2: android.service.wallpaper.WallpaperService$Engine this$1>;

        $z0 = $r1.<android.service.wallpaper.WallpaperService$Engine: boolean mFixedSizeAllowed>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Wallpapers currently only support sizing from layout");

        throw $r2;

     label1:
        specialinvoke r0.<com.android.internal.view.BaseSurfaceHolder: void setFixedSize(int,int)>(i0, i1);

        return;
    }

    public void setKeepScreenOn(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine$2 r0;
        boolean z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$2;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Wallpapers do not support keep screen on");

        throw $r1;
    }
}
