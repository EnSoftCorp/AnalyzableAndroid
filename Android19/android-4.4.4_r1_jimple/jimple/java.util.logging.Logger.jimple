public class java.util.logging.Logger extends java.lang.Object
{
    private static final java.util.logging.Handler[] EMPTY_HANDLERS_ARRAY;
    private static final dalvik.system.DalvikLogHandler GENERAL_LOG_HANDLER;
    public static final java.lang.String GLOBAL_LOGGER_NAME;
    public static final java.util.logging.Logger global;
    private final java.lang.String androidTag;
    final java.util.List children;
    private volatile dalvik.system.DalvikLogHandler dalvikLogHandler;
    private java.util.logging.Filter filter;
    private final java.util.List handlers;
    private boolean isNamed;
    volatile int levelIntVal;
    volatile java.util.logging.Level levelObjVal;
    private volatile java.lang.String name;
    private boolean notifyParentHandlers;
    java.util.logging.Logger parent;
    private volatile java.util.ResourceBundle resourceBundle;
    private volatile java.lang.String resourceBundleName;

    static void <clinit>()
    {
        java.util.logging.Logger$1 $r0;
        java.util.logging.Logger $r1;
        java.util.logging.Handler[] $r2;

        <java.util.logging.Logger: java.lang.String GLOBAL_LOGGER_NAME> = "global";

        $r0 = new java.util.logging.Logger$1;

        specialinvoke $r0.<java.util.logging.Logger$1: void <init>()>();

        <java.util.logging.Logger: dalvik.system.DalvikLogHandler GENERAL_LOG_HANDLER> = $r0;

        $r1 = new java.util.logging.Logger;

        specialinvoke $r1.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String)>("global", null);

        <java.util.logging.Logger: java.util.logging.Logger global> = $r1;

        $r2 = newarray (java.util.logging.Handler)[0];

        <java.util.logging.Logger: java.util.logging.Handler[] EMPTY_HANDLERS_ARRAY> = $r2;

        return;
    }

    protected void <init>(java.lang.String, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2, $r7;
        java.util.logging.Level $r3;
        int $i0;
        java.util.concurrent.CopyOnWriteArrayList $r4;
        java.util.ArrayList $r5;
        dalvik.system.DalvikLogHandler $r6;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $i0 = virtualinvoke $r3.<java.util.logging.Level: int intValue()>();

        r0.<java.util.logging.Logger: int levelIntVal> = $i0;

        $r4 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<java.util.logging.Logger: java.util.List handlers> = $r4;

        r0.<java.util.logging.Logger: boolean notifyParentHandlers> = 1;

        r0.<java.util.logging.Logger: boolean isNamed> = 1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<java.util.logging.Logger: java.util.List children> = $r5;

        $r6 = <java.util.logging.Logger: dalvik.system.DalvikLogHandler GENERAL_LOG_HANDLER>;

        r0.<java.util.logging.Logger: dalvik.system.DalvikLogHandler dalvikLogHandler> = $r6;

        r0.<java.util.logging.Logger: java.lang.String name> = r1;

        specialinvoke r0.<java.util.logging.Logger: void initResourceBundle(java.lang.String)>(r2);

        $r7 = staticinvoke <dalvik.system.DalvikLogging: java.lang.String loggerNameToTag(java.lang.String)>(r1);

        r0.<java.util.logging.Logger: java.lang.String androidTag> = $r7;

        virtualinvoke r0.<java.util.logging.Logger: void updateDalvikLogHandler()>();

        return;
    }

    static java.lang.String access$000(java.util.logging.Logger)
    {
        java.util.logging.Logger r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.logging.Logger;

        $r1 = r0.<java.util.logging.Logger: java.lang.String name>;

        return $r1;
    }

    static void access$100(java.util.logging.Logger, java.util.logging.LogRecord)
    {
        java.util.logging.Logger r0;
        java.util.logging.LogRecord r1;

        r0 := @parameter0: java.util.logging.Logger;

        r1 := @parameter1: java.util.logging.LogRecord;

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r1);

        return;
    }

    public static java.util.logging.Logger getAnonymousLogger()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger(java.lang.String)>(null);

        return $r0;
    }

    public static java.util.logging.Logger getAnonymousLogger(java.lang.String)
    {
        java.lang.String r0;
        java.util.logging.Logger r1, $r3, $r4;
        java.util.logging.LogManager r2;

        r0 := @parameter0: java.lang.String;

        $r3 = new java.util.logging.Logger;

        specialinvoke $r3.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String)>(null, r0);

        r1 = $r3;

        r1.<java.util.logging.Logger: boolean isNamed> = 0;

        r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        $r4 = virtualinvoke r2.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>("");

        virtualinvoke r2.<java.util.logging.LogManager: void setParent(java.util.logging.Logger,java.util.logging.Logger)>(r1, $r4);

        return r1;
    }

    public static java.util.logging.Logger getGlobal()
    {
        java.util.logging.Logger $r0;

        $r0 = <java.util.logging.Logger: java.util.logging.Logger global>;

        return $r0;
    }

    public static java.util.logging.Logger getLogger(java.lang.String)
    {
        java.lang.String r0;
        java.util.logging.LogManager $r1;
        java.util.logging.Logger $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        $r2 = virtualinvoke $r1.<java.util.logging.LogManager: java.util.logging.Logger getOrCreate(java.lang.String,java.lang.String)>(r0, null);

        return $r2;
    }

    public static java.util.logging.Logger getLogger(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.util.logging.Logger r2;
        java.util.logging.LogManager $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        r2 = virtualinvoke $r3.<java.util.logging.LogManager: java.util.logging.Logger getOrCreate(java.lang.String,java.lang.String)>(r0, r1);

        specialinvoke r2.<java.util.logging.Logger: void initResourceBundle(java.lang.String)>(r1);

        return r2;
    }

    private void initResourceBundle(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r3, $r13;
        java.lang.Throwable r2, $r12;
        boolean z0;
        java.util.ResourceBundle $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label01:
        r3 = r0.<java.util.logging.Logger: java.lang.String resourceBundleName>;

     label02:
        if r3 == null goto label08;

     label03:
        z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

     label04:
        if z0 == 0 goto label06;

     label05:
        exitmonitor r0;

        return;

     label06:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource bundle name \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is inconsistent with the existing \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r5;

     label07:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r0;

        throw r2;

     label08:
        if r1 == null goto label05;

     label09:
        $r4 = staticinvoke <java.util.logging.Logger: java.util.ResourceBundle loadResourceBundle(java.lang.String)>(r1);

        r0.<java.util.logging.Logger: java.util.ResourceBundle resourceBundle> = $r4;

        r0.<java.util.logging.Logger: java.lang.String resourceBundleName> = r1;

     label10:
        goto label05;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
    }

    private boolean internalIsLoggable(java.util.logging.Level)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1, $r2;
        int i0, $i1, $i2;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        i0 = r0.<java.util.logging.Logger: int levelIntVal>;

        $r2 = <java.util.logging.Level: java.util.logging.Level OFF>;

        $i1 = virtualinvoke $r2.<java.util.logging.Level: int intValue()>();

        if i0 != $i1 goto label2;

     label1:
        return 0;

     label2:
        $i2 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();

        if $i2 < i0 goto label1;

        return 1;
    }

    static java.util.ResourceBundle loadResourceBundle(java.lang.String)
    {
        java.lang.String r0, $r13;
        java.lang.ClassLoader r1, r2;
        java.util.ResourceBundle r4, r6;
        java.lang.Thread $r7;
        java.util.MissingResourceException $r8, $r16, $r17;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        java.util.Locale $r14, $r15;

        r0 := @parameter0: java.lang.String;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if r1 == null goto label4;

     label1:
        $r15 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r6 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r0, $r15, r1);

     label2:
        return r6;

     label3:
        $r16 := @caughtexception;

     label4:
        r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        if r2 == null goto label8;

     label5:
        $r14 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r4 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r0, $r14, r2);

     label6:
        return r4;

     label7:
        $r17 := @caughtexception;

     label8:
        $r8 = new java.util.MissingResourceException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load the specified resource bundle \"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r13, r0, null);

        throw $r8;

        catch java.util.MissingResourceException from label1 to label2 with label3;
        catch java.util.MissingResourceException from label5 to label6 with label7;
    }

    private void setResourceBundle(java.util.logging.LogRecord)
    {
        java.util.logging.Logger r0, r2;
        java.util.logging.LogRecord r1;
        java.lang.String r3;
        java.util.ResourceBundle $r4;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.LogRecord;

        r2 = r0;

     label1:
        if r2 == null goto label2;

        r3 = r2.<java.util.logging.Logger: java.lang.String resourceBundleName>;

        if r3 == null goto label3;

        $r4 = r2.<java.util.logging.Logger: java.util.ResourceBundle resourceBundle>;

        virtualinvoke r1.<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>($r4);

        virtualinvoke r1.<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>(r3);

     label2:
        return;

     label3:
        r2 = r2.<java.util.logging.Logger: java.util.logging.Logger parent>;

        goto label1;
    }

    public void addHandler(java.util.logging.Handler)
    {
        java.util.logging.Logger r0;
        java.util.logging.Handler r1;
        boolean $z0;
        java.util.List $r2;
        java.util.logging.LogManager $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Handler;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("handler == null");

        throw $r4;

     label1:
        $z0 = r0.<java.util.logging.Logger: boolean isNamed>;

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r3.<java.util.logging.LogManager: void checkAccess()>();

     label2:
        $r2 = r0.<java.util.logging.Logger: java.util.List handlers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        virtualinvoke r0.<java.util.logging.Logger: void updateDalvikLogHandler()>();

        return;
    }

    public void config(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r2, r1);

        return;
    }

    public void entering(java.lang.String, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2, $r7;
        java.util.logging.LogRecord r3, $r5;
        java.util.logging.Level $r4, $r6;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>($r4);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = new java.util.logging.LogRecord;

        $r6 = <java.util.logging.Level: java.util.logging.Level FINER>;

        specialinvoke $r5.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r6, "ENTRY");

        r3 = $r5;

        $r7 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r3.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r7);

        virtualinvoke r3.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r1);

        virtualinvoke r3.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r2);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r3);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r3);

        return;
    }

    public void entering(java.lang.String, java.lang.String, java.lang.Object)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2, $r8;
        java.lang.Object r3;
        java.util.logging.LogRecord r4, $r6;
        java.util.logging.Level $r5, $r7;
        boolean $z0;
        java.lang.Object[] $r9;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r5 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>($r5);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r6 = new java.util.logging.LogRecord;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINER>;

        specialinvoke $r6.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r7, "ENTRY {0}");

        r4 = $r6;

        $r8 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r4.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r8);

        virtualinvoke r4.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r1);

        virtualinvoke r4.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r2);

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r3;

        virtualinvoke r4.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>($r9);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r4);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r4);

        return;
    }

    public void entering(java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2, r4, $r10;
        java.lang.Object[] r3;
        java.lang.StringBuilder r5, $r11, $r12, $r13;
        int i0, $i1;
        java.util.logging.LogRecord r6, $r8;
        java.util.logging.Level $r7, $r9;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        $r7 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>($r7);

        if $z0 != 0 goto label1;

        return;

     label1:
        r4 = "ENTRY";

        if r3 == null goto label4;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("ENTRY");

        r5 = $r11;

        i0 = 0;

     label2:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label3;

        $r13 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        i0 = i0 + 1;

        goto label2;

     label3:
        r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r8 = new java.util.logging.LogRecord;

        $r9 = <java.util.logging.Level: java.util.logging.Level FINER>;

        specialinvoke $r8.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r9, r4);

        r6 = $r8;

        $r10 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r6.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r10);

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r1);

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r2);

        virtualinvoke r6.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r3);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r6);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r6);

        return;
    }

    public void exiting(java.lang.String, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2, $r7;
        java.util.logging.LogRecord r3, $r5;
        java.util.logging.Level $r4, $r6;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>($r4);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = new java.util.logging.LogRecord;

        $r6 = <java.util.logging.Level: java.util.logging.Level FINER>;

        specialinvoke $r5.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r6, "RETURN");

        r3 = $r5;

        $r7 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r3.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r7);

        virtualinvoke r3.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r1);

        virtualinvoke r3.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r2);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r3);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r3);

        return;
    }

    public void exiting(java.lang.String, java.lang.String, java.lang.Object)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2, $r8;
        java.lang.Object r3;
        java.util.logging.LogRecord r4, $r6;
        java.util.logging.Level $r5, $r7;
        boolean $z0;
        java.lang.Object[] $r9;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r5 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>($r5);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r6 = new java.util.logging.LogRecord;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINER>;

        specialinvoke $r6.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r7, "RETURN {0}");

        r4 = $r6;

        $r8 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r4.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r8);

        virtualinvoke r4.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r1);

        virtualinvoke r4.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r2);

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r3;

        virtualinvoke r4.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>($r9);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r4);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r4);

        return;
    }

    public void fine(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r2, r1);

        return;
    }

    public void finer(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r2, r1);

        return;
    }

    public void finest(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r2, r1);

        return;
    }

    public java.util.logging.Filter getFilter()
    {
        java.util.logging.Logger r0;
        java.util.logging.Filter $r1;

        r0 := @this: java.util.logging.Logger;

        $r1 = r0.<java.util.logging.Logger: java.util.logging.Filter filter>;

        return $r1;
    }

    public java.util.logging.Handler[] getHandlers()
    {
        java.util.logging.Logger r0;
        java.util.logging.Handler[] $r1, $r4;
        java.util.List $r2;
        java.lang.Object[] $r3;

        r0 := @this: java.util.logging.Logger;

        $r2 = r0.<java.util.logging.Logger: java.util.List handlers>;

        $r1 = <java.util.logging.Logger: java.util.logging.Handler[] EMPTY_HANDLERS_ARRAY>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r4 = (java.util.logging.Handler[]) $r3;

        return $r4;
    }

    public java.util.logging.Level getLevel()
    {
        java.util.logging.Logger r0;
        java.util.logging.Level $r1;

        r0 := @this: java.util.logging.Logger;

        $r1 = r0.<java.util.logging.Logger: java.util.logging.Level levelObjVal>;

        return $r1;
    }

    public java.lang.String getName()
    {
        java.util.logging.Logger r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.Logger;

        $r1 = r0.<java.util.logging.Logger: java.lang.String name>;

        return $r1;
    }

    public java.util.logging.Logger getParent()
    {
        java.util.logging.Logger r0, $r1;

        r0 := @this: java.util.logging.Logger;

        $r1 = r0.<java.util.logging.Logger: java.util.logging.Logger parent>;

        return $r1;
    }

    public java.util.ResourceBundle getResourceBundle()
    {
        java.util.logging.Logger r0;
        java.util.ResourceBundle $r1;

        r0 := @this: java.util.logging.Logger;

        $r1 = r0.<java.util.logging.Logger: java.util.ResourceBundle resourceBundle>;

        return $r1;
    }

    public java.lang.String getResourceBundleName()
    {
        java.util.logging.Logger r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.Logger;

        $r1 = r0.<java.util.logging.Logger: java.lang.String resourceBundleName>;

        return $r1;
    }

    public boolean getUseParentHandlers()
    {
        java.util.logging.Logger r0;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        $z0 = r0.<java.util.logging.Logger: boolean notifyParentHandlers>;

        return $z0;
    }

    public void info(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r2, r1);

        return;
    }

    public boolean isLoggable(java.util.logging.Level)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        return $z0;
    }

    public void log(java.util.logging.Level, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, $r3;
        boolean $z0;
        dalvik.system.DalvikLogHandler $r4;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<java.util.logging.Logger: dalvik.system.DalvikLogHandler dalvikLogHandler>;

        $r3 = r0.<java.util.logging.Logger: java.lang.String androidTag>;

        interfaceinvoke $r4.<dalvik.system.DalvikLogHandler: void publish(java.util.logging.Logger,java.lang.String,java.util.logging.Level,java.lang.String)>(r0, $r3, r1, r2);

        return;
    }

    public void log(java.util.logging.Level, java.lang.String, java.lang.Object)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, $r6;
        java.lang.Object r3;
        java.util.logging.LogRecord r4, $r5;
        boolean $z0;
        java.lang.Object[] $r7;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = new java.util.logging.LogRecord;

        specialinvoke $r5.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r2);

        r4 = $r5;

        $r6 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r4.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r6);

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r3;

        virtualinvoke r4.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>($r7);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r4);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r4);

        return;
    }

    public void log(java.util.logging.Level, java.lang.String, java.lang.Throwable)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, $r6;
        java.lang.Throwable r3;
        java.util.logging.LogRecord r4, $r5;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = new java.util.logging.LogRecord;

        specialinvoke $r5.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r2);

        r4 = $r5;

        $r6 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r4.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r6);

        virtualinvoke r4.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r3);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r4);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r4);

        return;
    }

    public void log(java.util.logging.Level, java.lang.String, java.lang.Object[])
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, $r6;
        java.lang.Object[] r3;
        java.util.logging.LogRecord r4, $r5;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = new java.util.logging.LogRecord;

        specialinvoke $r5.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r2);

        r4 = $r5;

        $r6 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r4.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r6);

        virtualinvoke r4.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r3);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r4);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r4);

        return;
    }

    public void log(java.util.logging.LogRecord)
    {
        java.util.logging.Logger r0, r4, r5;
        java.util.logging.LogRecord r1;
        java.util.logging.Filter r2;
        java.util.logging.Handler[] r3, r6;
        int i0, i1, i2, i3;
        java.util.logging.Level $r7;
        boolean $z0, $z1, $z2;
        java.util.logging.Handler $r8, $r9;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.LogRecord;

        $r7 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>($r7);

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        r2 = r0.<java.util.logging.Logger: java.util.logging.Filter filter>;

        if r2 == null goto label3;

        $z2 = interfaceinvoke r2.<java.util.logging.Filter: boolean isLoggable(java.util.logging.LogRecord)>(r1);

        if $z2 == 0 goto label1;

     label3:
        r3 = virtualinvoke r0.<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>();

        i0 = lengthof r3;

        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        $r8 = r3[i1];

        virtualinvoke $r8.<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>(r1);

        i1 = i1 + 1;

        goto label4;

     label5:
        r4 = r0;

        r5 = r4.<java.util.logging.Logger: java.util.logging.Logger parent>;

     label6:
        if r5 == null goto label1;

        $z1 = virtualinvoke r4.<java.util.logging.Logger: boolean getUseParentHandlers()>();

        if $z1 == 0 goto label1;

        r6 = virtualinvoke r5.<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>();

        i2 = lengthof r6;

        i3 = 0;

     label7:
        if i3 >= i2 goto label8;

        $r9 = r6[i3];

        virtualinvoke $r9.<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>(r1);

        i3 = i3 + 1;

        goto label7;

     label8:
        r4 = r5;

        r5 = r4.<java.util.logging.Logger: java.util.logging.Logger parent>;

        goto label6;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, $r7;
        java.util.logging.LogRecord r5, $r6;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r6 = new java.util.logging.LogRecord;

        specialinvoke $r6.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r4);

        r5 = $r6;

        $r7 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r5.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r7);

        virtualinvoke r5.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);

        virtualinvoke r5.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r5);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r5);

        return;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, $r8;
        java.lang.Object r5;
        java.util.logging.LogRecord r6, $r7;
        boolean $z0;
        java.lang.Object[] $r9;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r7 = new java.util.logging.LogRecord;

        specialinvoke $r7.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r4);

        r6 = $r7;

        $r8 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r6.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r8);

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r5;

        virtualinvoke r6.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>($r9);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r6);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r6);

        return;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, $r8;
        java.lang.Throwable r5;
        java.util.logging.LogRecord r6, $r7;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.Throwable;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r7 = new java.util.logging.LogRecord;

        specialinvoke $r7.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r4);

        r6 = $r7;

        $r8 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r6.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r8);

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);

        virtualinvoke r6.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r5);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r6);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r6);

        return;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, $r8;
        java.lang.Object[] r5;
        java.util.logging.LogRecord r6, $r7;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.Object[];

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r7 = new java.util.logging.LogRecord;

        specialinvoke $r7.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r4);

        r6 = $r7;

        $r8 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r6.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r8);

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);

        virtualinvoke r6.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r5);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r6);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r6);

        return;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, r5, $r9;
        java.util.logging.LogRecord r6, $r8;
        boolean $z0;
        java.util.ResourceBundle $r10;
        java.util.MissingResourceException $r11;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r8 = new java.util.logging.LogRecord;

        specialinvoke $r8.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r5);

        r6 = $r8;

        if r4 == null goto label4;

     label2:
        $r10 = staticinvoke <java.util.logging.Logger: java.util.ResourceBundle loadResourceBundle(java.lang.String)>(r4);

        virtualinvoke r6.<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>($r10);

     label3:
        virtualinvoke r6.<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>(r4);

     label4:
        $r9 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r6.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r9);

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);

        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r6);

        return;

     label5:
        $r11 := @caughtexception;

        goto label3;

        catch java.util.MissingResourceException from label2 to label3 with label5;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, r5, $r10;
        java.lang.Object r6;
        java.util.logging.LogRecord r7, $r9;
        boolean $z0;
        java.lang.Object[] $r11;
        java.util.ResourceBundle $r12;
        java.util.MissingResourceException $r13;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r9 = new java.util.logging.LogRecord;

        specialinvoke $r9.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r5);

        r7 = $r9;

        if r4 == null goto label4;

     label2:
        $r12 = staticinvoke <java.util.logging.Logger: java.util.ResourceBundle loadResourceBundle(java.lang.String)>(r4);

        virtualinvoke r7.<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>($r12);

     label3:
        virtualinvoke r7.<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>(r4);

     label4:
        $r10 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r7.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r10);

        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);

        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r6;

        virtualinvoke r7.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>($r11);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r7);

        return;

     label5:
        $r13 := @caughtexception;

        goto label3;

        catch java.util.MissingResourceException from label2 to label3 with label5;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, r5, $r10;
        java.lang.Throwable r6;
        java.util.logging.LogRecord r7, $r9;
        boolean $z0;
        java.util.ResourceBundle $r11;
        java.util.MissingResourceException $r12;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.Throwable;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r9 = new java.util.logging.LogRecord;

        specialinvoke $r9.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r5);

        r7 = $r9;

        if r4 == null goto label4;

     label2:
        $r11 = staticinvoke <java.util.logging.Logger: java.util.ResourceBundle loadResourceBundle(java.lang.String)>(r4);

        virtualinvoke r7.<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>($r11);

     label3:
        virtualinvoke r7.<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>(r4);

     label4:
        $r10 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r7.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r10);

        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);

        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);

        virtualinvoke r7.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r6);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r7);

        return;

     label5:
        $r12 := @caughtexception;

        goto label3;

        catch java.util.MissingResourceException from label2 to label3 with label5;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, r5, $r10;
        java.lang.Object[] r6;
        java.util.logging.LogRecord r7, $r9;
        boolean $z0;
        java.util.ResourceBundle $r11;
        java.util.MissingResourceException $r12;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.Object[];

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r9 = new java.util.logging.LogRecord;

        specialinvoke $r9.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r5);

        r7 = $r9;

        if r4 == null goto label4;

     label2:
        $r11 = staticinvoke <java.util.logging.Logger: java.util.ResourceBundle loadResourceBundle(java.lang.String)>(r4);

        virtualinvoke r7.<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>($r11);

     label3:
        virtualinvoke r7.<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>(r4);

     label4:
        $r10 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r7.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r10);

        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);

        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);

        virtualinvoke r7.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r6);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r7);

        return;

     label5:
        $r12 := @caughtexception;

        goto label3;

        catch java.util.MissingResourceException from label2 to label3 with label5;
    }

    public void removeHandler(java.util.logging.Handler)
    {
        java.util.logging.Logger r0;
        java.util.logging.Handler r1;
        boolean $z0;
        java.util.List $r2;
        java.util.logging.LogManager $r3;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Handler;

        $z0 = r0.<java.util.logging.Logger: boolean isNamed>;

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r3.<java.util.logging.LogManager: void checkAccess()>();

     label1:
        if r1 != null goto label2;

        return;

     label2:
        $r2 = r0.<java.util.logging.Logger: java.util.List handlers>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        virtualinvoke r0.<java.util.logging.Logger: void updateDalvikLogHandler()>();

        return;
    }

    void reset()
    {
        java.util.logging.Logger r0;
        java.util.Iterator r1;
        java.util.logging.Handler r2;
        java.util.logging.Level $r4;
        int $i0;
        java.util.List $r5, $r7;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.lang.Exception $r8;

        r0 := @this: java.util.logging.Logger;

        r0.<java.util.logging.Logger: java.util.logging.Level levelObjVal> = null;

        $r4 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $i0 = virtualinvoke $r4.<java.util.logging.Level: int intValue()>();

        r0.<java.util.logging.Logger: int levelIntVal> = $i0;

        $r5 = r0.<java.util.logging.Logger: java.util.List handlers>;

        r1 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.logging.Handler) $r6;

     label2:
        $r7 = r0.<java.util.logging.Logger: java.util.List handlers>;

        $z1 = interfaceinvoke $r7.<java.util.List: boolean remove(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        virtualinvoke r2.<java.util.logging.Handler: void close()>();

     label3:
        goto label1;

     label4:
        $r8 := @caughtexception;

        goto label1;

     label5:
        virtualinvoke r0.<java.util.logging.Logger: void updateDalvikLogHandler()>();

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void setFilter(java.util.logging.Filter)
    {
        java.util.logging.Logger r0;
        java.util.logging.Filter r1;
        boolean $z0;
        java.util.logging.LogManager $r2;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Filter;

        $z0 = r0.<java.util.logging.Logger: boolean isNamed>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r2.<java.util.logging.LogManager: void checkAccess()>();

     label1:
        r0.<java.util.logging.Logger: java.util.logging.Filter filter> = r1;

        return;
    }

    public void setLevel(java.util.logging.Level)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.util.logging.LogManager r2;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        $z0 = r0.<java.util.logging.Logger: boolean isNamed>;

        if $z0 == 0 goto label1;

        virtualinvoke r2.<java.util.logging.LogManager: void checkAccess()>();

     label1:
        virtualinvoke r2.<java.util.logging.LogManager: void setLevelRecursively(java.util.logging.Logger,java.util.logging.Level)>(r0, r1);

        return;
    }

    void setManager(java.util.logging.LogManager)
    {
        java.util.logging.Logger r0;
        java.util.logging.LogManager r1;
        java.lang.String r2, r3, r4, r6, r10, $r14, $r15, $r17, $r20, $r24;
        java.lang.String[] r5;
        int i0, i1;
        java.lang.Exception r7, r9, $r29, $r30;
        java.util.logging.Handler r8;
        java.lang.IllegalArgumentException r11, $r32;
        java.lang.StringBuilder $r12, $r13, $r16, $r18, $r19, $r21, $r23, $r25, $r26;
        boolean $z0, $z1;
        java.lang.Object $r22;
        java.util.logging.Level $r27, $r31;
        java.util.List $r28;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.LogManager;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = r0.<java.util.logging.Logger: java.lang.String name>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke r1.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r15);

        if r2 == null goto label02;

     label01:
        $r31 = staticinvoke <java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>(r2);

        virtualinvoke r1.<java.util.logging.LogManager: void setLevelRecursively(java.util.logging.Logger,java.util.logging.Level)>(r0, $r31);

     label02:
        $r17 = r0.<java.util.logging.Logger: java.lang.String name>;

        $z0 = virtualinvoke $r17.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label07;

        r3 = "handlers";

     label03:
        r4 = virtualinvoke r1.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r3);

        if r4 == null goto label15;

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>(",|\\s");

        i0 = lengthof r5;

        i1 = 0;

     label04:
        if i1 >= i0 goto label15;

        r6 = r5[i1];

        $z1 = virtualinvoke r6.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label08;

     label05:
        i1 = i1 + 1;

        goto label04;

     label06:
        $r32 := @caughtexception;

        r11 = $r32;

        virtualinvoke r11.<java.lang.IllegalArgumentException: void printStackTrace()>();

        goto label02;

     label07:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = r0.<java.util.logging.Logger: java.lang.String name>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".handlers");

        r3 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label03;

     label08:
        $r22 = staticinvoke <java.util.logging.LogManager: java.lang.Object getInstanceByClass(java.lang.String)>(r6);

        r8 = (java.util.logging.Handler) $r22;

     label09:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        r10 = virtualinvoke r1.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r24);

     label10:
        if r10 == null goto label12;

     label11:
        $r27 = staticinvoke <java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>(r10);

        virtualinvoke r8.<java.util.logging.Handler: void setLevel(java.util.logging.Level)>($r27);

     label12:
        $r28 = r0.<java.util.logging.Logger: java.util.List handlers>;

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label05;

     label13:
        $r29 := @caughtexception;

        r7 = $r29;

        virtualinvoke r7.<java.lang.Exception: void printStackTrace()>();

        goto label05;

     label14:
        $r30 := @caughtexception;

        r9 = $r30;

        virtualinvoke r9.<java.lang.Exception: void printStackTrace()>();

        goto label12;

     label15:
        virtualinvoke r0.<java.util.logging.Logger: void updateDalvikLogHandler()>();

        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label06;
        catch java.lang.Exception from label08 to label09 with label13;
        catch java.lang.Exception from label09 to label10 with label14;
        catch java.lang.Exception from label11 to label12 with label14;
    }

    public void setParent(java.util.logging.Logger)
    {
        java.util.logging.Logger r0, r1;
        java.util.logging.LogManager r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.util.logging.Logger;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("parent == null");

        throw $r3;

     label1:
        r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke r2.<java.util.logging.LogManager: void checkAccess()>();

        virtualinvoke r2.<java.util.logging.LogManager: void setParent(java.util.logging.Logger,java.util.logging.Logger)>(r0, r1);

        return;
    }

    public void setUseParentHandlers(boolean)
    {
        java.util.logging.Logger r0;
        boolean z0, $z1;
        java.util.logging.LogManager $r1;

        r0 := @this: java.util.logging.Logger;

        z0 := @parameter0: boolean;

        $z1 = r0.<java.util.logging.Logger: boolean isNamed>;

        if $z1 == 0 goto label1;

        $r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r1.<java.util.logging.LogManager: void checkAccess()>();

     label1:
        r0.<java.util.logging.Logger: boolean notifyParentHandlers> = z0;

        virtualinvoke r0.<java.util.logging.Logger: void updateDalvikLogHandler()>();

        return;
    }

    public void severe(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r2, r1);

        return;
    }

    public void throwing(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2, $r8;
        java.lang.Throwable r3;
        java.util.logging.LogRecord r4, $r6;
        java.util.logging.Level $r5, $r7;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        $r5 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = specialinvoke r0.<java.util.logging.Logger: boolean internalIsLoggable(java.util.logging.Level)>($r5);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r6 = new java.util.logging.LogRecord;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINER>;

        specialinvoke $r6.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r7, "THROW");

        r4 = $r6;

        $r8 = r0.<java.util.logging.Logger: java.lang.String name>;

        virtualinvoke r4.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r8);

        virtualinvoke r4.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r1);

        virtualinvoke r4.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r2);

        virtualinvoke r4.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r3);

        specialinvoke r0.<java.util.logging.Logger: void setResourceBundle(java.util.logging.LogRecord)>(r4);

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r4);

        return;
    }

    void updateDalvikLogHandler()
    {
        java.util.logging.Logger r0, r2, $r11;
        dalvik.system.DalvikLogHandler r1, $r8;
        java.util.Iterator r3, r4;
        java.util.logging.Handler r5;
        java.lang.Class $r6;
        java.util.List $r7, $r9, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r10, $r13;

        r0 := @this: java.util.logging.Logger;

        r1 = <java.util.logging.Logger: dalvik.system.DalvikLogHandler GENERAL_LOG_HANDLER>;

        r2 = r0.<java.util.logging.Logger: java.util.logging.Logger parent>;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r6 == class "java/util/logging/Logger" goto label3;

     label1:
        $r8 = r0.<java.util.logging.Logger: dalvik.system.DalvikLogHandler dalvikLogHandler>;

        if r1 != $r8 goto label5;

     label2:
        return;

     label3:
        if r2 != null goto label4;

        $r12 = r0.<java.util.logging.Logger: java.util.List handlers>;

        r4 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label1;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.logging.Handler) $r13;

        $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label1;

        $z4 = r5 instanceof dalvik.system.DalvikLogHandler;

        if $z4 == 0 goto label1;

        r1 = (dalvik.system.DalvikLogHandler) r5;

        goto label1;

     label4:
        $r7 = r0.<java.util.logging.Logger: java.util.List handlers>;

        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z2 = r0.<java.util.logging.Logger: boolean notifyParentHandlers>;

        if $z2 == 0 goto label1;

        r1 = r2.<java.util.logging.Logger: dalvik.system.DalvikLogHandler dalvikLogHandler>;

        goto label1;

     label5:
        r0.<java.util.logging.Logger: dalvik.system.DalvikLogHandler dalvikLogHandler> = r1;

        $r9 = r0.<java.util.logging.Logger: java.util.List children>;

        r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.util.logging.Logger) $r10;

        virtualinvoke $r11.<java.util.logging.Logger: void updateDalvikLogHandler()>();

        goto label6;
    }

    public void warning(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: java.util.logging.Logger;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r2, r1);

        return;
    }
}
