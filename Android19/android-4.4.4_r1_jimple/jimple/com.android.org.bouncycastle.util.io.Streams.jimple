public final class com.android.org.bouncycastle.util.io.Streams extends java.lang.Object
{
    private static int BUFFER_SIZE;

    static void <clinit>()
    {
        <com.android.org.bouncycastle.util.io.Streams: int BUFFER_SIZE> = 512;

        return;
    }

    public void <init>()
    {
        com.android.org.bouncycastle.util.io.Streams r0;

        r0 := @this: com.android.org.bouncycastle.util.io.Streams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void drain(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.io.InputStream;

        $i0 = <com.android.org.bouncycastle.util.io.Streams: int BUFFER_SIZE>;

        r1 = newarray (byte)[$i0];

     label1:
        $i1 = lengthof r1;

        $i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, $i1);

        if $i2 >= 0 goto label1;

        return;
    }

    public static void pipeAll(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        byte[] r2;
        int i0, $i1, $i2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        $i1 = <com.android.org.bouncycastle.util.io.Streams: int BUFFER_SIZE>;

        r2 = newarray (byte)[$i1];

     label1:
        $i2 = lengthof r2;

        i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r2, 0, $i2);

        if i0 < 0 goto label2;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i0);

        goto label1;

     label2:
        return;
    }

    public static long pipeAllLimited(java.io.InputStream, long, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        long l0, l1, $l5;
        java.io.OutputStream r1;
        byte[] r2;
        int i2, $i3, $i4;
        byte $b6;
        com.android.org.bouncycastle.util.io.StreamOverflowException $r3;

        r0 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        r1 := @parameter2: java.io.OutputStream;

        l1 = 0L;

        $i3 = <com.android.org.bouncycastle.util.io.Streams: int BUFFER_SIZE>;

        r2 = newarray (byte)[$i3];

     label1:
        $i4 = lengthof r2;

        i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r2, 0, $i4);

        if i2 < 0 goto label3;

        $l5 = (long) i2;

        l1 = l1 + $l5;

        $b6 = l1 cmp l0;

        if $b6 <= 0 goto label2;

        $r3 = new com.android.org.bouncycastle.util.io.StreamOverflowException;

        specialinvoke $r3.<com.android.org.bouncycastle.util.io.StreamOverflowException: void <init>(java.lang.String)>("Data Overflow");

        throw $r3;

     label2:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2);

        goto label1;

     label3:
        return l1;
    }

    public static byte[] readAll(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.ByteArrayOutputStream r1, $r2;
        byte[] $r3;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r2;

        staticinvoke <com.android.org.bouncycastle.util.io.Streams: void pipeAll(java.io.InputStream,java.io.OutputStream)>(r0, r1);

        $r3 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public static byte[] readAllLimited(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0;
        java.io.ByteArrayOutputStream r1, $r2;
        long $l1;
        byte[] $r3;

        r0 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r2;

        $l1 = (long) i0;

        staticinvoke <com.android.org.bouncycastle.util.io.Streams: long pipeAllLimited(java.io.InputStream,long,java.io.OutputStream)>(r0, $l1, r1);

        $r3 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public static int readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        $i1 = staticinvoke <com.android.org.bouncycastle.util.io.Streams: int readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return $i1;
    }

    public static int readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $i5 = i0 + i2;

        $i4 = i1 - i2;

        i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, $i5, $i4);

        if i3 >= 0 goto label3;

     label2:
        return i2;

     label3:
        i2 = i2 + i3;

        goto label1;
    }
}
