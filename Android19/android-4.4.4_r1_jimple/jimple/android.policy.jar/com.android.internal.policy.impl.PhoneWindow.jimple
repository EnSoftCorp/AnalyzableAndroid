public class com.android.internal.policy.impl.PhoneWindow extends android.view.Window implements com.android.internal.view.menu.MenuBuilder$Callback
{
    private static final java.lang.String ACTION_BAR_TAG;
    static final int FLAG_RESOURCE_SET_ICON;
    static final int FLAG_RESOURCE_SET_ICON_FALLBACK;
    static final int FLAG_RESOURCE_SET_LOGO;
    private static final java.lang.String FOCUSED_ID_TAG;
    private static final java.lang.String PANELS_TAG;
    private static final boolean SWEEP_OPEN_MENU;
    private static final java.lang.String TAG;
    private static final java.lang.String VIEWS_TAG;
    static final com.android.internal.policy.impl.PhoneWindow$RotationWatcher sRotationWatcher;
    private com.android.internal.widget.ActionBarView mActionBar;
    private com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback;
    private boolean mAlwaysReadCloseOnTouchAttr;
    private android.media.AudioManager mAudioManager;
    private android.graphics.drawable.Drawable mBackgroundDrawable;
    private int mBackgroundResource;
    private android.widget.ProgressBar mCircularProgressBar;
    private boolean mClosingActionMenu;
    private android.view.ViewGroup mContentParent;
    private com.android.internal.view.menu.ContextMenuBuilder mContextMenu;
    final com.android.internal.policy.impl.PhoneWindow$DialogMenuCallback mContextMenuCallback;
    private com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper;
    private com.android.internal.policy.impl.PhoneWindow$DecorView mDecor;
    private com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] mDrawables;
    android.util.TypedValue mFixedHeightMajor;
    android.util.TypedValue mFixedHeightMinor;
    android.util.TypedValue mFixedWidthMajor;
    android.util.TypedValue mFixedWidthMinor;
    private int mFrameResource;
    private android.widget.ProgressBar mHorizontalProgressBar;
    int mIconRes;
    private int mInvalidatePanelMenuFeatures;
    private boolean mInvalidatePanelMenuPosted;
    private final java.lang.Runnable mInvalidatePanelMenuRunnable;
    private boolean mIsFloating;
    private android.app.KeyguardManager mKeyguardManager;
    private android.view.LayoutInflater mLayoutInflater;
    private android.widget.ImageView mLeftIconView;
    int mLogoRes;
    final android.util.TypedValue mMinWidthMajor;
    final android.util.TypedValue mMinWidthMinor;
    private int mPanelChordingKey;
    private com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback;
    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels;
    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel;
    int mResourcesSetFlags;
    private android.widget.ImageView mRightIconView;
    android.view.InputQueue$Callback mTakeInputQueueCallback;
    android.view.SurfaceHolder$Callback2 mTakeSurfaceCallback;
    private int mTextColor;
    private java.lang.CharSequence mTitle;
    private int mTitleColor;
    private android.widget.TextView mTitleView;
    private int mUiOptions;
    private int mVolumeControlStreamType;

    static void <clinit>()
    {
        com.android.internal.policy.impl.PhoneWindow$RotationWatcher $r0;

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String VIEWS_TAG> = "android:views";

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String TAG> = "PhoneWindow";

        <com.android.internal.policy.impl.PhoneWindow: boolean SWEEP_OPEN_MENU> = 0;

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String PANELS_TAG> = "android:Panels";

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String FOCUSED_ID_TAG> = "android:focusedViewId";

        <com.android.internal.policy.impl.PhoneWindow: int FLAG_RESOURCE_SET_LOGO> = 2;

        <com.android.internal.policy.impl.PhoneWindow: int FLAG_RESOURCE_SET_ICON_FALLBACK> = 4;

        <com.android.internal.policy.impl.PhoneWindow: int FLAG_RESOURCE_SET_ICON> = 1;

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String ACTION_BAR_TAG> = "android:ActionBar";

        $r0 = new com.android.internal.policy.impl.PhoneWindow$RotationWatcher;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow$RotationWatcher: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$RotationWatcher sRotationWatcher> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.content.Context r1;
        com.android.internal.policy.impl.PhoneWindow$DialogMenuCallback $r2;
        android.util.TypedValue $r3, $r4;
        com.android.internal.policy.impl.PhoneWindow$1 $r5;
        android.view.LayoutInflater $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.Window: void <init>(android.content.Context)>(r1);

        $r2 = new com.android.internal.policy.impl.PhoneWindow$DialogMenuCallback;

        specialinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DialogMenuCallback: void <init>(com.android.internal.policy.impl.PhoneWindow,int)>(r0, 6);

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DialogMenuCallback mContextMenuCallback> = $r2;

        $r3 = new android.util.TypedValue;

        specialinvoke $r3.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mMinWidthMajor> = $r3;

        $r4 = new android.util.TypedValue;

        specialinvoke $r4.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mMinWidthMinor> = $r4;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mTextColor> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle> = null;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mAlwaysReadCloseOnTouchAttr> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType> = -2147483648;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mUiOptions> = 0;

        $r5 = new com.android.internal.policy.impl.PhoneWindow$1;

        specialinvoke $r5.<com.android.internal.policy.impl.PhoneWindow$1: void <init>(com.android.internal.policy.impl.PhoneWindow)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable> = $r5;

        $r6 = staticinvoke <android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>(r1);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater> = $r6;

        return;
    }

    static int access$000(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        return $i0;
    }

    static int access$002(com.android.internal.policy.impl.PhoneWindow, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter1: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures> = i0;

        return i0;
    }

    static com.android.internal.widget.ActionBarView access$1000(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.widget.ActionBarView $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        return $r1;
    }

    static boolean access$102(com.android.internal.policy.impl.PhoneWindow, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mInvalidatePanelMenuPosted> = z0;

        return z0;
    }

    static com.android.internal.view.menu.ContextMenuBuilder access$1100(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.ContextMenuBuilder $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        return $r1;
    }

    static com.android.internal.view.menu.ContextMenuBuilder access$1102(com.android.internal.policy.impl.PhoneWindow, com.android.internal.view.menu.ContextMenuBuilder)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.ContextMenuBuilder r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter1: com.android.internal.view.menu.ContextMenuBuilder;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu> = r1;

        return r1;
    }

    static com.android.internal.view.menu.MenuDialogHelper access$1200(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.MenuDialogHelper $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper>;

        return $r1;
    }

    static com.android.internal.view.menu.MenuDialogHelper access$1202(com.android.internal.policy.impl.PhoneWindow, com.android.internal.view.menu.MenuDialogHelper)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.MenuDialogHelper r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter1: com.android.internal.view.menu.MenuDialogHelper;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper> = r1;

        return r1;
    }

    static int access$1500(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        return $i0;
    }

    static android.view.ViewGroup access$1600(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.ViewGroup $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        return $r1;
    }

    static void access$1700(com.android.internal.policy.impl.PhoneWindow, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setDefaultWindowFormat(int)>(i0);

        return;
    }

    static void access$1800(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanelsAfterRestore()>();

        return;
    }

    static void access$2200(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void dismissContextMenu()>();

        return;
    }

    static void access$500(com.android.internal.policy.impl.PhoneWindow, int, com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, android.view.Menu)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        android.view.Menu r2;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r2 := @parameter3: android.view.Menu;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void callOnPanelClosed(int,com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.Menu)>(i0, r1, r2);

        return;
    }

    static int access$600(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey>;

        return $i0;
    }

    static com.android.internal.policy.impl.PhoneWindow$PanelFeatureState access$700(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        return $r1;
    }

    static boolean access$800(com.android.internal.policy.impl.PhoneWindow, com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, int, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        int i0, i1;
        android.view.KeyEvent r2;
        boolean $z0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter1: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        i0 := @parameter2: int;

        r2 := @parameter3: android.view.KeyEvent;

        i1 := @parameter4: int;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean performPanelShortcut(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,int,android.view.KeyEvent,int)>(r1, i0, r2, i1);

        return $z0;
    }

    static com.android.internal.policy.impl.PhoneWindow$PanelFeatureState access$900(com.android.internal.policy.impl.PhoneWindow, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, z0);

        return $r1;
    }

    private void callOnPanelClosed(int, com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, android.view.Menu)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        java.lang.Object r2;
        android.view.Window$Callback r3;
        boolean $z0, $z1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] $r4, $r5;
        android.view.Menu r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r2 := @parameter2: android.view.Menu;

        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r3 != null goto label2;

     label1:
        return;

     label2:
        if r2 != null goto label4;

        if r1 != null goto label3;

        if i0 < 0 goto label3;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label3;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        r1 = $r5[i0];

     label3:
        if r1 == null goto label4;

        r2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

     label4:
        if r1 == null goto label5;

        $z1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z1 == 0 goto label1;

     label5:
        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label1;

        r6 = (android.view.Menu) r2;

        interfaceinvoke r3.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>(i0, r6);

        return;
    }

    private static void clearMenuViews(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView> = null;

        r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void clearMenuPresenters()>();

        return;
    }

    private void closeContextMenu()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        java.lang.Throwable r1, $r4;
        com.android.internal.view.menu.ContextMenuBuilder $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        virtualinvoke $r3.<com.android.internal.view.menu.ContextMenuBuilder: void close()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void dismissContextMenu()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void dismissContextMenu()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        java.lang.Throwable r1, $r4;
        com.android.internal.view.menu.MenuDialogHelper $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        entermonitor r0;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu> = null;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper>;

        virtualinvoke $r3.<com.android.internal.view.menu.MenuDialogHelper: void dismiss()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private android.widget.ProgressBar getCircularProgressBar(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0;
        android.widget.ProgressBar $r1, $r4, $r5, $r6, $r7, $r8;
        android.view.ViewGroup $r2;
        android.view.View $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        if $r1 == null goto label1;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        return $r8;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label2;

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16909073);

        $r4 = (android.widget.ProgressBar) $r3;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar> = $r4;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        if $r5 == null goto label3;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        virtualinvoke $r7.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label3:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        return $r6;
    }

    private com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] r1, r2;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r3, r4, $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        $i2 = 1 << i0;

        $i3 = $i1 & $i2;

        if $i3 != 0 goto label3;

        if z0 != 0 goto label2;

        r3 = null;

     label1:
        return r3;

     label2:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("The feature has not been requested");

        throw $r6;

     label3:
        r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] mDrawables>;

        if r1 == null goto label4;

        $i6 = lengthof r1;

        if $i6 > i0 goto label6;

     label4:
        $i4 = i0 + 1;

        r2 = newarray (com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState)[$i4];

        if r1 == null goto label5;

        $i5 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i5);

     label5:
        r1 = r2;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] mDrawables> = r2;

     label6:
        r3 = r1[i0];

        if r3 != null goto label1;

        $r5 = new com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState;

        specialinvoke $r5.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: void <init>(int)>(i0);

        r4 = $r5;

        r1[i0] = r4;

        return r4;
    }

    private android.widget.ProgressBar getHorizontalProgressBar(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0;
        android.widget.ProgressBar $r1, $r4, $r5, $r6, $r7, $r8;
        android.view.ViewGroup $r2;
        android.view.View $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        if $r1 == null goto label1;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        return $r8;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label2;

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16909074);

        $r4 = (android.widget.ProgressBar) $r3;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar> = $r4;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        if $r5 == null goto label3;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        virtualinvoke $r7.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label3:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        return $r6;
    }

    private android.app.KeyguardManager getKeyguardManager()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.app.KeyguardManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager mKeyguardManager>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("keyguard");

        $r5 = (android.app.KeyguardManager) $r4;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager mKeyguardManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager mKeyguardManager>;

        return $r2;
    }

    private android.widget.ImageView getLeftIconView()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.widget.ImageView r1, $r2, $r5;
        android.view.ViewGroup $r3;
        android.view.View $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mLeftIconView>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mLeftIconView>;

        return $r5;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r3 != null goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908881);

        r1 = (android.widget.ImageView) $r4;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mLeftIconView> = r1;

        return r1;
    }

    private int getOptionsPanelGravity()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.os.RemoteException r1, $r3;
        int i0;
        android.view.IWindowManager $r2;
        java.lang.Throwable r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

     label1:
        $r2 = <com.android.internal.policy.impl.PhoneWindow$WindowManagerHolder: android.view.IWindowManager sWindowManager>;

        i0 = interfaceinvoke $r2.<android.view.IWindowManager: int getPreferredOptionsPanelGravity()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        r4 = (java.lang.Throwable) r1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PhoneWindow", "Couldn\'t getOptionsPanelGravity; using default", r4);

        return 81;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean,com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(i0, z0, null);

        return $r1;
    }

    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int, boolean, com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1, r4, r5, $r6;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] r2, r3;
        java.lang.RuntimeException $r7;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $i1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        $i2 = 1 << i0;

        $i3 = $i1 & $i2;

        if $i3 != 0 goto label3;

        if z0 != 0 goto label2;

        r4 = null;

     label1:
        return r4;

     label2:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("The feature has not been requested");

        throw $r7;

     label3:
        r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if r2 == null goto label4;

        $i6 = lengthof r2;

        if $i6 > i0 goto label6;

     label4:
        $i4 = i0 + 1;

        r3 = newarray (com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)[$i4];

        if r2 == null goto label5;

        $i5 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i5);

     label5:
        r2 = r3;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels> = r3;

     label6:
        r4 = r2[i0];

        if r4 != null goto label1;

        if r1 == null goto label8;

        r5 = r1;

     label7:
        r2[i0] = r5;

        return r5;

     label8:
        $r6 = new com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        specialinvoke $r6.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void <init>(int)>(i0);

        r5 = $r6;

        goto label7;
    }

    private android.widget.ImageView getRightIconView()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.widget.ImageView r1, $r2, $r5;
        android.view.ViewGroup $r3;
        android.view.View $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mRightIconView>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mRightIconView>;

        return $r5;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r3 != null goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908883);

        r1 = (android.widget.ImageView) $r4;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mRightIconView> = r1;

        return r1;
    }

    private android.view.ViewRootImpl getViewRootImpl()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.ViewRootImpl r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2, $r4;
        java.lang.IllegalStateException $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        r1 = virtualinvoke $r4.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("view not added");

        throw $r3;
    }

    private void hideProgressBars(android.widget.ProgressBar, android.widget.ProgressBar)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.widget.ProgressBar r1, r2;
        int i0, $i1, $i2, $i3, $i4;
        android.view.animation.Animation r3;
        android.content.Context $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.widget.ProgressBar;

        r2 := @parameter1: android.widget.ProgressBar;

        i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        r3 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r4, 17432577);

        virtualinvoke r3.<android.view.animation.Animation: void setDuration(long)>(1000L);

        $i1 = i0 & 32;

        if $i1 == 0 goto label1;

        $i4 = virtualinvoke r2.<android.widget.ProgressBar: int getVisibility()>();

        if $i4 != 0 goto label1;

        virtualinvoke r2.<android.widget.ProgressBar: void startAnimation(android.view.animation.Animation)>(r3);

        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        $i3 = virtualinvoke r1.<android.widget.ProgressBar: int getVisibility()>();

        if $i3 != 0 goto label2;

        virtualinvoke r1.<android.widget.ProgressBar: void startAnimation(android.view.animation.Animation)>(r3);

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label2:
        return;
    }

    private void installDecor()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23;
        com.android.internal.widget.ActionBarOverlayLayout r1;
        boolean z0, z1, z2, $z4, $z5, $z6, $z7, $z8;
        com.android.internal.widget.ActionBarContainer r2;
        com.android.internal.widget.ActionBarContextView r3;
        android.view.View r4, $r11, $r12, $r20, $r21, $r39;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r5, $r7, $r9, $r27, $r40, $r50, $r54, $r55, $r56;
        android.view.ViewGroup $r6, $r8, $r47, $r53;
        android.widget.TextView $r10, $r13, $r41, $r46, $r48;
        com.android.internal.widget.ActionBarView $r14, $r15, $r17, $r19, $r23, $r24, $r26, $r28, $r29, $r33, $r36, $r37, $r38, $r42, $r43, $r45;
        android.view.Window$Callback $r16;
        java.lang.CharSequence $r18, $r44, $r49;
        android.content.res.TypedArray $r22;
        com.android.internal.policy.impl.PhoneWindow$2 $r25;
        android.graphics.drawable.Drawable $r30;
        android.content.pm.PackageManager $r31;
        android.content.Context $r32, $r34;
        android.content.res.Resources $r35;
        java.lang.Runnable $r51;
        android.widget.FrameLayout $r52;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r5 != null goto label01;

        $r55 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView generateDecor()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor> = $r55;

        $r54 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r54.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setDescendantFocusability(int)>(262144);

        $r50 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r50.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setIsRootNamespace(boolean)>(1);

        $z8 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mInvalidatePanelMenuPosted>;

        if $z8 != 0 goto label01;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        if $i23 == 0 goto label01;

        $r56 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r51 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        virtualinvoke $r56.<com.android.internal.policy.impl.PhoneWindow$DecorView: void postOnAnimation(java.lang.Runnable)>($r51);

     label01:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r6 != null goto label03;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r8 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup generateLayout(com.android.internal.policy.impl.PhoneWindow$DecorView)>($r7);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent> = $r8;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r9.<com.android.internal.policy.impl.PhoneWindow$DecorView: void makeOptionalFitsSystemWindows()>();

        $r11 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908310);

        $r10 = (android.widget.TextView) $r11;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView> = $r10;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        if $r13 == null goto label06;

        $r41 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        $r40 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $i20 = virtualinvoke $r40.<com.android.internal.policy.impl.PhoneWindow$DecorView: int getLayoutDirection()>();

        virtualinvoke $r41.<android.widget.TextView: void setLayoutDirection(int)>($i20);

        $i22 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $i21 = 2 & $i22;

        if $i21 == 0 goto label05;

        r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908884);

        if r4 == null goto label04;

        virtualinvoke r4.<android.view.View: void setVisibility(int)>(8);

     label02:
        $r47 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        $z7 = $r47 instanceof android.widget.FrameLayout;

        if $z7 == 0 goto label03;

        $r53 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        $r52 = (android.widget.FrameLayout) $r53;

        virtualinvoke $r52.<android.widget.FrameLayout: void setForeground(android.graphics.drawable.Drawable)>(null);

     label03:
        return;

     label04:
        $r46 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        virtualinvoke $r46.<android.widget.TextView: void setVisibility(int)>(8);

        goto label02;

     label05:
        $r48 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        $r49 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle>;

        virtualinvoke $r48.<android.widget.TextView: void setText(java.lang.CharSequence)>($r49);

        return;

     label06:
        $r12 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16909077);

        $r15 = (com.android.internal.widget.ActionBarView) $r12;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar> = $r15;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r14 == null goto label03;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $r16 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        virtualinvoke $r17.<com.android.internal.widget.ActionBarView: void setWindowCallback(android.view.Window$Callback)>($r16);

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $r18 = virtualinvoke $r19.<com.android.internal.widget.ActionBarView: java.lang.CharSequence getTitle()>();

        if $r18 != null goto label07;

        $r45 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $r44 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle>;

        virtualinvoke $r45.<com.android.internal.widget.ActionBarView: void setWindowTitle(java.lang.CharSequence)>($r44);

     label07:
        i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $i1 = i0 & 4;

        if $i1 == 0 goto label08;

        $r43 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r43.<com.android.internal.widget.ActionBarView: void initProgress()>();

     label08:
        $i2 = i0 & 32;

        if $i2 == 0 goto label09;

        $r42 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r42.<com.android.internal.widget.ActionBarView: void initIndeterminateProgress()>();

     label09:
        $r20 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16909075);

        r1 = (com.android.internal.widget.ActionBarOverlayLayout) $r20;

        if r1 == null goto label11;

        $i19 = i0 & 512;

        if $i19 == 0 goto label19;

        z2 = 1;

     label10:
        virtualinvoke r1.<com.android.internal.widget.ActionBarOverlayLayout: void setOverlayMode(boolean)>(z2);

     label11:
        $i4 = r0.<com.android.internal.policy.impl.PhoneWindow: int mUiOptions>;

        $i3 = 1 & $i4;

        if $i3 == 0 goto label20;

        z0 = 1;

     label12:
        if z0 == 0 goto label21;

        $r34 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r35 = virtualinvoke $r34.<android.content.Context: android.content.res.Resources getResources()>();

        z1 = virtualinvoke $r35.<android.content.res.Resources: boolean getBoolean(int)>(17891334);

     label13:
        $r21 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16909079);

        r2 = (com.android.internal.widget.ActionBarContainer) $r21;

        if r2 == null goto label22;

        $r36 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r36.<com.android.internal.widget.ActionBarView: void setSplitView(com.android.internal.widget.ActionBarContainer)>(r2);

        $r37 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r37.<com.android.internal.widget.ActionBarView: void setSplitActionBar(boolean)>(z1);

        $r38 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r38.<com.android.internal.widget.ActionBarView: void setSplitWhenNarrow(boolean)>(z0);

        $r39 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16909078);

        r3 = (com.android.internal.widget.ActionBarContextView) $r39;

        virtualinvoke r3.<com.android.internal.widget.ActionBarContextView: void setSplitView(com.android.internal.widget.ActionBarContainer)>(r2);

        virtualinvoke r3.<com.android.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)>(z1);

        virtualinvoke r3.<com.android.internal.widget.ActionBarContextView: void setSplitWhenNarrow(boolean)>(z0);

     label14:
        $i5 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i7 = 1 & $i5;

        if $i7 != 0 goto label15;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindow: int mIconRes>;

        if $i14 == 0 goto label23;

        $r33 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z6 = virtualinvoke $r33.<com.android.internal.widget.ActionBarView: boolean hasIcon()>();

        if $z6 != 0 goto label23;

     label15:
        $r23 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindow: int mIconRes>;

        virtualinvoke $r23.<com.android.internal.widget.ActionBarView: void setIcon(int)>($i8);

     label16:
        $i6 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i9 = 2 & $i6;

        if $i9 != 0 goto label17;

        $i11 = r0.<com.android.internal.policy.impl.PhoneWindow: int mLogoRes>;

        if $i11 == 0 goto label18;

        $r26 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z4 = virtualinvoke $r26.<com.android.internal.widget.ActionBarView: boolean hasLogo()>();

        if $z4 != 0 goto label18;

     label17:
        $r24 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $i10 = r0.<com.android.internal.policy.impl.PhoneWindow: int mLogoRes>;

        virtualinvoke $r24.<com.android.internal.widget.ActionBarView: void setLogo(int)>($i10);

     label18:
        $r27 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r25 = new com.android.internal.policy.impl.PhoneWindow$2;

        specialinvoke $r25.<com.android.internal.policy.impl.PhoneWindow$2: void <init>(com.android.internal.policy.impl.PhoneWindow)>(r0);

        virtualinvoke $r27.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean post(java.lang.Runnable)>($r25);

        return;

     label19:
        z2 = 0;

        goto label10;

     label20:
        z0 = 0;

        goto label12;

     label21:
        $r22 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        z1 = virtualinvoke $r22.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(25, 0);

        goto label13;

     label22:
        if z1 == 0 goto label14;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Requested split action bar with incompatible window decor! Ignoring request.");

        goto label14;

     label23:
        $i13 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i12 = 1 & $i13;

        if $i12 != 0 goto label16;

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindow: int mIconRes>;

        if $i15 != 0 goto label16;

        $r29 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z5 = virtualinvoke $r29.<com.android.internal.widget.ActionBarView: boolean hasIcon()>();

        if $z5 != 0 goto label16;

        $r28 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $r32 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r31 = virtualinvoke $r32.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r30 = virtualinvoke $r31.<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>();

        virtualinvoke $r28.<com.android.internal.widget.ActionBarView: void setIcon(android.graphics.drawable.Drawable)>($r30);

        $i16 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i18 = 4 | $i16;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i18;

        goto label16;
    }

    private boolean launchDefaultSearch()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.Window$Callback r1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void sendCloseSystemWindows(java.lang.String)>("search");

        $z1 = interfaceinvoke r1.<android.view.Window$Callback: boolean onSearchRequested()>();

        return $z1;
    }

    private android.graphics.drawable.Drawable loadImageURI(android.net.Uri)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.net.Uri r1;
        android.graphics.drawable.Drawable r3;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        java.io.InputStream $r6;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.net.Uri;

     label1:
        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = virtualinvoke $r5.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>(r1);

        r3 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>($r6, null);

     label2:
        return r3;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to open content: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", $r11);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        android.view.KeyEvent r2;
        android.view.Window$Callback r3;
        android.view.WindowManager r4;
        byte b0;
        android.view.ViewGroup$LayoutParams r5, r8, r38;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        android.view.ViewParent r6;
        android.view.WindowManager$LayoutParams r7, r39;
        android.content.Context r9, $r15;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z11, $z12, $z13, $z14, $z15;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r10, $r11, $r13, $r20, $r22, $r23, $r29, $r30, $r32;
        android.view.View $r12, $r16, $r18, $r21, $r24, $r28, $r31, $r33, r40;
        android.content.res.Resources $r14, $r36;
        android.graphics.drawable.Drawable $r17;
        com.android.internal.policy.impl.PhoneWindow$RotationWatcher $r25;
        android.view.ViewGroup $r27;
        com.android.internal.view.menu.MenuBuilder $r34;
        android.content.pm.ApplicationInfo $r35;
        android.content.res.Configuration $r37;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r2 := @parameter1: android.view.KeyEvent;

        $z2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z2 != 0 goto label01;

        $z3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z3 == 0 goto label02;

     label01:
        return;

     label02:
        $i2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i2 != 0 goto label05;

        r9 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r36 = virtualinvoke r9.<android.content.Context: android.content.res.Resources getResources()>();

        $r37 = virtualinvoke $r36.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i14 = $r37.<android.content.res.Configuration: int screenLayout>;

        $i15 = 15 & $i14;

        if $i15 != 4 goto label06;

        z0 = 1;

     label03:
        $r35 = virtualinvoke r9.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i13 = $r35.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i13 < 11 goto label07;

        z1 = 1;

     label04:
        if z0 == 0 goto label05;

        if z1 != 0 goto label01;

     label05:
        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r3 == null goto label08;

        $i11 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r34 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z15 = interfaceinvoke r3.<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>($i11, $r34);

        if $z15 != 0 goto label08;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r1, 1);

        return;

     label06:
        z0 = 0;

        goto label03;

     label07:
        z1 = 0;

        goto label04;

     label08:
        r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if r4 == null goto label01;

        $z4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, r2);

        if $z4 == 0 goto label01;

        b0 = -2;

        $r10 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r10 == null goto label09;

        $z14 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView>;

        if $z14 == 0 goto label18;

     label09:
        $r11 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r11 != null goto label16;

        $z12 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean initializePanelDecor(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(r1);

        if $z12 == 0 goto label01;

        $r32 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r32 == null goto label01;

     label10:
        $z7 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean initializePanelContent(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(r1);

        if $z7 == 0 goto label01;

        $z6 = virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean hasPanelItems()>();

        if $z6 == 0 goto label01;

        $r12 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        r5 = virtualinvoke $r12.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        if r5 != null goto label11;

        r38 = new android.view.ViewGroup$LayoutParams;

        specialinvoke r38.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-2, -2);

        r5 = r38;

     label11:
        $i3 = r5.<android.view.ViewGroup$LayoutParams: int width>;

        if $i3 != -1 goto label17;

        i1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int fullBackground>;

        b0 = -1;

     label12:
        $r13 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $r15 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r14 = virtualinvoke $r15.<android.content.Context: android.content.res.Resources getResources()>();

        $r17 = virtualinvoke $r14.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(i1);

        virtualinvoke $r13.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>($r17);

        $r18 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        r6 = virtualinvoke $r18.<android.view.View: android.view.ViewParent getParent()>();

        if r6 == null goto label13;

        $z11 = r6 instanceof android.view.ViewGroup;

        if $z11 == 0 goto label13;

        $r27 = (android.view.ViewGroup) r6;

        $r28 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        virtualinvoke $r27.<android.view.ViewGroup: void removeView(android.view.View)>($r28);

     label13:
        $r20 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $r16 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        virtualinvoke $r20.<com.android.internal.policy.impl.PhoneWindow$DecorView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r16, r5);

        $r21 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        $z8 = virtualinvoke $r21.<android.view.View: boolean hasFocus()>();

        if $z8 != 0 goto label14;

        $r24 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        virtualinvoke $r24.<android.view.View: boolean requestFocus()>();

     label14:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        r39 = new android.view.WindowManager$LayoutParams;

        $i5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int x>;

        $i4 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int y>;

        $r22 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $i6 = $r22.<com.android.internal.policy.impl.PhoneWindow$DecorView: int mDefaultOpacity>;

        specialinvoke r39.<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)>(b0, -2, $i5, $i4, 1003, 8519680, $i6);

        r7 = r39;

        $z9 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isCompact>;

        if $z9 == 0 goto label20;

        $i9 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getOptionsPanelGravity()>();

        r7.<android.view.WindowManager$LayoutParams: int gravity> = $i9;

        $r25 = <com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$RotationWatcher sRotationWatcher>;

        virtualinvoke $r25.<com.android.internal.policy.impl.PhoneWindow$RotationWatcher: void addWindow(com.android.internal.policy.impl.PhoneWindow)>(r0);

     label15:
        $i7 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int windowAnimations>;

        r7.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i7;

        $r23 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        r40 = (android.view.View) $r23;

        interfaceinvoke r4.<android.view.WindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r40, r7);

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen> = 1;

        return;

     label16:
        $z5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView>;

        if $z5 == 0 goto label10;

        $r30 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $i10 = virtualinvoke $r30.<com.android.internal.policy.impl.PhoneWindow$DecorView: int getChildCount()>();

        if $i10 <= 0 goto label10;

        $r29 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        virtualinvoke $r29.<com.android.internal.policy.impl.PhoneWindow$DecorView: void removeAllViews()>();

        goto label10;

     label17:
        i1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int background>;

        goto label12;

     label18:
        $z13 = virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInListMode()>();

        if $z13 != 0 goto label19;

        b0 = -1;

        goto label14;

     label19:
        $r31 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        if $r31 == null goto label14;

        $r33 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        r8 = virtualinvoke $r33.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        if r8 == null goto label14;

        $i12 = r8.<android.view.ViewGroup$LayoutParams: int width>;

        if $i12 != -1 goto label14;

        b0 = -1;

        goto label14;

     label20:
        $i8 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int gravity>;

        r7.<android.view.WindowManager$LayoutParams: int gravity> = $i8;

        goto label15;
    }

    private void openPanelsAfterRestore()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] r1;
        int i0, $i1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $i1 = lengthof r1;

        i0 = -1 + $i1;

     label3:
        if i0 < 0 goto label1;

        r2 = r1[i0];

        if r2 == null goto label4;

        virtualinvoke r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void applyFrozenState()>();

        $z0 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 != 0 goto label4;

        $z1 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean wasLastOpen>;

        if $z1 == 0 goto label4;

        $z2 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean wasLastExpanded>;

        r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode> = $z2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, null);

     label4:
        i0 = i0 + -1;

        goto label3;
    }

    private boolean performPanelShortcut(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, int, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        int i0, i1, $i2;
        android.view.KeyEvent r2;
        boolean z0, z1, $z2, $z3;
        com.android.internal.view.menu.MenuBuilder r3, $r5;
        com.android.internal.widget.ActionBarView $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.KeyEvent;

        i1 := @parameter3: int;

        $z2 = virtualinvoke r2.<android.view.KeyEvent: boolean isSystem()>();

        if $z2 != 0 goto label1;

        if r1 != null goto label3;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        $z3 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        if $z3 != 0 goto label4;

        z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, r2);

        z0 = 0;

        if z1 == 0 goto label5;

     label4:
        r3 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        z0 = 0;

        if r3 == null goto label5;

        $r5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        z0 = virtualinvoke $r5.<com.android.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)>(i0, r2, i1);

     label5:
        if z0 == 0 goto label2;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 1;

        $i2 = i1 & 1;

        if $i2 != 0 goto label2;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r4 != null goto label2;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r1, 1);

        return z0;
    }

    private void reopenMenu(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z14, $z15;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1, r3, $r21;
        android.view.Window$Callback r2;
        com.android.internal.widget.ActionBarView $r4, $r5, $r8, $r9, $r14, $r18, $r20;
        android.content.Context $r6;
        android.view.ViewConfiguration $r7;
        int $i0, $i1, $i2;
        com.android.internal.view.menu.MenuBuilder $r10, $r12, $r13, $r19;
        android.view.View $r11;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r15;
        java.lang.Runnable $r16, $r17;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r4 == null goto label6;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z3 = virtualinvoke $r5.<com.android.internal.widget.ActionBarView: boolean isOverflowReserved()>();

        if $z3 == 0 goto label6;

        $r6 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r7 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r6);

        $z4 = virtualinvoke $r7.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z4 == 0 goto label1;

        $r20 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z15 = virtualinvoke $r20.<com.android.internal.widget.ActionBarView: boolean isOverflowMenuShowPending()>();

        if $z15 == 0 goto label6;

     label1:
        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z6 = virtualinvoke $r8.<com.android.internal.widget.ActionBarView: boolean isOverflowMenuShowing()>();

        if $z6 == 0 goto label2;

        if z0 != 0 goto label5;

     label2:
        if r2 == null goto label4;

        $z5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z5 != 0 goto label4;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $i0 = virtualinvoke $r9.<com.android.internal.widget.ActionBarView: int getVisibility()>();

        if $i0 != 0 goto label4;

        $z7 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mInvalidatePanelMenuPosted>;

        if $z7 == 0 goto label3;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        $i2 = 1 & $i1;

        if $i2 == 0 goto label3;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        virtualinvoke $r15.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean removeCallbacks(java.lang.Runnable)>($r16);

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        interfaceinvoke $r17.<java.lang.Runnable: void run()>();

     label3:
        r3 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 1);

        $r10 = r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r10 == null goto label4;

        $z8 = r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshMenuContent>;

        if $z8 != 0 goto label4;

        $r11 = r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        $r12 = r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z9 = interfaceinvoke r2.<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>(0, $r11, $r12);

        if $z9 == 0 goto label4;

        $r13 = r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        interfaceinvoke r2.<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>(8, $r13);

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r14.<com.android.internal.widget.ActionBarView: boolean showOverflowMenu()>();

     label4:
        return;

     label5:
        $r18 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r18.<com.android.internal.widget.ActionBarView: boolean hideOverflowMenu()>();

        if r2 == null goto label4;

        $z14 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z14 != 0 goto label4;

        $r21 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 1);

        $r19 = $r21.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        interfaceinvoke r2.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>(8, $r19);

        return;

     label6:
        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 1);

        if z0 == 0 goto label9;

        $z2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z2 != 0 goto label8;

        z1 = 1;

     label7:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r1, 0);

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode> = z1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, null);

        return;

     label8:
        z1 = 0;

        goto label7;

     label9:
        z1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        goto label7;
    }

    private void restorePanelState(android.util.SparseArray)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.util.SparseArray r1;
        int i0, i1, $i2;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        java.lang.Object $r3;
        android.os.Parcelable $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.util.SparseArray;

        $i2 = virtualinvoke r1.<android.util.SparseArray: int size()>();

        i0 = -1 + $i2;

     label1:
        if i0 < 0 goto label4;

        i1 = virtualinvoke r1.<android.util.SparseArray: int keyAt(int)>(i0);

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i1, 0);

        if r2 != null goto label3;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        $r3 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        $r4 = (android.os.Parcelable) $r3;

        virtualinvoke r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void onRestoreInstanceState(android.os.Parcelable)>($r4);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void invalidatePanelMenu(int)>(i1);

        goto label2;

     label4:
        return;
    }

    private void savePanelState(android.util.SparseArray)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.util.SparseArray r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] r2;
        int i0, $i1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r3, $r4;
        android.os.Parcelable $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.util.SparseArray;

        r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if r2 != null goto label2;

     label1:
        return;

     label2:
        $i1 = lengthof r2;

        i0 = -1 + $i1;

     label3:
        if i0 < 0 goto label1;

        $r3 = r2[i0];

        if $r3 == null goto label4;

        $r4 = r2[i0];

        $r5 = virtualinvoke $r4.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.os.Parcelable onSaveInstanceState()>();

        virtualinvoke r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r5);

     label4:
        i0 = i0 + -1;

        goto label3;
    }

    private void showProgressBars(android.widget.ProgressBar, android.widget.ProgressBar)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.widget.ProgressBar r1, r2;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.widget.ProgressBar;

        r2 := @parameter1: android.widget.ProgressBar;

        i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $i1 = i0 & 32;

        if $i1 == 0 goto label1;

        $i4 = virtualinvoke r2.<android.widget.ProgressBar: int getVisibility()>();

        if $i4 != 4 goto label1;

        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(0);

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        $i3 = virtualinvoke r1.<android.widget.ProgressBar: int getProgress()>();

        if $i3 >= 10000 goto label2;

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(0);

     label2:
        return;
    }

    private void updateDrawable(int, com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r1;
        boolean z0, $z1;
        android.graphics.drawable.Drawable r2, $r4;
        android.view.ViewGroup $r3;
        android.view.Window $r5, $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState;

        z0 := @parameter2: boolean;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r3 != null goto label2;

     label1:
        return;

     label2:
        i1 = 1 << i0;

        $i2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        $i3 = i1 & $i2;

        if $i3 != 0 goto label3;

        if z0 == 0 goto label1;

     label3:
        r2 = null;

        if r1 == null goto label5;

        r2 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable child>;

        if r2 != null goto label4;

        r2 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local>;

     label4:
        if r2 != null goto label5;

        r2 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def>;

     label5:
        $i4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $i5 = i1 & $i4;

        if $i5 != 0 goto label7;

        $r5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        if $r5 == null goto label1;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isActive()>();

        if $z1 != 0 goto label6;

        if z0 == 0 goto label1;

     label6:
        $r6 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        virtualinvoke $r6.<android.view.Window: void setChildDrawable(int,android.graphics.drawable.Drawable)>(i0, r2);

        return;

     label7:
        if r1 == null goto label1;

        $r4 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable cur>;

        if $r4 != r2 goto label8;

        $i9 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int curAlpha>;

        $i8 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        if $i9 == $i8 goto label1;

     label8:
        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable cur> = r2;

        $i6 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int curAlpha> = $i6;

        $i7 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void onDrawableChanged(int,android.graphics.drawable.Drawable,int)>(i0, r2, $i7);

        return;
    }

    private void updateInt(int, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        boolean z0;
        android.view.ViewGroup $r1;
        android.view.Window $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 != null goto label2;

     label1:
        return;

     label2:
        i2 = 1 << i0;

        $i3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        $i4 = i2 & $i3;

        if $i4 != 0 goto label3;

        if z0 == 0 goto label1;

     label3:
        $i5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $i6 = i2 & $i5;

        if $i6 != 0 goto label4;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        virtualinvoke $r3.<android.view.Window: void setChildInt(int,int)>(i0, i1);

        return;

     label4:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void onIntChanged(int,int)>(i0, i1);

        return;
    }

    private void updateProgressBars(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9;
        android.widget.ProgressBar r1, r2;
        byte b3;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar getCircularProgressBar(boolean)>(1);

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar getHorizontalProgressBar(boolean)>(1);

        i1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        if i0 != -1 goto label06;

        $i8 = i1 & 4;

        if $i8 == 0 goto label03;

        i2 = virtualinvoke r2.<android.widget.ProgressBar: int getProgress()>();

        $z0 = virtualinvoke r2.<android.widget.ProgressBar: boolean isIndeterminate()>();

        if $z0 != 0 goto label01;

        if i2 >= 10000 goto label05;

     label01:
        b3 = 0;

     label02:
        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(b3);

     label03:
        $i9 = i1 & 32;

        if $i9 == 0 goto label04;

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(0);

     label04:
        return;

     label05:
        b3 = 4;

        goto label02;

     label06:
        if i0 != -2 goto label08;

        $i6 = i1 & 4;

        if $i6 == 0 goto label07;

        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(8);

     label07:
        $i7 = i1 & 32;

        if $i7 == 0 goto label04;

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(8);

        return;

     label08:
        if i0 != -3 goto label09;

        virtualinvoke r2.<android.widget.ProgressBar: void setIndeterminate(boolean)>(1);

        return;

     label09:
        if i0 != -4 goto label10;

        virtualinvoke r2.<android.widget.ProgressBar: void setIndeterminate(boolean)>(0);

        return;

     label10:
        if i0 < 0 goto label12;

        if i0 > 10000 goto label12;

        $i5 = i0 + 0;

        virtualinvoke r2.<android.widget.ProgressBar: void setProgress(int)>($i5);

        if i0 >= 10000 goto label11;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void showProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>(r2, r1);

        return;

     label11:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void hideProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>(r2, r1);

        return;

     label12:
        if 20000 > i0 goto label04;

        if i0 > 30000 goto label04;

        $i4 = i0 - 20000;

        virtualinvoke r2.<android.widget.ProgressBar: void setSecondaryProgress(int)>($i4);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void showProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>(r2, r1);

        return;
    }

    public void addContentView(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;
        android.view.Window$Callback r3;
        android.view.ViewGroup $r4, $r5;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r4 != null goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label1:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r5.<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r1, r2);

        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r3 == null goto label2;

        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label2;

        interfaceinvoke r3.<android.view.Window$Callback: void onContentChanged()>();

     label2:
        return;
    }

    public void alwaysReadCloseOnTouchAttr()
    {
        com.android.internal.policy.impl.PhoneWindow r0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mAlwaysReadCloseOnTouchAttr> = 1;

        return;
    }

    void checkCloseActionMenu(android.view.Menu)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.Menu r1;
        android.view.Window$Callback r2;
        boolean $z0, $z1;
        com.android.internal.widget.ActionBarView $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.Menu;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mClosingActionMenu>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mClosingActionMenu> = 1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r3.<com.android.internal.widget.ActionBarView: void dismissPopupMenus()>();

        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r2 == null goto label2;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z1 != 0 goto label2;

        interfaceinvoke r2.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>(8, r1);

     label2:
        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mClosingActionMenu> = 0;

        return;
    }

    public final void closeAllPanels()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] r1;
        int i0, i1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        android.view.WindowManager $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if $r3 != null goto label1;

        return;

     label1:
        r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if r1 == null goto label5;

        i0 = lengthof r1;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label6;

        r2 = r1[i1];

        if r2 == null goto label4;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r2, 1);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        i0 = 0;

        goto label2;

     label6:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closeContextMenu()>();

        return;
    }

    public final void closePanel(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;
        com.android.internal.widget.ActionBarView $r2, $r3, $r6;
        boolean $z0, $z1;
        android.content.Context $r4;
        android.view.ViewConfiguration $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z0 = virtualinvoke $r3.<com.android.internal.widget.ActionBarView: boolean isOverflowReserved()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r5 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r4);

        $z1 = virtualinvoke $r5.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z1 != 0 goto label1;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r6.<com.android.internal.widget.ActionBarView: boolean hideOverflowMenu()>();

        return;

     label1:
        if i0 != 6 goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closeContextMenu()>();

        return;

     label2:
        $r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r1, 1);

        return;
    }

    public final void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1, $r3;
        boolean z0, $z1, $z2, $z3, $z4;
        android.view.WindowManager r2;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r4, $r5;
        int $i0, $i1;
        com.android.internal.policy.impl.PhoneWindow$RotationWatcher $r6;
        com.android.internal.widget.ActionBarView $r7, $r8;
        com.android.internal.view.menu.MenuBuilder $r9;
        android.view.View r10;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label2;

        $i1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i1 != 0 goto label2;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r7 == null goto label2;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z4 = virtualinvoke $r8.<com.android.internal.widget.ActionBarView: boolean isOverflowMenuShowing()>();

        if $z4 == 0 goto label2;

        $r9 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void checkCloseActionMenu(android.view.Menu)>($r9);

     label1:
        return;

     label2:
        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if r2 == null goto label4;

        $z2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z2 == 0 goto label4;

        $r4 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r4 == null goto label3;

        $r5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        r10 = (android.view.View) $r5;

        interfaceinvoke r2.<android.view.ViewManager: void removeView(android.view.View)>(r10);

        $z3 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isCompact>;

        if $z3 == 0 goto label3;

        $r6 = <com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$RotationWatcher sRotationWatcher>;

        virtualinvoke $r6.<com.android.internal.policy.impl.PhoneWindow$RotationWatcher: void removeWindow(com.android.internal.policy.impl.PhoneWindow)>(r0);

     label3:
        if z0 == 0 goto label4;

        $i0 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void callOnPanelClosed(int,com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.Menu)>($i0, r1, null);

     label4:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = null;

        $z1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z1 == 0 goto label5;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode> = 0;

     label5:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r3 != r1 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel> = null;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey> = 0;

        return;
    }

    void doInvalidatePanelMenu(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1, r3;
        android.os.Bundle r2, $r6;
        com.android.internal.view.menu.MenuBuilder $r4, $r7, $r8, $r9;
        com.android.internal.widget.ActionBarView $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $r4 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r4 == null goto label2;

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r2 = $r6;

        $r7 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r7.<com.android.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)>(r2);

        $i1 = virtualinvoke r2.<android.os.Bundle: int size()>();

        if $i1 <= 0 goto label1;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState> = r2;

     label1:
        $r8 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r8.<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>();

        $r9 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r9.<com.android.internal.view.menu.MenuBuilder: void clear()>();

     label2:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshMenuContent> = 1;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        if i0 == 8 goto label3;

        if i0 != 0 goto label4;

     label3:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r5 == null goto label4;

        r3 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r3 == null goto label4;

        r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared> = 0;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r3, null);

     label4:
        return;
    }

    public com.android.internal.policy.impl.PhoneWindow$PanelFeatureState findMenuPanel(android.view.Menu)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.Menu r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] r2;
        int i0, i1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r3;
        com.android.internal.view.menu.MenuBuilder $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.Menu;

        r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if r2 == null goto label3;

        i0 = lengthof r2;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r3 = r2[i1];

        if r3 == null goto label4;

        $r4 = r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r4 != r1 goto label4;

        return r3;

     label3:
        i0 = 0;

        goto label1;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return null;
    }

    protected com.android.internal.policy.impl.PhoneWindow$DecorView generateDecor()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = new com.android.internal.policy.impl.PhoneWindow$DecorView;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        specialinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$DecorView: void <init>(com.android.internal.policy.impl.PhoneWindow,android.content.Context,int)>(r0, $r2, -1);

        return $r1;
    }

    protected android.view.ViewGroup generateLayout(com.android.internal.policy.impl.PhoneWindow$DecorView)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView r1, $r22, $r24, $r26, $r28;
        android.content.res.TypedArray r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z31, $z34, $z35, $z36;
        android.content.Context r3, $r12, $r30, $r33, $r35, $r37, $r43, $r50;
        android.view.WindowManager$LayoutParams r4;
        android.view.ViewGroup r5;
        android.graphics.drawable.Drawable r6, r8, $r41;
        android.widget.ProgressBar r7;
        android.util.TypedValue r9, r10, r11, $r13, $r15, $r34, $r39, $r44, $r45, $r46, $r47, $r48, $r49, $r52, $r53, $r54, $r55, $r56, $r57, $r58;
        android.content.pm.ApplicationInfo $r14, $r17, $r51;
        android.content.res.Resources $r16, $r29, $r32;
        android.view.Window $r18, $r27;
        android.view.View $r19, $r21;
        android.view.ViewGroup$LayoutParams $r20;
        android.view.LayoutInflater $r23;
        java.lang.CharSequence $r25, $r31;
        java.lang.RuntimeException $r36;
        android.content.res.Resources$Theme $r38, $r40, $r42;
        float $f0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$DecorView;

        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $z5 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, 0);

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating> = $z5;

        $i5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i6 = -1 ^ $i5;

        i0 = 65792 & $i6;

        $z8 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z8 == 0 goto label37;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setLayout(int,int)>(-2, -2);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(0, i0);

     label01:
        $z6 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, 0);

        if $z6 == 0 goto label38;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(1);

     label02:
        $z11 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(17, 0);

        if $z11 == 0 goto label03;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(9);

     label03:
        $z12 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(16, 0);

        if $z12 == 0 goto label04;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(10);

     label04:
        $z9 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(9, 0);

        if $z9 == 0 goto label05;

        $i47 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i48 = -1 ^ $i47;

        $i49 = 1024 & $i48;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(1024, $i49);

     label05:
        $z10 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(23, 0);

        if $z10 == 0 goto label06;

        $i52 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i53 = -1 ^ $i52;

        $i51 = 67108864 & $i53;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(67108864, $i51);

     label06:
        $z14 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(24, 0);

        if $z14 == 0 goto label07;

        $i43 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i42 = -1 ^ $i43;

        $i50 = 134217728 & $i42;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(134217728, $i50);

     label07:
        $z15 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(22, 0);

        if $z15 == 0 goto label08;

        $i41 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i40 = -1 ^ $i41;

        $i39 = 33554432 & $i40;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(33554432, $i39);

     label08:
        $z13 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(14, 0);

        if $z13 == 0 goto label09;

        $i45 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i44 = -1 ^ $i45;

        $i46 = 1048576 & $i44;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(1048576, $i46);

     label09:
        $r12 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r14 = virtualinvoke $r12.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i7 = $r14.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i7 < 11 goto label39;

        z0 = 1;

     label10:
        $z16 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(18, z0);

        if $z16 == 0 goto label11;

        $i36 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i37 = -1 ^ $i36;

        $i38 = 8388608 & $i37;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(8388608, $i38);

     label11:
        $r13 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mMinWidthMajor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(19, $r13);

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mMinWidthMinor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(20, $r15);

        $z17 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(26);

        if $z17 == 0 goto label13;

        $r57 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMajor>;

        if $r57 != null goto label12;

        $r52 = new android.util.TypedValue;

        specialinvoke $r52.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMajor> = $r52;

     label12:
        $r58 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMajor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(26, $r58);

     label13:
        $z22 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(28);

        if $z22 == 0 goto label15;

        $r54 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMinor>;

        if $r54 != null goto label14;

        $r56 = new android.util.TypedValue;

        specialinvoke $r56.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMinor> = $r56;

     label14:
        $r55 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMinor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(28, $r55);

     label15:
        $z21 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(29);

        if $z21 == 0 goto label17;

        $r47 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMajor>;

        if $r47 != null goto label16;

        $r53 = new android.util.TypedValue;

        specialinvoke $r53.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMajor> = $r53;

     label16:
        $r49 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMajor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(29, $r49);

     label17:
        $z20 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(27);

        if $z20 == 0 goto label19;

        $r45 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMinor>;

        if $r45 != null goto label18;

        $r48 = new android.util.TypedValue;

        specialinvoke $r48.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMinor> = $r48;

     label18:
        $r46 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMinor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(27, $r46);

     label19:
        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r17 = virtualinvoke r3.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i1 = $r17.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if i1 >= 11 goto label40;

        z1 = 1;

     label20:
        if i1 >= 14 goto label41;

        z2 = 1;

     label21:
        $r16 = virtualinvoke r3.<android.content.Context: android.content.res.Resources getResources()>();

        z3 = virtualinvoke $r16.<android.content.res.Resources: boolean getBoolean(int)>(17891338);

        $z23 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasFeature(int)>(8);

        if $z23 == 0 goto label22;

        $z36 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasFeature(int)>(1);

        if $z36 == 0 goto label42;

     label22:
        z4 = 1;

     label23:
        if z1 != 0 goto label24;

        if z2 == 0 goto label43;

        if z3 == 0 goto label43;

        if z4 == 0 goto label43;

     label24:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void addFlags(int)>(1073741824);

     label25:
        $z26 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mAlwaysReadCloseOnTouchAttr>;

        if $z26 != 0 goto label26;

        $r50 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r51 = virtualinvoke $r50.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i35 = $r51.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i35 < 11 goto label27;

     label26:
        $z25 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(21, 0);

        if $z25 == 0 goto label27;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setCloseOnTouchOutsideIfNotSet(boolean)>(1);

     label27:
        r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $z24 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasSoftInputMode()>();

        if $z24 != 0 goto label28;

        $i32 = r4.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i34 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(13, $i32);

        r4.<android.view.WindowManager$LayoutParams: int softInputMode> = $i34;

     label28:
        $z27 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        $z28 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(11, $z27);

        if $z28 == 0 goto label30;

        $i26 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i25 = 2 & $i26;

        if $i25 != 0 goto label29;

        $i31 = r4.<android.view.WindowManager$LayoutParams: int flags>;

        $i33 = 2 | $i31;

        r4.<android.view.WindowManager$LayoutParams: int flags> = $i33;

     label29:
        $z35 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean haveDimAmount()>();

        if $z35 != 0 goto label30;

        $f0 = virtualinvoke r2.<android.content.res.TypedArray: float getFloat(int,float)>(0, 0.5F);

        r4.<android.view.WindowManager$LayoutParams: float dimAmount> = $f0;

     label30:
        $i11 = r4.<android.view.WindowManager$LayoutParams: int windowAnimations>;

        if $i11 != 0 goto label31;

        $i27 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(8, 0);

        r4.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i27;

     label31:
        $r18 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        if $r18 != null goto label34;

        $r41 = r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        if $r41 != null goto label33;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource>;

        if $i23 != 0 goto label32;

        $i28 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(1, 0);

        r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource> = $i28;

     label32:
        $i30 = r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource>;

        if $i30 != 0 goto label33;

        $i29 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(2, 0);

        r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource> = $i29;

     label33:
        $i24 = virtualinvoke r2.<android.content.res.TypedArray: int getColor(int,int)>(7, -16777216);

        r0.<com.android.internal.policy.impl.PhoneWindow: int mTextColor> = $i24;

     label34:
        i2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $i8 = i2 & 24;

        if $i8 == 0 goto label45;

        $z34 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z34 == 0 goto label44;

        $r44 = new android.util.TypedValue;

        specialinvoke $r44.<android.util.TypedValue: void <init>()>();

        r11 = $r44;

        $r43 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r42 = virtualinvoke $r43.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r42.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843792, r11, 1);

        i3 = r11.<android.util.TypedValue: int resourceId>;

     label35:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void removeFeature(int)>(8);

     label36:
        $r22 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r22.<com.android.internal.policy.impl.PhoneWindow$DecorView: void startChanging()>();

        $r23 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        $r19 = virtualinvoke $r23.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i3, null);

        $r20 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r20.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$DecorView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r19, $r20);

        $r21 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908290);

        r5 = (android.view.ViewGroup) $r21;

        if r5 != null goto label54;

        $r36 = new java.lang.RuntimeException;

        specialinvoke $r36.<java.lang.RuntimeException: void <init>(java.lang.String)>("Window couldn\'t find content container view");

        throw $r36;

     label37:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(65792, i0);

        goto label01;

     label38:
        $z7 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(15, 0);

        if $z7 == 0 goto label02;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(8);

        goto label02;

     label39:
        z0 = 0;

        goto label10;

     label40:
        z1 = 0;

        goto label20;

     label41:
        z2 = 0;

        goto label21;

     label42:
        z4 = 0;

        goto label23;

     label43:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void clearFlags(int)>(1073741824);

        goto label25;

     label44:
        i3 = 17367187;

        goto label35;

     label45:
        $i9 = i2 & 36;

        if $i9 == 0 goto label46;

        $i22 = i2 & 256;

        if $i22 != 0 goto label46;

        i3 = 17367183;

        goto label36;

     label46:
        $i10 = i2 & 128;

        if $i10 == 0 goto label49;

        $z31 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z31 == 0 goto label48;

        $r39 = new android.util.TypedValue;

        specialinvoke $r39.<android.util.TypedValue: void <init>()>();

        r10 = $r39;

        $r37 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r38 = virtualinvoke $r37.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r38.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843793, r10, 1);

        i3 = r10.<android.util.TypedValue: int resourceId>;

     label47:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void removeFeature(int)>(8);

        goto label36;

     label48:
        i3 = 17367182;

        goto label47;

     label49:
        $i13 = i2 & 2;

        if $i13 != 0 goto label52;

        $z29 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z29 == 0 goto label50;

        $r34 = new android.util.TypedValue;

        specialinvoke $r34.<android.util.TypedValue: void <init>()>();

        r9 = $r34;

        $r35 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r40 = virtualinvoke $r35.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r40.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843794, r9, 1);

        i3 = r9.<android.util.TypedValue: int resourceId>;

        goto label36;

     label50:
        $i20 = i2 & 256;

        if $i20 == 0 goto label51;

        i3 = 17367181;

        goto label36;

     label51:
        i3 = 17367186;

        goto label36;

     label52:
        $i14 = i2 & 1024;

        if $i14 == 0 goto label53;

        i3 = 17367185;

        goto label36;

     label53:
        i3 = 17367184;

        goto label36;

     label54:
        $i12 = i2 & 32;

        if $i12 == 0 goto label55;

        r7 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar getCircularProgressBar(boolean)>(0);

        if r7 == null goto label55;

        virtualinvoke r7.<android.widget.ProgressBar: void setIndeterminate(boolean)>(1);

     label55:
        $r27 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        if $r27 != null goto label60;

        r6 = r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        $i17 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource>;

        if $i17 == 0 goto label56;

        $r30 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r29 = virtualinvoke $r30.<android.content.Context: android.content.res.Resources getResources()>();

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource>;

        r6 = virtualinvoke $r29.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i21);

     label56:
        $r28 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r28.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>(r6);

        i4 = r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource>;

        r8 = null;

        if i4 == 0 goto label57;

        $r33 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r32 = virtualinvoke $r33.<android.content.Context: android.content.res.Resources getResources()>();

        $i18 = r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource>;

        r8 = virtualinvoke $r32.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i18);

     label57:
        $r24 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r24.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowFrame(android.graphics.drawable.Drawable)>(r8);

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor>;

        if $i15 != 0 goto label58;

        $i19 = r0.<com.android.internal.policy.impl.PhoneWindow: int mTextColor>;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor> = $i19;

     label58:
        $r25 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle>;

        if $r25 == null goto label59;

        $r31 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setTitle(java.lang.CharSequence)>($r31);

     label59:
        $i16 = r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setTitleColor(int)>($i16);

     label60:
        $r26 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r26.<com.android.internal.policy.impl.PhoneWindow$DecorView: void finishChanging()>();

        return r5;
    }

    android.media.AudioManager getAudioManager()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.media.AudioManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.AudioManager mAudioManager>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r5 = (android.media.AudioManager) $r4;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.media.AudioManager mAudioManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.AudioManager mAudioManager>;

        return $r2;
    }

    public android.view.View getCurrentFocus()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1, $r2;
        android.view.View $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r3 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.View findFocus()>();

        return $r3;

     label1:
        return null;
    }

    public final android.view.View getDecorView()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1, $r2;
        android.view.View r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r1 != null goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        r3 = (android.view.View) $r2;

        return r3;
    }

    public android.view.LayoutInflater getLayoutInflater()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.LayoutInflater $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        return $r1;
    }

    public int getVolumeControlStream()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        return $i0;
    }

    protected boolean initializePanelContent(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        com.android.internal.view.menu.MenuView r2;
        int i0;
        android.view.View $r3, $r8, $r9, $r13;
        com.android.internal.view.menu.MenuBuilder $r4;
        com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback $r5, $r7, $r11, r14;
        boolean $z0;
        android.content.Context $r6, $r10;
        com.android.internal.view.menu.MenuPresenter$Callback r15, r16;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $r3 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        if $r3 == null goto label1;

        $r13 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = $r13;

        return 1;

     label1:
        $r4 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r4 != null goto label2;

        return 0;

     label2:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback>;

        if $r5 != null goto label3;

        r14 = new com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback;

        specialinvoke r14.<com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback: void <init>(com.android.internal.policy.impl.PhoneWindow,com.android.internal.policy.impl.PhoneWindow$1)>(r0, null);

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback> = r14;

     label3:
        $z0 = virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInListMode()>();

        if $z0 == 0 goto label6;

        $r10 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback>;

        r15 = (com.android.internal.view.menu.MenuPresenter$Callback) $r11;

        r2 = virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuView getListMenuView(android.content.Context,com.android.internal.view.menu.MenuPresenter$Callback)>($r10, r15);

     label4:
        $r8 = (android.view.View) r2;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = $r8;

        $r9 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        if $r9 == null goto label7;

        i0 = interfaceinvoke r2.<com.android.internal.view.menu.MenuView: int getWindowAnimations()>();

        if i0 == 0 goto label5;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int windowAnimations> = i0;

     label5:
        return 1;

     label6:
        $r6 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback>;

        r16 = (com.android.internal.view.menu.MenuPresenter$Callback) $r7;

        r2 = virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuView getIconMenuView(android.content.Context,com.android.internal.view.menu.MenuPresenter$Callback)>($r6, r16);

        goto label4;

     label7:
        return 0;
    }

    protected boolean initializePanelDecor(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        android.content.Context $r3, $r4;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $r2 = new com.android.internal.policy.impl.PhoneWindow$DecorView;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $i0 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        specialinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: void <init>(com.android.internal.policy.impl.PhoneWindow,android.content.Context,int)>(r0, $r3, $i0);

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView> = $r2;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int gravity> = 81;

        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void setStyle(android.content.Context)>($r4);

        return 1;
    }

    protected boolean initializePanelMenu(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        java.lang.Object r2;
        android.util.TypedValue r3, r10;
        int i0, $i1, $i2, $i3;
        com.android.internal.view.menu.MenuBuilder r4, r12;
        com.android.internal.widget.ActionBarView $r5;
        android.content.res.Resources$Theme $r8;
        android.view.ContextThemeWrapper r11;
        android.content.Context r13, r14, r15, r16;
        com.android.internal.view.menu.MenuBuilder$Callback r17;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $i1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i1 == 0 goto label1;

        $i3 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i3 != 8 goto label2;

     label1:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r5 == null goto label2;

        r10 = new android.util.TypedValue;

        specialinvoke r10.<android.util.TypedValue: void <init>()>();

        r3 = r10;

        r13 = (android.content.Context) r2;

        $r8 = virtualinvoke r13.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r8.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843671, r3, 1);

        i0 = r3.<android.util.TypedValue: int resourceId>;

        if i0 == 0 goto label2;

        r14 = (android.content.Context) r2;

        $i2 = virtualinvoke r14.<android.content.Context: int getThemeResId()>();

        if $i2 == i0 goto label2;

        r11 = new android.view.ContextThemeWrapper;

        r15 = (android.content.Context) r2;

        specialinvoke r11.<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>(r15, i0);

        r2 = r11;

     label2:
        r12 = new com.android.internal.view.menu.MenuBuilder;

        r16 = (android.content.Context) r2;

        specialinvoke r12.<com.android.internal.view.menu.MenuBuilder: void <init>(android.content.Context)>(r16);

        r4 = r12;

        r17 = (com.android.internal.view.menu.MenuBuilder$Callback) r0;

        virtualinvoke r4.<com.android.internal.view.menu.MenuBuilder: void setCallback(com.android.internal.view.menu.MenuBuilder$Callback)>(r17);

        virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void setMenu(com.android.internal.view.menu.MenuBuilder)>(r4);

        return 1;
    }

    public void injectInputEvent(android.view.InputEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.InputEvent r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.InputEvent;

        $r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void dispatchInputEvent(android.view.InputEvent)>(r1);

        return;
    }

    public void invalidatePanelMenu(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1, $r3;
        java.lang.Runnable $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        $i1 = 1 << i0;

        $i3 = $i2 | $i1;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures> = $i3;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mInvalidatePanelMenuPosted>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        virtualinvoke $r3.<com.android.internal.policy.impl.PhoneWindow$DecorView: void postOnAnimation(java.lang.Runnable)>($r2);

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mInvalidatePanelMenuPosted> = 1;

     label1:
        return;
    }

    public boolean isFloating()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        return $z0;
    }

    public boolean isShortcutKey(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        com.android.internal.view.menu.MenuBuilder $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 1);

        $r3 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r3 == null goto label1;

        $r4 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z0 = virtualinvoke $r4.<com.android.internal.view.menu.MenuBuilder: boolean isShortcutKey(int,android.view.KeyEvent)>(i0, r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void onActive()
    {
        com.android.internal.policy.impl.PhoneWindow r0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.content.res.Configuration r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        android.os.Bundle r3, $r6;
        com.android.internal.widget.ActionBarView $r4;
        com.android.internal.view.menu.MenuBuilder $r5;
        boolean $z0;
        com.android.internal.view.menu.IconMenuPresenter $r7, $r9, $r12, $r14;
        com.android.internal.view.menu.ListMenuPresenter $r8, $r10, $r11, $r13;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.content.res.Configuration;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r4 != null goto label4;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r2 == null goto label4;

        $r5 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r5 == null goto label4;

        $z0 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label5;

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r3 = $r6;

        $r7 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        if $r7 == null goto label1;

        $r14 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        virtualinvoke $r14.<com.android.internal.view.menu.IconMenuPresenter: void saveHierarchyState(android.os.Bundle)>(r3);

     label1:
        $r8 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        if $r8 == null goto label2;

        $r13 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        virtualinvoke $r13.<com.android.internal.view.menu.ListMenuPresenter: void saveHierarchyState(android.os.Bundle)>(r3);

     label2:
        staticinvoke <com.android.internal.policy.impl.PhoneWindow: void clearMenuViews(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(r2);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void reopenMenu(boolean)>(0);

        $r9 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        if $r9 == null goto label3;

        $r12 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        virtualinvoke $r12.<com.android.internal.view.menu.IconMenuPresenter: void restoreHierarchyState(android.os.Bundle)>(r3);

     label3:
        $r10 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        if $r10 == null goto label4;

        $r11 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        virtualinvoke $r11.<com.android.internal.view.menu.ListMenuPresenter: void restoreHierarchyState(android.os.Bundle)>(r3);

     label4:
        return;

     label5:
        staticinvoke <com.android.internal.policy.impl.PhoneWindow: void clearMenuViews(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(r2);

        return;
    }

    protected void onDrawableChanged(int, android.graphics.drawable.Drawable, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1;
        android.graphics.drawable.Drawable r1;
        android.widget.ImageView r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        i1 := @parameter2: int;

        if i0 != 3 goto label3;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView getLeftIconView()>();

     label1:
        if r1 == null goto label4;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setAlpha(int)>(i1);

        virtualinvoke r2.<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>(r1);

        virtualinvoke r2.<android.widget.ImageView: void setVisibility(int)>(0);

     label2:
        return;

     label3:
        if i0 != 4 goto label2;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView getRightIconView()>();

        goto label1;

     label4:
        virtualinvoke r2.<android.widget.ImageView: void setVisibility(int)>(8);

        return;
    }

    protected void onIntChanged(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1;
        android.widget.FrameLayout r1;
        android.view.View $r2;
        android.view.LayoutInflater $r3;
        android.view.ViewGroup r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 2 goto label1;

        if i0 != 5 goto label3;

     label1:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateProgressBars(int)>(i1);

     label2:
        return;

     label3:
        if i0 != 7 goto label2;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908884);

        r1 = (android.widget.FrameLayout) $r2;

        if r1 == null goto label2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        r5 = (android.view.ViewGroup) r1;

        virtualinvoke $r3.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i1, r5);

        return;
    }

    protected boolean onKeyDown(int, int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2, $i3;
        android.view.KeyEvent r1;
        android.view.KeyEvent$DispatcherState r2;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r3, $r5;
        android.media.AudioManager $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r3 == null goto label3;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        r2 = virtualinvoke $r5.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>();

     label1:
        lookupswitch(i1)
        {
            case 4: goto label7;
            case 24: goto label4;
            case 25: goto label4;
            case 82: goto label5;
            case 164: goto label4;
            default: goto label2;
        };

     label2:
        return 0;

     label3:
        r2 = null;

        goto label1;

     label4:
        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.media.AudioManager getAudioManager()>();

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        virtualinvoke $r4.<android.media.AudioManager: void handleKeyDown(android.view.KeyEvent,int)>(r1, $i2);

        return 1;

     label5:
        if i0 >= 0 goto label6;

        i0 = 0;

     label6:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean onKeyDownPanel(int,android.view.KeyEvent)>(i0, r1);

        return 1;

     label7:
        $i3 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i3 > 0 goto label2;

        if i0 < 0 goto label2;

        if r2 == null goto label8;

        virtualinvoke r2.<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>(r1, r0);

     label8:
        return 1;
    }

    public final boolean onKeyDownPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i2 != 0 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey> = i1;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $z0 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

        return $z1;

     label1:
        return 0;
    }

    protected boolean onKeyUp(int, int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2;
        android.view.KeyEvent r1;
        android.view.KeyEvent$DispatcherState r2;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r3;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r4, $r7;
        android.app.KeyguardManager $r5;
        boolean $z0, $z1, $z2, $z4, $z5, $z6;
        android.media.AudioManager $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r4 == null goto label04;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        r2 = virtualinvoke $r7.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>();

     label01:
        if r2 == null goto label02;

        virtualinvoke r2.<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>(r1);

     label02:
        lookupswitch(i1)
        {
            case 4: goto label08;
            case 24: goto label05;
            case 25: goto label05;
            case 82: goto label06;
            case 84: goto label10;
            case 164: goto label05;
            default: goto label03;
        };

     label03:
        return 0;

     label04:
        r2 = null;

        goto label01;

     label05:
        $r6 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.media.AudioManager getAudioManager()>();

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        virtualinvoke $r6.<android.media.AudioManager: void handleKeyUp(android.view.KeyEvent,int)>(r1, $i2);

        return 1;

     label06:
        if i0 >= 0 goto label07;

        i0 = 0;

     label07:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void onKeyUpPanel(int,android.view.KeyEvent)>(i0, r1);

        return 1;

     label08:
        if i0 < 0 goto label03;

        $z4 = virtualinvoke r1.<android.view.KeyEvent: boolean isTracking()>();

        if $z4 == 0 goto label03;

        $z5 = virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

        if $z5 != 0 goto label03;

        if i0 != 0 goto label09;

        r3 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 0);

        if r3 == null goto label09;

        $z6 = r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z6 == 0 goto label09;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void reopenMenu(boolean)>(1);

        return 1;

     label09:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(int)>(i0);

        return 1;

     label10:
        $r5 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager getKeyguardManager()>();

        $z0 = virtualinvoke $r5.<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>();

        if $z0 != 0 goto label03;

        $z1 = virtualinvoke r1.<android.view.KeyEvent: boolean isTracking()>();

        if $z1 == 0 goto label11;

        $z2 = virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

        if $z2 != 0 goto label11;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean launchDefaultSearch()>();

     label11:
        return 1;
    }

    public final void onKeyUpPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        android.media.AudioManager r3;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r4, $r16;
        java.lang.Object $r5;
        android.content.Context $r6, $r10;
        com.android.internal.widget.ActionBarView $r7, $r8, $r11, $r12, $r13, $r14;
        android.view.ViewConfiguration $r9;
        android.view.ActionMode $r15;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey>;

        if $i2 == 0 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey> = 0;

        $z5 = virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

        if $z5 != 0 goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r4 == null goto label2;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r15 = staticinvoke <com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.ActionMode access$300(com.android.internal.policy.impl.PhoneWindow$DecorView)>($r16);

        if $r15 == null goto label2;

     label1:
        return;

     label2:
        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        if i0 != 0 goto label5;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r7 == null goto label5;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z9 = virtualinvoke $r8.<com.android.internal.widget.ActionBarView: boolean isOverflowReserved()>();

        if $z9 == 0 goto label5;

        $r10 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r9 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r10);

        $z10 = virtualinvoke $r9.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z10 != 0 goto label5;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        i1 = virtualinvoke $r11.<com.android.internal.widget.ActionBarView: int getVisibility()>();

        z0 = 0;

        if i1 != 0 goto label3;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z11 = virtualinvoke $r13.<com.android.internal.widget.ActionBarView: boolean isOverflowMenuShowing()>();

        if $z11 != 0 goto label4;

        z3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        z0 = 0;

        if z3 != 0 goto label3;

        z4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

        z0 = 0;

        if z4 == 0 goto label3;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        z0 = virtualinvoke $r14.<com.android.internal.widget.ActionBarView: boolean showOverflowMenu()>();

     label3:
        if z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r5 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        r3 = (android.media.AudioManager) $r5;

        if r3 == null goto label9;

        virtualinvoke r3.<android.media.AudioManager: void playSoundEffect(int)>(0);

        return;

     label4:
        $r12 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        z0 = virtualinvoke $r12.<com.android.internal.widget.ActionBarView: boolean hideOverflowMenu()>();

        goto label3;

     label5:
        $z6 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z6 != 0 goto label6;

        $z7 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled>;

        if $z7 == 0 goto label7;

     label6:
        z0 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r2, 1);

        goto label3;

     label7:
        z1 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        z0 = 0;

        if z1 == 0 goto label3;

        z2 = 1;

        $z8 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshMenuContent>;

        if $z8 == 0 goto label8;

        r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared> = 0;

        z2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

     label8:
        z0 = 0;

        if z2 == 0 goto label3;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(50001, 0);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

        z0 = 1;

        goto label3;

     label9:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", "Couldn\'t get audio manager");

        return;
    }

    public boolean onMenuItemSelected(com.android.internal.view.menu.MenuBuilder, android.view.MenuItem)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.MenuBuilder r1, $r5;
        android.view.MenuItem r2;
        android.view.Window$Callback r3;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r4;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.view.menu.MenuBuilder;

        r2 := @parameter1: android.view.MenuItem;

        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r3 == null goto label1;

        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r1.<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()>();

        r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState findMenuPanel(android.view.Menu)>($r5);

        if r4 == null goto label1;

        $i0 = r4.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $z1 = interfaceinvoke r3.<android.view.Window$Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>($i0, r2);

        return $z1;

     label1:
        return 0;
    }

    public void onMenuModeChange(com.android.internal.view.menu.MenuBuilder)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.MenuBuilder r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.view.menu.MenuBuilder;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void reopenMenu(boolean)>(1);

        return;
    }

    void onOptionsPanelRotationChanged()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        android.view.WindowManager$LayoutParams r2;
        android.view.WindowManager r3;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r4, $r5, $r6;
        int $i0;
        android.view.ViewGroup$LayoutParams $r7;
        android.view.View r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r4 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r4 == null goto label4;

        $r6 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $r7 = virtualinvoke $r6.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (android.view.WindowManager$LayoutParams) $r7;

     label3:
        if r2 == null goto label1;

        $i0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getOptionsPanelGravity()>();

        r2.<android.view.WindowManager$LayoutParams: int gravity> = $i0;

        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if r3 == null goto label1;

        $r5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        r8 = (android.view.View) $r5;

        interfaceinvoke r3.<android.view.ViewManager: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>(r8, r2);

        return;

     label4:
        r2 = null;

        goto label3;
    }

    public final void openPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        com.android.internal.widget.ActionBarView $r3, $r4, $r7, $r8;
        boolean $z0, $z1;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        if i0 != 0 goto label2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z0 = virtualinvoke $r4.<com.android.internal.widget.ActionBarView: boolean isOverflowReserved()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        $z1 = virtualinvoke $r6.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z1 != 0 goto label2;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $i1 = virtualinvoke $r7.<com.android.internal.widget.ActionBarView: int getVisibility()>();

        if $i1 != 0 goto label1;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r8.<com.android.internal.widget.ActionBarView: boolean showOverflowMenu()>();

     label1:
        return;

     label2:
        $r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r2, r1);

        return;
    }

    public final android.view.View peekDecorView()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1;
        android.view.View r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        r2 = (android.view.View) $r1;

        return r2;
    }

    public boolean performContextMenuIdentifierAction(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1;
        com.android.internal.view.menu.ContextMenuBuilder $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        $z0 = virtualinvoke $r2.<com.android.internal.view.menu.ContextMenuBuilder: boolean performIdentifierAction(int,int)>(i0, i1);

        return $z0;

     label1:
        return 0;
    }

    public boolean performPanelIdentifierAction(int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, i2;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        boolean z0, z1;
        com.android.internal.view.menu.MenuBuilder r2, $r4;
        android.view.KeyEvent $r3;
        com.android.internal.widget.ActionBarView $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $r3 = new android.view.KeyEvent;

        specialinvoke $r3.<android.view.KeyEvent: void <init>(int,int)>(0, 82);

        z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, $r3);

        z1 = 0;

        if z0 != 0 goto label2;

     label1:
        return z1;

     label2:
        r2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        z1 = 0;

        if r2 == null goto label1;

        $r4 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        z1 = virtualinvoke $r4.<com.android.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)>(i1, i2);

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r5 != null goto label1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r1, 1);

        return z1;
    }

    public boolean performPanelShortcut(int, int, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, i2;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        i2 := @parameter3: int;

        $r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean performPanelShortcut(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,int,android.view.KeyEvent,int)>($r2, i1, r1, i2);

        return $z0;
    }

    public final boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1, $r4, $r35, $r36;
        android.view.KeyEvent r2;
        android.view.Window$Callback r3;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.View $r5, $r15, $r37;
        com.android.internal.view.menu.MenuBuilder $r6, $r7, $r8, $r11, $r14, $r16, $r18, $r19, $r21, $r23, $r27, $r30;
        com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback $r9, $r24, $r26, $r29, r38;
        com.android.internal.widget.ActionBarView $r10, $r12, $r20, $r25, $r28, $r31, $r33, $r34;
        android.os.Bundle $r13, $r22;
        android.view.KeyCharacterMap $r17;
        com.android.internal.view.menu.MenuPresenter$Callback r39, r40, r41;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r2 := @parameter1: android.view.KeyEvent;

        $z2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z2 == 0 goto label02;

     label01:
        return 0;

     label02:
        $z3 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        if $z3 == 0 goto label03;

        return 1;

     label03:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r4 == null goto label04;

        $r36 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r36 == r1 goto label04;

        $r35 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r35, 0);

     label04:
        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r3 == null goto label05;

        $i6 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r37 = interfaceinvoke r3.<android.view.Window$Callback: android.view.View onCreatePanelView(int)>($i6);

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView> = $r37;

     label05:
        $i1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i1 == 0 goto label06;

        $i5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i5 != 8 goto label14;

     label06:
        z0 = 1;

     label07:
        if z0 == 0 goto label08;

        $r34 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r34 == null goto label08;

        $r33 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r33.<com.android.internal.widget.ActionBarView: void setMenuPrepared()>();

     label08:
        $r5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        if $r5 != null goto label22;

        $r6 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r6 == null goto label09;

        $z8 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshMenuContent>;

        if $z8 == 0 goto label16;

     label09:
        $r7 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r7 != null goto label10;

        $z7 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean initializePanelMenu(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(r1);

        if $z7 == 0 goto label01;

        $r30 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r30 == null goto label01;

     label10:
        if z0 == 0 goto label12;

        $r28 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r28 == null goto label12;

        $r29 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        if $r29 != null goto label11;

        r38 = new com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback;

        specialinvoke r38.<com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback: void <init>(com.android.internal.policy.impl.PhoneWindow,com.android.internal.policy.impl.PhoneWindow$1)>(r0, null);

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback> = r38;

     label11:
        $r31 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $r27 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $r26 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        r39 = (com.android.internal.view.menu.MenuPresenter$Callback) $r26;

        virtualinvoke $r31.<com.android.internal.widget.ActionBarView: void setMenu(android.view.Menu,com.android.internal.view.menu.MenuPresenter$Callback)>($r27, r39);

     label12:
        $r8 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r8.<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>();

        if r3 == null goto label13;

        $i2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r11 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z4 = interfaceinvoke r3.<android.view.Window$Callback: boolean onCreatePanelMenu(int,android.view.Menu)>($i2, $r11);

        if $z4 != 0 goto label15;

     label13:
        virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void setMenu(com.android.internal.view.menu.MenuBuilder)>(null);

        if z0 == 0 goto label01;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r10 == null goto label01;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        r40 = (com.android.internal.view.menu.MenuPresenter$Callback) $r9;

        virtualinvoke $r12.<com.android.internal.widget.ActionBarView: void setMenu(android.view.Menu,com.android.internal.view.menu.MenuPresenter$Callback)>(null, r40);

        return 0;

     label14:
        z0 = 0;

        goto label07;

     label15:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshMenuContent> = 0;

     label16:
        $r14 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r14.<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>();

        $r13 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState>;

        if $r13 == null goto label17;

        $r23 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $r22 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState>;

        virtualinvoke $r23.<com.android.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)>($r22);

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState> = null;

     label17:
        $i3 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r15 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        $r16 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z5 = interfaceinvoke r3.<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>($i3, $r15, $r16);

        if $z5 != 0 goto label19;

        if z0 == 0 goto label18;

        $r20 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r20 == null goto label18;

        $r25 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $r24 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        r41 = (com.android.internal.view.menu.MenuPresenter$Callback) $r24;

        virtualinvoke $r25.<com.android.internal.widget.ActionBarView: void setMenu(android.view.Menu,com.android.internal.view.menu.MenuPresenter$Callback)>(null, r41);

     label18:
        $r19 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r19.<com.android.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>();

        return 0;

     label19:
        if r2 == null goto label23;

        i0 = virtualinvoke r2.<android.view.KeyEvent: int getDeviceId()>();

     label20:
        $r17 = staticinvoke <android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>(i0);

        $i4 = virtualinvoke $r17.<android.view.KeyCharacterMap: int getKeyboardType()>();

        if $i4 == 1 goto label24;

        z1 = 1;

     label21:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean qwertyMode> = z1;

        $r18 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z6 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean qwertyMode>;

        virtualinvoke $r18.<com.android.internal.view.menu.MenuBuilder: void setQwertyMode(boolean)>($z6);

        $r21 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r21.<com.android.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>();

     label22:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared> = 1;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel> = r1;

        return 1;

     label23:
        i0 = -1;

        goto label20;

     label24:
        z1 = 0;

        goto label21;
    }

    public boolean requestFeature(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2, $i3, $i4;
        android.view.ViewGroup $r1;
        boolean $z0;
        android.util.AndroidRuntimeException r5, r6, r7;
        java.lang.Throwable r8, r9, r10;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 == null goto label1;

        r5 = new android.util.AndroidRuntimeException;

        specialinvoke r5.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("requestFeature() must be called before adding content");

        r8 = (java.lang.Throwable) r5;

        throw r8;

     label1:
        i1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        if i1 == 65 goto label2;

        if i0 != 7 goto label2;

        r6 = new android.util.AndroidRuntimeException;

        specialinvoke r6.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("You cannot combine custom titles with other title features");

        r9 = (java.lang.Throwable) r6;

        throw r9;

     label2:
        $i2 = i1 & 128;

        if $i2 == 0 goto label3;

        if i0 == 7 goto label3;

        if i0 == 10 goto label3;

        r7 = new android.util.AndroidRuntimeException;

        specialinvoke r7.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("You cannot combine custom titles with other title features");

        r10 = (java.lang.Throwable) r7;

        throw r10;

     label3:
        $i3 = i1 & 2;

        if $i3 == 0 goto label4;

        if i0 != 8 goto label4;

        return 0;

     label4:
        $i4 = i1 & 256;

        if $i4 == 0 goto label5;

        if i0 != 1 goto label5;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void removeFeature(int)>(8);

     label5:
        $z0 = specialinvoke r0.<android.view.Window: boolean requestFeature(int)>(i0);

        return $z0;
    }

    public void restoreHierarchyState(android.os.Bundle)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.os.Bundle r1;
        android.util.SparseArray r2, r3, r4;
        int i0;
        android.view.View r5;
        android.view.ViewGroup $r6, $r9, $r15;
        com.android.internal.widget.ActionBarView $r7, $r8;
        java.lang.StringBuilder $r10, $r11, $r12, $r14;
        java.lang.String $r13;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.os.Bundle;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r6 != null goto label2;

     label1:
        return;

     label2:
        r2 = virtualinvoke r1.<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>("android:views");

        if r2 == null goto label3;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r15.<android.view.ViewGroup: void restoreHierarchyState(android.util.SparseArray)>(r2);

     label3:
        i0 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:focusedViewId", -1);

        if i0 == -1 goto label4;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        r5 = virtualinvoke $r9.<android.view.ViewGroup: android.view.View findViewById(int)>(i0);

        if r5 == null goto label6;

        virtualinvoke r5.<android.view.View: boolean requestFocus()>();

     label4:
        r3 = virtualinvoke r1.<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>("android:Panels");

        if r3 == null goto label5;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void restorePanelState(android.util.SparseArray)>(r3);

     label5:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r7 == null goto label1;

        r4 = virtualinvoke r1.<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>("android:ActionBar");

        if r4 == null goto label7;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r8.<com.android.internal.widget.ActionBarView: void restoreHierarchyState(android.util.SparseArray)>(r4);

        return;

     label6:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Previously focused view reported id ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" during save, but can\'t be found during restore.");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", $r13);

        goto label4;

     label7:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", "Missing saved instance states for action bar views! State will not be restored.");

        return;
    }

    public android.os.Bundle saveHierarchyState()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.os.Bundle r1, $r6;
        android.util.SparseArray r2, r4, r5, $r8, $r11, $r13;
        android.view.View r3;
        android.view.ViewGroup $r7, $r9, $r10;
        int $i0, $i1, $i2;
        com.android.internal.widget.ActionBarView $r12, $r14;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r1 = $r6;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r7 != null goto label2;

     label1:
        return r1;

     label2:
        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        r2 = $r8;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r9.<android.view.ViewGroup: void saveHierarchyState(android.util.SparseArray)>(r2);

        virtualinvoke r1.<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>("android:views", r2);

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        r3 = virtualinvoke $r10.<android.view.ViewGroup: android.view.View findFocus()>();

        if r3 == null goto label3;

        $i1 = virtualinvoke r3.<android.view.View: int getId()>();

        if $i1 == -1 goto label3;

        $i2 = virtualinvoke r3.<android.view.View: int getId()>();

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("android:focusedViewId", $i2);

     label3:
        $r11 = new android.util.SparseArray;

        specialinvoke $r11.<android.util.SparseArray: void <init>()>();

        r4 = $r11;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void savePanelState(android.util.SparseArray)>(r4);

        $i0 = virtualinvoke r4.<android.util.SparseArray: int size()>();

        if $i0 <= 0 goto label4;

        virtualinvoke r1.<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>("android:Panels", r4);

     label4:
        $r12 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r12 == null goto label1;

        $r13 = new android.util.SparseArray;

        specialinvoke $r13.<android.util.SparseArray: void <init>()>();

        r5 = $r13;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r14.<com.android.internal.widget.ActionBarView: void saveHierarchyState(android.util.SparseArray)>(r5);

        virtualinvoke r1.<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>("android:ActionBar", r5);

        return r1;
    }

    void sendCloseSystemWindows()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.content.Context $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r1, null);

        return;
    }

    void sendCloseSystemWindows(java.lang.String)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        java.lang.String r1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r2, r1);

        return;
    }

    public final void setBackgroundDrawable(android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.graphics.drawable.Drawable r1, $r2;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r3, $r4;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        if r1 != $r2 goto label1;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource>;

        if $i0 == 0 goto label2;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable> = r1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r4.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>(r1);

     label2:
        return;
    }

    public final void setChildDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.graphics.drawable.Drawable r1;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable child> = r1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

        return;
    }

    public final void setChildInt(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateInt(int,int,boolean)>(i0, i1, 0);

        return;
    }

    public final void setContainer(android.view.Window)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.Window r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.Window;

        specialinvoke r0.<android.view.Window: void setContainer(android.view.Window)>(r1);

        return;
    }

    public void setContentView(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.view.Window$Callback r1;
        android.view.ViewGroup $r2, $r3, $r4;
        android.view.LayoutInflater $r5;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label3;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label1:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r5.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i0, $r4);

        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r1 == null goto label2;

        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label2;

        interfaceinvoke r1.<android.view.Window$Callback: void onContentChanged()>();

     label2:
        return;

     label3:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r3.<android.view.ViewGroup: void removeAllViews()>();

        goto label1;
    }

    public void setContentView(android.view.View)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.View;

        $r2 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r2.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>(r1, $r2);

        return;
    }

    public void setContentView(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;
        android.view.Window$Callback r3;
        android.view.ViewGroup $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r4 != null goto label3;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label1:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r6.<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r1, r2);

        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r3 == null goto label2;

        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label2;

        interfaceinvoke r3.<android.view.Window$Callback: void onContentChanged()>();

     label2:
        return;

     label3:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r5.<android.view.ViewGroup: void removeAllViews()>();

        goto label1;
    }

    public void setDefaultIcon(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        com.android.internal.widget.ActionBarView $r1, $r2, $r3, $r7;
        boolean $z0;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        android.graphics.drawable.Drawable $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i2 = 1 & $i1;

        if $i2 == 0 goto label2;

     label1:
        return;

     label2:
        r0.<com.android.internal.policy.impl.PhoneWindow: int mIconRes> = i0;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z0 = virtualinvoke $r2.<com.android.internal.widget.ActionBarView: boolean hasIcon()>();

        if $z0 == 0 goto label3;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i7 = 4 & $i8;

        if $i7 == 0 goto label1;

     label3:
        if i0 == 0 goto label4;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r7.<com.android.internal.widget.ActionBarView: void setIcon(int)>(i0);

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i6 = -5 & $i5;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i6;

        return;

     label4:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r6 = virtualinvoke $r5.<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>();

        virtualinvoke $r3.<com.android.internal.widget.ActionBarView: void setIcon(android.graphics.drawable.Drawable)>($r6);

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i4 = 4 | $i3;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i4;

        return;
    }

    public void setDefaultLogo(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2;
        com.android.internal.widget.ActionBarView $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i2 = 2 & $i1;

        if $i2 == 0 goto label2;

     label1:
        return;

     label2:
        r0.<com.android.internal.policy.impl.PhoneWindow: int mLogoRes> = i0;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        $z0 = virtualinvoke $r2.<com.android.internal.widget.ActionBarView: boolean hasLogo()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r3.<com.android.internal.widget.ActionBarView: void setLogo(int)>(i0);

        return;
    }

    protected final void setFeatureDefaultDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.graphics.drawable.Drawable r1, $r3;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $r3 = r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def>;

        if $r3 == r1 goto label1;

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def> = r1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

     label1:
        return;
    }

    public final void setFeatureDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.graphics.drawable.Drawable r1, $r3;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid> = 0;

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = null;

        $r3 = r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local>;

        if $r3 == r1 goto label1;

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = r1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

     label1:
        return;
    }

    public void setFeatureDrawableAlpha(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $i2 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        if $i2 == i1 goto label1;

        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha> = i1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r1, 0);

     label1:
        return;
    }

    public final void setFeatureDrawableResource(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r1;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        android.graphics.drawable.Drawable $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 == 0 goto label2;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $i2 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid>;

        if $i2 == i1 goto label1;

        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid> = i1;

        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = null;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(i1);

        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = $r4;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r1, 0);

     label1:
        return;

     label2:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>(i0, null);

        return;
    }

    public final void setFeatureDrawableUri(int, android.net.Uri)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.net.Uri r1, $r3, $r5;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r2;
        android.graphics.drawable.Drawable $r4;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.Uri;

        if r1 == null goto label3;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $r3 = r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri>;

        if $r3 == null goto label1;

        $r5 = r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri>;

        $z0 = virtualinvoke $r5.<android.net.Uri: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

     label1:
        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid> = 0;

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = r1;

        $r4 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable loadImageURI(android.net.Uri)>(r1);

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = $r4;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

     label2:
        return;

     label3:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>(i0, null);

        return;
    }

    protected void setFeatureFromAttrs(int, android.content.res.TypedArray, int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        android.content.res.TypedArray r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.res.TypedArray;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(i1);

        if r2 == null goto label1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(i0);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDefaultDrawable(int,android.graphics.drawable.Drawable)>(i0, r2);

     label1:
        $i4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        $i5 = 1 << i0;

        $i6 = $i4 & $i5;

        if $i6 == 0 goto label2;

        i3 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(i2, -1);

        if i3 < 0 goto label2;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDrawableAlpha(int,int)>(i0, i3);

     label2:
        return;
    }

    public final void setFeatureInt(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateInt(int,int,boolean)>(i0, i1, 0);

        return;
    }

    public void setIcon(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4;
        com.android.internal.widget.ActionBarView $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mIconRes> = i0;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i2 = 1 | $i1;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i2;

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i4 = -5 & $i3;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i4;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r2.<com.android.internal.widget.ActionBarView: void setIcon(int)>(i0);

     label1:
        return;
    }

    public void setLocalFocus(boolean, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0, z1;
        android.view.ViewRootImpl $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r1.<android.view.ViewRootImpl: void windowFocusChanged(boolean,boolean)>(z0, z1);

        return;
    }

    public void setLogo(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2;
        com.android.internal.widget.ActionBarView $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mLogoRes> = i0;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i2 = 2 | $i1;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i2;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r2.<com.android.internal.widget.ActionBarView: void setLogo(int)>(i0);

     label1:
        return;
    }

    public void setTitle(java.lang.CharSequence)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        java.lang.CharSequence r1;
        android.widget.TextView $r2, $r5;
        com.android.internal.widget.ActionBarView $r3, $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        if $r2 == null goto label2;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        virtualinvoke $r5.<android.widget.TextView: void setText(java.lang.CharSequence)>(r1);

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle> = r1;

        return;

     label2:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.ActionBarView mActionBar>;

        virtualinvoke $r4.<com.android.internal.widget.ActionBarView: void setWindowTitle(java.lang.CharSequence)>(r1);

        goto label1;
    }

    public void setTitleColor(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.widget.TextView $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        virtualinvoke $r2.<android.widget.TextView: void setTextColor(int)>(i0);

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor> = i0;

        return;
    }

    public void setUiOptions(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mUiOptions> = i0;

        return;
    }

    public void setUiOptions(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindow: int mUiOptions>;

        $i2 = i1 ^ -1;

        $i5 = $i3 & $i2;

        $i4 = i0 & i1;

        $i6 = $i5 | $i4;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mUiOptions> = $i6;

        return;
    }

    public void setVolumeControlStream(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType> = i0;

        return;
    }

    public boolean superDispatchGenericMotionEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.MotionEvent r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchKeyEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchKeyEvent(android.view.KeyEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.MotionEvent r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchTouchEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchTrackballEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.MotionEvent r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchTrackballEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public void takeInputQueue(android.view.InputQueue$Callback)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.InputQueue$Callback r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.InputQueue$Callback;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.view.InputQueue$Callback mTakeInputQueueCallback> = r1;

        return;
    }

    public void takeKeyEvents(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setFocusable(boolean)>(z0);

        return;
    }

    public void takeSurface(android.view.SurfaceHolder$Callback2)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.SurfaceHolder$Callback2 r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.SurfaceHolder$Callback2;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.view.SurfaceHolder$Callback2 mTakeSurfaceCallback> = r1;

        return;
    }

    public final void togglePanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $z0 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r2, 1);

        return;

     label1:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

        return;
    }

    protected final void updateDrawable(int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 0);

        if r1 == null goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r1, z0);

     label1:
        return;
    }
}
