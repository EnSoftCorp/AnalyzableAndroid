public class org.apache.http.impl.entity.LaxContentLengthStrategy extends java.lang.Object implements org.apache.http.entity.ContentLengthStrategy
{

    public void <init>()
    {
        org.apache.http.impl.entity.LaxContentLengthStrategy r0;

        r0 := @this: org.apache.http.impl.entity.LaxContentLengthStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException
    {
        org.apache.http.impl.entity.LaxContentLengthStrategy r0;
        org.apache.http.HttpMessage r1;
        boolean z0, $z1, $z2, $z3, $z4;
        org.apache.http.Header r2, r3, r5;
        long l0, l2;
        org.apache.http.Header[] r4;
        int i1, i3, i4, $i5, $i7, $i8, $i9, $i10;
        org.apache.http.ParseException r7, $r23;
        org.apache.http.HeaderElement[] r8;
        java.lang.String r9, $r11, $r13, $r14, $r17, $r18, $r25, $r34, $r35, $r37;
        org.apache.http.params.HttpParams $r10;
        byte $b6;
        org.apache.http.ProtocolException $r12, $r16, $r22, $r30, $r32;
        org.apache.http.HeaderElement $r15, $r19;
        java.lang.StringBuilder $r20, $r21, $r26, $r27, $r28, $r29, $r31, $r36, $r38;
        java.lang.IllegalArgumentException $r24;
        java.lang.NumberFormatException $r33;

        r0 := @this: org.apache.http.impl.entity.LaxContentLengthStrategy;

        r1 := @parameter0: org.apache.http.HttpMessage;

        if r1 != null goto label01;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP message may not be null");

        throw $r24;

     label01:
        $r10 = interfaceinvoke r1.<org.apache.http.HttpMessage: org.apache.http.params.HttpParams getParams()>();

        z0 = interfaceinvoke $r10.<org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>("http.protocol.strict-transfer-encoding");

        r2 = interfaceinvoke r1.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Transfer-Encoding");

        r3 = interfaceinvoke r1.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Content-Length");

        if r2 == null goto label12;

     label02:
        r8 = interfaceinvoke r2.<org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>();

     label03:
        if z0 == 0 goto label07;

        i4 = 0;

     label04:
        $i9 = lengthof r8;

        if i4 >= $i9 goto label07;

        $r19 = r8[i4];

        r9 = interfaceinvoke $r19.<org.apache.http.HeaderElement: java.lang.String getName()>();

        if r9 == null goto label06;

        $i10 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i10 <= 0 goto label06;

        $z3 = virtualinvoke r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("chunked");

        if $z3 != 0 goto label06;

        $z4 = virtualinvoke r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("identity");

        if $z4 != 0 goto label06;

        $r22 = new org.apache.http.ProtocolException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported transfer encoding: ");

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r25);

        throw $r22;

     label05:
        $r23 := @caughtexception;

        r7 = $r23;

        $r30 = new org.apache.http.ProtocolException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Transfer-Encoding header value: ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r34 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r34, r7);

        throw $r30;

     label06:
        i4 = i4 + 1;

        goto label04;

     label07:
        i3 = lengthof r8;

        $r14 = "identity";

        $r13 = interfaceinvoke r2.<org.apache.http.Header: java.lang.String getValue()>();

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r13);

        if $z1 == 0 goto label09;

        l0 = -1L;

     label08:
        return l0;

     label09:
        if i3 <= 0 goto label10;

        $r17 = "chunked";

        $i8 = i3 - 1;

        $r15 = r8[$i8];

        $r18 = interfaceinvoke $r15.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r18);

        if $z2 == 0 goto label10;

        return -2L;

     label10:
        if z0 == 0 goto label11;

        $r16 = new org.apache.http.ProtocolException;

        specialinvoke $r16.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Chunk-encoding must be the last one applied");

        throw $r16;

     label11:
        return -1L;

     label12:
        if r3 == null goto label20;

        l0 = -1L;

        r4 = interfaceinvoke r1.<org.apache.http.HttpMessage: org.apache.http.Header[] getHeaders(java.lang.String)>("Content-Length");

        if z0 == 0 goto label13;

        $i7 = lengthof r4;

        if $i7 <= 1 goto label13;

        $r12 = new org.apache.http.ProtocolException;

        specialinvoke $r12.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Multiple content length headers");

        throw $r12;

     label13:
        $i5 = lengthof r4;

        i1 = -1 + $i5;

     label14:
        if i1 < 0 goto label17;

        r5 = r4[i1];

     label15:
        $r11 = interfaceinvoke r5.<org.apache.http.Header: java.lang.String getValue()>();

        l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r11);

     label16:
        l0 = l2;

     label17:
        $b6 = l0 cmp 0L;

        if $b6 >= 0 goto label08;

        return -1L;

     label18:
        $r33 := @caughtexception;

        if z0 == 0 goto label19;

        $r32 = new org.apache.http.ProtocolException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid content length: ");

        $r37 = interfaceinvoke r5.<org.apache.http.Header: java.lang.String getValue()>();

        $r36 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r35);

        throw $r32;

     label19:
        i1 = i1 + -1;

        goto label14;

     label20:
        return -1L;

        catch org.apache.http.ParseException from label02 to label03 with label05;
        catch java.lang.NumberFormatException from label15 to label16 with label18;
    }
}
