public class com.android.org.conscrypt.OpenSSLCipher$ARC4 extends com.android.org.conscrypt.OpenSSLCipher
{

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLCipher$ARC4 r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$ARC4;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: void <init>()>();

        return;
    }

    protected void checkSupportedKeySize(int) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLCipher$ARC4 r0;
        int i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$ARC4;

        i0 := @parameter0: int;

        return;
    }

    protected void checkSupportedMode(com.android.org.conscrypt.OpenSSLCipher$Mode) throws java.security.NoSuchAlgorithmException
    {
        com.android.org.conscrypt.OpenSSLCipher$ARC4 r0;
        com.android.org.conscrypt.OpenSSLCipher$Mode r1;
        java.security.NoSuchAlgorithmException $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$ARC4;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLCipher$Mode;

        $r2 = new java.security.NoSuchAlgorithmException;

        specialinvoke $r2.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>("ARC4 does not support modes");

        throw $r2;
    }

    protected void checkSupportedPadding(com.android.org.conscrypt.OpenSSLCipher$Padding) throws javax.crypto.NoSuchPaddingException
    {
        com.android.org.conscrypt.OpenSSLCipher$ARC4 r0;
        com.android.org.conscrypt.OpenSSLCipher$Padding r1;
        javax.crypto.NoSuchPaddingException r3;
        java.lang.Throwable r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$ARC4;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLCipher$Padding;

        r3 = new javax.crypto.NoSuchPaddingException;

        specialinvoke r3.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>("ARC4 does not support padding");

        r4 = (java.lang.Throwable) r3;

        throw r4;
    }

    protected java.lang.String getBaseCipherName()
    {
        com.android.org.conscrypt.OpenSSLCipher$ARC4 r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$ARC4;

        return "ARCFOUR";
    }

    protected int getCipherBlockSize()
    {
        com.android.org.conscrypt.OpenSSLCipher$ARC4 r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$ARC4;

        return 0;
    }

    protected java.lang.String getCipherName(int, com.android.org.conscrypt.OpenSSLCipher$Mode)
    {
        com.android.org.conscrypt.OpenSSLCipher$ARC4 r0;
        int i0;
        com.android.org.conscrypt.OpenSSLCipher$Mode r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$ARC4;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.org.conscrypt.OpenSSLCipher$Mode;

        return "rc4";
    }

    protected boolean supportsVariableSizeKey()
    {
        com.android.org.conscrypt.OpenSSLCipher$ARC4 r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$ARC4;

        return 1;
    }
}
