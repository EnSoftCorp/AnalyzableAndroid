public class com.android.org.conscrypt.SSLSocketImpl extends javax.net.ssl.SSLSocket
{
    private com.android.org.conscrypt.AlertProtocol alertProtocol;
    private com.android.org.conscrypt.SSLSocketInputStream appDataIS;
    private com.android.org.conscrypt.SSLSocketOutputStream appDataOS;
    private com.android.org.conscrypt.HandshakeProtocol handshakeProtocol;
    private boolean handshake_started;
    protected java.io.InputStream input;
    private java.util.ArrayList listeners;
    private com.android.org.conscrypt.Logger$Stream logger;
    protected java.io.OutputStream output;
    protected com.android.org.conscrypt.SSLRecordProtocol recordProtocol;
    private com.android.org.conscrypt.SSLSessionImpl session;
    private boolean socket_was_closed;
    protected com.android.org.conscrypt.SSLParametersImpl sslParameters;
    private final java.lang.String wrappedHost;
    private final int wrappedPort;

    protected void <init>(com.android.org.conscrypt.SSLParametersImpl)
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl r1;
        com.android.org.conscrypt.Logger$Stream $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>()>();

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started> = 0;

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed> = 0;

        $r2 = staticinvoke <com.android.org.conscrypt.Logger: com.android.org.conscrypt.Logger$Stream getStream(java.lang.String)>("socket");

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger> = $r2;

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r1;

        r0.<com.android.org.conscrypt.SSLSocketImpl: java.lang.String wrappedHost> = null;

        r0.<com.android.org.conscrypt.SSLSocketImpl: int wrappedPort> = -1;

        return;
    }

    protected void <init>(java.lang.String, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException, java.net.UnknownHostException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.lang.String r1;
        int i0;
        com.android.org.conscrypt.SSLParametersImpl r2;
        com.android.org.conscrypt.Logger$Stream $r3;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.lang.String,int)>(r1, i0);

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started> = 0;

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed> = 0;

        $r3 = staticinvoke <com.android.org.conscrypt.Logger: com.android.org.conscrypt.Logger$Stream getStream(java.lang.String)>("socket");

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger> = $r3;

        r0.<com.android.org.conscrypt.SSLSocketImpl: java.lang.String wrappedHost> = r1;

        r0.<com.android.org.conscrypt.SSLSocketImpl: int wrappedPort> = i0;

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r2;

        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void init()>();

        return;
    }

    protected void <init>(java.lang.String, int, java.net.InetAddress, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException, java.net.UnknownHostException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.lang.String r1;
        int i0, i1;
        java.net.InetAddress r2;
        com.android.org.conscrypt.SSLParametersImpl r3;
        com.android.org.conscrypt.Logger$Stream $r4;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        r3 := @parameter4: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.lang.String,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started> = 0;

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed> = 0;

        $r4 = staticinvoke <com.android.org.conscrypt.Logger: com.android.org.conscrypt.Logger$Stream getStream(java.lang.String)>("socket");

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger> = $r4;

        r0.<com.android.org.conscrypt.SSLSocketImpl: java.lang.String wrappedHost> = r1;

        r0.<com.android.org.conscrypt.SSLSocketImpl: int wrappedPort> = i0;

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r3;

        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void init()>();

        return;
    }

    protected void <init>(java.net.InetAddress, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.net.InetAddress r1;
        int i0;
        com.android.org.conscrypt.SSLParametersImpl r2;
        com.android.org.conscrypt.Logger$Stream $r3;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int)>(r1, i0);

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started> = 0;

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed> = 0;

        $r3 = staticinvoke <com.android.org.conscrypt.Logger: com.android.org.conscrypt.Logger$Stream getStream(java.lang.String)>("socket");

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger> = $r3;

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r2;

        r0.<com.android.org.conscrypt.SSLSocketImpl: java.lang.String wrappedHost> = null;

        r0.<com.android.org.conscrypt.SSLSocketImpl: int wrappedPort> = -1;

        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void init()>();

        return;
    }

    protected void <init>(java.net.InetAddress, int, java.net.InetAddress, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.net.InetAddress r1, r2;
        int i0, i1;
        com.android.org.conscrypt.SSLParametersImpl r3;
        com.android.org.conscrypt.Logger$Stream $r4;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        r3 := @parameter4: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started> = 0;

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed> = 0;

        $r4 = staticinvoke <com.android.org.conscrypt.Logger: com.android.org.conscrypt.Logger$Stream getStream(java.lang.String)>("socket");

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger> = $r4;

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r3;

        r0.<com.android.org.conscrypt.SSLSocketImpl: java.lang.String wrappedHost> = null;

        r0.<com.android.org.conscrypt.SSLSocketImpl: int wrappedPort> = -1;

        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void init()>();

        return;
    }

    private void doHandshake() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.AlertException r1, $r53;
        javax.net.ssl.HandshakeCompletedEvent r2, $r12;
        int i0, i1, i2;
        javax.net.ssl.SSLEngineResult$HandshakeStatus r4, $r7, $r18, $r19, $r39, $r40;
        java.lang.String r5, $r25, $r38, $r45;
        com.android.org.conscrypt.HandshakeProtocol $r6, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.org.conscrypt.SSLRecordProtocol $r8, $r32;
        com.android.org.conscrypt.SSLSessionImpl $r9, $r11;
        java.util.ArrayList $r10, $r13, $r15;
        java.lang.Object $r14;
        com.android.org.conscrypt.Logger$Stream $r16, $r43;
        javax.net.ssl.HandshakeCompletedListener $r17;
        java.lang.StringBuilder $r20, $r22, $r24, $r31, $r33, $r34, $r35, $r42, $r44, $r46, $r47, $r48;
        javax.net.ssl.SSLException $r21, $r30, $r49;
        com.android.org.conscrypt.AlertProtocol $r23, $r27, $r28;
        byte[] $r26, $r41;
        java.io.OutputStream $r29, $r36;
        byte $b3;
        com.android.org.conscrypt.EndOfSourceException $r50;
        com.android.org.conscrypt.SSLSocketInputStream $r51;
        java.io.IOException $r52;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

     label01:
        $r6 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        r4 = virtualinvoke $r6.<com.android.org.conscrypt.HandshakeProtocol: javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()>();

        $r7 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED>;

        $z0 = virtualinvoke r4.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label15;

        $r16 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r16 == null goto label04;

        $r40 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        $z5 = virtualinvoke r4.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r40);

        if $z5 == 0 goto label08;

     label02:
        r5 = "NEED_WRAP";

     label03:
        $r43 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SSLSocketImpl: HS status: ");

        $r48 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r43.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r45);

     label04:
        $r18 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        $z1 = virtualinvoke r4.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r18);

        if $z1 == 0 goto label10;

        $r36 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.OutputStream output>;

        $r37 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        $r41 = virtualinvoke $r37.<com.android.org.conscrypt.HandshakeProtocol: byte[] wrap()>();

        virtualinvoke $r36.<java.io.OutputStream: void write(byte[])>($r41);

     label05:
        $r23 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $z3 = virtualinvoke $r23.<com.android.org.conscrypt.AlertProtocol: boolean hasAlert()>();

        if $z3 == 0 goto label01;

        $r29 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.OutputStream output>;

        $r28 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $r26 = virtualinvoke $r28.<com.android.org.conscrypt.AlertProtocol: byte[] wrap()>();

        virtualinvoke $r29.<java.io.OutputStream: void write(byte[])>($r26);

        $r27 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r27.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

     label06:
        goto label01;

     label07:
        $r50 := @caughtexception;

        $r51 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketInputStream appDataIS>;

        virtualinvoke $r51.<com.android.org.conscrypt.SSLSocketInputStream: void setEnd()>();

        $r52 = new java.io.IOException;

        specialinvoke $r52.<java.io.IOException: void <init>(java.lang.String)>("Connection was closed");

        throw $r52;

     label08:
        $r39 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        $z6 = virtualinvoke r4.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r39);

        if $z6 == 0 goto label21;

     label09:
        r5 = "NEED_UNWRAP";

        goto label03;

     label10:
        $r19 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        $z2 = virtualinvoke r4.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r19);

        if $z2 == 0 goto label19;

        $r32 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        i2 = virtualinvoke $r32.<com.android.org.conscrypt.SSLRecordProtocol: int unwrap()>();

     label11:
        tableswitch(i2)
        {
            case 20: goto label05;
            case 21: goto label17;
            case 22: goto label05;
            case 23: goto label05;
            default: goto label12;
        };

     label12:
        $r30 = new javax.net.ssl.SSLException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected message of type ");

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been got");

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r38);

        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void reportFatalAlert(byte,javax.net.ssl.SSLException)>(10, $r30);

     label13:
        goto label05;

     label14:
        $r53 := @caughtexception;

        r1 = $r53;

        $b3 = virtualinvoke r1.<com.android.org.conscrypt.AlertException: byte getDescriptionCode()>();

        $r49 = virtualinvoke r1.<com.android.org.conscrypt.AlertException: javax.net.ssl.SSLException getReason()>();

        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void reportFatalAlert(byte,javax.net.ssl.SSLException)>($b3, $r49);

     label15:
        $r8 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r9 = virtualinvoke $r8.<com.android.org.conscrypt.SSLRecordProtocol: com.android.org.conscrypt.SSLSessionImpl getSession()>();

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSessionImpl session> = $r9;

        $r10 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.util.ArrayList listeners>;

        if $r10 == null goto label22;

        $r12 = new javax.net.ssl.HandshakeCompletedEvent;

        $r11 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        specialinvoke $r12.<javax.net.ssl.HandshakeCompletedEvent: void <init>(javax.net.ssl.SSLSocket,javax.net.ssl.SSLSession)>(r0, $r11);

        r2 = $r12;

        $r13 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.util.ArrayList listeners>;

        i0 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i1 = 0;

     label16:
        if i1 >= i0 goto label22;

        $r15 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.util.ArrayList listeners>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r17 = (javax.net.ssl.HandshakeCompletedListener) $r14;

        interfaceinvoke $r17.<javax.net.ssl.HandshakeCompletedListener: void handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent)>(r2);

        i1 = i1 + 1;

        goto label16;

     label17:
        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void processAlert()>();

        $z4 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed>;

        if $z4 == 0 goto label05;

     label18:
        return;

     label19:
        $r21 = new javax.net.ssl.SSLException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Handshake passed unexpected status: ");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r25);

        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void reportFatalAlert(byte,javax.net.ssl.SSLException)>(80, $r21);

     label20:
        goto label05;

     label21:
        r5 = "STATUS: OTHER!";

        goto label03;

     label22:
        return;

        catch com.android.org.conscrypt.EndOfSourceException from label01 to label02 with label07;
        catch com.android.org.conscrypt.AlertException from label01 to label02 with label14;
        catch com.android.org.conscrypt.EndOfSourceException from label03 to label04 with label07;
        catch com.android.org.conscrypt.AlertException from label03 to label04 with label14;
        catch com.android.org.conscrypt.EndOfSourceException from label04 to label05 with label07;
        catch com.android.org.conscrypt.AlertException from label04 to label05 with label14;
        catch com.android.org.conscrypt.EndOfSourceException from label05 to label06 with label07;
        catch com.android.org.conscrypt.AlertException from label05 to label06 with label14;
        catch com.android.org.conscrypt.EndOfSourceException from label08 to label09 with label07;
        catch com.android.org.conscrypt.AlertException from label08 to label09 with label14;
        catch com.android.org.conscrypt.EndOfSourceException from label10 to label11 with label07;
        catch com.android.org.conscrypt.AlertException from label10 to label11 with label14;
        catch com.android.org.conscrypt.EndOfSourceException from label12 to label13 with label07;
        catch com.android.org.conscrypt.AlertException from label12 to label13 with label14;
        catch com.android.org.conscrypt.EndOfSourceException from label17 to label18 with label07;
        catch com.android.org.conscrypt.AlertException from label17 to label18 with label14;
        catch com.android.org.conscrypt.EndOfSourceException from label19 to label20 with label07;
        catch com.android.org.conscrypt.AlertException from label19 to label20 with label14;
    }

    private void processAlert() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.lang.String r1, $r14, $r16, $r19;
        com.android.org.conscrypt.AlertProtocol $r2, $r3, $r5, $r6, $r7, $r12, $r15, $r20;
        boolean $z0, $z1;
        com.android.org.conscrypt.Logger$Stream $r4, $r10;
        byte $b0;
        com.android.org.conscrypt.SSLSocketInputStream $r8;
        java.lang.StringBuilder $r9, $r11, $r13, $r17, $r18, $r21;
        javax.net.ssl.SSLException $r22;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r2 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $z0 = virtualinvoke $r2.<com.android.org.conscrypt.AlertProtocol: boolean hasAlert()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $z1 = virtualinvoke $r3.<com.android.org.conscrypt.AlertProtocol: boolean isFatalAlert()>();

        if $z1 == 0 goto label2;

        $r15 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r15.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fatal alert received ");

        $r20 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $r19 = virtualinvoke $r20.<com.android.org.conscrypt.AlertProtocol: java.lang.String getAlertDescription()>();

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        r1 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void shutdown()>();

        $r22 = new javax.net.ssl.SSLException;

        specialinvoke $r22.<javax.net.ssl.SSLException: void <init>(java.lang.String)>(r1);

        throw $r22;

     label2:
        $r4 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r4 == null goto label3;

        $r10 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning alert received: ");

        $r12 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $r14 = virtualinvoke $r12.<com.android.org.conscrypt.AlertProtocol: java.lang.String getAlertDescription()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r16);

     label3:
        $r5 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $b0 = virtualinvoke $r5.<com.android.org.conscrypt.AlertProtocol: byte getDescriptionCode()>();

        tableswitch($b0)
        {
            case 0: goto label5;
            default: goto label4;
        };

     label4:
        $r6 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r6.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

        return;

     label5:
        $r7 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r7.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

        $r8 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketInputStream appDataIS>;

        virtualinvoke $r8.<com.android.org.conscrypt.SSLSocketInputStream: void setEnd()>();

        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void close()>();

        return;
    }

    private void reportFatalAlert(byte, javax.net.ssl.SSLException) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        byte b0;
        javax.net.ssl.SSLException r1;
        com.android.org.conscrypt.AlertProtocol $r3, $r4, $r7;
        java.io.OutputStream $r5;
        byte[] $r6;
        java.io.IOException $r8;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        b0 := @parameter0: byte;

        r1 := @parameter1: javax.net.ssl.SSLException;

        $r3 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r3.<com.android.org.conscrypt.AlertProtocol: void alert(byte,byte)>(2, b0);

     label1:
        $r5 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.OutputStream output>;

        $r4 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $r6 = virtualinvoke $r4.<com.android.org.conscrypt.AlertProtocol: byte[] wrap()>();

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[])>($r6);

     label2:
        $r7 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r7.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void shutdown()>();

        throw r1;

     label3:
        $r8 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void shutdown()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        boolean $z0;
        com.android.org.conscrypt.AlertProtocol $r1;
        com.android.org.conscrypt.HandshakeProtocol $r2;
        com.android.org.conscrypt.SSLRecordProtocol $r3;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r1.<com.android.org.conscrypt.AlertProtocol: void shutdown()>();

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol> = null;

        $r2 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        virtualinvoke $r2.<com.android.org.conscrypt.HandshakeProtocol: void shutdown()>();

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol> = null;

        $r3 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        virtualinvoke $r3.<com.android.org.conscrypt.SSLRecordProtocol: void shutdown()>();

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol> = null;

     label1:
        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed> = 1;

        return;
    }

    public void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        javax.net.ssl.HandshakeCompletedListener r1;
        java.util.ArrayList $r2, $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: javax.net.ssl.HandshakeCompletedListener;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is null");

        throw $r5;

     label1:
        $r2 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.util.ArrayList listeners>;

        if $r2 != null goto label2;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.org.conscrypt.SSLSocketImpl: java.util.ArrayList listeners> = $r4;

     label2:
        $r3 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.util.ArrayList listeners>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void close() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.Logger$Stream $r2, $r9;
        boolean $z0, $z1, $z2;
        com.android.org.conscrypt.AlertProtocol $r3, $r4, $r7;
        java.io.OutputStream $r5;
        byte[] $r6;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.String $r12;
        java.io.IOException $r13;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r2 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r2 == null goto label1;

        $r9 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SSLSocket.close ");

        $z2 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r12);

     label1:
        $z0 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed>;

        if $z0 != 0 goto label5;

        $z1 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started>;

        if $z1 == 0 goto label4;

        $r3 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r3.<com.android.org.conscrypt.AlertProtocol: void alert(byte,byte)>(1, 0);

     label2:
        $r5 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.OutputStream output>;

        $r4 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $r6 = virtualinvoke $r4.<com.android.org.conscrypt.AlertProtocol: byte[] wrap()>();

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[])>($r6);

     label3:
        $r7 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r7.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

     label4:
        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void shutdown()>();

        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void closeTransportLayer()>();

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed> = 1;

     label5:
        return;

     label6:
        $r13 := @caughtexception;

        goto label3;

        catch java.io.IOException from label2 to label3 with label6;
    }

    protected void closeTransportLayer() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.io.InputStream $r1, $r2;
        java.io.OutputStream $r3;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void close()>();

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.InputStream input>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.InputStream input>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        $r3 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.OutputStream output>;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label1:
        return;
    }

    public void connect(java.net.SocketAddress) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.net.SocketAddress r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: java.net.SocketAddress;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void connect(java.net.SocketAddress)>(r1);

        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void init()>();

        return;
    }

    public void connect(java.net.SocketAddress, int) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.net.SocketAddress r1;
        int i0;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: java.net.SocketAddress;

        i0 := @parameter1: int;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void connect(java.net.SocketAddress,int)>(r1, i0);

        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void init()>();

        return;
    }

    public boolean getEnableSessionCreation()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getEnableSessionCreation()>();

        return $z0;
    }

    public java.lang.String[] getEnabledCipherSuites()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] getEnabledCipherSuites()>();

        return $r2;
    }

    public java.lang.String[] getEnabledProtocols()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] getEnabledProtocols()>();

        return $r2;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        boolean $z0;
        com.android.org.conscrypt.SSLSocketInputStream $r1;
        java.io.IOException $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Socket has already been closed.");

        throw $r2;

     label1:
        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketInputStream appDataIS>;

        return $r1;
    }

    public boolean getNeedClientAuth()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getNeedClientAuth()>();

        return $z0;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        boolean $z0;
        com.android.org.conscrypt.SSLSocketOutputStream $r1;
        java.io.IOException $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Socket has already been closed.");

        throw $r2;

     label1:
        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketOutputStream appDataOS>;

        return $r1;
    }

    java.lang.String getPeerHostName()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.net.InetAddress r1;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r2 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.lang.String wrappedHost>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.lang.String wrappedHost>;

        return $r4;

     label1:
        r1 = specialinvoke r0.<javax.net.ssl.SSLSocket: java.net.InetAddress getInetAddress()>();

        if r1 == null goto label2;

        $r3 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostName()>();

        return $r3;

     label2:
        return null;
    }

    int getPeerPort()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $i0 = r0.<com.android.org.conscrypt.SSLSocketImpl: int wrappedPort>;

        if $i0 != -1 goto label1;

        $i2 = specialinvoke r0.<javax.net.ssl.SSLSocket: int getPort()>();

        return $i2;

     label1:
        $i1 = r0.<com.android.org.conscrypt.SSLSocketImpl: int wrappedPort>;

        return $i1;
    }

    public javax.net.ssl.SSLSession getSession()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        boolean $z0;
        com.android.org.conscrypt.SSLSessionImpl $r2, $r4;
        java.io.IOException $r3;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started>;

        if $z0 != 0 goto label2;

     label1:
        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void startHandshake()>();

     label2:
        $r2 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <com.android.org.conscrypt.SSLSessionImpl: com.android.org.conscrypt.SSLSessionImpl getNullSession()>();

        return $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = staticinvoke <com.android.org.conscrypt.CipherSuite: java.lang.String[] getSupportedCipherSuiteNames()>();

        return $r1;
    }

    public java.lang.String[] getSupportedProtocols()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = <com.android.org.conscrypt.ProtocolVersion: java.lang.String[] supportedProtocols>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    public boolean getUseClientMode()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        return $z0;
    }

    public boolean getWantClientAuth()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getWantClientAuth()>();

        return $z0;
    }

    java.lang.String getWrappedHostName()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.lang.String $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.lang.String wrappedHost>;

        return $r1;
    }

    int getWrappedPort()
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $i0 = r0.<com.android.org.conscrypt.SSLSocketImpl: int wrappedPort>;

        return $i0;
    }

    protected void init() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.SSLSocketInputStream $r1, $r2;
        com.android.org.conscrypt.SSLSocketOutputStream $r3;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketInputStream appDataIS>;

        if $r1 == null goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void initTransportLayer()>();

        $r2 = new com.android.org.conscrypt.SSLSocketInputStream;

        specialinvoke $r2.<com.android.org.conscrypt.SSLSocketInputStream: void <init>(com.android.org.conscrypt.SSLSocketImpl)>(r0);

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketInputStream appDataIS> = $r2;

        $r3 = new com.android.org.conscrypt.SSLSocketOutputStream;

        specialinvoke $r3.<com.android.org.conscrypt.SSLSocketOutputStream: void <init>(com.android.org.conscrypt.SSLSocketImpl)>(r0);

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketOutputStream appDataOS> = $r3;

        return;
    }

    protected void initTransportLayer() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.io.InputStream $r1;
        java.io.OutputStream $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = specialinvoke r0.<javax.net.ssl.SSLSocket: java.io.InputStream getInputStream()>();

        r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.InputStream input> = $r1;

        $r2 = specialinvoke r0.<javax.net.ssl.SSLSocket: java.io.OutputStream getOutputStream()>();

        r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.OutputStream output> = $r2;

        return;
    }

    protected void needAppData() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.AlertException r2, $r32;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.org.conscrypt.Logger$Stream $r3, $r5, $r7, $r24, $r27, $r31;
        com.android.org.conscrypt.SSLSocketInputStream $r4, $r9, $r21, $r34;
        java.lang.StringBuilder $r6, $r8, $r10, $r13, $r15, $r16, $r17;
        java.lang.String $r11, $r19;
        com.android.org.conscrypt.SSLRecordProtocol $r12;
        javax.net.ssl.SSLException $r14, $r30;
        com.android.org.conscrypt.AlertProtocol $r18, $r20, $r26;
        byte[] $r22;
        java.io.OutputStream $r23;
        com.android.org.conscrypt.HandshakeProtocol $r25;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r28, $r29;
        byte $b3;
        com.android.org.conscrypt.EndOfSourceException $r33;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started>;

        if $z0 != 0 goto label01;

        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void startHandshake()>();

     label01:
        $r3 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r3 == null goto label02;

        $r31 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r31.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("SSLSocket.needAppData..");

     label02:
        $r4 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketInputStream appDataIS>;

        $i1 = virtualinvoke $r4.<com.android.org.conscrypt.SSLSocketInputStream: int available()>();

        if $i1 != 0 goto label11;

        $r12 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        i0 = virtualinvoke $r12.<com.android.org.conscrypt.SSLRecordProtocol: int unwrap()>();

     label03:
        tableswitch(i0)
        {
            case 21: goto label12;
            case 22: goto label08;
            case 23: goto label14;
            default: goto label04;
        };

     label04:
        $r14 = new javax.net.ssl.SSLException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected message of type ");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been got");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r19);

        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void reportFatalAlert(byte,javax.net.ssl.SSLException)>(10, $r14);

     label05:
        $r18 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $z2 = virtualinvoke $r18.<com.android.org.conscrypt.AlertProtocol: boolean hasAlert()>();

        if $z2 == 0 goto label06;

        $r23 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.OutputStream output>;

        $r20 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $r22 = virtualinvoke $r20.<com.android.org.conscrypt.AlertProtocol: byte[] wrap()>();

        virtualinvoke $r23.<java.io.OutputStream: void write(byte[])>($r22);

        $r26 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r26.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

     label06:
        $z1 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed>;

        if $z1 == 0 goto label02;

        $r21 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketInputStream appDataIS>;

        virtualinvoke $r21.<com.android.org.conscrypt.SSLSocketInputStream: void setEnd()>();

     label07:
        return;

     label08:
        $r25 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        $r28 = virtualinvoke $r25.<com.android.org.conscrypt.HandshakeProtocol: javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()>();

        $r29 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        $z3 = virtualinvoke $r28.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r29);

        if $z3 != 0 goto label05;

        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void doHandshake()>();

     label09:
        goto label05;

     label10:
        $r32 := @caughtexception;

        r2 = $r32;

        $b3 = virtualinvoke r2.<com.android.org.conscrypt.AlertException: byte getDescriptionCode()>();

        $r30 = virtualinvoke r2.<com.android.org.conscrypt.AlertException: javax.net.ssl.SSLException getReason()>();

        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void reportFatalAlert(byte,javax.net.ssl.SSLException)>($b3, $r30);

     label11:
        $r5 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r5 == null goto label17;

        $r7 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SSLSocket.needAppData: app data len: ");

        $r9 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketInputStream appDataIS>;

        $i2 = virtualinvoke $r9.<com.android.org.conscrypt.SSLSocketInputStream: int available()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r11);

        return;

     label12:
        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void processAlert()>();

        $z4 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed>;

        if $z4 == 0 goto label05;

     label13:
        return;

     label14:
        $r27 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r27 == null goto label05;

        $r24 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r24.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("SSLSocket.needAppData: got the data");

     label15:
        goto label05;

     label16:
        $r33 := @caughtexception;

        $r34 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketInputStream appDataIS>;

        virtualinvoke $r34.<com.android.org.conscrypt.SSLSocketInputStream: void setEnd()>();

        goto label11;

     label17:
        return;

        catch com.android.org.conscrypt.AlertException from label02 to label03 with label10;
        catch com.android.org.conscrypt.EndOfSourceException from label02 to label03 with label16;
        catch com.android.org.conscrypt.AlertException from label04 to label05 with label10;
        catch com.android.org.conscrypt.EndOfSourceException from label04 to label05 with label16;
        catch com.android.org.conscrypt.AlertException from label05 to label06 with label10;
        catch com.android.org.conscrypt.EndOfSourceException from label05 to label06 with label16;
        catch com.android.org.conscrypt.AlertException from label06 to label07 with label10;
        catch com.android.org.conscrypt.EndOfSourceException from label06 to label07 with label16;
        catch com.android.org.conscrypt.AlertException from label08 to label09 with label10;
        catch com.android.org.conscrypt.EndOfSourceException from label08 to label09 with label16;
        catch com.android.org.conscrypt.AlertException from label12 to label13 with label10;
        catch com.android.org.conscrypt.EndOfSourceException from label12 to label13 with label16;
        catch com.android.org.conscrypt.AlertException from label14 to label15 with label10;
        catch com.android.org.conscrypt.EndOfSourceException from label14 to label15 with label16;
    }

    public void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        javax.net.ssl.HandshakeCompletedListener r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4, $r5, $r6;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: javax.net.ssl.HandshakeCompletedListener;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is null");

        throw $r6;

     label1:
        $r2 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.util.ArrayList listeners>;

        if $r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is not registered");

        throw $r5;

     label2:
        $r3 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.util.ArrayList listeners>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is not registered");

        throw $r4;

     label3:
        return;
    }

    public void sendUrgentData(int) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        int i0;
        java.net.SocketException $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        i0 := @parameter0: int;

        $r1 = new java.net.SocketException;

        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Method sendUrgentData() is not supported.");

        throw $r1;
    }

    public void setEnableSessionCreation(boolean)
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setEnableSessionCreation(boolean)>(z0);

        return;
    }

    public void setEnabledCipherSuites(java.lang.String[])
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.lang.String[] r1;
        com.android.org.conscrypt.SSLParametersImpl $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r2.<com.android.org.conscrypt.SSLParametersImpl: void setEnabledCipherSuites(java.lang.String[])>(r1);

        return;
    }

    public void setEnabledProtocols(java.lang.String[])
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        java.lang.String[] r1;
        com.android.org.conscrypt.SSLParametersImpl $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r2.<com.android.org.conscrypt.SSLParametersImpl: void setEnabledProtocols(java.lang.String[])>(r1);

        return;
    }

    public void setNeedClientAuth(boolean)
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setNeedClientAuth(boolean)>(z0);

        return;
    }

    public void setOOBInline(boolean) throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        boolean z0;
        java.net.SocketException $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = new java.net.SocketException;

        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Methods sendUrgentData, setOOBInline are not supported.");

        throw $r1;
    }

    public void setUseClientMode(boolean)
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        boolean z0, $z1;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started>;

        if $z1 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not change the mode after the initial handshake has begun.");

        throw $r2;

     label1:
        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setUseClientMode(boolean)>(z0);

        return;
    }

    public void setWantClientAuth(boolean)
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setWantClientAuth(boolean)>(z0);

        return;
    }

    public void startHandshake() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        com.android.org.conscrypt.SSLSocketInputStream $r1, $r15;
        boolean $z0, $z1, $z2;
        com.android.org.conscrypt.Logger$Stream $r2, $r4, $r5, $r6, $r8, $r17, $r20, $r22;
        com.android.org.conscrypt.HandshakeProtocol $r3, $r13;
        com.android.org.conscrypt.SSLParametersImpl $r7;
        com.android.org.conscrypt.ServerHandshakeImpl $r9;
        com.android.org.conscrypt.AlertProtocol $r10, $r16;
        com.android.org.conscrypt.SSLRecordProtocol $r11;
        com.android.org.conscrypt.SSLStreamedInput $r12;
        java.io.InputStream $r14;
        com.android.org.conscrypt.SSLSocketInputStream$Adapter $r18;
        com.android.org.conscrypt.ClientHandshakeImpl $r19;
        java.io.IOException $r21, $r23;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketInputStream appDataIS>;

        if $r1 != null goto label1;

        $r23 = new java.io.IOException;

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>("Socket is not connected.");

        throw $r23;

     label1:
        $z0 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean socket_was_closed>;

        if $z0 == 0 goto label2;

        $r21 = new java.io.IOException;

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>("Socket has already been closed.");

        throw $r21;

     label2:
        $z1 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started>;

        if $z1 != 0 goto label5;

        r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started> = 1;

        $r7 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z2 = virtualinvoke $r7.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        if $z2 == 0 goto label8;

        $r20 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r20 == null goto label3;

        $r22 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r22.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("SSLSocketImpl: CLIENT");

     label3:
        $r19 = new com.android.org.conscrypt.ClientHandshakeImpl;

        specialinvoke $r19.<com.android.org.conscrypt.ClientHandshakeImpl: void <init>(java.lang.Object)>(r0);

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol> = $r19;

     label4:
        $r10 = new com.android.org.conscrypt.AlertProtocol;

        specialinvoke $r10.<com.android.org.conscrypt.AlertProtocol: void <init>()>();

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol> = $r10;

        $r11 = new com.android.org.conscrypt.SSLRecordProtocol;

        $r13 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        $r16 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $r12 = new com.android.org.conscrypt.SSLStreamedInput;

        $r14 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.InputStream input>;

        specialinvoke $r12.<com.android.org.conscrypt.SSLStreamedInput: void <init>(java.io.InputStream)>($r14);

        $r15 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLSocketInputStream appDataIS>;

        $r18 = $r15.<com.android.org.conscrypt.SSLSocketInputStream: com.android.org.conscrypt.SSLSocketInputStream$Adapter dataPoint>;

        specialinvoke $r11.<com.android.org.conscrypt.SSLRecordProtocol: void <init>(com.android.org.conscrypt.HandshakeProtocol,com.android.org.conscrypt.AlertProtocol,com.android.org.conscrypt.SSLInputStream,com.android.org.conscrypt.Appendable)>($r13, $r16, $r12, $r18);

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol> = $r11;

     label5:
        $r2 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r2 == null goto label6;

        $r6 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r6.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("SSLSocketImpl.startHandshake");

     label6:
        $r3 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        virtualinvoke $r3.<com.android.org.conscrypt.HandshakeProtocol: void start()>();

        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void doHandshake()>();

        $r4 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r4 == null goto label7;

        $r5 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r5.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("SSLSocketImpl.startHandshake: END");

     label7:
        return;

     label8:
        $r8 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r8 == null goto label9;

        $r17 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r17.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("SSLSocketImpl: SERVER");

     label9:
        $r9 = new com.android.org.conscrypt.ServerHandshakeImpl;

        specialinvoke $r9.<com.android.org.conscrypt.ServerHandshakeImpl: void <init>(java.lang.Object)>(r0);

        r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol> = $r9;

        goto label4;
    }

    protected void writeAppData(byte[], int, int) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketImpl r0;
        byte[] r1, $r6, $r9, $r12;
        int i0, i1;
        com.android.org.conscrypt.AlertException r2, $r19;
        boolean $z0;
        com.android.org.conscrypt.Logger$Stream $r3, $r13;
        com.android.org.conscrypt.SSLRecordProtocol $r4, $r7, $r10;
        java.io.OutputStream $r5, $r8, $r11;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18;
        java.lang.String $r20;
        javax.net.ssl.SSLException $r21;
        byte $b2;

        r0 := @this: com.android.org.conscrypt.SSLSocketImpl;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.org.conscrypt.SSLSocketImpl: boolean handshake_started>;

        if $z0 != 0 goto label01;

        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void startHandshake()>();

     label01:
        $r3 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r3 == null goto label02;

        $r13 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.Logger$Stream logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SSLSocket.writeAppData: ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(16384);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r20);

     label02:
        if i1 >= 16384 goto label05;

     label03:
        $r11 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.OutputStream output>;

        $r10 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r12 = virtualinvoke $r10.<com.android.org.conscrypt.SSLRecordProtocol: byte[] wrap(byte,byte[],int,int)>(23, r1, i0, i1);

        virtualinvoke $r11.<java.io.OutputStream: void write(byte[])>($r12);

     label04:
        return;

     label05:
        if i1 < 16384 goto label08;

     label06:
        $r8 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.OutputStream output>;

        $r7 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r9 = virtualinvoke $r7.<com.android.org.conscrypt.SSLRecordProtocol: byte[] wrap(byte,byte[],int,int)>(23, r1, i0, 16384);

        virtualinvoke $r8.<java.io.OutputStream: void write(byte[])>($r9);

     label07:
        i0 = i0 + 16384;

        i1 = i1 + -16384;

        goto label05;

     label08:
        if i1 <= 0 goto label12;

     label09:
        $r5 = r0.<com.android.org.conscrypt.SSLSocketImpl: java.io.OutputStream output>;

        $r4 = r0.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r6 = virtualinvoke $r4.<com.android.org.conscrypt.SSLRecordProtocol: byte[] wrap(byte,byte[],int,int)>(23, r1, i0, i1);

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[])>($r6);

     label10:
        return;

     label11:
        $r19 := @caughtexception;

        r2 = $r19;

        $b2 = virtualinvoke r2.<com.android.org.conscrypt.AlertException: byte getDescriptionCode()>();

        $r21 = virtualinvoke r2.<com.android.org.conscrypt.AlertException: javax.net.ssl.SSLException getReason()>();

        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void reportFatalAlert(byte,javax.net.ssl.SSLException)>($b2, $r21);

     label12:
        return;

        catch com.android.org.conscrypt.AlertException from label03 to label04 with label11;
        catch com.android.org.conscrypt.AlertException from label06 to label07 with label11;
        catch com.android.org.conscrypt.AlertException from label09 to label10 with label11;
    }
}
