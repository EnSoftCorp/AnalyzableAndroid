public class com.android.org.conscrypt.OpenSSLSignature extends java.security.Signature
{
    private long ctx;
    private final com.android.org.conscrypt.OpenSSLSignature$EngineType engineType;
    private final java.lang.String evpAlgorithm;
    private com.android.org.conscrypt.OpenSSLKey key;
    private final byte[] singleByte;

    private void <init>(java.lang.String, com.android.org.conscrypt.OpenSSLSignature$EngineType) throws java.security.NoSuchAlgorithmException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.lang.String r1, $r4;
        com.android.org.conscrypt.OpenSSLSignature$EngineType r2;
        byte[] $r3;
        boolean $z0;
        java.security.NoSuchAlgorithmException $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.org.conscrypt.OpenSSLSignature$EngineType;

        specialinvoke r0.<java.security.Signature: void <init>(java.lang.String)>(r1);

        $r3 = newarray (byte)[1];

        r0.<com.android.org.conscrypt.OpenSSLSignature: byte[] singleByte> = $r3;

        $r4 = "RSA-MD2";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = new java.security.NoSuchAlgorithmException;

        specialinvoke $r5.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label1:
        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType> = r2;

        r0.<com.android.org.conscrypt.OpenSSLSignature: java.lang.String evpAlgorithm> = r1;

        return;
    }

    void <init>(java.lang.String, com.android.org.conscrypt.OpenSSLSignature$EngineType, com.android.org.conscrypt.OpenSSLSignature$1) throws java.security.NoSuchAlgorithmException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.lang.String r1;
        com.android.org.conscrypt.OpenSSLSignature$EngineType r2;
        com.android.org.conscrypt.OpenSSLSignature$1 r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.org.conscrypt.OpenSSLSignature$EngineType;

        r3 := @parameter2: com.android.org.conscrypt.OpenSSLSignature$1;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void <init>(java.lang.String,com.android.org.conscrypt.OpenSSLSignature$EngineType)>(r1, r2);

        return;
    }

    private void checkEngineType(com.android.org.conscrypt.OpenSSLKey) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        com.android.org.conscrypt.OpenSSLKey r1;
        int i0, $i2, $i3;
        long $l1;
        com.android.org.conscrypt.OpenSSLSignature$EngineType $r2;
        int[] $r3;
        java.security.InvalidKeyException $r4, $r5, $r6, $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        i0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_type(long)>($l1);

        $r3 = <com.android.org.conscrypt.OpenSSLSignature$1: int[] $SwitchMap$org$conscrypt$OpenSSLSignature$EngineType>;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $i2 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSignature$EngineType: int ordinal()>();

        $i3 = $r3[$i2];

        tableswitch($i3)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Need DSA or RSA or EC private key");

        throw $r4;

     label2:
        if i0 == 6 goto label5;

        $r7 = new java.security.InvalidKeyException;

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Signature not initialized as RSA");

        throw $r7;

     label3:
        if i0 == 116 goto label5;

        $r6 = new java.security.InvalidKeyException;

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Signature not initialized as DSA");

        throw $r6;

     label4:
        if i0 == 408 goto label5;

        $r5 = new java.security.InvalidKeyException;

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Signature not initialized as EC");

        throw $r5;

     label5:
        return;
    }

    private void destroyContextIfExists()
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_MD_CTX_destroy(long)>($l2);

        r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx> = 0L;

     label1:
        return;
    }

    protected java.lang.Object engineGetParameter(java.lang.String) throws java.security.InvalidParameterException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.lang.String r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.security.PrivateKey r1;
        com.android.org.conscrypt.OpenSSLKey r2, $r7, $r11, $r18, $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.security.InvalidKeyException $r3, $r8, $r14, $r17, $r24;
        com.android.org.conscrypt.OpenSSLSignature$EngineType $r4, $r5, $r9, $r10, $r13, $r16, $r19, $r20;
        java.security.interfaces.ECPrivateKey $r6;
        java.security.interfaces.DSAPrivateKey $r12;
        java.security.interfaces.RSAPrivateKey $r15;
        java.security.interfaces.RSAPrivateCrtKey $r22;
        com.android.org.conscrypt.OpenSSLKeyHolder $r23;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: java.security.PrivateKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void destroyContextIfExists()>();

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLKeyHolder;

        if $z0 == 0 goto label1;

        $r23 = (com.android.org.conscrypt.OpenSSLKeyHolder) r1;

        r2 = interfaceinvoke $r23.<com.android.org.conscrypt.OpenSSLKeyHolder: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void checkEngineType(com.android.org.conscrypt.OpenSSLKey)>(r2);

        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key> = r2;

        return;

     label1:
        $z1 = r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z1 == 0 goto label3;

        $r19 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $r20 = <com.android.org.conscrypt.OpenSSLSignature$EngineType: com.android.org.conscrypt.OpenSSLSignature$EngineType RSA>;

        if $r19 == $r20 goto label2;

        $r24 = new java.security.InvalidKeyException;

        specialinvoke $r24.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Signature not initialized as RSA");

        throw $r24;

     label2:
        $r22 = (java.security.interfaces.RSAPrivateCrtKey) r1;

        $r21 = staticinvoke <com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateCrtKey)>($r22);

        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key> = $r21;

        return;

     label3:
        $z2 = r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z2 == 0 goto label5;

        $r16 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $r13 = <com.android.org.conscrypt.OpenSSLSignature$EngineType: com.android.org.conscrypt.OpenSSLSignature$EngineType RSA>;

        if $r16 == $r13 goto label4;

        $r17 = new java.security.InvalidKeyException;

        specialinvoke $r17.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Signature not initialized as RSA");

        throw $r17;

     label4:
        $r15 = (java.security.interfaces.RSAPrivateKey) r1;

        $r18 = staticinvoke <com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateKey)>($r15);

        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key> = $r18;

        return;

     label5:
        $z3 = r1 instanceof java.security.interfaces.DSAPrivateKey;

        if $z3 == 0 goto label7;

        $r10 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $r9 = <com.android.org.conscrypt.OpenSSLSignature$EngineType: com.android.org.conscrypt.OpenSSLSignature$EngineType DSA>;

        if $r10 == $r9 goto label6;

        $r14 = new java.security.InvalidKeyException;

        specialinvoke $r14.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Signature not initialized as DSA");

        throw $r14;

     label6:
        $r12 = (java.security.interfaces.DSAPrivateKey) r1;

        $r11 = staticinvoke <com.android.org.conscrypt.OpenSSLDSAPrivateKey: com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.DSAPrivateKey)>($r12);

        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key> = $r11;

        return;

     label7:
        $z4 = r1 instanceof java.security.interfaces.ECPrivateKey;

        if $z4 == 0 goto label9;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $r4 = <com.android.org.conscrypt.OpenSSLSignature$EngineType: com.android.org.conscrypt.OpenSSLSignature$EngineType EC>;

        if $r5 == $r4 goto label8;

        $r8 = new java.security.InvalidKeyException;

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Signature not initialized as EC");

        throw $r8;

     label8:
        $r6 = (java.security.interfaces.ECPrivateKey) r1;

        $r7 = staticinvoke <com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.ECPrivateKey)>($r6);

        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key> = $r7;

        return;

     label9:
        $r3 = new java.security.InvalidKeyException;

        specialinvoke $r3.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Need DSA or RSA or EC private key");

        throw $r3;
    }

    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.security.PublicKey r1;
        com.android.org.conscrypt.OpenSSLKey r2, $r7, $r13, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.security.InvalidKeyException $r3, $r8, $r12, $r19;
        com.android.org.conscrypt.OpenSSLSignature$EngineType $r4, $r5, $r9, $r10, $r14, $r15;
        java.security.interfaces.ECPublicKey $r6;
        java.security.interfaces.DSAPublicKey $r11;
        java.security.interfaces.RSAPublicKey $r17;
        com.android.org.conscrypt.OpenSSLKeyHolder $r18;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: java.security.PublicKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void destroyContextIfExists()>();

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLKeyHolder;

        if $z0 == 0 goto label1;

        $r18 = (com.android.org.conscrypt.OpenSSLKeyHolder) r1;

        r2 = interfaceinvoke $r18.<com.android.org.conscrypt.OpenSSLKeyHolder: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void checkEngineType(com.android.org.conscrypt.OpenSSLKey)>(r2);

        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key> = r2;

        return;

     label1:
        $z1 = r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z1 == 0 goto label3;

        $r14 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $r15 = <com.android.org.conscrypt.OpenSSLSignature$EngineType: com.android.org.conscrypt.OpenSSLSignature$EngineType RSA>;

        if $r14 == $r15 goto label2;

        $r19 = new java.security.InvalidKeyException;

        specialinvoke $r19.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Signature not initialized as RSA");

        throw $r19;

     label2:
        $r17 = (java.security.interfaces.RSAPublicKey) r1;

        $r16 = staticinvoke <com.android.org.conscrypt.OpenSSLRSAPublicKey: com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.RSAPublicKey)>($r17);

        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key> = $r16;

        return;

     label3:
        $z2 = r1 instanceof java.security.interfaces.DSAPublicKey;

        if $z2 == 0 goto label5;

        $r10 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $r9 = <com.android.org.conscrypt.OpenSSLSignature$EngineType: com.android.org.conscrypt.OpenSSLSignature$EngineType DSA>;

        if $r10 == $r9 goto label4;

        $r12 = new java.security.InvalidKeyException;

        specialinvoke $r12.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Signature not initialized as DSA");

        throw $r12;

     label4:
        $r11 = (java.security.interfaces.DSAPublicKey) r1;

        $r13 = staticinvoke <com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.DSAPublicKey)>($r11);

        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key> = $r13;

        return;

     label5:
        $z3 = r1 instanceof java.security.interfaces.ECPublicKey;

        if $z3 == 0 goto label7;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $r4 = <com.android.org.conscrypt.OpenSSLSignature$EngineType: com.android.org.conscrypt.OpenSSLSignature$EngineType EC>;

        if $r5 == $r4 goto label6;

        $r8 = new java.security.InvalidKeyException;

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Signature not initialized as EC");

        throw $r8;

     label6:
        $r6 = (java.security.interfaces.ECPublicKey) r1;

        $r7 = staticinvoke <com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.ECPublicKey)>($r6);

        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key> = $r7;

        return;

     label7:
        $r3 = new java.security.InvalidKeyException;

        specialinvoke $r3.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Need DSA or RSA or EC public key");

        throw $r3;
    }

    protected void engineSetParameter(java.lang.String, java.lang.Object) throws java.security.InvalidParameterException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    protected byte[] engineSign() throws java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.lang.Throwable r1, $r10;
        java.lang.Exception r2, $r9;
        byte[] r3, r4;
        int i0, $i2;
        com.android.org.conscrypt.OpenSSLKey $r5, $r6, $r7;
        long $l1, $l3, $l4;
        java.security.SignatureException $r8, $r11;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key>;

        if $r5 != null goto label1;

        $r8 = new java.security.SignatureException;

        specialinvoke $r8.<java.security.SignatureException: void <init>(java.lang.String)>("Need DSA or RSA or EC private key");

        throw $r8;

     label1:
        $r6 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key>;

        $l1 = virtualinvoke $r6.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $i2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_size(long)>($l1);

        r3 = newarray (byte)[$i2];

        $l3 = r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx>;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key>;

        $l4 = virtualinvoke $r7.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        i0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_SignFinal(long,byte[],int,long)>($l3, r3, 0, $l4);

        r4 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 0, i0);

     label2:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void destroyContextIfExists()>();

        return r4;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

     label4:
        $r11 = new java.security.SignatureException;

        specialinvoke $r11.<java.security.SignatureException: void <init>(java.lang.Throwable)>(r2);

        throw $r11;

     label5:
        $r10 := @caughtexception;

        r1 = $r10;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void destroyContextIfExists()>();

        throw r1;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    protected void engineUpdate(byte)
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        byte b0;
        byte[] $r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        b0 := @parameter0: byte;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSignature: byte[] singleByte>;

        $r1[0] = b0;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSignature: byte[] singleByte>;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void engineUpdate(byte[],int,int)>($r2, 0, 1);

        return;
    }

    protected void engineUpdate(byte[], int, int)
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        byte[] r1;
        int i0, i1, $i2;
        java.lang.Exception r2, r3, $r6, $r7;
        long $l3, $l5, $l6, $l7, $l9, $l10;
        byte $b4, $b8;
        java.lang.String $r4, $r5;
        java.lang.RuntimeException $r8, $r9;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r0.<com.android.org.conscrypt.OpenSSLSignature: int state>;

        if $i2 != 2 goto label4;

        $l7 = r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx>;

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label2;

     label1:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSignature: java.lang.String evpAlgorithm>;

        $l10 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_SignInit(java.lang.String)>($r5);

        r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx> = $l10;

     label2:
        $l9 = r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_SignUpdate(long,byte[],int,int)>($l9, r1, i0, i1);

        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r8;

     label4:
        $l3 = r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx>;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label6;

     label5:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLSignature: java.lang.String evpAlgorithm>;

        $l6 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_VerifyInit(java.lang.String)>($r4);

        r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx> = $l6;

     label6:
        $l5 = r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_VerifyUpdate(long,byte[],int,int)>($l5, r1, i0, i1);

        return;

     label7:
        $r7 := @caughtexception;

        r2 = $r7;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        byte[] r1;
        java.lang.Throwable r2, $r7;
        int i0, $i2;
        boolean z0;
        com.android.org.conscrypt.OpenSSLKey $r4, $r5;
        long $l1, $l3;
        java.security.SignatureException $r6;
        java.lang.Exception $r8;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: byte[];

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key>;

        if $r4 != null goto label1;

        $r6 = new java.security.SignatureException;

        specialinvoke $r6.<java.security.SignatureException: void <init>(java.lang.String)>("Need DSA or RSA public key");

        throw $r6;

     label1:
        $l1 = r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx>;

        $i2 = lengthof r1;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key>;

        $l3 = virtualinvoke $r5.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        i0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_VerifyFinal(long,byte[],int,int,long)>($l1, r1, 0, $i2, $l3);

     label2:
        if i0 != 1 goto label4;

        z0 = 1;

     label3:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void destroyContextIfExists()>();

        return z0;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $r8 := @caughtexception;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void destroyContextIfExists()>();

        return 0;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void destroyContextIfExists()>();

        throw r2;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label6;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.lang.Throwable r1, $r2;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

     label1:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLSignature: long ctx>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_MD_CTX_destroy(long)>($l2);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
