public class com.android.org.conscrypt.OpenSSLX509CRL extends java.security.cert.X509CRL
{
    private final long mContext;

    private void <init>(long)
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        long l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        l0 := @parameter0: long;

        specialinvoke r0.<java.security.cert.X509CRL: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext> = l0;

        return;
    }

    public static java.util.List fromPkcs7DerInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream r1, $r6;
        java.lang.Throwable r2, $r10;
        java.lang.Exception r3, $r9;
        long[] r4;
        java.util.ArrayList r5, $r7;
        int i0, $i3, $i4;
        long $l1, $l2, $l5, $l7, $l8;
        byte $b6;
        com.android.org.conscrypt.OpenSSLX509CRL $r8;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException $r11;

        r0 := @parameter0: java.io.InputStream;

        $r6 = new com.android.org.conscrypt.OpenSSLBIOInputStream;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLBIOInputStream: void <init>(java.io.InputStream)>(r0);

        r1 = $r6;

     label1:
        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long[] d2i_PKCS7_bio(long,int)>($l1, 2);

     label2:
        $l2 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l2);

        $r7 = new java.util.ArrayList;

        $i3 = lengthof r4;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i3);

        r5 = $r7;

        i0 = 0;

     label3:
        $i4 = lengthof r4;

        if i0 >= $i4 goto label9;

        $l5 = r4[i0];

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label8;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

     label6:
        $r11 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.Exception)>(r3);

        throw $r11;

     label7:
        $r10 := @caughtexception;

        r2 = $r10;

        $l8 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l8);

        throw r2;

     label8:
        $r8 = new com.android.org.conscrypt.OpenSSLX509CRL;

        $l7 = r4[i0];

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLX509CRL: void <init>(long)>($l7);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label4;

     label9:
        return r5;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public static java.util.List fromPkcs7PemInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream r1, $r6;
        java.lang.Throwable r2, $r10;
        java.lang.Exception r3, $r9;
        long[] r4;
        java.util.ArrayList r5, $r7;
        int i0, $i3, $i4;
        long $l1, $l2, $l5, $l7, $l8;
        byte $b6;
        com.android.org.conscrypt.OpenSSLX509CRL $r8;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException $r11;

        r0 := @parameter0: java.io.InputStream;

        $r6 = new com.android.org.conscrypt.OpenSSLBIOInputStream;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLBIOInputStream: void <init>(java.io.InputStream)>(r0);

        r1 = $r6;

     label1:
        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long[] PEM_read_bio_PKCS7(long,int)>($l1, 2);

     label2:
        $l2 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l2);

        $r7 = new java.util.ArrayList;

        $i3 = lengthof r4;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i3);

        r5 = $r7;

        i0 = 0;

     label3:
        $i4 = lengthof r4;

        if i0 >= $i4 goto label9;

        $l5 = r4[i0];

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label8;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

     label6:
        $r11 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.Exception)>(r3);

        throw $r11;

     label7:
        $r10 := @caughtexception;

        r2 = $r10;

        $l8 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l8);

        throw r2;

     label8:
        $r8 = new com.android.org.conscrypt.OpenSSLX509CRL;

        $l7 = r4[i0];

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLX509CRL: void <init>(long)>($l7);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label4;

     label9:
        return r5;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public static com.android.org.conscrypt.OpenSSLX509CRL fromX509DerInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream r1, $r5;
        java.lang.Throwable r2, $r9;
        java.lang.Exception r3, $r7;
        long l0, $l1, $l3, $l4, $l5;
        com.android.org.conscrypt.OpenSSLX509CRL r4, $r6;
        byte $b2;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException $r8;

        r0 := @parameter0: java.io.InputStream;

        $r5 = new com.android.org.conscrypt.OpenSSLBIOInputStream;

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLBIOInputStream: void <init>(java.io.InputStream)>(r0);

        r1 = $r5;

     label1:
        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long d2i_X509_CRL_bio(long)>($l1);

     label2:
        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label3;

        $l4 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l4);

        return null;

     label3:
        $r6 = new com.android.org.conscrypt.OpenSSLX509CRL;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLX509CRL: void <init>(long)>(l0);

        r4 = $r6;

     label4:
        $l3 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l3);

        return r4;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

     label6:
        $r8 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.Exception)>(r3);

        throw $r8;

     label7:
        $r9 := @caughtexception;

        r2 = $r9;

        $l5 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l5);

        throw r2;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public static com.android.org.conscrypt.OpenSSLX509CRL fromX509PemInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream r1, $r5;
        java.lang.Throwable r2, $r7;
        java.lang.Exception r3, $r9;
        long l0, $l1, $l3, $l4, $l5;
        com.android.org.conscrypt.OpenSSLX509CRL r4, $r6;
        byte $b2;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException $r8;

        r0 := @parameter0: java.io.InputStream;

        $r5 = new com.android.org.conscrypt.OpenSSLBIOInputStream;

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLBIOInputStream: void <init>(java.io.InputStream)>(r0);

        r1 = $r5;

     label1:
        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long PEM_read_bio_X509_CRL(long)>($l1);

     label2:
        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label3;

        $l4 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l4);

        return null;

     label3:
        $r6 = new com.android.org.conscrypt.OpenSSLX509CRL;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLX509CRL: void <init>(long)>(l0);

        r4 = $r6;

     label4:
        $l3 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l3);

        return r4;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

     label6:
        $r8 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.Exception)>(r3);

        throw $r8;

     label7:
        $r7 := @caughtexception;

        r2 = $r7;

        $l5 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l5);

        throw r2;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    private void verifyInternal(java.security.PublicKey, java.lang.String) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.security.PublicKey r1;
        java.lang.String r2, r3;
        java.security.Signature r4;
        byte[] $r5, $r6;
        boolean $z0;
        java.security.SignatureException $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        r1 := @parameter0: java.security.PublicKey;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CRL: java.lang.String getSigAlgName()>();

        if r3 != null goto label1;

        r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CRL: java.lang.String getSigAlgOID()>();

     label1:
        if r2 != null goto label3;

        r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r3);

     label2:
        virtualinvoke r4.<java.security.Signature: void initVerify(java.security.PublicKey)>(r1);

        $r5 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CRL: byte[] getTBSCertList()>();

        virtualinvoke r4.<java.security.Signature: void update(byte[])>($r5);

        $r6 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CRL: byte[] getSignature()>();

        $z0 = virtualinvoke r4.<java.security.Signature: boolean verify(byte[])>($r6);

        if $z0 != 0 goto label4;

        $r7 = new java.security.SignatureException;

        specialinvoke $r7.<java.security.SignatureException: void <init>(java.lang.String)>("signature did not verify");

        throw $r7;

     label3:
        r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>(r3, r2);

        goto label2;

     label4:
        return;
    }

    private void verifyOpenSSL(com.android.org.conscrypt.OpenSSLKey) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        com.android.org.conscrypt.OpenSSLKey r1;
        long $l0, $l1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void X509_CRL_verify(long,long)>($l0, $l1);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.lang.Throwable r1, $r2;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

     label1:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void X509_CRL_free(long)>($l2);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.Set getCriticalExtensionOIDs()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.lang.String[] r1, $r4;
        long $l0, $l2;
        int $i1, $i3;
        java.util.HashSet $r2;
        java.util.List $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] get_X509_CRL_ext_oids(long,int)>($l0, 1);

        $i1 = lengthof r1;

        if $i1 != 0 goto label1;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] get_X509_CRL_ext_oids(long,int)>($l2, 0);

        $i3 = lengthof $r4;

        if $i3 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.util.HashSet;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        return $r2;
    }

    public byte[] getEncoded() throws java.security.cert.CRLException
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_X509_CRL(long)>($l0);

        return $r1;
    }

    public byte[] getExtensionValue(java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.lang.String r1;
        long $l0;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        r1 := @parameter0: java.lang.String;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] X509_CRL_get_ext_oid(long,java.lang.String)>($l0, r1);

        return $r2;
    }

    public java.security.Principal getIssuerDN()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        javax.security.auth.x500.X500Principal $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $r1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        return $r1;
    }

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        javax.security.auth.x500.X500Principal $r1;
        long $l0;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $r1 = new javax.security.auth.x500.X500Principal;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] X509_CRL_get_issuer_name(long)>($l0);

        specialinvoke $r1.<javax.security.auth.x500.X500Principal: void <init>(byte[])>($r2);

        return $r1;
    }

    public java.util.Date getNextUpdate()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.util.Calendar r1;
        java.util.TimeZone $r2;
        long $l0, $l1;
        java.util.Date $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r2);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0);

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_CRL_get_nextUpdate(long)>($l0);

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void ASN1_TIME_to_Calendar(long,java.util.Calendar)>($l1, r1);

        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r3;
    }

    public java.util.Set getNonCriticalExtensionOIDs()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.lang.String[] r1, $r4;
        long $l0, $l2;
        int $i1, $i3;
        java.util.HashSet $r2;
        java.util.List $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] get_X509_CRL_ext_oids(long,int)>($l0, 0);

        $i1 = lengthof r1;

        if $i1 != 0 goto label1;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] get_X509_CRL_ext_oids(long,int)>($l2, 1);

        $i3 = lengthof $r4;

        if $i3 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.util.HashSet;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        return $r2;
    }

    public java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.math.BigInteger r1;
        long l0, $l1, $l3;
        byte[] $r2;
        byte $b2;
        com.android.org.conscrypt.OpenSSLX509CRLEntry $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        r1 := @parameter0: java.math.BigInteger;

        $l1 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $r2 = virtualinvoke r1.<java.math.BigInteger: byte[] toByteArray()>();

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_CRL_get0_by_serial(long,byte[])>($l1, $r2);

        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label1;

        return null;

     label1:
        $r3 = new com.android.org.conscrypt.OpenSSLX509CRLEntry;

        $l3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_REVOKED_dup(long)>(l0);

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLX509CRLEntry: void <init>(long)>($l3);

        return $r3;
    }

    public java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.security.cert.X509Certificate r1;
        com.android.org.conscrypt.OpenSSLX509Certificate r2;
        long l0, $l1, $l2, $l4;
        boolean $z0;
        java.math.BigInteger $r3;
        java.security.cert.X509CRLEntry $r4;
        byte $b3;
        com.android.org.conscrypt.OpenSSLX509CRLEntry $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        r1 := @parameter0: java.security.cert.X509Certificate;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLX509Certificate;

        if $z0 == 0 goto label2;

        r2 = (com.android.org.conscrypt.OpenSSLX509Certificate) r1;

        $l1 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $l2 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLX509Certificate: long getContext()>();

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_CRL_get0_by_cert(long,long)>($l1, $l2);

        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label1;

        return null;

     label1:
        $r5 = new com.android.org.conscrypt.OpenSSLX509CRLEntry;

        $l4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_REVOKED_dup(long)>(l0);

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLX509CRLEntry: void <init>(long)>($l4);

        return $r5;

     label2:
        $r3 = virtualinvoke r1.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();

        $r4 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)>($r3);

        return $r4;
    }

    public java.util.Set getRevokedCertificates()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        long[] r1;
        java.util.HashSet r2, $r3;
        int i0, i1, $i3;
        long $l2, $l4;
        com.android.org.conscrypt.OpenSSLX509CRLEntry $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long[] X509_CRL_get_REVOKED(long)>($l2);

        if r1 == null goto label1;

        $i3 = lengthof r1;

        if $i3 != 0 goto label3;

     label1:
        r2 = null;

     label2:
        return r2;

     label3:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r2 = $r3;

        i0 = lengthof r1;

        i1 = 0;

     label4:
        if i1 >= i0 goto label2;

        $r4 = new com.android.org.conscrypt.OpenSSLX509CRLEntry;

        $l4 = r1[i1];

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLX509CRLEntry: void <init>(long)>($l4);

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label4;
    }

    public java.lang.String getSigAlgName()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $r1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CRL: java.lang.String getSigAlgOID()>();

        $r2 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.String getSigAlgOID()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String get_X509_CRL_sig_alg_oid(long)>($l0);

        return $r1;
    }

    public byte[] getSigAlgParams()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] get_X509_CRL_sig_alg_parameter(long)>($l0);

        return $r1;
    }

    public byte[] getSignature()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] get_X509_CRL_signature(long)>($l0);

        return $r1;
    }

    public byte[] getTBSCertList() throws java.security.cert.CRLException
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] get_X509_CRL_crl_enc(long)>($l0);

        return $r1;
    }

    public java.util.Date getThisUpdate()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.util.Calendar r1;
        java.util.TimeZone $r2;
        long $l0, $l1;
        java.util.Date $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r2);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0);

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_CRL_get_lastUpdate(long)>($l0);

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void ASN1_TIME_to_Calendar(long,java.util.Calendar)>($l1, r1);

        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r3;
    }

    public int getVersion()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        long $l0, $l1;
        int $i2, $i3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_CRL_get_version(long)>($l0);

        $i2 = (int) $l1;

        $i3 = 1 + $i2;

        return $i3;
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.lang.String[] r1;
        int i0, i1, $i5;
        java.lang.String r2;
        long $l2, $l3, $l4;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] get_X509_CRL_ext_oids(long,int)>($l2, 1);

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $l3 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $l4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_CRL_get_ext(long,java.lang.String)>($l3, r2);

        $i5 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int X509_supported_extension(long)>($l4);

        if $i5 == 1 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isRevoked(java.security.cert.Certificate)
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.security.cert.Certificate r1;
        java.lang.Exception r2, $r7;
        com.android.org.conscrypt.OpenSSLX509Certificate r3, r4;
        boolean $z0, $z1;
        java.io.ByteArrayInputStream $r5;
        byte[] $r6;
        long $l0, $l1, $l2;
        byte $b3;
        java.lang.RuntimeException $r8;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        r1 := @parameter0: java.security.cert.Certificate;

        $z0 = r1 instanceof java.security.cert.X509Certificate;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $z1 = r1 instanceof com.android.org.conscrypt.OpenSSLX509Certificate;

        if $z1 == 0 goto label4;

        r4 = (com.android.org.conscrypt.OpenSSLX509Certificate) r1;

     label3:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        $l1 = virtualinvoke r4.<com.android.org.conscrypt.OpenSSLX509Certificate: long getContext()>();

        $l2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_CRL_get0_by_cert(long,long)>($l0, $l1);

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        return 1;

     label4:
        $r5 = new java.io.ByteArrayInputStream;

        $r6 = virtualinvoke r1.<java.security.cert.Certificate: byte[] getEncoded()>();

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        r3 = staticinvoke <com.android.org.conscrypt.OpenSSLX509Certificate: com.android.org.conscrypt.OpenSSLX509Certificate fromX509DerInputStream(java.io.InputStream)>($r5);

     label5:
        r4 = r3;

        goto label3;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("cannot convert certificate", r2);

        throw $r8;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.io.ByteArrayOutputStream r1, $r4;
        long l0, $l1;
        java.lang.Throwable r2, $r5;
        java.lang.String r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r4;

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long create_BIO_OutputStream(java.io.OutputStream)>(r1);

     label1:
        $l1 = r0.<com.android.org.conscrypt.OpenSSLX509CRL: long mContext>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void X509_CRL_print(long,long)>(l0, $l1);

        r3 = virtualinvoke r1.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

     label2:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>(l0);

        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void verify(java.security.PublicKey) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.security.PublicKey r1;
        boolean $z0;
        com.android.org.conscrypt.OpenSSLKeyHolder $r2;
        com.android.org.conscrypt.OpenSSLKey $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        r1 := @parameter0: java.security.PublicKey;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLKeyHolder;

        if $z0 == 0 goto label1;

        $r2 = (com.android.org.conscrypt.OpenSSLKeyHolder) r1;

        $r3 = interfaceinvoke $r2.<com.android.org.conscrypt.OpenSSLKeyHolder: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLX509CRL: void verifyOpenSSL(com.android.org.conscrypt.OpenSSLKey)>($r3);

        return;

     label1:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLX509CRL: void verifyInternal(java.security.PublicKey,java.lang.String)>(r1, null);

        return;
    }

    public void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLX509CRL r0;
        java.security.PublicKey r1;
        java.lang.String r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CRL;

        r1 := @parameter0: java.security.PublicKey;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLX509CRL: void verifyInternal(java.security.PublicKey,java.lang.String)>(r1, r2);

        return;
    }
}
