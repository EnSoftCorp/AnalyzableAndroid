public class com.android.org.conscrypt.ConnectionStateTLS extends com.android.org.conscrypt.ConnectionState
{
    private static byte[] CLIENT_WRITE_KEY_LABEL;
    private static byte[] IV_BLOCK_LABEL;
    private static byte[] KEY_EXPANSION_LABEL;
    private static byte[] SERVER_WRITE_KEY_LABEL;
    private final javax.crypto.Mac decMac;
    private final javax.crypto.Mac encMac;
    private final byte[] mac_material_header;

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3;

        $r0 = newarray (byte)[13];

        $r0[0] = 107;

        $r0[1] = 101;

        $r0[2] = 121;

        $r0[3] = 32;

        $r0[4] = 101;

        $r0[5] = 120;

        $r0[6] = 112;

        $r0[7] = 97;

        $r0[8] = 110;

        $r0[9] = 115;

        $r0[10] = 105;

        $r0[11] = 111;

        $r0[12] = 110;

        <com.android.org.conscrypt.ConnectionStateTLS: byte[] KEY_EXPANSION_LABEL> = $r0;

        $r1 = newarray (byte)[16];

        $r1[0] = 99;

        $r1[1] = 108;

        $r1[2] = 105;

        $r1[3] = 101;

        $r1[4] = 110;

        $r1[5] = 116;

        $r1[6] = 32;

        $r1[7] = 119;

        $r1[8] = 114;

        $r1[9] = 105;

        $r1[10] = 116;

        $r1[11] = 101;

        $r1[12] = 32;

        $r1[13] = 107;

        $r1[14] = 101;

        $r1[15] = 121;

        <com.android.org.conscrypt.ConnectionStateTLS: byte[] CLIENT_WRITE_KEY_LABEL> = $r1;

        $r2 = newarray (byte)[16];

        $r2[0] = 115;

        $r2[1] = 101;

        $r2[2] = 114;

        $r2[3] = 118;

        $r2[4] = 101;

        $r2[5] = 114;

        $r2[6] = 32;

        $r2[7] = 119;

        $r2[8] = 114;

        $r2[9] = 105;

        $r2[10] = 116;

        $r2[11] = 101;

        $r2[12] = 32;

        $r2[13] = 107;

        $r2[14] = 101;

        $r2[15] = 121;

        <com.android.org.conscrypt.ConnectionStateTLS: byte[] SERVER_WRITE_KEY_LABEL> = $r2;

        $r3 = newarray (byte)[8];

        $r3[0] = 73;

        $r3[1] = 86;

        $r3[2] = 32;

        $r3[3] = 98;

        $r3[4] = 108;

        $r3[5] = 111;

        $r3[6] = 99;

        $r3[7] = 107;

        <com.android.org.conscrypt.ConnectionStateTLS: byte[] IV_BLOCK_LABEL> = $r3;

        return;
    }

    protected void <init>(com.android.org.conscrypt.SSLSessionImpl)
    {
        com.android.org.conscrypt.ConnectionStateTLS r0;
        com.android.org.conscrypt.SSLSessionImpl r1;
        java.lang.Exception r2, $r117;
        com.android.org.conscrypt.CipherSuite r3;
        boolean z0, z1, $z2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42;
        java.lang.String r4, r5, $r56, $r86, $r88, $r101, $r106, $r111, $r115, $r118, $r120;
        byte[] r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r20, $r35, $r38, $r39, $r67, $r79, $r82, $r92, $r94;
        javax.crypto.spec.IvParameterSpec r17, r18, r135, r136, r142, r143;
        javax.crypto.Mac r19, r21, r23, r25, $r49, $r50;
        javax.crypto.spec.SecretKeySpec r22, r24, r26, r27, r29, r31, r33, r36, r140, r141, r146, r147, r148, r149, r150, r151;
        javax.crypto.Cipher r28, r30, r32, r34, $r40, $r41;
        com.android.org.conscrypt.Logger$Stream $r37, $r44, $r55, $r59, $r61, $r62, $r63, $r64, $r65, $r66, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r78, $r80, $r81, $r84, $r90, $r95, $r98, $r103, $r108, $r113, $r125;
        java.lang.StringBuilder $r53, $r54, $r87, $r89, $r99, $r100, $r104, $r105, $r109, $r110, $r112, $r119, $r121, $r122, $r123, $r124, r128, r129, r130, r131, r132, r133, r134, r137;
        javax.crypto.NullCipher r138, r139;
        javax.net.ssl.SSLProtocolException r144;
        com.android.org.conscrypt.AlertException r145;
        java.security.Key r152, r153, r154, r156, r158, r160, r162, r163;
        java.security.spec.AlgorithmParameterSpec r155, r157, r159, r161;

        r0 := @this: com.android.org.conscrypt.ConnectionStateTLS;

        r1 := @parameter0: com.android.org.conscrypt.SSLSessionImpl;

        specialinvoke r0.<com.android.org.conscrypt.ConnectionState: void <init>()>();

        $r35 = newarray (byte)[5];

        $r35[0] = 0;

        $r35[1] = 3;

        $r35[2] = 1;

        $r35[3] = 0;

        $r35[4] = 0;

        r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] mac_material_header> = $r35;

     label01:
        r3 = r1.<com.android.org.conscrypt.SSLSessionImpl: com.android.org.conscrypt.CipherSuite cipherSuite>;

        $i6 = virtualinvoke r3.<com.android.org.conscrypt.CipherSuite: int getMACLength()>();

        r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size> = $i6;

        z0 = virtualinvoke r3.<com.android.org.conscrypt.CipherSuite: boolean isExportable()>();

     label02:
        if z0 == 0 goto label23;

     label03:
        i0 = r3.<com.android.org.conscrypt.CipherSuite: int keyMaterial>;

     label04:
        i1 = r3.<com.android.org.conscrypt.CipherSuite: int ivSize>;

        $i5 = virtualinvoke r3.<com.android.org.conscrypt.CipherSuite: int getBlockSize()>();

        r0.<com.android.org.conscrypt.ConnectionStateTLS: int block_size> = $i5;

        r4 = virtualinvoke r3.<com.android.org.conscrypt.CipherSuite: java.lang.String getBulkEncryptionAlgorithm()>();

        r5 = virtualinvoke r3.<com.android.org.conscrypt.CipherSuite: java.lang.String getHmacName()>();

        $r37 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        if $r37 == null goto label05;

        $r95 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r95.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("ConnectionStateTLS.create:");

        $r84 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        r128 = new java.lang.StringBuilder;

        specialinvoke r128.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  cipher suite name: ");

        $r86 = virtualinvoke r3.<com.android.org.conscrypt.CipherSuite: java.lang.String getName()>();

        $r89 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);

        $r88 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r84.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r88);

        $r90 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        r129 = new java.lang.StringBuilder;

        specialinvoke r129.<java.lang.StringBuilder: void <init>()>();

        $r104 = virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  encryption alg name: ");

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r90.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r106);

        $r108 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        r130 = new java.lang.StringBuilder;

        specialinvoke r130.<java.lang.StringBuilder: void <init>()>();

        $r109 = virtualinvoke r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mac alg name: ");

        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r108.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r111);

        $r98 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        r131 = new java.lang.StringBuilder;

        specialinvoke r131.<java.lang.StringBuilder: void <init>()>();

        $r99 = virtualinvoke r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  hash size: ");

        $i41 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i41);

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r98.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r101);

        $r103 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        r132 = new java.lang.StringBuilder;

        specialinvoke r132.<java.lang.StringBuilder: void <init>()>();

        $r122 = virtualinvoke r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  block size: ");

        $i42 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int block_size>;

        $r121 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i42);

        $r120 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r103.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r120);

        $r125 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        r133 = new java.lang.StringBuilder;

        specialinvoke r133.<java.lang.StringBuilder: void <init>()>();

        $r124 = virtualinvoke r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  IV size:");

        $r123 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r115 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r125.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r115);

        $r113 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        r134 = new java.lang.StringBuilder;

        specialinvoke r134.<java.lang.StringBuilder: void <init>()>();

        $r112 = virtualinvoke r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  key size: ");

        $r119 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r118 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r113.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r118);

     label05:
        r6 = r1.<com.android.org.conscrypt.SSLSessionImpl: byte[] clientRandom>;

        r7 = r1.<com.android.org.conscrypt.SSLSessionImpl: byte[] serverRandom>;

        $i8 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        $i12 = 2 * $i8;

        $i7 = i0 * 2;

        $i10 = $i12 + $i7;

        $i11 = i1 * 2;

        $i9 = $i10 + $i11;

        r8 = newarray (byte)[$i9];

        $i15 = lengthof r6;

        $i16 = lengthof r7;

        $i14 = $i15 + $i16;

        r9 = newarray (byte)[$i14];

        $i13 = lengthof r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r9, 0, $i13);

        $i17 = lengthof r7;

        $i18 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r9, $i17, $i18);

        $r38 = r1.<com.android.org.conscrypt.SSLSessionImpl: byte[] master_secret>;

        $r39 = <com.android.org.conscrypt.ConnectionStateTLS: byte[] KEY_EXPANSION_LABEL>;

        staticinvoke <com.android.org.conscrypt.PRF: void computePRF(byte[],byte[],byte[],byte[])>(r8, $r38, $r39, r9);

        $i23 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        r10 = newarray (byte)[$i23];

        $i24 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        r11 = newarray (byte)[$i24];

        r12 = newarray (byte)[i0];

        r13 = newarray (byte)[i0];

        $z2 = r1.<com.android.org.conscrypt.SSLSessionImpl: boolean isServer>;

        if $z2 != 0 goto label40;

     label06:
        z1 = 1;

     label07:
        $i25 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r10, 0, $i25);

        $i20 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        $i19 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, $i20, r11, 0, $i19);

        $i21 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        $i22 = 2 * $i21;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, $i22, r12, 0, i0);

        $i26 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        $i27 = 2 * $i26;

        $i28 = i0 + $i27;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, $i28, r13, 0, i0);

     label08:
        if z0 == 0 goto label25;

     label09:
        $i33 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r9, 0, $i33);

        $i31 = lengthof r6;

        $i32 = lengthof r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r9, $i31, $i32);

        $i39 = r3.<com.android.org.conscrypt.CipherSuite: int expandedKeyMaterial>;

        r15 = newarray (byte)[$i39];

        $i38 = r3.<com.android.org.conscrypt.CipherSuite: int expandedKeyMaterial>;

        r14 = newarray (byte)[$i38];

        $r92 = <com.android.org.conscrypt.ConnectionStateTLS: byte[] CLIENT_WRITE_KEY_LABEL>;

        staticinvoke <com.android.org.conscrypt.PRF: void computePRF(byte[],byte[],byte[],byte[])>(r15, r12, $r92, r9);

        r16 = <com.android.org.conscrypt.ConnectionStateTLS: byte[] SERVER_WRITE_KEY_LABEL>;

        staticinvoke <com.android.org.conscrypt.PRF: void computePRF(byte[],byte[],byte[],byte[])>(r14, r13, r16, r9);

     label10:
        r12 = r15;

        r13 = r14;

     label11:
        i2 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int block_size>;

     label12:
        r18 = null;

        r17 = null;

        if i2 == 0 goto label14;

     label13:
        $i40 = i1 * 2;

        r20 = newarray (byte)[$i40];

        $r94 = <com.android.org.conscrypt.ConnectionStateTLS: byte[] IV_BLOCK_LABEL>;

        staticinvoke <com.android.org.conscrypt.PRF: void computePRF(byte[],byte[],byte[],byte[])>(r20, null, $r94, r9);

        r135 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke r135.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>(r20, 0, i1);

        r18 = r135;

        r136 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke r136.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>(r20, i1, i1);

        r17 = r136;

     label14:
        $r44 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        if $r44 == null goto label17;

        $r59 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        r137 = new java.lang.StringBuilder;

        specialinvoke r137.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is exportable: ");

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r56 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r59.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r56);

        $r55 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r55.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("master_secret");

        $r68 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        $r67 = r1.<com.android.org.conscrypt.SSLSessionImpl: byte[] master_secret>;

        virtualinvoke $r68.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>($r67);

        $r65 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r65.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("client_random");

        $r66 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r66.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>(r6);

        $r63 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r63.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("server_random");

        $r64 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r64.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>(r7);

        $r61 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r61.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("client_mac_secret");

        $r62 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r62.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>(r10);

        $r75 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r75.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("server_mac_secret");

        $r76 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r76.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>(r11);

        $r73 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r73.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("client_key");

        $r74 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r74.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>(r12);

        $r71 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r71.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("server_key");

        $r72 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r72.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>(r13);

     label15:
        if r18 != null goto label29;

     label16:
        $r78 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r78.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("no IV.");

     label17:
        if r4 != null goto label32;

     label18:
        r138 = new javax.crypto.NullCipher;

        specialinvoke r138.<javax.crypto.NullCipher: void <init>()>();

        r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Cipher encCipher> = r138;

        r139 = new javax.crypto.NullCipher;

        specialinvoke r139.<javax.crypto.NullCipher: void <init>()>();

        r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Cipher decCipher> = r139;

     label19:
        $r50 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(r5);

        r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac encMac> = $r50;

        $r49 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(r5);

        r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac decMac> = $r49;

     label20:
        if z1 == 0 goto label38;

     label21:
        r19 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac encMac>;

        r140 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r140.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r10, r5);

        r22 = r140;

        r152 = (java.security.Key) r22;

        virtualinvoke r19.<javax.crypto.Mac: void init(java.security.Key)>(r152);

        r21 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac decMac>;

        r141 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r141.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, r5);

        r24 = r141;

        r153 = (java.security.Key) r24;

        virtualinvoke r21.<javax.crypto.Mac: void init(java.security.Key)>(r153);

     label22:
        return;

     label23:
        i0 = r3.<com.android.org.conscrypt.CipherSuite: int expandedKeyMaterial>;

     label24:
        goto label04;

     label25:
        i4 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int block_size>;

     label26:
        r18 = null;

        r17 = null;

        if i4 == 0 goto label14;

     label27:
        r142 = new javax.crypto.spec.IvParameterSpec;

        $i30 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        $i29 = i0 + $i30;

        $i37 = 2 * $i29;

        specialinvoke r142.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>(r8, $i37, i1);

        r18 = r142;

        $i36 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        $i35 = i0 + $i36;

        $i34 = 2 * $i35;

        i3 = i1 + $i34;

        r143 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke r143.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>(r8, i3, i1);

        r17 = r143;

     label28:
        goto label14;

     label29:
        $r69 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r69.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("client_iv");

        $r70 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        $r82 = virtualinvoke r18.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        virtualinvoke $r70.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>($r82);

        $r81 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r81.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("server_iv");

        $r80 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        $r79 = virtualinvoke r17.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        virtualinvoke $r80.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>($r79);

     label30:
        goto label17;

     label31:
        $r117 := @caughtexception;

        r2 = $r117;

        virtualinvoke r2.<java.lang.Exception: void printStackTrace()>();

        r145 = new com.android.org.conscrypt.AlertException;

        r144 = new javax.net.ssl.SSLProtocolException;

        specialinvoke r144.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Error during computation of security parameters");

        specialinvoke r145.<com.android.org.conscrypt.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(80, r144);

        throw r145;

     label32:
        $r40 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r4);

        r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Cipher encCipher> = $r40;

        $r41 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r4);

        r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Cipher decCipher> = $r41;

     label33:
        if z1 == 0 goto label36;

     label34:
        r30 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Cipher encCipher>;

        r146 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r146.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r12, r4);

        r27 = r146;

        r154 = (java.security.Key) r27;

        r155 = (java.security.spec.AlgorithmParameterSpec) r18;

        virtualinvoke r30.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, r154, r155);

        r28 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Cipher decCipher>;

        r147 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r147.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r13, r4);

        r33 = r147;

        r156 = (java.security.Key) r33;

        r157 = (java.security.spec.AlgorithmParameterSpec) r17;

        virtualinvoke r28.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, r156, r157);

     label35:
        goto label19;

     label36:
        r34 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Cipher encCipher>;

        r148 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r148.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r13, r4);

        r31 = r148;

        r158 = (java.security.Key) r31;

        r159 = (java.security.spec.AlgorithmParameterSpec) r17;

        virtualinvoke r34.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, r158, r159);

        r32 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Cipher decCipher>;

        r149 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r149.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r12, r4);

        r36 = r149;

        r160 = (java.security.Key) r36;

        r161 = (java.security.spec.AlgorithmParameterSpec) r18;

        virtualinvoke r32.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, r160, r161);

     label37:
        goto label19;

     label38:
        r23 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac encMac>;

        r150 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r150.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, r5);

        r26 = r150;

        r162 = (java.security.Key) r26;

        virtualinvoke r23.<javax.crypto.Mac: void init(java.security.Key)>(r162);

        r25 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac decMac>;

        r151 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r151.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r10, r5);

        r29 = r151;

        r163 = (java.security.Key) r29;

        virtualinvoke r25.<javax.crypto.Mac: void init(java.security.Key)>(r163);

     label39:
        return;

     label40:
        z1 = 0;

        goto label07;

        catch java.lang.Exception from label01 to label02 with label31;
        catch java.lang.Exception from label03 to label04 with label31;
        catch java.lang.Exception from label04 to label05 with label31;
        catch java.lang.Exception from label05 to label06 with label31;
        catch java.lang.Exception from label07 to label08 with label31;
        catch java.lang.Exception from label09 to label10 with label31;
        catch java.lang.Exception from label11 to label12 with label31;
        catch java.lang.Exception from label13 to label14 with label31;
        catch java.lang.Exception from label14 to label15 with label31;
        catch java.lang.Exception from label16 to label17 with label31;
        catch java.lang.Exception from label18 to label19 with label31;
        catch java.lang.Exception from label19 to label20 with label31;
        catch java.lang.Exception from label21 to label22 with label31;
        catch java.lang.Exception from label23 to label24 with label31;
        catch java.lang.Exception from label25 to label26 with label31;
        catch java.lang.Exception from label27 to label28 with label31;
        catch java.lang.Exception from label29 to label30 with label31;
        catch java.lang.Exception from label32 to label33 with label31;
        catch java.lang.Exception from label34 to label35 with label31;
        catch java.lang.Exception from label36 to label37 with label31;
        catch java.lang.Exception from label38 to label39 with label31;
    }

    protected byte[] decrypt(byte, byte[], int, int)
    {
        com.android.org.conscrypt.ConnectionStateTLS r0;
        byte b0, $b12, $b15, $b21, $b23, $b29, $b35;
        byte[] r1, r2, r3, r4, $r6, $r7, $r8, $r9, $r10, $r16;
        int i1, i2, i3, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i22, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i33, $i36;
        short s4, $s34;
        javax.crypto.Cipher $r5;
        javax.crypto.Mac $r11, $r12, $r14, $r15;
        com.android.org.conscrypt.Logger$Stream $r13, $r18, $r19, $r21, $r22;
        com.android.org.conscrypt.AlertException $r17, $r23;
        javax.net.ssl.SSLProtocolException $r20, $r24;

        r0 := @this: com.android.org.conscrypt.ConnectionStateTLS;

        b0 := @parameter0: byte;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r5 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Cipher decCipher>;

        r2 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] update(byte[],int,int)>(r1, i1, i2);

        $i6 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int block_size>;

        if $i6 == 0 goto label7;

        $i25 = lengthof r2;

        $i24 = -1 + $i25;

        $b29 = r2[$i24];

        s4 = 255 & $b29;

        i5 = 0;

     label1:
        if i5 >= s4 goto label3;

        $i31 = lengthof r2;

        $i30 = -2 + $i31;

        $i36 = $i30 - i5;

        $b35 = r2[$i36];

        $s34 = 255 & $b35;

        if $s34 == s4 goto label2;

        $r23 = new com.android.org.conscrypt.AlertException;

        $r24 = new javax.net.ssl.SSLProtocolException;

        specialinvoke $r24.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Received message has bad padding");

        specialinvoke $r23.<com.android.org.conscrypt.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(21, $r24);

        throw $r23;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i27 = lengthof r2;

        $i28 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        $i26 = $i27 - $i28;

        $i33 = $i26 - s4;

        $i32 = -1 + $i33;

        r3 = newarray (byte)[$i32];

     label4:
        $r6 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] mac_material_header>;

        $r6[0] = b0;

        $r7 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] mac_material_header>;

        $i11 = lengthof r3;

        $i10 = 65280 & $i11;

        $i13 = $i10 >> 8;

        $b12 = (byte) $i13;

        $r7[3] = $b12;

        $r9 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] mac_material_header>;

        $i14 = lengthof r3;

        $i16 = 255 & $i14;

        $b15 = (byte) $i16;

        $r9[4] = $b15;

        $r11 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac decMac>;

        $r8 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] read_seq_num>;

        virtualinvoke $r11.<javax.crypto.Mac: void update(byte[])>($r8);

        $r12 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac decMac>;

        $r10 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] mac_material_header>;

        virtualinvoke $r12.<javax.crypto.Mac: void update(byte[])>($r10);

        $r14 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac decMac>;

        $i17 = lengthof r3;

        virtualinvoke $r14.<javax.crypto.Mac: void update(byte[],int,int)>(r2, 0, $i17);

        $r15 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac decMac>;

        r4 = virtualinvoke $r15.<javax.crypto.Mac: byte[] doFinal()>();

        $r13 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        if $r13 == null goto label5;

        $r18 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r18.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("Decrypted:");

        $r19 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r19.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>(r2);

        $r22 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r22.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>("Expected mac value:");

        $r21 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r21.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>(r4);

     label5:
        i3 = 0;

     label6:
        $i19 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        if i3 >= $i19 goto label9;

        $b21 = r4[i3];

        $i18 = lengthof r3;

        $i22 = i3 + $i18;

        $b23 = r2[$i22];

        if $b21 == $b23 goto label8;

        $r17 = new com.android.org.conscrypt.AlertException;

        $r20 = new javax.net.ssl.SSLProtocolException;

        specialinvoke $r20.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Bad record MAC");

        specialinvoke $r17.<com.android.org.conscrypt.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(20, $r20);

        throw $r17;

     label7:
        $i8 = lengthof r2;

        $i7 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        $i9 = $i8 - $i7;

        r3 = newarray (byte)[$i9];

        goto label4;

     label8:
        i3 = i3 + 1;

        goto label6;

     label9:
        $i20 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i20);

        $r16 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] read_seq_num>;

        staticinvoke <com.android.org.conscrypt.ConnectionStateTLS: void incSequenceNumber(byte[])>($r16);

        return r3;
    }

    protected byte[] encrypt(byte, byte[], int, int)
    {
        com.android.org.conscrypt.ConnectionStateTLS r0;
        byte b0, $b9, $b12, $b21;
        byte[] r1, r3, r4, $r8, $r9, $r10, $r12, $r14, $r20;
        int i1, i2, i3, i4, i5, $i6, $i7, $i8, $i10, $i11, $i13, $i14, $i16, $i17, $i18, $i19, $i20;
        java.security.GeneralSecurityException r2, $r29;
        com.android.org.conscrypt.Logger$Stream r5, $r18, $r22;
        java.lang.StringBuilder r6, $r21, $r23, $r24, $r26, $r27, $r28;
        java.lang.String r7, $r25;
        javax.crypto.Mac $r11, $r13, $r15, $r16;
        javax.crypto.Cipher $r17, $r19;
        javax.net.ssl.SSLProtocolException $r30;
        com.android.org.conscrypt.AlertException $r31;

        r0 := @this: com.android.org.conscrypt.ConnectionStateTLS;

        b0 := @parameter0: byte;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label01:
        $i6 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int hash_size>;

        i3 = i2 + $i6;

        i4 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int block_size>;

     label02:
        i5 = 0;

        if i4 != 0 goto label08;

     label03:
        $i7 = i3 + i5;

        r3 = newarray (byte)[$i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, r3, 0, i2);

        $r8 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] mac_material_header>;

        $r8[0] = b0;

        $r9 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] mac_material_header>;

        $i8 = 65280 & i2;

        $i10 = $i8 >> 8;

        $b9 = (byte) $i10;

        $r9[3] = $b9;

        $r10 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] mac_material_header>;

        $i11 = i2 & 255;

        $b12 = (byte) $i11;

        $r10[4] = $b12;

        $r11 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac encMac>;

        $r12 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] write_seq_num>;

        virtualinvoke $r11.<javax.crypto.Mac: void update(byte[])>($r12);

        $r13 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac encMac>;

        $r14 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] mac_material_header>;

        virtualinvoke $r13.<javax.crypto.Mac: void update(byte[])>($r14);

        $r16 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac encMac>;

        virtualinvoke $r16.<javax.crypto.Mac: void update(byte[],int,int)>(r1, i1, i2);

        $r15 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Mac encMac>;

        virtualinvoke $r15.<javax.crypto.Mac: void doFinal(byte[],int)>(r3, i2);

        $i14 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int block_size>;

        if $i14 == 0 goto label04;

        $i19 = i3 - 1;

        $i20 = lengthof r3;

        $b21 = (byte) i5;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r3, $i19, $i20, $b21);

     label04:
        $r18 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        if $r18 == null goto label06;

        r5 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        r6 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SSLRecordProtocol.do_encryption: Generic");

        $i18 = r0.<com.android.org.conscrypt.ConnectionStateTLS: int block_size>;

        if $i18 == 0 goto label11;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BlockCipher with padding[");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:");

        r7 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        $r24 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r25);

        $r22 = r0.<com.android.org.conscrypt.ConnectionStateTLS: com.android.org.conscrypt.Logger$Stream logger>;

        virtualinvoke $r22.<com.android.org.conscrypt.Logger$Stream: void print(byte[])>(r3);

     label06:
        $r17 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Cipher encCipher>;

        $i13 = lengthof r3;

        $i16 = virtualinvoke $r17.<javax.crypto.Cipher: int getOutputSize(int)>($i13);

        r4 = newarray (byte)[$i16];

        $r19 = r0.<com.android.org.conscrypt.ConnectionStateTLS: javax.crypto.Cipher encCipher>;

        $i17 = lengthof r3;

        virtualinvoke $r19.<javax.crypto.Cipher: int update(byte[],int,int,byte[])>(r3, 0, $i17, r4);

        $r20 = r0.<com.android.org.conscrypt.ConnectionStateTLS: byte[] write_seq_num>;

        staticinvoke <com.android.org.conscrypt.ConnectionStateTLS: void incSequenceNumber(byte[])>($r20);

     label07:
        return r4;

     label08:
        i3 = i3 + 1;

     label09:
        i5 = virtualinvoke r0.<com.android.org.conscrypt.ConnectionStateTLS: int getPaddingSize(int)>(i3);

     label10:
        goto label03;

     label11:
        r7 = "StreamCipher:";

        goto label05;

     label12:
        $r29 := @caughtexception;

        r2 = $r29;

        virtualinvoke r2.<java.security.GeneralSecurityException: void printStackTrace()>();

        $r31 = new com.android.org.conscrypt.AlertException;

        $r30 = new javax.net.ssl.SSLProtocolException;

        specialinvoke $r30.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Error during the encryption");

        specialinvoke $r31.<com.android.org.conscrypt.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(80, $r30);

        throw $r31;

        catch java.security.GeneralSecurityException from label01 to label02 with label12;
        catch java.security.GeneralSecurityException from label03 to label04 with label12;
        catch java.security.GeneralSecurityException from label04 to label05 with label12;
        catch java.security.GeneralSecurityException from label05 to label06 with label12;
        catch java.security.GeneralSecurityException from label06 to label07 with label12;
        catch java.security.GeneralSecurityException from label09 to label10 with label12;
    }
}
