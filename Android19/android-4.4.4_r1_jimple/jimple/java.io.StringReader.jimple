public class java.io.StringReader extends java.io.Reader
{
    private int count;
    private int markpos;
    private int pos;
    private java.lang.String str;

    public void <init>(java.lang.String)
    {
        java.io.StringReader r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.io.StringReader;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<java.io.StringReader: int markpos> = -1;

        r0.<java.io.StringReader: java.lang.String str> = r1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r0.<java.io.StringReader: int count> = $i0;

        return;
    }

    private void checkNotClosed() throws java.io.IOException
    {
        java.io.StringReader r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: java.io.StringReader;

        $z0 = specialinvoke r0.<java.io.StringReader: boolean isClosed()>();

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("StringReader is closed");

        throw $r1;

     label1:
        return;
    }

    private boolean isClosed()
    {
        java.io.StringReader r0;
        java.lang.String $r1;

        r0 := @this: java.io.StringReader;

        $r1 = r0.<java.io.StringReader: java.lang.String str>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public void close()
    {
        java.io.StringReader r0;

        r0 := @this: java.io.StringReader;

        r0.<java.io.StringReader: java.lang.String str> = null;

        return;
    }

    public void mark(int) throws java.io.IOException
    {
        java.io.StringReader r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Throwable r2, $r8;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.io.StringReader;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readLimit < 0: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        r1 = r0.<java.io.StringReader: java.lang.Object lock>;

        entermonitor r1;

     label2:
        specialinvoke r0.<java.io.StringReader: void checkNotClosed()>();

        $i1 = r0.<java.io.StringReader: int pos>;

        r0.<java.io.StringReader: int markpos> = $i1;

        exitmonitor r1;

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean markSupported()
    {
        java.io.StringReader r0;

        r0 := @this: java.io.StringReader;

        return 1;
    }

    public int read() throws java.io.IOException
    {
        java.io.StringReader r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        java.lang.String r3;
        int i0, $i2, $i3, $i4;
        char c1;

        r0 := @this: java.io.StringReader;

        r1 = r0.<java.io.StringReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<java.io.StringReader: void checkNotClosed()>();

        $i3 = r0.<java.io.StringReader: int pos>;

        $i2 = r0.<java.io.StringReader: int count>;

        if $i3 == $i2 goto label3;

        r3 = r0.<java.io.StringReader: java.lang.String str>;

        i0 = r0.<java.io.StringReader: int pos>;

        $i4 = i0 + 1;

        r0.<java.io.StringReader: int pos> = $i4;

        c1 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i0);

        exitmonitor r1;

     label2:
        return c1;

     label3:
        exitmonitor r1;

     label4:
        return -1;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        java.io.StringReader r0;
        char[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;
        java.lang.String $r4;

        r0 := @this: java.io.StringReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = r0.<java.io.StringReader: java.lang.Object lock>;

        entermonitor r2;

     label01:
        specialinvoke r0.<java.io.StringReader: void checkNotClosed()>();

        $i5 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i5, i0, i1);

     label02:
        if i1 != 0 goto label05;

     label03:
        exitmonitor r2;

     label04:
        return 0;

     label05:
        $i7 = r0.<java.io.StringReader: int pos>;

        $i6 = r0.<java.io.StringReader: int count>;

        if $i7 != $i6 goto label10;

        exitmonitor r2;

     label06:
        return -1;

     label07:
        $r5 := @caughtexception;

        r3 = $r5;

     label08:
        exitmonitor r2;

     label09:
        throw r3;

     label10:
        $i8 = r0.<java.io.StringReader: int pos>;

        $i10 = i1 + $i8;

        $i9 = r0.<java.io.StringReader: int count>;

        if $i10 <= $i9 goto label13;

        i3 = r0.<java.io.StringReader: int count>;

     label11:
        $r4 = r0.<java.io.StringReader: java.lang.String str>;

        $i11 = r0.<java.io.StringReader: int pos>;

        virtualinvoke $r4.<java.lang.String: void getChars(int,int,char[],int)>($i11, i3, r1, i0);

        $i12 = r0.<java.io.StringReader: int pos>;

        i4 = i3 - $i12;

        r0.<java.io.StringReader: int pos> = i3;

        exitmonitor r2;

     label12:
        return i4;

     label13:
        i2 = r0.<java.io.StringReader: int pos>;

     label14:
        i3 = i2 + i1;

        goto label11;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
        catch java.lang.Throwable from label13 to label14 with label07;
    }

    public boolean ready() throws java.io.IOException
    {
        java.io.StringReader r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.io.StringReader;

        r1 = r0.<java.io.StringReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<java.io.StringReader: void checkNotClosed()>();

        exitmonitor r1;

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void reset() throws java.io.IOException
    {
        java.io.StringReader r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int i0, $i1;

        r0 := @this: java.io.StringReader;

        r1 = r0.<java.io.StringReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<java.io.StringReader: void checkNotClosed()>();

        $i1 = r0.<java.io.StringReader: int markpos>;

        if $i1 == -1 goto label7;

        i0 = r0.<java.io.StringReader: int markpos>;

     label2:
        r0.<java.io.StringReader: int pos> = i0;

        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        i0 = 0;

        goto label2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.StringReader r0;
        long l0, $l7, $l8, $l11, $l13;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int i1, i2, $i3, $i4, $i5, $i6, $i9;
        byte $b10, $b12;

        r0 := @this: java.io.StringReader;

        l0 := @parameter0: long;

        r1 = r0.<java.io.StringReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<java.io.StringReader: void checkNotClosed()>();

        $i3 = r0.<java.io.StringReader: int pos>;

        i1 = neg $i3;

        $i5 = r0.<java.io.StringReader: int count>;

        $i4 = r0.<java.io.StringReader: int pos>;

        i2 = $i5 - $i4;

     label2:
        if i2 == 0 goto label8;

        $l11 = (long) i2;

        $b10 = l0 cmp $l11;

        if $b10 <= 0 goto label9;

        goto label8;

     label3:
        $i6 = r0.<java.io.StringReader: int pos>;

        $l7 = (long) $i6;

        $l8 = l0 + $l7;

        $i9 = (int) $l8;

        r0.<java.io.StringReader: int pos> = $i9;

        exitmonitor r1;

     label4:
        return l0;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        l0 = (long) i2;

        goto label3;

     label9:
        $l13 = (long) i1;

        $b12 = l0 cmp $l13;

        if $b12 >= 0 goto label3;

        l0 = (long) i1;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
