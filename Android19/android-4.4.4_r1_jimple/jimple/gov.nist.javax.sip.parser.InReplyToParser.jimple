public class gov.nist.javax.sip.parser.InReplyToParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.InReplyToParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.InReplyToParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.InReplyToParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.InReplyToParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.InReplyToParser r0;
        gov.nist.javax.sip.header.InReplyToList r1, $r9;
        java.lang.Throwable r2, $r52;
        gov.nist.javax.sip.header.InReplyTo r3, r5, $r11, $r20;
        gov.nist.core.Token r4, r6, r7, r8;
        boolean $z0, $z1, $z4;
        char $c0, $c1, $c2, $c3;
        gov.nist.core.LexerCore $r10, $r13, $r14, $r15, $r16, $r18, $r19, $r21, $r23, $r24, $r26, $r27, $r29, $r31, $r41, $r43, $r48;
        java.lang.String $r17, $r28, $r34, $r36, $r38, $r46, $r50, $r51;
        java.lang.StringBuilder $r33, $r35, $r37, $r39, $r44, $r45, $r47, $r49;

        r0 := @this: gov.nist.javax.sip.parser.InReplyToParser;

        $z0 = <gov.nist.javax.sip.parser.InReplyToParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.InReplyToParser: void dbg_enter(java.lang.String)>("InReplyToParser.parse");

     label01:
        $r9 = new gov.nist.javax.sip.header.InReplyToList;

        specialinvoke $r9.<gov.nist.javax.sip.header.InReplyToList: void <init>()>();

        r1 = $r9;

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.InReplyToParser: void headerName(int)>(2059);

     label03:
        $r10 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r10.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 == 10 goto label14;

        $r11 = new gov.nist.javax.sip.header.InReplyTo;

        specialinvoke $r11.<gov.nist.javax.sip.header.InReplyTo: void <init>()>();

        r3 = $r11;

        virtualinvoke r3.<gov.nist.javax.sip.header.InReplyTo: void setHeaderName(java.lang.String)>("In-Reply-To");

        $r13 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r14 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        r4 = virtualinvoke $r14.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r15 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r15.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 64 goto label10;

        $r43 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r43.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(64);

        $r41 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r41.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r48 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        r8 = virtualinvoke $r48.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke r4.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $r44 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r46 = virtualinvoke r8.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r51 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<gov.nist.javax.sip.header.InReplyTo: void setCallId(java.lang.String)>($r51);

     label04:
        $r16 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: void SPorHT()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.InReplyToList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r3);

     label05:
        $r19 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r19.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 != 44 goto label03;

        $r18 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r18.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        $r23 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r23.<gov.nist.core.LexerCore: void SPorHT()>();

        $r20 = new gov.nist.javax.sip.header.InReplyTo;

        specialinvoke $r20.<gov.nist.javax.sip.header.InReplyTo: void <init>()>();

        r5 = $r20;

        $r21 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r21.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r26 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        r6 = virtualinvoke $r26.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r24 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        $c3 = virtualinvoke $r24.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c3 != 64 goto label12;

        $r27 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r27.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(64);

        $r31 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r31.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r29 = r0.<gov.nist.javax.sip.parser.InReplyToParser: gov.nist.core.LexerCore lexer>;

        r7 = virtualinvoke $r29.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke r6.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r38 = virtualinvoke r7.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $r37 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<gov.nist.javax.sip.header.InReplyTo: void setCallId(java.lang.String)>($r36);

     label06:
        virtualinvoke r1.<gov.nist.javax.sip.header.InReplyToList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r5);

     label07:
        goto label05;

     label08:
        $r52 := @caughtexception;

        r2 = $r52;

        $z4 = <gov.nist.javax.sip.parser.InReplyToParser: boolean debug>;

        if $z4 == 0 goto label09;

        virtualinvoke r0.<gov.nist.javax.sip.parser.InReplyToParser: void dbg_leave(java.lang.String)>("InReplyToParser.parse");

     label09:
        throw r2;

     label10:
        $r17 = virtualinvoke r4.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r3.<gov.nist.javax.sip.header.InReplyTo: void setCallId(java.lang.String)>($r17);

     label11:
        goto label04;

     label12:
        $r28 = virtualinvoke r6.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r5.<gov.nist.javax.sip.header.InReplyTo: void setCallId(java.lang.String)>($r28);

     label13:
        goto label06;

     label14:
        $z1 = <gov.nist.javax.sip.parser.InReplyToParser: boolean debug>;

        if $z1 == 0 goto label15;

        virtualinvoke r0.<gov.nist.javax.sip.parser.InReplyToParser: void dbg_leave(java.lang.String)>("InReplyToParser.parse");

     label15:
        return r1;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
        catch java.lang.Throwable from label12 to label13 with label08;
    }
}
