public final class android.view.ViewRootImpl extends java.lang.Object implements android.view.ViewParent, android.view.View$AttachInfo$Callbacks, android.view.HardwareRenderer$HardwareDrawCallbacks
{
    private static final boolean DBG;
    private static final boolean DEBUG_CONFIGURATION;
    private static final boolean DEBUG_DIALOG;
    private static final boolean DEBUG_DRAW;
    private static final boolean DEBUG_FPS;
    private static final boolean DEBUG_IMF;
    private static final boolean DEBUG_INPUT_PROCESSING;
    private static final boolean DEBUG_INPUT_RESIZE;
    private static final boolean DEBUG_LAYOUT;
    private static final boolean DEBUG_ORIENTATION;
    private static final boolean DEBUG_TRACKBALL;
    private static final boolean LOCAL_LOGV;
    private static final int MAX_QUEUED_INPUT_EVENT_POOL_SIZE;
    static final int MAX_TRACKBALL_DELAY;
    private static final int MSG_CHECK_FOCUS;
    private static final int MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST;
    private static final int MSG_CLOSE_SYSTEM_DIALOGS;
    private static final int MSG_DIE;
    private static final int MSG_DISPATCH_APP_VISIBILITY;
    private static final int MSG_DISPATCH_DONE_ANIMATING;
    private static final int MSG_DISPATCH_DRAG_EVENT;
    private static final int MSG_DISPATCH_DRAG_LOCATION_EVENT;
    private static final int MSG_DISPATCH_GET_NEW_SURFACE;
    private static final int MSG_DISPATCH_INPUT_EVENT;
    private static final int MSG_DISPATCH_KEY_FROM_IME;
    private static final int MSG_DISPATCH_SCREEN_STATE;
    private static final int MSG_DISPATCH_SYSTEM_UI_VISIBILITY;
    private static final int MSG_FINISH_INPUT_CONNECTION;
    private static final int MSG_FLUSH_LAYER_UPDATES;
    private static final int MSG_INVALIDATE;
    private static final int MSG_INVALIDATE_RECT;
    private static final int MSG_INVALIDATE_WORLD;
    private static final int MSG_PROCESS_INPUT_EVENTS;
    private static final int MSG_RESIZED;
    private static final int MSG_RESIZED_REPORT;
    private static final int MSG_UPDATE_CONFIGURATION;
    private static final int MSG_WINDOW_FOCUS_CHANGED;
    private static final int MSG_WINDOW_MOVED;
    private static final java.lang.String PROPERTY_MEDIA_DISABLED;
    private static final java.lang.String PROPERTY_PROFILE_RENDERING;
    private static final java.lang.String TAG;
    static final android.view.animation.Interpolator mResizeInterpolator;
    static final java.util.ArrayList sConfigCallbacks;
    static boolean sFirstDrawComplete;
    static final java.util.ArrayList sFirstDrawHandlers;
    static final java.lang.ThreadLocal sRunQueues;
    android.view.View mAccessibilityFocusedHost;
    android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView;
    android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager;
    android.view.AccessibilityInteractionController mAccessibilityInteractionController;
    final android.view.accessibility.AccessibilityManager mAccessibilityManager;
    boolean mAdded;
    boolean mAddedTouchMode;
    boolean mAppVisible;
    final android.view.View$AttachInfo mAttachInfo;
    android.media.AudioManager mAudioManager;
    final java.lang.String mBasePackageName;
    android.view.Choreographer mChoreographer;
    int mClientWindowLayoutFlags;
    boolean mConsumeBatchedInputScheduled;
    final android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable;
    final android.content.Context mContext;
    int mCurScrollY;
    final android.graphics.Rect mCurrentDirty;
    android.view.View mCurrentDragView;
    private final int mDensity;
    android.graphics.Rect mDirty;
    final android.view.Display mDisplay;
    final android.view.DisplayAdjustments mDisplayAdjustments;
    private final java.util.ArrayList mDisplayLists;
    android.content.ClipDescription mDragDescription;
    final android.graphics.PointF mDragPoint;
    boolean mDrawDuringWindowsAnimating;
    boolean mDrawingAllowed;
    android.view.FallbackEventHandler mFallbackEventHandler;
    boolean mFirst;
    android.view.ViewRootImpl$InputStage mFirstInputStage;
    android.view.ViewRootImpl$InputStage mFirstPostImeInputStage;
    final android.graphics.Rect mFitSystemWindowsInsets;
    boolean mFitSystemWindowsRequested;
    private int mFpsNumFrames;
    private long mFpsPrevTime;
    private long mFpsStartTime;
    boolean mFullRedrawNeeded;
    final android.view.ViewRootImpl$ViewRootHandler mHandler;
    boolean mHandlingLayoutInLayoutRequest;
    int mHardwareYOffset;
    boolean mHasHadWindowFocus;
    int mHeight;
    private final android.view.SurfaceHolder mHolder;
    private boolean mInLayout;
    android.view.InputChannel mInputChannel;
    protected final android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier;
    android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver;
    android.view.InputQueue mInputQueue;
    android.view.InputQueue$Callback mInputQueueCallback;
    final android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable;
    boolean mIsAnimating;
    boolean mIsCreating;
    boolean mIsDrawing;
    boolean mIsInTraversal;
    final android.content.res.Configuration mLastConfiguration;
    final android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets;
    boolean mLastInCompatMode;
    boolean mLastOverscanRequested;
    java.lang.ref.WeakReference mLastScrolledFocus;
    int mLastSystemUiVisibility;
    final android.graphics.PointF mLastTouchPoint;
    boolean mLastWasImTarget;
    boolean mLayoutRequested;
    java.util.ArrayList mLayoutRequesters;
    volatile java.lang.Object mLocalDragState;
    final android.view.WindowLeaked mLocation;
    private boolean mMediaDisabled;
    boolean mNewSurfaceNeeded;
    private final int mNoncompatDensity;
    int mOrigWindowType;
    final android.content.res.Configuration mPendingConfiguration;
    final android.graphics.Rect mPendingContentInsets;
    int mPendingInputEventCount;
    android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead;
    java.lang.String mPendingInputEventQueueLengthCounterName;
    android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail;
    final android.graphics.Rect mPendingOverscanInsets;
    private java.util.ArrayList mPendingTransitions;
    final android.graphics.Rect mPendingVisibleInsets;
    final android.graphics.Region mPreviousTransparentRegion;
    boolean mProcessInputEventsScheduled;
    private boolean mProfile;
    private boolean mProfileRendering;
    private android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool;
    private int mQueuedInputEventPoolSize;
    private boolean mRemoved;
    private android.view.Choreographer$FrameCallback mRenderProfiler;
    private boolean mRenderProfilingEnabled;
    boolean mReportNextDraw;
    int mResizeAlpha;
    android.view.HardwareLayer mResizeBuffer;
    int mResizeBufferDuration;
    long mResizeBufferStartTime;
    final android.graphics.Paint mResizePaint;
    boolean mScrollMayChange;
    int mScrollY;
    android.widget.Scroller mScroller;
    android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent;
    int mSeq;
    int mSoftInputMode;
    boolean mStopped;
    private final android.view.Surface mSurface;
    com.android.internal.view.BaseSurfaceHolder mSurfaceHolder;
    android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback;
    final int mTargetSdkVersion;
    java.util.HashSet mTempHashSet;
    final android.graphics.Rect mTempRect;
    final java.lang.Thread mThread;
    final int[] mTmpLocation;
    final android.util.TypedValue mTmpValue;
    android.content.res.CompatibilityInfo$Translator mTranslator;
    final android.graphics.Region mTransparentRegion;
    int mTraversalBarrier;
    final android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable;
    boolean mTraversalScheduled;
    android.view.View mView;
    final android.view.ViewConfiguration mViewConfiguration;
    private int mViewLayoutDirectionInitial;
    int mViewVisibility;
    final android.graphics.Rect mVisRect;
    int mWidth;
    boolean mWillDrawSoon;
    final android.graphics.Rect mWinFrame;
    final android.view.ViewRootImpl$W mWindow;
    final android.view.WindowManager$LayoutParams mWindowAttributes;
    boolean mWindowAttributesChanged;
    int mWindowAttributesChangesFlag;
    final android.view.IWindowSession mWindowSession;
    boolean mWindowsAnimating;

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;
        java.util.ArrayList $r1, $r2;
        android.view.animation.AccelerateDecelerateInterpolator $r3;

        <android.view.ViewRootImpl: java.lang.String TAG> = "ViewRootImpl";

        <android.view.ViewRootImpl: java.lang.String PROPERTY_PROFILE_RENDERING> = "viewroot.profile_rendering";

        <android.view.ViewRootImpl: java.lang.String PROPERTY_MEDIA_DISABLED> = "config.disable_media";

        <android.view.ViewRootImpl: int MSG_WINDOW_MOVED> = 24;

        <android.view.ViewRootImpl: int MSG_WINDOW_FOCUS_CHANGED> = 6;

        <android.view.ViewRootImpl: int MSG_UPDATE_CONFIGURATION> = 18;

        <android.view.ViewRootImpl: int MSG_RESIZED_REPORT> = 5;

        <android.view.ViewRootImpl: int MSG_RESIZED> = 4;

        <android.view.ViewRootImpl: int MSG_PROCESS_INPUT_EVENTS> = 19;

        <android.view.ViewRootImpl: int MSG_INVALIDATE_WORLD> = 23;

        <android.view.ViewRootImpl: int MSG_INVALIDATE_RECT> = 2;

        <android.view.ViewRootImpl: int MSG_INVALIDATE> = 1;

        <android.view.ViewRootImpl: int MSG_FLUSH_LAYER_UPDATES> = 25;

        <android.view.ViewRootImpl: int MSG_FINISH_INPUT_CONNECTION> = 12;

        <android.view.ViewRootImpl: int MSG_DISPATCH_SYSTEM_UI_VISIBILITY> = 17;

        <android.view.ViewRootImpl: int MSG_DISPATCH_SCREEN_STATE> = 20;

        <android.view.ViewRootImpl: int MSG_DISPATCH_KEY_FROM_IME> = 11;

        <android.view.ViewRootImpl: int MSG_DISPATCH_INPUT_EVENT> = 7;

        <android.view.ViewRootImpl: int MSG_DISPATCH_GET_NEW_SURFACE> = 9;

        <android.view.ViewRootImpl: int MSG_DISPATCH_DRAG_LOCATION_EVENT> = 16;

        <android.view.ViewRootImpl: int MSG_DISPATCH_DRAG_EVENT> = 15;

        <android.view.ViewRootImpl: int MSG_DISPATCH_DONE_ANIMATING> = 22;

        <android.view.ViewRootImpl: int MSG_DISPATCH_APP_VISIBILITY> = 8;

        <android.view.ViewRootImpl: int MSG_DIE> = 3;

        <android.view.ViewRootImpl: int MSG_CLOSE_SYSTEM_DIALOGS> = 14;

        <android.view.ViewRootImpl: int MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST> = 21;

        <android.view.ViewRootImpl: int MSG_CHECK_FOCUS> = 13;

        <android.view.ViewRootImpl: int MAX_TRACKBALL_DELAY> = 250;

        <android.view.ViewRootImpl: int MAX_QUEUED_INPUT_EVENT_POOL_SIZE> = 10;

        <android.view.ViewRootImpl: boolean LOCAL_LOGV> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_TRACKBALL> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_ORIENTATION> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_LAYOUT> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_INPUT_RESIZE> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_INPUT_PROCESSING> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_IMF> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_FPS> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_DRAW> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_DIALOG> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_CONFIGURATION> = 0;

        <android.view.ViewRootImpl: boolean DBG> = 0;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <android.view.ViewRootImpl: java.lang.ThreadLocal sRunQueues> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers> = $r1;

        <android.view.ViewRootImpl: boolean sFirstDrawComplete> = 0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks> = $r2;

        $r3 = new android.view.animation.AccelerateDecelerateInterpolator;

        specialinvoke $r3.<android.view.animation.AccelerateDecelerateInterpolator: void <init>()>();

        <android.view.ViewRootImpl: android.view.animation.Interpolator mResizeInterpolator> = $r3;

        return;
    }

    public void <init>(android.content.Context, android.view.Display)
    {
        android.view.ViewRootImpl r0;
        android.content.Context r1;
        android.view.Display r2;
        android.view.InputEventConsistencyVerifier r3, $r59;
        android.os.PowerManager r4;
        int[] $r5;
        android.util.TypedValue $r6;
        android.view.WindowManager$LayoutParams $r7;
        android.graphics.Rect $r8, $r10, $r11, $r12, $r15, $r33, $r34, $r36, $r38;
        android.view.Surface $r9;
        android.view.ViewTreeObserver$InternalInsetsInfo $r13;
        android.content.res.Configuration $r14, $r17;
        android.graphics.PointF $r16, $r19;
        java.util.ArrayList $r18, $r20;
        boolean $z0, $z2;
        android.view.ViewRootImpl$ViewRootHandler $r21, $r50;
        android.graphics.Paint $r22;
        android.view.ViewRootImpl$ConsumeBatchedInputRunnable $r23;
        android.view.ViewRootImpl$TraversalRunnable $r24;
        android.view.ViewRootImpl$5 $r25;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r26;
        java.lang.String $r27;
        android.view.IWindowSession $r28, $r48;
        android.view.WindowLeaked $r29, $r30;
        android.view.DisplayAdjustments $r31;
        java.lang.Thread $r32;
        android.content.pm.ApplicationInfo $r37;
        int $i0, $i1, $i2;
        android.view.ViewRootImpl$W $r39, $r49;
        android.view.accessibility.AccessibilityManager $r40, $r45;
        android.view.ViewRootImpl$AccessibilityInteractionConnectionManager $r41, $r46;
        android.graphics.Region $r42, $r43;
        android.view.View$AttachInfo $r44, $r58;
        android.view.ViewConfiguration $r47;
        android.content.res.Resources $r51, $r53;
        android.util.DisplayMetrics $r52, $r56;
        android.view.Choreographer $r54;
        android.view.FallbackEventHandler $r55;
        java.lang.Object $r57;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.Display;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = newarray (int)[2];

        r0.<android.view.ViewRootImpl: int[] mTmpLocation> = $r5;

        $r6 = new android.util.TypedValue;

        specialinvoke $r6.<android.util.TypedValue: void <init>()>();

        r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue> = $r6;

        $r7 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r7.<android.view.WindowManager$LayoutParams: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes> = $r7;

        r0.<android.view.ViewRootImpl: boolean mAppVisible> = 1;

        r0.<android.view.ViewRootImpl: int mOrigWindowType> = -1;

        r0.<android.view.ViewRootImpl: boolean mStopped> = 0;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 0;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mCurrentDirty> = $r8;

        r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName> = "pq";

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 0;

        r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag> = 0;

        $r9 = new android.view.Surface;

        specialinvoke $r9.<android.view.Surface: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.Surface mSurface> = $r9;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets> = $r10;

        $r11 = new android.graphics.Rect;

        specialinvoke $r11.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets> = $r11;

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets> = $r12;

        $r13 = new android.view.ViewTreeObserver$InternalInsetsInfo;

        specialinvoke $r13.<android.view.ViewTreeObserver$InternalInsetsInfo: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets> = $r13;

        $r15 = new android.graphics.Rect;

        specialinvoke $r15.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mFitSystemWindowsInsets> = $r15;

        $r14 = new android.content.res.Configuration;

        specialinvoke $r14.<android.content.res.Configuration: void <init>()>();

        r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration> = $r14;

        $r17 = new android.content.res.Configuration;

        specialinvoke $r17.<android.content.res.Configuration: void <init>()>();

        r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration> = $r17;

        $r16 = new android.graphics.PointF;

        specialinvoke $r16.<android.graphics.PointF: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint> = $r16;

        $r19 = new android.graphics.PointF;

        specialinvoke $r19.<android.graphics.PointF: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.PointF mLastTouchPoint> = $r19;

        r0.<android.view.ViewRootImpl: long mFpsStartTime> = -1L;

        r0.<android.view.ViewRootImpl: long mFpsPrevTime> = -1L;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.ArrayList mDisplayLists> = $r18;

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 0;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters> = $r20;

        r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest> = 0;

        $z0 = staticinvoke <android.view.InputEventConsistencyVerifier: boolean isInstrumentationEnabled()>();

        if $z0 == 0 goto label2;

        $r59 = new android.view.InputEventConsistencyVerifier;

        specialinvoke $r59.<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int)>(r0, 0);

        r3 = $r59;

     label1:
        r0.<android.view.ViewRootImpl: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier> = r3;

        r0.<android.view.ViewRootImpl: boolean mProfile> = 0;

        $r22 = new android.graphics.Paint;

        specialinvoke $r22.<android.graphics.Paint: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Paint mResizePaint> = $r22;

        $r21 = new android.view.ViewRootImpl$ViewRootHandler;

        specialinvoke $r21.<android.view.ViewRootImpl$ViewRootHandler: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler> = $r21;

        $r24 = new android.view.ViewRootImpl$TraversalRunnable;

        specialinvoke $r24.<android.view.ViewRootImpl$TraversalRunnable: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable> = $r24;

        $r23 = new android.view.ViewRootImpl$ConsumeBatchedInputRunnable;

        specialinvoke $r23.<android.view.ViewRootImpl$ConsumeBatchedInputRunnable: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable> = $r23;

        $r26 = new android.view.ViewRootImpl$InvalidateOnAnimationRunnable;

        specialinvoke $r26.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable> = $r26;

        $r25 = new android.view.ViewRootImpl$5;

        specialinvoke $r25.<android.view.ViewRootImpl$5: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.SurfaceHolder mHolder> = $r25;

        r0.<android.view.ViewRootImpl: android.content.Context mContext> = r1;

        $r28 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession> = $r28;

        r0.<android.view.ViewRootImpl: android.view.Display mDisplay> = r2;

        $r27 = virtualinvoke r1.<android.content.Context: java.lang.String getBasePackageName()>();

        r0.<android.view.ViewRootImpl: java.lang.String mBasePackageName> = $r27;

        $r31 = virtualinvoke r2.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        r0.<android.view.ViewRootImpl: android.view.DisplayAdjustments mDisplayAdjustments> = $r31;

        $r32 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<android.view.ViewRootImpl: java.lang.Thread mThread> = $r32;

        $r29 = new android.view.WindowLeaked;

        specialinvoke $r29.<android.view.WindowLeaked: void <init>(java.lang.String)>(null);

        r0.<android.view.ViewRootImpl: android.view.WindowLeaked mLocation> = $r29;

        $r30 = r0.<android.view.ViewRootImpl: android.view.WindowLeaked mLocation>;

        virtualinvoke $r30.<android.view.WindowLeaked: java.lang.Throwable fillInStackTrace()>();

        r0.<android.view.ViewRootImpl: int mWidth> = -1;

        r0.<android.view.ViewRootImpl: int mHeight> = -1;

        $r36 = new android.graphics.Rect;

        specialinvoke $r36.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty> = $r36;

        $r33 = new android.graphics.Rect;

        specialinvoke $r33.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect> = $r33;

        $r34 = new android.graphics.Rect;

        specialinvoke $r34.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mVisRect> = $r34;

        $r38 = new android.graphics.Rect;

        specialinvoke $r38.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame> = $r38;

        $r39 = new android.view.ViewRootImpl$W;

        specialinvoke $r39.<android.view.ViewRootImpl$W: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow> = $r39;

        $r37 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r37.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        r0.<android.view.ViewRootImpl: int mTargetSdkVersion> = $i0;

        r0.<android.view.ViewRootImpl: int mViewVisibility> = 8;

        $r42 = new android.graphics.Region;

        specialinvoke $r42.<android.graphics.Region: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion> = $r42;

        $r43 = new android.graphics.Region;

        specialinvoke $r43.<android.graphics.Region: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion> = $r43;

        r0.<android.view.ViewRootImpl: boolean mFirst> = 1;

        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        $r40 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>(r1);

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager> = $r40;

        $r41 = new android.view.ViewRootImpl$AccessibilityInteractionConnectionManager;

        specialinvoke $r41.<android.view.ViewRootImpl$AccessibilityInteractionConnectionManager: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager> = $r41;

        $r45 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $r46 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        virtualinvoke $r45.<android.view.accessibility.AccessibilityManager: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>($r46);

        $r44 = new android.view.View$AttachInfo;

        $r48 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r49 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r50 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        specialinvoke $r44.<android.view.View$AttachInfo: void <init>(android.view.IWindowSession,android.view.IWindow,android.view.Display,android.view.ViewRootImpl,android.os.Handler,android.view.View$AttachInfo$Callbacks)>($r48, $r49, r2, r0, $r50, r0);

        r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo> = $r44;

        $r47 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        r0.<android.view.ViewRootImpl: android.view.ViewConfiguration mViewConfiguration> = $r47;

        $r53 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r52 = virtualinvoke $r53.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i1 = $r52.<android.util.DisplayMetrics: int densityDpi>;

        r0.<android.view.ViewRootImpl: int mDensity> = $i1;

        $r51 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r56 = virtualinvoke $r51.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i2 = $r56.<android.util.DisplayMetrics: int noncompatDensityDpi>;

        r0.<android.view.ViewRootImpl: int mNoncompatDensity> = $i2;

        $r55 = staticinvoke <com.android.internal.policy.PolicyManager: android.view.FallbackEventHandler makeNewFallbackEventHandler(android.content.Context)>(r1);

        r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler> = $r55;

        $r54 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer> = $r54;

        $r57 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r4 = (android.os.PowerManager) $r57;

        $r58 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z2 = virtualinvoke r4.<android.os.PowerManager: boolean isScreenOn()>();

        $r58.<android.view.View$AttachInfo: boolean mScreenOn> = $z2;

        virtualinvoke r0.<android.view.ViewRootImpl: void loadSystemProperties()>();

        return;

     label2:
        r3 = null;

        goto label1;
    }

    static boolean access$000(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mRenderProfilingEnabled>;

        return $z0;
    }

    static android.view.Choreographer$FrameCallback access$100(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.view.Choreographer$FrameCallback $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        return $r1;
    }

    static boolean access$1000(android.view.ViewRootImpl, android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.KeyEvent r1;
        boolean $z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.KeyEvent;

        $z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean checkForLeavingTouchModeAndConsume(android.view.KeyEvent)>(r1);

        return $z0;
    }

    static boolean access$1802(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        r0.<android.view.ViewRootImpl: boolean mProfileRendering> = z0;

        return z0;
    }

    static boolean access$1902(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        r0.<android.view.ViewRootImpl: boolean mMediaDisabled> = z0;

        return z0;
    }

    static void access$200(android.view.View)
    {
        android.view.View r0;

        r0 := @parameter0: android.view.View;

        staticinvoke <android.view.ViewRootImpl: void forceLayout(android.view.View)>(r0);

        return;
    }

    static android.view.View access$2300(android.view.ViewRootImpl, android.view.View, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2, $r3;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: android.view.View;

        $r3 = specialinvoke r0.<android.view.ViewRootImpl: android.view.View getCommonPredecessor(android.view.View,android.view.View)>(r1, r2);

        return $r3;
    }

    static void access$300(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.view.ViewRootImpl: void profileRendering(boolean)>(z0);

        return;
    }

    static boolean access$400(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>(z0);

        return $z1;
    }

    static android.view.Surface access$500(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.view.Surface $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        return $r1;
    }

    static android.view.SurfaceHolder access$600(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.view.SurfaceHolder $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder mHolder>;

        return $r1;
    }

    static boolean access$700(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        $z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean isInLocalFocusMode()>();

        return $z0;
    }

    static void access$800(android.view.ViewRootImpl, android.view.DragEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.DragEvent r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.DragEvent;

        specialinvoke r0.<android.view.ViewRootImpl: void handleDragEvent(android.view.DragEvent)>(r1);

        return;
    }

    static void access$900(android.view.ViewRootImpl, android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.ViewRootImpl$QueuedInputEvent;

        specialinvoke r0.<android.view.ViewRootImpl: void finishInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

        return;
    }

    public static void addConfigCallback(android.content.ComponentCallbacks)
    {
        android.content.ComponentCallbacks r0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @parameter0: android.content.ComponentCallbacks;

        r1 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        entermonitor r1;

     label1:
        $r3 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void addFirstDrawHandler(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Runnable;

        r1 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        entermonitor r1;

     label1:
        $z0 = <android.view.ViewRootImpl: boolean sFirstDrawComplete>;

        if $z0 != 0 goto label2;

        $r3 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void applyKeepScreenOnFlag(android.view.WindowManager$LayoutParams)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        android.view.View$AttachInfo $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r2.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        if $z0 == 0 goto label1;

        $i5 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i6 = 128 | $i5;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i6;

        return;

     label1:
        $i0 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i3 = -129 & $i0;

        $i1 = r0.<android.view.ViewRootImpl: int mClientWindowLayoutFlags>;

        $i2 = 128 & $i1;

        $i4 = $i3 | $i2;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i4;

        return;
    }

    private boolean checkForLeavingTouchModeAndConsume(android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.KeyEvent r1;
        int i0, $i1, $i2;
        android.view.View$AttachInfo $r2;
        boolean $z0, $z1, $z2, $z4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r2.<android.view.View$AttachInfo: boolean mInTouchMode>;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if i0 == 0 goto label3;

        if i0 != 2 goto label1;

     label3:
        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i2 = 4 & $i1;

        if $i2 != 0 goto label1;

        $z1 = staticinvoke <android.view.ViewRootImpl: boolean isNavigationKey(android.view.KeyEvent)>(r1);

        if $z1 == 0 goto label4;

        $z4 = virtualinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchMode(boolean)>(0);

        return $z4;

     label4:
        $z2 = staticinvoke <android.view.ViewRootImpl: boolean isTypingKey(android.view.KeyEvent)>(r1);

        if $z2 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchMode(boolean)>(0);

        return 0;
    }

    private boolean collectViewAttributes()
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo r1;
        boolean z0, z1, z2, z3, z4, $z5, $z6;
        android.view.WindowManager$LayoutParams r2;
        android.view.View $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: android.view.ViewRootImpl;

        r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        z0 = r1.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        z1 = 0;

        if z0 == 0 goto label2;

        r1.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 0;

        z2 = r1.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        r1.<android.view.View$AttachInfo: boolean mKeepScreenOn> = 0;

        r1.<android.view.View$AttachInfo: int mSystemUiVisibility> = 0;

        r1.<android.view.View$AttachInfo: boolean mHasSystemUiListeners> = 0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r3.<android.view.View: void dispatchCollectViewAttributes(android.view.View$AttachInfo,int)>(r1, 0);

        $i2 = r1.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i0 = r1.<android.view.View$AttachInfo: int mDisabledSystemUiVisibility>;

        $i1 = -1 ^ $i0;

        $i3 = $i2 & $i1;

        r1.<android.view.View$AttachInfo: int mSystemUiVisibility> = $i3;

        r2 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i4 = r1.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i5 = specialinvoke r0.<android.view.ViewRootImpl: int getImpliedSystemUiVisibility(android.view.WindowManager$LayoutParams)>(r2);

        $i6 = $i4 | $i5;

        r1.<android.view.View$AttachInfo: int mSystemUiVisibility> = $i6;

        $z5 = r1.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        if $z5 != z2 goto label1;

        $i10 = r1.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i9 = r2.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        if $i10 != $i9 goto label1;

        z3 = r1.<android.view.View$AttachInfo: boolean mHasSystemUiListeners>;

        z4 = r2.<android.view.WindowManager$LayoutParams: boolean hasSystemUiListeners>;

        z1 = 0;

        if z3 == z4 goto label2;

     label1:
        specialinvoke r0.<android.view.ViewRootImpl: void applyKeepScreenOnFlag(android.view.WindowManager$LayoutParams)>(r2);

        $i7 = r1.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        r2.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility> = $i7;

        $z6 = r1.<android.view.View$AttachInfo: boolean mHasSystemUiListeners>;

        r2.<android.view.WindowManager$LayoutParams: boolean hasSystemUiListeners> = $z6;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i8 = r1.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        virtualinvoke $r4.<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>($i8);

        z1 = 1;

     label2:
        return z1;
    }

    private void deliverInputEvent(android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1;
        java.lang.Throwable r2, $r7;
        android.view.ViewRootImpl$InputStage r3;
        android.view.InputEventConsistencyVerifier $r4, $r6;
        boolean $z0;
        android.view.InputEvent $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$QueuedInputEvent;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "deliverInputEvent");

     label01:
        $r4 = r0.<android.view.ViewRootImpl: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r4 == null goto label02;

        $r6 = r0.<android.view.ViewRootImpl: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        $r5 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        virtualinvoke $r6.<android.view.InputEventConsistencyVerifier: void onInputEvent(android.view.InputEvent,int)>($r5, 0);

     label02:
        $z0 = virtualinvoke r1.<android.view.ViewRootImpl$QueuedInputEvent: boolean shouldSkipIme()>();

        if $z0 == 0 goto label06;

        r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstPostImeInputStage>;

     label03:
        if r3 == null goto label08;

     label04:
        virtualinvoke r3.<android.view.ViewRootImpl$InputStage: void deliver(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

     label05:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label06:
        r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstInputStage>;

     label07:
        goto label03;

     label08:
        specialinvoke r0.<android.view.ViewRootImpl: void finishInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

     label09:
        goto label05;

     label10:
        $r7 := @caughtexception;

        r2 = $r7;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    private void destroyHardwareRenderer()
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo r1;
        android.view.HardwareRenderer r2;
        android.view.View $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r2 = r1.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if r2 == null goto label2;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke r2.<android.view.HardwareRenderer: void destroyHardwareResources(android.view.View)>($r4);

     label1:
        virtualinvoke r2.<android.view.HardwareRenderer: void destroy(boolean)>(1);

        virtualinvoke r2.<android.view.HardwareRenderer: void setRequested(boolean)>(0);

        r1.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer> = null;

        r1.<android.view.View$AttachInfo: boolean mHardwareAccelerated> = 0;

     label2:
        return;
    }

    private void draw(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, z1, z2, $z3, $z5, $z6, $z7, $z8, $z9, $z10, $z12, $z13, $z14;
        android.view.Surface r1, $r21;
        android.view.View$AttachInfo r2;
        int i0, i1, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i15, $i18;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        android.view.HardwareLayer r3;
        android.graphics.Rect r4, r8, $r22;
        android.view.Surface$OutOfResourcesException r5, $r35;
        android.view.HardwareRenderer r6, $r13, $r14, $r16, $r17, $r18, $r20;
        android.view.View r7;
        long l2, $l11, $l14, $l16;
        java.util.ArrayList r9, $r30, $r33;
        java.lang.Throwable r10, $r34;
        android.widget.Scroller $r11, $r23, $r24, $r26, $r28;
        com.android.internal.view.BaseSurfaceHolder $r12;
        android.view.ViewTreeObserver $r15, $r27;
        android.view.SurfaceHolder $r19;
        android.view.animation.Interpolator $r25;
        byte $b17;
        android.view.ViewRootImpl$ViewRootHandler $r29;
        java.lang.Runnable $r31;
        java.lang.Object $r32;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z3 = virtualinvoke r1.<android.view.Surface: boolean isValid()>();

        if $z3 != 0 goto label02;

     label01:
        return;

     label02:
        $z5 = <android.view.ViewRootImpl: boolean sFirstDrawComplete>;

        if $z5 != 0 goto label09;

        r9 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        entermonitor r9;

     label03:
        <android.view.ViewRootImpl: boolean sFirstDrawComplete> = 1;

        $r33 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        i3 = virtualinvoke $r33.<java.util.ArrayList: int size()>();

     label04:
        i4 = 0;

     label05:
        if i4 >= i3 goto label08;

     label06:
        $r29 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r30 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        $r32 = virtualinvoke $r30.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r31 = (java.lang.Runnable) $r32;

        virtualinvoke $r29.<android.view.ViewRootImpl$ViewRootHandler: boolean post(java.lang.Runnable)>($r31);

     label07:
        i4 = i4 + 1;

        goto label05;

     label08:
        exitmonitor r9;

     label09:
        virtualinvoke r0.<android.view.ViewRootImpl: boolean scrollToRectOrFocus(android.graphics.Rect,boolean)>(null, 0);

        r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z6 = r2.<android.view.View$AttachInfo: boolean mViewScrollChanged>;

        if $z6 == 0 goto label10;

        r2.<android.view.View$AttachInfo: boolean mViewScrollChanged> = 0;

        $r27 = r2.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r27.<android.view.ViewTreeObserver: void dispatchOnScrollChanged()>();

     label10:
        $r11 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r11 == null goto label19;

        $r26 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        $z14 = virtualinvoke $r26.<android.widget.Scroller: boolean computeScrollOffset()>();

        if $z14 == 0 goto label19;

        z1 = 1;

     label11:
        if z1 == 0 goto label20;

        $r28 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        i0 = virtualinvoke $r28.<android.widget.Scroller: int getCurrY()>();

     label12:
        $i5 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if $i5 == i0 goto label13;

        r0.<android.view.ViewRootImpl: int mCurScrollY> = i0;

        z0 = 1;

     label13:
        f0 = r2.<android.view.View$AttachInfo: float mApplicationScale>;

        z2 = r2.<android.view.View$AttachInfo: boolean mScalingRequired>;

        r3 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        i1 = 0;

        if r3 == null goto label14;

        $l11 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l14 = r0.<android.view.ViewRootImpl: long mResizeBufferStartTime>;

        l2 = $l11 - $l14;

        $i15 = r0.<android.view.ViewRootImpl: int mResizeBufferDuration>;

        $l16 = (long) $i15;

        $b17 = l2 cmp $l16;

        if $b17 >= 0 goto label21;

        $f10 = (float) l2;

        $i13 = r0.<android.view.ViewRootImpl: int mResizeBufferDuration>;

        $f9 = (float) $i13;

        f1 = $f10 / $f9;

        $r25 = <android.view.ViewRootImpl: android.view.animation.Interpolator mResizeInterpolator>;

        f2 = interfaceinvoke $r25.<android.view.animation.Interpolator: float getInterpolation(float)>(f1);

        z1 = 1;

        $f11 = 255.0F * f2;

        $i18 = (int) $f11;

        i1 = 255 - $i18;

     label14:
        r4 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

        $r12 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r12 == null goto label22;

        virtualinvoke r4.<android.graphics.Rect: void setEmpty()>();

        if z1 == 0 goto label01;

        $r24 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r24 == null goto label15;

        $r23 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        virtualinvoke $r23.<android.widget.Scroller: void abortAnimation()>();

     label15:
        virtualinvoke r0.<android.view.ViewRootImpl: void disposeResizeBuffer()>();

        return;

     label16:
        $r34 := @caughtexception;

        r10 = $r34;

     label17:
        exitmonitor r9;

     label18:
        throw r10;

     label19:
        z1 = 0;

        goto label11;

     label20:
        i0 = r0.<android.view.ViewRootImpl: int mScrollY>;

        goto label12;

     label21:
        virtualinvoke r0.<android.view.ViewRootImpl: void disposeResizeBuffer()>();

        i1 = 0;

        goto label14;

     label22:
        if z0 == 0 goto label23;

        r2.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 1;

        $i8 = r0.<android.view.ViewRootImpl: int mWidth>;

        $f5 = (float) $i8;

        $f4 = f0 * $f5;

        $f3 = 0.5F + $f4;

        $i12 = (int) $f3;

        $i9 = r0.<android.view.ViewRootImpl: int mHeight>;

        $f8 = (float) $i9;

        $f7 = f0 * $f8;

        $f6 = 0.5F + $f7;

        $i10 = (int) $f6;

        virtualinvoke r4.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i12, $i10);

     label23:
        virtualinvoke r0.<android.view.ViewRootImpl: void invalidateDisplayLists()>();

        $r15 = r2.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r15.<android.view.ViewTreeObserver: void dispatchOnDraw()>();

        $z7 = virtualinvoke r4.<android.graphics.Rect: boolean isEmpty()>();

        if $z7 == 0 goto label24;

        $z12 = r0.<android.view.ViewRootImpl: boolean mIsAnimating>;

        if $z12 == 0 goto label26;

     label24:
        $r13 = r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r13 == null goto label28;

        $r20 = r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z13 = virtualinvoke $r20.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z13 == 0 goto label28;

        r0.<android.view.ViewRootImpl: boolean mIsAnimating> = 0;

        r0.<android.view.ViewRootImpl: int mHardwareYOffset> = i0;

        r0.<android.view.ViewRootImpl: int mResizeAlpha> = i1;

        $r22 = r0.<android.view.ViewRootImpl: android.graphics.Rect mCurrentDirty>;

        virtualinvoke $r22.<android.graphics.Rect: void set(android.graphics.Rect)>(r4);

        virtualinvoke r4.<android.graphics.Rect: void setEmpty()>();

        r6 = r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if z1 == 0 goto label27;

        r8 = null;

     label25:
        virtualinvoke r6.<android.view.HardwareRenderer: void draw(android.view.View,android.view.View$AttachInfo,android.view.HardwareRenderer$HardwareDrawCallbacks,android.graphics.Rect)>(r7, r2, r0, r8);

     label26:
        if z1 == 0 goto label01;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;

     label27:
        r8 = r0.<android.view.ViewRootImpl: android.graphics.Rect mCurrentDirty>;

        goto label25;

     label28:
        $r14 = r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r14 == null goto label32;

        $r17 = r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z8 = virtualinvoke $r17.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z8 != 0 goto label32;

        $r16 = r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z10 = virtualinvoke $r16.<android.view.HardwareRenderer: boolean isRequested()>();

        if $z10 == 0 goto label32;

     label29:
        $r18 = r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $i6 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i7 = r0.<android.view.ViewRootImpl: int mHeight>;

        $r19 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder mHolder>;

        $r21 = interfaceinvoke $r19.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        virtualinvoke $r18.<android.view.HardwareRenderer: boolean initializeIfNeeded(int,int,android.view.Surface)>($i6, $i7, $r21);

     label30:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;

     label31:
        $r35 := @caughtexception;

        r5 = $r35;

        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>(r5);

        return;

     label32:
        $z9 = specialinvoke r0.<android.view.ViewRootImpl: boolean drawSoftware(android.view.Surface,android.view.View$AttachInfo,int,boolean,android.graphics.Rect)>(r1, r2, i0, z2, r4);

        if $z9 != 0 goto label26;

        return;

        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch android.view.Surface$OutOfResourcesException from label29 to label30 with label31;
    }

    private void drawAccessibilityFocusedDrawableIfNeeded(android.graphics.Canvas)
    {
        android.view.ViewRootImpl r0, $r20, $r21;
        android.graphics.Canvas r1;
        android.view.accessibility.AccessibilityManager r2;
        android.graphics.drawable.Drawable r3;
        android.view.accessibility.AccessibilityNodeProvider r4;
        android.graphics.Rect r5;
        android.view.View $r6, $r8, $r9, $r11, $r12, $r22;
        android.content.Context $r7;
        boolean $z0, $z1;
        android.view.View$AttachInfo $r10, $r14, $r15, $r17, $r18, $r19;
        android.view.accessibility.AccessibilityNodeInfo $r13, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Canvas;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r7 = $r6.<android.view.View: android.content.Context mContext>;

        r2 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r7);

        $z0 = virtualinvoke r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r2.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r8 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        if $r8 == null goto label1;

        $r9 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        $r10 = $r9.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r10 == null goto label1;

        r3 = specialinvoke r0.<android.view.ViewRootImpl: android.graphics.drawable.Drawable getAccessibilityFocusedDrawable()>();

        if r3 == null goto label1;

        $r11 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        r4 = virtualinvoke $r11.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        $r12 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r14 = $r12.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r5 = $r14.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        if r4 != null goto label4;

        $r22 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        virtualinvoke $r22.<android.view.View: void getBoundsOnScreen(android.graphics.Rect)>(r5);

     label3:
        $r15 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r15.<android.view.View$AttachInfo: int mWindowLeft>;

        $i3 = neg $i0;

        $r17 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i2 = $r17.<android.view.View$AttachInfo: int mWindowTop>;

        $i1 = neg $i2;

        virtualinvoke r5.<android.graphics.Rect: void offset(int,int)>($i3, $i1);

        $r18 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r20 = $r18.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $i5 = $r20.<android.view.ViewRootImpl: int mWidth>;

        $r19 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r21 = $r19.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $i4 = $r21.<android.view.ViewRootImpl: int mHeight>;

        virtualinvoke r5.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i5, $i4);

        virtualinvoke r3.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r5);

        virtualinvoke r3.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        return;

     label4:
        $r13 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        if $r13 == null goto label1;

        $r16 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        virtualinvoke $r16.<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>(r5);

        goto label3;
    }

    private boolean drawSoftware(android.view.Surface, android.view.View$AttachInfo, int, boolean, android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        android.view.Surface r1, $r12;
        android.view.View$AttachInfo r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14;
        boolean z0, $z1, $z2, $z3;
        android.graphics.Rect r3;
        java.lang.IllegalArgumentException r4, r8, r11, $r17, $r18, $r21;
        android.view.Surface$OutOfResourcesException r5, $r20;
        android.graphics.Canvas r6;
        java.lang.Throwable r7, r10, $r19, $r22;
        android.view.View r9, $r16;
        float f0;
        android.graphics.PorterDuff$Mode $r13;
        long $l9;
        android.content.res.CompatibilityInfo$Translator $r14, $r15;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: android.view.View$AttachInfo;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r3 := @parameter4: android.graphics.Rect;

     label01:
        i1 = r3.<android.graphics.Rect: int left>;

        i2 = r3.<android.graphics.Rect: int top>;

        i3 = r3.<android.graphics.Rect: int right>;

        i4 = r3.<android.graphics.Rect: int bottom>;

        $r12 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        r6 = virtualinvoke $r12.<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>(r3);

        $i7 = r3.<android.graphics.Rect: int left>;

        if i1 != $i7 goto label02;

        $i13 = r3.<android.graphics.Rect: int top>;

        if i2 != $i13 goto label02;

        $i14 = r3.<android.graphics.Rect: int right>;

        if i3 != $i14 goto label02;

        $i12 = r3.<android.graphics.Rect: int bottom>;

        if i4 == $i12 goto label03;

     label02:
        r2.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 1;

     label03:
        $i6 = r0.<android.view.ViewRootImpl: int mDensity>;

        virtualinvoke r6.<android.graphics.Canvas: void setDensity(int)>($i6);

     label04:
        $z1 = virtualinvoke r6.<android.graphics.Canvas: boolean isOpaque()>();

        if $z1 == 0 goto label06;

     label05:
        if i0 == 0 goto label07;

     label06:
        $r13 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

        virtualinvoke r6.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r13);

     label07:
        virtualinvoke r3.<android.graphics.Rect: void setEmpty()>();

        r0.<android.view.ViewRootImpl: boolean mIsAnimating> = 0;

        $l9 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r2.<android.view.View$AttachInfo: long mDrawingTime> = $l9;

        r9 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i8 = r9.<android.view.View: int mPrivateFlags>;

        $i11 = 32 | $i8;

        r9.<android.view.View: int mPrivateFlags> = $i11;

     label08:
        $i10 = neg i0;

        f0 = (float) $i10;

     label09:
        virtualinvoke r6.<android.graphics.Canvas: void translate(float,float)>(0.0F, f0);

        $r15 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r15 == null goto label10;

        $r14 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r14.<android.content.res.CompatibilityInfo$Translator: void translateCanvas(android.graphics.Canvas)>(r6);

     label10:
        if z0 == 0 goto label18;

     label11:
        i5 = r0.<android.view.ViewRootImpl: int mNoncompatDensity>;

     label12:
        virtualinvoke r6.<android.graphics.Canvas: void setScreenDensity(int)>(i5);

        r2.<android.view.View$AttachInfo: boolean mSetIgnoreDirtyState> = 0;

        $r16 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r16.<android.view.View: void draw(android.graphics.Canvas)>(r6);

        specialinvoke r0.<android.view.ViewRootImpl: void drawAccessibilityFocusedDrawableIfNeeded(android.graphics.Canvas)>(r6);

     label13:
        $z2 = r2.<android.view.View$AttachInfo: boolean mSetIgnoreDirtyState>;

        if $z2 != 0 goto label14;

        r2.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 0;

     label14:
        virtualinvoke r1.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r6);

     label15:
        return 1;

     label16:
        $r20 := @caughtexception;

        r5 = $r20;

        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>(r5);

        return 0;

     label17:
        $r17 := @caughtexception;

        r4 = $r17;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewRootImpl", "Could not lock surface", r4);

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        return 0;

     label18:
        i5 = 0;

        goto label12;

     label19:
        $r19 := @caughtexception;

        r10 = $r19;

     label20:
        $z3 = r2.<android.view.View$AttachInfo: boolean mSetIgnoreDirtyState>;

        if $z3 != 0 goto label21;

        r2.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 0;

     label21:
        throw r10;

     label22:
        $r22 := @caughtexception;

        r7 = $r22;

     label23:
        virtualinvoke r1.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r6);

     label24:
        throw r7;

     label25:
        $r18 := @caughtexception;

        r11 = $r18;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewRootImpl", "Could not unlock surface", r11);

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        return 0;

     label26:
        $r21 := @caughtexception;

        r8 = $r21;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewRootImpl", "Could not unlock surface", r8);

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        return 0;

        catch android.view.Surface$OutOfResourcesException from label01 to label02 with label16;
        catch java.lang.IllegalArgumentException from label01 to label02 with label17;
        catch android.view.Surface$OutOfResourcesException from label02 to label03 with label16;
        catch java.lang.IllegalArgumentException from label02 to label03 with label17;
        catch android.view.Surface$OutOfResourcesException from label03 to label04 with label16;
        catch java.lang.IllegalArgumentException from label03 to label04 with label17;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.IllegalArgumentException from label14 to label15 with label25;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.lang.IllegalArgumentException from label23 to label24 with label26;
    }

    private void dumpViewHierarchy(java.lang.String, java.io.PrintWriter, android.view.View)
    {
        android.view.ViewRootImpl r0;
        java.lang.String r1, r5, $r6;
        java.io.PrintWriter r2;
        android.view.View r3, $r10;
        android.view.ViewGroup r4;
        int i0, i1;
        boolean $z0;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: android.view.View;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        if r3 != null goto label2;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("null");

     label1:
        return;

     label2:
        $r6 = virtualinvoke r3.<android.view.View: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $z0 = r3 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        r4 = (android.view.ViewGroup) r3;

        i0 = virtualinvoke r4.<android.view.ViewGroup: int getChildCount()>();

        if i0 <= 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = 0;

     label3:
        if i1 >= i0 goto label1;

        $r10 = virtualinvoke r4.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        specialinvoke r0.<android.view.ViewRootImpl: void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View)>(r5, r2, $r10);

        i1 = i1 + 1;

        goto label3;
    }

    private void enableHardwareAcceleration(android.view.WindowManager$LayoutParams)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7;
        android.view.View$AttachInfo r2, $r3, $r4, $r6, $r9, $r11, $r13, $r16, $r17, $r21;
        android.content.res.CompatibilityInfo$Translator $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.HardwareRenderer $r7, $r8, $r10, $r12, $r19;
        java.lang.String $r14;
        java.lang.CharSequence $r15;
        android.os.Looper $r18, $r20;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3.<android.view.View$AttachInfo: boolean mHardwareAccelerated> = 0;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4.<android.view.View$AttachInfo: boolean mHardwareAccelerationRequested> = 0;

        $r5 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r5 == null goto label02;

     label01:
        return;

     label02:
        $i0 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = 16777216 & $i0;

        if $i1 == 0 goto label07;

        z0 = 1;

     label03:
        if z0 == 0 goto label01;

        $z4 = staticinvoke <android.view.HardwareRenderer: boolean isAvailable()>();

        if $z4 == 0 goto label01;

        $i2 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i3 = 1 & $i2;

        if $i3 == 0 goto label08;

        z1 = 1;

     label04:
        $i4 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i5 = 2 & $i4;

        if $i5 == 0 goto label09;

        z2 = 1;

     label05:
        $z5 = <android.view.HardwareRenderer: boolean sRendererDisabled>;

        if $z5 == 0 goto label06;

        $z7 = <android.view.HardwareRenderer: boolean sSystemRendererDisabled>;

        if $z7 == 0 goto label14;

        if z2 == 0 goto label14;

     label06:
        $z6 = <android.view.HardwareRenderer: boolean sSystemRendererDisabled>;

        if $z6 != 0 goto label10;

        $r20 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r18 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r20 == $r18 goto label10;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("HardwareRenderer", "Attempting to initialize hardware acceleration outside of the main thread, aborting");

        return;

     label07:
        z0 = 0;

        goto label03;

     label08:
        z1 = 0;

        goto label04;

     label09:
        z2 = 0;

        goto label05;

     label10:
        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r7 == null goto label11;

        $r16 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r19 = $r16.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r19.<android.view.HardwareRenderer: void destroy(boolean)>(1);

     label11:
        $i6 = r1.<android.view.WindowManager$LayoutParams: int format>;

        if $i6 == -1 goto label13;

        z3 = 1;

     label12:
        $r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8 = staticinvoke <android.view.HardwareRenderer: android.view.HardwareRenderer createGlRenderer(int,boolean)>(2, z3);

        $r9.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer> = $r8;

        $r11 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r10 = $r11.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r10 == null goto label01;

        $r13 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r12 = $r13.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r15 = virtualinvoke r1.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r14 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r12.<android.view.HardwareRenderer: void setName(java.lang.String)>($r14);

        r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r17 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r17.<android.view.View$AttachInfo: boolean mHardwareAccelerationRequested> = 1;

        r2.<android.view.View$AttachInfo: boolean mHardwareAccelerated> = 1;

        return;

     label13:
        z3 = 0;

        goto label12;

     label14:
        if z1 == 0 goto label01;

        $r21 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r21.<android.view.View$AttachInfo: boolean mHardwareAccelerationRequested> = 1;

        return;
    }

    private boolean ensureTouchModeLocally(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2, $z3;
        android.view.View$AttachInfo $r1, $r2, $r3;
        android.view.ViewTreeObserver $r4;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r1.<android.view.View$AttachInfo: boolean mInTouchMode>;

        if $z1 != z0 goto label1;

        return 0;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2.<android.view.View$AttachInfo: boolean mInTouchMode> = z0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r4.<android.view.ViewTreeObserver: void dispatchOnTouchModeChanged(boolean)>(z0);

        if z0 == 0 goto label2;

        $z3 = specialinvoke r0.<android.view.ViewRootImpl: boolean enterTouchMode()>();

        return $z3;

     label2:
        $z2 = specialinvoke r0.<android.view.ViewRootImpl: boolean leaveTouchMode()>();

        return $z2;
    }

    private boolean enterTouchMode()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r3, $r4, $r5;
        android.view.ViewGroup r2;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.ViewRootImpl;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r3 == null goto label2;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = virtualinvoke $r4.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r1 = virtualinvoke $r5.<android.view.View: android.view.View findFocus()>();

        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z1 != 0 goto label2;

        r2 = staticinvoke <android.view.ViewRootImpl: android.view.ViewGroup findAncestorToTakeFocusInTouchMode(android.view.View)>(r1);

        if r2 == null goto label1;

        $z2 = virtualinvoke r2.<android.view.ViewGroup: boolean requestFocus()>();

        return $z2;

     label1:
        virtualinvoke r1.<android.view.View: void clearFocusInternal(boolean,boolean)>(1, 0);

        return 1;

     label2:
        return 0;
    }

    private static android.view.ViewGroup findAncestorToTakeFocusInTouchMode(android.view.View)
    {
        android.view.View r0;
        android.view.ViewParent r1;
        android.view.ViewGroup r2;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @parameter0: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

     label1:
        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label4;

        r2 = (android.view.ViewGroup) r1;

        $i0 = virtualinvoke r2.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 != 262144 goto label2;

        $z2 = virtualinvoke r2.<android.view.ViewGroup: boolean isFocusableInTouchMode()>();

        if $z2 == 0 goto label2;

        return r2;

     label2:
        $z1 = virtualinvoke r2.<android.view.ViewGroup: boolean isRootNamespace()>();

        if $z1 == 0 goto label3;

        return null;

     label3:
        r1 = virtualinvoke r2.<android.view.ViewGroup: android.view.ViewParent getParent()>();

        goto label1;

     label4:
        return null;
    }

    private void finishInputEvent(android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1;
        boolean z0;
        android.view.InputEventReceiver $r2, $r5;
        android.view.InputEvent $r3, $r4;
        int $i0, $i1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$QueuedInputEvent;

        $r2 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver>;

        if $r2 == null goto label4;

        $i0 = r1.<android.view.ViewRootImpl$QueuedInputEvent: int mFlags>;

        $i1 = 8 & $i0;

        if $i1 == 0 goto label3;

        z0 = 1;

     label1:
        $r5 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver>;

        $r4 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        virtualinvoke $r5.<android.view.InputEventReceiver: void finishInputEvent(android.view.InputEvent,boolean)>($r4, z0);

     label2:
        specialinvoke r0.<android.view.ViewRootImpl: void recycleQueuedInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

        return;

     label3:
        z0 = 0;

        goto label1;

     label4:
        $r3 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        virtualinvoke $r3.<android.view.InputEvent: void recycleIfNeededAfterDispatch()>();

        goto label2;
    }

    private static void forceLayout(android.view.View)
    {
        android.view.View r0, $r2;
        android.view.ViewGroup r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.View: void forceLayout()>();

        $z0 = r0 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r1 = (android.view.ViewGroup) r0;

        i0 = virtualinvoke r1.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = virtualinvoke r1.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        staticinvoke <android.view.ViewRootImpl: void forceLayout(android.view.View)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private android.graphics.drawable.Drawable getAccessibilityFocusedDrawable()
    {
        android.view.ViewRootImpl r0;
        android.util.TypedValue r1, $r7;
        android.view.View$AttachInfo $r2, $r3, $r5, $r13;
        android.graphics.drawable.Drawable $r4, $r6, $r15;
        android.view.View $r8, $r11;
        android.content.Context $r9, $r12;
        android.content.res.Resources$Theme $r10;
        boolean $z0;
        android.content.res.Resources $r14;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable>;

        if $r4 != null goto label1;

        $r7 = new android.util.TypedValue;

        specialinvoke $r7.<android.util.TypedValue: void <init>()>();

        r1 = $r7;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r9 = $r8.<android.view.View: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $z0 = virtualinvoke $r10.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843809, r1, 1);

        if $z0 == 0 goto label1;

        $r13 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r11 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r12 = $r11.<android.view.View: android.content.Context mContext>;

        $r14 = virtualinvoke $r12.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = r1.<android.util.TypedValue: int resourceId>;

        $r15 = virtualinvoke $r14.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i0);

        $r13.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable> = $r15;

     label1:
        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable>;

        return $r6;

     label2:
        return null;
    }

    private android.media.AudioManager getAudioManager()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1, $r4;
        android.media.AudioManager $r2, $r3, $r7;
        android.content.Context $r5;
        java.lang.Object $r6;
        java.lang.IllegalStateException $r8;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r1 != null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getAudioManager called when there is no mView");

        throw $r8;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.media.AudioManager mAudioManager>;

        if $r2 != null goto label2;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r5 = virtualinvoke $r4.<android.view.View: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r7 = (android.media.AudioManager) $r6;

        r0.<android.view.ViewRootImpl: android.media.AudioManager mAudioManager> = $r7;

     label2:
        $r3 = r0.<android.view.ViewRootImpl: android.media.AudioManager mAudioManager>;

        return $r3;
    }

    private android.view.View getCommonPredecessor(android.view.View, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2, r4, r5;
        java.util.HashSet r3, $r9, $r10;
        android.view.ViewParent r6, r7;
        android.view.View$AttachInfo $r8;
        boolean $z0, $z1, $z3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        if $r8 == null goto label9;

        $r9 = r0.<android.view.ViewRootImpl: java.util.HashSet mTempHashSet>;

        if $r9 != null goto label1;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.HashSet mTempHashSet> = $r10;

     label1:
        r3 = r0.<android.view.ViewRootImpl: java.util.HashSet mTempHashSet>;

        virtualinvoke r3.<java.util.HashSet: void clear()>();

        r4 = r1;

     label2:
        if r4 == null goto label4;

        virtualinvoke r3.<java.util.HashSet: boolean add(java.lang.Object)>(r4);

        r7 = r4.<android.view.View: android.view.ViewParent mParent>;

        $z3 = r7 instanceof android.view.View;

        if $z3 == 0 goto label3;

        r4 = (android.view.View) r7;

        goto label2;

     label3:
        r4 = null;

        goto label2;

     label4:
        r5 = r2;

     label5:
        if r5 == null goto label8;

        $z0 = virtualinvoke r3.<java.util.HashSet: boolean contains(java.lang.Object)>(r5);

        if $z0 == 0 goto label6;

        virtualinvoke r3.<java.util.HashSet: void clear()>();

        return r5;

     label6:
        r6 = r5.<android.view.View: android.view.ViewParent mParent>;

        $z1 = r6 instanceof android.view.View;

        if $z1 == 0 goto label7;

        r5 = (android.view.View) r6;

        goto label5;

     label7:
        r5 = null;

        goto label5;

     label8:
        virtualinvoke r3.<java.util.HashSet: void clear()>();

     label9:
        return null;
    }

    private static void getGfxInfo(android.view.View, int[])
    {
        android.view.View r0, $r4;
        int[] r1;
        android.view.DisplayList r2;
        android.view.ViewGroup r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: int[];

        r2 = r0.<android.view.View: android.view.DisplayList mDisplayList>;

        $i2 = r1[0];

        $i3 = 1 + $i2;

        r1[0] = $i3;

        if r2 == null goto label1;

        $i4 = r1[1];

        $i5 = virtualinvoke r2.<android.view.DisplayList: int getSize()>();

        $i6 = $i4 + $i5;

        r1[1] = $i6;

     label1:
        $z0 = r0 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label3;

        r3 = (android.view.ViewGroup) r0;

        i0 = virtualinvoke r3.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = virtualinvoke r3.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        staticinvoke <android.view.ViewRootImpl: void getGfxInfo(android.view.View,int[])>($r4, r1);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private int getImpliedSystemUiVisibility(android.view.WindowManager$LayoutParams)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        int i0, $i2, $i3, $i4;
        short s1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i2 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        i0 = 67108864 & $i2;

        s1 = 0;

        if i0 == 0 goto label1;

        s1 = 1280;

     label1:
        $i3 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i4 = 134217728 & $i3;

        if $i4 == 0 goto label2;

        s1 = s1 | 768;

     label2:
        return s1;
    }

    private static int getRootMeasureSpec(int, int)
    {
        int i0, i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        tableswitch(i1)
        {
            case -2: goto label3;
            case -1: goto label2;
            default: goto label1;
        };

     label1:
        $i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i1, 1073741824);

        return $i2;

     label2:
        $i3 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i0, 1073741824);

        return $i3;

     label3:
        $i4 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i0, -2147483648);

        return $i4;
    }

    static android.view.ViewRootImpl$RunQueue getRunQueue()
    {
        android.view.ViewRootImpl$RunQueue r0, r1, $r4;
        java.lang.ThreadLocal $r2, $r5;
        java.lang.Object $r3;

        $r2 = <android.view.ViewRootImpl: java.lang.ThreadLocal sRunQueues>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r0 = (android.view.ViewRootImpl$RunQueue) $r3;

        if r0 == null goto label1;

        return r0;

     label1:
        $r4 = new android.view.ViewRootImpl$RunQueue;

        specialinvoke $r4.<android.view.ViewRootImpl$RunQueue: void <init>()>();

        r1 = $r4;

        $r5 = <android.view.ViewRootImpl: java.lang.ThreadLocal sRunQueues>;

        virtualinvoke $r5.<java.lang.ThreadLocal: void set(java.lang.Object)>(r1);

        return r1;
    }

    private java.util.ArrayList getValidLayoutRequesters(java.util.ArrayList, boolean)
    {
        android.view.ViewRootImpl r0;
        java.util.ArrayList r1, r2, $r12;
        boolean z0, z1, $z2, $z4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        android.view.View r3, r4, r5;
        java.lang.Object $r6, $r10;
        android.view.ViewParent $r7, $r8, $r11, $r13, $r14;
        android.view.View$AttachInfo $r9;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.util.ArrayList;

        z0 := @parameter1: boolean;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        r2 = null;

        i1 = 0;

     label01:
        if i1 >= i0 goto label09;

        $r10 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r4 = (android.view.View) $r10;

        if r4 == null goto label06;

        $r9 = r4.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r9 == null goto label06;

        $r11 = r4.<android.view.View: android.view.ViewParent mParent>;

        if $r11 == null goto label06;

        if z0 != 0 goto label02;

        $i10 = r4.<android.view.View: int mPrivateFlags>;

        $i9 = 4096 & $i10;

        if $i9 != 4096 goto label06;

     label02:
        r5 = r4;

     label03:
        z1 = 0;

        if r5 == null goto label04;

        $i7 = r5.<android.view.View: int mViewFlags>;

        $i8 = 12 & $i7;

        if $i8 != 8 goto label07;

        z1 = 1;

     label04:
        if z1 != 0 goto label06;

        if r2 != null goto label05;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r2 = $r12;

     label05:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label06:
        i1 = i1 + 1;

        goto label01;

     label07:
        $r13 = r5.<android.view.View: android.view.ViewParent mParent>;

        $z4 = $r13 instanceof android.view.View;

        if $z4 == 0 goto label08;

        $r14 = r5.<android.view.View: android.view.ViewParent mParent>;

        r5 = (android.view.View) $r14;

        goto label03;

     label08:
        r5 = null;

        goto label03;

     label09:
        if z0 != 0 goto label14;

        i2 = 0;

     label10:
        if i2 >= i0 goto label14;

        $r6 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r3 = (android.view.View) $r6;

     label11:
        if r3 == null goto label13;

        $i3 = r3.<android.view.View: int mPrivateFlags>;

        $i4 = 4096 & $i3;

        if $i4 == 0 goto label13;

        $i5 = r3.<android.view.View: int mPrivateFlags>;

        $i6 = -4097 & $i5;

        r3.<android.view.View: int mPrivateFlags> = $i6;

        $r7 = r3.<android.view.View: android.view.ViewParent mParent>;

        $z2 = $r7 instanceof android.view.View;

        if $z2 == 0 goto label12;

        $r8 = r3.<android.view.View: android.view.ViewParent mParent>;

        r3 = (android.view.View) $r8;

        goto label11;

     label12:
        r3 = null;

        goto label11;

     label13:
        i2 = i2 + 1;

        goto label10;

     label14:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        return r2;
    }

    private void handleDragEvent(android.view.DragEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.DragEvent r1;
        int i0, $i1, $i3;
        android.view.View r2, $r5, $r11, $r12, $r21, $r26;
        boolean z0, $z1;
        android.content.ClipDescription $r6, $r25;
        float $f0, $f1, $f2, $f3, $f4;
        android.graphics.PointF $r7, $r9, $r10, $r23, $r27;
        android.content.res.CompatibilityInfo$Translator $r8, $r28;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.String $r16;
        android.view.IWindowSession $r17, $r19, $r24;
        android.view.ViewRootImpl$W $r18, $r20, $r22;
        android.os.RemoteException $r29, $r30;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.DragEvent;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r5 == null goto label01;

        $z1 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z1 == 0 goto label01;

        i0 = r1.<android.view.DragEvent: int mAction>;

        if i0 != 6 goto label02;

        $r26 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r26.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

     label01:
        virtualinvoke r1.<android.view.DragEvent: void recycle()>();

        return;

     label02:
        if i0 != 1 goto label13;

        r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView> = null;

        $r25 = r1.<android.view.DragEvent: android.content.ClipDescription mClipDescription>;

        r0.<android.view.ViewRootImpl: android.content.ClipDescription mDragDescription> = $r25;

     label03:
        if i0 == 2 goto label04;

        if i0 != 3 goto label07;

     label04:
        $r7 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $f1 = r1.<android.view.DragEvent: float mX>;

        $f0 = r1.<android.view.DragEvent: float mY>;

        virtualinvoke $r7.<android.graphics.PointF: void set(float,float)>($f1, $f0);

        $r8 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r8 == null goto label05;

        $r28 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r27 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        virtualinvoke $r28.<android.content.res.CompatibilityInfo$Translator: void translatePointInScreenToAppWindow(android.graphics.PointF)>($r27);

     label05:
        $i1 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if $i1 == 0 goto label06;

        $r23 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $i3 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        $f4 = (float) $i3;

        virtualinvoke $r23.<android.graphics.PointF: void offset(float,float)>(0.0F, $f4);

     label06:
        $r9 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $f2 = $r9.<android.graphics.PointF: float x>;

        r1.<android.view.DragEvent: float mX> = $f2;

        $r10 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $f3 = $r10.<android.graphics.PointF: float y>;

        r1.<android.view.DragEvent: float mY> = $f3;

     label07:
        r2 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        $r11 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        z0 = virtualinvoke $r11.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        $r12 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        if r2 == $r12 goto label10;

        if r2 == null goto label09;

     label08:
        $r24 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r20 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r24.<android.view.IWindowSession: void dragRecipientExited(android.view.IWindow)>($r20);

     label09:
        $r21 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        if $r21 == null goto label10;

        $r19 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r22 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r19.<android.view.IWindowSession: void dragRecipientEntered(android.view.IWindow)>($r22);

     label10:
        if i0 != 3 goto label12;

        r0.<android.view.ViewRootImpl: android.content.ClipDescription mDragDescription> = null;

     label11:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reporting drop result: ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("ViewRootImpl", $r16);

        $r17 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r18 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r17.<android.view.IWindowSession: void reportDropResult(android.view.IWindow,boolean)>($r18, z0);

     label12:
        if i0 != 4 goto label01;

        virtualinvoke r0.<android.view.ViewRootImpl: void setLocalDragState(java.lang.Object)>(null);

        goto label01;

     label13:
        $r6 = r0.<android.view.ViewRootImpl: android.content.ClipDescription mDragDescription>;

        r1.<android.view.DragEvent: android.content.ClipDescription mClipDescription> = $r6;

        goto label03;

     label14:
        $r30 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ViewRootImpl", "Unable to note drag target change");

        goto label10;

     label15:
        $r29 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ViewRootImpl", "Unable to report drop result");

        goto label12;

        catch android.os.RemoteException from label08 to label09 with label14;
        catch android.os.RemoteException from label09 to label10 with label14;
        catch android.os.RemoteException from label11 to label12 with label15;
    }

    private void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)
    {
        android.view.ViewRootImpl r0;
        android.view.Surface$OutOfResourcesException r1;
        android.view.ViewRootImpl$W $r3;
        android.view.IWindowSession $r4;
        boolean $z0;
        int $i1, $i3;
        android.os.RemoteException $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.Surface$OutOfResourcesException;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewRootImpl", "OutOfResourcesException initializing HW surface", r1);

     label1:
        $r4 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $z0 = interfaceinvoke $r4.<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>($r3);

        if $z0 != 0 goto label2;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i1 == 1000 goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ViewRootImpl", "No processes killed for memory; killing self");

        $i3 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i3);

     label2:
        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        return;

     label3:
        $r5 := @caughtexception;

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean isInLocalFocusMode()
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0, $i1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = 268435456 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    static boolean isInTouchMode()
    {
        android.view.IWindowSession r0;
        boolean z0;
        android.os.RemoteException $r2;

        r0 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession peekWindowSession()>();

        if r0 == null goto label4;

     label1:
        z0 = interfaceinvoke r0.<android.view.IWindowSession: boolean getInTouchMode()>();

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static boolean isNavigationKey(android.view.KeyEvent)
    {
        android.view.KeyEvent r0;
        int $i0;

        r0 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r0.<android.view.KeyEvent: int getKeyCode()>();

        lookupswitch($i0)
        {
            case 19: goto label2;
            case 20: goto label2;
            case 21: goto label2;
            case 22: goto label2;
            case 23: goto label2;
            case 61: goto label2;
            case 62: goto label2;
            case 66: goto label2;
            case 92: goto label2;
            case 93: goto label2;
            case 122: goto label2;
            case 123: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    static boolean isTerminalInputEvent(android.view.InputEvent)
    {
        android.view.InputEvent r0;
        int i0, $i1;
        boolean z0, $z1;
        android.view.MotionEvent $r1;
        android.view.KeyEvent $r2;

        r0 := @parameter0: android.view.InputEvent;

        $z1 = r0 instanceof android.view.KeyEvent;

        if $z1 == 0 goto label2;

        $r2 = (android.view.KeyEvent) r0;

        $i1 = virtualinvoke $r2.<android.view.KeyEvent: int getAction()>();

        if $i1 != 1 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $r1 = (android.view.MotionEvent) r0;

        i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        if i0 == 1 goto label3;

        if i0 == 3 goto label3;

        z0 = 0;

        if i0 != 10 goto label4;

     label3:
        z0 = 1;

     label4:
        return z0;
    }

    private static boolean isTypingKey(android.view.KeyEvent)
    {
        android.view.KeyEvent r0;
        int $i0;

        r0 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r0.<android.view.KeyEvent: int getUnicodeChar()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isViewDescendantOf(android.view.View, android.view.View)
    {
        android.view.View r0, r1, $r3;
        android.view.ViewParent r2;
        boolean $z0, $z1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label3;

        $r3 = (android.view.View) r2;

        $z1 = staticinvoke <android.view.ViewRootImpl: boolean isViewDescendantOf(android.view.View,android.view.View)>($r3, r1);

        if $z1 != 0 goto label1;

     label3:
        return 0;
    }

    private boolean leaveTouchMode()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;
        android.view.ViewGroup $r6;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = virtualinvoke $r4.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r2 = virtualinvoke $r5.<android.view.View: android.view.View findFocus()>();

        $z2 = r2 instanceof android.view.ViewGroup;

        if $z2 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r6 = (android.view.ViewGroup) r2;

        $i0 = virtualinvoke $r6.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 != 262144 goto label1;

     label3:
        r1 = virtualinvoke r0.<android.view.ViewRootImpl: android.view.View focusSearch(android.view.View,int)>(null, 130);

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.view.View: boolean requestFocus(int)>(130);

        return $z1;
    }

    private boolean measureHierarchy(android.view.View, android.view.WindowManager$LayoutParams, android.content.res.Resources, int, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.WindowManager$LayoutParams r2;
        android.content.res.Resources r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        boolean z0, z1;
        android.util.DisplayMetrics r4;
        android.util.TypedValue $r5, $r6, $r7;
        float $f0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        r3 := @parameter2: android.content.res.Resources;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 = r2.<android.view.WindowManager$LayoutParams: int width>;

        z0 = 0;

        if i2 != -2 goto label2;

        r4 = virtualinvoke r3.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $r5 = r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue>;

        virtualinvoke r3.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>(17104903, $r5, 1);

        $r6 = r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue>;

        i5 = $r6.<android.util.TypedValue: int type>;

        i6 = 0;

        if i5 != 5 goto label1;

        $r7 = r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue>;

        $f0 = virtualinvoke $r7.<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>(r4);

        i6 = (int) $f0;

     label1:
        z0 = 0;

        if i6 == 0 goto label2;

        z0 = 0;

        if i0 <= i6 goto label2;

        $i16 = r2.<android.view.WindowManager$LayoutParams: int width>;

        i7 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i6, $i16);

        $i17 = r2.<android.view.WindowManager$LayoutParams: int height>;

        i8 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i1, $i17);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>(i7, i8);

        $i20 = virtualinvoke r1.<android.view.View: int getMeasuredWidthAndState()>();

        $i21 = 16777216 & $i20;

        if $i21 != 0 goto label5;

        z0 = 1;

     label2:
        z1 = 0;

        if z0 != 0 goto label4;

        $i9 = r2.<android.view.WindowManager$LayoutParams: int width>;

        $i12 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i0, $i9);

        $i11 = r2.<android.view.WindowManager$LayoutParams: int height>;

        $i14 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i1, $i11);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>($i12, $i14);

        $i13 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i15 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        if $i13 != $i15 goto label3;

        i3 = r0.<android.view.ViewRootImpl: int mHeight>;

        i4 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        z1 = 0;

        if i3 == i4 goto label4;

     label3:
        z1 = 1;

     label4:
        return z1;

     label5:
        $i18 = i6 + i0;

        $i23 = $i18 / 2;

        $i19 = r2.<android.view.WindowManager$LayoutParams: int width>;

        $i24 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>($i23, $i19);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>($i24, i8);

        $i22 = virtualinvoke r1.<android.view.View: int getMeasuredWidthAndState()>();

        i10 = 16777216 & $i22;

        z0 = 0;

        if i10 != 0 goto label2;

        z0 = 1;

        goto label2;
    }

    private android.view.ViewRootImpl$QueuedInputEvent obtainQueuedInputEvent(android.view.InputEvent, android.view.InputEventReceiver, int)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;
        android.view.InputEventReceiver r2;
        int i0, $i1, $i2;
        android.view.ViewRootImpl$QueuedInputEvent r3, $r4, $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        r2 := @parameter1: android.view.InputEventReceiver;

        i0 := @parameter2: int;

        r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool>;

        if r3 == null goto label2;

        $i1 = r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize>;

        $i2 = -1 + $i1;

        r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize> = $i2;

        $r5 = r3.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext>;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool> = $r5;

        r3.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = null;

     label1:
        r3.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent> = r1;

        r3.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver> = r2;

        r3.<android.view.ViewRootImpl$QueuedInputEvent: int mFlags> = i0;

        return r3;

     label2:
        $r4 = new android.view.ViewRootImpl$QueuedInputEvent;

        specialinvoke $r4.<android.view.ViewRootImpl$QueuedInputEvent: void <init>(android.view.ViewRootImpl$1)>(null);

        r3 = $r4;

        goto label1;
    }

    private void performDraw()
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Throwable r1, $r16;
        android.view.SurfaceHolder$Callback[] r3;
        int i0, i1;
        android.view.SurfaceHolder$Callback r4;
        android.view.View$AttachInfo $r5;
        com.android.internal.view.BaseSurfaceHolder $r6, $r11, $r12, $r13;
        android.view.ViewRootImpl$W $r7;
        android.view.IWindowSession $r8;
        android.view.Surface $r9;
        android.view.SurfaceHolder$Callback2 $r10, $r14;
        android.os.RemoteException $r15;
        android.view.SurfaceHolder r17, r18;

        r0 := @this: android.view.ViewRootImpl;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r5.<android.view.View$AttachInfo: boolean mScreenOn>;

        if $z1 != 0 goto label02;

        $z5 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z5 != 0 goto label02;

     label01:
        return;

     label02:
        z0 = r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded>;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 0;

        r0.<android.view.ViewRootImpl: boolean mIsDrawing> = 1;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "draw");

     label03:
        specialinvoke r0.<android.view.ViewRootImpl: void draw(boolean)>(z0);

     label04:
        r0.<android.view.ViewRootImpl: boolean mIsDrawing> = 0;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        $z2 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z2 == 0 goto label01;

        r0.<android.view.ViewRootImpl: boolean mReportNextDraw> = 0;

        $r6 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r6 == null goto label08;

        $r9 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z3 = virtualinvoke $r9.<android.view.Surface: boolean isValid()>();

        if $z3 == 0 goto label08;

        $r10 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        $r11 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r17 = (android.view.SurfaceHolder) $r11;

        interfaceinvoke $r10.<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeeded(android.view.SurfaceHolder)>(r17);

        $r12 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r3 = virtualinvoke $r12.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        if r3 == null goto label08;

        i0 = lengthof r3;

        i1 = 0;

     label05:
        if i1 >= i0 goto label08;

        r4 = r3[i1];

        $z4 = r4 instanceof android.view.SurfaceHolder$Callback2;

        if $z4 == 0 goto label06;

        $r14 = (android.view.SurfaceHolder$Callback2) r4;

        $r13 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r18 = (android.view.SurfaceHolder) $r13;

        interfaceinvoke $r14.<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeeded(android.view.SurfaceHolder)>(r18);

     label06:
        i1 = i1 + 1;

        goto label05;

     label07:
        $r16 := @caughtexception;

        r1 = $r16;

        r0.<android.view.ViewRootImpl: boolean mIsDrawing> = 0;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw r1;

     label08:
        $r8 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r7 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r8.<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>($r7);

     label09:
        return;

     label10:
        $r15 := @caughtexception;

        return;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    private void performLayout(android.view.WindowManager$LayoutParams, int, int)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        android.view.View r2, r5, $r10;
        java.lang.Throwable r3, $r20;
        java.util.ArrayList r4, r6, $r7, $r8, $r12;
        android.content.Context $r9;
        android.content.res.Resources $r11;
        java.lang.Object $r13;
        java.lang.StringBuilder $r14, $r17, $r18, $r19;
        android.view.ViewRootImpl$RunQueue $r15;
        android.view.ViewRootImpl$2 $r16;
        java.lang.String $r21;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 0;

        r0.<android.view.ViewRootImpl: boolean mScrollMayChange> = 1;

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 1;

        r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "layout");

     label01:
        $i4 = virtualinvoke r2.<android.view.View: int getMeasuredWidth()>();

        $i5 = virtualinvoke r2.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke r2.<android.view.View: void layout(int,int,int,int)>(0, 0, $i4, $i5);

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 0;

        $r7 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        $i6 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        if $i6 <= 0 goto label11;

        $r8 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        r4 = specialinvoke r0.<android.view.ViewRootImpl: java.util.ArrayList getValidLayoutRequesters(java.util.ArrayList,boolean)>($r8, 0);

     label02:
        if r4 == null goto label11;

     label03:
        r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest> = 1;

        i2 = virtualinvoke r4.<java.util.ArrayList: int size()>();

     label04:
        i3 = 0;

     label05:
        if i3 >= i2 goto label08;

     label06:
        $r13 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r5 = (android.view.View) $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestLayout() improperly called by ");

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" during layout: running second layout pass");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r21);

        virtualinvoke r5.<android.view.View: void requestLayout()>();

     label07:
        i3 = i3 + 1;

        goto label05;

     label08:
        $r10 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r9 = virtualinvoke $r10.<android.view.View: android.content.Context getContext()>();

        $r11 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke r0.<android.view.ViewRootImpl: boolean measureHierarchy(android.view.View,android.view.WindowManager$LayoutParams,android.content.res.Resources,int,int)>(r2, r1, $r11, i0, i1);

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 1;

        $i8 = virtualinvoke r2.<android.view.View: int getMeasuredWidth()>();

        $i7 = virtualinvoke r2.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke r2.<android.view.View: void layout(int,int,int,int)>(0, 0, $i8, $i7);

        r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest> = 0;

        $r12 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        r6 = specialinvoke r0.<android.view.ViewRootImpl: java.util.ArrayList getValidLayoutRequesters(java.util.ArrayList,boolean)>($r12, 1);

     label09:
        if r6 == null goto label11;

     label10:
        $r15 = staticinvoke <android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>();

        $r16 = new android.view.ViewRootImpl$2;

        specialinvoke $r16.<android.view.ViewRootImpl$2: void <init>(android.view.ViewRootImpl,java.util.ArrayList)>(r0, r6);

        virtualinvoke $r15.<android.view.ViewRootImpl$RunQueue: void post(java.lang.Runnable)>($r16);

     label11:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 0;

        return;

     label12:
        $r20 := @caughtexception;

        r3 = $r20;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw r3;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    private void performMeasure(int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1;
        java.lang.Throwable r1, $r3;
        android.view.View $r2;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "measure");

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r2.<android.view.View: void measure(int,int)>(i0, i1);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void performTraversals()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r8, r9, $r84, $r85, $r88, $r89, $r101, $r218, $r219, $r220, $r252, $r262, $r263, $r277;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14, z15, z16, z17, z18, z19, z20, z21, z22, z23, z24, z25, z26, z27, z28, z29, z30, z31, z32, z33, z34, z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z65, $z67, $z68, $z69, $z72, $z73, $z74, $z75, $z76, $z77, $z78, $z79, $z80, $z81, $z82, $z83, $z84, $z86, $z87, $z88, $z89, $z90, $z91, $z92, $z93, $z94, $z95, $z97, $z98, $z100, $z101, $z102, $z103, $z104, $z106, $z107;
        android.view.WindowManager$LayoutParams r2, r4, $r86, $r87, $r90;
        android.view.View$AttachInfo r3, r31, r33, $r47, $r50, $r54, $r59, $r60, $r64, $r66, $r70, $r122, $r124, $r137, $r141, $r145, $r155, $r159, $r169, $r172, $r173, $r176, $r183, $r184, $r186, $r187, $r191, $r193, $r197, $r199, $r203, $r205, $r206, $r209, $r225, $r235, $r238, $r247, $r255, $r261, $r270, $r272;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, $i29, i30, i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i113, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i152, $i153, $i154, $i155, $i156, $i157;
        android.graphics.Rect r5, r13, r14, $r48, $r49, $r51, $r52, $r55, $r56, $r61, $r62, $r63, $r93, $r95, $r170, $r171, $r177, $r178, $r207, $r208, $r226, $r227, $r236, $r237, $r239, $r240, $r243, $r244, $r245, $r246, $r256, $r273, $r274, $r275;
        android.view.inputmethod.InputMethodManager r7;
        android.view.ViewTreeObserver$InternalInsetsInfo r10, $r99, $r108;
        android.graphics.Region r11, $r91, $r110, $r111, $r112, $r114, $r117, $r118, $r119, $r121, $r185;
        android.view.SurfaceHolder$Callback[] r16, r17, r19;
        byte b14, $b75;
        java.lang.Throwable r18, r26, $r280, $r284;
        com.android.internal.view.BaseSurfaceHolder r20, $r42, $r69, $r125, $r128, $r129, $r130, $r133, $r135, $r136, $r147, $r150, $r151, $r152, $r158, $r160, $r161, $r163, $r165, $r168, $r230, $r287;
        android.view.HardwareRenderer r21, r22, r27, $r71, $r123, $r138, $r139, $r143, $r146, $r157, $r174, $r190, $r192, $r194, $r198, $r200, $r204, $r233;
        android.view.Surface$OutOfResourcesException r23, r28, $r267, $r285;
        android.view.HardwareCanvas r24, r30;
        java.lang.OutOfMemoryError r25, $r266;
        android.view.DisplayList r29;
        android.content.res.Configuration r32, $r53, $r234, $r248, $r269, $r276;
        android.graphics.Point r34, r38, r290, r291;
        android.util.DisplayMetrics r35, r37;
        android.content.res.Resources r36, $r217, $r254, $r268, $r279;
        android.content.res.CompatibilityInfo $r39;
        android.view.DisplayAdjustments $r40;
        android.view.ViewTreeObserver $r41, $r65, $r100, $r107, $r271;
        android.view.Surface $r43, $r44, $r57, $r58, $r126, $r140, $r144, $r148, $r156, $r175, $r179, $r201, $r202, $r249, r292;
        android.os.Handler $r45;
        android.view.ViewRootImpl$RunQueue $r46;
        java.util.ArrayList $r67, $r68, $r73, $r75, $r76, $r79, $r80, $r81, $r82, $r83, $r257, $r259;
        java.lang.Object $r72, $r78, $r258;
        android.animation.LayoutTransition $r74, $r77;
        android.content.res.CompatibilityInfo$Translator $r92, $r94, $r98, $r109, $r113, $r120, $r213, $r221, $r228, $r229;
        android.view.IWindowSession $r96, $r115;
        android.view.ViewRootImpl$W $r97, $r116;
        int[] $r102, $r103, $r104, $r105, $r106;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        java.util.concurrent.locks.ReentrantLock $r127, $r132, $r162, $r231, $r286;
        android.view.SurfaceHolder$Callback2 $r134, $r153, $r167;
        android.view.SurfaceHolder $r142, $r154, $r182, r293, r294, r295, r296, r297, r298;
        android.view.SurfaceHolder$Callback $r149, $r164, $r166;
        java.lang.ref.WeakReference $r180, $r189;
        android.widget.Scroller $r181, $r188, $r211, $r212, $r214, $r222;
        android.view.HardwareLayer $r195, $r196, $r210, $r215, $r216, $r223, $r224, $r232, $r264, $r265, $r282, $r283;
        long $l114;
        android.view.Display $r241, $r250;
        android.content.Context $r253, $r260, $r278;
        android.os.RemoteException $r281, $r288, $r289;

        r0 := @this: android.view.ViewRootImpl;

        r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 == null goto label001;

        $z36 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z36 != 0 goto label002;

     label001:
        return;

     label002:
        r0.<android.view.ViewRootImpl: boolean mIsInTraversal> = 1;

        r0.<android.view.ViewRootImpl: boolean mWillDrawSoon> = 1;

        z0 = 0;

        z1 = 0;

        r2 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        i0 = virtualinvoke r0.<android.view.ViewRootImpl: int getHostVisibility()>();

        $i29 = r0.<android.view.ViewRootImpl: int mViewVisibility>;

        if $i29 != i0 goto label003;

        $z107 = r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded>;

        if $z107 == 0 goto label023;

     label003:
        z2 = 1;

     label004:
        z3 = r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged>;

        r4 = null;

        z4 = 0;

        if z3 == 0 goto label005;

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 0;

        z4 = 1;

        r4 = r2;

     label005:
        $r40 = r0.<android.view.ViewRootImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        $r39 = virtualinvoke $r40.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $z39 = virtualinvoke $r39.<android.content.res.CompatibilityInfo: boolean supportsScreen()>();

        $z38 = r0.<android.view.ViewRootImpl: boolean mLastInCompatMode>;

        if $z39 != $z38 goto label006;

        r4 = r2;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        $z106 = r0.<android.view.ViewRootImpl: boolean mLastInCompatMode>;

        if $z106 == 0 goto label024;

        $i157 = r4.<android.view.WindowManager$LayoutParams: int privateFlags>;

        i30 = -129 & $i157;

        r4.<android.view.WindowManager$LayoutParams: int privateFlags> = i30;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 0;

     label006:
        r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag> = 0;

        r5 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        $z37 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z37 == 0 goto label026;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        $i140 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i140 == 2014 goto label007;

        $i155 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i155 != 2011 goto label025;

     label007:
        r290 = new android.graphics.Point;

        specialinvoke r290.<android.graphics.Point: void <init>()>();

        r38 = r290;

        $r250 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        virtualinvoke $r250.<android.view.Display: void getRealSize(android.graphics.Point)>(r38);

        i1 = r38.<android.graphics.Point: int x>;

        i2 = r38.<android.graphics.Point: int y>;

     label008:
        $r249 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        r3.<android.view.View$AttachInfo: android.view.Surface mSurface> = $r249;

        r3.<android.view.View$AttachInfo: boolean mUse32BitDrawingCache> = 1;

        r3.<android.view.View$AttachInfo: boolean mHasWindowFocus> = 0;

        r3.<android.view.View$AttachInfo: int mWindowVisibility> = i0;

        r3.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 0;

        z2 = 0;

        $r248 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration>;

        $r268 = virtualinvoke r1.<android.view.View: android.content.res.Resources getResources()>();

        $r269 = virtualinvoke $r268.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        virtualinvoke $r248.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r269);

        $r270 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i152 = $r270.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        r0.<android.view.ViewRootImpl: int mLastSystemUiVisibility> = $i152;

        $i153 = r0.<android.view.ViewRootImpl: int mViewLayoutDirectionInitial>;

        if $i153 != 2 goto label009;

        $r276 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration>;

        $i154 = virtualinvoke $r276.<android.content.res.Configuration: int getLayoutDirection()>();

        virtualinvoke r1.<android.view.View: void setLayoutDirection(int)>($i154);

     label009:
        virtualinvoke r1.<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>(r3, 0);

        $r271 = r3.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r271.<android.view.ViewTreeObserver: void dispatchOnWindowAttachedChange(boolean)>(1);

        $r274 = r0.<android.view.ViewRootImpl: android.graphics.Rect mFitSystemWindowsInsets>;

        $r272 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r273 = $r272.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        virtualinvoke $r274.<android.graphics.Rect: void set(android.graphics.Rect)>($r273);

        $r275 = r0.<android.view.ViewRootImpl: android.graphics.Rect mFitSystemWindowsInsets>;

        virtualinvoke r1.<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>($r275);

     label010:
        if z2 == 0 goto label013;

        r3.<android.view.View$AttachInfo: int mWindowVisibility> = i0;

        virtualinvoke r1.<android.view.View: void dispatchWindowVisibilityChanged(int)>(i0);

        if i0 != 0 goto label011;

        $z94 = r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded>;

        if $z94 == 0 goto label012;

     label011:
        virtualinvoke r0.<android.view.ViewRootImpl: void destroyHardwareResources()>();

     label012:
        if i0 != 8 goto label013;

        r0.<android.view.ViewRootImpl: boolean mHasHadWindowFocus> = 0;

     label013:
        $r46 = staticinvoke <android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>();

        $r45 = r3.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r46.<android.view.ViewRootImpl$RunQueue: void executeActions(android.os.Handler)>($r45);

        $z43 = r0.<android.view.ViewRootImpl: boolean mLayoutRequested>;

        if $z43 == 0 goto label028;

        $z95 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z95 != 0 goto label028;

        z5 = 1;

     label014:
        z6 = 0;

        if z5 == 0 goto label017;

        $r263 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r260 = virtualinvoke $r263.<android.view.View: android.content.Context getContext()>();

        r36 = virtualinvoke $r260.<android.content.Context: android.content.res.Resources getResources()>();

        $z102 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z102 == 0 goto label030;

        r33 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z93 = r0.<android.view.ViewRootImpl: boolean mAddedTouchMode>;

        if $z93 != 0 goto label029;

        z34 = 1;

     label015:
        r33.<android.view.View$AttachInfo: boolean mInTouchMode> = z34;

        $z92 = r0.<android.view.ViewRootImpl: boolean mAddedTouchMode>;

        specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>($z92);

     label016:
        $z90 = specialinvoke r0.<android.view.ViewRootImpl: boolean measureHierarchy(android.view.View,android.view.WindowManager$LayoutParams,android.content.res.Resources,int,int)>(r1, r2, r36, i1, i2);

        z0 = z0 | $z90;

     label017:
        $z42 = specialinvoke r0.<android.view.ViewRootImpl: boolean collectViewAttributes()>();

        if $z42 == 0 goto label018;

        r4 = r2;

     label018:
        $z45 = r3.<android.view.View$AttachInfo: boolean mForceReportNewAttributes>;

        if $z45 == 0 goto label019;

        r3.<android.view.View$AttachInfo: boolean mForceReportNewAttributes> = 0;

        r4 = r2;

     label019:
        $z44 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z44 != 0 goto label020;

        $z104 = r3.<android.view.View$AttachInfo: boolean mViewVisibilityChanged>;

        if $z104 == 0 goto label039;

     label020:
        r3.<android.view.View$AttachInfo: boolean mViewVisibilityChanged> = 0;

        $i33 = r0.<android.view.ViewRootImpl: int mSoftInputMode>;

        i3 = 240 & $i33;

        if i3 != 0 goto label039;

        $r257 = r3.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        i26 = virtualinvoke $r257.<java.util.ArrayList: int size()>();

        i27 = 0;

     label021:
        if i27 >= i26 goto label037;

        $r259 = r3.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        $r258 = virtualinvoke $r259.<java.util.ArrayList: java.lang.Object get(int)>(i27);

        $r262 = (android.view.View) $r258;

        $z103 = virtualinvoke $r262.<android.view.View: boolean isShown()>();

        if $z103 == 0 goto label022;

        i3 = 16;

     label022:
        i27 = i27 + 1;

        goto label021;

     label023:
        z2 = 0;

        goto label004;

     label024:
        $i156 = r4.<android.view.WindowManager$LayoutParams: int privateFlags>;

        i31 = 128 | $i156;

        r4.<android.view.WindowManager$LayoutParams: int privateFlags> = i31;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 1;

        goto label006;

     label025:
        $r277 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r278 = virtualinvoke $r277.<android.view.View: android.content.Context getContext()>();

        $r279 = virtualinvoke $r278.<android.content.Context: android.content.res.Resources getResources()>();

        r37 = virtualinvoke $r279.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i1 = r37.<android.util.DisplayMetrics: int widthPixels>;

        i2 = r37.<android.util.DisplayMetrics: int heightPixels>;

        goto label008;

     label026:
        i1 = virtualinvoke r5.<android.graphics.Rect: int width()>();

        i2 = virtualinvoke r5.<android.graphics.Rect: int height()>();

        $i32 = r0.<android.view.ViewRootImpl: int mWidth>;

        if i1 != $i32 goto label027;

        i28 = r0.<android.view.ViewRootImpl: int mHeight>;

        z0 = 0;

        if i2 == i28 goto label010;

     label027:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        z0 = 1;

        goto label010;

     label028:
        z5 = 0;

        goto label014;

     label029:
        z34 = 0;

        goto label015;

     label030:
        $r240 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        $r261 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r239 = $r261.<android.view.View$AttachInfo: android.graphics.Rect mOverscanInsets>;

        z35 = virtualinvoke $r240.<android.graphics.Rect: boolean equals(java.lang.Object)>($r239);

        z6 = 0;

        if z35 != 0 goto label031;

        z6 = 1;

     label031:
        $r237 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        $r238 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r236 = $r238.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        $z89 = virtualinvoke $r237.<android.graphics.Rect: boolean equals(java.lang.Object)>($r236);

        if $z89 != 0 goto label032;

        z6 = 1;

     label032:
        $r244 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        $r235 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r243 = $r235.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $z91 = virtualinvoke $r244.<android.graphics.Rect: boolean equals(java.lang.Object)>($r243);

        if $z91 != 0 goto label033;

        $r247 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r245 = $r247.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $r246 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        virtualinvoke $r245.<android.graphics.Rect: void set(android.graphics.Rect)>($r246);

     label033:
        $i137 = r2.<android.view.WindowManager$LayoutParams: int width>;

        if $i137 == -2 goto label034;

        $i138 = r2.<android.view.WindowManager$LayoutParams: int height>;

        if $i138 != -2 goto label016;

     label034:
        z0 = 1;

        $i136 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i136 == 2014 goto label035;

        $i139 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i139 != 2011 goto label036;

     label035:
        r291 = new android.graphics.Point;

        specialinvoke r291.<android.graphics.Point: void <init>()>();

        r34 = r291;

        $r241 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        virtualinvoke $r241.<android.view.Display: void getRealSize(android.graphics.Point)>(r34);

        i1 = r34.<android.graphics.Point: int x>;

        i2 = r34.<android.graphics.Point: int y>;

        goto label016;

     label036:
        r35 = virtualinvoke r36.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i1 = r35.<android.util.DisplayMetrics: int widthPixels>;

        i2 = r35.<android.util.DisplayMetrics: int heightPixels>;

        goto label016;

     label037:
        if i3 != 0 goto label038;

        i3 = 32;

     label038:
        $i148 = r2.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i150 = 240 & $i148;

        if $i150 == i3 goto label039;

        $i149 = r2.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i147 = -241 & $i149;

        $i146 = i3 | $i147;

        r2.<android.view.WindowManager$LayoutParams: int softInputMode> = $i146;

        r4 = r2;

     label039:
        if r4 == null goto label042;

        $i143 = r1.<android.view.View: int mPrivateFlags>;

        $i144 = 512 & $i143;

        if $i144 == 0 goto label040;

        $i142 = r4.<android.view.WindowManager$LayoutParams: int format>;

        $z100 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>($i142);

        if $z100 != 0 goto label040;

        r4.<android.view.WindowManager$LayoutParams: int format> = -3;

     label040:
        r31 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i145 = r4.<android.view.WindowManager$LayoutParams: int flags>;

        $i141 = 33554432 & $i145;

        if $i141 == 0 goto label111;

        z31 = 1;

     label041:
        r31.<android.view.View$AttachInfo: boolean mOverscanRequested> = z31;

     label042:
        $z46 = r0.<android.view.ViewRootImpl: boolean mFitSystemWindowsRequested>;

        if $z46 == 0 goto label043;

        r0.<android.view.ViewRootImpl: boolean mFitSystemWindowsRequested> = 0;

        $r227 = r0.<android.view.ViewRootImpl: android.graphics.Rect mFitSystemWindowsInsets>;

        $r225 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r226 = $r225.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        virtualinvoke $r227.<android.graphics.Rect: void set(android.graphics.Rect)>($r226);

        $r255 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z98 = $r255.<android.view.View$AttachInfo: boolean mOverscanRequested>;

        r0.<android.view.ViewRootImpl: boolean mLastOverscanRequested> = $z98;

        $r256 = r0.<android.view.ViewRootImpl: android.graphics.Rect mFitSystemWindowsInsets>;

        virtualinvoke r1.<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>($r256);

        $z97 = r0.<android.view.ViewRootImpl: boolean mLayoutRequested>;

        if $z97 == 0 goto label043;

        $r252 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r253 = virtualinvoke $r252.<android.view.View: android.content.Context getContext()>();

        $r254 = virtualinvoke $r253.<android.content.Context: android.content.res.Resources getResources()>();

        $z101 = specialinvoke r0.<android.view.ViewRootImpl: boolean measureHierarchy(android.view.View,android.view.WindowManager$LayoutParams,android.content.res.Resources,int,int)>(r1, r2, $r254, i1, i2);

        z0 = z0 | $z101;

     label043:
        if z5 == 0 goto label044;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 0;

     label044:
        if z5 == 0 goto label112;

        if z0 == 0 goto label112;

        $i126 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i127 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        if $i126 != $i127 goto label046;

        $i128 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i122 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        if $i128 != $i122 goto label046;

        $i123 = r2.<android.view.WindowManager$LayoutParams: int width>;

        if $i123 != -2 goto label045;

        $i120 = virtualinvoke r5.<android.graphics.Rect: int width()>();

        if $i120 >= i1 goto label045;

        $i121 = virtualinvoke r5.<android.graphics.Rect: int width()>();

        $i117 = r0.<android.view.ViewRootImpl: int mWidth>;

        if $i121 != $i117 goto label046;

     label045:
        $i124 = r2.<android.view.WindowManager$LayoutParams: int height>;

        if $i124 != -2 goto label112;

        $i125 = virtualinvoke r5.<android.graphics.Rect: int height()>();

        if $i125 >= i2 goto label112;

        $i118 = virtualinvoke r5.<android.graphics.Rect: int height()>();

        $i119 = r0.<android.view.ViewRootImpl: int mHeight>;

        if $i118 == $i119 goto label112;

     label046:
        z7 = 1;

     label047:
        $r41 = r3.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        $z40 = virtualinvoke $r41.<android.view.ViewTreeObserver: boolean hasComputeInternalInsetsListeners()>();

        if $z40 != 0 goto label048;

        $z86 = r3.<android.view.View$AttachInfo: boolean mHasNonEmptyGivenInternalInsets>;

        if $z86 == 0 goto label113;

     label048:
        z8 = 1;

     label049:
        i4 = 0;

        $z41 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z41 != 0 goto label050;

        if z7 != 0 goto label050;

        if z6 != 0 goto label050;

        if z2 != 0 goto label050;

        if r4 == null goto label202;

     label050:
        z10 = 0;

        if i0 != 0 goto label052;

        if z8 == 0 goto label114;

        $z87 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z87 != 0 goto label051;

        if z2 == 0 goto label114;

     label051:
        z10 = 1;

     label052:
        $r42 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r42 == null goto label053;

        $r230 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r231 = $r230.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r231.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        r0.<android.view.ViewRootImpl: boolean mDrawingAllowed> = 1;

     label053:
        z9 = 0;

        $r43 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        z11 = virtualinvoke $r43.<android.view.Surface: boolean isValid()>();

     label054:
        $r44 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        i19 = virtualinvoke $r44.<android.view.Surface: int getGenerationId()>();

        i4 = specialinvoke r0.<android.view.ViewRootImpl: int relayoutWindow(android.view.WindowManager$LayoutParams,int,boolean)>(r4, i0, z10);

        $z49 = r0.<android.view.ViewRootImpl: boolean mDrawDuringWindowsAnimating>;

        if $z49 != 0 goto label057;

     label055:
        $i135 = i4 & 8;

        if $i135 == 0 goto label057;

     label056:
        r0.<android.view.ViewRootImpl: boolean mWindowsAnimating> = 1;

     label057:
        $r53 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration>;

        $i34 = $r53.<android.content.res.Configuration: int seq>;

        if $i34 == 0 goto label060;

        r32 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration>;

        $z88 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z88 != 0 goto label115;

     label058:
        z33 = 1;

     label059:
        virtualinvoke r0.<android.view.ViewRootImpl: void updateConfiguration(android.content.res.Configuration,boolean)>(r32, z33);

        $r234 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration>;

        $r234.<android.content.res.Configuration: int seq> = 0;

     label060:
        $r56 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        $r54 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r55 = $r54.<android.view.View$AttachInfo: android.graphics.Rect mOverscanInsets>;

        $z50 = virtualinvoke $r56.<android.graphics.Rect: boolean equals(java.lang.Object)>($r55);

        if $z50 != 0 goto label116;

     label061:
        z23 = 1;

     label062:
        $r49 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        $r47 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r48 = $r47.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        $z47 = virtualinvoke $r49.<android.graphics.Rect: boolean equals(java.lang.Object)>($r48);

        if $z47 != 0 goto label117;

     label063:
        z9 = 1;

     label064:
        $r52 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        $r50 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r51 = $r50.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $z48 = virtualinvoke $r52.<android.graphics.Rect: boolean equals(java.lang.Object)>($r51);

        if $z48 != 0 goto label118;

     label065:
        z24 = 1;

     label066:
        if z9 == 0 goto label091;

     label067:
        $i103 = r0.<android.view.ViewRootImpl: int mWidth>;

        if $i103 <= 0 goto label090;

        $i105 = r0.<android.view.ViewRootImpl: int mHeight>;

        if $i105 <= 0 goto label090;

     label068:
        z1 = 0;

        if r2 == null goto label090;

     label069:
        $i107 = r2.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        $i104 = r2.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        $i106 = $i107 | $i104;

        $i102 = 1536 & $i106;

        if $i102 != 0 goto label090;

        $r201 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        if $r201 == null goto label090;

        $r202 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z81 = virtualinvoke $r202.<android.view.Surface: boolean isValid()>();

        if $z81 == 0 goto label090;

        $r203 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z82 = $r203.<android.view.View$AttachInfo: boolean mTurnOffWindowResizeAnim>;

        if $z82 != 0 goto label090;

        $r205 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r204 = $r205.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r204 == null goto label090;

        $r197 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r198 = $r197.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z79 = virtualinvoke $r198.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z79 == 0 goto label090;

        $r199 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r200 = $r199.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z80 = virtualinvoke $r200.<android.view.HardwareRenderer: boolean validate()>();

        if $z80 == 0 goto label090;

     label070:
        z1 = 0;

        if r2 == null goto label090;

     label071:
        $i101 = r2.<android.view.WindowManager$LayoutParams: int format>;

        z28 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>($i101);

     label072:
        z1 = 0;

        if z28 != 0 goto label090;

     label073:
        virtualinvoke r0.<android.view.ViewRootImpl: void disposeResizeBuffer()>();

     label074:
        z27 = 0;

     label075:
        $r193 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r194 = $r193.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        r24 = virtualinvoke $r194.<android.view.HardwareRenderer: android.view.HardwareCanvas getCanvas()>();

     label076:
        $r195 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        if $r195 != null goto label119;

        $r209 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r233 = $r209.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $i109 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i108 = r0.<android.view.ViewRootImpl: int mHeight>;

        $r232 = virtualinvoke $r233.<android.view.HardwareRenderer: android.view.HardwareLayer createHardwareLayer(int,int,boolean)>($i109, $i108, 0);

        r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer> = $r232;

     label077:
        $r223 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        r30 = virtualinvoke $r223.<android.view.HardwareLayer: android.view.HardwareCanvas start(android.graphics.Canvas)>(r24);

        i25 = virtualinvoke r30.<android.view.HardwareCanvas: int save()>();

        $r222 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r222 == null goto label129;

        $r211 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        $z83 = virtualinvoke $r211.<android.widget.Scroller: boolean computeScrollOffset()>();

        if $z83 == 0 goto label129;

     label078:
        z30 = 1;

     label079:
        if z30 == 0 goto label130;

     label080:
        $r214 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        i24 = virtualinvoke $r214.<android.widget.Scroller: int getCurrY()>();

        $r212 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        virtualinvoke $r212.<android.widget.Scroller: void abortAnimation()>();

     label081:
        $i115 = neg i24;

        $f8 = (float) $i115;

        virtualinvoke r30.<android.view.HardwareCanvas: void translate(float,float)>(0.0F, $f8);

        $r221 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r221 == null goto label082;

        $r213 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r213.<android.content.res.CompatibilityInfo$Translator: void translateCanvas(android.graphics.Canvas)>(r30);

     label082:
        $r220 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r29 = $r220.<android.view.View: android.view.DisplayList mDisplayList>;

     label083:
        z27 = 0;

        if r29 == null goto label132;

     label084:
        $z84 = virtualinvoke r29.<android.view.DisplayList: boolean isValid()>();

        if $z84 == 0 goto label132;

        virtualinvoke r30.<android.view.HardwareCanvas: int drawDisplayList(android.view.DisplayList,android.graphics.Rect,int)>(r29, null, 1);

     label085:
        specialinvoke r0.<android.view.ViewRootImpl: void drawAccessibilityFocusedDrawableIfNeeded(android.graphics.Canvas)>(r30);

        $l114 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<android.view.ViewRootImpl: long mResizeBufferStartTime> = $l114;

        $r218 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r217 = virtualinvoke $r218.<android.view.View: android.content.res.Resources getResources()>();

        $i113 = virtualinvoke $r217.<android.content.res.Resources: int getInteger(int)>(17694721);

        r0.<android.view.ViewRootImpl: int mResizeBufferDuration> = $i113;

     label086:
        z27 = 1;

     label087:
        virtualinvoke r30.<android.view.HardwareCanvas: void restoreToCount(int)>(i25);

     label088:
        $r215 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        if $r215 == null goto label090;

        $r216 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        virtualinvoke $r216.<android.view.HardwareLayer: void end(android.graphics.Canvas)>(r24);

     label089:
        z1 = 0;

        goto label090;

     label090:
        $r206 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r207 = $r206.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        $r208 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        virtualinvoke $r207.<android.graphics.Rect: void set(android.graphics.Rect)>($r208);

     label091:
        if z23 == 0 goto label094;

     label092:
        $r172 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r171 = $r172.<android.view.View$AttachInfo: android.graphics.Rect mOverscanInsets>;

        $r170 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        virtualinvoke $r171.<android.graphics.Rect: void set(android.graphics.Rect)>($r170);

     label093:
        z9 = 1;

     label094:
        if z9 != 0 goto label096;

     label095:
        $i96 = r0.<android.view.ViewRootImpl: int mLastSystemUiVisibility>;

        $r176 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i97 = $r176.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        if $i96 != $i97 goto label096;

        $z77 = r0.<android.view.ViewRootImpl: boolean mFitSystemWindowsRequested>;

        if $z77 != 0 goto label096;

        $z78 = r0.<android.view.ViewRootImpl: boolean mLastOverscanRequested>;

        $r169 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z76 = $r169.<android.view.View$AttachInfo: boolean mOverscanRequested>;

        if $z78 == $z76 goto label097;

     label096:
        $r60 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i38 = $r60.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        r0.<android.view.ViewRootImpl: int mLastSystemUiVisibility> = $i38;

        $r59 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z53 = $r59.<android.view.View$AttachInfo: boolean mOverscanRequested>;

        r0.<android.view.ViewRootImpl: boolean mLastOverscanRequested> = $z53;

        r0.<android.view.ViewRootImpl: boolean mFitSystemWindowsRequested> = 0;

        $r62 = r0.<android.view.ViewRootImpl: android.graphics.Rect mFitSystemWindowsInsets>;

        $r64 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r63 = $r64.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        virtualinvoke $r62.<android.graphics.Rect: void set(android.graphics.Rect)>($r63);

        $r61 = r0.<android.view.ViewRootImpl: android.graphics.Rect mFitSystemWindowsInsets>;

        virtualinvoke r1.<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>($r61);

     label097:
        if z24 == 0 goto label099;

     label098:
        $r173 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r178 = $r173.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $r177 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        virtualinvoke $r178.<android.graphics.Rect: void set(android.graphics.Rect)>($r177);

     label099:
        if z11 != 0 goto label142;

     label100:
        $r179 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        z26 = virtualinvoke $r179.<android.view.Surface: boolean isValid()>();

     label101:
        z13 = 0;

        z1 = 0;

        if z26 == 0 goto label106;

        z1 = 1;

     label102:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        $r185 = r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion>;

        virtualinvoke $r185.<android.graphics.Region: void setEmpty()>();

        $r184 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r22 = $r184.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

     label103:
        z13 = 0;

        if r22 == null goto label106;

     label104:
        $r183 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r174 = $r183.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r182 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder mHolder>;

        $r175 = interfaceinvoke $r182.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        z25 = virtualinvoke $r174.<android.view.HardwareRenderer: boolean initialize(android.view.Surface)>($r175);

     label105:
        z13 = z25;

     label106:
        $i37 = r5.<android.graphics.Rect: int left>;

        r3.<android.view.View$AttachInfo: int mWindowLeft> = $i37;

        $i36 = r5.<android.graphics.Rect: int top>;

        r3.<android.view.View$AttachInfo: int mWindowTop> = $i36;

        $i35 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i42 = virtualinvoke r5.<android.graphics.Rect: int width()>();

        if $i35 != $i42 goto label107;

        $i88 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i89 = virtualinvoke r5.<android.graphics.Rect: int height()>();

        if $i88 == $i89 goto label108;

     label107:
        $i43 = virtualinvoke r5.<android.graphics.Rect: int width()>();

        r0.<android.view.ViewRootImpl: int mWidth> = $i43;

        $i41 = virtualinvoke r5.<android.graphics.Rect: int height()>();

        r0.<android.view.ViewRootImpl: int mHeight> = $i41;

     label108:
        $r69 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r69 == null goto label166;

        $r144 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z75 = virtualinvoke $r144.<android.view.Surface: boolean isValid()>();

        if $z75 == 0 goto label109;

        $r158 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r148 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $r158.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface> = $r148;

     label109:
        $r129 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i81 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i82 = r0.<android.view.ViewRootImpl: int mHeight>;

        virtualinvoke $r129.<com.android.internal.view.BaseSurfaceHolder: void setSurfaceFrameSize(int,int)>($i81, $i82);

        $r128 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r127 = $r128.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r127.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r126 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z74 = virtualinvoke $r126.<android.view.Surface: boolean isValid()>();

        if $z74 == 0 goto label195;

        if z11 != 0 goto label163;

        $r151 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r151.<com.android.internal.view.BaseSurfaceHolder: void ungetCallbacks()>();

        r0.<android.view.ViewRootImpl: boolean mIsCreating> = 1;

        $r153 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        $r150 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r293 = (android.view.SurfaceHolder) $r150;

        interfaceinvoke $r153.<android.view.SurfaceHolder$Callback2: void surfaceCreated(android.view.SurfaceHolder)>(r293);

        $r152 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r19 = virtualinvoke $r152.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        if r19 == null goto label162;

        i22 = lengthof r19;

        i18 = 0;

     label110:
        if i18 >= i22 goto label162;

        $r149 = r19[i18];

        $r147 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r294 = (android.view.SurfaceHolder) $r147;

        interfaceinvoke $r149.<android.view.SurfaceHolder$Callback: void surfaceCreated(android.view.SurfaceHolder)>(r294);

        i18 = i18 + 1;

        goto label110;

     label111:
        z31 = 0;

        goto label041;

     label112:
        z7 = 0;

        goto label047;

     label113:
        z8 = 0;

        goto label049;

     label114:
        z10 = 0;

        goto label052;

     label115:
        z33 = 0;

        goto label059;

     label116:
        z23 = 0;

        goto label062;

     label117:
        z9 = 0;

        goto label064;

     label118:
        z24 = 0;

        goto label066;

     label119:
        $r196 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        $i98 = virtualinvoke $r196.<android.view.HardwareLayer: int getWidth()>();

        $i99 = r0.<android.view.ViewRootImpl: int mWidth>;

        if $i98 != $i99 goto label120;

        $r210 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        $i111 = virtualinvoke $r210.<android.view.HardwareLayer: int getHeight()>();

        $i110 = r0.<android.view.ViewRootImpl: int mHeight>;

        if $i111 == $i110 goto label077;

     label120:
        $r224 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        $i116 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i100 = r0.<android.view.ViewRootImpl: int mHeight>;

        virtualinvoke $r224.<android.view.HardwareLayer: boolean resize(int,int)>($i116, $i100);

     label121:
        goto label077;

     label122:
        $r266 := @caughtexception;

        r25 = $r266;

     label123:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewRootImpl", "Not enough memory for content change anim buffer", r25);

     label124:
        $r264 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        if $r264 == null goto label090;

        $r265 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        virtualinvoke $r265.<android.view.HardwareLayer: void end(android.graphics.Canvas)>(r24);

     label125:
        z1 = 0;

        if z27 != 0 goto label090;

     label126:
        virtualinvoke r0.<android.view.ViewRootImpl: void disposeResizeBuffer()>();

     label127:
        goto label090;

     label128:
        $r281 := @caughtexception;

        z13 = 0;

        goto label106;

     label129:
        z30 = 0;

        goto label079;

     label130:
        i24 = r0.<android.view.ViewRootImpl: int mScrollY>;

     label131:
        goto label081;

     label132:
        $r219 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r219.<android.view.View: void draw(android.graphics.Canvas)>(r30);

     label133:
        goto label085;

     label134:
        $r280 := @caughtexception;

        r26 = $r280;

     label135:
        $r283 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        if $r283 == null goto label138;

        $r282 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        virtualinvoke $r282.<android.view.HardwareLayer: void end(android.graphics.Canvas)>(r24);

     label136:
        z1 = 0;

        if z27 != 0 goto label138;

     label137:
        virtualinvoke r0.<android.view.ViewRootImpl: void disposeResizeBuffer()>();

     label138:
        throw r26;

     label139:
        $r285 := @caughtexception;

        r23 = $r285;

     label140:
        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>(r23);

     label141:
        return;

     label142:
        $r58 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z51 = virtualinvoke $r58.<android.view.Surface: boolean isValid()>();

        if $z51 != 0 goto label150;

        $r189 = r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus>;

        if $r189 == null goto label143;

        $r180 = r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus>;

        virtualinvoke $r180.<java.lang.ref.WeakReference: void clear()>();

     label143:
        r0.<android.view.ViewRootImpl: int mCurScrollY> = 0;

        r0.<android.view.ViewRootImpl: int mScrollY> = 0;

        $r188 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r188 == null goto label144;

        $r181 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        virtualinvoke $r181.<android.widget.Scroller: void abortAnimation()>();

     label144:
        virtualinvoke r0.<android.view.ViewRootImpl: void disposeResizeBuffer()>();

        $r187 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r27 = $r187.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

     label145:
        z13 = 0;

        z1 = 0;

        if r27 == null goto label106;

     label146:
        $r186 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r192 = $r186.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        z29 = virtualinvoke $r192.<android.view.HardwareRenderer: boolean isEnabled()>();

     label147:
        z13 = 0;

        z1 = 0;

        if z29 == 0 goto label106;

     label148:
        $r191 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r190 = $r191.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r190.<android.view.HardwareRenderer: void destroy(boolean)>(1);

     label149:
        z13 = 0;

        z1 = 0;

        goto label106;

     label150:
        $r57 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        i23 = virtualinvoke $r57.<android.view.Surface: int getGenerationId()>();

     label151:
        z13 = 0;

        z1 = 0;

        if i19 == i23 goto label106;

     label152:
        r20 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

     label153:
        z13 = 0;

        z1 = 0;

        if r20 != null goto label106;

     label154:
        $r159 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r21 = $r159.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

     label155:
        z13 = 0;

        z1 = 0;

        if r21 == null goto label106;

     label156:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label157:
        $r155 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r157 = $r155.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r154 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder mHolder>;

        $r156 = interfaceinvoke $r154.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        virtualinvoke $r157.<android.view.HardwareRenderer: void updateSurface(android.view.Surface)>($r156);

     label158:
        z13 = 0;

        z1 = 0;

        goto label106;

     label159:
        $r267 := @caughtexception;

        r28 = $r267;

     label160:
        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>(r28);

     label161:
        return;

     label162:
        z4 = 1;

     label163:
        if z4 == 0 goto label165;

        $r167 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        $r160 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i92 = r2.<android.view.WindowManager$LayoutParams: int format>;

        $i91 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i90 = r0.<android.view.ViewRootImpl: int mHeight>;

        r295 = (android.view.SurfaceHolder) $r160;

        interfaceinvoke $r167.<android.view.SurfaceHolder$Callback2: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>(r295, $i92, $i91, $i90);

        $r168 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r17 = virtualinvoke $r168.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        if r17 == null goto label165;

        i20 = lengthof r17;

        i21 = 0;

     label164:
        if i21 >= i20 goto label165;

        $r166 = r17[i21];

        $r165 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i94 = r2.<android.view.WindowManager$LayoutParams: int format>;

        $i93 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i95 = r0.<android.view.ViewRootImpl: int mHeight>;

        r296 = (android.view.SurfaceHolder) $r165;

        interfaceinvoke $r166.<android.view.SurfaceHolder$Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>(r296, $i94, $i93, $i95);

        i21 = i21 + 1;

        goto label164;

     label165:
        r0.<android.view.ViewRootImpl: boolean mIsCreating> = 0;

     label166:
        $r70 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r71 = $r70.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r71 == null goto label168;

        $r122 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r123 = $r122.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z73 = virtualinvoke $r123.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z73 == 0 goto label168;

        if z13 != 0 goto label167;

        $i86 = r0.<android.view.ViewRootImpl: int mWidth>;

        $r137 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r138 = $r137.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $i87 = virtualinvoke $r138.<android.view.HardwareRenderer: int getWidth()>();

        if $i86 != $i87 goto label167;

        $i84 = r0.<android.view.ViewRootImpl: int mHeight>;

        $r145 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r146 = $r145.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $i85 = virtualinvoke $r146.<android.view.HardwareRenderer: int getHeight()>();

        if $i84 == $i85 goto label168;

     label167:
        $r124 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r143 = $r124.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $i83 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i73 = r0.<android.view.ViewRootImpl: int mHeight>;

        virtualinvoke $r143.<android.view.HardwareRenderer: void setup(int,int)>($i83, $i73);

        if z13 != 0 goto label168;

        $r141 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r139 = $r141.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r142 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder mHolder>;

        $r140 = interfaceinvoke $r142.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        virtualinvoke $r139.<android.view.HardwareRenderer: void invalidate(android.view.Surface)>($r140);

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label168:
        $z56 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z56 != 0 goto label174;

        $i54 = i4 & 1;

        if $i54 == 0 goto label201;

        z21 = 1;

     label169:
        $z67 = specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>(z21);

        if $z67 != 0 goto label170;

        $i69 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i71 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        if $i69 != $i71 goto label170;

        $i70 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i72 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        if $i70 != $i72 goto label170;

        if z9 == 0 goto label174;

     label170:
        $i56 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i57 = r2.<android.view.WindowManager$LayoutParams: int width>;

        i13 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>($i56, $i57);

        $i74 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i55 = r2.<android.view.WindowManager$LayoutParams: int height>;

        i12 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>($i74, $i55);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>(i13, i12);

        i11 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        i15 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        $f3 = r2.<android.view.WindowManager$LayoutParams: float horizontalWeight>;

        b14 = $f3 cmpl 0.0F;

        z22 = 0;

        if b14 <= 0 goto label171;

        $i80 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i66 = $i80 - i11;

        $f2 = (float) $i66;

        $f0 = r2.<android.view.WindowManager$LayoutParams: float horizontalWeight>;

        $f1 = $f2 * $f0;

        $i68 = (int) $f1;

        $i67 = i11 + $i68;

        i13 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i67, 1073741824);

        z22 = 1;

     label171:
        $f4 = r2.<android.view.WindowManager$LayoutParams: float verticalWeight>;

        $b75 = $f4 cmpl 0.0F;

        if $b75 <= 0 goto label172;

        $i76 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i77 = $i76 - i15;

        $f6 = (float) $i77;

        $f5 = r2.<android.view.WindowManager$LayoutParams: float verticalWeight>;

        $f7 = $f6 * $f5;

        $i78 = (int) $f7;

        $i79 = i15 + $i78;

        i12 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i79, 1073741824);

        z22 = 1;

     label172:
        if z22 == 0 goto label173;

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>(i13, i12);

     label173:
        z5 = 1;

     label174:
        if z5 == 0 goto label207;

        $z68 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z68 != 0 goto label207;

        z12 = 1;

     label175:
        if z12 != 0 goto label176;

        $z69 = r3.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z69 == 0 goto label208;

     label176:
        z15 = 1;

     label177:
        if z12 == 0 goto label180;

        specialinvoke r0.<android.view.ViewRootImpl: void performLayout(android.view.WindowManager$LayoutParams,int,int)>(r2, i1, i2);

        $i53 = r1.<android.view.View: int mPrivateFlags>;

        $i52 = 512 & $i53;

        if $i52 == 0 goto label180;

        $r106 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        virtualinvoke r1.<android.view.View: void getLocationInWindow(int[])>($r106);

        $r118 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        $r104 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        $i63 = $r104[0];

        $r105 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        $i62 = $r105[1];

        $r103 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        $i49 = $r103[0];

        $i51 = r1.<android.view.View: int mRight>;

        $i48 = $i49 + $i51;

        $i50 = r1.<android.view.View: int mLeft>;

        $i65 = $i48 - $i50;

        $r102 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        $i61 = $r102[1];

        $i60 = r1.<android.view.View: int mBottom>;

        $i59 = $i61 + $i60;

        $i58 = r1.<android.view.View: int mTop>;

        $i64 = $i59 - $i58;

        virtualinvoke $r118.<android.graphics.Region: boolean set(int,int,int,int)>($i63, $i62, $i65, $i64);

        $r117 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        virtualinvoke r1.<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>($r117);

        $r120 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r120 == null goto label178;

        $r113 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r114 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        virtualinvoke $r113.<android.content.res.CompatibilityInfo$Translator: void translateRegionInWindowToScreen(android.graphics.Region)>($r114);

     label178:
        $r119 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        $r121 = r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion>;

        $z72 = virtualinvoke $r119.<android.graphics.Region: boolean equals(java.lang.Object)>($r121);

        if $z72 != 0 goto label180;

        $r111 = r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion>;

        $r112 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        virtualinvoke $r111.<android.graphics.Region: boolean set(android.graphics.Region)>($r112);

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label179:
        $r115 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r116 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r110 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        interfaceinvoke $r115.<android.view.IWindowSession: void setTransparentRegion(android.view.IWindow,android.graphics.Region)>($r116, $r110);

     label180:
        if z15 == 0 goto label181;

        r3.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 0;

        $r107 = r3.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r107.<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>();

     label181:
        if z8 == 0 goto label185;

        r10 = r3.<android.view.View$AttachInfo: android.view.ViewTreeObserver$InternalInsetsInfo mGivenInternalInsets>;

        virtualinvoke r10.<android.view.ViewTreeObserver$InternalInsetsInfo: void reset()>();

        $r100 = r3.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r100.<android.view.ViewTreeObserver: void dispatchOnComputeInternalInsets(android.view.ViewTreeObserver$InternalInsetsInfo)>(r10);

        $z63 = virtualinvoke r10.<android.view.ViewTreeObserver$InternalInsetsInfo: boolean isEmpty()>();

        if $z63 != 0 goto label209;

        z20 = 1;

     label182:
        r3.<android.view.View$AttachInfo: boolean mHasNonEmptyGivenInternalInsets> = z20;

        if z10 != 0 goto label183;

        $r108 = r0.<android.view.ViewRootImpl: android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets>;

        $z65 = virtualinvoke $r108.<android.view.ViewTreeObserver$InternalInsetsInfo: boolean equals(java.lang.Object)>(r10);

        if $z65 != 0 goto label185;

     label183:
        $r99 = r0.<android.view.ViewRootImpl: android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets>;

        virtualinvoke $r99.<android.view.ViewTreeObserver$InternalInsetsInfo: void set(android.view.ViewTreeObserver$InternalInsetsInfo)>(r10);

        $r98 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r98 == null goto label210;

        $r94 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r95 = r10.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect contentInsets>;

        r13 = virtualinvoke $r94.<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedContentInsets(android.graphics.Rect)>($r95);

        $r92 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r93 = r10.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect visibleInsets>;

        r14 = virtualinvoke $r92.<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedVisibleInsets(android.graphics.Rect)>($r93);

        $r109 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r91 = r10.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Region touchableRegion>;

        r11 = virtualinvoke $r109.<android.content.res.CompatibilityInfo$Translator: android.graphics.Region getTranslatedTouchableArea(android.graphics.Region)>($r91);

     label184:
        $r96 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r97 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $i47 = r10.<android.view.ViewTreeObserver$InternalInsetsInfo: int mTouchableInsets>;

        interfaceinvoke $r96.<android.view.IWindowSession: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>($r97, $i47, r13, r14, r11);

     label185:
        $z57 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z57 == 0 goto label211;

        $r84 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r84 == null goto label186;

        $r85 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z59 = virtualinvoke $r85.<android.view.View: boolean hasFocus()>();

        if $z59 != 0 goto label186;

        $r101 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r101.<android.view.View: boolean requestFocus(int)>(2);

     label186:
        i10 = i4 & 8;

        z17 = 0;

        if i10 == 0 goto label187;

        r0.<android.view.ViewRootImpl: boolean mWindowsAnimating> = 1;

     label187:
        r0.<android.view.ViewRootImpl: boolean mFirst> = 0;

        r0.<android.view.ViewRootImpl: boolean mWillDrawSoon> = 0;

        r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded> = 0;

        r0.<android.view.ViewRootImpl: int mViewVisibility> = i0;

        $r66 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z54 = $r66.<android.view.View$AttachInfo: boolean mHasWindowFocus>;

        if $z54 == 0 goto label189;

        $z62 = specialinvoke r0.<android.view.ViewRootImpl: boolean isInLocalFocusMode()>();

        if $z62 != 0 goto label189;

        $r90 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i46 = $r90.<android.view.WindowManager$LayoutParams: int flags>;

        z18 = staticinvoke <android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)>($i46);

        $z61 = r0.<android.view.ViewRootImpl: boolean mLastWasImTarget>;

        if z18 == $z61 goto label189;

        r0.<android.view.ViewRootImpl: boolean mLastWasImTarget> = z18;

        r7 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager peekInstance()>();

        if r7 == null goto label189;

        if z18 == 0 goto label189;

        $r88 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke r7.<android.view.inputmethod.InputMethodManager: void startGettingWindowFocus(android.view.View)>($r88);

        r8 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r89 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r9 = virtualinvoke $r89.<android.view.View: android.view.View findFocus()>();

        $r86 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i9 = $r86.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $z60 = r0.<android.view.ViewRootImpl: boolean mHasHadWindowFocus>;

        if $z60 != 0 goto label212;

        z19 = 1;

     label188:
        $r87 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i45 = $r87.<android.view.WindowManager$LayoutParams: int flags>;

        virtualinvoke r7.<android.view.inputmethod.InputMethodManager: void onWindowFocus(android.view.View,android.view.View,int,boolean,int)>(r8, r9, i9, z19, $i45);

     label189:
        $i39 = i4 & 2;

        if $i39 == 0 goto label190;

        r0.<android.view.ViewRootImpl: boolean mReportNextDraw> = 1;

     label190:
        $r65 = r3.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        $z55 = virtualinvoke $r65.<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>();

        if $z55 != 0 goto label191;

        if i0 == 0 goto label213;

     label191:
        z16 = 1;

     label192:
        if z16 != 0 goto label217;

        if z1 != 0 goto label217;

        if z17 == 0 goto label193;

        $z58 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z58 == 0 goto label216;

     label193:
        $r80 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if $r80 == null goto label215;

        $r79 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $i44 = virtualinvoke $r79.<java.util.ArrayList: int size()>();

        if $i44 <= 0 goto label215;

        i7 = 0;

     label194:
        $r75 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        i8 = virtualinvoke $r75.<java.util.ArrayList: int size()>();

        if i7 >= i8 goto label214;

        $r73 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $r72 = virtualinvoke $r73.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r74 = (android.animation.LayoutTransition) $r72;

        virtualinvoke $r74.<android.animation.LayoutTransition: void startChangingAnimations()>();

        i7 = i7 + 1;

        goto label194;

     label195:
        if z11 == 0 goto label166;

        $r125 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r125.<com.android.internal.view.BaseSurfaceHolder: void ungetCallbacks()>();

        $r136 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r16 = virtualinvoke $r136.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        $r134 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        $r135 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r297 = (android.view.SurfaceHolder) $r135;

        interfaceinvoke $r134.<android.view.SurfaceHolder$Callback2: void surfaceDestroyed(android.view.SurfaceHolder)>(r297);

        if r16 == null goto label197;

        i17 = lengthof r16;

        i16 = 0;

     label196:
        if i16 >= i17 goto label197;

        $r164 = r16[i16];

        $r163 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r298 = (android.view.SurfaceHolder) $r163;

        interfaceinvoke $r164.<android.view.SurfaceHolder$Callback: void surfaceDestroyed(android.view.SurfaceHolder)>(r298);

        i16 = i16 + 1;

        goto label196;

     label197:
        $r133 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r132 = $r133.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r132.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label198:
        $r130 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r292 = new android.view.Surface;

        specialinvoke r292.<android.view.Surface: void <init>()>();

        $r130.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface> = r292;

     label199:
        $r161 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r162 = $r161.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r162.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label166;

     label200:
        $r284 := @caughtexception;

        r18 = $r284;

        $r287 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r286 = $r287.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r286.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r18;

     label201:
        z21 = 0;

        goto label169;

     label202:
        $i132 = r3.<android.view.View$AttachInfo: int mWindowLeft>;

        $i133 = r5.<android.graphics.Rect: int left>;

        if $i132 != $i133 goto label203;

        $i130 = r3.<android.view.View$AttachInfo: int mWindowTop>;

        $i131 = r5.<android.graphics.Rect: int top>;

        if $i130 == $i131 goto label206;

     label203:
        z32 = 1;

     label204:
        z10 = 0;

        z1 = 0;

        i4 = 0;

        if z32 == 0 goto label174;

        $r229 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r229 == null goto label205;

        $r228 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r228.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWinFrame(android.graphics.Rect)>(r5);

     label205:
        $i134 = r5.<android.graphics.Rect: int left>;

        r3.<android.view.View$AttachInfo: int mWindowLeft> = $i134;

        $i129 = r5.<android.graphics.Rect: int top>;

        r3.<android.view.View$AttachInfo: int mWindowTop> = $i129;

        z10 = 0;

        z1 = 0;

        i4 = 0;

        goto label174;

     label206:
        z32 = 0;

        goto label204;

     label207:
        z12 = 0;

        goto label175;

     label208:
        z15 = 0;

        goto label177;

     label209:
        z20 = 0;

        goto label182;

     label210:
        r13 = r10.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect contentInsets>;

        r14 = r10.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect visibleInsets>;

        r11 = r10.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Region touchableRegion>;

        goto label184;

     label211:
        z14 = r0.<android.view.ViewRootImpl: boolean mWindowsAnimating>;

        z17 = 0;

        if z14 == 0 goto label187;

        z17 = 1;

        goto label187;

     label212:
        z19 = 0;

        goto label188;

     label213:
        z16 = 0;

        goto label192;

     label214:
        $r76 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        virtualinvoke $r76.<java.util.ArrayList: void clear()>();

     label215:
        specialinvoke r0.<android.view.ViewRootImpl: void performDraw()>();

     label216:
        r0.<android.view.ViewRootImpl: boolean mIsInTraversal> = 0;

        return;

     label217:
        if i0 != 0 goto label218;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        goto label216;

     label218:
        $r68 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if $r68 == null goto label216;

        $r67 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $i40 = virtualinvoke $r67.<java.util.ArrayList: int size()>();

        if $i40 <= 0 goto label216;

        i6 = 0;

     label219:
        $r81 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        i5 = virtualinvoke $r81.<java.util.ArrayList: int size()>();

        if i6 >= i5 goto label220;

        $r82 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $r78 = virtualinvoke $r82.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r77 = (android.animation.LayoutTransition) $r78;

        virtualinvoke $r77.<android.animation.LayoutTransition: void endChangingAnimations()>();

        i6 = i6 + 1;

        goto label219;

     label220:
        $r83 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        virtualinvoke $r83.<java.util.ArrayList: void clear()>();

        goto label216;

     label221:
        $r288 := @caughtexception;

        goto label185;

     label222:
        $r289 := @caughtexception;

        goto label180;

        catch android.os.RemoteException from label054 to label055 with label128;
        catch android.os.RemoteException from label056 to label057 with label128;
        catch android.os.RemoteException from label057 to label058 with label128;
        catch android.os.RemoteException from label059 to label060 with label128;
        catch android.os.RemoteException from label060 to label061 with label128;
        catch android.os.RemoteException from label062 to label063 with label128;
        catch android.os.RemoteException from label064 to label065 with label128;
        catch android.os.RemoteException from label067 to label068 with label128;
        catch android.os.RemoteException from label069 to label070 with label128;
        catch android.os.RemoteException from label071 to label072 with label128;
        catch android.os.RemoteException from label073 to label074 with label128;
        catch android.os.RemoteException from label075 to label076 with label128;
        catch java.lang.OutOfMemoryError from label076 to label077 with label122;
        catch java.lang.Throwable from label076 to label077 with label134;
        catch java.lang.OutOfMemoryError from label077 to label078 with label122;
        catch java.lang.Throwable from label077 to label078 with label134;
        catch java.lang.OutOfMemoryError from label080 to label081 with label122;
        catch java.lang.Throwable from label080 to label081 with label134;
        catch java.lang.OutOfMemoryError from label081 to label082 with label122;
        catch java.lang.Throwable from label081 to label082 with label134;
        catch java.lang.OutOfMemoryError from label082 to label083 with label122;
        catch java.lang.Throwable from label082 to label083 with label134;
        catch java.lang.OutOfMemoryError from label084 to label085 with label122;
        catch java.lang.Throwable from label084 to label085 with label134;
        catch java.lang.OutOfMemoryError from label085 to label086 with label122;
        catch java.lang.Throwable from label085 to label086 with label134;
        catch java.lang.OutOfMemoryError from label087 to label088 with label122;
        catch java.lang.Throwable from label087 to label088 with label134;
        catch android.os.RemoteException from label088 to label089 with label128;
        catch android.os.RemoteException from label090 to label090 with label128;
        catch android.os.RemoteException from label090 to label091 with label128;
        catch android.os.RemoteException from label092 to label093 with label128;
        catch android.os.RemoteException from label095 to label096 with label128;
        catch android.os.RemoteException from label096 to label097 with label128;
        catch android.os.RemoteException from label098 to label099 with label128;
        catch android.os.RemoteException from label100 to label101 with label128;
        catch android.os.RemoteException from label102 to label103 with label128;
        catch android.view.Surface$OutOfResourcesException from label104 to label105 with label139;
        catch android.os.RemoteException from label104 to label105 with label128;
        catch java.lang.OutOfMemoryError from label119 to label120 with label122;
        catch java.lang.Throwable from label119 to label120 with label134;
        catch java.lang.OutOfMemoryError from label120 to label121 with label122;
        catch java.lang.Throwable from label120 to label121 with label134;
        catch java.lang.Throwable from label123 to label124 with label134;
        catch android.os.RemoteException from label124 to label125 with label128;
        catch android.os.RemoteException from label126 to label127 with label128;
        catch java.lang.OutOfMemoryError from label130 to label131 with label122;
        catch java.lang.Throwable from label130 to label131 with label134;
        catch java.lang.OutOfMemoryError from label132 to label133 with label122;
        catch java.lang.Throwable from label132 to label133 with label134;
        catch android.os.RemoteException from label135 to label136 with label128;
        catch android.os.RemoteException from label137 to label138 with label128;
        catch android.os.RemoteException from label138 to label139 with label128;
        catch android.os.RemoteException from label140 to label141 with label128;
        catch android.os.RemoteException from label142 to label143 with label128;
        catch android.os.RemoteException from label143 to label144 with label128;
        catch android.os.RemoteException from label144 to label145 with label128;
        catch android.os.RemoteException from label146 to label147 with label128;
        catch android.os.RemoteException from label148 to label149 with label128;
        catch android.os.RemoteException from label150 to label151 with label128;
        catch android.os.RemoteException from label152 to label153 with label128;
        catch android.os.RemoteException from label154 to label155 with label128;
        catch android.os.RemoteException from label156 to label157 with label128;
        catch android.view.Surface$OutOfResourcesException from label157 to label158 with label159;
        catch android.os.RemoteException from label157 to label158 with label128;
        catch android.os.RemoteException from label160 to label161 with label128;
        catch android.os.RemoteException from label179 to label180 with label222;
        catch android.os.RemoteException from label184 to label185 with label221;
        catch java.lang.Throwable from label198 to label199 with label200;
    }

    private void postSendWindowContentChangedCallback(android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        int i0;
        android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent $r2, $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        if $r2 != null goto label1;

        $r4 = new android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent;

        specialinvoke $r4.<android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$1)>(r0, null);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent> = $r4;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        virtualinvoke $r3.<android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent: void runOrPost(android.view.View,int)>(r1, i0);

        return;
    }

    private void profileRendering(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2;
        android.view.Choreographer$FrameCallback $r1, $r2, $r3, $r6;
        android.view.Choreographer $r4, $r7;
        android.view.ViewRootImpl$3 $r5;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.ViewRootImpl: boolean mProfileRendering>;

        if $z1 == 0 goto label3;

        r0.<android.view.ViewRootImpl: boolean mRenderProfilingEnabled> = z0;

        $r1 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        if $r1 == null goto label1;

        $r7 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r6 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        virtualinvoke $r7.<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>($r6);

     label1:
        $z2 = r0.<android.view.ViewRootImpl: boolean mRenderProfilingEnabled>;

        if $z2 == 0 goto label4;

        $r2 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        if $r2 != null goto label2;

        $r5 = new android.view.ViewRootImpl$3;

        specialinvoke $r5.<android.view.ViewRootImpl$3: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler> = $r5;

     label2:
        $r4 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        virtualinvoke $r4.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r3);

     label3:
        return;

     label4:
        r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler> = null;

        return;
    }

    private void recycleQueuedInputEvent(android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$QueuedInputEvent;

        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent> = null;

        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver> = null;

        $i0 = r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize>;

        if $i0 >= 10 goto label1;

        $i1 = r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize>;

        $i2 = 1 + $i1;

        r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize> = $i2;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool>;

        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = $r2;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool> = r1;

     label1:
        return;
    }

    private int relayoutWindow(android.view.WindowManager$LayoutParams, int, boolean) throws android.os.RemoteException
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        int i0, i1, i2, i3, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean z0, z1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        android.view.IWindowSession r2;
        android.view.ViewRootImpl$W r3;
        byte b4;
        android.content.res.CompatibilityInfo$Translator r4, $r15, $r17, $r19, $r21, $r23, $r29;
        android.view.View$AttachInfo $r5;
        android.view.View $r6, $r8, $r24;
        android.content.res.Configuration $r7, $r11;
        android.view.Surface $r9;
        android.graphics.Rect $r10, $r12, $r13, $r14, $r16, $r18, $r20, $r22;
        java.lang.StringBuilder $r25, $r26, $r28;
        java.lang.String $r27;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        f0 = $r5.<android.view.View$AttachInfo: float mApplicationScale>;

        z1 = 0;

        if r1 == null goto label1;

        r4 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        z1 = 0;

        if r4 == null goto label1;

        z1 = 1;

        virtualinvoke r1.<android.view.WindowManager$LayoutParams: void backup()>();

        $r29 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r29.<android.content.res.CompatibilityInfo$Translator: void translateWindowLayout(android.view.WindowManager$LayoutParams)>(r1);

     label1:
        if r1 == null goto label2;

     label2:
        $r7 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration>;

        $r7.<android.content.res.Configuration: int seq> = 0;

        if r1 == null goto label3;

        $i8 = r0.<android.view.ViewRootImpl: int mOrigWindowType>;

        $i10 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i8 == $i10 goto label3;

        $i9 = r0.<android.view.ViewRootImpl: int mTargetSdkVersion>;

        if $i9 >= 14 goto label3;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Window type can not be changed after the window is added; ignoring change of ");

        $r24 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ViewRootImpl", $r27);

        $i11 = r0.<android.view.ViewRootImpl: int mOrigWindowType>;

        r1.<android.view.WindowManager$LayoutParams: int type> = $i11;

     label3:
        r2 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        i1 = r0.<android.view.ViewRootImpl: int mSeq>;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i6 = virtualinvoke $r6.<android.view.View: int getMeasuredWidth()>();

        $f2 = (float) $i6;

        $f1 = f0 * $f2;

        $f3 = 0.5F + $f1;

        i2 = (int) $f3;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i7 = virtualinvoke $r8.<android.view.View: int getMeasuredHeight()>();

        $f5 = (float) $i7;

        $f4 = f0 * $f5;

        $f6 = 0.5F + $f4;

        i3 = (int) $f6;

        if z0 == 0 goto label7;

        b4 = 1;

     label4:
        $r12 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        $r14 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        $r13 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        $r10 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        $r11 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        i5 = interfaceinvoke r2.<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.content.res.Configuration,android.view.Surface)>(r3, i1, r1, i2, i3, i0, b4, $r12, $r14, $r13, $r10, $r11, $r9);

        if z1 == 0 goto label5;

        virtualinvoke r1.<android.view.WindowManager$LayoutParams: void restore()>();

     label5:
        $r17 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r17 == null goto label6;

        $r15 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r18 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        virtualinvoke $r15.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWinFrame(android.graphics.Rect)>($r18);

        $r21 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r16 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        virtualinvoke $r21.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>($r16);

        $r19 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r22 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        virtualinvoke $r19.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>($r22);

        $r23 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r20 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        virtualinvoke $r23.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>($r20);

     label6:
        return i5;

     label7:
        b4 = 0;

        goto label4;
    }

    private void removeSendWindowContentChangedCallback()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent $r1, $r2;
        android.view.ViewRootImpl$ViewRootHandler $r3;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        if $r1 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: void removeCallbacks(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    private void scheduleProcessInputEvents()
    {
        android.view.ViewRootImpl r0;
        android.os.Message r1;
        boolean $z0;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled>;

        if $z0 != 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled> = 1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r1 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(19);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

     label1:
        return;
    }

    private void trackFPS()
    {
        android.view.ViewRootImpl r0;
        long l0, l1, l2, $l3, $l8, $l9;
        java.lang.String r1, $r6, $r11;
        float f0, $f1, $f2, $f3;
        byte $b4, $b10;
        int $i5, $i6, $i7, $i12;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r12, $r13;

        r0 := @this: android.view.ViewRootImpl;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = r0.<android.view.ViewRootImpl: long mFpsStartTime>;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label2;

        r0.<android.view.ViewRootImpl: long mFpsPrevTime> = l0;

        r0.<android.view.ViewRootImpl: long mFpsStartTime> = l0;

        r0.<android.view.ViewRootImpl: int mFpsNumFrames> = 0;

     label1:
        return;

     label2:
        $i5 = r0.<android.view.ViewRootImpl: int mFpsNumFrames>;

        $i6 = 1 + $i5;

        r0.<android.view.ViewRootImpl: int mFpsNumFrames> = $i6;

        $i7 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $l8 = r0.<android.view.ViewRootImpl: long mFpsPrevTime>;

        l1 = l0 - $l8;

        $l9 = r0.<android.view.ViewRootImpl: long mFpsStartTime>;

        l2 = l0 - $l9;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tFrame time:\t");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ViewRootImpl", $r6);

        r0.<android.view.ViewRootImpl: long mFpsPrevTime> = l0;

        $b10 = l2 cmp 1000L;

        if $b10 <= 0 goto label1;

        $i12 = r0.<android.view.ViewRootImpl: int mFpsNumFrames>;

        $f1 = (float) $i12;

        $f2 = 1000.0F * $f1;

        $f3 = (float) l2;

        f0 = $f2 / $f3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tFPS:\t");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ViewRootImpl", $r11);

        r0.<android.view.ViewRootImpl: long mFpsStartTime> = l0;

        r0.<android.view.ViewRootImpl: int mFpsNumFrames> = 0;

        return;
    }

    public boolean attachFunctor(int)
    {
        android.view.ViewRootImpl r0;
        int i0;
        android.view.View$AttachInfo $r1, $r3, $r5, $r6;
        android.view.HardwareRenderer $r2, $r4, $r7;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z0 = virtualinvoke $r4.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r5.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z1 = virtualinvoke $r7.<android.view.HardwareRenderer: boolean attachFunctor(android.view.View$AttachInfo,int)>($r6, i0);

        return $z1;

     label1:
        return 0;
    }

    public void bringChildToFront(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        return;
    }

    public boolean canResolveLayoutDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean canResolveTextAlignment()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean canResolveTextDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public void cancelInvalidate(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int,java.lang.Object)>(1, r1);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int,java.lang.Object)>(2, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable>;

        virtualinvoke $r4.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void removeView(android.view.View)>(r1);

        return;
    }

    void changeCanvasOpacity(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("changeCanvasOpacity: opaque=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ViewRootImpl", $r4);

        return;
    }

    void checkThread()
    {
        android.view.ViewRootImpl r0;
        java.lang.Thread $r1, $r2;
        android.view.ViewRootImpl$CalledFromWrongThreadException $r3;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: java.lang.Thread mThread>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r1 == $r2 goto label1;

        $r3 = new android.view.ViewRootImpl$CalledFromWrongThreadException;

        specialinvoke $r3.<android.view.ViewRootImpl$CalledFromWrongThreadException: void <init>(java.lang.String)>("Only the original thread that created a view hierarchy can touch its views.");

        throw $r3;

     label1:
        return;
    }

    public void childDrawableStateChanged(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        return;
    }

    public void childHasTransientStateChanged(android.view.View, boolean)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        return;
    }

    public void clearChildFocus(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public void createContextMenu(android.view.ContextMenu)
    {
        android.view.ViewRootImpl r0;
        android.view.ContextMenu r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ContextMenu;

        return;
    }

    public void debug()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r1.<android.view.View: void debug()>();

        return;
    }

    void destroyHardwareLayers()
    {
        android.view.ViewRootImpl r0;
        java.lang.Thread $r1, $r2;
        android.view.View$AttachInfo $r3, $r5, $r7, $r10, $r12;
        android.view.HardwareRenderer $r4, $r6, $r9, $r11, $r13;
        boolean $z0, $z1;
        android.view.View $r8;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: java.lang.Thread mThread>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r1 == $r2 goto label2;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r11 = $r10.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r11 == null goto label1;

        $r12 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r13 = $r12.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z1 = virtualinvoke $r13.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z1 == 0 goto label1;

        staticinvoke <android.view.HardwareRenderer: void trimMemory(int)>(60);

     label1:
        return;

     label2:
        virtualinvoke r0.<android.view.ViewRootImpl: void invalidateDisplayLists()>();

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r4 == null goto label1;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z0 = virtualinvoke $r6.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r9 = $r7.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r9.<android.view.HardwareRenderer: void destroyLayers(android.view.View)>($r8);

        return;
    }

    void destroyHardwareResources()
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo $r1, $r3, $r6;
        android.view.HardwareRenderer $r2, $r5, $r7;
        android.view.View $r4;

        r0 := @this: android.view.ViewRootImpl;

        virtualinvoke r0.<android.view.ViewRootImpl: void invalidateDisplayLists()>();

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r3.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r5.<android.view.HardwareRenderer: void destroyHardwareResources(android.view.View)>($r4);

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r7.<android.view.HardwareRenderer: void destroy(boolean)>(0);

     label1:
        return;
    }

    public void detachFunctor(int)
    {
        android.view.ViewRootImpl r0;
        int i0;
        android.view.View$AttachInfo $r1, $r3;
        android.view.HardwareRenderer $r2, $r4;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r4.<android.view.HardwareRenderer: void detachFunctor(int)>(i0);

     label1:
        return;
    }

    boolean die(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z3;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r7;
        android.view.WindowManager$LayoutParams $r5;
        java.lang.CharSequence $r6;
        java.lang.String $r8;
        android.view.ViewRootImpl$ViewRootHandler $r9;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z3 = r0.<android.view.ViewRootImpl: boolean mIsInTraversal>;

        if $z3 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void doDie()>();

        return 0;

     label1:
        $z1 = r0.<android.view.ViewRootImpl: boolean mIsDrawing>;

        if $z1 != 0 goto label3;

        specialinvoke r0.<android.view.ViewRootImpl: void destroyHardwareRenderer()>();

     label2:
        $r9 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r9.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(3);

        return 1;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to destroy the window while drawing!\n  window=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", title=");

        $r5 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r6 = virtualinvoke $r5.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ViewRootImpl", $r8);

        goto label2;
    }

    public void dispatchAppVisibility(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;
        android.os.Message r1;
        byte b0;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r1 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(8);

        if z0 == 0 goto label2;

        b0 = 1;

     label1:
        r1.<android.os.Message: int arg1> = b0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public void dispatchCheckFocus()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $z0 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: boolean hasMessages(int)>(13);

        if $z0 != 0 goto label1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(13);

     label1:
        return;
    }

    public void dispatchCloseSystemDialogs(java.lang.String)
    {
        android.view.ViewRootImpl r0;
        java.lang.String r1;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        r2.<android.os.Message: int what> = 14;

        r2.<android.os.Message: java.lang.Object obj> = r1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    void dispatchDetachedFromWindow()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r2, $r6, $r20, $r26;
        android.view.ViewRootImpl$AccessibilityInteractionConnectionManager $r3, $r4;
        android.view.accessibility.AccessibilityManager $r5;
        android.view.View$AttachInfo $r7, $r8, $r22, $r23, $r24, $r29, $r31;
        android.view.Surface $r9;
        android.view.InputQueue$Callback $r10, $r18;
        android.view.ViewRootImpl$WindowInputEventReceiver $r11, $r17;
        android.view.ViewRootImpl$W $r12;
        android.view.IWindowSession $r13;
        android.view.InputChannel $r14, $r15;
        android.view.InputQueue $r16, $r19, $r21;
        android.view.HardwareRenderer $r25, $r28, $r30;
        android.view.ViewTreeObserver $r27;
        boolean $z2;
        android.os.RemoteException $r32;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 == null goto label2;

        $r20 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r23 = $r20.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r23 == null goto label2;

        $r22 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r25 = $r22.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r25 == null goto label1;

        $r29 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r28 = $r29.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z2 = virtualinvoke $r28.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z2 == 0 goto label1;

        $r31 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r30 = $r31.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r30.<android.view.HardwareRenderer: boolean validate()>();

     label1:
        $r24 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r27 = $r24.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r27.<android.view.ViewTreeObserver: void dispatchOnWindowAttachedChange(boolean)>(0);

        $r26 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r26.<android.view.View: void dispatchDetachedFromWindow()>();

     label2:
        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        virtualinvoke $r3.<android.view.ViewRootImpl$AccessibilityInteractionConnectionManager: void ensureNoConnection()>();

        $r5 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        virtualinvoke $r5.<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>($r4);

        specialinvoke r0.<android.view.ViewRootImpl: void removeSendWindowContentChangedCallback()>();

        specialinvoke r0.<android.view.ViewRootImpl: void destroyHardwareRenderer()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        $r6 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r6.<android.view.View: void assignParent(android.view.ViewParent)>(null);

        r0.<android.view.ViewRootImpl: android.view.View mView> = null;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7.<android.view.View$AttachInfo: android.view.View mRootView> = null;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8.<android.view.View$AttachInfo: android.view.Surface mSurface> = null;

        $r9 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r9.<android.view.Surface: void release()>();

        $r10 = r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback>;

        if $r10 == null goto label3;

        $r16 = r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue>;

        if $r16 == null goto label3;

        $r18 = r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback>;

        $r19 = r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue>;

        interfaceinvoke $r18.<android.view.InputQueue$Callback: void onInputQueueDestroyed(android.view.InputQueue)>($r19);

        $r21 = r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue>;

        virtualinvoke $r21.<android.view.InputQueue: void dispose()>();

        r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback> = null;

        r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue> = null;

     label3:
        $r11 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver>;

        if $r11 == null goto label4;

        $r17 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver>;

        virtualinvoke $r17.<android.view.ViewRootImpl$WindowInputEventReceiver: void dispose()>();

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver> = null;

     label4:
        $r13 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r12 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r13.<android.view.IWindowSession: void remove(android.view.IWindow)>($r12);

     label5:
        $r15 = r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel>;

        if $r15 == null goto label6;

        $r14 = r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel>;

        virtualinvoke $r14.<android.view.InputChannel: void dispose()>();

        r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel> = null;

     label6:
        virtualinvoke r0.<android.view.ViewRootImpl: void unscheduleTraversals()>();

        return;

     label7:
        $r32 := @caughtexception;

        goto label5;

        catch android.os.RemoteException from label4 to label5 with label7;
    }

    public void dispatchDoneAnimating()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(22);

        return;
    }

    public void dispatchDragEvent(android.view.DragEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.DragEvent r1;
        byte b0;
        android.os.Message r2;
        int $i1;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4, $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.DragEvent;

        $i1 = virtualinvoke r1.<android.view.DragEvent: int getAction()>();

        if $i1 != 2 goto label2;

        b0 = 16;

        $r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r5.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int)>(16);

     label1:
        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(b0, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;

     label2:
        b0 = 15;

        goto label1;
    }

    public void dispatchFinishInputConnection(android.view.inputmethod.InputConnection)
    {
        android.view.ViewRootImpl r0;
        android.view.inputmethod.InputConnection r1;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.inputmethod.InputConnection;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(12, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    void dispatchFlushHardwareLayerUpdates()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2, $r3;
        android.os.Message $r4;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int)>(25);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r4 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(25);

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessageAtFrontOfQueue(android.os.Message)>($r4);

        return;
    }

    public void dispatchGetNewSurface()
    {
        android.view.ViewRootImpl r0;
        android.os.Message r1;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r1 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(9);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void dispatchInputEvent(android.view.InputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(7, r1);

        virtualinvoke r2.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void dispatchInvalidateDelayed(android.view.View, long)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        long l0;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        l0 := @parameter1: long;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessageDelayed(android.os.Message,long)>(r2, l0);

        return;
    }

    public void dispatchInvalidateOnAnimation(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable>;

        virtualinvoke $r2.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void addView(android.view.View)>(r1);

        return;
    }

    public void dispatchInvalidateRectDelayed(android.view.View$AttachInfo$InvalidateInfo, long)
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo$InvalidateInfo r1;
        long l0;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View$AttachInfo$InvalidateInfo;

        l0 := @parameter1: long;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessageDelayed(android.os.Message,long)>(r2, l0);

        return;
    }

    public void dispatchInvalidateRectOnAnimation(android.view.View$AttachInfo$InvalidateInfo)
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo$InvalidateInfo r1;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View$AttachInfo$InvalidateInfo;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable>;

        virtualinvoke $r2.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void addViewRect(android.view.View$AttachInfo$InvalidateInfo)>(r1);

        return;
    }

    public void dispatchKeyFromIme(android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.KeyEvent r1;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.KeyEvent;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(11, r1);

        virtualinvoke r2.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void dispatchMoved(int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1;
        android.graphics.PointF r1, $r6;
        android.os.Message r2;
        android.content.res.CompatibilityInfo$Translator $r3, $r7;
        android.view.ViewRootImpl$ViewRootHandler $r4, $r5;
        float $f0, $f1, $f2, $f3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r3 == null goto label1;

        $r6 = new android.graphics.PointF;

        $f1 = (float) i0;

        $f0 = (float) i1;

        specialinvoke $r6.<android.graphics.PointF: void <init>(float,float)>($f1, $f0);

        r1 = $r6;

        $r7 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r7.<android.content.res.CompatibilityInfo$Translator: void translatePointInScreenToAppWindow(android.graphics.PointF)>(r1);

        $f2 = r1.<android.graphics.PointF: float x>;

        $d0 = (double) $f2;

        $d1 = 0.5 + $d0;

        i0 = (int) $d1;

        $f3 = r1.<android.graphics.PointF: float y>;

        $d3 = (double) $f3;

        $d2 = 0.5 + $d3;

        i1 = (int) $d2;

     label1:
        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,int,int)>(24, i0, i1);

        $r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r5.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void dispatchResized(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, boolean, android.content.res.Configuration)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1, r2, r3, r4, $r11, $r12, $r14, $r15;
        boolean z0, z1;
        android.content.res.Configuration r5, $r13;
        android.view.ViewRootImpl$ViewRootHandler r6, $r10;
        byte b0;
        android.os.Message r7;
        com.android.internal.os.SomeArgs r8;
        android.content.res.CompatibilityInfo$Translator $r9, $r16, $r17, $r18, $r19;
        int $i1, $i2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        r4 := @parameter3: android.graphics.Rect;

        z0 := @parameter4: boolean;

        r5 := @parameter5: android.content.res.Configuration;

        r6 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        if z0 == 0 goto label09;

        b0 = 5;

     label01:
        r7 = virtualinvoke r6.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(b0);

        $r9 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r9 == null goto label02;

        $r17 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r17.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>(r1);

        $r16 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r16.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>(r2);

        $r19 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r19.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>(r3);

        $r18 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r18.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>(r4);

     label02:
        r8 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Process: int myPid()>();

        if $i1 != $i2 goto label10;

        z1 = 1;

     label03:
        if z1 == 0 goto label04;

        $r14 = new android.graphics.Rect;

        specialinvoke $r14.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r1);

        r1 = $r14;

     label04:
        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = r1;

        if z1 == 0 goto label05;

        $r15 = new android.graphics.Rect;

        specialinvoke $r15.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r3);

        r3 = $r15;

     label05:
        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = r3;

        if z1 == 0 goto label06;

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r4);

        r4 = $r12;

     label06:
        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg3> = r4;

        if z1 == 0 goto label07;

        if r5 == null goto label07;

        $r13 = new android.content.res.Configuration;

        specialinvoke $r13.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>(r5);

        r5 = $r13;

     label07:
        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg4> = r5;

        if z1 == 0 goto label08;

        $r11 = new android.graphics.Rect;

        specialinvoke $r11.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r2);

        r2 = $r11;

     label08:
        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg5> = r2;

        r7.<android.os.Message: java.lang.Object obj> = r8;

        $r10 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r10.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r7);

        return;

     label09:
        b0 = 4;

        goto label01;

     label10:
        z1 = 0;

        goto label03;
    }

    public void dispatchScreenStateChange(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;
        android.os.Message r1;
        byte b0;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r1 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(20);

        if z0 == 0 goto label2;

        b0 = 1;

     label1:
        r1.<android.os.Message: int arg1> = b0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public void dispatchSystemUiVisibilityChanged(int, int, int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1, i2, i3;
        android.view.ViewRootImpl$SystemUiVisibilityInfo r1, $r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;
        android.os.Message $r5;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r2 = new android.view.ViewRootImpl$SystemUiVisibilityInfo;

        specialinvoke $r2.<android.view.ViewRootImpl$SystemUiVisibilityInfo: void <init>()>();

        r1 = $r2;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int seq> = i0;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility> = i1;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localValue> = i2;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges> = i3;

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r5 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(17, r1);

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>($r5);

        return;
    }

    public void dispatchUnhandledKey(android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.KeyEvent r1, r3;
        android.view.KeyCharacterMap$FallbackAction r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        android.view.KeyCharacterMap $r4;
        long $l6, $l7;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.KeyEvent;

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i2 = 1024 & $i1;

        if $i2 != 0 goto label1;

        $r4 = virtualinvoke r1.<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>();

        $i3 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $i4 = virtualinvoke r1.<android.view.KeyEvent: int getMetaState()>();

        r2 = virtualinvoke $r4.<android.view.KeyCharacterMap: android.view.KeyCharacterMap$FallbackAction getFallbackAction(int,int)>($i3, $i4);

        if r2 == null goto label1;

        $i5 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        i0 = 1024 | $i5;

        $l6 = virtualinvoke r1.<android.view.KeyEvent: long getDownTime()>();

        $l7 = virtualinvoke r1.<android.view.KeyEvent: long getEventTime()>();

        $i9 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        $i8 = r2.<android.view.KeyCharacterMap$FallbackAction: int keyCode>;

        $i11 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        $i10 = r2.<android.view.KeyCharacterMap$FallbackAction: int metaState>;

        $i13 = virtualinvoke r1.<android.view.KeyEvent: int getDeviceId()>();

        $i12 = virtualinvoke r1.<android.view.KeyEvent: int getScanCode()>();

        $i14 = virtualinvoke r1.<android.view.KeyEvent: int getSource()>();

        r3 = staticinvoke <android.view.KeyEvent: android.view.KeyEvent obtain(long,long,int,int,int,int,int,int,int,int,java.lang.String)>($l6, $l7, $i9, $i8, $i11, $i10, $i13, $i12, i0, $i14, null);

        virtualinvoke r2.<android.view.KeyCharacterMap$FallbackAction: void recycle()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchInputEvent(android.view.InputEvent)>(r3);

     label1:
        return;
    }

    void disposeResizeBuffer()
    {
        android.view.ViewRootImpl r0;
        android.view.HardwareLayer $r1;
        android.view.View$AttachInfo $r2, $r4;
        android.view.HardwareRenderer $r3, $r6;
        android.view.ViewRootImpl$1 $r5;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r4.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r5 = new android.view.ViewRootImpl$1;

        specialinvoke $r5.<android.view.ViewRootImpl$1: void <init>(android.view.ViewRootImpl)>(r0);

        virtualinvoke $r6.<android.view.HardwareRenderer: boolean safelyRun(java.lang.Runnable)>($r5);

     label1:
        return;
    }

    void doConsumeBatchedInput(long)
    {
        android.view.ViewRootImpl r0;
        long l0;
        boolean $z0, $z1;
        android.view.ViewRootImpl$WindowInputEventReceiver $r1, $r2;

        r0 := @this: android.view.ViewRootImpl;

        l0 := @parameter0: long;

        $z0 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled>;

        if $z0 == 0 goto label2;

        r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled> = 0;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver>;

        $z1 = virtualinvoke $r2.<android.view.ViewRootImpl$WindowInputEventReceiver: boolean consumeBatchedInputEvents(long)>(l0);

        if $z1 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleConsumeBatchedInput()>();

     label1:
        virtualinvoke r0.<android.view.ViewRootImpl: void doProcessInputEvents()>();

     label2:
        return;
    }

    void doDie()
    {
        android.view.ViewRootImpl r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.lang.Throwable r1, $r11;
        int i0, $i1, $i2, $i3;
        android.view.WindowManagerGlobal $r3;
        android.view.View $r4, $r5;
        android.view.WindowManager$LayoutParams $r6;
        android.view.Surface $r7;
        android.view.IWindowSession $r8;
        android.view.ViewRootImpl$W $r9;
        android.os.RemoteException $r10;

        r0 := @this: android.view.ViewRootImpl;

        z0 = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        entermonitor r0;

     label01:
        $z2 = r0.<android.view.ViewRootImpl: boolean mRemoved>;

        if $z2 == 0 goto label03;

        exitmonitor r0;

     label02:
        return;

     label03:
        r0.<android.view.ViewRootImpl: boolean mRemoved> = 1;

        $z3 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z3 == 0 goto label04;

        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchDetachedFromWindow()>();

     label04:
        $z4 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z4 == 0 goto label09;

        $z5 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z5 != 0 goto label09;

        virtualinvoke r0.<android.view.ViewRootImpl: void invalidateDisplayLists()>();

        specialinvoke r0.<android.view.ViewRootImpl: void destroyHardwareRenderer()>();

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r4 == null goto label09;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        i0 = virtualinvoke $r5.<android.view.View: int getVisibility()>();

        $i1 = r0.<android.view.ViewRootImpl: int mViewVisibility>;

        if $i1 == i0 goto label11;

     label05:
        z1 = r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged>;

     label06:
        if z1 != 0 goto label07;

        if z0 == 0 goto label08;

     label07:
        $r6 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i2 = specialinvoke r0.<android.view.ViewRootImpl: int relayoutWindow(android.view.WindowManager$LayoutParams,int,boolean)>($r6, i0, 0);

        $i3 = 2 & $i2;

        if $i3 == 0 goto label08;

        $r8 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r8.<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>($r9);

     label08:
        $r7 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r7.<android.view.Surface: void release()>();

     label09:
        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        exitmonitor r0;

     label10:
        $r3 = staticinvoke <android.view.WindowManagerGlobal: android.view.WindowManagerGlobal getInstance()>();

        virtualinvoke $r3.<android.view.WindowManagerGlobal: void doRemoveView(android.view.ViewRootImpl)>(r0);

        return;

     label11:
        z0 = 0;

        goto label05;

     label12:
        $r11 := @caughtexception;

        r1 = $r11;

     label13:
        exitmonitor r0;

     label14:
        throw r1;

     label15:
        $r10 := @caughtexception;

        goto label08;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label15;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void doProcessInputEvents()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1, $r2, $r4, $r5;
        boolean $z0;
        android.view.ViewRootImpl$ViewRootHandler $r3;
        int $i0, $i1, $i2;
        java.lang.String $r6;

        r0 := @this: android.view.ViewRootImpl;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead>;

        if $r2 == null goto label3;

        r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead>;

        $r4 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext>;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead> = $r4;

        $r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead>;

        if $r5 != null goto label2;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail> = null;

     label2:
        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = null;

        $i0 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        $i1 = -1 + $i0;

        r0.<android.view.ViewRootImpl: int mPendingInputEventCount> = $i1;

        $r6 = r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName>;

        $i2 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        staticinvoke <android.os.Trace: void traceCounter(long,java.lang.String,int)>(4L, $r6, $i2);

        specialinvoke r0.<android.view.ViewRootImpl: void deliverInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

        goto label1;

     label3:
        $z0 = r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled>;

        if $z0 == 0 goto label4;

        r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled> = 0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int)>(19);

     label4:
        return;
    }

    void doTraversal()
    {
        android.view.ViewRootImpl r0;
        java.lang.Throwable r1, $r4;
        boolean $z0, $z1, $z2;
        android.view.ViewRootImpl$ViewRootHandler $r2;
        android.os.Looper $r3;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z0 == 0 goto label4;

        r0.<android.view.ViewRootImpl: boolean mTraversalScheduled> = 0;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r3 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Looper getLooper()>();

        $i0 = r0.<android.view.ViewRootImpl: int mTraversalBarrier>;

        virtualinvoke $r3.<android.os.Looper: void removeSyncBarrier(int)>($i0);

        $z1 = r0.<android.view.ViewRootImpl: boolean mProfile>;

        if $z1 == 0 goto label1;

        staticinvoke <android.os.Debug: void startMethodTracing(java.lang.String)>("ViewAncestor");

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "performTraversals");

     label2:
        specialinvoke r0.<android.view.ViewRootImpl: void performTraversals()>();

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        $z2 = r0.<android.view.ViewRootImpl: boolean mProfile>;

        if $z2 == 0 goto label4;

        staticinvoke <android.os.Debug: void stopMethodTracing()>();

        r0.<android.view.ViewRootImpl: boolean mProfile> = 0;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw r1;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.view.ViewRootImpl r0;
        java.lang.String r1, r5;
        java.io.FileDescriptor r2;
        java.io.PrintWriter r3;
        java.lang.String[] r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1;
        android.view.ViewRootImpl$InputStage $r9;
        android.view.View $r10;
        android.view.Choreographer $r11;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.PrintWriter;

        r4 := @parameter3: java.lang.String[];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>("ViewRoot:");

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mAdded=");

        $z0 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        virtualinvoke r3.<java.io.PrintWriter: void print(boolean)>($z0);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mRemoved=");

        $z1 = r0.<android.view.ViewRootImpl: boolean mRemoved>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mConsumeBatchedInputScheduled=");

        $z2 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z2);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mPendingInputEventCount=");

        $i0 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        virtualinvoke r3.<java.io.PrintWriter: void println(int)>($i0);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mProcessInputEventsScheduled=");

        $z3 = r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z3);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mTraversalScheduled=");

        $z4 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        virtualinvoke r3.<java.io.PrintWriter: void print(boolean)>($z4);

        $z5 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z5 == 0 goto label2;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" (barrier=");

        $i1 = r0.<android.view.ViewRootImpl: int mTraversalBarrier>;

        virtualinvoke r3.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>(")");

     label1:
        $r9 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstInputStage>;

        virtualinvoke $r9.<android.view.ViewRootImpl$InputStage: void dump(java.lang.String,java.io.PrintWriter)>(r5, r3);

        $r11 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r11.<android.view.Choreographer: void dump(java.lang.String,java.io.PrintWriter)>(r1, r3);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>("View Hierarchy:");

        $r10 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        specialinvoke r0.<android.view.ViewRootImpl: void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View)>(r5, r3, $r10);

        return;

     label2:
        virtualinvoke r3.<java.io.PrintWriter: void println()>();

        goto label1;
    }

    public void dumpGfxInfo(int[])
    {
        android.view.ViewRootImpl r0;
        int[] r1;
        android.view.View $r2, $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: int[];

        r1[1] = 0;

        r1[0] = 0;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        staticinvoke <android.view.ViewRootImpl: void getGfxInfo(android.view.View,int[])>($r3, r1);

     label1:
        return;
    }

    public void enqueueDisplayList(android.view.DisplayList)
    {
        android.view.ViewRootImpl r0;
        android.view.DisplayList r1;
        java.util.ArrayList $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.DisplayList;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mDisplayLists>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    void enqueueInputEvent(android.view.InputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        virtualinvoke r0.<android.view.ViewRootImpl: void enqueueInputEvent(android.view.InputEvent,android.view.InputEventReceiver,int,boolean)>(r1, null, 0, 0);

        return;
    }

    void enqueueInputEvent(android.view.InputEvent, android.view.InputEventReceiver, int, boolean)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;
        android.view.InputEventReceiver r2;
        int i0, $i1, $i2, $i3;
        boolean z0;
        android.view.ViewRootImpl$QueuedInputEvent r3, r4;
        java.lang.String $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        r2 := @parameter1: android.view.InputEventReceiver;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r3 = specialinvoke r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent obtainQueuedInputEvent(android.view.InputEvent,android.view.InputEventReceiver,int)>(r1, r2, i0);

        r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail>;

        if r4 != null goto label2;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead> = r3;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail> = r3;

     label1:
        $i1 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        $i2 = 1 + $i1;

        r0.<android.view.ViewRootImpl: int mPendingInputEventCount> = $i2;

        $r5 = r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName>;

        $i3 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        staticinvoke <android.os.Trace: void traceCounter(long,java.lang.String,int)>(4L, $r5, $i3);

        if z0 == 0 goto label3;

        virtualinvoke r0.<android.view.ViewRootImpl: void doProcessInputEvents()>();

        return;

     label2:
        r4.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = r3;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail> = r3;

        goto label1;

     label3:
        specialinvoke r0.<android.view.ViewRootImpl: void scheduleProcessInputEvents()>();

        return;
    }

    boolean ensureTouchMode(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2, $z3;
        android.os.RemoteException r1, $r4;
        android.view.View$AttachInfo $r2;
        android.view.IWindowSession $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r2.<android.view.View$AttachInfo: boolean mInTouchMode>;

        if $z1 != z0 goto label1;

        return 0;

     label1:
        $z2 = specialinvoke r0.<android.view.ViewRootImpl: boolean isInLocalFocusMode()>();

        if $z2 != 0 goto label2;

        $r3 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        interfaceinvoke $r3.<android.view.IWindowSession: void setInTouchMode(boolean)>(z0);

     label2:
        $z3 = specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>(z0);

        return $z3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void flushHardwareLayerUpdates()
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo $r1, $r3, $r5, $r7;
        android.view.HardwareRenderer $r2, $r4, $r6, $r8;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z0 = virtualinvoke $r4.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z1 = virtualinvoke $r6.<android.view.HardwareRenderer: boolean validate()>();

        if $z1 == 0 goto label1;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8 = $r7.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r8.<android.view.HardwareRenderer: void flushLayerUpdates()>();

     label1:
        return;
    }

    public android.view.View focusSearch(android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2, $r4, $r6;
        int i0;
        boolean $z0;
        android.view.FocusFinder $r3;
        android.view.ViewGroup $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = $r2 instanceof android.view.ViewGroup;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <android.view.FocusFinder: android.view.FocusFinder getInstance()>();

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r5 = (android.view.ViewGroup) $r4;

        $r6 = virtualinvoke $r3.<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>($r5, r1, i0);

        return $r6;
    }

    public void focusableViewAvailable(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;
        android.view.ViewGroup $r6;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = virtualinvoke $r4.<android.view.View: boolean hasFocus()>();

        if $z0 != 0 goto label2;

        virtualinvoke r1.<android.view.View: boolean requestFocus()>();

     label1:
        return;

     label2:
        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r2 = virtualinvoke $r5.<android.view.View: android.view.View findFocus()>();

        $z1 = r2 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label1;

        $r6 = (android.view.ViewGroup) r2;

        $i0 = virtualinvoke $r6.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 != 262144 goto label1;

        $z2 = staticinvoke <android.view.ViewRootImpl: boolean isViewDescendantOf(android.view.View,android.view.View)>(r1, r2);

        if $z2 == 0 goto label1;

        virtualinvoke r1.<android.view.View: boolean requestFocus()>();

        return;
    }

    public android.view.View getAccessibilityFocusedHost()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        return $r1;
    }

    public android.view.accessibility.AccessibilityNodeInfo getAccessibilityFocusedVirtualView()
    {
        android.view.ViewRootImpl r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        return $r1;
    }

    public android.view.AccessibilityInteractionController getAccessibilityInteractionController()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;
        android.view.AccessibilityInteractionController $r2, $r3, $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getAccessibilityInteractionController called when there is no mView");

        throw $r5;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.AccessibilityInteractionController mAccessibilityInteractionController>;

        if $r2 != null goto label2;

        $r4 = new android.view.AccessibilityInteractionController;

        specialinvoke $r4.<android.view.AccessibilityInteractionController: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.AccessibilityInteractionController mAccessibilityInteractionController> = $r4;

     label2:
        $r3 = r0.<android.view.ViewRootImpl: android.view.AccessibilityInteractionController mAccessibilityInteractionController>;

        return $r3;
    }

    public boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r4;
        android.graphics.Rect r2;
        android.graphics.Point r3;
        int $i0, $i1;
        boolean $z0;
        java.lang.RuntimeException $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Point;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 == $r4 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("child is not mine, honest!");

        throw $r5;

     label1:
        $i1 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i0 = r0.<android.view.ViewRootImpl: int mHeight>;

        $z0 = virtualinvoke r2.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i1, $i0);

        return $z0;
    }

    int getHostVisibility()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mAppVisible>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i0 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

        return $i0;

     label1:
        return 8;
    }

    public void getLastTouchPoint(android.graphics.Point)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Point r1;
        android.graphics.PointF $r2, $r3;
        float $f0, $f1;
        int $i0, $i1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Point;

        $r2 = r0.<android.view.ViewRootImpl: android.graphics.PointF mLastTouchPoint>;

        $f0 = $r2.<android.graphics.PointF: float x>;

        $i0 = (int) $f0;

        r1.<android.graphics.Point: int x> = $i0;

        $r3 = r0.<android.view.ViewRootImpl: android.graphics.PointF mLastTouchPoint>;

        $f1 = $r3.<android.graphics.PointF: float y>;

        $i1 = (int) $f1;

        r1.<android.graphics.Point: int y> = $i1;

        return;
    }

    public int getLayoutDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 0;
    }

    final android.view.WindowLeaked getLocation()
    {
        android.view.ViewRootImpl r0;
        android.view.WindowLeaked $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.WindowLeaked mLocation>;

        return $r1;
    }

    public android.view.ViewParent getParent()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return null;
    }

    public android.view.ViewParent getParentForAccessibility()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return null;
    }

    public int getTextAlignment()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public int getTextDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public android.view.View getView()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        return $r1;
    }

    void handleAppVisibility(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.ViewRootImpl: boolean mAppVisible>;

        if $z1 == z0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mAppVisible> = z0;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        return;
    }

    public void handleDispatchDoneAnimating()
    {
        android.view.ViewRootImpl r0;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.Rect $r1;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mWindowsAnimating>;

        if $z0 == 0 goto label2;

        r0.<android.view.ViewRootImpl: boolean mWindowsAnimating> = 0;

        $r1 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

        $z1 = virtualinvoke $r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $z2 = r0.<android.view.ViewRootImpl: boolean mIsAnimating>;

        if $z2 != 0 goto label1;

        $z3 = r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded>;

        if $z3 == 0 goto label2;

     label1:
        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label2:
        return;
    }

    public void handleDispatchSystemUiVisibilityChanged(android.view.ViewRootImpl$SystemUiVisibilityInfo)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$SystemUiVisibilityInfo r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.view.View $r2, $r6, $r7;
        android.view.View$AttachInfo $r3, $r4, $r5, $r8;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$SystemUiVisibilityInfo;

        $i2 = r0.<android.view.ViewRootImpl: int mSeq>;

        $i1 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int seq>;

        if $i2 == $i1 goto label1;

        $i8 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int seq>;

        r0.<android.view.ViewRootImpl: int mSeq> = $i8;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8.<android.view.View$AttachInfo: boolean mForceReportNewAttributes> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 != null goto label3;

     label2:
        return;

     label3:
        $i3 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges>;

        if $i3 == 0 goto label4;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i7 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localValue>;

        $i6 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges>;

        virtualinvoke $r7.<android.view.View: boolean updateLocalSystemUiVisibility(int,int)>($i7, $i6);

     label4:
        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label2;

        $i4 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility>;

        i0 = 7 & $i4;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i5 = $r4.<android.view.View$AttachInfo: int mGlobalSystemUiVisibility>;

        if i0 == $i5 goto label2;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5.<android.view.View$AttachInfo: int mGlobalSystemUiVisibility> = i0;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r6.<android.view.View: void dispatchSystemUiVisibilityChanged(int)>(i0);

        return;
    }

    void handleGetNewSurface()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    void handleScreenStateChange(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1;
        android.view.View r1, $r4;
        byte b0;
        android.view.View$AttachInfo $r2, $r3;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r2.<android.view.View$AttachInfo: boolean mScreenOn>;

        if z0 == $z1 goto label3;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3.<android.view.View$AttachInfo: boolean mScreenOn> = z0;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r4 == null goto label2;

        r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if z0 == 0 goto label4;

        b0 = 1;

     label1:
        virtualinvoke r1.<android.view.View: void dispatchScreenStateChanged(int)>(b0);

     label2:
        if z0 == 0 goto label3;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label3:
        return;

     label4:
        b0 = 0;

        goto label1;
    }

    void invalidate()
    {
        android.view.ViewRootImpl r0;
        int $i0, $i1;
        android.graphics.Rect $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

        $i1 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i0 = r0.<android.view.ViewRootImpl: int mHeight>;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i1, $i0);

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public void invalidateChild(android.view.View, android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.graphics.Rect r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        virtualinvoke r0.<android.view.ViewRootImpl: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>(null, r2);

        return;
    }

    public android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        int[] r1;
        android.graphics.Rect r2, r3, $r4;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.content.res.CompatibilityInfo$Translator $r5, $r9, $r11;
        android.view.View$AttachInfo $r6, $r7, $r8, $r10;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.graphics.Rect;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        if r2 != null goto label02;

        virtualinvoke r0.<android.view.ViewRootImpl: void invalidate()>();

     label01:
        return null;

     label02:
        $z1 = virtualinvoke r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        $z7 = r0.<android.view.ViewRootImpl: boolean mIsAnimating>;

        if $z7 == 0 goto label01;

     label03:
        $i0 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if $i0 != 0 goto label04;

        $r11 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r11 == null goto label07;

     label04:
        $r4 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>(r2);

        r2 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i1 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if $i1 == 0 goto label05;

        $i10 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        $i11 = neg $i10;

        virtualinvoke r2.<android.graphics.Rect: void offset(int,int)>(0, $i11);

     label05:
        $r5 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r5 == null goto label06;

        $r9 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r9.<android.content.res.CompatibilityInfo$Translator: void translateRectInAppWindowToScreen(android.graphics.Rect)>(r2);

     label06:
        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z2 = $r6.<android.view.View$AttachInfo: boolean mScalingRequired>;

        if $z2 == 0 goto label07;

        virtualinvoke r2.<android.graphics.Rect: void inset(int,int)>(-1, -1);

     label07:
        r3 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

        $z3 = virtualinvoke r3.<android.graphics.Rect: boolean isEmpty()>();

        if $z3 != 0 goto label08;

        $z6 = virtualinvoke r3.<android.graphics.Rect: boolean contains(android.graphics.Rect)>(r2);

        if $z6 != 0 goto label08;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r10.<android.view.View$AttachInfo: boolean mSetIgnoreDirtyState> = 1;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 1;

     label08:
        $i4 = r2.<android.graphics.Rect: int left>;

        $i5 = r2.<android.graphics.Rect: int top>;

        $i3 = r2.<android.graphics.Rect: int right>;

        $i2 = r2.<android.graphics.Rect: int bottom>;

        virtualinvoke r3.<android.graphics.Rect: void union(int,int,int,int)>($i4, $i5, $i3, $i2);

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        f0 = $r7.<android.view.View$AttachInfo: float mApplicationScale>;

        $i6 = r0.<android.view.ViewRootImpl: int mWidth>;

        $f2 = (float) $i6;

        $f1 = f0 * $f2;

        $f3 = 0.5F + $f1;

        $i9 = (int) $f3;

        $i7 = r0.<android.view.ViewRootImpl: int mHeight>;

        $f5 = (float) $i7;

        $f4 = f0 * $f5;

        $f6 = 0.5F + $f4;

        $i8 = (int) $f6;

        z0 = virtualinvoke r3.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i9, $i8);

        if z0 != 0 goto label09;

        virtualinvoke r3.<android.graphics.Rect: void setEmpty()>();

     label09:
        $z5 = r0.<android.view.ViewRootImpl: boolean mWillDrawSoon>;

        if $z5 != 0 goto label01;

        if z0 != 0 goto label10;

        $z4 = r0.<android.view.ViewRootImpl: boolean mIsAnimating>;

        if $z4 == 0 goto label01;

     label10:
        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return null;
    }

    void invalidateDisplayLists()
    {
        android.view.ViewRootImpl r0;
        java.util.ArrayList r1;
        int i0, i1;
        android.view.DisplayList r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 = r0.<android.view.ViewRootImpl: java.util.ArrayList mDisplayLists>;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (android.view.DisplayList) $r3;

        $z0 = virtualinvoke r2.<android.view.DisplayList: boolean isDirty()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<android.view.DisplayList: void reset()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        return;
    }

    void invalidateWorld(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r3;
        android.view.ViewGroup r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r1.<android.view.View: void invalidate()>();

        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r2 = (android.view.ViewGroup) r1;

        i0 = 0;

     label1:
        $i1 = virtualinvoke r2.<android.view.ViewGroup: int getChildCount()>();

        if i0 >= $i1 goto label2;

        $r3 = virtualinvoke r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(i0);

        virtualinvoke r0.<android.view.ViewRootImpl: void invalidateWorld(android.view.View)>($r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    boolean isInLayout()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mInLayout>;

        return $z0;
    }

    public boolean isLayoutDirectionResolved()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean isLayoutRequested()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mLayoutRequested>;

        return $z0;
    }

    public boolean isTextAlignmentResolved()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean isTextDirectionResolved()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public void loadSystemProperties()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$4 $r1;
        android.view.ViewRootImpl$ViewRootHandler $r2;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r1 = new android.view.ViewRootImpl$4;

        specialinvoke $r1.<android.view.ViewRootImpl$4: void <init>(android.view.ViewRootImpl)>(r0);

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public void notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.ViewRootImpl: void postSendWindowContentChangedCallback(android.view.View,int)>(r2, i0);

        return;
    }

    public void onHardwarePostDraw(android.view.HardwareCanvas)
    {
        android.view.ViewRootImpl r0;
        android.view.HardwareCanvas r1;
        android.view.HardwareLayer $r2, $r5;
        int $i0, $i1;
        android.graphics.Paint $r3, $r4;
        float $f0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.HardwareCanvas;

        $r2 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.graphics.Paint mResizePaint>;

        $i0 = r0.<android.view.ViewRootImpl: int mResizeAlpha>;

        virtualinvoke $r3.<android.graphics.Paint: void setAlpha(int)>($i0);

        $r5 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        $i1 = r0.<android.view.ViewRootImpl: int mHardwareYOffset>;

        $f0 = (float) $i1;

        $r4 = r0.<android.view.ViewRootImpl: android.graphics.Paint mResizePaint>;

        virtualinvoke r1.<android.view.HardwareCanvas: void drawHardwareLayer(android.view.HardwareLayer,float,float,android.graphics.Paint)>($r5, 0.0F, $f0, $r4);

     label1:
        specialinvoke r0.<android.view.ViewRootImpl: void drawAccessibilityFocusedDrawableIfNeeded(android.graphics.Canvas)>(r1);

        return;
    }

    public void onHardwarePreDraw(android.view.HardwareCanvas)
    {
        android.view.ViewRootImpl r0;
        android.view.HardwareCanvas r1;
        int $i0, $i1;
        float $f0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.HardwareCanvas;

        $i0 = r0.<android.view.ViewRootImpl: int mHardwareYOffset>;

        $i1 = neg $i0;

        $f0 = (float) $i1;

        virtualinvoke r1.<android.view.HardwareCanvas: void translate(float,float)>(0.0F, $f0);

        return;
    }

    void outputDisplayList(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.DisplayList r2;
        android.view.View$AttachInfo $r3, $r4, $r6;
        android.view.HardwareCanvas $r5, $r7;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.view.HardwareCanvas mHardwareCanvas>;

        if $r5 == null goto label1;

        r2 = virtualinvoke r1.<android.view.View: android.view.DisplayList getDisplayList()>();

        if r2 == null goto label1;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.HardwareCanvas mHardwareCanvas>;

        virtualinvoke $r7.<android.view.HardwareCanvas: void outputDisplayList(android.view.DisplayList)>(r2);

     label1:
        return;
    }

    public boolean performHapticFeedback(int, boolean)
    {
        android.view.ViewRootImpl r0;
        int i0;
        boolean z0, z1;
        android.view.ViewRootImpl$W $r2;
        android.view.IWindowSession $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        z1 = interfaceinvoke $r3.<android.view.IWindowSession: boolean performHapticFeedback(android.view.IWindow,int,boolean)>($r2, i0, z0);

     label2:
        return z1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void playSoundEffect(int)
    {
        android.view.ViewRootImpl r0;
        int i0;
        java.lang.IllegalStateException r1, $r13;
        android.media.AudioManager r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r12, $r14, $r16;
        java.lang.Class $r8;
        java.lang.String $r9, $r11, $r15;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $z0 = r0.<android.view.ViewRootImpl: boolean mMediaDisabled>;

        if $z0 == 0 goto label01;

        return;

     label01:
        r2 = specialinvoke r0.<android.view.ViewRootImpl: android.media.AudioManager getAudioManager()>();

     label02:
        tableswitch(i0)
        {
            case 0: goto label05;
            case 1: goto label09;
            case 2: goto label13;
            case 3: goto label11;
            case 4: goto label07;
            default: goto label03;
        };

     label03:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown effect id ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not defined in ");

        $r8 = class "android/view/SoundEffectConstants";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label04:
        $r13 := @caughtexception;

        r1 = $r13;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FATAL EXCEPTION when attempting to play sound effect: ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ViewRootImpl", $r15);

        virtualinvoke r1.<java.lang.IllegalStateException: void printStackTrace()>();

        return;

     label05:
        virtualinvoke r2.<android.media.AudioManager: void playSoundEffect(int)>(0);

     label06:
        return;

     label07:
        virtualinvoke r2.<android.media.AudioManager: void playSoundEffect(int)>(2);

     label08:
        return;

     label09:
        virtualinvoke r2.<android.media.AudioManager: void playSoundEffect(int)>(3);

     label10:
        return;

     label11:
        virtualinvoke r2.<android.media.AudioManager: void playSoundEffect(int)>(4);

     label12:
        return;

     label13:
        virtualinvoke r2.<android.media.AudioManager: void playSoundEffect(int)>(1);

     label14:
        return;

        catch java.lang.IllegalStateException from label01 to label02 with label04;
        catch java.lang.IllegalStateException from label03 to label04 with label04;
        catch java.lang.IllegalStateException from label05 to label06 with label04;
        catch java.lang.IllegalStateException from label07 to label08 with label04;
        catch java.lang.IllegalStateException from label09 to label10 with label04;
        catch java.lang.IllegalStateException from label11 to label12 with label04;
        catch java.lang.IllegalStateException from label13 to label14 with label04;
    }

    public void profile()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        r0.<android.view.ViewRootImpl: boolean mProfile> = 1;

        return;
    }

    void pushHardwareLayerUpdate(android.view.HardwareLayer)
    {
        android.view.ViewRootImpl r0;
        android.view.HardwareLayer r1;
        android.view.View$AttachInfo $r2, $r4, $r6;
        android.view.HardwareRenderer $r3, $r5, $r7;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.HardwareLayer;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z0 = virtualinvoke $r5.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r7.<android.view.HardwareRenderer: void pushLayerUpdate(android.view.HardwareLayer)>(r1);

     label1:
        return;
    }

    public void recomputeViewAttributes(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2;
        android.view.View$AttachInfo $r3;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 != r1 goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

        $z0 = r0.<android.view.ViewRootImpl: boolean mWillDrawSoon>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        return;
    }

    public void requestChildFocus(android.view.View, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.graphics.Rect r2, $r4, $r5, $r8, $r10;
        boolean z0, z1;
        int $i0, $i1, $i2, $i3;
        android.view.View$AttachInfo $r6, $r7;
        android.view.ViewRootImpl$W $r9;
        android.os.RemoteException $r11;
        android.view.IWindowSession $r12;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        z1 = virtualinvoke r0.<android.view.ViewRootImpl: boolean scrollToRectOrFocus(android.graphics.Rect,boolean)>(r2, z0);

        if r2 == null goto label2;

        $r4 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>(r2);

        $r5 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i0 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        $i1 = neg $i0;

        virtualinvoke $r5.<android.graphics.Rect: void offset(int,int)>(0, $i1);

        $r8 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i3 = $r6.<android.view.View$AttachInfo: int mWindowLeft>;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i2 = $r7.<android.view.View$AttachInfo: int mWindowTop>;

        virtualinvoke $r8.<android.graphics.Rect: void offset(int,int)>($i3, $i2);

     label1:
        $r12 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r10 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        interfaceinvoke $r12.<android.view.IWindowSession: void onRectangleOnScreenRequested(android.os.IBinder,android.graphics.Rect,boolean)>($r9, $r10, z0);

     label2:
        return z1;

     label3:
        $r11 := @caughtexception;

        return z1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestDisallowInterceptTouchEvent(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        return;
    }

    public void requestFitSystemWindows()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        r0.<android.view.ViewRootImpl: boolean mFitSystemWindowsRequested> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public void requestLayout()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        return;
    }

    boolean requestLayoutDuringLayout(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ViewParent $r2;
        android.view.View$AttachInfo $r3;
        java.util.ArrayList $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r1.<android.view.View: android.view.ViewParent mParent>;

        if $r2 == null goto label1;

        $r3 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 != null goto label2;

     label1:
        return 1;

     label2:
        $r4 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r5 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label3:
        $z1 = r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest>;

        if $z1 == 0 goto label1;

        return 0;
    }

    public boolean requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r3, r4, $r6, $r7, $r10;
        android.view.accessibility.AccessibilityEvent r2;
        int i0, i2, $i3, $i5;
        long l1, $l4;
        android.view.accessibility.AccessibilityNodeProvider r5, $r8;
        android.view.accessibility.AccessibilityManager $r9;
        android.view.accessibility.AccessibilityNodeInfo $r11;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.accessibility.AccessibilityEvent;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r6 != null goto label1;

        return 0;

     label1:
        $i3 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        lookupswitch($i3)
        {
            case 32768: goto label3;
            case 65536: goto label4;
            default: goto label2;
        };

     label2:
        $r9 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        virtualinvoke $r9.<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r2);

        return 1;

     label3:
        l1 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        i2 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getAccessibilityViewId(long)>(l1);

        $r10 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r4 = virtualinvoke $r10.<android.view.View: android.view.View findViewByAccessibilityId(int)>(i2);

        if r4 == null goto label2;

        r5 = virtualinvoke r4.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r5 == null goto label2;

        $i5 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>(l1);

        $r11 = virtualinvoke r5.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>($i5);

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(r4, $r11);

        goto label2;

     label4:
        $l4 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        i0 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getAccessibilityViewId(long)>($l4);

        $r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r3 = virtualinvoke $r7.<android.view.View: android.view.View findViewByAccessibilityId(int)>(i0);

        if r3 == null goto label2;

        $r8 = virtualinvoke r3.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if $r8 == null goto label2;

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        goto label2;
    }

    public void requestTransitionStart(android.animation.LayoutTransition)
    {
        android.view.ViewRootImpl r0;
        android.animation.LayoutTransition r1;
        java.util.ArrayList $r2, $r3, $r4, $r5, $r6;
        boolean $z1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.animation.LayoutTransition;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if $r2 == null goto label1;

        $r6 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $z1 = virtualinvoke $r6.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if $r3 != null goto label2;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions> = $r5;

     label2:
        $r4 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label3:
        return;
    }

    public void requestTransparentRegion(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2, $r3;
        int $i0, $i1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r3 != r1 goto label1;

        r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i0 = r2.<android.view.View: int mPrivateFlags>;

        $i1 = 512 | $i0;

        r2.<android.view.View: int mPrivateFlags> = $i1;

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 1;

        r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag> = 0;

        virtualinvoke r0.<android.view.ViewRootImpl: void requestLayout()>();

     label1:
        return;
    }

    public void requestUpdateConfiguration(android.content.res.Configuration)
    {
        android.view.ViewRootImpl r0;
        android.content.res.Configuration r1;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.content.res.Configuration;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(18, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    void scheduleConsumeBatchedInput()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ConsumeBatchedInputRunnable $r1;
        android.view.Choreographer $r2;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled>;

        if $z0 != 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled> = 1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable>;

        virtualinvoke $r2.<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>(0, $r1, null);

     label1:
        return;
    }

    void scheduleTraversals()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ViewRootHandler $r1;
        android.os.Looper $r2;
        int $i0;
        android.view.ViewRootImpl$TraversalRunnable $r3;
        android.view.Choreographer $r4;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z0 != 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mTraversalScheduled> = 1;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r2 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Looper getLooper()>();

        $i0 = virtualinvoke $r2.<android.os.Looper: int postSyncBarrier()>();

        r0.<android.view.ViewRootImpl: int mTraversalBarrier> = $i0;

        $r4 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable>;

        virtualinvoke $r4.<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>(2, $r3, null);

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleConsumeBatchedInput()>();

     label1:
        return;
    }

    boolean scrollToRectOrFocus(android.graphics.Rect, boolean)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1, r3, r4, $r10, $r17, $r18, $r21, $r22, $r24, $r25, $r28, $r29, $r31, $r35;
        boolean z0, z1, z2, z3, $z4, $z5;
        android.view.View$AttachInfo r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        android.view.View r5, r6, $r7, $r19, $r23, $r26, $r27, $r30, $r34;
        java.lang.ref.WeakReference $r8, $r9, $r32;
        android.widget.Scroller $r11, $r13, $r14, $r15, $r16;
        android.view.HardwareLayer $r12;
        android.content.Context $r20;
        java.lang.Object $r33;
        android.view.ViewGroup $r36;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r3 = r2.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        r4 = r2.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $i4 = r4.<android.graphics.Rect: int left>;

        $i3 = r3.<android.graphics.Rect: int left>;

        if $i4 > $i3 goto label01;

        $i35 = r4.<android.graphics.Rect: int top>;

        $i33 = r3.<android.graphics.Rect: int top>;

        if $i35 > $i33 goto label01;

        $i36 = r4.<android.graphics.Rect: int right>;

        $i34 = r3.<android.graphics.Rect: int right>;

        if $i36 > $i34 goto label01;

        i1 = r4.<android.graphics.Rect: int bottom>;

        i2 = r3.<android.graphics.Rect: int bottom>;

        z2 = 0;

        i0 = 0;

        if i1 <= i2 goto label05;

     label01:
        i0 = r0.<android.view.ViewRootImpl: int mScrollY>;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r5 = virtualinvoke $r7.<android.view.View: android.view.View findFocus()>();

        if r5 != null goto label02;

        return 0;

     label02:
        $r9 = r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus>;

        if $r9 == null goto label09;

        $r32 = r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus>;

        $r33 = virtualinvoke $r32.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r6 = (android.view.View) $r33;

     label03:
        if r5 == r6 goto label04;

        r1 = null;

     label04:
        if r5 != r6 goto label10;

        $z4 = r0.<android.view.ViewRootImpl: boolean mScrollMayChange>;

        if $z4 != 0 goto label10;

        z2 = 0;

        if r1 != null goto label10;

     label05:
        $i5 = r0.<android.view.ViewRootImpl: int mScrollY>;

        if i0 == $i5 goto label08;

        if z0 != 0 goto label16;

        $r12 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        if $r12 != null goto label16;

        $r14 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r14 != null goto label06;

        $r15 = new android.widget.Scroller;

        $r19 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r20 = virtualinvoke $r19.<android.view.View: android.content.Context getContext()>();

        specialinvoke $r15.<android.widget.Scroller: void <init>(android.content.Context)>($r20);

        r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller> = $r15;

     label06:
        $r16 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        $i7 = r0.<android.view.ViewRootImpl: int mScrollY>;

        $i6 = r0.<android.view.ViewRootImpl: int mScrollY>;

        $i8 = i0 - $i6;

        virtualinvoke $r16.<android.widget.Scroller: void startScroll(int,int,int,int)>(0, $i7, 0, $i8);

     label07:
        r0.<android.view.ViewRootImpl: int mScrollY> = i0;

     label08:
        return z2;

     label09:
        r6 = null;

        goto label03;

     label10:
        $r8 = new java.lang.ref.WeakReference;

        specialinvoke $r8.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r5);

        r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus> = $r8;

        r0.<android.view.ViewRootImpl: boolean mScrollMayChange> = 0;

        $r10 = r0.<android.view.ViewRootImpl: android.graphics.Rect mVisRect>;

        z1 = virtualinvoke r5.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>($r10, null);

        z2 = 0;

        if z1 == 0 goto label05;

        if r1 != null goto label13;

        $r29 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke r5.<android.view.View: void getFocusedRect(android.graphics.Rect)>($r29);

        $r30 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z5 = $r30 instanceof android.view.ViewGroup;

        if $z5 == 0 goto label11;

        $r34 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r36 = (android.view.ViewGroup) $r34;

        $r35 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r36.<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>(r5, $r35);

     label11:
        $r22 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $r18 = r0.<android.view.ViewRootImpl: android.graphics.Rect mVisRect>;

        z3 = virtualinvoke $r22.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r18);

        z2 = 0;

        if z3 == 0 goto label05;

        $r21 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i9 = virtualinvoke $r21.<android.graphics.Rect: int height()>();

        $r23 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i12 = virtualinvoke $r23.<android.view.View: int getHeight()>();

        $i10 = r4.<android.graphics.Rect: int top>;

        $i14 = $i12 - $i10;

        $i11 = r4.<android.graphics.Rect: int bottom>;

        $i15 = $i14 - $i11;

        if $i9 <= $i15 goto label14;

     label12:
        z2 = 1;

        goto label05;

     label13:
        $r17 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r17.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        goto label11;

     label14:
        $r24 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i13 = $r24.<android.graphics.Rect: int top>;

        $i17 = $i13 - i0;

        $i18 = r4.<android.graphics.Rect: int top>;

        if $i17 >= $i18 goto label15;

        $i28 = r4.<android.graphics.Rect: int top>;

        $r31 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i31 = $r31.<android.graphics.Rect: int top>;

        $i32 = $i31 - i0;

        $i29 = $i28 - $i32;

        i0 = i0 - $i29;

        goto label12;

     label15:
        $r25 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i16 = $r25.<android.graphics.Rect: int bottom>;

        $i21 = $i16 - i0;

        $r26 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i20 = virtualinvoke $r26.<android.view.View: int getHeight()>();

        $i19 = r4.<android.graphics.Rect: int bottom>;

        $i23 = $i20 - $i19;

        if $i21 <= $i23 goto label12;

        $r28 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i22 = $r28.<android.graphics.Rect: int bottom>;

        $i27 = $i22 - i0;

        $r27 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i26 = virtualinvoke $r27.<android.view.View: int getHeight()>();

        $i25 = r4.<android.graphics.Rect: int bottom>;

        $i24 = $i26 - $i25;

        $i30 = $i27 - $i24;

        i0 = i0 + $i30;

        goto label12;

     label16:
        $r11 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r11 == null goto label07;

        $r13 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        virtualinvoke $r13.<android.widget.Scroller: void abortAnimation()>();

        goto label07;
    }

    void setAccessibilityFocus(android.view.View, android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r4, $r7, $r8;
        android.view.accessibility.AccessibilityNodeInfo r2, r3, $r6;
        android.view.accessibility.AccessibilityNodeProvider r5;
        android.graphics.Rect $r9, $r10;
        long $l0;
        int $i1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.accessibility.AccessibilityNodeInfo;

        $r6 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        if $r6 == null goto label2;

        r3 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        r4 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost> = null;

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView> = null;

        virtualinvoke r4.<android.view.View: void clearAccessibilityFocusNoCallbacks()>();

        r5 = virtualinvoke r4.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r5 == null goto label1;

        $r9 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>($r9);

        $r10 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke r4.<android.view.View: void invalidate(android.graphics.Rect)>($r10);

        $l0 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        $i1 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l0);

        virtualinvoke r5.<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>($i1, 128, null);

     label1:
        virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

     label2:
        $r7 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        if $r7 == null goto label3;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        virtualinvoke $r8.<android.view.View: void clearAccessibilityFocusNoCallbacks()>();

     label3:
        r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost> = r1;

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView> = r2;

        return;
    }

    public void setDragFocus(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        if $r2 == r1 goto label1;

        r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView> = r1;

     label1:
        return;
    }

    public void setDrawDuringWindowsAnimating(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        r0.<android.view.ViewRootImpl: boolean mDrawDuringWindowsAnimating> = z0;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void handleDispatchDoneAnimating()>();

     label1:
        return;
    }

    void setLayoutParams(android.view.WindowManager$LayoutParams, boolean)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1, r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r16;
        boolean z0;
        java.lang.Throwable r2, $r15;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.String $r9, $r13;
        android.view.View$AttachInfo $r17;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        z0 := @parameter1: boolean;

        entermonitor r0;

     label01:
        $r4 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i0 = $r4.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i2 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        r0.<android.view.ViewRootImpl: int mClientWindowLayoutFlags> = $i2;

        $r5 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i3 = $r5.<android.view.WindowManager$LayoutParams: int privateFlags>;

        i1 = 128 & $i3;

        $r6 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i4 = $r6.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        r1.<android.view.WindowManager$LayoutParams: int systemUiVisibility> = $i4;

        $r7 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i5 = $r7.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        r1.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility> = $i5;

        $r8 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i6 = virtualinvoke $r8.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>(r1);

        r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag> = $i6;

        $i8 = r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag>;

        $i7 = 524288 & $i8;

        if $i7 == 0 goto label02;

        $r17 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r17.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

     label02:
        $r10 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r9 = $r10.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        if $r9 != null goto label03;

        $r16 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r13 = r0.<android.view.ViewRootImpl: java.lang.String mBasePackageName>;

        $r16.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = $r13;

     label03:
        r3 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i10 = r3.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i9 = i1 | $i10;

        r3.<android.view.WindowManager$LayoutParams: int privateFlags> = $i9;

        $r11 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        specialinvoke r0.<android.view.ViewRootImpl: void applyKeepScreenOnFlag(android.view.WindowManager$LayoutParams)>($r11);

     label04:
        if z0 == 0 goto label06;

     label05:
        $i16 = r1.<android.view.WindowManager$LayoutParams: int softInputMode>;

        r0.<android.view.ViewRootImpl: int mSoftInputMode> = $i16;

        virtualinvoke r0.<android.view.ViewRootImpl: void requestLayout()>();

     label06:
        $i11 = r1.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i12 = 240 & $i11;

        if $i12 != 0 goto label07;

        $r14 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r12 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i13 = $r12.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i14 = -241 & $i13;

        $i15 = i0 & 240;

        $i17 = $i14 | $i15;

        $r14.<android.view.WindowManager$LayoutParams: int softInputMode> = $i17;

     label07:
        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        exitmonitor r0;

     label08:
        return;

     label09:
        $r15 := @caughtexception;

        r2 = $r15;

     label10:
        exitmonitor r0;

     label11:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    void setLocalDragState(java.lang.Object)
    {
        android.view.ViewRootImpl r0;
        java.lang.Object r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.lang.Object;

        r0.<android.view.ViewRootImpl: java.lang.Object mLocalDragState> = r1;

        return;
    }

    void setStopped(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z1 == z0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mStopped> = z0;

        if z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        return;
    }

    public void setView(android.view.View, android.view.WindowManager$LayoutParams, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r3, $r20, $r21;
        android.view.WindowManager$LayoutParams r2, r5, $r22, $r24, $r35, $r36, $r39, $r149;
        java.lang.Throwable r4, r10, $r158, $r161;
        android.content.res.CompatibilityInfo r6;
        android.content.res.CompatibilityInfo$Translator r7, $r26, $r31, $r32, $r33, $r42, $r146, $r154, $r156;
        boolean z0, z1, z2, z3, $z4, $z5, $z7, $z8;
        android.view.View$AttachInfo r8, r9, $r34, $r38, $r45, $r48, $r83, $r133, $r152, $r163;
        float f0;
        android.os.RemoteException r11, $r160;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        android.view.ViewRootImpl$SyntheticInputStage r12, $r53;
        java.lang.CharSequence r13;
        android.view.ViewRootImpl$NativePostImeInputStage r14, $r55;
        android.view.ViewRootImpl$ViewPostImeInputStage r15, $r52;
        android.view.ViewRootImpl$ImeInputStage r16, $r58;
        android.view.ViewRootImpl$EarlyPostImeInputStage r17, $r63;
        android.view.ViewRootImpl$NativePreImeInputStage r18, $r69;
        android.view.ViewRootImpl$ViewPreImeInputStage r19, $r72;
        android.view.FallbackEventHandler $r23, $r82, $r162;
        java.lang.String $r25, $r64, $r65, $r71, $r77, $r93, $r97, $r108, $r119, $r120, $r127, $r134, $r141, $r148;
        android.os.IBinder $r27, $r89, $r101, $r112, $r153;
        android.view.DisplayAdjustments $r28, $r29;
        com.android.internal.view.BaseSurfaceHolder $r30, $r151;
        android.view.IWindowSession $r37;
        android.view.ViewRootImpl$W $r40, $r116, $r124, $r129, $r136;
        android.graphics.Rect $r41, $r43, $r49, $r50, $r51, $r132;
        android.view.Display $r44;
        android.view.InputChannel $r46, $r47, $r73, $r155;
        java.lang.StringBuilder $r54, $r57, $r59, $r60, $r61, $r62, $r66, $r67, $r68, $r70, $r79, $r80, $r90, $r91, $r94, $r95, $r96, $r98, $r99, $r102, $r103, $r104, $r105, $r106, $r109, $r110, $r111, $r114, $r115, $r117, $r118, $r122, $r123, $r125, $r126, $r128, $r130, $r131, $r135, $r137, $r138, $r142, $r143;
        android.view.accessibility.AccessibilityManager $r56;
        android.os.Looper $r74;
        android.view.InputQueue$Callback $r75, $r84, $r86;
        android.view.ViewRootImpl$WindowInputEventReceiver $r76;
        android.view.ViewRootImpl$AccessibilityInteractionConnectionManager $r78;
        java.lang.RuntimeException $r81, $r159;
        com.android.internal.view.RootViewSurfaceTaker $r85, $r147;
        android.view.InputQueue $r87, $r88;
        android.view.WindowManager$BadTokenException $r92, $r100, $r107, $r113, $r121, $r139;
        android.view.WindowManager$InvalidDisplayException $r140;
        android.view.SurfaceHolder$Callback2 $r144, $r145;
        android.view.ViewRootImpl$TakenSurfaceHolder $r150;
        android.view.Surface $r157;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        r3 := @parameter2: android.view.View;

        entermonitor r0;

     label01:
        $r20 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r20 != null goto label57;

        r0.<android.view.ViewRootImpl: android.view.View mView> = r1;

        $r21 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i2 = virtualinvoke $r21.<android.view.View: int getRawLayoutDirection()>();

        r0.<android.view.ViewRootImpl: int mViewLayoutDirectionInitial> = $i2;

        $r23 = r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler>;

        interfaceinvoke $r23.<android.view.FallbackEventHandler: void setView(android.view.View)>(r1);

        $r22 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        virtualinvoke $r22.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>(r2);

        $r24 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r25 = $r24.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        if $r25 != null goto label02;

        $r149 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r148 = r0.<android.view.ViewRootImpl: java.lang.String mBasePackageName>;

        $r149.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = $r148;

     label02:
        r5 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i3 = r5.<android.view.WindowManager$LayoutParams: int flags>;

        r0.<android.view.ViewRootImpl: int mClientWindowLayoutFlags> = $i3;

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        $z4 = r1 instanceof com.android.internal.view.RootViewSurfaceTaker;

        if $z4 == 0 goto label03;

        $r147 = (com.android.internal.view.RootViewSurfaceTaker) r1;

        $r144 = interfaceinvoke $r147.<com.android.internal.view.RootViewSurfaceTaker: android.view.SurfaceHolder$Callback2 willYouTakeTheSurface()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback> = $r144;

        $r145 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        if $r145 == null goto label03;

        $r150 = new android.view.ViewRootImpl$TakenSurfaceHolder;

        specialinvoke $r150.<android.view.ViewRootImpl$TakenSurfaceHolder: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder> = $r150;

        $r151 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r151.<com.android.internal.view.BaseSurfaceHolder: void setFormat(int)>(0);

     label03:
        $r28 = r0.<android.view.ViewRootImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        r6 = virtualinvoke $r28.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r26 = virtualinvoke r6.<android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo$Translator getTranslator()>();

        r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator> = $r26;

        $r29 = r0.<android.view.ViewRootImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        $r27 = r5.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        virtualinvoke $r29.<android.view.DisplayAdjustments: void setActivityToken(android.os.IBinder)>($r27);

        $r30 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r30 != null goto label04;

        specialinvoke r0.<android.view.ViewRootImpl: void enableHardwareAcceleration(android.view.WindowManager$LayoutParams)>(r5);

     label04:
        r7 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

     label05:
        z0 = 0;

        if r7 == null goto label09;

     label06:
        $r157 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $r156 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r157.<android.view.Surface: void setCompatibilityTranslator(android.content.res.CompatibilityInfo$Translator)>($r156);

     label07:
        z0 = 1;

     label08:
        virtualinvoke r5.<android.view.WindowManager$LayoutParams: void backup()>();

        $r146 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r146.<android.content.res.CompatibilityInfo$Translator: void translateWindowLayout(android.view.WindowManager$LayoutParams)>(r5);

     label09:
        $z5 = virtualinvoke r6.<android.content.res.CompatibilityInfo: boolean supportsScreen()>();

        if $z5 != 0 goto label10;

        $i14 = r5.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i15 = 128 | $i14;

        r5.<android.view.WindowManager$LayoutParams: int privateFlags> = $i15;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 1;

     label10:
        $i4 = r5.<android.view.WindowManager$LayoutParams: int softInputMode>;

        r0.<android.view.ViewRootImpl: int mSoftInputMode> = $i4;

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 1;

        r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag> = -1;

        $r34 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r34.<android.view.View$AttachInfo: android.view.View mRootView> = r1;

        r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r33 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r33 == null goto label30;

     label11:
        z1 = 1;

     label12:
        r8.<android.view.View$AttachInfo: boolean mScalingRequired> = z1;

        r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r32 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r32 != null goto label31;

     label13:
        f0 = 1.0F;

     label14:
        r9.<android.view.View$AttachInfo: float mApplicationScale> = f0;

     label15:
        if r3 == null goto label17;

     label16:
        $r152 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r153 = virtualinvoke r3.<android.view.View: android.os.IBinder getApplicationWindowToken()>();

        $r152.<android.view.View$AttachInfo: android.os.IBinder mPanelParentWindowToken> = $r153;

     label17:
        r0.<android.view.ViewRootImpl: boolean mAdded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void requestLayout()>();

        $r36 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i6 = $r36.<android.view.WindowManager$LayoutParams: int inputFeatures>;

        $i5 = 2 & $i6;

        if $i5 != 0 goto label18;

        $r155 = new android.view.InputChannel;

        specialinvoke $r155.<android.view.InputChannel: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel> = $r155;

     label18:
        $r35 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i7 = $r35.<android.view.WindowManager$LayoutParams: int type>;

        r0.<android.view.ViewRootImpl: int mOrigWindowType> = $i7;

        $r38 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r38.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

        specialinvoke r0.<android.view.ViewRootImpl: boolean collectViewAttributes()>();

        $r37 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r40 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $i9 = r0.<android.view.ViewRootImpl: int mSeq>;

        $r39 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i8 = virtualinvoke r0.<android.view.ViewRootImpl: int getHostVisibility()>();

        $r44 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $i10 = virtualinvoke $r44.<android.view.Display: int getDisplayId()>();

        $r45 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r41 = $r45.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        $r46 = r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel>;

        i0 = interfaceinvoke $r37.<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)>($r40, $i9, $r39, $i8, $i10, $r41, $r46);

     label19:
        if z0 == 0 goto label21;

     label20:
        virtualinvoke r5.<android.view.WindowManager$LayoutParams: void restore()>();

     label21:
        $r42 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r42 == null goto label22;

        $r154 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r133 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r132 = $r133.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        virtualinvoke $r154.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>($r132);

     label22:
        $r43 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        virtualinvoke $r43.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        $r50 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        $r48 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r49 = $r48.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        virtualinvoke $r50.<android.graphics.Rect: void set(android.graphics.Rect)>($r49);

        $r51 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        virtualinvoke $r51.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

     label23:
        if i0 >= 0 goto label47;

     label24:
        $r83 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r83.<android.view.View$AttachInfo: android.view.View mRootView> = null;

        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        $r82 = r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler>;

        interfaceinvoke $r82.<android.view.FallbackEventHandler: void setView(android.view.View)>(null);

        virtualinvoke r0.<android.view.ViewRootImpl: void unscheduleTraversals()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

     label25:
        tableswitch(i0)
        {
            case -9: goto label46;
            case -8: goto label45;
            case -7: goto label44;
            case -6: goto label42;
            case -5: goto label41;
            case -4: goto label40;
            case -3: goto label39;
            case -2: goto label38;
            case -1: goto label38;
            default: goto label26;
        };

     label26:
        $r81 = new java.lang.RuntimeException;

        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        $r95 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- unknown error code ");

        $r94 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r93 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r81.<java.lang.RuntimeException: void <init>(java.lang.String)>($r93);

        throw $r81;

     label27:
        $r158 := @caughtexception;

        r4 = $r158;

     label28:
        exitmonitor r0;

     label29:
        throw r4;

     label30:
        z1 = 0;

        goto label12;

     label31:
        $r31 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        f0 = $r31.<android.content.res.CompatibilityInfo$Translator: float applicationScale>;

     label32:
        goto label14;

     label33:
        $r160 := @caughtexception;

        r11 = $r160;

     label34:
        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        r0.<android.view.ViewRootImpl: android.view.View mView> = null;

        $r163 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r163.<android.view.View$AttachInfo: android.view.View mRootView> = null;

        r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel> = null;

        $r162 = r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler>;

        interfaceinvoke $r162.<android.view.FallbackEventHandler: void setView(android.view.View)>(null);

        virtualinvoke r0.<android.view.ViewRootImpl: void unscheduleTraversals()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        $r159 = new java.lang.RuntimeException;

        specialinvoke $r159.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Adding window failed", r11);

        throw $r159;

     label35:
        $r161 := @caughtexception;

        r10 = $r161;

        if z0 == 0 goto label37;

     label36:
        virtualinvoke r5.<android.view.WindowManager$LayoutParams: void restore()>();

     label37:
        throw r10;

     label38:
        $r92 = new android.view.WindowManager$BadTokenException;

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- token ");

        $r89 = r5.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r106 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r89);

        $r105 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid; is your activity running?");

        $r108 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r92.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r108);

        throw $r92;

     label39:
        $r107 = new android.view.WindowManager$BadTokenException;

        $r110 = new java.lang.StringBuilder;

        specialinvoke $r110.<java.lang.StringBuilder: void <init>()>();

        $r109 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- token ");

        $r112 = r5.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r111 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r112);

        $r98 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not for an application");

        $r97 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r107.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r97);

        throw $r107;

     label40:
        $r100 = new android.view.WindowManager$BadTokenException;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r102 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- app for token ");

        $r101 = r5.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r104 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r101);

        $r103 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is exiting");

        $r120 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r100.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r120);

        throw $r100;

     label41:
        $r121 = new android.view.WindowManager$BadTokenException;

        $r122 = new java.lang.StringBuilder;

        specialinvoke $r122.<java.lang.StringBuilder: void <init>()>();

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- window ");

        $r124 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r125 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r124);

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has already been added");

        $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r121.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r127);

        throw $r121;

     label42:
        exitmonitor r0;

     label43:
        return;

     label44:
        $r113 = new android.view.WindowManager$BadTokenException;

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window ");

        $r116 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r117 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r116);

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- another window of this type already exists");

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r113.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r119);

        throw $r113;

     label45:
        $r139 = new android.view.WindowManager$BadTokenException;

        $r138 = new java.lang.StringBuilder;

        specialinvoke $r138.<java.lang.StringBuilder: void <init>()>();

        $r137 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window ");

        $r136 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r143 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r136);

        $r142 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- permission denied for this window type");

        $r141 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r139.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r141);

        throw $r139;

     label46:
        $r140 = new android.view.WindowManager$InvalidDisplayException;

        $r131 = new java.lang.StringBuilder;

        specialinvoke $r131.<java.lang.StringBuilder: void <init>()>();

        $r130 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window ");

        $r129 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r128 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r129);

        $r135 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- the specified display can not be found");

        $r134 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r140.<android.view.WindowManager$InvalidDisplayException: void <init>(java.lang.String)>($r134);

        throw $r140;

     label47:
        $z7 = r1 instanceof com.android.internal.view.RootViewSurfaceTaker;

        if $z7 == 0 goto label48;

        $r85 = (com.android.internal.view.RootViewSurfaceTaker) r1;

        $r84 = interfaceinvoke $r85.<com.android.internal.view.RootViewSurfaceTaker: android.view.InputQueue$Callback willYouTakeTheInputQueue()>();

        r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback> = $r84;

     label48:
        $r47 = r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel>;

        if $r47 == null goto label50;

        $r75 = r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback>;

        if $r75 == null goto label49;

        $r88 = new android.view.InputQueue;

        specialinvoke $r88.<android.view.InputQueue: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue> = $r88;

        $r86 = r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback>;

        $r87 = r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue>;

        interfaceinvoke $r86.<android.view.InputQueue$Callback: void onInputQueueCreated(android.view.InputQueue)>($r87);

     label49:
        $r76 = new android.view.ViewRootImpl$WindowInputEventReceiver;

        $r73 = r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel>;

        $r74 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        specialinvoke $r76.<android.view.ViewRootImpl$WindowInputEventReceiver: void <init>(android.view.ViewRootImpl,android.view.InputChannel,android.os.Looper)>(r0, $r73, $r74);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver> = $r76;

     label50:
        virtualinvoke r1.<android.view.View: void assignParent(android.view.ViewParent)>(r0);

     label51:
        $i11 = i0 & 1;

        if $i11 == 0 goto label59;

        z3 = 1;

     label52:
        r0.<android.view.ViewRootImpl: boolean mAddedTouchMode> = z3;

     label53:
        $i12 = i0 & 2;

        if $i12 == 0 goto label60;

        z2 = 1;

     label54:
        r0.<android.view.ViewRootImpl: boolean mAppVisible> = z2;

        $r56 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $z8 = virtualinvoke $r56.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z8 == 0 goto label55;

        $r78 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        virtualinvoke $r78.<android.view.ViewRootImpl$AccessibilityInteractionConnectionManager: void ensureConnection()>();

     label55:
        $i13 = virtualinvoke r1.<android.view.View: int getImportantForAccessibility()>();

        if $i13 != 0 goto label56;

        virtualinvoke r1.<android.view.View: void setImportantForAccessibility(int)>(1);

     label56:
        r13 = virtualinvoke r5.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r53 = new android.view.ViewRootImpl$SyntheticInputStage;

        specialinvoke $r53.<android.view.ViewRootImpl$SyntheticInputStage: void <init>(android.view.ViewRootImpl)>(r0);

        r12 = $r53;

        $r52 = new android.view.ViewRootImpl$ViewPostImeInputStage;

        specialinvoke $r52.<android.view.ViewRootImpl$ViewPostImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage)>(r0, r12);

        r15 = $r52;

        $r55 = new android.view.ViewRootImpl$NativePostImeInputStage;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:native-post-ime:");

        $r61 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<android.view.ViewRootImpl$NativePostImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage,java.lang.String)>(r0, r15, $r64);

        r14 = $r55;

        $r63 = new android.view.ViewRootImpl$EarlyPostImeInputStage;

        specialinvoke $r63.<android.view.ViewRootImpl$EarlyPostImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage)>(r0, r14);

        r17 = $r63;

        $r58 = new android.view.ViewRootImpl$ImeInputStage;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:ime:");

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r71 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<android.view.ViewRootImpl$ImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage,java.lang.String)>(r0, r17, $r71);

        r16 = $r58;

        $r72 = new android.view.ViewRootImpl$ViewPreImeInputStage;

        specialinvoke $r72.<android.view.ViewRootImpl$ViewPreImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage)>(r0, r16);

        r19 = $r72;

        $r69 = new android.view.ViewRootImpl$NativePreImeInputStage;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:native-pre-ime:");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r65 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r69.<android.view.ViewRootImpl$NativePreImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage,java.lang.String)>(r0, r19, $r65);

        r18 = $r69;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstInputStage> = r18;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstPostImeInputStage> = r17;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:pending:");

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r77 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName> = $r77;

     label57:
        exitmonitor r0;

     label58:
        return;

     label59:
        z3 = 0;

        goto label52;

     label60:
        z2 = 0;

        goto label54;

        catch java.lang.Throwable from label01 to label02 with label27;
        catch java.lang.Throwable from label02 to label03 with label27;
        catch java.lang.Throwable from label03 to label04 with label27;
        catch java.lang.Throwable from label04 to label05 with label27;
        catch java.lang.Throwable from label06 to label07 with label27;
        catch java.lang.Throwable from label08 to label09 with label27;
        catch java.lang.Throwable from label09 to label10 with label27;
        catch java.lang.Throwable from label10 to label11 with label27;
        catch java.lang.Throwable from label12 to label13 with label27;
        catch java.lang.Throwable from label14 to label15 with label27;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch android.os.RemoteException from label18 to label19 with label33;
        catch java.lang.Throwable from label18 to label19 with label35;
        catch java.lang.Throwable from label20 to label21 with label27;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label22 to label23 with label27;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label26 to label27 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.Throwable from label31 to label32 with label27;
        catch java.lang.Throwable from label34 to label35 with label35;
        catch java.lang.Throwable from label36 to label37 with label27;
        catch java.lang.Throwable from label37 to label38 with label27;
        catch java.lang.Throwable from label38 to label39 with label27;
        catch java.lang.Throwable from label39 to label40 with label27;
        catch java.lang.Throwable from label40 to label41 with label27;
        catch java.lang.Throwable from label41 to label42 with label27;
        catch java.lang.Throwable from label42 to label43 with label27;
        catch java.lang.Throwable from label44 to label45 with label27;
        catch java.lang.Throwable from label45 to label46 with label27;
        catch java.lang.Throwable from label46 to label47 with label27;
        catch java.lang.Throwable from label47 to label48 with label27;
        catch java.lang.Throwable from label48 to label49 with label27;
        catch java.lang.Throwable from label49 to label50 with label27;
        catch java.lang.Throwable from label50 to label51 with label27;
        catch java.lang.Throwable from label52 to label53 with label27;
        catch java.lang.Throwable from label54 to label55 with label27;
        catch java.lang.Throwable from label55 to label56 with label27;
        catch java.lang.Throwable from label56 to label57 with label27;
        catch java.lang.Throwable from label57 to label58 with label27;
    }

    public boolean showContextMenuForChild(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        return 0;
    }

    public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ActionMode$Callback r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ActionMode$Callback;

        return null;
    }

    void unscheduleConsumeBatchedInput()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ConsumeBatchedInputRunnable $r1;
        android.view.Choreographer $r2;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled>;

        if $z0 == 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled> = 0;

        $r2 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable>;

        virtualinvoke $r2.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(0, $r1, null);

     label1:
        return;
    }

    void unscheduleTraversals()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ViewRootHandler $r1;
        android.os.Looper $r2;
        int $i0;
        android.view.ViewRootImpl$TraversalRunnable $r3;
        android.view.Choreographer $r4;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z0 == 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mTraversalScheduled> = 0;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r2 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Looper getLooper()>();

        $i0 = r0.<android.view.ViewRootImpl: int mTraversalBarrier>;

        virtualinvoke $r2.<android.os.Looper: void removeSyncBarrier(int)>($i0);

        $r4 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable>;

        virtualinvoke $r4.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(2, $r3, null);

     label1:
        return;
    }

    void updateConfiguration(android.content.res.Configuration, boolean)
    {
        android.view.ViewRootImpl r0;
        android.content.res.Configuration r1, r3, r6, $r13, $r14, $r16, $r22;
        boolean z0, $z1;
        android.content.res.CompatibilityInfo r2, $r8;
        java.util.ArrayList r4, $r9, $r20;
        java.lang.Throwable r5, $r21;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        android.view.DisplayAdjustments $r7;
        android.view.View $r10, $r11, $r15, $r17;
        android.content.res.Resources $r12;
        java.lang.Object $r18;
        android.content.ComponentCallbacks $r19;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.content.res.Configuration;

        z0 := @parameter1: boolean;

        $r7 = r0.<android.view.ViewRootImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        r2 = virtualinvoke $r7.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r8 = <android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo DEFAULT_COMPATIBILITY_INFO>;

        $z1 = virtualinvoke r2.<android.content.res.CompatibilityInfo: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label01;

        $r22 = new android.content.res.Configuration;

        specialinvoke $r22.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>(r1);

        r3 = $r22;

        $i6 = r0.<android.view.ViewRootImpl: int mNoncompatDensity>;

        virtualinvoke r2.<android.content.res.CompatibilityInfo: void applyToConfiguration(int,android.content.res.Configuration)>($i6, r3);

        r1 = r3;

     label01:
        r4 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        entermonitor r4;

     label02:
        $r9 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        $i3 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        i0 = -1 + $i3;

     label03:
        if i0 < 0 goto label06;

     label04:
        $r20 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        $r18 = virtualinvoke $r20.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r19 = (android.content.ComponentCallbacks) $r18;

        interfaceinvoke $r19.<android.content.ComponentCallbacks: void onConfigurationChanged(android.content.res.Configuration)>(r1);

     label05:
        i0 = i0 + -1;

        goto label03;

     label06:
        exitmonitor r4;

     label07:
        $r11 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r11 == null goto label10;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r12 = virtualinvoke $r10.<android.view.View: android.content.res.Resources getResources()>();

        r6 = virtualinvoke $r12.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        if z0 != 0 goto label08;

        $r16 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration>;

        $i5 = virtualinvoke $r16.<android.content.res.Configuration: int diff(android.content.res.Configuration)>(r6);

        if $i5 == 0 goto label10;

     label08:
        $r13 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration>;

        i1 = virtualinvoke $r13.<android.content.res.Configuration: int getLayoutDirection()>();

        i2 = virtualinvoke r6.<android.content.res.Configuration: int getLayoutDirection()>();

        $r14 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration>;

        virtualinvoke $r14.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>(r6);

        if i1 == i2 goto label09;

        $i4 = r0.<android.view.ViewRootImpl: int mViewLayoutDirectionInitial>;

        if $i4 != 2 goto label09;

        $r17 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r17.<android.view.View: void setLayoutDirection(int)>(i2);

     label09:
        $r15 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r15.<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>(r6);

     label10:
        return;

     label11:
        $r21 := @caughtexception;

        r5 = $r21;

     label12:
        exitmonitor r4;

     label13:
        throw r5;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void windowFocusChanged(boolean, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, z1;
        byte b0, b1;
        android.os.Message r1;
        android.view.ViewRootImpl$ViewRootHandler $r2;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        b0 = 1;

        r1 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        r1.<android.os.Message: int what> = 6;

        if z0 == 0 goto label3;

        b1 = 1;

     label1:
        r1.<android.os.Message: int arg1> = b1;

        if z1 == 0 goto label4;

     label2:
        r1.<android.os.Message: int arg2> = b0;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

        return;

     label3:
        b1 = 0;

        goto label1;

     label4:
        b0 = 0;

        goto label2;
    }
}
