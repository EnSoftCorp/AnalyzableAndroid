public final class android.view.VelocityTracker extends java.lang.Object
{
    private static final int ACTIVE_POINTER_ID;
    private static final android.util.Pools$SynchronizedPool sPool;
    private int mPtr;
    private final java.lang.String mStrategy;

    static void <clinit>()
    {
        android.util.Pools$SynchronizedPool $r0;

        <android.view.VelocityTracker: int ACTIVE_POINTER_ID> = -1;

        $r0 = new android.util.Pools$SynchronizedPool;

        specialinvoke $r0.<android.util.Pools$SynchronizedPool: void <init>(int)>(2);

        <android.view.VelocityTracker: android.util.Pools$SynchronizedPool sPool> = $r0;

        return;
    }

    private void <init>(java.lang.String)
    {
        android.view.VelocityTracker r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.view.VelocityTracker;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = staticinvoke <android.view.VelocityTracker: int nativeInitialize(java.lang.String)>(r1);

        r0.<android.view.VelocityTracker: int mPtr> = $i0;

        r0.<android.view.VelocityTracker: java.lang.String mStrategy> = r1;

        return;
    }

    private static native void nativeAddMovement(int, android.view.MotionEvent);

    private static native void nativeClear(int);

    private static native void nativeComputeCurrentVelocity(int, int, float);

    private static native void nativeDispose(int);

    private static native boolean nativeGetEstimator(int, int, android.view.VelocityTracker$Estimator);

    private static native float nativeGetXVelocity(int, int);

    private static native float nativeGetYVelocity(int, int);

    private static native int nativeInitialize(java.lang.String);

    public static android.view.VelocityTracker obtain()
    {
        android.view.VelocityTracker r0, $r3;
        android.util.Pools$SynchronizedPool $r1;
        java.lang.Object $r2;

        $r1 = <android.view.VelocityTracker: android.util.Pools$SynchronizedPool sPool>;

        $r2 = virtualinvoke $r1.<android.util.Pools$SynchronizedPool: java.lang.Object acquire()>();

        r0 = (android.view.VelocityTracker) $r2;

        if r0 == null goto label1;

        return r0;

     label1:
        $r3 = new android.view.VelocityTracker;

        specialinvoke $r3.<android.view.VelocityTracker: void <init>(java.lang.String)>(null);

        return $r3;
    }

    public static android.view.VelocityTracker obtain(java.lang.String)
    {
        java.lang.String r0;
        android.view.VelocityTracker $r1, $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = staticinvoke <android.view.VelocityTracker: android.view.VelocityTracker obtain()>();

        return $r2;

     label1:
        $r1 = new android.view.VelocityTracker;

        specialinvoke $r1.<android.view.VelocityTracker: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public void addMovement(android.view.MotionEvent)
    {
        android.view.VelocityTracker r0;
        android.view.MotionEvent r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.view.VelocityTracker;

        r1 := @parameter0: android.view.MotionEvent;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event must not be null");

        throw $r2;

     label1:
        $i0 = r0.<android.view.VelocityTracker: int mPtr>;

        staticinvoke <android.view.VelocityTracker: void nativeAddMovement(int,android.view.MotionEvent)>($i0, r1);

        return;
    }

    public void clear()
    {
        android.view.VelocityTracker r0;
        int $i0;

        r0 := @this: android.view.VelocityTracker;

        $i0 = r0.<android.view.VelocityTracker: int mPtr>;

        staticinvoke <android.view.VelocityTracker: void nativeClear(int)>($i0);

        return;
    }

    public void computeCurrentVelocity(int)
    {
        android.view.VelocityTracker r0;
        int i0, $i1;

        r0 := @this: android.view.VelocityTracker;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.VelocityTracker: int mPtr>;

        staticinvoke <android.view.VelocityTracker: void nativeComputeCurrentVelocity(int,int,float)>($i1, i0, 3.4028235E38F);

        return;
    }

    public void computeCurrentVelocity(int, float)
    {
        android.view.VelocityTracker r0;
        int i0, $i1;
        float f0;

        r0 := @this: android.view.VelocityTracker;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $i1 = r0.<android.view.VelocityTracker: int mPtr>;

        staticinvoke <android.view.VelocityTracker: void nativeComputeCurrentVelocity(int,int,float)>($i1, i0, f0);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.VelocityTracker r0;
        java.lang.Throwable r1, $r2;
        int $i0, $i1;

        r0 := @this: android.view.VelocityTracker;

     label1:
        $i0 = r0.<android.view.VelocityTracker: int mPtr>;

        if $i0 == 0 goto label2;

        $i1 = r0.<android.view.VelocityTracker: int mPtr>;

        staticinvoke <android.view.VelocityTracker: void nativeDispose(int)>($i1);

        r0.<android.view.VelocityTracker: int mPtr> = 0;

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getEstimator(int, android.view.VelocityTracker$Estimator)
    {
        android.view.VelocityTracker r0;
        int i0, $i1;
        android.view.VelocityTracker$Estimator r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.view.VelocityTracker;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.VelocityTracker$Estimator;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("outEstimator must not be null");

        throw $r2;

     label1:
        $i1 = r0.<android.view.VelocityTracker: int mPtr>;

        $z0 = staticinvoke <android.view.VelocityTracker: boolean nativeGetEstimator(int,int,android.view.VelocityTracker$Estimator)>($i1, i0, r1);

        return $z0;
    }

    public float getXVelocity()
    {
        android.view.VelocityTracker r0;
        int $i0;
        float $f0;

        r0 := @this: android.view.VelocityTracker;

        $i0 = r0.<android.view.VelocityTracker: int mPtr>;

        $f0 = staticinvoke <android.view.VelocityTracker: float nativeGetXVelocity(int,int)>($i0, -1);

        return $f0;
    }

    public float getXVelocity(int)
    {
        android.view.VelocityTracker r0;
        int i0, $i1;
        float $f0;

        r0 := @this: android.view.VelocityTracker;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.VelocityTracker: int mPtr>;

        $f0 = staticinvoke <android.view.VelocityTracker: float nativeGetXVelocity(int,int)>($i1, i0);

        return $f0;
    }

    public float getYVelocity()
    {
        android.view.VelocityTracker r0;
        int $i0;
        float $f0;

        r0 := @this: android.view.VelocityTracker;

        $i0 = r0.<android.view.VelocityTracker: int mPtr>;

        $f0 = staticinvoke <android.view.VelocityTracker: float nativeGetYVelocity(int,int)>($i0, -1);

        return $f0;
    }

    public float getYVelocity(int)
    {
        android.view.VelocityTracker r0;
        int i0, $i1;
        float $f0;

        r0 := @this: android.view.VelocityTracker;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.VelocityTracker: int mPtr>;

        $f0 = staticinvoke <android.view.VelocityTracker: float nativeGetYVelocity(int,int)>($i1, i0);

        return $f0;
    }

    public void recycle()
    {
        android.view.VelocityTracker r0;
        java.lang.String $r1;
        android.util.Pools$SynchronizedPool $r2;

        r0 := @this: android.view.VelocityTracker;

        $r1 = r0.<android.view.VelocityTracker: java.lang.String mStrategy>;

        if $r1 != null goto label1;

        virtualinvoke r0.<android.view.VelocityTracker: void clear()>();

        $r2 = <android.view.VelocityTracker: android.util.Pools$SynchronizedPool sPool>;

        virtualinvoke $r2.<android.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0);

     label1:
        return;
    }
}
