public abstract class android.hardware.SensorManager extends java.lang.Object
{
    public static final int AXIS_MINUS_X;
    public static final int AXIS_MINUS_Y;
    public static final int AXIS_MINUS_Z;
    public static final int AXIS_X;
    public static final int AXIS_Y;
    public static final int AXIS_Z;
    public static final int DATA_X;
    public static final int DATA_Y;
    public static final int DATA_Z;
    public static final float GRAVITY_DEATH_STAR_I;
    public static final float GRAVITY_EARTH;
    public static final float GRAVITY_JUPITER;
    public static final float GRAVITY_MARS;
    public static final float GRAVITY_MERCURY;
    public static final float GRAVITY_MOON;
    public static final float GRAVITY_NEPTUNE;
    public static final float GRAVITY_PLUTO;
    public static final float GRAVITY_SATURN;
    public static final float GRAVITY_SUN;
    public static final float GRAVITY_THE_ISLAND;
    public static final float GRAVITY_URANUS;
    public static final float GRAVITY_VENUS;
    public static final float LIGHT_CLOUDY;
    public static final float LIGHT_FULLMOON;
    public static final float LIGHT_NO_MOON;
    public static final float LIGHT_OVERCAST;
    public static final float LIGHT_SHADE;
    public static final float LIGHT_SUNLIGHT;
    public static final float LIGHT_SUNLIGHT_MAX;
    public static final float LIGHT_SUNRISE;
    public static final float MAGNETIC_FIELD_EARTH_MAX;
    public static final float MAGNETIC_FIELD_EARTH_MIN;
    public static final float PRESSURE_STANDARD_ATMOSPHERE;
    public static final int RAW_DATA_INDEX;
    public static final int RAW_DATA_X;
    public static final int RAW_DATA_Y;
    public static final int RAW_DATA_Z;
    public static final int SENSOR_ACCELEROMETER;
    public static final int SENSOR_ALL;
    public static final int SENSOR_DELAY_FASTEST;
    public static final int SENSOR_DELAY_GAME;
    public static final int SENSOR_DELAY_NORMAL;
    public static final int SENSOR_DELAY_UI;
    public static final int SENSOR_LIGHT;
    public static final int SENSOR_MAGNETIC_FIELD;
    public static final int SENSOR_MAX;
    public static final int SENSOR_MIN;
    public static final int SENSOR_ORIENTATION;
    public static final int SENSOR_ORIENTATION_RAW;
    public static final int SENSOR_PROXIMITY;
    public static final int SENSOR_STATUS_ACCURACY_HIGH;
    public static final int SENSOR_STATUS_ACCURACY_LOW;
    public static final int SENSOR_STATUS_ACCURACY_MEDIUM;
    public static final int SENSOR_STATUS_UNRELIABLE;
    public static final int SENSOR_TEMPERATURE;
    public static final int SENSOR_TRICORDER;
    public static final float STANDARD_GRAVITY;
    protected static final java.lang.String TAG;
    private static final float[] mTempMatrix;
    private android.hardware.LegacySensorManager mLegacySensorManager;
    private final android.util.SparseArray mSensorListByType;

    static void <clinit>()
    {
        float[] $r0;

        <android.hardware.SensorManager: java.lang.String TAG> = "SensorManager";

        <android.hardware.SensorManager: float STANDARD_GRAVITY> = 9.80665F;

        <android.hardware.SensorManager: int SENSOR_TRICORDER> = 64;

        <android.hardware.SensorManager: int SENSOR_TEMPERATURE> = 4;

        <android.hardware.SensorManager: int SENSOR_STATUS_UNRELIABLE> = 0;

        <android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_MEDIUM> = 2;

        <android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_LOW> = 1;

        <android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_HIGH> = 3;

        <android.hardware.SensorManager: int SENSOR_PROXIMITY> = 32;

        <android.hardware.SensorManager: int SENSOR_ORIENTATION_RAW> = 128;

        <android.hardware.SensorManager: int SENSOR_ORIENTATION> = 1;

        <android.hardware.SensorManager: int SENSOR_MIN> = 1;

        <android.hardware.SensorManager: int SENSOR_MAX> = 64;

        <android.hardware.SensorManager: int SENSOR_MAGNETIC_FIELD> = 8;

        <android.hardware.SensorManager: int SENSOR_LIGHT> = 16;

        <android.hardware.SensorManager: int SENSOR_DELAY_UI> = 2;

        <android.hardware.SensorManager: int SENSOR_DELAY_NORMAL> = 3;

        <android.hardware.SensorManager: int SENSOR_DELAY_GAME> = 1;

        <android.hardware.SensorManager: int SENSOR_DELAY_FASTEST> = 0;

        <android.hardware.SensorManager: int SENSOR_ALL> = 127;

        <android.hardware.SensorManager: int SENSOR_ACCELEROMETER> = 2;

        <android.hardware.SensorManager: int RAW_DATA_Z> = 5;

        <android.hardware.SensorManager: int RAW_DATA_Y> = 4;

        <android.hardware.SensorManager: int RAW_DATA_X> = 3;

        <android.hardware.SensorManager: int RAW_DATA_INDEX> = 3;

        <android.hardware.SensorManager: float PRESSURE_STANDARD_ATMOSPHERE> = 1013.25F;

        <android.hardware.SensorManager: float MAGNETIC_FIELD_EARTH_MIN> = 30.0F;

        <android.hardware.SensorManager: float MAGNETIC_FIELD_EARTH_MAX> = 60.0F;

        <android.hardware.SensorManager: float LIGHT_SUNRISE> = 400.0F;

        <android.hardware.SensorManager: float LIGHT_SUNLIGHT_MAX> = 120000.0F;

        <android.hardware.SensorManager: float LIGHT_SUNLIGHT> = 110000.0F;

        <android.hardware.SensorManager: float LIGHT_SHADE> = 20000.0F;

        <android.hardware.SensorManager: float LIGHT_OVERCAST> = 10000.0F;

        <android.hardware.SensorManager: float LIGHT_NO_MOON> = 0.001F;

        <android.hardware.SensorManager: float LIGHT_FULLMOON> = 0.25F;

        <android.hardware.SensorManager: float LIGHT_CLOUDY> = 100.0F;

        <android.hardware.SensorManager: float GRAVITY_VENUS> = 8.87F;

        <android.hardware.SensorManager: float GRAVITY_URANUS> = 8.69F;

        <android.hardware.SensorManager: float GRAVITY_THE_ISLAND> = 4.815162F;

        <android.hardware.SensorManager: float GRAVITY_SUN> = 275.0F;

        <android.hardware.SensorManager: float GRAVITY_SATURN> = 8.96F;

        <android.hardware.SensorManager: float GRAVITY_PLUTO> = 0.6F;

        <android.hardware.SensorManager: float GRAVITY_NEPTUNE> = 11.0F;

        <android.hardware.SensorManager: float GRAVITY_MOON> = 1.6F;

        <android.hardware.SensorManager: float GRAVITY_MERCURY> = 3.7F;

        <android.hardware.SensorManager: float GRAVITY_MARS> = 3.71F;

        <android.hardware.SensorManager: float GRAVITY_JUPITER> = 23.12F;

        <android.hardware.SensorManager: float GRAVITY_EARTH> = 9.80665F;

        <android.hardware.SensorManager: float GRAVITY_DEATH_STAR_I> = 3.5303614E-7F;

        <android.hardware.SensorManager: int DATA_Z> = 2;

        <android.hardware.SensorManager: int DATA_Y> = 1;

        <android.hardware.SensorManager: int DATA_X> = 0;

        <android.hardware.SensorManager: int AXIS_Z> = 3;

        <android.hardware.SensorManager: int AXIS_Y> = 2;

        <android.hardware.SensorManager: int AXIS_X> = 1;

        <android.hardware.SensorManager: int AXIS_MINUS_Z> = 131;

        <android.hardware.SensorManager: int AXIS_MINUS_Y> = 130;

        <android.hardware.SensorManager: int AXIS_MINUS_X> = 129;

        $r0 = newarray (float)[16];

        <android.hardware.SensorManager: float[] mTempMatrix> = $r0;

        return;
    }

    public void <init>()
    {
        android.hardware.SensorManager r0;
        android.util.SparseArray $r1;

        r0 := @this: android.hardware.SensorManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.SensorManager: android.util.SparseArray mSensorListByType> = $r1;

        return;
    }

    public static float getAltitude(float, float)
    {
        float f0, f1, $f2, $f3, $f4, $f5;
        double $d0, $d1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = f1 / f0;

        $d0 = (double) $f2;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, 0.19029495120048523);

        $f3 = (float) $d1;

        $f4 = 1.0F - $f3;

        $f5 = 44330.0F * $f4;

        return $f5;
    }

    public static void getAngleChange(float[], float[], float[])
    {
        float[] r0, r1, r2;
        int i0, i1, $i2, $i3;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        r2 := @parameter2: float[];

        $i3 = lengthof r1;

        if $i3 != 9 goto label3;

        f0 = r1[0];

        f1 = r1[1];

        f2 = r1[2];

        f3 = r1[3];

        f4 = r1[4];

        f5 = r1[5];

        f6 = r1[6];

        f7 = r1[7];

        f8 = r1[8];

     label1:
        $i2 = lengthof r2;

        if $i2 != 9 goto label4;

        f9 = r2[0];

        f10 = r2[1];

        f12 = r2[2];

        f11 = r2[3];

        f14 = r2[4];

        f13 = r2[5];

        f16 = r2[6];

        f15 = r2[7];

        f18 = r2[8];

     label2:
        $f23 = f9 * f1;

        $f24 = f11 * f4;

        $f28 = $f23 + $f24;

        $f27 = f16 * f7;

        f17 = $f28 + $f27;

        $f26 = f10 * f1;

        $f25 = f14 * f4;

        $f32 = $f26 + $f25;

        $f31 = f15 * f7;

        f20 = $f32 + $f31;

        $f30 = f12 * f0;

        $f29 = f13 * f3;

        $f36 = $f30 + $f29;

        $f35 = f18 * f6;

        f19 = $f36 + $f35;

        $f34 = f12 * f1;

        $f33 = f13 * f4;

        $f40 = $f34 + $f33;

        $f39 = f18 * f7;

        f22 = $f40 + $f39;

        $f38 = f12 * f2;

        $f37 = f13 * f5;

        $f41 = $f38 + $f37;

        $f42 = f18 * f8;

        f21 = $f41 + $f42;

        $d0 = (double) f17;

        $d1 = (double) f20;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f44 = (float) $d2;

        r0[0] = $f44;

        $f43 = neg f22;

        $d4 = (double) $f43;

        $d3 = staticinvoke <java.lang.Math: double asin(double)>($d4);

        $f45 = (float) $d3;

        r0[1] = $f45;

        $f46 = neg f19;

        $d5 = (double) $f46;

        $d6 = (double) f21;

        $d7 = staticinvoke <java.lang.Math: double atan2(double,double)>($d5, $d6);

        $f47 = (float) $d7;

        r0[2] = $f47;

        return;

     label3:
        i0 = lengthof r1;

        f0 = 0.0F;

        f1 = 0.0F;

        f2 = 0.0F;

        f3 = 0.0F;

        f4 = 0.0F;

        f5 = 0.0F;

        f6 = 0.0F;

        f7 = 0.0F;

        f8 = 0.0F;

        if i0 != 16 goto label1;

        f0 = r1[0];

        f1 = r1[1];

        f2 = r1[2];

        f3 = r1[4];

        f4 = r1[5];

        f5 = r1[6];

        f6 = r1[8];

        f7 = r1[9];

        f8 = r1[10];

        goto label1;

     label4:
        i1 = lengthof r2;

        f9 = 0.0F;

        f10 = 0.0F;

        f12 = 0.0F;

        f11 = 0.0F;

        f14 = 0.0F;

        f13 = 0.0F;

        f16 = 0.0F;

        f15 = 0.0F;

        f18 = 0.0F;

        if i1 != 16 goto label2;

        f9 = r2[0];

        f10 = r2[1];

        f12 = r2[2];

        f11 = r2[4];

        f14 = r2[5];

        f13 = r2[6];

        f16 = r2[8];

        f15 = r2[9];

        f18 = r2[10];

        goto label2;
    }

    private static int getDelay(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label1;
        };

     label1:
        return i0;

     label2:
        return 0;

     label3:
        return 20000;

     label4:
        return 66667;

     label5:
        return 200000;
    }

    public static float getInclination(float[])
    {
        float[] r0;
        int $i0;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @parameter0: float[];

        $i0 = lengthof r0;

        if $i0 != 9 goto label1;

        $f3 = r0[5];

        $d4 = (double) $f3;

        $f4 = r0[4];

        $d3 = (double) $f4;

        $d5 = staticinvoke <java.lang.Math: double atan2(double,double)>($d4, $d3);

        $f5 = (float) $d5;

        return $f5;

     label1:
        $f0 = r0[6];

        $d1 = (double) $f0;

        $f1 = r0[5];

        $d0 = (double) $f1;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        $f2 = (float) $d2;

        return $f2;
    }

    private android.hardware.LegacySensorManager getLegacySensorManager()
    {
        android.hardware.SensorManager r0;
        android.util.SparseArray r1;
        java.lang.Throwable r2, $r6;
        android.hardware.LegacySensorManager r3, $r4, $r5;

        r0 := @this: android.hardware.SensorManager;

        r1 = r0.<android.hardware.SensorManager: android.util.SparseArray mSensorListByType>;

        entermonitor r1;

     label1:
        $r4 = r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager mLegacySensorManager>;

        if $r4 != null goto label2;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SensorManager", "This application is using deprecated SensorManager API which will be removed someday.  Please consider switching to the new API.");

        $r5 = new android.hardware.LegacySensorManager;

        specialinvoke $r5.<android.hardware.LegacySensorManager: void <init>(android.hardware.SensorManager)>(r0);

        r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager mLegacySensorManager> = $r5;

     label2:
        r3 = r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager mLegacySensorManager>;

        exitmonitor r1;

     label3:
        return r3;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static float[] getOrientation(float[], float[])
    {
        float[] r0, r1;
        int $i0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        $i0 = lengthof r0;

        if $i0 != 9 goto label1;

        $f11 = r0[1];

        $d8 = (double) $f11;

        $f10 = r0[4];

        $d9 = (double) $f10;

        $d10 = staticinvoke <java.lang.Math: double atan2(double,double)>($d8, $d9);

        $f13 = (float) $d10;

        r1[0] = $f13;

        $f12 = r0[7];

        $f14 = neg $f12;

        $d12 = (double) $f14;

        $d11 = staticinvoke <java.lang.Math: double asin(double)>($d12);

        $f17 = (float) $d11;

        r1[1] = $f17;

        $f18 = r0[6];

        $f15 = neg $f18;

        $d15 = (double) $f15;

        $f16 = r0[8];

        $d14 = (double) $f16;

        $d13 = staticinvoke <java.lang.Math: double atan2(double,double)>($d15, $d14);

        $f19 = (float) $d13;

        r1[2] = $f19;

        return r1;

     label1:
        $f0 = r0[1];

        $d1 = (double) $f0;

        $f1 = r0[5];

        $d0 = (double) $f1;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        $f2 = (float) $d2;

        r1[0] = $f2;

        $f3 = r0[9];

        $f4 = neg $f3;

        $d3 = (double) $f4;

        $d4 = staticinvoke <java.lang.Math: double asin(double)>($d3);

        $f5 = (float) $d4;

        r1[1] = $f5;

        $f7 = r0[8];

        $f6 = neg $f7;

        $d6 = (double) $f6;

        $f8 = r0[10];

        $d5 = (double) $f8;

        $d7 = staticinvoke <java.lang.Math: double atan2(double,double)>($d6, $d5);

        $f9 = (float) $d7;

        r1[2] = $f9;

        return r1;
    }

    public static void getQuaternionFromVector(float[], float[])
    {
        float[] r0, r1;
        byte b0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18;
        int $i1;
        double $d0, $d1;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        $i1 = lengthof r1;

        if $i1 != 4 goto label2;

        $f18 = r1[3];

        r0[0] = $f18;

     label1:
        $f15 = r1[0];

        r0[1] = $f15;

        $f14 = r1[1];

        r0[2] = $f14;

        $f17 = r1[2];

        r0[3] = $f17;

        return;

     label2:
        $f2 = r1[0];

        $f1 = r1[0];

        $f3 = $f2 * $f1;

        $f7 = 1.0F - $f3;

        $f5 = r1[1];

        $f4 = r1[1];

        $f6 = $f5 * $f4;

        $f11 = $f7 - $f6;

        $f9 = r1[2];

        $f8 = r1[2];

        $f10 = $f9 * $f8;

        $f13 = $f11 - $f10;

        r0[0] = $f13;

        $f12 = r0[0];

        b0 = $f12 cmpl 0.0F;

        f0 = 0.0F;

        if b0 <= 0 goto label3;

        $f16 = r0[0];

        $d1 = (double) $f16;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        f0 = (float) $d0;

     label3:
        r0[0] = f0;

        goto label1;
    }

    public static boolean getRotationMatrix(float[], float[], float[], float[])
    {
        float[] r0, r1, r2, r3;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57, $f58, $f59, $f60, $f61, $f62, $f63, $f64;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0;
        int $i1, $i2, $i3, $i4;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        r2 := @parameter2: float[];

        r3 := @parameter3: float[];

        f0 = r2[0];

        f1 = r2[1];

        f2 = r2[2];

        f3 = r3[0];

        f4 = r3[1];

        f5 = r3[2];

        $f24 = f4 * f2;

        $f25 = f5 * f1;

        f6 = $f24 - $f25;

        $f26 = f5 * f0;

        $f27 = f3 * f2;

        f7 = $f26 - $f27;

        $f31 = f3 * f1;

        $f30 = f4 * f0;

        f8 = $f31 - $f30;

        $f29 = f6 * f6;

        $f28 = f7 * f7;

        $f34 = $f29 + $f28;

        $f33 = f8 * f8;

        $f32 = $f34 + $f33;

        $d0 = (double) $f32;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f9 = (float) $d1;

        $b0 = f9 cmpg 0.1F;

        if $b0 >= 0 goto label1;

        return 0;

     label1:
        f10 = 1.0F / f9;

        f11 = f6 * f10;

        f13 = f7 * f10;

        f12 = f8 * f10;

        $f36 = f0 * f0;

        $f35 = f1 * f1;

        $f39 = $f36 + $f35;

        $f38 = f2 * f2;

        $f37 = $f39 + $f38;

        $d2 = (double) $f37;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        $f41 = (float) $d3;

        f15 = 1.0F / $f41;

        f14 = f0 * f15;

        f17 = f1 * f15;

        f16 = f2 * f15;

        $f45 = f17 * f12;

        $f40 = f16 * f13;

        f19 = $f45 - $f40;

        $f43 = f16 * f11;

        $f44 = f14 * f12;

        f18 = $f43 - $f44;

        $f49 = f14 * f13;

        $f42 = f17 * f11;

        f21 = $f49 - $f42;

        if r0 == null goto label2;

        $i4 = lengthof r0;

        if $i4 != 9 goto label4;

        r0[0] = f11;

        r0[1] = f13;

        r0[2] = f12;

        r0[3] = f19;

        r0[4] = f18;

        r0[5] = f21;

        r0[6] = f14;

        r0[7] = f17;

        r0[8] = f16;

     label2:
        if r1 == null goto label3;

        $f47 = f3 * f3;

        $f48 = f4 * f4;

        $f51 = $f47 + $f48;

        $f46 = f5 * f5;

        $f50 = $f51 + $f46;

        $d4 = (double) $f50;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $f56 = (float) $d5;

        f20 = 1.0F / $f56;

        $f58 = f3 * f19;

        $f57 = f4 * f18;

        $f53 = $f58 + $f57;

        $f52 = f5 * f21;

        $f54 = $f53 + $f52;

        f23 = f20 * $f54;

        $f61 = f3 * f14;

        $f55 = f4 * f17;

        $f63 = $f61 + $f55;

        $f62 = f5 * f16;

        $f64 = $f63 + $f62;

        f22 = f20 * $f64;

        $i1 = lengthof r1;

        if $i1 != 9 goto label5;

        r1[0] = 1.0F;

        r1[1] = 0.0F;

        r1[2] = 0.0F;

        r1[3] = 0.0F;

        r1[4] = f23;

        r1[5] = f22;

        r1[6] = 0.0F;

        $f60 = neg f22;

        r1[7] = $f60;

        r1[8] = f23;

     label3:
        return 1;

     label4:
        $i3 = lengthof r0;

        if $i3 != 16 goto label2;

        r0[0] = f11;

        r0[1] = f13;

        r0[2] = f12;

        r0[3] = 0.0F;

        r0[4] = f19;

        r0[5] = f18;

        r0[6] = f21;

        r0[7] = 0.0F;

        r0[8] = f14;

        r0[9] = f17;

        r0[10] = f16;

        r0[11] = 0.0F;

        r0[12] = 0.0F;

        r0[13] = 0.0F;

        r0[14] = 0.0F;

        r0[15] = 1.0F;

        goto label2;

     label5:
        $i2 = lengthof r1;

        if $i2 != 16 goto label3;

        r1[0] = 1.0F;

        r1[1] = 0.0F;

        r1[2] = 0.0F;

        r1[4] = 0.0F;

        r1[5] = f23;

        r1[6] = f22;

        r1[8] = 0.0F;

        $f59 = neg f22;

        r1[9] = $f59;

        r1[10] = f23;

        r1[14] = 0.0F;

        r1[13] = 0.0F;

        r1[12] = 0.0F;

        r1[11] = 0.0F;

        r1[7] = 0.0F;

        r1[3] = 0.0F;

        r1[15] = 1.0F;

        goto label3;
    }

    public static void getRotationMatrixFromVector(float[], float[])
    {
        float[] r0, r1;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51;
        int $i0, $i2, $i3;
        byte $b1;
        double $d0, $d1;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        f0 = r1[0];

        f1 = r1[1];

        f2 = r1[2];

        $i0 = lengthof r1;

        if $i0 != 4 goto label3;

        f4 = r1[3];

     label1:
        $f19 = 2.0F * f0;

        f5 = f0 * $f19;

        $f21 = 2.0F * f1;

        f6 = f1 * $f21;

        $f20 = 2.0F * f2;

        f7 = f2 * $f20;

        $f23 = 2.0F * f0;

        f8 = f1 * $f23;

        $f22 = 2.0F * f2;

        f9 = f4 * $f22;

        $f25 = 2.0F * f0;

        f10 = f2 * $f25;

        $f24 = 2.0F * f1;

        f11 = f4 * $f24;

        $f27 = 2.0F * f1;

        f12 = f2 * $f27;

        $f26 = 2.0F * f0;

        f13 = f4 * $f26;

        $i2 = lengthof r0;

        if $i2 != 9 goto label6;

        $f38 = 1.0F - f6;

        $f39 = $f38 - f7;

        r0[0] = $f39;

        $f45 = f8 - f9;

        r0[1] = $f45;

        $f44 = f10 + f11;

        r0[2] = $f44;

        $f43 = f8 + f9;

        r0[3] = $f43;

        $f42 = 1.0F - f5;

        $f49 = $f42 - f7;

        r0[4] = $f49;

        $f48 = f12 - f13;

        r0[5] = $f48;

        $f47 = f10 - f11;

        r0[6] = $f47;

        $f46 = f12 + f13;

        r0[7] = $f46;

        $f51 = 1.0F - f5;

        $f50 = $f51 - f6;

        r0[8] = $f50;

     label2:
        return;

     label3:
        $f14 = f0 * f0;

        $f15 = 1.0F - $f14;

        $f16 = f1 * f1;

        $f17 = $f15 - $f16;

        $f18 = f2 * f2;

        f3 = $f17 - $f18;

        $b1 = f3 cmpl 0.0F;

        if $b1 <= 0 goto label5;

        $d1 = (double) f3;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        f4 = (float) $d0;

     label4:
        goto label1;

     label5:
        f4 = 0.0F;

        goto label4;

     label6:
        $i3 = lengthof r0;

        if $i3 != 16 goto label2;

        $f28 = 1.0F - f6;

        $f29 = $f28 - f7;

        r0[0] = $f29;

        $f32 = f8 - f9;

        r0[1] = $f32;

        $f33 = f10 + f11;

        r0[2] = $f33;

        r0[3] = 0.0F;

        $f30 = f8 + f9;

        r0[4] = $f30;

        $f31 = 1.0F - f5;

        $f36 = $f31 - f7;

        r0[5] = $f36;

        $f37 = f12 - f13;

        r0[6] = $f37;

        r0[7] = 0.0F;

        $f34 = f10 - f11;

        r0[8] = $f34;

        $f35 = f12 + f13;

        r0[9] = $f35;

        $f40 = 1.0F - f5;

        $f41 = $f40 - f6;

        r0[10] = $f41;

        r0[11] = 0.0F;

        r0[14] = 0.0F;

        r0[13] = 0.0F;

        r0[12] = 0.0F;

        r0[15] = 1.0F;

        return;
    }

    public static boolean remapCoordinateSystem(float[], int, int, float[])
    {
        float[] r0, r1, r2;
        int i0, i1, i2, i3;
        java.lang.Throwable r3, $r4;
        boolean $z0, $z1;
        float $f0;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: float[];

        if r0 != r1 goto label09;

        r2 = <android.hardware.SensorManager: float[] mTempMatrix>;

        entermonitor r2;

     label01:
        $z1 = staticinvoke <android.hardware.SensorManager: boolean remapCoordinateSystemImpl(float[],int,int,float[])>(r0, i0, i1, r2);

        if $z1 == 0 goto label08;

        i2 = lengthof r1;

     label02:
        i3 = 0;

     label03:
        if i3 >= i2 goto label06;

     label04:
        $f0 = r2[i3];

        r1[i3] = $f0;

     label05:
        i3 = i3 + 1;

        goto label03;

     label06:
        exitmonitor r2;

     label07:
        return 1;

     label08:
        exitmonitor r2;

     label09:
        $z0 = staticinvoke <android.hardware.SensorManager: boolean remapCoordinateSystemImpl(float[],int,int,float[])>(r0, i0, i1, r1);

        return $z0;

     label10:
        $r4 := @caughtexception;

        r3 = $r4;

     label11:
        exitmonitor r2;

     label12:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private static boolean remapCoordinateSystemImpl(float[], int, int, float[])
    {
        float[] r0, r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i10, i11, i12, i13, i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        boolean z0, z1, z2;
        byte b9;
        float f0, f1, f2, $f3, $f4, $f5;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: float[];

        i2 = lengthof r1;

        $i17 = lengthof r0;

        if $i17 == i2 goto label01;

        return 0;

     label01:
        $i16 = i0 & 124;

        if $i16 != 0 goto label02;

        $i19 = i1 & 124;

        if $i19 == 0 goto label03;

     label02:
        return 0;

     label03:
        $i18 = i0 & 3;

        if $i18 == 0 goto label04;

        $i21 = i1 & 3;

        if $i21 != 0 goto label05;

     label04:
        return 0;

     label05:
        $i23 = i0 & 3;

        $i20 = i1 & 3;

        if $i23 != $i20 goto label06;

        return 0;

     label06:
        i3 = i0 ^ i1;

        $i22 = i0 & 3;

        i4 = -1 + $i22;

        $i26 = i1 & 3;

        i5 = -1 + $i26;

        $i27 = i3 & 3;

        i6 = -1 + $i27;

        $i24 = i6 + 1;

        i7 = $i24 % 3;

        $i25 = i6 + 2;

        i8 = $i25 % 3;

        $i31 = i4 ^ i7;

        $i30 = i5 ^ i8;

        $i28 = $i31 | $i30;

        if $i28 == 0 goto label07;

        i3 = i3 ^ 128;

     label07:
        if i0 < 128 goto label20;

        z0 = 1;

     label08:
        if i1 < 128 goto label21;

        z1 = 1;

     label09:
        if i3 < 128 goto label22;

        z2 = 1;

     label10:
        if i2 != 16 goto label23;

        b9 = 4;

     label11:
        i10 = 0;

     label12:
        if i10 >= 3 goto label28;

        i12 = i10 * b9;

        i11 = 0;

     label13:
        if i11 >= 3 goto label27;

        if i4 != i11 goto label15;

        i15 = i12 + i11;

        if z0 == 0 goto label24;

        $i35 = i12 + 0;

        $f4 = r0[$i35];

        f2 = neg $f4;

     label14:
        r1[i15] = f2;

     label15:
        if i5 != i11 goto label17;

        i14 = i12 + i11;

        if z1 == 0 goto label25;

        $i33 = i12 + 1;

        $f5 = r0[$i33];

        f1 = neg $f5;

     label16:
        r1[i14] = f1;

     label17:
        if i6 != i11 goto label19;

        i13 = i12 + i11;

        if z2 == 0 goto label26;

        $i34 = i12 + 2;

        $f3 = r0[$i34];

        f0 = neg $f3;

     label18:
        r1[i13] = f0;

     label19:
        i11 = i11 + 1;

        goto label13;

     label20:
        z0 = 0;

        goto label08;

     label21:
        z1 = 0;

        goto label09;

     label22:
        z2 = 0;

        goto label10;

     label23:
        b9 = 3;

        goto label11;

     label24:
        $i36 = i12 + 0;

        f2 = r0[$i36];

        goto label14;

     label25:
        $i32 = i12 + 1;

        f1 = r0[$i32];

        goto label16;

     label26:
        $i29 = i12 + 2;

        f0 = r0[$i29];

        goto label18;

     label27:
        i10 = i10 + 1;

        goto label12;

     label28:
        if i2 != 16 goto label29;

        r1[14] = 0.0F;

        r1[13] = 0.0F;

        r1[12] = 0.0F;

        r1[11] = 0.0F;

        r1[7] = 0.0F;

        r1[3] = 0.0F;

        r1[15] = 1.0F;

     label29:
        return 1;
    }

    public boolean cancelTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor)
    {
        android.hardware.SensorManager r0;
        android.hardware.TriggerEventListener r1;
        android.hardware.Sensor r2;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.TriggerEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener,android.hardware.Sensor,boolean)>(r1, r2, 1);

        return $z0;
    }

    protected abstract boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor, boolean);

    public boolean flush(android.hardware.SensorEventListener)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean flushImpl(android.hardware.SensorEventListener)>(r1);

        return $z0;
    }

    protected abstract boolean flushImpl(android.hardware.SensorEventListener);

    public android.hardware.Sensor getDefaultSensor(int)
    {
        android.hardware.SensorManager r0;
        int i0;
        java.util.List r1;
        boolean $z0;
        java.lang.Object $r2;
        android.hardware.Sensor $r3;

        r0 := @this: android.hardware.SensorManager;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.hardware.SensorManager: java.util.List getSensorList(int)>(i0);

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (android.hardware.Sensor) $r2;

        return $r3;
    }

    protected abstract java.util.List getFullSensorList();

    public java.util.List getSensorList(int)
    {
        android.hardware.SensorManager r0;
        int i0, $i1;
        java.util.List r1, r4, r5;
        android.util.SparseArray r2, $r8, $r12;
        java.lang.Throwable r3, $r13;
        java.util.Iterator r6;
        android.hardware.Sensor r7;
        java.lang.Object $r9, $r11;
        java.util.ArrayList $r10;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.hardware.SensorManager: java.util.List getFullSensorList()>();

        r2 = r0.<android.hardware.SensorManager: android.util.SparseArray mSensorListByType>;

        entermonitor r2;

     label01:
        $r8 = r0.<android.hardware.SensorManager: android.util.SparseArray mSensorListByType>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (java.util.List) $r9;

     label02:
        if r4 != null goto label04;

        if i0 != -1 goto label06;

        r5 = r1;

     label03:
        r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r5);

        $r12 = r0.<android.hardware.SensorManager: android.util.SparseArray mSensorListByType>;

        virtualinvoke $r12.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r4);

     label04:
        exitmonitor r2;

     label05:
        return r4;

     label06:
        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r5 = $r10;

        r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r11 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.hardware.Sensor) $r11;

        $i1 = virtualinvoke r7.<android.hardware.Sensor: int getType()>();

        if $i1 != i0 goto label07;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r7);

     label08:
        goto label07;

     label09:
        $r13 := @caughtexception;

        r3 = $r13;

     label10:
        exitmonitor r2;

     label11:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int getSensors()
    {
        android.hardware.SensorManager r0;
        android.hardware.LegacySensorManager $r1;
        int $i0;

        r0 := @this: android.hardware.SensorManager;

        $r1 = specialinvoke r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager getLegacySensorManager()>();

        $i0 = virtualinvoke $r1.<android.hardware.LegacySensorManager: int getSensors()>();

        return $i0;
    }

    public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;
        int i0;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>(r1, r2, i0, null);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, int)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.hardware.SensorManager: int getDelay(int)>(i0);

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean registerListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler,int,int)>(r1, r2, $i2, null, i1, 0);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, int, android.os.Handler)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;
        int i0, i1, $i2;
        android.os.Handler r3;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: android.os.Handler;

        $i2 = staticinvoke <android.hardware.SensorManager: int getDelay(int)>(i0);

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean registerListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler,int,int)>(r1, r2, $i2, r3, i1, 0);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;
        int i0, $i1;
        android.os.Handler r3;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.Handler;

        $i1 = staticinvoke <android.hardware.SensorManager: int getDelay(int)>(i0);

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean registerListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler,int,int)>(r1, r2, $i1, r3, 0, 0);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorListener, int)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorListener r1;
        int i0;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorListener;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>(r1, i0, 3);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorListener, int, int)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorListener r1;
        int i0, i1;
        android.hardware.LegacySensorManager $r2;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorListener;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager getLegacySensorManager()>();

        $z0 = virtualinvoke $r2.<android.hardware.LegacySensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>(r1, i0, i1);

        return $z0;
    }

    protected abstract boolean registerListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler, int, int);

    public boolean requestTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor)
    {
        android.hardware.SensorManager r0;
        android.hardware.TriggerEventListener r1;
        android.hardware.Sensor r2;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.TriggerEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean requestTriggerSensorImpl(android.hardware.TriggerEventListener,android.hardware.Sensor)>(r1, r2);

        return $z0;
    }

    protected abstract boolean requestTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor);

    public void unregisterListener(android.hardware.SensorEventListener)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<android.hardware.SensorManager: void unregisterListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor)>(r1, null);

        return;
    }

    public void unregisterListener(android.hardware.SensorEventListener, android.hardware.Sensor)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return;

     label2:
        virtualinvoke r0.<android.hardware.SensorManager: void unregisterListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor)>(r1, r2);

        return;
    }

    public void unregisterListener(android.hardware.SensorListener)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorListener r1;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorListener;

        virtualinvoke r0.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)>(r1, 255);

        return;
    }

    public void unregisterListener(android.hardware.SensorListener, int)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorListener r1;
        int i0;
        android.hardware.LegacySensorManager $r2;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorListener;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager getLegacySensorManager()>();

        virtualinvoke $r2.<android.hardware.LegacySensorManager: void unregisterListener(android.hardware.SensorListener,int)>(r1, i0);

        return;
    }

    protected abstract void unregisterListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor);
}
