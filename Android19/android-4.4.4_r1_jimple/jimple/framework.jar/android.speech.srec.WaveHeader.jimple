public class android.speech.srec.WaveHeader extends java.lang.Object
{
    public static final short FORMAT_ALAW;
    public static final short FORMAT_PCM;
    public static final short FORMAT_ULAW;
    private static final int HEADER_LENGTH;
    private static final java.lang.String TAG;
    private short mBitsPerSample;
    private short mFormat;
    private int mNumBytes;
    private short mNumChannels;
    private int mSampleRate;

    public void <init>()
    {
        android.speech.srec.WaveHeader r0;

        r0 := @this: android.speech.srec.WaveHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(short, short, int, short, int)
    {
        android.speech.srec.WaveHeader r0;
        short s0, s1, s3;
        int i2, i4;

        r0 := @this: android.speech.srec.WaveHeader;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        i2 := @parameter2: int;

        s3 := @parameter3: short;

        i4 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.speech.srec.WaveHeader: short mFormat> = s0;

        r0.<android.speech.srec.WaveHeader: int mSampleRate> = i2;

        r0.<android.speech.srec.WaveHeader: short mNumChannels> = s1;

        r0.<android.speech.srec.WaveHeader: short mBitsPerSample> = s3;

        r0.<android.speech.srec.WaveHeader: int mNumBytes> = i4;

        return;
    }

    private static void readId(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.lang.String r1, $r6;
        int i0, $i1, $i3;
        char $c2;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        i0 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 >= $i1 goto label3;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        $i3 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $c2 == $i3 goto label2;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tag not present");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    private static int readInt(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i2 = $i1 << 8;

        $i3 = $i0 | $i2;

        $i4 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i5 = $i4 << 16;

        $i6 = $i3 | $i5;

        $i7 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i8 = $i7 << 24;

        $i9 = $i6 | $i8;

        return $i9;
    }

    private static short readShort(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int $i0, $i1, $i2, $i3;
        short $s4;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i2 = $i1 << 8;

        $i3 = $i0 | $i2;

        $s4 = (short) $i3;

        return $s4;
    }

    private static void writeId(java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.lang.String r1;
        int i0, $i1;
        char $c2;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.lang.String;

        i0 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 >= $i1 goto label2;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($c2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private static void writeInt(java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        $i1 = i0 >> 0;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i1);

        $i2 = i0 >> 8;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i2);

        $i3 = i0 >> 16;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i3);

        $i4 = i0 >> 24;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i4);

        return;
    }

    private static void writeShort(java.io.OutputStream, short) throws java.io.IOException
    {
        java.io.OutputStream r0;
        short s0, $s1, $s2;

        r0 := @parameter0: java.io.OutputStream;

        s0 := @parameter1: short;

        $s1 = s0 >> 0;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($s1);

        $s2 = s0 >> 8;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($s2);

        return;
    }

    public short getBitsPerSample()
    {
        android.speech.srec.WaveHeader r0;
        short $s0;

        r0 := @this: android.speech.srec.WaveHeader;

        $s0 = r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        return $s0;
    }

    public short getFormat()
    {
        android.speech.srec.WaveHeader r0;
        short $s0;

        r0 := @this: android.speech.srec.WaveHeader;

        $s0 = r0.<android.speech.srec.WaveHeader: short mFormat>;

        return $s0;
    }

    public int getNumBytes()
    {
        android.speech.srec.WaveHeader r0;
        int $i0;

        r0 := @this: android.speech.srec.WaveHeader;

        $i0 = r0.<android.speech.srec.WaveHeader: int mNumBytes>;

        return $i0;
    }

    public short getNumChannels()
    {
        android.speech.srec.WaveHeader r0;
        short $s0;

        r0 := @this: android.speech.srec.WaveHeader;

        $s0 = r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        return $s0;
    }

    public int getSampleRate()
    {
        android.speech.srec.WaveHeader r0;
        int $i0;

        r0 := @this: android.speech.srec.WaveHeader;

        $i0 = r0.<android.speech.srec.WaveHeader: int mSampleRate>;

        return $i0;
    }

    public int read(java.io.InputStream) throws java.io.IOException
    {
        android.speech.srec.WaveHeader r0;
        java.io.InputStream r1;
        int i0, $i4, $i7, $i10, $i11, $i13, $i14, $i17, $i18, $i19;
        short s1, $s5, $s6, $s8, $s9, $s12, $s15, $s16;
        java.io.IOException $r2, $r3, $r4;

        r0 := @this: android.speech.srec.WaveHeader;

        r1 := @parameter0: java.io.InputStream;

        staticinvoke <android.speech.srec.WaveHeader: void readId(java.io.InputStream,java.lang.String)>(r1, "RIFF");

        staticinvoke <android.speech.srec.WaveHeader: int readInt(java.io.InputStream)>(r1);

        staticinvoke <android.speech.srec.WaveHeader: void readId(java.io.InputStream,java.lang.String)>(r1, "WAVE");

        staticinvoke <android.speech.srec.WaveHeader: void readId(java.io.InputStream,java.lang.String)>(r1, "fmt ");

        $i4 = staticinvoke <android.speech.srec.WaveHeader: int readInt(java.io.InputStream)>(r1);

        if 16 == $i4 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("fmt chunk length not 16");

        throw $r3;

     label1:
        $s5 = staticinvoke <android.speech.srec.WaveHeader: short readShort(java.io.InputStream)>(r1);

        r0.<android.speech.srec.WaveHeader: short mFormat> = $s5;

        $s6 = staticinvoke <android.speech.srec.WaveHeader: short readShort(java.io.InputStream)>(r1);

        r0.<android.speech.srec.WaveHeader: short mNumChannels> = $s6;

        $i7 = staticinvoke <android.speech.srec.WaveHeader: int readInt(java.io.InputStream)>(r1);

        r0.<android.speech.srec.WaveHeader: int mSampleRate> = $i7;

        i0 = staticinvoke <android.speech.srec.WaveHeader: int readInt(java.io.InputStream)>(r1);

        s1 = staticinvoke <android.speech.srec.WaveHeader: short readShort(java.io.InputStream)>(r1);

        $s8 = staticinvoke <android.speech.srec.WaveHeader: short readShort(java.io.InputStream)>(r1);

        r0.<android.speech.srec.WaveHeader: short mBitsPerSample> = $s8;

        $s9 = r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        $i10 = r0.<android.speech.srec.WaveHeader: int mSampleRate>;

        $i11 = $s9 * $i10;

        $s12 = r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        $i14 = $i11 * $s12;

        $i13 = $i14 / 8;

        if i0 == $i13 goto label2;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("fmt.ByteRate field inconsistent");

        throw $r4;

     label2:
        $s15 = r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        $s16 = r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        $i18 = $s15 * $s16;

        $i17 = $i18 / 8;

        if s1 == $i17 goto label3;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("fmt.BlockAlign field inconsistent");

        throw $r2;

     label3:
        staticinvoke <android.speech.srec.WaveHeader: void readId(java.io.InputStream,java.lang.String)>(r1, "data");

        $i19 = staticinvoke <android.speech.srec.WaveHeader: int readInt(java.io.InputStream)>(r1);

        r0.<android.speech.srec.WaveHeader: int mNumBytes> = $i19;

        return 44;
    }

    public android.speech.srec.WaveHeader setBitsPerSample(short)
    {
        android.speech.srec.WaveHeader r0;
        short s0;

        r0 := @this: android.speech.srec.WaveHeader;

        s0 := @parameter0: short;

        r0.<android.speech.srec.WaveHeader: short mBitsPerSample> = s0;

        return r0;
    }

    public android.speech.srec.WaveHeader setFormat(short)
    {
        android.speech.srec.WaveHeader r0;
        short s0;

        r0 := @this: android.speech.srec.WaveHeader;

        s0 := @parameter0: short;

        r0.<android.speech.srec.WaveHeader: short mFormat> = s0;

        return r0;
    }

    public android.speech.srec.WaveHeader setNumBytes(int)
    {
        android.speech.srec.WaveHeader r0;
        int i0;

        r0 := @this: android.speech.srec.WaveHeader;

        i0 := @parameter0: int;

        r0.<android.speech.srec.WaveHeader: int mNumBytes> = i0;

        return r0;
    }

    public android.speech.srec.WaveHeader setNumChannels(short)
    {
        android.speech.srec.WaveHeader r0;
        short s0;

        r0 := @this: android.speech.srec.WaveHeader;

        s0 := @parameter0: short;

        r0.<android.speech.srec.WaveHeader: short mNumChannels> = s0;

        return r0;
    }

    public android.speech.srec.WaveHeader setSampleRate(int)
    {
        android.speech.srec.WaveHeader r0;
        int i0;

        r0 := @this: android.speech.srec.WaveHeader;

        i0 := @parameter0: int;

        r0.<android.speech.srec.WaveHeader: int mSampleRate> = i0;

        return r0;
    }

    public java.lang.String toString()
    {
        android.speech.srec.WaveHeader r0;
        java.lang.Object[] r1;
        short $s0, $s1, $s3;
        java.lang.Short $r2, $r3, $r5;
        int $i2, $i4;
        java.lang.Integer $r4, $r7;
        java.lang.String $r6;

        r0 := @this: android.speech.srec.WaveHeader;

        r1 = newarray (java.lang.Object)[5];

        $s0 = r0.<android.speech.srec.WaveHeader: short mFormat>;

        $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        r1[0] = $r2;

        $s1 = r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        $r3 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        r1[1] = $r3;

        $i2 = r0.<android.speech.srec.WaveHeader: int mSampleRate>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        r1[2] = $r4;

        $s3 = r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        $r5 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s3);

        r1[3] = $r5;

        $i4 = r0.<android.speech.srec.WaveHeader: int mNumBytes>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        r1[4] = $r7;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("WaveHeader format=%d numChannels=%d sampleRate=%d bitsPerSample=%d numBytes=%d", r1);

        return $r6;
    }

    public int write(java.io.OutputStream) throws java.io.IOException
    {
        android.speech.srec.WaveHeader r0;
        java.io.OutputStream r1;
        int $i0, $i1, $i4, $i5, $i8, $i9, $i10, $i13, $i15, $i16;
        short $s2, $s3, $s6, $s7, $s11, $s12, $s14, $s17;

        r0 := @this: android.speech.srec.WaveHeader;

        r1 := @parameter0: java.io.OutputStream;

        staticinvoke <android.speech.srec.WaveHeader: void writeId(java.io.OutputStream,java.lang.String)>(r1, "RIFF");

        $i0 = r0.<android.speech.srec.WaveHeader: int mNumBytes>;

        $i1 = 36 + $i0;

        staticinvoke <android.speech.srec.WaveHeader: void writeInt(java.io.OutputStream,int)>(r1, $i1);

        staticinvoke <android.speech.srec.WaveHeader: void writeId(java.io.OutputStream,java.lang.String)>(r1, "WAVE");

        staticinvoke <android.speech.srec.WaveHeader: void writeId(java.io.OutputStream,java.lang.String)>(r1, "fmt ");

        staticinvoke <android.speech.srec.WaveHeader: void writeInt(java.io.OutputStream,int)>(r1, 16);

        $s2 = r0.<android.speech.srec.WaveHeader: short mFormat>;

        staticinvoke <android.speech.srec.WaveHeader: void writeShort(java.io.OutputStream,short)>(r1, $s2);

        $s3 = r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        staticinvoke <android.speech.srec.WaveHeader: void writeShort(java.io.OutputStream,short)>(r1, $s3);

        $i4 = r0.<android.speech.srec.WaveHeader: int mSampleRate>;

        staticinvoke <android.speech.srec.WaveHeader: void writeInt(java.io.OutputStream,int)>(r1, $i4);

        $s6 = r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        $i5 = r0.<android.speech.srec.WaveHeader: int mSampleRate>;

        $i8 = $s6 * $i5;

        $s7 = r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        $i9 = $i8 * $s7;

        $i10 = $i9 / 8;

        staticinvoke <android.speech.srec.WaveHeader: void writeInt(java.io.OutputStream,int)>(r1, $i10);

        $s12 = r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        $s11 = r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        $i13 = $s12 * $s11;

        $i15 = $i13 / 8;

        $s14 = (short) $i15;

        staticinvoke <android.speech.srec.WaveHeader: void writeShort(java.io.OutputStream,short)>(r1, $s14);

        $s17 = r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        staticinvoke <android.speech.srec.WaveHeader: void writeShort(java.io.OutputStream,short)>(r1, $s17);

        staticinvoke <android.speech.srec.WaveHeader: void writeId(java.io.OutputStream,java.lang.String)>(r1, "data");

        $i16 = r0.<android.speech.srec.WaveHeader: int mNumBytes>;

        staticinvoke <android.speech.srec.WaveHeader: void writeInt(java.io.OutputStream,int)>(r1, $i16);

        return 44;
    }

    public static void <clinit>()
    {
        <android.speech.srec.WaveHeader: java.lang.String TAG> = "WaveHeader";

        <android.speech.srec.WaveHeader: int HEADER_LENGTH> = 44;

        <android.speech.srec.WaveHeader: short FORMAT_ULAW> = 7;

        <android.speech.srec.WaveHeader: short FORMAT_PCM> = 1;

        <android.speech.srec.WaveHeader: short FORMAT_ALAW> = 6;

        return;
    }
}
