public class android.os.RecoverySystem extends java.lang.Object
{
    private static java.io.File COMMAND_FILE;
    private static final java.io.File DEFAULT_KEYSTORE;
    private static java.lang.String LAST_PREFIX;
    private static java.io.File LOG_FILE;
    private static int LOG_FILE_MAX_LENGTH;
    private static final long PUBLISH_PROGRESS_INTERVAL_MS;
    private static java.io.File RECOVERY_DIR;
    private static final java.lang.String TAG;

    static void <clinit>()
    {
        java.io.File $r0, $r1, $r2, $r3, $r4, $r5;

        <android.os.RecoverySystem: java.lang.String TAG> = "RecoverySystem";

        <android.os.RecoverySystem: long PUBLISH_PROGRESS_INTERVAL_MS> = 500L;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>("/system/etc/security/otacerts.zip");

        <android.os.RecoverySystem: java.io.File DEFAULT_KEYSTORE> = $r0;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("/cache/recovery");

        <android.os.RecoverySystem: java.io.File RECOVERY_DIR> = $r1;

        $r2 = new java.io.File;

        $r3 = <android.os.RecoverySystem: java.io.File RECOVERY_DIR>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "command");

        <android.os.RecoverySystem: java.io.File COMMAND_FILE> = $r2;

        $r4 = new java.io.File;

        $r5 = <android.os.RecoverySystem: java.io.File RECOVERY_DIR>;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "log");

        <android.os.RecoverySystem: java.io.File LOG_FILE> = $r4;

        <android.os.RecoverySystem: java.lang.String LAST_PREFIX> = "last_";

        <android.os.RecoverySystem: int LOG_FILE_MAX_LENGTH> = 65536;

        return;
    }

    public void <init>()
    {
        android.os.RecoverySystem r0;

        r0 := @this: android.os.RecoverySystem;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void RecoverySystem()
    {
        android.os.RecoverySystem r0;

        r0 := @this: android.os.RecoverySystem;

        return;
    }

    private static void bootCommand(android.content.Context, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String r1;
        java.io.FileWriter r2, $r7;
        java.lang.Throwable r3, $r12;
        java.io.File $r4, $r5, $r6, $r8;
        java.lang.Object $r9;
        java.io.IOException $r10;
        android.os.PowerManager $r11;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r4 = <android.os.RecoverySystem: java.io.File RECOVERY_DIR>;

        virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        $r5 = <android.os.RecoverySystem: java.io.File COMMAND_FILE>;

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        $r6 = <android.os.RecoverySystem: java.io.File LOG_FILE>;

        virtualinvoke $r6.<java.io.File: boolean delete()>();

        $r7 = new java.io.FileWriter;

        $r8 = <android.os.RecoverySystem: java.io.File COMMAND_FILE>;

        specialinvoke $r7.<java.io.FileWriter: void <init>(java.io.File)>($r8);

        r2 = $r7;

     label1:
        virtualinvoke r2.<java.io.FileWriter: void write(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.FileWriter: void write(java.lang.String)>("\n");

     label2:
        virtualinvoke r2.<java.io.FileWriter: void close()>();

        $r9 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r11 = (android.os.PowerManager) $r9;

        virtualinvoke $r11.<android.os.PowerManager: void reboot(java.lang.String)>("recovery");

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Reboot failed (no permissions?)");

        throw $r10;

     label3:
        $r12 := @caughtexception;

        r3 = $r12;

        virtualinvoke r2.<java.io.FileWriter: void close()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.util.HashSet getTrustedCerts(java.io.File) throws java.io.IOException, java.security.GeneralSecurityException
    {
        java.io.File r0;
        java.util.HashSet r1, $r8;
        java.util.zip.ZipFile r2, $r9;
        java.lang.Throwable r3, r7, $r13, $r14;
        java.security.cert.CertificateFactory r4;
        java.util.Enumeration r5;
        java.io.InputStream r6;
        boolean $z0;
        java.lang.Object $r10;
        java.util.zip.ZipEntry $r11;
        java.security.cert.Certificate $r12;

        r0 := @parameter0: java.io.File;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r1 = $r8;

        if r0 != null goto label01;

        r0 = <android.os.RecoverySystem: java.io.File DEFAULT_KEYSTORE>;

     label01:
        $r9 = new java.util.zip.ZipFile;

        specialinvoke $r9.<java.util.zip.ZipFile: void <init>(java.io.File)>(r0);

        r2 = $r9;

     label02:
        r4 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        r5 = virtualinvoke r2.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

     label03:
        $z0 = interfaceinvoke r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label10;

        $r10 = interfaceinvoke r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r11 = (java.util.zip.ZipEntry) $r10;

        r6 = virtualinvoke r2.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>($r11);

     label04:
        $r12 = virtualinvoke r4.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r6);

        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r12);

     label05:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label06:
        goto label03;

     label07:
        $r13 := @caughtexception;

        r3 = $r13;

        virtualinvoke r2.<java.util.zip.ZipFile: void close()>();

        throw r3;

     label08:
        $r14 := @caughtexception;

        r7 = $r14;

     label09:
        virtualinvoke r6.<java.io.InputStream: void close()>();

        throw r7;

     label10:
        virtualinvoke r2.<java.util.zip.ZipFile: void close()>();

        return r1;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
    }

    public static java.lang.String handleAftermath()
    {
        java.io.IOException r0, $r21;
        java.lang.String r1, r5, $r8, $r9, $r12, $r15, $r19;
        java.lang.String[] r2;
        int i0, $i1, $i2, $i3;
        java.io.File r3, $r6, $r7, $r10, $r11;
        boolean $z0, $z1;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r18, $r20;
        java.io.FileNotFoundException $r22;

     label01:
        $r6 = <android.os.RecoverySystem: java.io.File LOG_FILE>;

        $i1 = <android.os.RecoverySystem: int LOG_FILE_MAX_LENGTH>;

        $i2 = neg $i1;

        r5 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>($r6, $i2, "...\n");

     label02:
        r1 = r5;

     label03:
        $r7 = <android.os.RecoverySystem: java.io.File RECOVERY_DIR>;

        r2 = virtualinvoke $r7.<java.io.File: java.lang.String[] list()>();

        i0 = 0;

     label04:
        if r2 == null goto label10;

        $i3 = lengthof r2;

        if i0 >= $i3 goto label10;

        $r8 = r2[i0];

        $r9 = <android.os.RecoverySystem: java.lang.String LAST_PREFIX>;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>($r9);

        if $z0 == 0 goto label08;

     label05:
        i0 = i0 + 1;

        goto label04;

     label06:
        $r22 := @caughtexception;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverySystem", "No recovery log file");

        r1 = null;

        goto label03;

     label07:
        $r21 := @caughtexception;

        r0 = $r21;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverySystem", "Error reading recovery log", r0);

        r1 = null;

        goto label03;

     label08:
        $r10 = new java.io.File;

        $r11 = <android.os.RecoverySystem: java.io.File RECOVERY_DIR>;

        $r12 = r2[i0];

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, $r12);

        r3 = $r10;

        $z1 = virtualinvoke r3.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label09;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t delete: ");

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RecoverySystem", $r19);

        goto label05;

     label09:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted: ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverySystem", $r15);

        goto label05;

     label10:
        return r1;

        catch java.io.FileNotFoundException from label01 to label02 with label06;
        catch java.io.IOException from label01 to label02 with label07;
    }

    public static void installPackage(android.content.Context, java.io.File) throws java.io.IOException
    {
        android.content.Context r0;
        java.io.File r1;
        java.lang.String r2, $r7, $r14, $r15;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r13;
        java.util.Locale $r12;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.io.File;

        r2 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!!! REBOOTING TO INSTALL ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !!!");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RecoverySystem", $r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--update_package=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n--locale=");

        $r12 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r14 = virtualinvoke $r12.<java.util.Locale: java.lang.String toString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.RecoverySystem: void bootCommand(android.content.Context,java.lang.String)>(r0, $r15);

        return;
    }

    public static void rebootWipeCache(android.content.Context) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        java.util.Locale $r3;
        java.lang.String $r4, $r6;

        r0 := @parameter0: android.content.Context;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--wipe_cache\n--locale=");

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r4 = virtualinvoke $r3.<java.util.Locale: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.RecoverySystem: void bootCommand(android.content.Context,java.lang.String)>(r0, $r6);

        return;
    }

    public static void rebootWipeUserData(android.content.Context) throws java.io.IOException
    {
        android.content.Context r0;
        android.os.ConditionVariable r1, $r2;
        android.content.Intent $r3;
        android.os.RecoverySystem$1 $r4;
        android.os.UserHandle $r5;
        java.lang.StringBuilder $r6, $r7, $r10;
        java.util.Locale $r8;
        java.lang.String $r9, $r11;

        r0 := @parameter0: android.content.Context;

        $r2 = new android.os.ConditionVariable;

        specialinvoke $r2.<android.os.ConditionVariable: void <init>()>();

        r1 = $r2;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MASTER_CLEAR_NOTIFICATION");

        $r5 = <android.os.UserHandle: android.os.UserHandle OWNER>;

        $r4 = new android.os.RecoverySystem$1;

        specialinvoke $r4.<android.os.RecoverySystem$1: void <init>(android.os.ConditionVariable)>(r1);

        virtualinvoke r0.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r3, $r5, "android.permission.MASTER_CLEAR", $r4, null, 0, null, null);

        virtualinvoke r1.<android.os.ConditionVariable: void block()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--wipe_data\n--locale=");

        $r8 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r9 = virtualinvoke $r8.<java.util.Locale: java.lang.String toString()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.RecoverySystem: void bootCommand(android.content.Context,java.lang.String)>(r0, $r11);

        return;
    }

    public static void verifyPackage(java.io.File, android.os.RecoverySystem$ProgressListener, java.io.File) throws java.io.IOException, java.security.GeneralSecurityException
    {
        java.io.File r0, r2;
        android.os.RecoverySystem$ProgressListener r1;
        long l0, l2, l7, l8, l12, $l13, $l25, $l32, $l37, $l39, $l40, $l41, $l43, $l44, $l46, $l47, $l48;
        java.io.RandomAccessFile r3, r52;
        int i1, i3, i4, i5, i6, i9, i10, i11, $i18, $i21, $i26, $i27, $i31, $i35, $i36, $i50, $i52, $i54;
        java.lang.Throwable r4, $r49;
        byte[] r5, r6, r22, $r37;
        org.apache.harmony.security.asn1.BerInputStream r7, r57;
        java.io.ByteArrayInputStream r8, r56;
        java.util.List r9, r14;
        org.apache.harmony.security.pkcs7.SignedData r10;
        org.apache.harmony.security.provider.cert.X509CertImpl r11, r60;
        java.util.Iterator r12, r17;
        org.apache.harmony.security.pkcs7.SignerInfo r13;
        java.security.PublicKey r15, $r42;
        java.util.HashSet r16;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String r18, r19, r20;
        java.security.Signature r21;
        byte $b14, $b15, $b16, $b20, $b23, $b24, $b29, $b30, $b33, $b34, $b38, $b42, $b45, $b49, $b51, $b53, $b55;
        short $s17, $s19, $s22, $s28;
        java.lang.Object $r27, $r31, $r36, $r44;
        org.apache.harmony.security.pkcs7.ContentInfo $r28;
        org.apache.harmony.security.asn1.ASN1Sequence $r30;
        org.apache.harmony.security.x509.Certificate $r33;
        java.lang.StringBuilder $r40, $r46, $r47, r65;
        java.security.cert.Certificate $r43, r69;
        java.security.SignatureException r53, r54, r55, r61, r62, r64, r66;
        java.io.IOException r58, r59, r63;
        java.security.cert.X509Certificate r67, r68;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: android.os.RecoverySystem$ProgressListener;

        r2 := @parameter2: java.io.File;

        l0 = virtualinvoke r0.<java.io.File: long length()>();

        r52 = new java.io.RandomAccessFile;

        specialinvoke r52.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r0, "r");

        r3 = r52;

        i1 = 0;

     label01:
        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label02:
        if r1 == null goto label04;

     label03:
        interfaceinvoke r1.<android.os.RecoverySystem$ProgressListener: void onProgress(int)>(0);

     label04:
        $l13 = l0 - 6L;

        virtualinvoke r3.<java.io.RandomAccessFile: void seek(long)>($l13);

        r5 = newarray (byte)[6];

        virtualinvoke r3.<java.io.RandomAccessFile: void readFully(byte[])>(r5);

        $b16 = r5[2];

        if $b16 != -1 goto label05;

        $b15 = r5[3];

        if $b15 == -1 goto label07;

     label05:
        r53 = new java.security.SignatureException;

        specialinvoke r53.<java.security.SignatureException: void <init>(java.lang.String)>("no signature in file (no footer)");

        throw r53;

     label06:
        $r49 := @caughtexception;

        r4 = $r49;

        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

        throw r4;

     label07:
        $b14 = r5[4];

        $s17 = 255 & $b14;

        $b20 = r5[5];

        $s19 = 255 & $b20;

        $i18 = $s19 << 8;

        i3 = $s17 | $i18;

        $b24 = r5[0];

        $s28 = 255 & $b24;

        $b23 = r5[1];

        $s22 = 255 & $b23;

        $i21 = $s22 << 8;

        i4 = $s28 | $i21;

        $i27 = i3 + 22;

        r6 = newarray (byte)[$i27];

        $i26 = i3 + 22;

        $l25 = (long) $i26;

        $l32 = l0 - $l25;

        virtualinvoke r3.<java.io.RandomAccessFile: void seek(long)>($l32);

        virtualinvoke r3.<java.io.RandomAccessFile: void readFully(byte[])>(r6);

        $b33 = r6[0];

        if $b33 != 80 goto label08;

        $b34 = r6[1];

        if $b34 != 75 goto label08;

        $b29 = r6[2];

        if $b29 != 5 goto label08;

        $b30 = r6[3];

        if $b30 == 6 goto label54;

     label08:
        r54 = new java.security.SignatureException;

        specialinvoke r54.<java.security.SignatureException: void <init>(java.lang.String)>("no signature in file (bad footer)");

        throw r54;

     label09:
        $i31 = lengthof r6;

        i6 = -3 + $i31;

     label10:
        if i5 >= i6 goto label12;

     label11:
        $b51 = r6[i5];

        if $b51 != 80 goto label55;

        $i50 = i5 + 1;

        $b53 = r6[$i50];

        if $b53 != 75 goto label55;

        $i52 = i5 + 2;

        $b55 = r6[$i52];

        if $b55 != 5 goto label55;

        $i54 = i5 + 3;

        $b49 = r6[$i54];

        if $b49 != 6 goto label55;

        r55 = new java.security.SignatureException;

        specialinvoke r55.<java.security.SignatureException: void <init>(java.lang.String)>("EOCD marker found after start of EOCD");

        throw r55;

     label12:
        r56 = new java.io.ByteArrayInputStream;

        $i35 = i3 + 22;

        $i36 = $i35 - i4;

        specialinvoke r56.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r6, $i36, i4);

        r8 = r56;

        r57 = new org.apache.harmony.security.asn1.BerInputStream;

        specialinvoke r57.<org.apache.harmony.security.asn1.BerInputStream: void <init>(java.io.InputStream)>(r8);

        r7 = r57;

        $r30 = <org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r27 = virtualinvoke $r30.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>(r7);

        $r28 = (org.apache.harmony.security.pkcs7.ContentInfo) $r27;

        r10 = virtualinvoke $r28.<org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.pkcs7.SignedData getSignedData()>();

     label13:
        if r10 != null goto label15;

     label14:
        r58 = new java.io.IOException;

        specialinvoke r58.<java.io.IOException: void <init>(java.lang.String)>("signedData is null");

        throw r58;

     label15:
        r9 = virtualinvoke r10.<org.apache.harmony.security.pkcs7.SignedData: java.util.List getCertificates()>();

        $z3 = interfaceinvoke r9.<java.util.Collection: boolean isEmpty()>();

        if $z3 == 0 goto label16;

        r59 = new java.io.IOException;

        specialinvoke r59.<java.io.IOException: void <init>(java.lang.String)>("encCerts is empty");

        throw r59;

     label16:
        r12 = interfaceinvoke r9.<java.util.Collection: java.util.Iterator iterator()>();

        $z4 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label26;

        r60 = new org.apache.harmony.security.provider.cert.X509CertImpl;

        $r31 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r33 = (org.apache.harmony.security.x509.Certificate) $r31;

        specialinvoke r60.<org.apache.harmony.security.provider.cert.X509CertImpl: void <init>(org.apache.harmony.security.x509.Certificate)>($r33);

        r11 = r60;

        r14 = virtualinvoke r10.<org.apache.harmony.security.pkcs7.SignedData: java.util.List getSignerInfos()>();

        $z5 = interfaceinvoke r14.<java.util.List: boolean isEmpty()>();

        if $z5 != 0 goto label27;

        $r36 = interfaceinvoke r14.<java.util.List: java.lang.Object get(int)>(0);

        r13 = (org.apache.harmony.security.pkcs7.SignerInfo) $r36;

     label17:
        if r2 != null goto label19;

     label18:
        r2 = <android.os.RecoverySystem: java.io.File DEFAULT_KEYSTORE>;

     label19:
        r16 = staticinvoke <android.os.RecoverySystem: java.util.HashSet getTrustedCerts(java.io.File)>(r2);

        r67 = (java.security.cert.X509Certificate) r11;

        r15 = virtualinvoke r67.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        r17 = virtualinvoke r16.<java.util.HashSet: java.util.Iterator iterator()>();

     label20:
        z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

     label21:
        z1 = 0;

        if z0 == 0 goto label24;

     label22:
        $r44 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r43 = (java.security.cert.Certificate) $r44;

        $r42 = virtualinvoke $r43.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

        $z7 = virtualinvoke $r42.<java.lang.Object: boolean equals(java.lang.Object)>(r15);

        if $z7 == 0 goto label20;

     label23:
        z1 = 1;

     label24:
        if z1 != 0 goto label28;

     label25:
        r61 = new java.security.SignatureException;

        specialinvoke r61.<java.security.SignatureException: void <init>(java.lang.String)>("signature doesn\'t match any trusted key");

        throw r61;

     label26:
        r62 = new java.security.SignatureException;

        specialinvoke r62.<java.security.SignatureException: void <init>(java.lang.String)>("signature contains no certificates");

        throw r62;

     label27:
        r63 = new java.io.IOException;

        specialinvoke r63.<java.io.IOException: void <init>(java.lang.String)>("no signer infos!");

        throw r63;

     label28:
        r18 = virtualinvoke r13.<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestAlgorithm()>();

        r20 = virtualinvoke r13.<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestEncryptionAlgorithm()>();

     label29:
        if r18 == null goto label30;

        if r20 != null goto label42;

     label30:
        r68 = (java.security.cert.X509Certificate) r11;

        r19 = virtualinvoke r68.<java.security.cert.X509Certificate: java.lang.String getSigAlgName()>();

     label31:
        r21 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r19);

        r69 = (java.security.cert.Certificate) r11;

        virtualinvoke r21.<java.security.Signature: void initVerify(java.security.cert.Certificate)>(r69);

     label32:
        $l39 = (long) i3;

        $l37 = l0 - $l39;

        l8 = $l37 - 2L;

        l7 = 0L;

     label33:
        virtualinvoke r3.<java.io.RandomAccessFile: void seek(long)>(0L);

        r22 = newarray (byte)[4096];

     label34:
        z2 = 0;

     label35:
        $b38 = l7 cmp l8;

        if $b38 >= 0 goto label38;

     label36:
        z2 = staticinvoke <java.lang.Thread: boolean interrupted()>();

     label37:
        if z2 == 0 goto label44;

     label38:
        if r1 == null goto label40;

     label39:
        interfaceinvoke r1.<android.os.RecoverySystem$ProgressListener: void onProgress(int)>(100);

     label40:
        if z2 == 0 goto label52;

     label41:
        r64 = new java.security.SignatureException;

        specialinvoke r64.<java.security.SignatureException: void <init>(java.lang.String)>("verification was interrupted");

        throw r64;

     label42:
        r65 = new java.lang.StringBuilder;

        specialinvoke r65.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r47 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with");

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        r19 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

     label43:
        goto label31;

     label44:
        i9 = lengthof r22;

     label45:
        $l43 = (long) i9;

        $l41 = l7 + $l43;

        $b42 = $l41 cmp l8;

        if $b42 <= 0 goto label46;

        $l44 = l8 - l7;

        i9 = (int) $l44;

     label46:
        i11 = virtualinvoke r3.<java.io.RandomAccessFile: int read(byte[],int,int)>(r22, 0, i9);

        virtualinvoke r21.<java.security.Signature: void update(byte[],int,int)>(r22, 0, i11);

     label47:
        $l40 = (long) i11;

        l7 = l7 + $l40;

        if r1 == null goto label35;

     label48:
        l12 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l48 = 100L * l7;

        $l47 = $l48 / l8;

        i10 = (int) $l47;

     label49:
        if i10 <= i1 goto label35;

        $l46 = l12 - l2;

        $b45 = $l46 cmp 500L;

        if $b45 <= 0 goto label35;

        i1 = i10;

        l2 = l12;

     label50:
        interfaceinvoke r1.<android.os.RecoverySystem$ProgressListener: void onProgress(int)>(i1);

     label51:
        goto label35;

     label52:
        $r37 = virtualinvoke r13.<org.apache.harmony.security.pkcs7.SignerInfo: byte[] getEncryptedDigest()>();

        $z6 = virtualinvoke r21.<java.security.Signature: boolean verify(byte[])>($r37);

        if $z6 != 0 goto label53;

        r66 = new java.security.SignatureException;

        specialinvoke r66.<java.security.SignatureException: void <init>(java.lang.String)>("signature digest verification failed");

        throw r66;

     label53:
        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

        return;

     label54:
        i5 = 4;

        goto label09;

     label55:
        i5 = i5 + 1;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label11 to label12 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch java.lang.Throwable from label14 to label15 with label06;
        catch java.lang.Throwable from label15 to label16 with label06;
        catch java.lang.Throwable from label16 to label17 with label06;
        catch java.lang.Throwable from label18 to label19 with label06;
        catch java.lang.Throwable from label19 to label20 with label06;
        catch java.lang.Throwable from label20 to label21 with label06;
        catch java.lang.Throwable from label22 to label23 with label06;
        catch java.lang.Throwable from label25 to label26 with label06;
        catch java.lang.Throwable from label26 to label27 with label06;
        catch java.lang.Throwable from label27 to label28 with label06;
        catch java.lang.Throwable from label28 to label29 with label06;
        catch java.lang.Throwable from label30 to label31 with label06;
        catch java.lang.Throwable from label31 to label32 with label06;
        catch java.lang.Throwable from label33 to label34 with label06;
        catch java.lang.Throwable from label36 to label37 with label06;
        catch java.lang.Throwable from label39 to label40 with label06;
        catch java.lang.Throwable from label41 to label42 with label06;
        catch java.lang.Throwable from label42 to label43 with label06;
        catch java.lang.Throwable from label44 to label45 with label06;
        catch java.lang.Throwable from label46 to label47 with label06;
        catch java.lang.Throwable from label48 to label49 with label06;
        catch java.lang.Throwable from label50 to label51 with label06;
        catch java.lang.Throwable from label52 to label53 with label06;
    }
}
