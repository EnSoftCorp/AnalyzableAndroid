public final class android.hardware.location.GeofenceHardware extends java.lang.Object
{
    public static final int GEOFENCE_ENTERED;
    public static final int GEOFENCE_ERROR_ID_EXISTS;
    public static final int GEOFENCE_ERROR_ID_UNKNOWN;
    public static final int GEOFENCE_ERROR_INSUFFICIENT_MEMORY;
    public static final int GEOFENCE_ERROR_INVALID_TRANSITION;
    public static final int GEOFENCE_ERROR_TOO_MANY_GEOFENCES;
    public static final int GEOFENCE_EXITED;
    public static final int GEOFENCE_FAILURE;
    public static final int GEOFENCE_SUCCESS;
    public static final int GEOFENCE_UNCERTAIN;
    public static final int MONITORING_TYPE_FUSED_HARDWARE;
    public static final int MONITORING_TYPE_GPS_HARDWARE;
    public static final int MONITOR_CURRENTLY_AVAILABLE;
    public static final int MONITOR_CURRENTLY_UNAVAILABLE;
    public static final int MONITOR_UNSUPPORTED;
    static final int NUM_MONITORS;
    private java.util.HashMap mCallbacks;
    private java.util.HashMap mMonitorCallbacks;
    private android.hardware.location.IGeofenceHardware mService;

    public void <init>(android.hardware.location.IGeofenceHardware)
    {
        android.hardware.location.GeofenceHardware r0;
        android.hardware.location.IGeofenceHardware r1;
        java.util.HashMap $r2, $r3;

        r0 := @this: android.hardware.location.GeofenceHardware;

        r1 := @parameter0: android.hardware.location.IGeofenceHardware;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mCallbacks> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mMonitorCallbacks> = $r3;

        r0.<android.hardware.location.GeofenceHardware: android.hardware.location.IGeofenceHardware mService> = r1;

        return;
    }

    static void access$000(android.hardware.location.GeofenceHardware, android.hardware.location.GeofenceHardwareCallback)
    {
        android.hardware.location.GeofenceHardware r0;
        android.hardware.location.GeofenceHardwareCallback r1;

        r0 := @parameter0: android.hardware.location.GeofenceHardware;

        r1 := @parameter1: android.hardware.location.GeofenceHardwareCallback;

        specialinvoke r0.<android.hardware.location.GeofenceHardware: void removeCallback(android.hardware.location.GeofenceHardwareCallback)>(r1);

        return;
    }

    private android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper getCallbackWrapper(android.hardware.location.GeofenceHardwareCallback)
    {
        android.hardware.location.GeofenceHardware r0;
        android.hardware.location.GeofenceHardwareCallback r1;
        java.util.HashMap r2, $r5, $r8;
        java.lang.Throwable r3, $r10;
        android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper r4, $r7;
        java.lang.Object $r6;

        r0 := @this: android.hardware.location.GeofenceHardware;

        r1 := @parameter0: android.hardware.location.GeofenceHardwareCallback;

        r2 = r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mCallbacks>;

        entermonitor r2;

     label1:
        $r5 = r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mCallbacks>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper) $r6;

     label2:
        if r4 != null goto label4;

     label3:
        $r7 = new android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper;

        specialinvoke $r7.<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void <init>(android.hardware.location.GeofenceHardware,android.hardware.location.GeofenceHardwareCallback)>(r0, r1);

        r4 = $r7;

        $r8 = r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mCallbacks>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label4:
        exitmonitor r2;

     label5:
        return r4;

     label6:
        $r10 := @caughtexception;

        r3 = $r10;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper getMonitorCallbackWrapper(android.hardware.location.GeofenceHardwareMonitorCallback)
    {
        android.hardware.location.GeofenceHardware r0;
        android.hardware.location.GeofenceHardwareMonitorCallback r1;
        java.util.HashMap r2, $r5, $r8;
        java.lang.Throwable r3, $r10;
        android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper r4, $r7;
        java.lang.Object $r6;

        r0 := @this: android.hardware.location.GeofenceHardware;

        r1 := @parameter0: android.hardware.location.GeofenceHardwareMonitorCallback;

        r2 = r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mMonitorCallbacks>;

        entermonitor r2;

     label1:
        $r5 = r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mMonitorCallbacks>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper) $r6;

     label2:
        if r4 != null goto label4;

     label3:
        $r7 = new android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper;

        specialinvoke $r7.<android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper: void <init>(android.hardware.location.GeofenceHardware,android.hardware.location.GeofenceHardwareMonitorCallback)>(r0, r1);

        r4 = $r7;

        $r8 = r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mMonitorCallbacks>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label4:
        exitmonitor r2;

     label5:
        return r4;

     label6:
        $r10 := @caughtexception;

        r3 = $r10;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void removeCallback(android.hardware.location.GeofenceHardwareCallback)
    {
        android.hardware.location.GeofenceHardware r0;
        android.hardware.location.GeofenceHardwareCallback r1;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r6;

        r0 := @this: android.hardware.location.GeofenceHardware;

        r1 := @parameter0: android.hardware.location.GeofenceHardwareCallback;

        r2 = r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mCallbacks>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mCallbacks>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void removeMonitorCallback(android.hardware.location.GeofenceHardwareMonitorCallback)
    {
        android.hardware.location.GeofenceHardware r0;
        android.hardware.location.GeofenceHardwareMonitorCallback r1;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r6;

        r0 := @this: android.hardware.location.GeofenceHardware;

        r1 := @parameter0: android.hardware.location.GeofenceHardwareMonitorCallback;

        r2 = r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mMonitorCallbacks>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.hardware.location.GeofenceHardware: java.util.HashMap mMonitorCallbacks>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean addGeofence(int, int, android.hardware.location.GeofenceHardwareRequest, android.hardware.location.GeofenceHardwareCallback)
    {
        android.hardware.location.GeofenceHardware r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.hardware.location.GeofenceHardwareRequest r1;
        android.hardware.location.GeofenceHardwareCallback r2;
        java.lang.IllegalArgumentException $r4;
        android.hardware.location.IGeofenceHardware $r5;
        double $d0, $d1, $d2;
        boolean $z0;
        android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper $r6;
        android.os.RemoteException $r7;

        r0 := @this: android.hardware.location.GeofenceHardware;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.hardware.location.GeofenceHardwareRequest;

        r2 := @parameter3: android.hardware.location.GeofenceHardwareCallback;

     label1:
        $i2 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequest: int getType()>();

        if $i2 != 0 goto label2;

        $r5 = r0.<android.hardware.location.GeofenceHardware: android.hardware.location.IGeofenceHardware mService>;

        $d0 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequest: double getLatitude()>();

        $d1 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequest: double getLongitude()>();

        $d2 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequest: double getRadius()>();

        $i3 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequest: int getLastTransition()>();

        $i4 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequest: int getMonitorTransitions()>();

        $i5 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequest: int getNotificationResponsiveness()>();

        $i6 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequest: int getUnknownTimer()>();

        $r6 = specialinvoke r0.<android.hardware.location.GeofenceHardware: android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper getCallbackWrapper(android.hardware.location.GeofenceHardwareCallback)>(r2);

        $z0 = interfaceinvoke $r5.<android.hardware.location.IGeofenceHardware: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)>(i0, i1, $d0, $d1, $d2, $i3, $i4, $i5, $i6, $r6);

        return $z0;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Geofence Request type not supported");

        throw $r4;

     label3:
        $r7 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label2 to label3 with label3;
    }

    public int[] getMonitoringTypes()
    {
        android.hardware.location.GeofenceHardware r0;
        int[] r2, $r5;
        android.hardware.location.IGeofenceHardware $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.hardware.location.GeofenceHardware;

     label1:
        $r3 = r0.<android.hardware.location.GeofenceHardware: android.hardware.location.IGeofenceHardware mService>;

        r2 = interfaceinvoke $r3.<android.hardware.location.IGeofenceHardware: int[] getMonitoringTypes()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (int)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getStatusOfMonitoringType(int)
    {
        android.hardware.location.GeofenceHardware r0;
        int i0, i1;
        android.hardware.location.IGeofenceHardware $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.hardware.location.GeofenceHardware;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.hardware.location.GeofenceHardware: android.hardware.location.IGeofenceHardware mService>;

        i1 = interfaceinvoke $r2.<android.hardware.location.IGeofenceHardware: int getStatusOfMonitoringType(int)>(i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean pauseGeofence(int, int)
    {
        android.hardware.location.GeofenceHardware r0;
        int i0, i1;
        boolean z0;
        android.hardware.location.IGeofenceHardware $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.hardware.location.GeofenceHardware;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.hardware.location.GeofenceHardware: android.hardware.location.IGeofenceHardware mService>;

        z0 = interfaceinvoke $r2.<android.hardware.location.IGeofenceHardware: boolean pauseGeofence(int,int)>(i0, i1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean registerForMonitorStateChangeCallback(int, android.hardware.location.GeofenceHardwareMonitorCallback)
    {
        android.hardware.location.GeofenceHardware r0;
        int i0;
        android.hardware.location.GeofenceHardwareMonitorCallback r1;
        boolean z0;
        android.hardware.location.IGeofenceHardware $r3;
        android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.hardware.location.GeofenceHardware;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.location.GeofenceHardwareMonitorCallback;

     label1:
        $r3 = r0.<android.hardware.location.GeofenceHardware: android.hardware.location.IGeofenceHardware mService>;

        $r4 = specialinvoke r0.<android.hardware.location.GeofenceHardware: android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper getMonitorCallbackWrapper(android.hardware.location.GeofenceHardwareMonitorCallback)>(r1);

        z0 = interfaceinvoke $r3.<android.hardware.location.IGeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>(i0, $r4);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeGeofence(int, int)
    {
        android.hardware.location.GeofenceHardware r0;
        int i0, i1;
        boolean z0;
        android.hardware.location.IGeofenceHardware $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.hardware.location.GeofenceHardware;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.hardware.location.GeofenceHardware: android.hardware.location.IGeofenceHardware mService>;

        z0 = interfaceinvoke $r2.<android.hardware.location.IGeofenceHardware: boolean removeGeofence(int,int)>(i0, i1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean resumeGeofence(int, int, int)
    {
        android.hardware.location.GeofenceHardware r0;
        int i0, i1, i2;
        boolean z0;
        android.hardware.location.IGeofenceHardware $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.hardware.location.GeofenceHardware;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

     label1:
        $r2 = r0.<android.hardware.location.GeofenceHardware: android.hardware.location.IGeofenceHardware mService>;

        z0 = interfaceinvoke $r2.<android.hardware.location.IGeofenceHardware: boolean resumeGeofence(int,int,int)>(i0, i1, i2);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean unregisterForMonitorStateChangeCallback(int, android.hardware.location.GeofenceHardwareMonitorCallback)
    {
        android.hardware.location.GeofenceHardware r0;
        int i0;
        android.hardware.location.GeofenceHardwareMonitorCallback r1;
        boolean z0;
        android.hardware.location.IGeofenceHardware $r3;
        android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.hardware.location.GeofenceHardware;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.location.GeofenceHardwareMonitorCallback;

        z0 = 0;

     label1:
        $r3 = r0.<android.hardware.location.GeofenceHardware: android.hardware.location.IGeofenceHardware mService>;

        $r4 = specialinvoke r0.<android.hardware.location.GeofenceHardware: android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper getMonitorCallbackWrapper(android.hardware.location.GeofenceHardwareMonitorCallback)>(r1);

        z0 = interfaceinvoke $r3.<android.hardware.location.IGeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>(i0, $r4);

     label2:
        if z0 == 0 goto label4;

     label3:
        specialinvoke r0.<android.hardware.location.GeofenceHardware: void removeMonitorCallback(android.hardware.location.GeofenceHardwareMonitorCallback)>(r1);

     label4:
        return z0;

     label5:
        $r5 := @caughtexception;

        return z0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <android.hardware.location.GeofenceHardware: int NUM_MONITORS> = 2;

        <android.hardware.location.GeofenceHardware: int MONITOR_UNSUPPORTED> = 2;

        <android.hardware.location.GeofenceHardware: int MONITOR_CURRENTLY_UNAVAILABLE> = 1;

        <android.hardware.location.GeofenceHardware: int MONITOR_CURRENTLY_AVAILABLE> = 0;

        <android.hardware.location.GeofenceHardware: int MONITORING_TYPE_GPS_HARDWARE> = 0;

        <android.hardware.location.GeofenceHardware: int MONITORING_TYPE_FUSED_HARDWARE> = 1;

        <android.hardware.location.GeofenceHardware: int GEOFENCE_UNCERTAIN> = 4;

        <android.hardware.location.GeofenceHardware: int GEOFENCE_SUCCESS> = 0;

        <android.hardware.location.GeofenceHardware: int GEOFENCE_FAILURE> = 5;

        <android.hardware.location.GeofenceHardware: int GEOFENCE_EXITED> = 2;

        <android.hardware.location.GeofenceHardware: int GEOFENCE_ERROR_TOO_MANY_GEOFENCES> = 1;

        <android.hardware.location.GeofenceHardware: int GEOFENCE_ERROR_INVALID_TRANSITION> = 4;

        <android.hardware.location.GeofenceHardware: int GEOFENCE_ERROR_INSUFFICIENT_MEMORY> = 6;

        <android.hardware.location.GeofenceHardware: int GEOFENCE_ERROR_ID_UNKNOWN> = 3;

        <android.hardware.location.GeofenceHardware: int GEOFENCE_ERROR_ID_EXISTS> = 2;

        <android.hardware.location.GeofenceHardware: int GEOFENCE_ENTERED> = 1;

        return;
    }
}
