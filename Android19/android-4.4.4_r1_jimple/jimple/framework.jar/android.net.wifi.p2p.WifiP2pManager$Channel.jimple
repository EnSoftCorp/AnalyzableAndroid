public class android.net.wifi.p2p.WifiP2pManager$Channel extends java.lang.Object
{
    private static final int INVALID_LISTENER_KEY;
    private com.android.internal.util.AsyncChannel mAsyncChannel;
    private android.net.wifi.p2p.WifiP2pManager$ChannelListener mChannelListener;
    android.content.Context mContext;
    private android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener mDnsSdServRspListener;
    private android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener mDnsSdTxtListener;
    private android.net.wifi.p2p.WifiP2pManager$Channel$P2pHandler mHandler;
    private int mListenerKey;
    private java.util.HashMap mListenerMap;
    private java.lang.Object mListenerMapLock;
    private android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener mServRspListener;
    private android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener mUpnpServRspListener;

    void <init>(android.content.Context, android.os.Looper, android.net.wifi.p2p.WifiP2pManager$ChannelListener)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.content.Context r1;
        android.os.Looper r2;
        android.net.wifi.p2p.WifiP2pManager$ChannelListener r3;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        com.android.internal.util.AsyncChannel $r6;
        android.net.wifi.p2p.WifiP2pManager$Channel$P2pHandler $r7;

        r0 := @this: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Looper;

        r3 := @parameter2: android.net.wifi.p2p.WifiP2pManager$ChannelListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: java.util.HashMap mListenerMap> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: java.lang.Object mListenerMapLock> = $r5;

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: int mListenerKey> = 0;

        $r6 = new com.android.internal.util.AsyncChannel;

        specialinvoke $r6.<com.android.internal.util.AsyncChannel: void <init>()>();

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: com.android.internal.util.AsyncChannel mAsyncChannel> = $r6;

        $r7 = new android.net.wifi.p2p.WifiP2pManager$Channel$P2pHandler;

        specialinvoke $r7.<android.net.wifi.p2p.WifiP2pManager$Channel$P2pHandler: void <init>(android.net.wifi.p2p.WifiP2pManager$Channel,android.os.Looper)>(r0, r2);

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$Channel$P2pHandler mHandler> = $r7;

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$ChannelListener mChannelListener> = r3;

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.content.Context mContext> = r1;

        return;
    }

    static java.lang.Object access$000(android.net.wifi.p2p.WifiP2pManager$Channel, int)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: android.net.wifi.p2p.WifiP2pManager$Channel;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<android.net.wifi.p2p.WifiP2pManager$Channel: java.lang.Object getListener(int)>(i0);

        return $r1;
    }

    static android.net.wifi.p2p.WifiP2pManager$ChannelListener access$100(android.net.wifi.p2p.WifiP2pManager$Channel)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.net.wifi.p2p.WifiP2pManager$ChannelListener $r1;

        r0 := @parameter0: android.net.wifi.p2p.WifiP2pManager$Channel;

        $r1 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$ChannelListener mChannelListener>;

        return $r1;
    }

    static android.net.wifi.p2p.WifiP2pManager$ChannelListener access$102(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ChannelListener)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.net.wifi.p2p.WifiP2pManager$ChannelListener r1;

        r0 := @parameter0: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter1: android.net.wifi.p2p.WifiP2pManager$ChannelListener;

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$ChannelListener mChannelListener> = r1;

        return r1;
    }

    static void access$200(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.nsd.WifiP2pServiceResponse)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.net.wifi.p2p.nsd.WifiP2pServiceResponse r1;

        r0 := @parameter0: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter1: android.net.wifi.p2p.nsd.WifiP2pServiceResponse;

        specialinvoke r0.<android.net.wifi.p2p.WifiP2pManager$Channel: void handleServiceResponse(android.net.wifi.p2p.nsd.WifiP2pServiceResponse)>(r1);

        return;
    }

    static android.net.wifi.p2p.WifiP2pManager$Channel$P2pHandler access$300(android.net.wifi.p2p.WifiP2pManager$Channel)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.net.wifi.p2p.WifiP2pManager$Channel$P2pHandler $r1;

        r0 := @parameter0: android.net.wifi.p2p.WifiP2pManager$Channel;

        $r1 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$Channel$P2pHandler mHandler>;

        return $r1;
    }

    static com.android.internal.util.AsyncChannel access$400(android.net.wifi.p2p.WifiP2pManager$Channel)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        com.android.internal.util.AsyncChannel $r1;

        r0 := @parameter0: android.net.wifi.p2p.WifiP2pManager$Channel;

        $r1 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: com.android.internal.util.AsyncChannel mAsyncChannel>;

        return $r1;
    }

    static int access$500(android.net.wifi.p2p.WifiP2pManager$Channel, java.lang.Object)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        java.lang.Object r1;
        int $i0;

        r0 := @parameter0: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter1: java.lang.Object;

        $i0 = specialinvoke r0.<android.net.wifi.p2p.WifiP2pManager$Channel: int putListener(java.lang.Object)>(r1);

        return $i0;
    }

    static android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener access$602(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener r1;

        r0 := @parameter0: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter1: android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener;

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener mServRspListener> = r1;

        return r1;
    }

    static android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener access$702(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener r1;

        r0 := @parameter0: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter1: android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener;

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener mDnsSdServRspListener> = r1;

        return r1;
    }

    static android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener access$802(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener r1;

        r0 := @parameter0: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter1: android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener;

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener mDnsSdTxtListener> = r1;

        return r1;
    }

    static android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener access$902(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener r1;

        r0 := @parameter0: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter1: android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener;

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener mUpnpServRspListener> = r1;

        return r1;
    }

    private java.lang.Object getListener(int)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        int i0;
        java.lang.Object r1, r3;
        java.lang.Throwable r2, $r6;
        java.util.HashMap $r4;
        java.lang.Integer $r5;

        r0 := @this: android.net.wifi.p2p.WifiP2pManager$Channel;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return null;

     label1:
        r1 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: java.lang.Object mListenerMapLock>;

        entermonitor r1;

     label2:
        $r4 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: java.util.HashMap mListenerMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r5);

        exitmonitor r1;

     label3:
        return r3;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void handleDnsSdServiceResponse(android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5, $r8, $r12, $r15;
        android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener $r6, $r7;
        java.util.Map $r9;
        android.net.wifi.p2p.WifiP2pDevice $r10, $r14;
        android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener $r11, $r13;

        r0 := @this: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter0: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        $i0 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getDnsType()>();

        if $i0 != 12 goto label2;

        $r11 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener mDnsSdServRspListener>;

        if $r11 == null goto label1;

        $r13 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener mDnsSdServRspListener>;

        $r12 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getInstanceName()>();

        $r15 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getDnsQueryName()>();

        $r14 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: android.net.wifi.p2p.WifiP2pDevice getSrcDevice()>();

        interfaceinvoke $r13.<android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener: void onDnsSdServiceAvailable(java.lang.String,java.lang.String,android.net.wifi.p2p.WifiP2pDevice)>($r12, $r15, $r14);

     label1:
        return;

     label2:
        $i1 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getDnsType()>();

        if $i1 != 16 goto label3;

        $r6 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener mDnsSdTxtListener>;

        if $r6 == null goto label1;

        $r7 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener mDnsSdTxtListener>;

        $r8 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getDnsQueryName()>();

        $r9 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map getTxtRecord()>();

        $r10 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: android.net.wifi.p2p.WifiP2pDevice getSrcDevice()>();

        interfaceinvoke $r7.<android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener: void onDnsSdTxtRecordAvailable(java.lang.String,java.util.Map,android.net.wifi.p2p.WifiP2pDevice)>($r8, $r9, $r10);

        return;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled resp ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiP2pManager", $r5);

        return;
    }

    private void handleServiceResponse(android.net.wifi.p2p.nsd.WifiP2pServiceResponse)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.net.wifi.p2p.nsd.WifiP2pServiceResponse r1;
        boolean $z0, $z1;
        android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener $r2, $r3;
        int $i0;
        byte[] $r4;
        android.net.wifi.p2p.WifiP2pDevice $r5;
        android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener $r6;
        android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse $r7;
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse $r8;

        r0 := @this: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter0: android.net.wifi.p2p.nsd.WifiP2pServiceResponse;

        $z0 = r1 instanceof android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        if $z0 == 0 goto label2;

        $r8 = (android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse) r1;

        specialinvoke r0.<android.net.wifi.p2p.WifiP2pManager$Channel: void handleDnsSdServiceResponse(android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse)>($r8);

     label1:
        return;

     label2:
        $z1 = r1 instanceof android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse;

        if $z1 == 0 goto label3;

        $r6 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener mUpnpServRspListener>;

        if $r6 == null goto label1;

        $r7 = (android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse) r1;

        specialinvoke r0.<android.net.wifi.p2p.WifiP2pManager$Channel: void handleUpnpServiceResponse(android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse)>($r7);

        return;

     label3:
        $r2 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener mServRspListener>;

        if $r2 == null goto label1;

        $r3 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener mServRspListener>;

        $i0 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getServiceType()>();

        $r4 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: byte[] getRawData()>();

        $r5 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: android.net.wifi.p2p.WifiP2pDevice getSrcDevice()>();

        interfaceinvoke $r3.<android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener: void onServiceAvailable(int,byte[],android.net.wifi.p2p.WifiP2pDevice)>($i0, $r4, $r5);

        return;
    }

    private void handleUpnpServiceResponse(android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse r1;
        android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener $r2;
        java.util.List $r3;
        android.net.wifi.p2p.WifiP2pDevice $r4;

        r0 := @this: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter0: android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse;

        $r2 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener mUpnpServRspListener>;

        $r3 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: java.util.List getUniqueServiceNames()>();

        $r4 = virtualinvoke r1.<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: android.net.wifi.p2p.WifiP2pDevice getSrcDevice()>();

        interfaceinvoke $r2.<android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener: void onUpnpServiceAvailable(java.util.List,android.net.wifi.p2p.WifiP2pDevice)>($r3, $r4);

        return;
    }

    private int putListener(java.lang.Object)
    {
        android.net.wifi.p2p.WifiP2pManager$Channel r0;
        java.lang.Object r1, r2;
        java.lang.Throwable r3, $r7;
        int i0, $i1;
        java.util.HashMap $r4;
        java.lang.Integer $r5;

        r0 := @this: android.net.wifi.p2p.WifiP2pManager$Channel;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: java.lang.Object mListenerMapLock>;

        entermonitor r2;

     label2:
        i0 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: int mListenerKey>;

        $i1 = i0 + 1;

        r0.<android.net.wifi.p2p.WifiP2pManager$Channel: int mListenerKey> = $i1;

     label3:
        if i0 == 0 goto label2;

     label4:
        $r4 = r0.<android.net.wifi.p2p.WifiP2pManager$Channel: java.util.HashMap mListenerMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1);

        exitmonitor r2;

     label5:
        return i0;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
}
