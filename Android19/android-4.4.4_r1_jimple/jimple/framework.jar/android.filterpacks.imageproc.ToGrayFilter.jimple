public class android.filterpacks.imageproc.ToGrayFilter extends android.filterpacks.imageproc.SimpleImageFilter
{
    private static final java.lang.String mColorToGray4Shader;
    private boolean mInvertSource;
    private android.filterfw.core.MutableFrameFormat mOutputFormat;
    private int mTileSize;

    public void <init>(java.lang.String)
    {
        android.filterpacks.imageproc.ToGrayFilter r0;
        java.lang.String r1;

        r0 := @this: android.filterpacks.imageproc.ToGrayFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterpacks.imageproc.SimpleImageFilter: void <init>(java.lang.String,java.lang.String)>(r1, null);

        r0.<android.filterpacks.imageproc.ToGrayFilter: boolean mInvertSource> = 0;

        r0.<android.filterpacks.imageproc.ToGrayFilter: int mTileSize> = 640;

        return;
    }

    protected android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.ToGrayFilter r0;
        android.filterfw.core.FilterContext r1;
        java.lang.RuntimeException $r2;

        r0 := @this: android.filterpacks.imageproc.ToGrayFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Native toGray not implemented yet!");

        throw $r2;
    }

    protected android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.ToGrayFilter r0;
        android.filterfw.core.FilterContext r1;
        int i0, $i1;
        android.filterfw.core.ShaderProgram r2, $r4;
        android.filterfw.core.FrameFormat $r3;
        boolean $z0;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: android.filterpacks.imageproc.ToGrayFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r3 = virtualinvoke r0.<android.filterpacks.imageproc.ToGrayFilter: android.filterfw.core.FrameFormat getInputFormat(java.lang.String)>("image");

        i0 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getBytesPerSample()>();

        if i0 == 4 goto label1;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported GL input channels: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("! Channels must be 4!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $r4 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r4.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, "precision mediump float;\nuniform sampler2D tex_sampler_0;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  float y = dot(color, vec4(0.299, 0.587, 0.114, 0));\n  gl_FragColor = vec4(y, y, y, color.a);\n}\n");

        r2 = $r4;

        $i1 = r0.<android.filterpacks.imageproc.ToGrayFilter: int mTileSize>;

        virtualinvoke r2.<android.filterfw.core.ShaderProgram: void setMaximumTileSize(int)>($i1);

        $z0 = r0.<android.filterpacks.imageproc.ToGrayFilter: boolean mInvertSource>;

        if $z0 == 0 goto label2;

        virtualinvoke r2.<android.filterfw.core.ShaderProgram: void setSourceRect(float,float,float,float)>(0.0F, 1.0F, 1.0F, -1.0F);

     label2:
        return r2;
    }

    public void setupPorts()
    {
        android.filterpacks.imageproc.ToGrayFilter r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.imageproc.ToGrayFilter;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>(3, 3);

        virtualinvoke r0.<android.filterpacks.imageproc.ToGrayFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>("image", $r1);

        virtualinvoke r0.<android.filterpacks.imageproc.ToGrayFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>("image", "image");

        return;
    }

    public static void <clinit>()
    {
        <android.filterpacks.imageproc.ToGrayFilter: java.lang.String mColorToGray4Shader> = "precision mediump float;\nuniform sampler2D tex_sampler_0;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  float y = dot(color, vec4(0.299, 0.587, 0.114, 0));\n  gl_FragColor = vec4(y, y, y, color.a);\n}\n";

        return;
    }
}
