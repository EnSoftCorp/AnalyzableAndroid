public class android.os.Binder extends java.lang.Object implements android.os.IBinder
{
    private static final boolean FIND_POTENTIAL_LEAKS;
    private static final java.lang.String TAG;
    private static java.lang.String sDumpDisabled;
    private java.lang.String mDescriptor;
    private int mObject;
    private android.os.IInterface mOwner;

    static void <clinit>()
    {
        <android.os.Binder: java.lang.String TAG> = "Binder";

        <android.os.Binder: boolean FIND_POTENTIAL_LEAKS> = 0;

        <android.os.Binder: java.lang.String sDumpDisabled> = null;

        return;
    }

    public void <init>()
    {
        android.os.Binder r0;

        r0 := @this: android.os.Binder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<android.os.Binder: void init()>();

        return;
    }

    public static final native long clearCallingIdentity();

    private final native void destroy();

    private boolean execTransact(int, int, int, int)
    {
        android.os.Binder r0;
        int i0, i1, i2, i3, $i5, $i6;
        android.os.Parcel r1, r2;
        java.lang.OutOfMemoryError r3, $r9;
        java.lang.RuntimeException r4, r5, $r8, $r10;
        boolean z0, z1;
        android.os.RemoteException r6, $r7;

        r0 := @this: android.os.Binder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain(int)>(i1);

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain(int)>(i2);

     label1:
        z1 = virtualinvoke r0.<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r1, r2, i3);

     label2:
        z0 = z1;

     label3:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z0;

     label4:
        $r7 := @caughtexception;

        r6 = $r7;

        $i5 = i3 & 1;

        if $i5 == 0 goto label5;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Binder", "Binder call failed.", r6);

     label5:
        virtualinvoke r2.<android.os.Parcel: void setDataPosition(int)>(0);

        virtualinvoke r2.<android.os.Parcel: void writeException(java.lang.Exception)>(r6);

        z0 = 1;

        goto label3;

     label6:
        $r8 := @caughtexception;

        r5 = $r8;

        $i6 = i3 & 1;

        if $i6 == 0 goto label7;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Binder", "Caught a RuntimeException from the binder stub implementation.", r5);

     label7:
        virtualinvoke r2.<android.os.Parcel: void setDataPosition(int)>(0);

        virtualinvoke r2.<android.os.Parcel: void writeException(java.lang.Exception)>(r5);

        z0 = 1;

        goto label3;

     label8:
        $r9 := @caughtexception;

        r3 = $r9;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Binder", "Caught an OutOfMemoryError from the binder stub implementation.", r3);

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Out of memory", r3);

        r4 = $r10;

        virtualinvoke r2.<android.os.Parcel: void setDataPosition(int)>(0);

        virtualinvoke r2.<android.os.Parcel: void writeException(java.lang.Exception)>(r4);

        z0 = 1;

        goto label3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.OutOfMemoryError from label1 to label2 with label8;
    }

    public static final native void flushPendingCommands();

    public static final native int getCallingPid();

    public static final native int getCallingUid();

    public static final android.os.UserHandle getCallingUserHandle()
    {
        android.os.UserHandle $r0;
        int $i0, $i1;

        $r0 = new android.os.UserHandle;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        specialinvoke $r0.<android.os.UserHandle: void <init>(int)>($i1);

        return $r0;
    }

    public static final native int getThreadStrictModePolicy();

    private final native void init();

    public static final boolean isProxy(android.os.IInterface)
    {
        android.os.IInterface r0;
        android.os.IBinder $r1;

        r0 := @parameter0: android.os.IInterface;

        $r1 = interfaceinvoke r0.<android.os.IInterface: android.os.IBinder asBinder()>();

        if $r1 == r0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final native void joinThreadPool();

    public static final native void restoreCallingIdentity(long);

    public static void setDumpDisabled(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Throwable r1, $r2;

        r0 := @parameter0: java.lang.String;

        entermonitor class "android/os/Binder";

     label1:
        <android.os.Binder: java.lang.String sDumpDisabled> = r0;

        exitmonitor class "android/os/Binder";

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor class "android/os/Binder";

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static final native void setThreadStrictModePolicy(int);

    public void attachInterface(android.os.IInterface, java.lang.String)
    {
        android.os.Binder r0;
        android.os.IInterface r1;
        java.lang.String r2;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: android.os.IInterface;

        r2 := @parameter1: java.lang.String;

        r0.<android.os.Binder: android.os.IInterface mOwner> = r1;

        r0.<android.os.Binder: java.lang.String mDescriptor> = r2;

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.os.Binder r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        return;
    }

    public void dump(java.io.FileDescriptor, java.lang.String[])
    {
        android.os.Binder r0;
        java.io.FileDescriptor r1;
        java.lang.String[] r2;
        com.android.internal.util.FastPrintWriter r3, r22;
        java.lang.Throwable r4, r5, r7, $r12, $r13, $r14;
        java.lang.String r6, $r11, $r19, $r20;
        java.lang.SecurityException r8, $r15;
        java.lang.StringBuilder $r16, $r18, r23;
        java.io.FileOutputStream r21;
        java.io.PrintWriter r24, r25, r26, r27, r28, r29, r30, r31;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.lang.String[];

        r22 = new com.android.internal.util.FastPrintWriter;

        r21 = new java.io.FileOutputStream;

        specialinvoke r21.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r1);

        specialinvoke r22.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(r21);

        r3 = r22;

     label01:
        entermonitor class "android/os/Binder";

     label02:
        r6 = <android.os.Binder: java.lang.String sDumpDisabled>;

        exitmonitor class "android/os/Binder";

     label03:
        if r6 != null goto label15;

     label04:
        r24 = (java.io.PrintWriter) r3;

        virtualinvoke r0.<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r24, r2);

     label05:
        r25 = (java.io.PrintWriter) r3;

        virtualinvoke r25.<java.io.PrintWriter: void flush()>();

        return;

     label06:
        $r12 := @caughtexception;

        r5 = $r12;

     label07:
        exitmonitor class "android/os/Binder";

     label08:
        throw r5;

     label09:
        $r13 := @caughtexception;

        r4 = $r13;

        r26 = (java.io.PrintWriter) r3;

        virtualinvoke r26.<java.io.PrintWriter: void flush()>();

        throw r4;

     label10:
        $r15 := @caughtexception;

        r8 = $r15;

     label11:
        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Security exception: ");

        $r19 = virtualinvoke r8.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r27 = (java.io.PrintWriter) r3;

        virtualinvoke r27.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        throw r8;

     label12:
        $r14 := @caughtexception;

        r7 = $r14;

     label13:
        r28 = (java.io.PrintWriter) r3;

        virtualinvoke r28.<java.io.PrintWriter: void println()>();

        r29 = (java.io.PrintWriter) r3;

        virtualinvoke r29.<java.io.PrintWriter: void println(java.lang.String)>("Exception occurred while dumping:");

        r30 = (java.io.PrintWriter) r3;

        virtualinvoke r7.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r30);

     label14:
        goto label05;

     label15:
        $r11 = <android.os.Binder: java.lang.String sDumpDisabled>;

        r31 = (java.io.PrintWriter) r3;

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r11);

     label16:
        goto label05;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.SecurityException from label04 to label05 with label10;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
        catch java.lang.Throwable from label15 to label16 with label09;
    }

    public void dumpAsync(java.io.FileDescriptor, java.lang.String[])
    {
        android.os.Binder r0;
        java.io.FileDescriptor r1;
        java.lang.String[] r2;
        java.io.FileOutputStream r6;
        com.android.internal.util.FastPrintWriter r7;
        android.os.Binder$1 r8;
        java.io.PrintWriter r9;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.lang.String[];

        r8 = new android.os.Binder$1;

        r7 = new com.android.internal.util.FastPrintWriter;

        r6 = new java.io.FileOutputStream;

        specialinvoke r6.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r1);

        specialinvoke r7.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(r6);

        r9 = (java.io.PrintWriter) r7;

        specialinvoke r8.<android.os.Binder$1: void <init>(android.os.Binder,java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r0, "Binder.dumpAsync", r1, r9, r2);

        virtualinvoke r8.<java.lang.Thread: void start()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.os.Binder r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.os.Binder;

     label1:
        specialinvoke r0.<android.os.Binder: void destroy()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getInterfaceDescriptor()
    {
        android.os.Binder r0;
        java.lang.String $r1;

        r0 := @this: android.os.Binder;

        $r1 = r0.<android.os.Binder: java.lang.String mDescriptor>;

        return $r1;
    }

    public boolean isBinderAlive()
    {
        android.os.Binder r0;

        r0 := @this: android.os.Binder;

        return 1;
    }

    public void linkToDeath(android.os.IBinder$DeathRecipient, int)
    {
        android.os.Binder r0;
        android.os.IBinder$DeathRecipient r1;
        int i0;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: android.os.IBinder$DeathRecipient;

        i0 := @parameter1: int;

        return;
    }

    protected boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        android.os.Binder r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        android.os.ParcelFileDescriptor r3;
        java.lang.String[] r4;
        java.lang.Throwable r5, $r11;
        java.io.FileDescriptor $r8;
        java.lang.String $r9;
        java.io.IOException $r10, $r12;

        r0 := @this: android.os.Binder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Parcel;

        r2 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

        if i0 != 1598968902 goto label01;

        $r9 = virtualinvoke r0.<android.os.Binder: java.lang.String getInterfaceDescriptor()>();

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>($r9);

        return 1;

     label01:
        if i0 != 1598311760 goto label09;

        r3 = virtualinvoke r1.<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>();

        r4 = virtualinvoke r1.<android.os.Parcel: java.lang.String[] readStringArray()>();

        if r3 == null goto label04;

     label02:
        $r8 = virtualinvoke r3.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        virtualinvoke r0.<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>($r8, r4);

     label03:
        virtualinvoke r3.<android.os.ParcelFileDescriptor: void close()>();

     label04:
        if r2 == null goto label08;

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        return 1;

     label05:
        $r11 := @caughtexception;

        r5 = $r11;

     label06:
        virtualinvoke r3.<android.os.ParcelFileDescriptor: void close()>();

     label07:
        throw r5;

     label08:
        staticinvoke <android.os.StrictMode: void clearGatheredViolations()>();

        return 1;

     label09:
        return 0;

     label10:
        $r10 := @caughtexception;

        goto label04;

     label11:
        $r12 := @caughtexception;

        goto label07;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.io.IOException from label06 to label07 with label11;
    }

    public boolean pingBinder()
    {
        android.os.Binder r0;

        r0 := @this: android.os.Binder;

        return 1;
    }

    public android.os.IInterface queryLocalInterface(java.lang.String)
    {
        android.os.Binder r0;
        java.lang.String r1, $r2;
        boolean $z0;
        android.os.IInterface $r3;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.os.Binder: java.lang.String mDescriptor>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<android.os.Binder: android.os.IInterface mOwner>;

        return $r3;

     label1:
        return null;
    }

    public final boolean transact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        android.os.Binder r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        boolean z0;

        r0 := @this: android.os.Binder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Parcel;

        r2 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

        if r1 == null goto label1;

        virtualinvoke r1.<android.os.Parcel: void setDataPosition(int)>(0);

     label1:
        z0 = virtualinvoke r0.<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r1, r2, i1);

        if r2 == null goto label2;

        virtualinvoke r2.<android.os.Parcel: void setDataPosition(int)>(0);

     label2:
        return z0;
    }

    public boolean unlinkToDeath(android.os.IBinder$DeathRecipient, int)
    {
        android.os.Binder r0;
        android.os.IBinder$DeathRecipient r1;
        int i0;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: android.os.IBinder$DeathRecipient;

        i0 := @parameter1: int;

        return 1;
    }
}
