public final class android.renderscript.ScriptIntrinsicHistogram extends android.renderscript.ScriptIntrinsic
{
    private android.renderscript.Allocation mOut;

    private void <init>(int, android.renderscript.RenderScript)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        int i0;
        android.renderscript.RenderScript r1;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.RenderScript;

        specialinvoke r0.<android.renderscript.ScriptIntrinsic: void <init>(int,android.renderscript.RenderScript)>(i0, r1);

        return;
    }

    public static android.renderscript.ScriptIntrinsicHistogram create(android.renderscript.RenderScript, android.renderscript.Element)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Element r1, $r2, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        android.renderscript.ScriptIntrinsicHistogram $r3;
        int $i0, $i1;
        android.renderscript.RSIllegalArgumentException $r7;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Element;

        $r2 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_4(android.renderscript.RenderScript)>(r0);

        $z0 = virtualinvoke r1.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r2);

        if $z0 != 0 goto label1;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_3(android.renderscript.RenderScript)>(r0);

        $z1 = virtualinvoke r1.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r4);

        if $z1 != 0 goto label1;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_2(android.renderscript.RenderScript)>(r0);

        $z2 = virtualinvoke r1.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r5);

        if $z2 != 0 goto label1;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>(r0);

        $z3 = virtualinvoke r1.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r6);

        if $z3 != 0 goto label1;

        $r7 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r7.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Unsuported element type.");

        throw $r7;

     label1:
        $r3 = new android.renderscript.ScriptIntrinsicHistogram;

        $i0 = virtualinvoke r1.<android.renderscript.Element: int getID(android.renderscript.RenderScript)>(r0);

        $i1 = virtualinvoke r0.<android.renderscript.RenderScript: int nScriptIntrinsicCreate(int,int)>(9, $i0);

        specialinvoke $r3.<android.renderscript.ScriptIntrinsicHistogram: void <init>(int,android.renderscript.RenderScript)>($i1, r0);

        return $r3;
    }

    public void forEach(android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Allocation r1, $r4;
        android.renderscript.Type $r2, $r5, $r7, $r11;
        android.renderscript.Element $r3, $r6, $r8, $r10, $r12, $r13;
        int $i0, $i1;
        android.renderscript.RenderScript $r9, $r14;
        boolean $z0, $z1;
        android.renderscript.RSIllegalArgumentException $r15, $r16;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        r1 := @parameter0: android.renderscript.Allocation;

        $r2 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r3 = virtualinvoke $r2.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i0 = virtualinvoke $r3.<android.renderscript.Element: int getVectorSize()>();

        $r4 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r5 = virtualinvoke $r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r6 = virtualinvoke $r5.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i1 = virtualinvoke $r6.<android.renderscript.Element: int getVectorSize()>();

        if $i0 >= $i1 goto label1;

        $r16 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r16.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Input vector size must be >= output vector size.");

        throw $r16;

     label1:
        $r7 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r8 = virtualinvoke $r7.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r10 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>($r9);

        $z0 = virtualinvoke $r8.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r10);

        if $z0 == 0 goto label2;

        $r11 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r12 = virtualinvoke $r11.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r14 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r13 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_4(android.renderscript.RenderScript)>($r14);

        $z1 = virtualinvoke $r12.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r13);

        if $z1 == 0 goto label2;

        $r15 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r15.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Output type must be U32 or I32.");

        throw $r15;

     label2:
        virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: void forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker)>(0, r1, null, null);

        return;
    }

    public void forEach_Dot(android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Allocation r1, $r2;
        android.renderscript.Type $r3, $r5, $r9;
        android.renderscript.Element $r4, $r6, $r8, $r10, $r12;
        int $i0;
        android.renderscript.RenderScript $r7, $r11;
        boolean $z0, $z1;
        android.renderscript.RSIllegalArgumentException $r13, $r14;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        r1 := @parameter0: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r3 = virtualinvoke $r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r4 = virtualinvoke $r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i0 = virtualinvoke $r4.<android.renderscript.Element: int getVectorSize()>();

        if $i0 == 1 goto label1;

        $r13 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r13.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Output vector size must be one.");

        throw $r13;

     label1:
        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r6 = virtualinvoke $r5.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r7 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r8 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>($r7);

        $z0 = virtualinvoke $r6.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r8);

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r10 = virtualinvoke $r9.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r11 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r12 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_4(android.renderscript.RenderScript)>($r11);

        $z1 = virtualinvoke $r10.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r12);

        if $z1 == 0 goto label2;

        $r14 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r14.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Output type must be U32 or I32.");

        throw $r14;

     label2:
        virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: void forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker)>(1, r1, null, null);

        return;
    }

    public android.renderscript.Script$FieldID getFieldID_Input()
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Script$FieldID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Script$FieldID createFieldID(int,android.renderscript.Element)>(1, null);

        return $r1;
    }

    public android.renderscript.Script$KernelID getKernelID_Separate()
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(0, 3, null, null);

        return $r1;
    }

    public void setDotCoefficients(float, float, float, float)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        float f0, f1, f2, f3, $f4, $f5, $f6;
        android.renderscript.FieldPacker r1, $r3;
        byte $b0, $b1, $b2, $b3, $b4;
        android.renderscript.RSIllegalArgumentException $r2, $r4;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label1;

        $b1 = f1 cmpg 0.0F;

        if $b1 < 0 goto label1;

        $b2 = f2 cmpg 0.0F;

        if $b2 < 0 goto label1;

        $b3 = f3 cmpg 0.0F;

        if $b3 >= 0 goto label2;

     label1:
        $r2 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r2.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Coefficient may not be negative.");

        throw $r2;

     label2:
        $f4 = f0 + f1;

        $f5 = f2 + $f4;

        $f6 = f3 + $f5;

        $b4 = $f6 cmpl 1.0F;

        if $b4 <= 0 goto label3;

        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Sum of coefficients must be 1.0 or less.");

        throw $r4;

     label3:
        $r3 = new android.renderscript.FieldPacker;

        specialinvoke $r3.<android.renderscript.FieldPacker: void <init>(int)>(16);

        r1 = $r3;

        virtualinvoke r1.<android.renderscript.FieldPacker: void addF32(float)>(f0);

        virtualinvoke r1.<android.renderscript.FieldPacker: void addF32(float)>(f1);

        virtualinvoke r1.<android.renderscript.FieldPacker: void addF32(float)>(f2);

        virtualinvoke r1.<android.renderscript.FieldPacker: void addF32(float)>(f3);

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: void setVar(int,android.renderscript.FieldPacker)>(0, r1);

        return;
    }

    public void setOutput(android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Allocation r1, $r2, $r7, $r10, $r12, $r14, $r17, $r20, $r27, $r29, $r38, $r43, $r45;
        android.renderscript.Type $r3, $r8, $r11, $r13, $r15, $r16, $r23, $r26, $r34, $r39, $r40, $r44;
        android.renderscript.Element $r4, $r6, $r19, $r21, $r22, $r24, $r28, $r30, $r33, $r35, $r36, $r41, $r42, $r46, $r49, $r51;
        android.renderscript.RenderScript $r5, $r18, $r25, $r31, $r32, $r37, $r47, $r50;
        int $i0, $i1, $i2;
        android.renderscript.RSIllegalArgumentException $r9, $r48;
        boolean $z0;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        r1 := @parameter0: android.renderscript.Allocation;

        r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut> = r1;

        $r2 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r3 = virtualinvoke $r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r4 = virtualinvoke $r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r5 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element U32(android.renderscript.RenderScript)>($r5);

        if $r4 == $r6 goto label1;

        $r17 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r16 = virtualinvoke $r17.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r19 = virtualinvoke $r16.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r18 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r21 = staticinvoke <android.renderscript.Element: android.renderscript.Element U32_2(android.renderscript.RenderScript)>($r18);

        if $r19 == $r21 goto label1;

        $r20 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r23 = virtualinvoke $r20.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r22 = virtualinvoke $r23.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r25 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r24 = staticinvoke <android.renderscript.Element: android.renderscript.Element U32_3(android.renderscript.RenderScript)>($r25);

        if $r22 == $r24 goto label1;

        $r27 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r26 = virtualinvoke $r27.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r30 = virtualinvoke $r26.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r31 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r28 = staticinvoke <android.renderscript.Element: android.renderscript.Element U32_4(android.renderscript.RenderScript)>($r31);

        if $r30 == $r28 goto label1;

        $r29 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r34 = virtualinvoke $r29.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r35 = virtualinvoke $r34.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r32 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r33 = staticinvoke <android.renderscript.Element: android.renderscript.Element I32(android.renderscript.RenderScript)>($r32);

        if $r35 == $r33 goto label1;

        $r38 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r39 = virtualinvoke $r38.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r36 = virtualinvoke $r39.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r37 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r42 = staticinvoke <android.renderscript.Element: android.renderscript.Element I32_2(android.renderscript.RenderScript)>($r37);

        if $r36 == $r42 goto label1;

        $r43 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r40 = virtualinvoke $r43.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r41 = virtualinvoke $r40.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r47 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r46 = staticinvoke <android.renderscript.Element: android.renderscript.Element I32_3(android.renderscript.RenderScript)>($r47);

        if $r41 == $r46 goto label1;

        $r45 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r44 = virtualinvoke $r45.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r51 = virtualinvoke $r44.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r50 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r49 = staticinvoke <android.renderscript.Element: android.renderscript.Element I32_4(android.renderscript.RenderScript)>($r50);

        if $r51 == $r49 goto label1;

        $r48 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r48.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Output type must be U32 or I32.");

        throw $r48;

     label1:
        $r7 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r8 = virtualinvoke $r7.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i0 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        if $i0 != 256 goto label2;

        $r10 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r11 = virtualinvoke $r10.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        if $i1 != 0 goto label2;

        $r12 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r13 = virtualinvoke $r12.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $z0 = virtualinvoke $r13.<android.renderscript.Type: boolean hasMipmaps()>();

        if $z0 != 0 goto label2;

        $r14 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r15 = virtualinvoke $r14.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r15.<android.renderscript.Type: int getYuv()>();

        if $i2 == 0 goto label3;

     label2:
        $r9 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r9.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Output must be 1D, 256 elements.");

        throw $r9;

     label3:
        virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: void setVar(int,android.renderscript.BaseObj)>(1, r1);

        return;
    }
}
