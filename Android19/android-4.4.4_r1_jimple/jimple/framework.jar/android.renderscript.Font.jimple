public class android.renderscript.Font extends android.renderscript.BaseObj
{
    private static java.util.Map sFontFamilyMap;
    private static final java.lang.String[] sMonoNames;
    private static final java.lang.String[] sSansNames;
    private static final java.lang.String[] sSerifNames;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "sans-serif";

        $r0[1] = "arial";

        $r0[2] = "helvetica";

        $r0[3] = "tahoma";

        $r0[4] = "verdana";

        <android.renderscript.Font: java.lang.String[] sSansNames> = $r0;

        $r1 = newarray (java.lang.String)[10];

        $r1[0] = "serif";

        $r1[1] = "times";

        $r1[2] = "times new roman";

        $r1[3] = "palatino";

        $r1[4] = "georgia";

        $r1[5] = "baskerville";

        $r1[6] = "goudy";

        $r1[7] = "fantasy";

        $r1[8] = "cursive";

        $r1[9] = "ITC Stone Serif";

        <android.renderscript.Font: java.lang.String[] sSerifNames> = $r1;

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = "monospace";

        $r2[1] = "courier";

        $r2[2] = "courier new";

        $r2[3] = "monaco";

        <android.renderscript.Font: java.lang.String[] sMonoNames> = $r2;

        staticinvoke <android.renderscript.Font: void initFontFamilyMap()>();

        return;
    }

    void <init>(int, android.renderscript.RenderScript)
    {
        android.renderscript.Font r0;
        int i0;
        android.renderscript.RenderScript r1;

        r0 := @this: android.renderscript.Font;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.RenderScript;

        specialinvoke r0.<android.renderscript.BaseObj: void <init>(int,android.renderscript.RenderScript)>(i0, r1);

        return;
    }

    private static void addFamilyToMap(android.renderscript.Font$FontFamily)
    {
        android.renderscript.Font$FontFamily r0;
        int i0, $i1;
        java.lang.String[] $r1, $r2;
        java.lang.String $r3;
        java.util.Map $r4;

        r0 := @parameter0: android.renderscript.Font$FontFamily;

        i0 = 0;

     label1:
        $r1 = r0.<android.renderscript.Font$FontFamily: java.lang.String[] mNames>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r4 = <android.renderscript.Font: java.util.Map sFontFamilyMap>;

        $r2 = r0.<android.renderscript.Font$FontFamily: java.lang.String[] mNames>;

        $r3 = $r2[i0];

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r0);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public static android.renderscript.Font create(android.renderscript.RenderScript, android.content.res.Resources, java.lang.String, android.renderscript.Font$Style, float)
    {
        android.renderscript.RenderScript r0;
        android.content.res.Resources r1;
        java.lang.String r2, r4, r5, $r11;
        android.renderscript.Font$Style r3;
        float f0;
        java.io.File $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        android.renderscript.Font $r12;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.renderscript.Font$Style;

        f0 := @parameter4: float;

        r4 = staticinvoke <android.renderscript.Font: java.lang.String getFontFileName(java.lang.String,android.renderscript.Font$Style)>(r2, r3);

        $r6 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        r5 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/fonts/");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <android.renderscript.Font: android.renderscript.Font createFromFile(android.renderscript.RenderScript,android.content.res.Resources,java.lang.String,float)>(r0, r1, $r11, f0);

        return $r12;
    }

    public static android.renderscript.Font createFromAsset(android.renderscript.RenderScript, android.content.res.Resources, java.lang.String, float)
    {
        android.renderscript.RenderScript r0;
        android.content.res.Resources r1;
        java.lang.String r2, $r10;
        float f0;
        int i0, $i1;
        android.content.res.AssetManager $r3;
        android.util.DisplayMetrics $r4;
        android.renderscript.Font $r5;
        android.renderscript.RSRuntimeException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: java.lang.String;

        f0 := @parameter3: float;

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        $r3 = virtualinvoke r1.<android.content.res.Resources: android.content.res.AssetManager getAssets()>();

        $r4 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i1 = $r4.<android.util.DisplayMetrics: int densityDpi>;

        i0 = virtualinvoke r0.<android.renderscript.RenderScript: int nFontCreateFromAsset(android.content.res.AssetManager,java.lang.String,float,int)>($r3, r2, f0, $i1);

        if i0 != 0 goto label1;

        $r6 = new android.renderscript.RSRuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create font from asset ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $r5 = new android.renderscript.Font;

        specialinvoke $r5.<android.renderscript.Font: void <init>(int,android.renderscript.RenderScript)>(i0, r0);

        return $r5;
    }

    public static android.renderscript.Font createFromFile(android.renderscript.RenderScript, android.content.res.Resources, java.io.File, float)
    {
        android.renderscript.RenderScript r0;
        android.content.res.Resources r1;
        java.io.File r2;
        float f0;
        java.lang.String $r3;
        android.renderscript.Font $r4;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: java.io.File;

        f0 := @parameter3: float;

        $r3 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = staticinvoke <android.renderscript.Font: android.renderscript.Font createFromFile(android.renderscript.RenderScript,android.content.res.Resources,java.lang.String,float)>(r0, r1, $r3, f0);

        return $r4;
    }

    public static android.renderscript.Font createFromFile(android.renderscript.RenderScript, android.content.res.Resources, java.lang.String, float)
    {
        android.renderscript.RenderScript r0;
        android.content.res.Resources r1;
        java.lang.String r2, $r9;
        float f0;
        int i0, $i1;
        android.util.DisplayMetrics $r3;
        android.renderscript.Font $r4;
        android.renderscript.RSRuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: java.lang.String;

        f0 := @parameter3: float;

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        $r3 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i1 = $r3.<android.util.DisplayMetrics: int densityDpi>;

        i0 = virtualinvoke r0.<android.renderscript.RenderScript: int nFontCreateFromFile(java.lang.String,float,int)>(r2, f0, $i1);

        if i0 != 0 goto label1;

        $r5 = new android.renderscript.RSRuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create font from file ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r4 = new android.renderscript.Font;

        specialinvoke $r4.<android.renderscript.Font: void <init>(int,android.renderscript.RenderScript)>(i0, r0);

        return $r4;
    }

    public static android.renderscript.Font createFromResource(android.renderscript.RenderScript, android.content.res.Resources, int, float)
    {
        android.renderscript.RenderScript r0;
        android.content.res.Resources r1;
        int i0, i1, i2, $i3;
        float f0;
        java.lang.String r2, $r7, $r18, $r23;
        java.io.InputStream r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r13, $r15, $r16, $r19, $r21, $r22;
        android.util.DisplayMetrics $r9;
        android.renderscript.RSRuntimeException $r10, $r14, $r20;
        boolean $z0;
        android.content.res.AssetManager$AssetInputStream $r11;
        android.renderscript.Font $r12;
        java.lang.Exception $r17;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.content.res.Resources;

        i0 := @parameter2: int;

        f0 := @parameter3: float;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("R.");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

     label1:
        r4 = virtualinvoke r1.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(i0);

     label2:
        $r9 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i1 = $r9.<android.util.DisplayMetrics: int densityDpi>;

        $z0 = r4 instanceof android.content.res.AssetManager$AssetInputStream;

        if $z0 == 0 goto label4;

        $r11 = (android.content.res.AssetManager$AssetInputStream) r4;

        $i3 = virtualinvoke $r11.<android.content.res.AssetManager$AssetInputStream: int getAssetInt()>();

        i2 = virtualinvoke r0.<android.renderscript.RenderScript: int nFontCreateFromAssetStream(java.lang.String,float,int,int)>(r2, f0, i1, $i3);

        if i2 != 0 goto label5;

        $r14 = new android.renderscript.RSRuntimeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create font from resource ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label3:
        $r17 := @caughtexception;

        $r20 = new android.renderscript.RSRuntimeException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to open resource ");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label4:
        $r10 = new android.renderscript.RSRuntimeException;

        specialinvoke $r10.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Unsupported asset stream created");

        throw $r10;

     label5:
        $r12 = new android.renderscript.Font;

        specialinvoke $r12.<android.renderscript.Font: void <init>(int,android.renderscript.RenderScript)>(i2, r0);

        return $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static java.lang.String getFontFileName(java.lang.String, android.renderscript.Font$Style)
    {
        java.lang.String r0, $r6, $r7, $r8, $r9;
        android.renderscript.Font$Style r1;
        android.renderscript.Font$FontFamily r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        int[] $r5;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.renderscript.Font$Style;

        $r3 = <android.renderscript.Font: java.util.Map sFontFamilyMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (android.renderscript.Font$FontFamily) $r4;

        if r2 == null goto label1;

        $r5 = <android.renderscript.Font$1: int[] $SwitchMap$android$renderscript$Font$Style>;

        $i0 = virtualinvoke r1.<android.renderscript.Font$Style: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label1;
        };

     label1:
        return "DroidSans.ttf";

     label2:
        $r9 = r2.<android.renderscript.Font$FontFamily: java.lang.String mNormalFileName>;

        return $r9;

     label3:
        $r8 = r2.<android.renderscript.Font$FontFamily: java.lang.String mBoldFileName>;

        return $r8;

     label4:
        $r7 = r2.<android.renderscript.Font$FontFamily: java.lang.String mItalicFileName>;

        return $r7;

     label5:
        $r6 = r2.<android.renderscript.Font$FontFamily: java.lang.String mBoldItalicFileName>;

        return $r6;
    }

    private static void initFontFamilyMap()
    {
        android.renderscript.Font$FontFamily r0, r1, r2, $r4, $r6, $r8;
        java.util.HashMap $r3;
        java.lang.String[] $r5, $r7, $r9;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <android.renderscript.Font: java.util.Map sFontFamilyMap> = $r3;

        $r4 = new android.renderscript.Font$FontFamily;

        specialinvoke $r4.<android.renderscript.Font$FontFamily: void <init>(android.renderscript.Font$1)>(null);

        r0 = $r4;

        $r5 = <android.renderscript.Font: java.lang.String[] sSansNames>;

        r0.<android.renderscript.Font$FontFamily: java.lang.String[] mNames> = $r5;

        r0.<android.renderscript.Font$FontFamily: java.lang.String mNormalFileName> = "Roboto-Regular.ttf";

        r0.<android.renderscript.Font$FontFamily: java.lang.String mBoldFileName> = "Roboto-Bold.ttf";

        r0.<android.renderscript.Font$FontFamily: java.lang.String mItalicFileName> = "Roboto-Italic.ttf";

        r0.<android.renderscript.Font$FontFamily: java.lang.String mBoldItalicFileName> = "Roboto-BoldItalic.ttf";

        staticinvoke <android.renderscript.Font: void addFamilyToMap(android.renderscript.Font$FontFamily)>(r0);

        $r6 = new android.renderscript.Font$FontFamily;

        specialinvoke $r6.<android.renderscript.Font$FontFamily: void <init>(android.renderscript.Font$1)>(null);

        r1 = $r6;

        $r7 = <android.renderscript.Font: java.lang.String[] sSerifNames>;

        r1.<android.renderscript.Font$FontFamily: java.lang.String[] mNames> = $r7;

        r1.<android.renderscript.Font$FontFamily: java.lang.String mNormalFileName> = "DroidSerif-Regular.ttf";

        r1.<android.renderscript.Font$FontFamily: java.lang.String mBoldFileName> = "DroidSerif-Bold.ttf";

        r1.<android.renderscript.Font$FontFamily: java.lang.String mItalicFileName> = "DroidSerif-Italic.ttf";

        r1.<android.renderscript.Font$FontFamily: java.lang.String mBoldItalicFileName> = "DroidSerif-BoldItalic.ttf";

        staticinvoke <android.renderscript.Font: void addFamilyToMap(android.renderscript.Font$FontFamily)>(r1);

        $r8 = new android.renderscript.Font$FontFamily;

        specialinvoke $r8.<android.renderscript.Font$FontFamily: void <init>(android.renderscript.Font$1)>(null);

        r2 = $r8;

        $r9 = <android.renderscript.Font: java.lang.String[] sMonoNames>;

        r2.<android.renderscript.Font$FontFamily: java.lang.String[] mNames> = $r9;

        r2.<android.renderscript.Font$FontFamily: java.lang.String mNormalFileName> = "DroidSansMono.ttf";

        r2.<android.renderscript.Font$FontFamily: java.lang.String mBoldFileName> = "DroidSansMono.ttf";

        r2.<android.renderscript.Font$FontFamily: java.lang.String mItalicFileName> = "DroidSansMono.ttf";

        r2.<android.renderscript.Font$FontFamily: java.lang.String mBoldItalicFileName> = "DroidSansMono.ttf";

        staticinvoke <android.renderscript.Font: void addFamilyToMap(android.renderscript.Font$FontFamily)>(r2);

        return;
    }
}
