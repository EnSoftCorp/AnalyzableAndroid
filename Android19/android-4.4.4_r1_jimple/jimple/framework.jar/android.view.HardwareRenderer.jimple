public abstract class android.view.HardwareRenderer extends java.lang.Object
{
    private static final java.lang.String CACHE_PATH_SHADERS;
    public static final java.lang.String DEBUG_DIRTY_REGIONS_PROPERTY;
    public static final java.lang.String DEBUG_OVERDRAW_PROPERTY;
    public static final java.lang.String DEBUG_SHOW_LAYERS_UPDATES_PROPERTY;
    public static final java.lang.String DEBUG_SHOW_NON_RECTANGULAR_CLIP_PROPERTY;
    static final java.lang.String LOG_TAG;
    public static final java.lang.String OVERDRAW_PROPERTY_COUNT;
    public static final java.lang.String OVERDRAW_PROPERTY_SHOW;
    static final java.lang.String PRINT_CONFIG_PROPERTY;
    private static final int PROFILE_FRAME_DATA_COUNT;
    static final java.lang.String PROFILE_MAXFRAMES_PROPERTY;
    private static final int PROFILE_MAX_FRAMES;
    public static final java.lang.String PROFILE_PROPERTY;
    public static final java.lang.String PROFILE_PROPERTY_VISUALIZE_BARS;
    public static final java.lang.String PROFILE_PROPERTY_VISUALIZE_LINES;
    static final boolean RENDER_DIRTY_REGIONS;
    static final java.lang.String RENDER_DIRTY_REGIONS_PROPERTY;
    public static boolean sRendererDisabled;
    public static boolean sSystemRendererDisabled;
    private boolean mEnabled;
    private boolean mRequested;

    static void <clinit>()
    {
        <android.view.HardwareRenderer: java.lang.String RENDER_DIRTY_REGIONS_PROPERTY> = "debug.hwui.render_dirty_regions";

        <android.view.HardwareRenderer: boolean RENDER_DIRTY_REGIONS> = 1;

        <android.view.HardwareRenderer: java.lang.String PROFILE_PROPERTY_VISUALIZE_LINES> = "visual_lines";

        <android.view.HardwareRenderer: java.lang.String PROFILE_PROPERTY_VISUALIZE_BARS> = "visual_bars";

        <android.view.HardwareRenderer: java.lang.String PROFILE_PROPERTY> = "debug.hwui.profile";

        <android.view.HardwareRenderer: int PROFILE_MAX_FRAMES> = 128;

        <android.view.HardwareRenderer: java.lang.String PROFILE_MAXFRAMES_PROPERTY> = "debug.hwui.profile.maxframes";

        <android.view.HardwareRenderer: int PROFILE_FRAME_DATA_COUNT> = 3;

        <android.view.HardwareRenderer: java.lang.String PRINT_CONFIG_PROPERTY> = "debug.hwui.print_config";

        <android.view.HardwareRenderer: java.lang.String OVERDRAW_PROPERTY_SHOW> = "show";

        <android.view.HardwareRenderer: java.lang.String OVERDRAW_PROPERTY_COUNT> = "count";

        <android.view.HardwareRenderer: java.lang.String LOG_TAG> = "HardwareRenderer";

        <android.view.HardwareRenderer: java.lang.String DEBUG_SHOW_NON_RECTANGULAR_CLIP_PROPERTY> = "debug.hwui.show_non_rect_clip";

        <android.view.HardwareRenderer: java.lang.String DEBUG_SHOW_LAYERS_UPDATES_PROPERTY> = "debug.hwui.show_layers_updates";

        <android.view.HardwareRenderer: java.lang.String DEBUG_OVERDRAW_PROPERTY> = "debug.hwui.overdraw";

        <android.view.HardwareRenderer: java.lang.String DEBUG_DIRTY_REGIONS_PROPERTY> = "debug.hwui.show_dirty_regions";

        <android.view.HardwareRenderer: java.lang.String CACHE_PATH_SHADERS> = "com.android.opengl.shaders_cache";

        <android.view.HardwareRenderer: boolean sRendererDisabled> = 0;

        <android.view.HardwareRenderer: boolean sSystemRendererDisabled> = 0;

        return;
    }

    public void <init>()
    {
        android.view.HardwareRenderer r0;

        r0 := @this: android.view.HardwareRenderer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.HardwareRenderer: boolean mRequested> = 1;

        return;
    }

    static boolean access$000()
    {
        boolean $z0;

        $z0 = staticinvoke <android.view.HardwareRenderer: boolean nLoadProperties()>();

        return $z0;
    }

    static void beginFrame(int[])
    {
        int[] r0;

        r0 := @parameter0: int[];

        staticinvoke <android.view.HardwareRenderer: void nBeginFrame(int[])>(r0);

        return;
    }

    static android.view.HardwareRenderer createGlRenderer(int, boolean)
    {
        int i0;
        boolean z0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        android.view.HardwareRenderer $r5;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        tableswitch(i0)
        {
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown GL version: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        $r5 = staticinvoke <android.view.HardwareRenderer$Gl20Renderer: android.view.HardwareRenderer create(boolean)>(z0);

        return $r5;
    }

    public static void disable(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <android.view.HardwareRenderer: boolean sRendererDisabled> = 1;

        if z0 == 0 goto label1;

        <android.view.HardwareRenderer: boolean sSystemRendererDisabled> = 1;

     label1:
        return;
    }

    static void endTrimMemory()
    {
        staticinvoke <android.view.HardwareRenderer$Gl20Renderer: void endTrimMemory()>();

        return;
    }

    static long getSystemTime()
    {
        long $l0;

        $l0 = staticinvoke <android.view.HardwareRenderer: long nGetSystemTime()>();

        return $l0;
    }

    public static boolean isAvailable()
    {
        boolean $z0;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean isAvailable()>();

        return $z0;
    }

    static boolean isBackBufferPreserved()
    {
        boolean $z0;

        $z0 = staticinvoke <android.view.HardwareRenderer: boolean nIsBackBufferPreserved()>();

        return $z0;
    }

    private static native void nBeginFrame(int[]);

    private static native long nGetSystemTime();

    private static native boolean nIsBackBufferPreserved();

    private static native boolean nLoadProperties();

    private static native boolean nPreserveBackBuffer();

    private static native void nSetupShadersDiskCache(java.lang.String);

    static boolean preserveBackBuffer()
    {
        boolean $z0;

        $z0 = staticinvoke <android.view.HardwareRenderer: boolean nPreserveBackBuffer()>();

        return $z0;
    }

    public static void setupDiskCache(java.io.File)
    {
        java.io.File r0, $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.io.File;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "com.android.opengl.shaders_cache");

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.view.HardwareRenderer: void nSetupShadersDiskCache(java.lang.String)>($r2);

        return;
    }

    static void startTrimMemory(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.view.HardwareRenderer$Gl20Renderer: void startTrimMemory(int)>(i0);

        return;
    }

    static void trimMemory(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.view.HardwareRenderer: void startTrimMemory(int)>(i0);

        staticinvoke <android.view.HardwareRenderer: void endTrimMemory()>();

        return;
    }

    abstract boolean attachFunctor(android.view.View$AttachInfo, int);

    abstract void cancelLayerUpdate(android.view.HardwareLayer);

    public abstract android.view.DisplayList createDisplayList(java.lang.String);

    abstract android.view.HardwareLayer createHardwareLayer(int, int, boolean);

    abstract android.view.HardwareLayer createHardwareLayer(boolean);

    abstract android.graphics.SurfaceTexture createSurfaceTexture(android.view.HardwareLayer);

    abstract void destroy(boolean);

    abstract void destroyHardwareResources(android.view.View);

    abstract void destroyLayers(android.view.View);

    abstract void detachFunctor(int);

    abstract void draw(android.view.View, android.view.View$AttachInfo, android.view.HardwareRenderer$HardwareDrawCallbacks, android.graphics.Rect);

    abstract void dumpGfxInfo(java.io.PrintWriter);

    abstract void flushLayerUpdates();

    abstract android.view.HardwareCanvas getCanvas();

    abstract long getFrameCount();

    abstract int getHeight();

    abstract int getWidth();

    abstract boolean initialize(android.view.Surface) throws android.view.Surface$OutOfResourcesException;

    boolean initializeIfNeeded(int, int, android.view.Surface) throws android.view.Surface$OutOfResourcesException
    {
        android.view.HardwareRenderer r0;
        int i0, i1;
        android.view.Surface r1;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.HardwareRenderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.Surface;

        $z0 = virtualinvoke r0.<android.view.HardwareRenderer: boolean isRequested()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<android.view.HardwareRenderer: boolean initialize(android.view.Surface)>(r1);

        if $z2 == 0 goto label1;

        virtualinvoke r0.<android.view.HardwareRenderer: void setup(int,int)>(i0, i1);

        return 1;

     label1:
        return 0;
    }

    abstract void invalidate(android.view.Surface);

    boolean isEnabled()
    {
        android.view.HardwareRenderer r0;
        boolean $z0;

        r0 := @this: android.view.HardwareRenderer;

        $z0 = r0.<android.view.HardwareRenderer: boolean mEnabled>;

        return $z0;
    }

    boolean isRequested()
    {
        android.view.HardwareRenderer r0;
        boolean $z0;

        r0 := @this: android.view.HardwareRenderer;

        $z0 = r0.<android.view.HardwareRenderer: boolean mRequested>;

        return $z0;
    }

    abstract boolean loadSystemProperties(android.view.Surface);

    abstract void pushLayerUpdate(android.view.HardwareLayer);

    abstract boolean safelyRun(java.lang.Runnable);

    void setEnabled(boolean)
    {
        android.view.HardwareRenderer r0;
        boolean z0;

        r0 := @this: android.view.HardwareRenderer;

        z0 := @parameter0: boolean;

        r0.<android.view.HardwareRenderer: boolean mEnabled> = z0;

        return;
    }

    abstract void setName(java.lang.String);

    void setRequested(boolean)
    {
        android.view.HardwareRenderer r0;
        boolean z0;

        r0 := @this: android.view.HardwareRenderer;

        z0 := @parameter0: boolean;

        r0.<android.view.HardwareRenderer: boolean mRequested> = z0;

        return;
    }

    abstract void setSurfaceTexture(android.view.HardwareLayer, android.graphics.SurfaceTexture);

    abstract void setup(int, int);

    abstract void updateSurface(android.view.Surface) throws android.view.Surface$OutOfResourcesException;

    abstract boolean validate();
}
