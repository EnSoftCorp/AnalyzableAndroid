public class android.net.ConnectivityManager extends java.lang.Object
{
    public static final java.lang.String ACTION_BACKGROUND_DATA_SETTING_CHANGED;
    public static final java.lang.String ACTION_CAPTIVE_PORTAL_TEST_COMPLETED;
    public static final java.lang.String ACTION_DATA_ACTIVITY_CHANGE;
    public static final java.lang.String ACTION_TETHER_STATE_CHANGED;
    public static final java.lang.String CONNECTIVITY_ACTION;
    public static final java.lang.String CONNECTIVITY_ACTION_IMMEDIATE;
    public static final int CONNECTIVITY_CHANGE_DELAY_DEFAULT;
    public static final int DEFAULT_NETWORK_PREFERENCE;
    public static final java.lang.String EXTRA_ACTIVE_TETHER;
    public static final java.lang.String EXTRA_AVAILABLE_TETHER;
    public static final java.lang.String EXTRA_DEVICE_TYPE;
    public static final java.lang.String EXTRA_ERRORED_TETHER;
    public static final java.lang.String EXTRA_EXTRA_INFO;
    public static final java.lang.String EXTRA_INET_CONDITION;
    public static final java.lang.String EXTRA_IS_ACTIVE;
    public static final java.lang.String EXTRA_IS_CAPTIVE_PORTAL;
    public static final java.lang.String EXTRA_IS_FAILOVER;
    public static final java.lang.String EXTRA_NETWORK_INFO;
    public static final java.lang.String EXTRA_NETWORK_TYPE;
    public static final java.lang.String EXTRA_NO_CONNECTIVITY;
    public static final java.lang.String EXTRA_OTHER_NETWORK_INFO;
    public static final java.lang.String EXTRA_REASON;
    public static final java.lang.String INET_CONDITION_ACTION;
    public static final int MAX_NETWORK_TYPE;
    public static final int MAX_RADIO_TYPE;
    private static final java.lang.String TAG;
    public static final int TETHER_ERROR_DISABLE_NAT_ERROR;
    public static final int TETHER_ERROR_ENABLE_NAT_ERROR;
    public static final int TETHER_ERROR_IFACE_CFG_ERROR;
    public static final int TETHER_ERROR_MASTER_ERROR;
    public static final int TETHER_ERROR_NO_ERROR;
    public static final int TETHER_ERROR_SERVICE_UNAVAIL;
    public static final int TETHER_ERROR_TETHER_IFACE_ERROR;
    public static final int TETHER_ERROR_UNAVAIL_IFACE;
    public static final int TETHER_ERROR_UNKNOWN_IFACE;
    public static final int TETHER_ERROR_UNSUPPORTED;
    public static final int TETHER_ERROR_UNTETHER_IFACE_ERROR;
    public static final int TYPE_BLUETOOTH;
    public static final int TYPE_DUMMY;
    public static final int TYPE_ETHERNET;
    public static final int TYPE_MOBILE;
    public static final int TYPE_MOBILE_CBS;
    public static final int TYPE_MOBILE_DUN;
    public static final int TYPE_MOBILE_FOTA;
    public static final int TYPE_MOBILE_HIPRI;
    public static final int TYPE_MOBILE_IA;
    public static final int TYPE_MOBILE_IMS;
    public static final int TYPE_MOBILE_MMS;
    public static final int TYPE_MOBILE_SUPL;
    public static final int TYPE_NONE;
    public static final int TYPE_WIFI;
    public static final int TYPE_WIFI_P2P;
    public static final int TYPE_WIMAX;
    private final java.lang.String mPackageName;
    private final android.net.IConnectivityManager mService;

    public void <init>(android.net.IConnectivityManager, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager r1, $r4;
        java.lang.String r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.IConnectivityManager;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing IConnectivityManager");

        $r4 = (android.net.IConnectivityManager) $r3;

        r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService> = $r4;

        $r5 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "missing package name");

        $r6 = (java.lang.String) $r5;

        r0.<android.net.ConnectivityManager: java.lang.String mPackageName> = $r6;

        return;
    }

    public static android.net.ConnectivityManager 'from'(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.net.ConnectivityManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r2 = (android.net.ConnectivityManager) $r1;

        return $r2;
    }

    public static java.lang.String getNetworkTypeName(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label11;
            case 10: goto label12;
            case 11: goto label13;
            case 12: goto label14;
            case 13: goto label15;
            case 14: goto label16;
            default: goto label01;
        };

     label01:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label02:
        return "MOBILE";

     label03:
        return "WIFI";

     label04:
        return "MOBILE_MMS";

     label05:
        return "MOBILE_SUPL";

     label06:
        return "MOBILE_DUN";

     label07:
        return "MOBILE_HIPRI";

     label08:
        return "WIMAX";

     label09:
        return "BLUETOOTH";

     label10:
        return "DUMMY";

     label11:
        return "ETHERNET";

     label12:
        return "MOBILE_FOTA";

     label13:
        return "MOBILE_IMS";

     label14:
        return "MOBILE_CBS";

     label15:
        return "WIFI_P2P";

     label16:
        return "MOBILE_IA";
    }

    public static boolean isNetworkTypeExempt(int)
    {
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 2: goto label2;
            case 3: goto label2;
            case 5: goto label2;
            case 14: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    public static boolean isNetworkTypeMobile(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label1;
            case 10: goto label2;
            case 11: goto label2;
            case 12: goto label2;
            case 13: goto label1;
            case 14: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    public static boolean isNetworkTypeValid(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 14 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isNetworkTypeWifi(int)
    {
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 1: goto label2;
            case 13: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    public void captivePortalCheckComplete(android.net.NetworkInfo)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkInfo r1;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkInfo;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void captivePortalCheckComplete(android.net.NetworkInfo)>(r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void captivePortalCheckCompleted(android.net.NetworkInfo, boolean)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkInfo r1;
        boolean z0;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkInfo;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void captivePortalCheckCompleted(android.net.NetworkInfo,boolean)>(r1, z0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkMobileProvisioning(int)
    {
        android.net.ConnectivityManager r0;
        int i0, i1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i1 = interfaceinvoke $r2.<android.net.IConnectivityManager: int checkMobileProvisioning(int)>(i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkProperties getActiveLinkProperties()
    {
        android.net.ConnectivityManager r0;
        android.net.LinkProperties r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.LinkProperties getActiveLinkProperties()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkQualityInfo getActiveLinkQualityInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.LinkQualityInfo r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.LinkQualityInfo getActiveLinkQualityInfo()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getActiveNetworkInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkInfo r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getActiveNetworkInfoForUid(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.NetworkInfo r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>(i0);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkQuotaInfo r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkQualityInfo[] getAllLinkQualityInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.LinkQualityInfo[] r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.LinkQualityInfo[] getAllLinkQualityInfo()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo[] getAllNetworkInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkInfo[] r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getBackgroundDataSetting()
    {
        android.net.ConnectivityManager r0;

        r0 := @this: android.net.ConnectivityManager;

        return 1;
    }

    public android.net.ProxyProperties getGlobalProxy()
    {
        android.net.ConnectivityManager r0;
        android.net.ProxyProperties r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.ProxyProperties getGlobalProxy()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getLastTetherError(java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1;
        int i0;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i0 = interfaceinvoke $r3.<android.net.IConnectivityManager: int getLastTetherError(java.lang.String)>(r1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkProperties getLinkProperties(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.LinkProperties r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.LinkProperties getLinkProperties(int)>(i0);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkQualityInfo getLinkQualityInfo(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.LinkQualityInfo r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.LinkQualityInfo getLinkQualityInfo(int)>(i0);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getMobileDataEnabled()
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean getMobileDataEnabled()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getMobileProvisioningUrl()
    {
        android.net.ConnectivityManager r0;
        java.lang.String r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: java.lang.String getMobileProvisioningUrl()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getMobileRedirectedProvisioningUrl()
    {
        android.net.ConnectivityManager r0;
        java.lang.String r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: java.lang.String getMobileRedirectedProvisioningUrl()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getNetworkInfo(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.NetworkInfo r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>(i0);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getNetworkPreference()
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i0 = interfaceinvoke $r2.<android.net.IConnectivityManager: int getNetworkPreference()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkInfo r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.ProxyProperties getProxy()
    {
        android.net.ConnectivityManager r0;
        android.net.ProxyProperties r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.ProxyProperties getProxy()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetherableBluetoothRegexs()
    {
        android.net.ConnectivityManager r0;
        java.lang.String[] r2, $r5;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetherableIfaces()
    {
        android.net.ConnectivityManager r0;
        java.lang.String[] r2, $r5;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: java.lang.String[] getTetherableIfaces()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetherableUsbRegexs()
    {
        android.net.ConnectivityManager r0;
        java.lang.String[] r2, $r5;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: java.lang.String[] getTetherableUsbRegexs()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetherableWifiRegexs()
    {
        android.net.ConnectivityManager r0;
        java.lang.String[] r2, $r5;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: java.lang.String[] getTetherableWifiRegexs()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetheredIfaces()
    {
        android.net.ConnectivityManager r0;
        java.lang.String[] r2, $r5;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: java.lang.String[] getTetheredIfaces()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetheringErroredIfaces()
    {
        android.net.ConnectivityManager r0;
        java.lang.String[] r2, $r5;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r2 = interfaceinvoke $r3.<android.net.IConnectivityManager: java.lang.String[] getTetheringErroredIfaces()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isActiveNetworkMetered()
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean isActiveNetworkMetered()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isNetworkSupported(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean isNetworkSupported(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isTetheringSupported()
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean isTetheringSupported()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportInetCondition(int, int)
    {
        android.net.ConnectivityManager r0;
        int i0, i1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void reportInetCondition(int,int)>(i0, i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean requestNetworkTransitionWakelock(java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void requestNetworkTransitionWakelock(java.lang.String)>(r1);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean requestRouteToHost(int, int)
    {
        android.net.ConnectivityManager r0;
        int i0, i1;
        java.net.InetAddress r1;
        boolean $z0;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress intToInetAddress(int)>(i1);

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,java.net.InetAddress)>(i0, r1);

        return $z0;
    }

    public boolean requestRouteToHostAddress(int, java.net.InetAddress)
    {
        android.net.ConnectivityManager r0;
        int i0;
        java.net.InetAddress r1;
        byte[] r2;
        boolean z0;
        java.lang.String $r4;
        android.net.IConnectivityManager $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.net.InetAddress;

        r2 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

     label1:
        $r5 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r4 = r0.<android.net.ConnectivityManager: java.lang.String mPackageName>;

        z0 = interfaceinvoke $r5.<android.net.IConnectivityManager: boolean requestRouteToHostAddress(int,byte[],java.lang.String)>(i0, r2, $r4);

     label2:
        return z0;

     label3:
        $r6 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAirplaneMode(boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void setAirplaneMode(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBackgroundDataSetting(boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

        return;
    }

    public void setDataDependency(int, boolean)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void setDataDependency(int,boolean)>(i0, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setGlobalProxy(android.net.ProxyProperties)
    {
        android.net.ConnectivityManager r0;
        android.net.ProxyProperties r1;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.ProxyProperties;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)>(r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMobileDataEnabled(boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void setMobileDataEnabled(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNetworkPreference(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void setNetworkPreference(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setProvisioningNotificationVisible(boolean, int, java.lang.String, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        int i0;
        java.lang.String r1, r2;
        android.net.IConnectivityManager $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

     label1:
        $r4 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r4.<android.net.IConnectivityManager: void setProvisioningNotificationVisible(boolean,int,java.lang.String,java.lang.String)>(z0, i0, r1, r2);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setRadio(int, boolean)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0, z1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z1 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean setRadio(int,boolean)>(i0, z0);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setRadios(boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0, z1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z1 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean setRadios(boolean)>(z0);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setUsbTethering(boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        int i0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i0 = interfaceinvoke $r2.<android.net.IConnectivityManager: int setUsbTethering(boolean)>(z0);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int startUsingNetworkFeature(int, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        int i0, i1;
        java.lang.String r1;
        android.os.Binder $r3;
        android.net.IConnectivityManager $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

     label1:
        $r4 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = new android.os.Binder;

        specialinvoke $r3.<android.os.Binder: void <init>()>();

        i1 = interfaceinvoke $r4.<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)>(i0, r1, $r3);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int stopUsingNetworkFeature(int, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        int i0, i1;
        java.lang.String r1;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i1 = interfaceinvoke $r3.<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>(i0, r1);

     label2:
        return i1;

     label3:
        $r4 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void supplyMessenger(int, android.os.Messenger)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.os.Messenger r1;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Messenger;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void supplyMessenger(int,android.os.Messenger)>(i0, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int tether(java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1;
        int i0;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i0 = interfaceinvoke $r3.<android.net.IConnectivityManager: int tether(java.lang.String)>(r1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int untether(java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1;
        int i0;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i0 = interfaceinvoke $r3.<android.net.IConnectivityManager: int untether(java.lang.String)>(r1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean updateLockdownVpn()
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean updateLockdownVpn()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.net.ConnectivityManager: int TYPE_WIMAX> = 6;

        <android.net.ConnectivityManager: int TYPE_WIFI_P2P> = 13;

        <android.net.ConnectivityManager: int TYPE_WIFI> = 1;

        <android.net.ConnectivityManager: int TYPE_NONE> = -1;

        <android.net.ConnectivityManager: int TYPE_MOBILE_SUPL> = 3;

        <android.net.ConnectivityManager: int TYPE_MOBILE_MMS> = 2;

        <android.net.ConnectivityManager: int TYPE_MOBILE_IMS> = 11;

        <android.net.ConnectivityManager: int TYPE_MOBILE_IA> = 14;

        <android.net.ConnectivityManager: int TYPE_MOBILE_HIPRI> = 5;

        <android.net.ConnectivityManager: int TYPE_MOBILE_FOTA> = 10;

        <android.net.ConnectivityManager: int TYPE_MOBILE_DUN> = 4;

        <android.net.ConnectivityManager: int TYPE_MOBILE_CBS> = 12;

        <android.net.ConnectivityManager: int TYPE_MOBILE> = 0;

        <android.net.ConnectivityManager: int TYPE_ETHERNET> = 9;

        <android.net.ConnectivityManager: int TYPE_DUMMY> = 8;

        <android.net.ConnectivityManager: int TYPE_BLUETOOTH> = 7;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNTETHER_IFACE_ERROR> = 7;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNSUPPORTED> = 3;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNKNOWN_IFACE> = 1;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNAVAIL_IFACE> = 4;

        <android.net.ConnectivityManager: int TETHER_ERROR_TETHER_IFACE_ERROR> = 6;

        <android.net.ConnectivityManager: int TETHER_ERROR_SERVICE_UNAVAIL> = 2;

        <android.net.ConnectivityManager: int TETHER_ERROR_NO_ERROR> = 0;

        <android.net.ConnectivityManager: int TETHER_ERROR_MASTER_ERROR> = 5;

        <android.net.ConnectivityManager: int TETHER_ERROR_IFACE_CFG_ERROR> = 10;

        <android.net.ConnectivityManager: int TETHER_ERROR_ENABLE_NAT_ERROR> = 8;

        <android.net.ConnectivityManager: int TETHER_ERROR_DISABLE_NAT_ERROR> = 9;

        <android.net.ConnectivityManager: java.lang.String TAG> = "ConnectivityManager";

        <android.net.ConnectivityManager: int MAX_RADIO_TYPE> = 14;

        <android.net.ConnectivityManager: int MAX_NETWORK_TYPE> = 14;

        <android.net.ConnectivityManager: java.lang.String INET_CONDITION_ACTION> = "android.net.conn.INET_CONDITION_ACTION";

        <android.net.ConnectivityManager: java.lang.String EXTRA_REASON> = "reason";

        <android.net.ConnectivityManager: java.lang.String EXTRA_OTHER_NETWORK_INFO> = "otherNetwork";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NO_CONNECTIVITY> = "noConnectivity";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NETWORK_TYPE> = "networkType";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NETWORK_INFO> = "networkInfo";

        <android.net.ConnectivityManager: java.lang.String EXTRA_IS_FAILOVER> = "isFailover";

        <android.net.ConnectivityManager: java.lang.String EXTRA_IS_CAPTIVE_PORTAL> = "captivePortal";

        <android.net.ConnectivityManager: java.lang.String EXTRA_IS_ACTIVE> = "isActive";

        <android.net.ConnectivityManager: java.lang.String EXTRA_INET_CONDITION> = "inetCondition";

        <android.net.ConnectivityManager: java.lang.String EXTRA_EXTRA_INFO> = "extraInfo";

        <android.net.ConnectivityManager: java.lang.String EXTRA_ERRORED_TETHER> = "erroredArray";

        <android.net.ConnectivityManager: java.lang.String EXTRA_DEVICE_TYPE> = "deviceType";

        <android.net.ConnectivityManager: java.lang.String EXTRA_AVAILABLE_TETHER> = "availableArray";

        <android.net.ConnectivityManager: java.lang.String EXTRA_ACTIVE_TETHER> = "activeArray";

        <android.net.ConnectivityManager: int DEFAULT_NETWORK_PREFERENCE> = 1;

        <android.net.ConnectivityManager: int CONNECTIVITY_CHANGE_DELAY_DEFAULT> = 3000;

        <android.net.ConnectivityManager: java.lang.String CONNECTIVITY_ACTION_IMMEDIATE> = "android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE";

        <android.net.ConnectivityManager: java.lang.String CONNECTIVITY_ACTION> = "android.net.conn.CONNECTIVITY_CHANGE";

        <android.net.ConnectivityManager: java.lang.String ACTION_TETHER_STATE_CHANGED> = "android.net.conn.TETHER_STATE_CHANGED";

        <android.net.ConnectivityManager: java.lang.String ACTION_DATA_ACTIVITY_CHANGE> = "android.net.conn.DATA_ACTIVITY_CHANGE";

        <android.net.ConnectivityManager: java.lang.String ACTION_CAPTIVE_PORTAL_TEST_COMPLETED> = "android.net.conn.CAPTIVE_PORTAL_TEST_COMPLETED";

        <android.net.ConnectivityManager: java.lang.String ACTION_BACKGROUND_DATA_SETTING_CHANGED> = "android.net.conn.BACKGROUND_DATA_SETTING_CHANGED";

        return;
    }
}
