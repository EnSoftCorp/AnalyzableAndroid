public class android.view.Surface extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    public static final int ROTATION_0;
    public static final int ROTATION_180;
    public static final int ROTATION_270;
    public static final int ROTATION_90;
    private static final java.lang.String TAG;
    private final android.graphics.Canvas mCanvas;
    private final dalvik.system.CloseGuard mCloseGuard;
    private android.graphics.Matrix mCompatibleMatrix;
    private int mGenerationId;
    final java.lang.Object mLock;
    private int mLockedObject;
    private java.lang.String mName;
    int mNativeObject;

    static void <clinit>()
    {
        android.view.Surface$1 $r0;

        <android.view.Surface: java.lang.String TAG> = "Surface";

        <android.view.Surface: int ROTATION_90> = 1;

        <android.view.Surface: int ROTATION_270> = 3;

        <android.view.Surface: int ROTATION_180> = 2;

        <android.view.Surface: int ROTATION_0> = 0;

        $r0 = new android.view.Surface$1;

        specialinvoke $r0.<android.view.Surface$1: void <init>()>();

        <android.view.Surface: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>()
    {
        android.view.Surface r0;
        dalvik.system.CloseGuard $r1;
        java.lang.Object $r2;
        android.view.Surface$CompatibleCanvas $r3;

        r0 := @this: android.view.Surface;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.view.Surface: java.lang.Object mLock> = $r2;

        $r3 = new android.view.Surface$CompatibleCanvas;

        specialinvoke $r3.<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface,android.view.Surface$1)>(r0, null);

        r0.<android.view.Surface: android.graphics.Canvas mCanvas> = $r3;

        return;
    }

    private void <init>(int)
    {
        android.view.Surface r0;
        int i0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r6;
        dalvik.system.CloseGuard $r3;
        android.view.Surface$CompatibleCanvas $r5;

        r0 := @this: android.view.Surface;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.view.Surface: java.lang.Object mLock> = $r4;

        $r5 = new android.view.Surface$CompatibleCanvas;

        specialinvoke $r5.<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface,android.view.Surface$1)>(r0, null);

        r0.<android.view.Surface: android.graphics.Canvas mCanvas> = $r5;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(int)>(i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void <init>(android.graphics.SurfaceTexture)
    {
        android.view.Surface r0;
        android.graphics.SurfaceTexture r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r9;
        dalvik.system.CloseGuard $r4;
        android.view.Surface$CompatibleCanvas $r6;
        java.lang.String $r7;
        int $i0;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.view.Surface: java.lang.Object mLock> = $r5;

        $r6 = new android.view.Surface$CompatibleCanvas;

        specialinvoke $r6.<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface,android.view.Surface$1)>(r0, null);

        r0.<android.view.Surface: android.graphics.Canvas mCanvas> = $r6;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("surfaceTexture must not be null");

        throw $r8;

     label1:
        r2 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        r0.<android.view.Surface: java.lang.String mName> = $r7;

        $i0 = staticinvoke <android.view.Surface: int nativeCreateFromSurfaceTexture(android.graphics.SurfaceTexture)>(r1);

        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(int)>($i0);

        exitmonitor r2;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static android.graphics.Matrix access$100(android.view.Surface)
    {
        android.view.Surface r0;
        android.graphics.Matrix $r1;

        r0 := @parameter0: android.view.Surface;

        $r1 = r0.<android.view.Surface: android.graphics.Matrix mCompatibleMatrix>;

        return $r1;
    }

    private void checkNotReleasedLocked()
    {
        android.view.Surface r0;
        int $i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.view.Surface;

        $i0 = r0.<android.view.Surface: int mNativeObject>;

        if $i0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Surface has already been released.");

        throw $r1;

     label1:
        return;
    }

    private static native int nativeCreateFromSurfaceControl(int);

    private static native int nativeCreateFromSurfaceTexture(android.graphics.SurfaceTexture) throws android.view.Surface$OutOfResourcesException;

    private static native boolean nativeIsConsumerRunningBehind(int);

    private static native boolean nativeIsValid(int);

    private static native int nativeLockCanvas(int, android.graphics.Canvas, android.graphics.Rect) throws android.view.Surface$OutOfResourcesException;

    private static native int nativeReadFromParcel(int, android.os.Parcel);

    private static native void nativeRelease(int);

    private static native void nativeUnlockCanvasAndPost(int, android.graphics.Canvas);

    private static native void nativeWriteToParcel(int, android.os.Parcel);

    public static java.lang.String rotationToString(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid rotation: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        return "ROTATION_0";

     label3:
        return "ROATATION_90";

     label4:
        return "ROATATION_180";

     label5:
        return "ROATATION_270";
    }

    private void setNativeObjectLocked(int)
    {
        android.view.Surface r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        dalvik.system.CloseGuard $r1, $r2;

        r0 := @this: android.view.Surface;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.Surface: int mNativeObject>;

        if $i1 == i0 goto label2;

        $i2 = r0.<android.view.Surface: int mNativeObject>;

        if $i2 != 0 goto label3;

        if i0 == 0 goto label3;

        $r2 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void open(java.lang.String)>("release");

     label1:
        r0.<android.view.Surface: int mNativeObject> = i0;

        $i4 = r0.<android.view.Surface: int mGenerationId>;

        $i5 = 1 + $i4;

        r0.<android.view.Surface: int mGenerationId> = $i5;

     label2:
        return;

     label3:
        $i3 = r0.<android.view.Surface: int mNativeObject>;

        if $i3 == 0 goto label1;

        if i0 != 0 goto label1;

        $r1 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        goto label1;
    }

    public void copyFrom(android.view.SurfaceControl)
    {
        android.view.Surface r0;
        android.view.SurfaceControl r1;
        int i0, i1, $i2, $i3;
        java.lang.Object r2;
        java.lang.Throwable r3, $r6;
        java.lang.NullPointerException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.view.SurfaceControl;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("other must not be null");

        throw $r5;

     label1:
        i0 = r1.<android.view.SurfaceControl: int mNativeObject>;

        if i0 != 0 goto label2;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("SurfaceControl native object is null. Are you using a released SurfaceControl?");

        throw $r4;

     label2:
        i1 = staticinvoke <android.view.Surface: int nativeCreateFromSurfaceControl(int)>(i0);

        r2 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r2;

     label3:
        $i2 = r0.<android.view.Surface: int mNativeObject>;

        if $i2 == 0 goto label4;

        $i3 = r0.<android.view.Surface: int mNativeObject>;

        staticinvoke <android.view.Surface: void nativeRelease(int)>($i3);

     label4:
        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(int)>(i1);

        exitmonitor r2;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        r3 = $r6;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int describeContents()
    {
        android.view.Surface r0;

        r0 := @this: android.view.Surface;

        return 0;
    }

    public void destroy()
    {
        android.view.Surface r0;

        r0 := @this: android.view.Surface;

        virtualinvoke r0.<android.view.Surface: void release()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.Surface r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2, $r3;

        r0 := @this: android.view.Surface;

     label1:
        $r2 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<android.view.Surface: void release()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int getGenerationId()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int i0;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<android.view.Surface: int mGenerationId>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isConsumerRunningBehind()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean z0;
        int $i0;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $i0 = r0.<android.view.Surface: int mNativeObject>;

        z0 = staticinvoke <android.view.Surface: boolean nativeIsConsumerRunningBehind(int)>($i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isValid()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean z0;
        int $i0, $i1;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<android.view.Surface: int mNativeObject>;

        if $i0 != 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $i1 = r0.<android.view.Surface: int mNativeObject>;

        z0 = staticinvoke <android.view.Surface: boolean nativeIsValid(int)>($i1);

        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public android.graphics.Canvas lockCanvas(android.graphics.Rect) throws android.view.Surface$OutOfResourcesException, java.lang.IllegalArgumentException
    {
        android.view.Surface r0;
        android.graphics.Rect r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r7;
        android.graphics.Canvas r4, $r5;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r6;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $i0 = r0.<android.view.Surface: int mLockedObject>;

        if $i0 == 0 goto label5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Surface was already locked");

        throw $r6;

     label2:
        $r7 := @caughtexception;

        r3 = $r7;

     label3:
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $i1 = r0.<android.view.Surface: int mNativeObject>;

        $r5 = r0.<android.view.Surface: android.graphics.Canvas mCanvas>;

        $i2 = staticinvoke <android.view.Surface: int nativeLockCanvas(int,android.graphics.Canvas,android.graphics.Rect)>($i1, $r5, r1);

        r0.<android.view.Surface: int mLockedObject> = $i2;

        r4 = r0.<android.view.Surface: android.graphics.Canvas mCanvas>;

        exitmonitor r2;

     label6:
        return r4;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
    }

    public void readFromParcel(android.os.Parcel)
    {
        android.view.Surface r0;
        android.os.Parcel r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r6;
        java.lang.String $r4;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.os.Parcel;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source must not be null");

        throw $r5;

     label1:
        r2 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        $r4 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r0.<android.view.Surface: java.lang.String mName> = $r4;

        $i0 = r0.<android.view.Surface: int mNativeObject>;

        $i1 = staticinvoke <android.view.Surface: int nativeReadFromParcel(int,android.os.Parcel)>($i0, r1);

        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(int)>($i1);

        exitmonitor r2;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void release()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int $i0, $i1;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<android.view.Surface: int mNativeObject>;

        if $i0 == 0 goto label2;

        $i1 = r0.<android.view.Surface: int mNativeObject>;

        staticinvoke <android.view.Surface: void nativeRelease(int)>($i1);

        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(int)>(0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void setCompatibilityTranslator(android.content.res.CompatibilityInfo$Translator)
    {
        android.view.Surface r0;
        android.content.res.CompatibilityInfo$Translator r1;
        float f0;
        android.graphics.Matrix $r2, $r3;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.content.res.CompatibilityInfo$Translator;

        if r1 == null goto label1;

        f0 = r1.<android.content.res.CompatibilityInfo$Translator: float applicationScale>;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r0.<android.view.Surface: android.graphics.Matrix mCompatibleMatrix> = $r2;

        $r3 = r0.<android.view.Surface: android.graphics.Matrix mCompatibleMatrix>;

        virtualinvoke $r3.<android.graphics.Matrix: void setScale(float,float)>(f0, f0);

     label1:
        return;
    }

    public java.lang.String toString()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r11;
        java.lang.String r3, $r6, $r9;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r10;
        int $i0;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface(name=");

        $r6 = r0.<android.view.Surface: java.lang.String mName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")/@0x");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r11 := @caughtexception;

        r2 = $r11;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void transferFrom(android.view.Surface)
    {
        android.view.Surface r0, r1;
        java.lang.Object r2, r4;
        java.lang.Throwable r3, r5, $r7, $r8;
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.view.Surface;

        if r1 != null goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("other must not be null");

        throw $r6;

     label01:
        if r1 == r0 goto label06;

        r2 = r1.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        i0 = r1.<android.view.Surface: int mNativeObject>;

        specialinvoke r1.<android.view.Surface: void setNativeObjectLocked(int)>(0);

        exitmonitor r2;

     label03:
        r4 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r4;

     label04:
        $i1 = r0.<android.view.Surface: int mNativeObject>;

        if $i1 == 0 goto label05;

        $i2 = r0.<android.view.Surface: int mNativeObject>;

        staticinvoke <android.view.Surface: void nativeRelease(int)>($i2);

     label05:
        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(int)>(i0);

        exitmonitor r4;

     label06:
        return;

     label07:
        $r7 := @caughtexception;

        r3 = $r7;

     label08:
        exitmonitor r2;

     label09:
        throw r3;

     label10:
        $r8 := @caughtexception;

        r5 = $r8;

     label11:
        exitmonitor r4;

     label12:
        throw r5;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void unlockCanvas(android.graphics.Canvas)
    {
        android.view.Surface r0;
        android.graphics.Canvas r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void unlockCanvasAndPost(android.graphics.Canvas)
    {
        android.view.Surface r0;
        android.graphics.Canvas r1, $r4;
        java.lang.Object r2;
        java.lang.Throwable r3, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12, $r13;
        java.lang.String $r8, $r11, $r14;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.graphics.Canvas;

        $r4 = r0.<android.view.Surface: android.graphics.Canvas mCanvas>;

        if r1 == $r4 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("canvas object must be the same instance that was previously returned by lockCanvas");

        throw $r16;

     label1:
        r2 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $i1 = r0.<android.view.Surface: int mNativeObject>;

        $i0 = r0.<android.view.Surface: int mLockedObject>;

        if $i1 == $i0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Surface\'s mNativeObject (0x");

        $i5 = r0.<android.view.Surface: int mNativeObject>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") != mLockedObject (0x");

        $i6 = r0.<android.view.Surface: int mLockedObject>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Surface", $r14);

     label3:
        $i2 = r0.<android.view.Surface: int mLockedObject>;

        if $i2 != 0 goto label7;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Surface was not locked");

        throw $r5;

     label4:
        $r15 := @caughtexception;

        r3 = $r15;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        $i3 = r0.<android.view.Surface: int mLockedObject>;

        staticinvoke <android.view.Surface: void nativeUnlockCanvasAndPost(int,android.graphics.Canvas)>($i3, r1);

        $i4 = r0.<android.view.Surface: int mLockedObject>;

        staticinvoke <android.view.Surface: void nativeRelease(int)>($i4);

        r0.<android.view.Surface: int mLockedObject> = 0;

        exitmonitor r2;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.view.Surface r0;
        android.os.Parcel r1;
        int i0, $i1, $i2;
        java.lang.Object r2;
        java.lang.Throwable r3, $r6;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dest must not be null");

        throw $r5;

     label1:
        r2 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        $r4 = r0.<android.view.Surface: java.lang.String mName>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r4);

        $i1 = r0.<android.view.Surface: int mNativeObject>;

        staticinvoke <android.view.Surface: void nativeWriteToParcel(int,android.os.Parcel)>($i1, r1);

        exitmonitor r2;

     label3:
        $i2 = i0 & 1;

        if $i2 == 0 goto label4;

        virtualinvoke r0.<android.view.Surface: void release()>();

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
