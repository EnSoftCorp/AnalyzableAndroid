public class android.hardware.Camera extends java.lang.Object
{
    public static final java.lang.String ACTION_NEW_PICTURE;
    public static final java.lang.String ACTION_NEW_VIDEO;
    public static final int CAMERA_ERROR_SERVER_DIED;
    public static final int CAMERA_ERROR_UNKNOWN;
    private static final int CAMERA_FACE_DETECTION_HW;
    private static final int CAMERA_FACE_DETECTION_SW;
    private static final int CAMERA_MSG_COMPRESSED_IMAGE;
    private static final int CAMERA_MSG_ERROR;
    private static final int CAMERA_MSG_FOCUS;
    private static final int CAMERA_MSG_FOCUS_MOVE;
    private static final int CAMERA_MSG_POSTVIEW_FRAME;
    private static final int CAMERA_MSG_PREVIEW_FRAME;
    private static final int CAMERA_MSG_PREVIEW_METADATA;
    private static final int CAMERA_MSG_RAW_IMAGE;
    private static final int CAMERA_MSG_RAW_IMAGE_NOTIFY;
    private static final int CAMERA_MSG_SHUTTER;
    private static final int CAMERA_MSG_VIDEO_FRAME;
    private static final int CAMERA_MSG_ZOOM;
    private static final java.lang.String TAG;
    private android.hardware.Camera$AutoFocusCallback mAutoFocusCallback;
    private java.lang.Object mAutoFocusCallbackLock;
    private android.hardware.Camera$AutoFocusMoveCallback mAutoFocusMoveCallback;
    private android.hardware.Camera$ErrorCallback mErrorCallback;
    private android.hardware.Camera$EventHandler mEventHandler;
    private boolean mFaceDetectionRunning;
    private android.hardware.Camera$FaceDetectionListener mFaceListener;
    private android.hardware.Camera$PictureCallback mJpegCallback;
    private int mNativeContext;
    private boolean mOneShot;
    private android.hardware.Camera$PictureCallback mPostviewCallback;
    private android.hardware.Camera$PreviewCallback mPreviewCallback;
    private android.hardware.Camera$PictureCallback mRawImageCallback;
    private android.hardware.Camera$ShutterCallback mShutterCallback;
    private boolean mUsingPreviewAllocation;
    private boolean mWithBuffer;
    private android.hardware.Camera$OnZoomChangeListener mZoomListener;

    void <init>()
    {
        android.hardware.Camera r0;
        java.lang.Object $r1;

        r0 := @this: android.hardware.Camera;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock> = $r1;

        return;
    }

    void <init>(int)
    {
        android.hardware.Camera r0;
        int i0;
        android.os.Looper r1, r2;
        java.lang.String r3;
        java.lang.Object $r4;
        java.lang.ref.WeakReference $r5;
        android.hardware.Camera$EventHandler $r6, $r7;

        r0 := @this: android.hardware.Camera;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock> = $r4;

        r0.<android.hardware.Camera: android.hardware.Camera$ShutterCallback mShutterCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mRawImageCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mJpegCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mPostviewCallback> = null;

        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 0;

        r0.<android.hardware.Camera: android.hardware.Camera$OnZoomChangeListener mZoomListener> = null;

        r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r1 == null goto label2;

        $r7 = new android.hardware.Camera$EventHandler;

        specialinvoke $r7.<android.hardware.Camera$EventHandler: void <init>(android.hardware.Camera,android.hardware.Camera,android.os.Looper)>(r0, r0, r1);

        r0.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler> = $r7;

     label1:
        r3 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        $r5 = new java.lang.ref.WeakReference;

        specialinvoke $r5.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        specialinvoke r0.<android.hardware.Camera: void native_setup(java.lang.Object,int,java.lang.String)>($r5, i0, r3);

        return;

     label2:
        r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if r2 == null goto label3;

        $r6 = new android.hardware.Camera$EventHandler;

        specialinvoke $r6.<android.hardware.Camera$EventHandler: void <init>(android.hardware.Camera,android.hardware.Camera,android.os.Looper)>(r0, r0, r2);

        r0.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler> = $r6;

        goto label1;

     label3:
        r0.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler> = null;

        goto label1;
    }

    private final native void _addCallbackBuffer(byte[], int);

    private final native boolean _enableShutterSound(boolean);

    private static native void _getCameraInfo(int, android.hardware.Camera$CameraInfo);

    private final native void _startFaceDetection(int);

    private final native void _stopFaceDetection();

    private final native void _stopPreview();

    static android.hardware.Camera$ShutterCallback access$000(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ShutterCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$ShutterCallback mShutterCallback>;

        return $r1;
    }

    static android.hardware.Camera$PictureCallback access$100(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PictureCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mRawImageCallback>;

        return $r1;
    }

    static android.hardware.Camera$OnZoomChangeListener access$1000(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$OnZoomChangeListener $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$OnZoomChangeListener mZoomListener>;

        return $r1;
    }

    static android.hardware.Camera$FaceDetectionListener access$1100(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$FaceDetectionListener $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$FaceDetectionListener mFaceListener>;

        return $r1;
    }

    static android.hardware.Camera$ErrorCallback access$1200(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ErrorCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$ErrorCallback mErrorCallback>;

        return $r1;
    }

    static android.hardware.Camera$AutoFocusMoveCallback access$1300(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$AutoFocusMoveCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusMoveCallback mAutoFocusMoveCallback>;

        return $r1;
    }

    static android.hardware.Camera$PictureCallback access$200(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PictureCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mJpegCallback>;

        return $r1;
    }

    static android.hardware.Camera$PreviewCallback access$300(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PreviewCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback>;

        return $r1;
    }

    static android.hardware.Camera$PreviewCallback access$302(android.hardware.Camera, android.hardware.Camera$PreviewCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PreviewCallback r1;

        r0 := @parameter0: android.hardware.Camera;

        r1 := @parameter1: android.hardware.Camera$PreviewCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback> = r1;

        return r1;
    }

    static boolean access$400(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.Camera;

        $z0 = r0.<android.hardware.Camera: boolean mOneShot>;

        return $z0;
    }

    static boolean access$500(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.Camera;

        $z0 = r0.<android.hardware.Camera: boolean mWithBuffer>;

        return $z0;
    }

    static void access$600(android.hardware.Camera, boolean, boolean)
    {
        android.hardware.Camera r0;
        boolean z0, z1;

        r0 := @parameter0: android.hardware.Camera;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<android.hardware.Camera: void setHasPreviewCallback(boolean,boolean)>(z0, z1);

        return;
    }

    static android.hardware.Camera$PictureCallback access$700(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PictureCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mPostviewCallback>;

        return $r1;
    }

    static java.lang.Object access$800(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock>;

        return $r1;
    }

    static android.hardware.Camera$AutoFocusCallback access$900(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$AutoFocusCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusCallback mAutoFocusCallback>;

        return $r1;
    }

    private final void addCallbackBuffer(byte[], int)
    {
        android.hardware.Camera r0;
        byte[] r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 == 16 goto label1;

        if i0 == 128 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported message type: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        specialinvoke r0.<android.hardware.Camera: void _addCallbackBuffer(byte[],int)>(r1, i0);

        return;
    }

    private native void enableFocusMoveCallback(int);

    public static void getCameraInfo(int, android.hardware.Camera$CameraInfo)
    {
        int i0;
        android.hardware.Camera$CameraInfo r0;
        android.media.IAudioService r1;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.RemoteException $r4;

        i0 := @parameter0: int;

        r0 := @parameter1: android.hardware.Camera$CameraInfo;

        staticinvoke <android.hardware.Camera: void _getCameraInfo(int,android.hardware.Camera$CameraInfo)>(i0, r0);

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r1 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r3);

     label1:
        $z0 = interfaceinvoke r1.<android.media.IAudioService: boolean isCameraSoundForced()>();

        if $z0 == 0 goto label2;

        r0.<android.hardware.Camera$CameraInfo: boolean canDisableShutterSound> = 0;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", "Audio service is unavailable for queries");

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static android.hardware.Camera$Parameters getEmptyParameters()
    {
        android.hardware.Camera r0, $r1;
        android.hardware.Camera$Parameters $r3;

        $r1 = new android.hardware.Camera;

        specialinvoke $r1.<android.hardware.Camera: void <init>()>();

        r0 = $r1;

        virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = new android.hardware.Camera$Parameters;

        specialinvoke $r3.<android.hardware.Camera$Parameters: void <init>(android.hardware.Camera,android.hardware.Camera$1)>(r0, null);

        return $r3;
    }

    public static native int getNumberOfCameras();

    private final native void native_autoFocus();

    private final native void native_cancelAutoFocus();

    private final native java.lang.String native_getParameters();

    private final native void native_release();

    private final native void native_setParameters(java.lang.String);

    private final native void native_setup(java.lang.Object, int, java.lang.String);

    private final native void native_takePicture(int);

    public static android.hardware.Camera open()
    {
        int i0, i1, $i2;
        android.hardware.Camera$CameraInfo r0, $r1;
        android.hardware.Camera $r2;

        i0 = staticinvoke <android.hardware.Camera: int getNumberOfCameras()>();

        $r1 = new android.hardware.Camera$CameraInfo;

        specialinvoke $r1.<android.hardware.Camera$CameraInfo: void <init>()>();

        r0 = $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        staticinvoke <android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera$CameraInfo)>(i1, r0);

        $i2 = r0.<android.hardware.Camera$CameraInfo: int facing>;

        if $i2 != 0 goto label2;

        $r2 = new android.hardware.Camera;

        specialinvoke $r2.<android.hardware.Camera: void <init>(int)>(i1);

        return $r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public static android.hardware.Camera open(int)
    {
        int i0;
        android.hardware.Camera $r0;

        i0 := @parameter0: int;

        $r0 = new android.hardware.Camera;

        specialinvoke $r0.<android.hardware.Camera: void <init>(int)>(i0);

        return $r0;
    }

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        java.lang.Object r0, r1, $r5;
        int i0, i1, i2;
        android.hardware.Camera r2;
        android.os.Message r3;
        java.lang.ref.WeakReference $r4;
        android.hardware.Camera$EventHandler $r6, $r7, $r8;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $r4 = (java.lang.ref.WeakReference) r0;

        $r5 = virtualinvoke $r4.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r2 = (android.hardware.Camera) $r5;

        if r2 != null goto label2;

     label1:
        return;

     label2:
        $r6 = r2.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler>;

        if $r6 == null goto label1;

        $r7 = r2.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler>;

        r3 = virtualinvoke $r7.<android.hardware.Camera$EventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r1);

        $r8 = r2.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler>;

        virtualinvoke $r8.<android.hardware.Camera$EventHandler: boolean sendMessage(android.os.Message)>(r3);

        return;
    }

    private final native void setHasPreviewCallback(boolean, boolean);

    private final native void setPreviewCallbackSurface(android.view.Surface);

    private final native void setPreviewDisplay(android.view.Surface) throws java.io.IOException;

    public final void addCallbackBuffer(byte[])
    {
        android.hardware.Camera r0;
        byte[] r1;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: byte[];

        specialinvoke r0.<android.hardware.Camera: void _addCallbackBuffer(byte[],int)>(r1, 16);

        return;
    }

    public final void addRawImageCallbackBuffer(byte[])
    {
        android.hardware.Camera r0;
        byte[] r1;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: byte[];

        specialinvoke r0.<android.hardware.Camera: void addCallbackBuffer(byte[],int)>(r1, 128);

        return;
    }

    public final void autoFocus(android.hardware.Camera$AutoFocusCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$AutoFocusCallback r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$AutoFocusCallback;

        r2 = r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock>;

        entermonitor r2;

     label1:
        r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusCallback mAutoFocusCallback> = r1;

        exitmonitor r2;

     label2:
        specialinvoke r0.<android.hardware.Camera: void native_autoFocus()>();

        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final void cancelAutoFocus()
    {
        android.hardware.Camera r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        android.hardware.Camera$EventHandler $r3;

        r0 := @this: android.hardware.Camera;

        r1 = r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock>;

        entermonitor r1;

     label1:
        r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusCallback mAutoFocusCallback> = null;

        exitmonitor r1;

     label2:
        specialinvoke r0.<android.hardware.Camera: void native_cancelAutoFocus()>();

        $r3 = r0.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler>;

        virtualinvoke $r3.<android.hardware.Camera$EventHandler: void removeMessages(int)>(4);

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final android.renderscript.Allocation createPreviewAllocation(android.renderscript.RenderScript, int) throws android.renderscript.RSIllegalArgumentException
    {
        android.hardware.Camera r0;
        android.renderscript.RenderScript r1;
        int i0, $i1, $i2, $i3;
        android.hardware.Camera$Size r2;
        android.renderscript.Type$Builder r3, $r5;
        android.hardware.Camera$Parameters $r4;
        android.renderscript.Element$DataKind $r6;
        android.renderscript.Element$DataType $r7;
        android.renderscript.Element $r8;
        android.renderscript.Type $r12;
        android.renderscript.Allocation $r13;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.renderscript.RenderScript;

        i0 := @parameter1: int;

        $r4 = virtualinvoke r0.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

        r2 = virtualinvoke $r4.<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>();

        $r5 = new android.renderscript.Type$Builder;

        $r7 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_8>;

        $r6 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_YUV>;

        $r8 = staticinvoke <android.renderscript.Element: android.renderscript.Element createPixel(android.renderscript.RenderScript,android.renderscript.Element$DataType,android.renderscript.Element$DataKind)>(r1, $r7, $r6);

        specialinvoke $r5.<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>(r1, $r8);

        r3 = $r5;

        virtualinvoke r3.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setYuvFormat(int)>(842094169);

        $i1 = r2.<android.hardware.Camera$Size: int width>;

        virtualinvoke r3.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>($i1);

        $i2 = r2.<android.hardware.Camera$Size: int height>;

        virtualinvoke r3.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>($i2);

        $r12 = virtualinvoke r3.<android.renderscript.Type$Builder: android.renderscript.Type create()>();

        $i3 = i0 | 32;

        $r13 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)>(r1, $r12, $i3);

        return $r13;
    }

    public final boolean enableShutterSound(boolean)
    {
        android.hardware.Camera r0;
        boolean z0, z1, $z2;
        android.media.IAudioService r1;
        android.os.IBinder $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.hardware.Camera;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label4;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r1 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r3);

     label1:
        z1 = interfaceinvoke r1.<android.media.IAudioService: boolean isCameraSoundForced()>();

     label2:
        if z1 == 0 goto label4;

        return 0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", "Audio service is unavailable for queries");

     label4:
        $z2 = specialinvoke r0.<android.hardware.Camera: boolean _enableShutterSound(boolean)>(z0);

        return $z2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected void finalize()
    {
        android.hardware.Camera r0;

        r0 := @this: android.hardware.Camera;

        virtualinvoke r0.<android.hardware.Camera: void release()>();

        return;
    }

    public android.hardware.Camera$Parameters getParameters()
    {
        android.hardware.Camera r0;
        android.hardware.Camera$Parameters r1, $r2;
        java.lang.String $r3;

        r0 := @this: android.hardware.Camera;

        $r2 = new android.hardware.Camera$Parameters;

        specialinvoke $r2.<android.hardware.Camera$Parameters: void <init>(android.hardware.Camera,android.hardware.Camera$1)>(r0, null);

        r1 = $r2;

        $r3 = specialinvoke r0.<android.hardware.Camera: java.lang.String native_getParameters()>();

        virtualinvoke r1.<android.hardware.Camera$Parameters: void unflatten(java.lang.String)>($r3);

        return r1;
    }

    public final native void lock();

    public final native boolean previewEnabled();

    public final native void reconnect() throws java.io.IOException;

    public final void release()
    {
        android.hardware.Camera r0;

        r0 := @this: android.hardware.Camera;

        specialinvoke r0.<android.hardware.Camera: void native_release()>();

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        return;
    }

    public void setAutoFocusMoveCallback(android.hardware.Camera$AutoFocusMoveCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$AutoFocusMoveCallback r1, $r2;
        byte b0;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$AutoFocusMoveCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusMoveCallback mAutoFocusMoveCallback> = r1;

        $r2 = r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusMoveCallback mAutoFocusMoveCallback>;

        if $r2 == null goto label2;

        b0 = 1;

     label1:
        specialinvoke r0.<android.hardware.Camera: void enableFocusMoveCallback(int)>(b0);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public final native void setDisplayOrientation(int);

    public final void setErrorCallback(android.hardware.Camera$ErrorCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ErrorCallback r1;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$ErrorCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$ErrorCallback mErrorCallback> = r1;

        return;
    }

    public final void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$FaceDetectionListener r1;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$FaceDetectionListener;

        r0.<android.hardware.Camera: android.hardware.Camera$FaceDetectionListener mFaceListener> = r1;

        return;
    }

    public final void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PreviewCallback r1;
        boolean z0;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$PreviewCallback;

        z0 = 1;

        r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback> = r1;

        r0.<android.hardware.Camera: boolean mOneShot> = 1;

        r0.<android.hardware.Camera: boolean mWithBuffer> = 0;

        if r1 == null goto label1;

        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 0;

     label1:
        if r1 == null goto label3;

     label2:
        specialinvoke r0.<android.hardware.Camera: void setHasPreviewCallback(boolean,boolean)>(z0, 0);

        return;

     label3:
        z0 = 0;

        goto label2;
    }

    public void setParameters(android.hardware.Camera$Parameters)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$Parameters r1, $r5;
        android.hardware.Camera$Size r2, r3;
        boolean $z0;
        java.lang.String $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalStateException $r6;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$Parameters;

        $z0 = r0.<android.hardware.Camera: boolean mUsingPreviewAllocation>;

        if $z0 == 0 goto label2;

        r2 = virtualinvoke r1.<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>();

        $r5 = virtualinvoke r0.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

        r3 = virtualinvoke $r5.<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>();

        $i1 = r2.<android.hardware.Camera$Size: int width>;

        $i0 = r3.<android.hardware.Camera$Size: int width>;

        if $i1 != $i0 goto label1;

        $i3 = r2.<android.hardware.Camera$Size: int height>;

        $i2 = r3.<android.hardware.Camera$Size: int height>;

        if $i3 == $i2 goto label2;

     label1:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot change preview size while a preview allocation is configured.");

        throw $r6;

     label2:
        $r4 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String flatten()>();

        specialinvoke r0.<android.hardware.Camera: void native_setParameters(java.lang.String)>($r4);

        return;
    }

    public final void setPreviewCallback(android.hardware.Camera$PreviewCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PreviewCallback r1;
        boolean z0;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$PreviewCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback> = r1;

        r0.<android.hardware.Camera: boolean mOneShot> = 0;

        r0.<android.hardware.Camera: boolean mWithBuffer> = 0;

        if r1 == null goto label1;

        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 0;

     label1:
        if r1 == null goto label3;

        z0 = 1;

     label2:
        specialinvoke r0.<android.hardware.Camera: void setHasPreviewCallback(boolean,boolean)>(z0, 0);

        return;

     label3:
        z0 = 0;

        goto label2;
    }

    public final void setPreviewCallbackAllocation(android.renderscript.Allocation) throws java.io.IOException
    {
        android.hardware.Camera r0;
        android.renderscript.Allocation r1;
        android.view.Surface r2;
        android.hardware.Camera$Size r3;
        android.hardware.Camera$Parameters $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.renderscript.Type $r5, $r9, $r12, $r19, $r22;
        java.lang.IllegalArgumentException $r6, $r24, $r25;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r18;
        java.lang.String $r17;
        android.renderscript.Element$DataKind $r20, $r21;
        android.renderscript.Element $r23;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.renderscript.Allocation;

        if r1 == null goto label6;

        $r4 = virtualinvoke r0.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

        r3 = virtualinvoke $r4.<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>();

        $i0 = r3.<android.hardware.Camera$Size: int width>;

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r5.<android.renderscript.Type: int getX()>();

        if $i0 != $i1 goto label1;

        $i6 = r3.<android.hardware.Camera$Size: int height>;

        $r19 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i7 = virtualinvoke $r19.<android.renderscript.Type: int getY()>();

        if $i6 == $i7 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allocation dimensions don\'t match preview dimensions: Allocation is ");

        $r9 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r12.<android.renderscript.Type: int getY()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Preview is ");

        $i4 = r3.<android.hardware.Camera$Size: int width>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i5 = r3.<android.hardware.Camera$Size: int height>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r6;

     label2:
        $i9 = virtualinvoke r1.<android.renderscript.Allocation: int getUsage()>();

        $i8 = 32 & $i9;

        if $i8 != 0 goto label3;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Allocation usage does not include USAGE_IO_INPUT");

        throw $r24;

     label3:
        $r22 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r23 = virtualinvoke $r22.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r20 = virtualinvoke $r23.<android.renderscript.Element: android.renderscript.Element$DataKind getDataKind()>();

        $r21 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_YUV>;

        if $r20 == $r21 goto label4;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Allocation is not of a YUV type");

        throw $r25;

     label4:
        r2 = virtualinvoke r1.<android.renderscript.Allocation: android.view.Surface getSurface()>();

        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 1;

     label5:
        specialinvoke r0.<android.hardware.Camera: void setPreviewCallbackSurface(android.view.Surface)>(r2);

        return;

     label6:
        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 0;

        r2 = null;

        goto label5;
    }

    public final void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PreviewCallback r1;
        boolean z0;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$PreviewCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback> = r1;

        r0.<android.hardware.Camera: boolean mOneShot> = 0;

        r0.<android.hardware.Camera: boolean mWithBuffer> = 1;

        if r1 == null goto label1;

        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 0;

     label1:
        z0 = 0;

        if r1 == null goto label2;

        z0 = 1;

     label2:
        specialinvoke r0.<android.hardware.Camera: void setHasPreviewCallback(boolean,boolean)>(z0, 1);

        return;
    }

    public final void setPreviewDisplay(android.view.SurfaceHolder) throws java.io.IOException
    {
        android.hardware.Camera r0;
        android.view.SurfaceHolder r1;
        android.view.Surface $r2, $r3;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.view.SurfaceHolder;

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        specialinvoke r0.<android.hardware.Camera: void setPreviewDisplay(android.view.Surface)>($r3);

        return;

     label1:
        $r2 = (android.view.Surface) null;

        specialinvoke r0.<android.hardware.Camera: void setPreviewDisplay(android.view.Surface)>($r2);

        return;
    }

    public final native void setPreviewTexture(android.graphics.SurfaceTexture) throws java.io.IOException;

    public final void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$OnZoomChangeListener r1;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$OnZoomChangeListener;

        r0.<android.hardware.Camera: android.hardware.Camera$OnZoomChangeListener mZoomListener> = r1;

        return;
    }

    public final void startFaceDetection()
    {
        android.hardware.Camera r0;
        boolean $z0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Camera;

        $z0 = r0.<android.hardware.Camera: boolean mFaceDetectionRunning>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Face detection is already running");

        throw $r1;

     label1:
        specialinvoke r0.<android.hardware.Camera: void _startFaceDetection(int)>(0);

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 1;

        return;
    }

    public final native void startPreview();

    public final native void startSmoothZoom(int);

    public final void stopFaceDetection()
    {
        android.hardware.Camera r0;

        r0 := @this: android.hardware.Camera;

        specialinvoke r0.<android.hardware.Camera: void _stopFaceDetection()>();

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        return;
    }

    public final void stopPreview()
    {
        android.hardware.Camera r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: android.hardware.Camera;

        specialinvoke r0.<android.hardware.Camera: void _stopPreview()>();

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        r0.<android.hardware.Camera: android.hardware.Camera$ShutterCallback mShutterCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mRawImageCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mPostviewCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mJpegCallback> = null;

        r1 = r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock>;

        entermonitor r1;

     label1:
        r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusCallback mAutoFocusCallback> = null;

        exitmonitor r1;

     label2:
        r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusMoveCallback mAutoFocusMoveCallback> = null;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final native void stopSmoothZoom();

    public final void takePicture(android.hardware.Camera$ShutterCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ShutterCallback r1;
        android.hardware.Camera$PictureCallback r2, r3;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$ShutterCallback;

        r2 := @parameter1: android.hardware.Camera$PictureCallback;

        r3 := @parameter2: android.hardware.Camera$PictureCallback;

        virtualinvoke r0.<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>(r1, r2, null, r3);

        return;
    }

    public final void takePicture(android.hardware.Camera$ShutterCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ShutterCallback r1, r5;
        android.hardware.Camera$PictureCallback r2, r3, r4, $r6, $r7, $r8;
        short s0;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$ShutterCallback;

        r2 := @parameter1: android.hardware.Camera$PictureCallback;

        r3 := @parameter2: android.hardware.Camera$PictureCallback;

        r4 := @parameter3: android.hardware.Camera$PictureCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$ShutterCallback mShutterCallback> = r1;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mRawImageCallback> = r2;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mPostviewCallback> = r3;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mJpegCallback> = r4;

        r5 = r0.<android.hardware.Camera: android.hardware.Camera$ShutterCallback mShutterCallback>;

        s0 = 0;

        if r5 == null goto label1;

        s0 = 2;

     label1:
        $r6 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mRawImageCallback>;

        if $r6 == null goto label2;

        s0 = s0 | 128;

     label2:
        $r7 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mPostviewCallback>;

        if $r7 == null goto label3;

        s0 = s0 | 64;

     label3:
        $r8 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mJpegCallback>;

        if $r8 == null goto label4;

        s0 = s0 | 256;

     label4:
        specialinvoke r0.<android.hardware.Camera: void native_takePicture(int)>(s0);

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        return;
    }

    public final native void unlock();

    public static void <clinit>()
    {
        <android.hardware.Camera: java.lang.String TAG> = "Camera";

        <android.hardware.Camera: int CAMERA_MSG_ZOOM> = 8;

        <android.hardware.Camera: int CAMERA_MSG_VIDEO_FRAME> = 32;

        <android.hardware.Camera: int CAMERA_MSG_SHUTTER> = 2;

        <android.hardware.Camera: int CAMERA_MSG_RAW_IMAGE_NOTIFY> = 512;

        <android.hardware.Camera: int CAMERA_MSG_RAW_IMAGE> = 128;

        <android.hardware.Camera: int CAMERA_MSG_PREVIEW_METADATA> = 1024;

        <android.hardware.Camera: int CAMERA_MSG_PREVIEW_FRAME> = 16;

        <android.hardware.Camera: int CAMERA_MSG_POSTVIEW_FRAME> = 64;

        <android.hardware.Camera: int CAMERA_MSG_FOCUS_MOVE> = 2048;

        <android.hardware.Camera: int CAMERA_MSG_FOCUS> = 4;

        <android.hardware.Camera: int CAMERA_MSG_ERROR> = 1;

        <android.hardware.Camera: int CAMERA_MSG_COMPRESSED_IMAGE> = 256;

        <android.hardware.Camera: int CAMERA_FACE_DETECTION_SW> = 1;

        <android.hardware.Camera: int CAMERA_FACE_DETECTION_HW> = 0;

        <android.hardware.Camera: int CAMERA_ERROR_UNKNOWN> = 1;

        <android.hardware.Camera: int CAMERA_ERROR_SERVER_DIED> = 100;

        <android.hardware.Camera: java.lang.String ACTION_NEW_VIDEO> = "android.hardware.action.NEW_VIDEO";

        <android.hardware.Camera: java.lang.String ACTION_NEW_PICTURE> = "android.hardware.action.NEW_PICTURE";

        return;
    }
}
