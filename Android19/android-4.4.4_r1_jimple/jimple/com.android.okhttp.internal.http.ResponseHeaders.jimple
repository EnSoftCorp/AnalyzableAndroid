public final class com.android.okhttp.internal.http.ResponseHeaders extends java.lang.Object
{
    private static final java.lang.String RECEIVED_MILLIS;
    static final java.lang.String RESPONSE_SOURCE;
    static final java.lang.String SELECTED_TRANSPORT;
    private static final java.lang.String SENT_MILLIS;
    private int ageSeconds;
    private java.lang.String connection;
    private java.lang.String contentEncoding;
    private int contentLength;
    private java.lang.String etag;
    private java.util.Date expires;
    private final com.android.okhttp.internal.http.RawHeaders headers;
    private boolean isPublic;
    private java.util.Date lastModified;
    private int maxAgeSeconds;
    private boolean mustRevalidate;
    private boolean noCache;
    private boolean noStore;
    private long receivedResponseMillis;
    private int sMaxAgeSeconds;
    private long sentRequestMillis;
    private java.util.Date servedDate;
    private java.lang.String transferEncoding;
    private final java.net.URI uri;
    private java.util.Set varyFields;

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r9, $r10, $r12, $r15, $r17, $r19, $r20, $r23;
        com.android.okhttp.internal.Platform $r1, $r7, $r13, $r18;
        java.lang.String $r2, $r5, $r8, $r11, $r14, $r16, $r21, $r22;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $r2 = virtualinvoke $r1.<com.android.okhttp.internal.Platform: java.lang.String getPrefix()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Sent-Millis");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.okhttp.internal.http.ResponseHeaders: java.lang.String SENT_MILLIS> = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $r8 = virtualinvoke $r7.<com.android.okhttp.internal.Platform: java.lang.String getPrefix()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Received-Millis");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.okhttp.internal.http.ResponseHeaders: java.lang.String RECEIVED_MILLIS> = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $r14 = virtualinvoke $r13.<com.android.okhttp.internal.Platform: java.lang.String getPrefix()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Response-Source");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.okhttp.internal.http.ResponseHeaders: java.lang.String RESPONSE_SOURCE> = $r16;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $r21 = virtualinvoke $r18.<com.android.okhttp.internal.Platform: java.lang.String getPrefix()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Selected-Transport");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.okhttp.internal.http.ResponseHeaders: java.lang.String SELECTED_TRANSPORT> = $r22;

        return;
    }

    public void <init>(java.net.URI, com.android.okhttp.internal.http.RawHeaders)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.net.URI r1;
        com.android.okhttp.internal.http.RawHeaders r2;
        com.android.okhttp.internal.http.ResponseHeaders$1 r3, $r10;
        int i0, i1, i2, $i3, $i5, $i7;
        java.lang.String r4, r5, r8, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r29, $r31;
        java.lang.String[] r7;
        java.util.Set $r9, $r25, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z16;
        long $l4, $l6;
        java.util.Comparator $r27;
        java.util.TreeSet $r28;
        java.util.Date $r30, $r33, $r34;
        java.lang.NumberFormatException $r32;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: com.android.okhttp.internal.http.RawHeaders;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.internal.http.ResponseHeaders: int maxAgeSeconds> = -1;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: int sMaxAgeSeconds> = -1;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: int ageSeconds> = -1;

        $r9 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Set varyFields> = $r9;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: int contentLength> = -1;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: java.net.URI uri> = r1;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers> = r2;

        $r10 = new com.android.okhttp.internal.http.ResponseHeaders$1;

        specialinvoke $r10.<com.android.okhttp.internal.http.ResponseHeaders$1: void <init>(com.android.okhttp.internal.http.ResponseHeaders)>(r0);

        r3 = $r10;

        i0 = 0;

     label01:
        $i3 = virtualinvoke r2.<com.android.okhttp.internal.http.RawHeaders: int length()>();

        if i0 >= $i3 goto label21;

        r4 = virtualinvoke r2.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getFieldName(int)>(i0);

        r5 = virtualinvoke r2.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getValue(int)>(i0);

        $r11 = "Cache-Control";

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z0 == 0 goto label03;

        staticinvoke <com.android.okhttp.internal.http.HeaderParser: void parseCacheControl(java.lang.String,com.android.okhttp.internal.http.HeaderParser$CacheControlHandler)>(r5, r3);

     label02:
        i0 = i0 + 1;

        goto label01;

     label03:
        $r12 = "Date";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z1 == 0 goto label04;

        $r33 = staticinvoke <com.android.okhttp.internal.http.HttpDate: java.util.Date parse(java.lang.String)>(r5);

        r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date servedDate> = $r33;

        goto label02;

     label04:
        $r13 = "Expires";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z2 == 0 goto label05;

        $r34 = staticinvoke <com.android.okhttp.internal.http.HttpDate: java.util.Date parse(java.lang.String)>(r5);

        r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date expires> = $r34;

        goto label02;

     label05:
        $r14 = "Last-Modified";

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z3 == 0 goto label06;

        $r30 = staticinvoke <com.android.okhttp.internal.http.HttpDate: java.util.Date parse(java.lang.String)>(r5);

        r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date lastModified> = $r30;

        goto label02;

     label06:
        $r15 = "ETag";

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z4 == 0 goto label07;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String etag> = r5;

        goto label02;

     label07:
        $r16 = "Pragma";

        $z5 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z5 == 0 goto label08;

        $r31 = "no-cache";

        $z16 = virtualinvoke $r31.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        if $z16 == 0 goto label02;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean noCache> = 1;

        goto label02;

     label08:
        $r17 = "Age";

        $z6 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z6 == 0 goto label09;

        $i7 = staticinvoke <com.android.okhttp.internal.http.HeaderParser: int parseSeconds(java.lang.String)>(r5);

        r0.<com.android.okhttp.internal.http.ResponseHeaders: int ageSeconds> = $i7;

        goto label02;

     label09:
        $r18 = "Vary";

        $z8 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z8 == 0 goto label12;

        $r26 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Set varyFields>;

        $z14 = interfaceinvoke $r26.<java.util.Set: boolean isEmpty()>();

        if $z14 == 0 goto label10;

        $r28 = new java.util.TreeSet;

        $r27 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r28.<java.util.TreeSet: void <init>(java.util.Comparator)>($r27);

        r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Set varyFields> = $r28;

     label10:
        r7 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i1 = lengthof r7;

        i2 = 0;

     label11:
        if i2 >= i1 goto label02;

        r8 = r7[i2];

        $r25 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Set varyFields>;

        $r29 = virtualinvoke r8.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r25.<java.util.Set: boolean add(java.lang.Object)>($r29);

        i2 = i2 + 1;

        goto label11;

     label12:
        $r20 = "Content-Encoding";

        $z7 = virtualinvoke $r20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z7 == 0 goto label13;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String contentEncoding> = r5;

        goto label02;

     label13:
        $r19 = "Transfer-Encoding";

        $z10 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z10 == 0 goto label14;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String transferEncoding> = r5;

        goto label02;

     label14:
        $r22 = "Content-Length";

        $z9 = virtualinvoke $r22.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z9 == 0 goto label18;

     label15:
        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r5);

        r0.<com.android.okhttp.internal.http.ResponseHeaders: int contentLength> = $i5;

     label16:
        goto label02;

     label17:
        $r32 := @caughtexception;

        goto label02;

     label18:
        $r21 = "Connection";

        $z12 = virtualinvoke $r21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z12 == 0 goto label19;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String connection> = r5;

        goto label02;

     label19:
        $r24 = <com.android.okhttp.internal.http.ResponseHeaders: java.lang.String SENT_MILLIS>;

        $z11 = virtualinvoke $r24.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z11 == 0 goto label20;

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r5);

        r0.<com.android.okhttp.internal.http.ResponseHeaders: long sentRequestMillis> = $l4;

        goto label02;

     label20:
        $r23 = <com.android.okhttp.internal.http.ResponseHeaders: java.lang.String RECEIVED_MILLIS>;

        $z13 = virtualinvoke $r23.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z13 == 0 goto label02;

        $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r5);

        r0.<com.android.okhttp.internal.http.ResponseHeaders: long receivedResponseMillis> = $l6;

        goto label02;

     label21:
        return;

        catch java.lang.NumberFormatException from label15 to label16 with label17;
    }

    static boolean access$002(com.android.okhttp.internal.http.ResponseHeaders, boolean)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        boolean z0;

        r0 := @parameter0: com.android.okhttp.internal.http.ResponseHeaders;

        z0 := @parameter1: boolean;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean noCache> = z0;

        return z0;
    }

    static boolean access$102(com.android.okhttp.internal.http.ResponseHeaders, boolean)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        boolean z0;

        r0 := @parameter0: com.android.okhttp.internal.http.ResponseHeaders;

        z0 := @parameter1: boolean;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean noStore> = z0;

        return z0;
    }

    static int access$202(com.android.okhttp.internal.http.ResponseHeaders, int)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        int i0;

        r0 := @parameter0: com.android.okhttp.internal.http.ResponseHeaders;

        i0 := @parameter1: int;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: int maxAgeSeconds> = i0;

        return i0;
    }

    static int access$302(com.android.okhttp.internal.http.ResponseHeaders, int)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        int i0;

        r0 := @parameter0: com.android.okhttp.internal.http.ResponseHeaders;

        i0 := @parameter1: int;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: int sMaxAgeSeconds> = i0;

        return i0;
    }

    static boolean access$402(com.android.okhttp.internal.http.ResponseHeaders, boolean)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        boolean z0;

        r0 := @parameter0: com.android.okhttp.internal.http.ResponseHeaders;

        z0 := @parameter1: boolean;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean isPublic> = z0;

        return z0;
    }

    static boolean access$502(com.android.okhttp.internal.http.ResponseHeaders, boolean)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        boolean z0;

        r0 := @parameter0: com.android.okhttp.internal.http.ResponseHeaders;

        z0 := @parameter1: boolean;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean mustRevalidate> = z0;

        return z0;
    }

    private long computeAge(long)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        long l0, l1, l2, l3, $l5, $l6, $l7, $l8, $l9, $l11, $l12, $l13, $l14, $l15, $l16;
        java.util.Date $r1, $r3;
        int $i4, $i10;
        java.util.concurrent.TimeUnit $r2;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        l0 := @parameter0: long;

        l1 = 0L;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date servedDate>;

        if $r1 == null goto label1;

        $l14 = r0.<com.android.okhttp.internal.http.ResponseHeaders: long receivedResponseMillis>;

        $r3 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date servedDate>;

        $l16 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $l15 = $l14 - $l16;

        l1 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l15);

     label1:
        $i4 = r0.<com.android.okhttp.internal.http.ResponseHeaders: int ageSeconds>;

        if $i4 == -1 goto label3;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i10 = r0.<com.android.okhttp.internal.http.ResponseHeaders: int ageSeconds>;

        $l12 = (long) $i10;

        $l13 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>($l12);

        l2 = staticinvoke <java.lang.Math: long max(long,long)>(l1, $l13);

     label2:
        $l6 = r0.<com.android.okhttp.internal.http.ResponseHeaders: long receivedResponseMillis>;

        $l5 = r0.<com.android.okhttp.internal.http.ResponseHeaders: long sentRequestMillis>;

        l3 = $l6 - $l5;

        $l7 = r0.<com.android.okhttp.internal.http.ResponseHeaders: long receivedResponseMillis>;

        $l9 = l0 - $l7;

        $l8 = l2 + l3;

        $l11 = $l9 + $l8;

        return $l11;

     label3:
        l2 = l1;

        goto label2;
    }

    private long computeFreshnessLifetime()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        long l0, l1, l2, l3, l4, $l7, $l8, $l9, $l12;
        int $i5, $i11;
        java.util.Date $r1, $r2, $r5, $r6, $r7, $r8, $r9, $r10;
        java.net.URI $r3;
        java.lang.String $r4;
        byte $b6, $b10;
        java.util.concurrent.TimeUnit $r11;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        l0 = 0L;

        $i5 = r0.<com.android.okhttp.internal.http.ResponseHeaders: int maxAgeSeconds>;

        if $i5 == -1 goto label2;

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i11 = r0.<com.android.okhttp.internal.http.ResponseHeaders: int maxAgeSeconds>;

        $l12 = (long) $i11;

        l0 = virtualinvoke $r11.<java.util.concurrent.TimeUnit: long toMillis(long)>($l12);

     label1:
        return l0;

     label2:
        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date expires>;

        if $r1 == null goto label7;

        $r8 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date servedDate>;

        if $r8 == null goto label5;

        $r10 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date servedDate>;

        l3 = virtualinvoke $r10.<java.util.Date: long getTime()>();

     label3:
        $r9 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date expires>;

        $l9 = virtualinvoke $r9.<java.util.Date: long getTime()>();

        l4 = $l9 - l3;

        $b10 = l4 cmp 0L;

        if $b10 <= 0 goto label6;

     label4:
        return l4;

     label5:
        l3 = r0.<com.android.okhttp.internal.http.ResponseHeaders: long receivedResponseMillis>;

        goto label3;

     label6:
        l4 = 0L;

        goto label4;

     label7:
        $r2 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date lastModified>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.net.URI uri>;

        $r4 = virtualinvoke $r3.<java.net.URI: java.lang.String getRawQuery()>();

        if $r4 != null goto label1;

        $r6 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date servedDate>;

        if $r6 == null goto label9;

        $r7 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date servedDate>;

        l1 = virtualinvoke $r7.<java.util.Date: long getTime()>();

     label8:
        $r5 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date lastModified>;

        $l7 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        l2 = l1 - $l7;

        $b6 = l2 cmp 0L;

        if $b6 <= 0 goto label1;

        $l8 = l2 / 10L;

        return $l8;

     label9:
        l1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: long sentRequestMillis>;

        goto label8;
    }

    private static boolean isEndToEnd(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @parameter0: java.lang.String;

        $r1 = "Connection";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "Keep-Alive";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 != 0 goto label1;

        $r3 = "Proxy-Authenticate";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r4 = "Proxy-Authorization";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 != 0 goto label1;

        $r5 = "TE";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 != 0 goto label1;

        $r6 = "Trailers";

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z5 != 0 goto label1;

        $r7 = "Transfer-Encoding";

        $z6 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z6 != 0 goto label1;

        $r8 = "Upgrade";

        $z7 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z7 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isFreshnessLifetimeHeuristic()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        int $i0;
        java.util.Date $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $i0 = r0.<com.android.okhttp.internal.http.ResponseHeaders: int maxAgeSeconds>;

        if $i0 != -1 goto label1;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date expires>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public com.android.okhttp.ResponseSource chooseResponseSource(long, com.android.okhttp.internal.http.RequestHeaders)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        long l0, l1, l2, l3, l4, $l7, $l8, $l10, $l16, $l18, $l19, $l20;
        com.android.okhttp.internal.http.RequestHeaders r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.okhttp.ResponseSource $r2, $r6, $r7, $r12, $r17;
        int $i5, $i6, $i13, $i14, $i15, $i17;
        java.util.Date $r3, $r4, $r8, $r10;
        java.lang.String $r5, $r9;
        byte $b9, $b11, $b12;
        com.android.okhttp.internal.http.RawHeaders $r11, $r14;
        java.util.concurrent.TimeUnit $r13, $r15, $r16;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.okhttp.internal.http.RequestHeaders;

        $z0 = virtualinvoke r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean isCacheable(com.android.okhttp.internal.http.RequestHeaders)>(r1);

        if $z0 != 0 goto label01;

        $r17 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource NETWORK>;

        return $r17;

     label01:
        $z1 = virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: boolean isNoCache()>();

        if $z1 != 0 goto label02;

        $z2 = virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: boolean hasConditions()>();

        if $z2 == 0 goto label03;

     label02:
        $r2 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource NETWORK>;

        return $r2;

     label03:
        l1 = specialinvoke r0.<com.android.okhttp.internal.http.ResponseHeaders: long computeAge(long)>(l0);

        l2 = specialinvoke r0.<com.android.okhttp.internal.http.ResponseHeaders: long computeFreshnessLifetime()>();

        $i6 = virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: int getMaxAgeSeconds()>();

        if $i6 == -1 goto label04;

        $r16 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i17 = virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: int getMaxAgeSeconds()>();

        $l20 = (long) $i17;

        $l19 = virtualinvoke $r16.<java.util.concurrent.TimeUnit: long toMillis(long)>($l20);

        l2 = staticinvoke <java.lang.Math: long min(long,long)>(l2, $l19);

     label04:
        l3 = 0L;

        $i5 = virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: int getMinFreshSeconds()>();

        if $i5 == -1 goto label05;

        $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i15 = virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: int getMinFreshSeconds()>();

        $l18 = (long) $i15;

        l3 = virtualinvoke $r15.<java.util.concurrent.TimeUnit: long toMillis(long)>($l18);

     label05:
        l4 = 0L;

        $z4 = r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean mustRevalidate>;

        if $z4 != 0 goto label06;

        $i14 = virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: int getMaxStaleSeconds()>();

        if $i14 == -1 goto label06;

        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i13 = virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: int getMaxStaleSeconds()>();

        $l16 = (long) $i13;

        l4 = virtualinvoke $r13.<java.util.concurrent.TimeUnit: long toMillis(long)>($l16);

     label06:
        $z3 = r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean noCache>;

        if $z3 != 0 goto label09;

        $l10 = l1 + l3;

        $l7 = l2 + l4;

        $b11 = $l10 cmp $l7;

        if $b11 >= 0 goto label09;

        $l8 = l1 + l3;

        $b9 = $l8 cmp l2;

        if $b9 < 0 goto label07;

        $r14 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r14.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>("Warning", "110 HttpURLConnection \"Response is stale\"");

     label07:
        $b12 = l1 cmp 86400000L;

        if $b12 <= 0 goto label08;

        $z6 = specialinvoke r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean isFreshnessLifetimeHeuristic()>();

        if $z6 == 0 goto label08;

        $r11 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r11.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>("Warning", "113 HttpURLConnection \"Heuristic expiration\"");

     label08:
        $r12 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource CACHE>;

        return $r12;

     label09:
        $r4 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date lastModified>;

        if $r4 == null goto label12;

        $r10 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date lastModified>;

        virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: void setIfModifiedSince(java.util.Date)>($r10);

     label10:
        $r5 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String etag>;

        if $r5 == null goto label11;

        $r9 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String etag>;

        virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: void setIfNoneMatch(java.lang.String)>($r9);

     label11:
        $z5 = virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: boolean hasConditions()>();

        if $z5 == 0 goto label13;

        $r6 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource CONDITIONAL_CACHE>;

        return $r6;

     label12:
        $r3 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date servedDate>;

        if $r3 == null goto label10;

        $r8 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date servedDate>;

        virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: void setIfModifiedSince(java.util.Date)>($r8);

        goto label10;

     label13:
        $r7 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource NETWORK>;

        return $r7;
    }

    public com.android.okhttp.internal.http.ResponseHeaders combine(com.android.okhttp.internal.http.ResponseHeaders) throws java.io.IOException
    {
        com.android.okhttp.internal.http.ResponseHeaders r0, r1, $r11;
        com.android.okhttp.internal.http.RawHeaders r2, $r6, $r7, $r9, $r10, $r12, $r15, $r16, $r17, $r19;
        int i0, i1, $i2, $i3;
        java.lang.String r3, r4, r5, $r8, $r14, $r18, $r20;
        java.net.URI $r13;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        r1 := @parameter0: com.android.okhttp.internal.http.ResponseHeaders;

        $r6 = new com.android.okhttp.internal.http.RawHeaders;

        specialinvoke $r6.<com.android.okhttp.internal.http.RawHeaders: void <init>()>();

        r2 = $r6;

        $r7 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $r8 = virtualinvoke $r7.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getStatusLine()>();

        virtualinvoke r2.<com.android.okhttp.internal.http.RawHeaders: void setStatusLine(java.lang.String)>($r8);

        i0 = 0;

     label1:
        $r9 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $i2 = virtualinvoke $r9.<com.android.okhttp.internal.http.RawHeaders: int length()>();

        if i0 >= $i2 goto label5;

        $r16 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        r4 = virtualinvoke $r16.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getFieldName(int)>(i0);

        $r17 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        r5 = virtualinvoke $r17.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getValue(int)>(i0);

        $r18 = "Warning";

        $z1 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

        $z3 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("1");

        if $z3 == 0 goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $z2 = staticinvoke <com.android.okhttp.internal.http.ResponseHeaders: boolean isEndToEnd(java.lang.String)>(r4);

        if $z2 == 0 goto label4;

        $r19 = r1.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $r20 = virtualinvoke $r19.<com.android.okhttp.internal.http.RawHeaders: java.lang.String get(java.lang.String)>(r4);

        if $r20 != null goto label2;

     label4:
        virtualinvoke r2.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>(r4, r5);

        goto label2;

     label5:
        i1 = 0;

     label6:
        $r10 = r1.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $i3 = virtualinvoke $r10.<com.android.okhttp.internal.http.RawHeaders: int length()>();

        if i1 >= $i3 goto label8;

        $r12 = r1.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        r3 = virtualinvoke $r12.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getFieldName(int)>(i1);

        $z0 = staticinvoke <com.android.okhttp.internal.http.ResponseHeaders: boolean isEndToEnd(java.lang.String)>(r3);

        if $z0 == 0 goto label7;

        $r15 = r1.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $r14 = virtualinvoke $r15.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getValue(int)>(i1);

        virtualinvoke r2.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>(r3, $r14);

     label7:
        i1 = i1 + 1;

        goto label6;

     label8:
        $r11 = new com.android.okhttp.internal.http.ResponseHeaders;

        $r13 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.net.URI uri>;

        specialinvoke $r11.<com.android.okhttp.internal.http.ResponseHeaders: void <init>(java.net.URI,com.android.okhttp.internal.http.RawHeaders)>($r13, r2);

        return $r11;
    }

    public java.lang.String getConnection()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String connection>;

        return $r1;
    }

    public java.lang.String getContentEncoding()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String contentEncoding>;

        return $r1;
    }

    public int getContentLength()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $i0 = r0.<com.android.okhttp.internal.http.ResponseHeaders: int contentLength>;

        return $i0;
    }

    public java.lang.String getEtag()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String etag>;

        return $r1;
    }

    public java.util.Date getExpires()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.util.Date $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date expires>;

        return $r1;
    }

    public com.android.okhttp.internal.http.RawHeaders getHeaders()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        com.android.okhttp.internal.http.RawHeaders $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        return $r1;
    }

    public java.util.Date getLastModified()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.util.Date $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date lastModified>;

        return $r1;
    }

    public int getMaxAgeSeconds()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $i0 = r0.<com.android.okhttp.internal.http.ResponseHeaders: int maxAgeSeconds>;

        return $i0;
    }

    public int getSMaxAgeSeconds()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $i0 = r0.<com.android.okhttp.internal.http.ResponseHeaders: int sMaxAgeSeconds>;

        return $i0;
    }

    public java.util.Date getServedDate()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.util.Date $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date servedDate>;

        return $r1;
    }

    public java.net.URI getUri()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.net.URI $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.net.URI uri>;

        return $r1;
    }

    public java.util.Set getVaryFields()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.util.Set $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Set varyFields>;

        return $r1;
    }

    public boolean hasConnectionClose()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r2 = "close";

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String connection>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        return $z0;
    }

    public boolean hasVaryAll()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Set varyFields>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>("*");

        return $z0;
    }

    public boolean isCacheable(com.android.okhttp.internal.http.RequestHeaders)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        com.android.okhttp.internal.http.RequestHeaders r1;
        int i0, $i1;
        com.android.okhttp.internal.http.RawHeaders $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        r1 := @parameter0: com.android.okhttp.internal.http.RequestHeaders;

        $r2 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        i0 = virtualinvoke $r2.<com.android.okhttp.internal.http.RawHeaders: int getResponseCode()>();

        if i0 == 200 goto label2;

        if i0 == 203 goto label2;

        if i0 == 300 goto label2;

        if i0 == 301 goto label2;

        if i0 == 410 goto label2;

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke r1.<com.android.okhttp.internal.http.RequestHeaders: boolean hasAuthorization()>();

        if $z0 == 0 goto label3;

        $z2 = r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean isPublic>;

        if $z2 != 0 goto label3;

        $z3 = r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean mustRevalidate>;

        if $z3 != 0 goto label3;

        $i1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: int sMaxAgeSeconds>;

        if $i1 == -1 goto label1;

     label3:
        $z1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean noStore>;

        if $z1 != 0 goto label1;

        return 1;
    }

    public boolean isChunked()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r2 = "chunked";

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String transferEncoding>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        return $z0;
    }

    public boolean isContentEncodingGzip()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $r2 = "gzip";

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String contentEncoding>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        return $z0;
    }

    public boolean isMustRevalidate()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $z0 = r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean mustRevalidate>;

        return $z0;
    }

    public boolean isNoCache()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $z0 = r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean noCache>;

        return $z0;
    }

    public boolean isNoStore()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $z0 = r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean noStore>;

        return $z0;
    }

    public boolean isPublic()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        $z0 = r0.<com.android.okhttp.internal.http.ResponseHeaders: boolean isPublic>;

        return $z0;
    }

    public void setLocalTimestamps(long, long)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        long l0, l1;
        com.android.okhttp.internal.http.RawHeaders $r1, $r4;
        java.lang.String $r2, $r3, $r5, $r6;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: long sentRequestMillis> = l0;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $r2 = <com.android.okhttp.internal.http.ResponseHeaders: java.lang.String SENT_MILLIS>;

        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke $r1.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>($r2, $r3);

        r0.<com.android.okhttp.internal.http.ResponseHeaders: long receivedResponseMillis> = l1;

        $r4 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $r5 = <com.android.okhttp.internal.http.ResponseHeaders: java.lang.String RECEIVED_MILLIS>;

        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l1);

        virtualinvoke $r4.<com.android.okhttp.internal.http.RawHeaders: void add(java.lang.String,java.lang.String)>($r5, $r6);

        return;
    }

    public void setResponseSource(com.android.okhttp.ResponseSource)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        com.android.okhttp.ResponseSource r1;
        java.lang.StringBuilder $r2, $r6, $r7, $r9;
        com.android.okhttp.internal.http.RawHeaders $r3, $r8;
        java.lang.String $r4, $r5, $r10;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        r1 := @parameter0: com.android.okhttp.ResponseSource;

        $r3 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $r4 = <com.android.okhttp.internal.http.ResponseHeaders: java.lang.String RESPONSE_SOURCE>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r1.<com.android.okhttp.ResponseSource: java.lang.String toString()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $i0 = virtualinvoke $r8.<com.android.okhttp.internal.http.RawHeaders: int getResponseCode()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.okhttp.internal.http.RawHeaders: void set(java.lang.String,java.lang.String)>($r4, $r10);

        return;
    }

    public void setTransport(java.lang.String)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.lang.String r1, $r2;
        com.android.okhttp.internal.http.RawHeaders $r3;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $r2 = <com.android.okhttp.internal.http.ResponseHeaders: java.lang.String SELECTED_TRANSPORT>;

        virtualinvoke $r3.<com.android.okhttp.internal.http.RawHeaders: void set(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    public void stripContentEncoding()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        com.android.okhttp.internal.http.RawHeaders $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: java.lang.String contentEncoding> = null;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r1.<com.android.okhttp.internal.http.RawHeaders: void removeAll(java.lang.String)>("Content-Encoding");

        return;
    }

    public void stripContentLength()
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        com.android.okhttp.internal.http.RawHeaders $r1;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        r0.<com.android.okhttp.internal.http.ResponseHeaders: int contentLength> = -1;

        $r1 = r0.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        virtualinvoke $r1.<com.android.okhttp.internal.http.RawHeaders: void removeAll(java.lang.String)>("Content-Length");

        return;
    }

    public boolean validate(com.android.okhttp.internal.http.ResponseHeaders)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0, r1;
        com.android.okhttp.internal.http.RawHeaders $r2;
        int $i0;
        java.util.Date $r3, $r4, $r5, $r6;
        long $l1, $l2;
        byte $b3;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        r1 := @parameter0: com.android.okhttp.internal.http.ResponseHeaders;

        $r2 = r1.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders headers>;

        $i0 = virtualinvoke $r2.<com.android.okhttp.internal.http.RawHeaders: int getResponseCode()>();

        if $i0 != 304 goto label2;

     label1:
        return 1;

     label2:
        $r3 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date lastModified>;

        if $r3 == null goto label3;

        $r4 = r1.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date lastModified>;

        if $r4 == null goto label3;

        $r5 = r1.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date lastModified>;

        $l1 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        $r6 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Date lastModified>;

        $l2 = virtualinvoke $r6.<java.util.Date: long getTime()>();

        $b3 = $l1 cmp $l2;

        if $b3 < 0 goto label1;

     label3:
        return 0;
    }

    public boolean varyMatches(java.util.Map, java.util.Map)
    {
        com.android.okhttp.internal.http.ResponseHeaders r0;
        java.util.Map r1, r2;
        java.util.Iterator r3;
        java.lang.String r4;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r7, $r8;

        r0 := @this: com.android.okhttp.internal.http.ResponseHeaders;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        $r5 = r0.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Set varyFields>;

        r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r6;

        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $z1 = staticinvoke <com.android.okhttp.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z1 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }
}
