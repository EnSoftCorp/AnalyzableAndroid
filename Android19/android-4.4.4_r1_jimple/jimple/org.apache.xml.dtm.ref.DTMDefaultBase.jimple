public abstract class org.apache.xml.dtm.ref.DTMDefaultBase extends java.lang.Object implements org.apache.xml.dtm.DTM
{
    public static final int DEFAULT_BLOCKSIZE;
    public static final int DEFAULT_NUMBLOCKS;
    public static final int DEFAULT_NUMBLOCKS_SMALL;
    static final boolean JJK_DEBUG;
    protected static final int NOTPROCESSED;
    public static final int ROOTNODE;
    protected java.lang.String m_documentBaseURI;
    protected org.apache.xml.utils.SuballocatedIntVector m_dtmIdent;
    protected int[][][] m_elemIndexes;
    protected org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable;
    protected org.apache.xml.utils.SuballocatedIntVector m_exptype;
    protected org.apache.xml.utils.SuballocatedIntVector m_firstch;
    protected boolean m_indexing;
    public org.apache.xml.dtm.DTMManager m_mgr;
    protected org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault;
    protected org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements;
    protected java.util.Vector m_namespaceDeclSets;
    private java.util.Vector m_namespaceLists;
    protected org.apache.xml.utils.SuballocatedIntVector m_nextsib;
    protected org.apache.xml.utils.SuballocatedIntVector m_parent;
    protected org.apache.xml.utils.SuballocatedIntVector m_prevsib;
    protected boolean m_shouldStripWS;
    protected org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack;
    protected int m_size;
    protected org.apache.xml.dtm.DTMAxisTraverser[] m_traversers;
    protected org.apache.xml.dtm.DTMWSFilter m_wsfilter;
    protected org.apache.xml.utils.XMLStringFactory m_xstrf;

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.dtm.DTMManager r1;
        javax.xml.transform.Source r2;
        int i0;
        org.apache.xml.dtm.DTMWSFilter r3;
        org.apache.xml.utils.XMLStringFactory r4;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean,int,boolean,boolean)>(r1, r2, i0, r3, r4, z0, 512, 1, 0);

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean, int, boolean, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.dtm.DTMManager r1;
        javax.xml.transform.Source r2;
        int i0, i1;
        org.apache.xml.dtm.DTMWSFilter r3;
        org.apache.xml.utils.XMLStringFactory r4;
        boolean z0, z1, z2, $z3;
        byte b2;
        java.lang.String r5;
        org.apache.xml.utils.SuballocatedIntVector $r6, $r7, $r8, $r9, $r10, $r12, $r16, $r18;
        org.apache.xml.dtm.ref.DTMManagerDefault $r11, $r17;
        org.apache.xml.utils.BoolStack $r13;
        org.apache.xml.dtm.ref.ExpandedNameTable $r14, $r15;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        i1 := @parameter6: int;

        z1 := @parameter7: boolean;

        z2 := @parameter8: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size> = 0;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets> = null;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements> = null;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault> = null;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_shouldStripWS> = 0;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceLists> = null;

        if i1 > 64 goto label7;

        b2 = 4;

        $r18 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r18.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(4, 1);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent> = $r18;

     label1:
        $r7 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, b2);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype> = $r7;

        $r8 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, b2);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch> = $r8;

        $r9 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, b2);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib> = $r9;

        $r10 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, b2);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent> = $r10;

        if z1 == 0 goto label2;

        $r16 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r16.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, b2);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib> = $r16;

     label2:
        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr> = r1;

        $z3 = r1 instanceof org.apache.xml.dtm.ref.DTMManagerDefault;

        if $z3 == 0 goto label3;

        $r17 = (org.apache.xml.dtm.ref.DTMManagerDefault) r1;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault> = $r17;

     label3:
        r5 = null;

        if r2 == null goto label4;

        r5 = interfaceinvoke r2.<javax.xml.transform.Source: java.lang.String getSystemId()>();

     label4:
        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String m_documentBaseURI> = r5;

        $r12 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i0, 0);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMWSFilter m_wsfilter> = r3;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf> = r4;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_indexing> = z0;

        if z0 == 0 goto label8;

        $r15 = new org.apache.xml.dtm.ref.ExpandedNameTable;

        specialinvoke $r15.<org.apache.xml.dtm.ref.ExpandedNameTable: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable> = $r15;

     label5:
        if r3 == null goto label6;

        $r13 = new org.apache.xml.utils.BoolStack;

        specialinvoke $r13.<org.apache.xml.utils.BoolStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack> = $r13;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void pushShouldStripWhitespace(boolean)>(0);

     label6:
        return;

     label7:
        b2 = 32;

        $r6 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>(32);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent> = $r6;

        goto label1;

     label8:
        $r11 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault>;

        $r14 = virtualinvoke $r11.<org.apache.xml.dtm.ref.DTMManagerDefault: org.apache.xml.dtm.ref.ExpandedNameTable getExpandedNameTable(org.apache.xml.dtm.DTM)>(r0);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable> = $r14;

        goto label5;
    }

    protected int _exptype(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3;
        org.apache.xml.utils.SuballocatedIntVector $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return -1;

     label1:
        $i1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i1 goto label2;

        $z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        if $z0 != 0 goto label1;

        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i3 goto label1;

        return -1;

     label2:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $i2 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i2;
    }

    protected int _firstch(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i2 goto label2;

        i1 = -2;

     label1:
        if i1 != -2 goto label4;

        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i3 goto label3;

        if z0 != 0 goto label3;

        return -1;

     label2:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        i1 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        goto label1;

     label3:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if i1 != -2 goto label1;

        if z0 != 0 goto label1;

        return -1;

     label4:
        return i1;
    }

    protected int _level(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

     label1:
        $i2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i2 goto label3;

        $z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        if $z0 != 0 goto label1;

        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i3 goto label1;

        i1 = -1;

     label2:
        return i1;

     label3:
        i1 = 0;

     label4:
        i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i0);

        if -1 == i0 goto label2;

        i1 = i1 + 1;

        goto label4;
    }

    protected int _nextsib(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i2 goto label2;

        i1 = -2;

     label1:
        if i1 != -2 goto label4;

        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i3 goto label3;

        if z0 != 0 goto label3;

        return -1;

     label2:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        i1 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        goto label1;

     label3:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if i1 != -2 goto label1;

        if z0 != 0 goto label1;

        return -1;

     label4:
        return i1;
    }

    protected int _parent(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 >= $i1 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $i5 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i5;

     label1:
        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        $i2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i2 goto label2;

        if z0 != 0 goto label2;

        return -1;

     label2:
        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 >= $i3 goto label1;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $i4 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i4;
    }

    protected int _prevsib(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 >= $i1 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        $i5 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i5;

     label1:
        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        $i2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i2 goto label2;

        if z0 != 0 goto label2;

        return -1;

     label2:
        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 >= $i3 goto label1;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        $i4 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i4;
    }

    protected short _type(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i2;
        short s1;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        s1 = -1;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i0);

        if -1 == i2 goto label1;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        s1 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: short getType(int)>(i2);

     label1:
        return s1;
    }

    public void appendChild(int, boolean, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        boolean z0, z1;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r1 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r1);

        return;
    }

    public void appendTextChild(java.lang.String)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r2);

        return;
    }

    protected void declareNamespaceInContext(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        org.apache.xml.utils.SuballocatedIntVector r1, r2, $r4, $r5, $r6, $r8, $r10, $r11, $r14, $r15;
        java.util.Vector $r3, $r7, $r9, $r12, $r16;
        java.lang.Object $r13;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        if $r3 != null goto label3;

        $r14 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>(32);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements> = $r14;

        $r11 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i0);

        $r12 = new java.util.Vector;

        specialinvoke $r12.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets> = $r12;

        $r15 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r15.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>(32);

        r1 = $r15;

        $r16 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        virtualinvoke $r16.<java.util.Vector: void addElement(java.lang.Object)>(r1);

     label1:
        if r1 != null goto label6;

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i0);

        $i14 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i0);

        r2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)>($i14);

        if r2 == null goto label4;

        i6 = virtualinvoke r2.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $r8 = new org.apache.xml.utils.SuballocatedIntVector;

        $i15 = i6 + 16;

        $i17 = staticinvoke <java.lang.Math: int min(int,int)>($i15, 2048);

        $i16 = staticinvoke <java.lang.Math: int max(int,int)>($i17, 32);

        specialinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>($i16);

        r1 = $r8;

        i7 = 0;

     label2:
        if i7 >= i6 goto label5;

        $i18 = virtualinvoke r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i7);

        virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i18);

        i7 = i7 + 1;

        goto label2;

     label3:
        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        $i8 = virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        i2 = -1 + $i8;

        r1 = null;

        if i2 < 0 goto label1;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        i3 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i2);

        r1 = null;

        if i0 != i3 goto label1;

        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        $r13 = virtualinvoke $r9.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r1 = (org.apache.xml.utils.SuballocatedIntVector) $r13;

        goto label1;

     label4:
        $r6 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>(32);

        r1 = $r6;

     label5:
        $r7 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>(r1);

     label6:
        i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i1);

        $i9 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        i5 = -1 + $i9;

     label7:
        if i5 < 0 goto label9;

        $i10 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i5);

        $i13 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getExpandedTypeID(int)>($i10);

        if i4 != $i13 goto label8;

        $i12 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i1);

        virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i12, i5);

        return;

     label8:
        i5 = i5 + -1;

        goto label7;

     label9:
        $i11 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i1);

        virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i11);

        return;
    }

    public abstract void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException;

    public abstract void dispatchToEvents(int, org.xml.sax.ContentHandler) throws org.xml.sax.SAXException;

    public void documentRegistration()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        return;
    }

    public void documentRelease()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        return;
    }

    public void dumpDTM(java.io.OutputStream)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.io.OutputStream r1;
        java.io.PrintStream r2, $r6, $r89, $r95;
        java.io.IOException r3, $r96;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i10;
        java.lang.String r4, $r10, $r18, $r19, $r24, $r25, $r27, $r30, $r32, $r33, $r37, $r40, $r42, $r44, $r46, $r52, $r54, $r63, $r64, $r68, $r73, $r76, $r78, $r81, $r87, $r91, $r93, $r98;
        java.io.File r5, $r82;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23, $r26, $r28, $r29, $r31, $r34, $r35, $r36, $r38, $r39, $r41, $r43, $r45, $r47, $r48, $r49, $r50, $r51, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r65, $r66, $r67, $r69, $r70, $r72, $r74, $r75, $r77, $r79, $r80, $r83, $r84, $r85, $r86, $r88, $r90, $r92, $r99;
        boolean $z0;
        short $s9;
        org.apache.xml.utils.SuballocatedIntVector $r53;
        org.apache.xml.utils.XMLString $r71;
        java.lang.RuntimeException $r94;
        java.io.FileOutputStream $r97;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.io.OutputStream;

        if r1 != null goto label02;

     label01:
        $r82 = new java.io.File;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DTMDump");

        $i10 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r92 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r90 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt");

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r82.<java.io.File: void <init>(java.lang.String)>($r91);

        r5 = $r82;

        $r89 = <java.lang.System: java.io.PrintStream err>;

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r86 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dumping... ");

        $r87 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r99 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r89.<java.io.PrintStream: void println(java.lang.String)>($r98);

        $r97 = new java.io.FileOutputStream;

        specialinvoke $r97.<java.io.FileOutputStream: void <init>(java.io.File)>(r5);

        r1 = $r97;

     label02:
        $r6 = new java.io.PrintStream;

        specialinvoke $r6.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r1);

        r2 = $r6;

     label03:
        $z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        if $z0 != 0 goto label03;

        i0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total nodes: ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label04:
        i1 = 0;

     label05:
        if i1 >= i0 goto label42;

     label06:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i1);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=========== index=");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" handle=");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ===========");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r18);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NodeName: ");

        $r19 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNodeName(int)>(i2);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r24);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NodeNameX: ");

        $r27 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNodeNameX(int)>(i2);

        $r28 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LocalName: ");

        $r32 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getLocalName(int)>(i2);

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r30);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NamespaceURI: ");

        $r33 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNamespaceURI(int)>(i2);

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r40);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prefix: ");

        $r37 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getPrefix(int)>(i2);

        $r43 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r42);

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i1);

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expanded Type ID: ");

        $r46 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        $r45 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r44);

        $s9 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i1);

        tableswitch($s9)
        {
            case -1: goto label55;
            case 0: goto label43;
            case 1: goto label50;
            case 2: goto label44;
            case 3: goto label57;
            case 4: goto label45;
            case 5: goto label52;
            case 6: goto label51;
            case 7: goto label56;
            case 8: goto label46;
            case 9: goto label48;
            case 10: goto label49;
            case 11: goto label47;
            case 12: goto label54;
            case 13: goto label53;
            default: goto label43;
        };

     label07:
        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type: ");

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r54);

        i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>(i1);

     label08:
        if -1 != i4 goto label21;

     label09:
        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>("First child: DTM.NULL");

     label10:
        $r53 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        if $r53 == null goto label13;

        i8 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _prevsib(int)>(i1);

     label11:
        if -1 != i8 goto label27;

     label12:
        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>("Prev sibling: DTM.NULL");

     label13:
        i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i1);

     label14:
        if -1 != i5 goto label32;

     label15:
        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>("Next sibling: DTM.NULL");

     label16:
        i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i1);

     label17:
        if -1 != i6 goto label37;

     label18:
        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>("Parent: DTM.NULL");

     label19:
        i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _level(int)>(i1);

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Level: ");

        $r65 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r64);

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Node Value: ");

        $r76 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNodeValue(int)>(i2);

        $r75 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r78);

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String Value: ");

        $r71 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLString getStringValue(int)>(i2);

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r71);

        $r73 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r73);

     label20:
        i1 = i1 + 1;

        goto label05;

     label21:
        if -2 != i4 goto label25;

     label22:
        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>("First child: NOTPROCESSED");

     label23:
        goto label10;

     label24:
        $r96 := @caughtexception;

        r3 = $r96;

        $r95 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke r3.<java.io.IOException: void printStackTrace(java.io.PrintStream)>($r95);

        $r94 = new java.lang.RuntimeException;

        $r93 = virtualinvoke r3.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r94.<java.lang.RuntimeException: void <init>(java.lang.String)>($r93);

        throw $r94;

     label25:
        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("First child: ");

        $r51 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r52);

     label26:
        goto label10;

     label27:
        if -2 != i8 goto label30;

     label28:
        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>("Prev sibling: NOTPROCESSED");

     label29:
        goto label13;

     label30:
        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prev sibling: ");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r81 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r81);

     label31:
        goto label13;

     label32:
        if -2 != i5 goto label35;

     label33:
        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>("Next sibling: NOTPROCESSED");

     label34:
        goto label16;

     label35:
        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Next sibling: ");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r63);

     label36:
        goto label16;

     label37:
        if -2 != i6 goto label40;

     label38:
        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>("Parent: NOTPROCESSED");

     label39:
        goto label19;

     label40:
        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parent: ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r68 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r68);

     label41:
        goto label19;

     label42:
        return;

     label43:
        r4 = "Unknown!";

        goto label07;

     label44:
        r4 = "ATTRIBUTE_NODE";

        goto label07;

     label45:
        r4 = "CDATA_SECTION_NODE";

        goto label07;

     label46:
        r4 = "COMMENT_NODE";

        goto label07;

     label47:
        r4 = "DOCUMENT_FRAGMENT_NODE";

        goto label07;

     label48:
        r4 = "DOCUMENT_NODE";

        goto label07;

     label49:
        r4 = "DOCUMENT_NODE";

        goto label07;

     label50:
        r4 = "ELEMENT_NODE";

        goto label07;

     label51:
        r4 = "ENTITY_NODE";

        goto label07;

     label52:
        r4 = "ENTITY_REFERENCE_NODE";

        goto label07;

     label53:
        r4 = "NAMESPACE_NODE";

        goto label07;

     label54:
        r4 = "NOTATION_NODE";

        goto label07;

     label55:
        r4 = "NULL";

        goto label07;

     label56:
        r4 = "PROCESSING_INSTRUCTION_NODE";

        goto label07;

     label57:
        r4 = "TEXT_NODE";

        goto label07;

        catch java.io.IOException from label01 to label02 with label24;
        catch java.io.IOException from label02 to label03 with label24;
        catch java.io.IOException from label03 to label04 with label24;
        catch java.io.IOException from label06 to label07 with label24;
        catch java.io.IOException from label07 to label08 with label24;
        catch java.io.IOException from label09 to label10 with label24;
        catch java.io.IOException from label10 to label11 with label24;
        catch java.io.IOException from label12 to label13 with label24;
        catch java.io.IOException from label13 to label14 with label24;
        catch java.io.IOException from label15 to label16 with label24;
        catch java.io.IOException from label16 to label17 with label24;
        catch java.io.IOException from label18 to label19 with label24;
        catch java.io.IOException from label19 to label20 with label24;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.io.IOException from label25 to label26 with label24;
        catch java.io.IOException from label28 to label29 with label24;
        catch java.io.IOException from label30 to label31 with label24;
        catch java.io.IOException from label33 to label34 with label24;
        catch java.io.IOException from label35 to label36 with label24;
        catch java.io.IOException from label38 to label39 with label24;
        catch java.io.IOException from label40 to label41 with label24;
    }

    public java.lang.String dumpNode(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i2;
        java.lang.String r1, $r10, $r14, $r15, $r19, $r24, $r25;
        java.lang.StringBuffer r2, $r3;
        short $s1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r16, $r17, $r18, $r20, $r21, $r22;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if i0 != -1 goto label01;

        return "[null]";

     label01:
        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        tableswitch($s1)
        {
            case -1: goto label15;
            case 0: goto label02;
            case 1: goto label10;
            case 2: goto label04;
            case 3: goto label17;
            case 4: goto label05;
            case 5: goto label12;
            case 6: goto label11;
            case 7: goto label16;
            case 8: goto label06;
            case 9: goto label08;
            case 10: goto label09;
            case 11: goto label07;
            case 12: goto label14;
            case 13: goto label13;
            default: goto label02;
        };

     label02:
        r1 = "Unknown!";

     label03:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r2 = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(0x");

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getExpandedTypeID(int)>(i0);

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r14 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNodeNameX(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r15 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNamespaceURI(int)>(i0);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $r19 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNodeValue(int)>(i0);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"]");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r25 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r25;

     label04:
        r1 = "ATTR";

        goto label03;

     label05:
        r1 = "CDATA";

        goto label03;

     label06:
        r1 = "COMMENT";

        goto label03;

     label07:
        r1 = "DOC_FRAG";

        goto label03;

     label08:
        r1 = "DOC";

        goto label03;

     label09:
        r1 = "DOC_TYPE";

        goto label03;

     label10:
        r1 = "ELEMENT";

        goto label03;

     label11:
        r1 = "ENTITY";

        goto label03;

     label12:
        r1 = "ENT_REF";

        goto label03;

     label13:
        r1 = "NAMESPACE";

        goto label03;

     label14:
        r1 = "NOTATION";

        goto label03;

     label15:
        r1 = "null";

        goto label03;

     label16:
        r1 = "PI";

        goto label03;

     label17:
        r1 = "TEXT";

        goto label03;
    }

    protected void ensureSizeOfIndex(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        int[][][] r1, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        int[][] r2, r3;
        int[] r4, r5, r6;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        if $r7 != null goto label4;

        $i15 = i0 + 20;

        $r14 = newarray (int[][])[$i15];

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes> = $r14;

     label1:
        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        r2 = $r9[i0];

        if r2 != null goto label5;

        $i12 = i1 + 100;

        r2 = newarray (int[])[$i12];

        $r11 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $r11[i0] = r2;

     label2:
        r4 = r2[i1];

        if r4 != null goto label6;

        r6 = newarray (int)[128];

        r2[i1] = r6;

        r6[0] = 1;

     label3:
        return;

     label4:
        $r8 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $i2 = lengthof $r8;

        if $i2 > i0 goto label1;

        r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $i13 = i0 + 20;

        $r12 = newarray (int[][])[$i13];

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes> = $r12;

        $r13 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $i14 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r13, 0, $i14);

        goto label1;

     label5:
        $i3 = lengthof r2;

        if $i3 > i1 goto label2;

        r3 = r2;

        $i11 = i1 + 100;

        r2 = newarray (int[])[$i11];

        $i10 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r2, 0, $i10);

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $r10[i0] = r2;

        goto label2;

     label6:
        $i7 = lengthof r4;

        $i4 = r4[0];

        $i5 = 1 + $i4;

        if $i7 > $i5 goto label3;

        $i6 = r4[0];

        $i9 = 1024 + $i6;

        r5 = newarray (int)[$i9];

        $i8 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, 0, $i8);

        r2[i1] = r5;

        return;
    }

    protected void error(java.lang.String)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1;
        org.apache.xml.dtm.DTMException $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.xml.dtm.DTMException;

        specialinvoke $r2.<org.apache.xml.dtm.DTMException: void <init>(java.lang.String)>(r1);

        throw $r2;
    }

    int findElementFromIndex(int, int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        int[][][] r1;
        int[][] r2;
        int[] r3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        if r1 == null goto label1;

        $i4 = lengthof r1;

        if i0 >= $i4 goto label1;

        r2 = r1[i0];

        if r2 == null goto label1;

        $i5 = lengthof r2;

        if i1 >= $i5 goto label1;

        r3 = r2[i1];

        if r3 == null goto label1;

        $i6 = r3[0];

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int findGTE(int[],int,int,int)>(r3, 1, $i6, i2);

        if i3 <= -1 goto label1;

        $i7 = r3[i3];

        return $i7;

     label1:
        return -2;
    }

    protected int findGTE(int[], int, int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = i0;

        $i8 = i1 - 1;

        i4 = i0 + $i8;

        i5 = i4;

     label1:
        if i3 > i4 goto label3;

        $i10 = i3 + i4;

        i6 = $i10 / 2;

        i7 = r1[i6];

        if i7 <= i2 goto label2;

        i4 = i6 - 1;

        goto label1;

     label2:
        if i7 >= i2 goto label5;

        i3 = i6 + 1;

        goto label1;

     label3:
        if i3 > i5 goto label6;

        $i9 = r1[i3];

        if $i9 <= i2 goto label6;

     label4:
        i6 = i3;

     label5:
        return i6;

     label6:
        i3 = -1;

        goto label4;
    }

    protected int findInSortedSuballocatedIntVector(org.apache.xml.utils.SuballocatedIntVector, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.utils.SuballocatedIntVector r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter1: int;

        i1 = 0;

        if r1 == null goto label5;

        i2 = 0;

        $i6 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        i3 = -1 + $i6;

     label1:
        if i2 > i3 goto label4;

        $i7 = i2 + i3;

        i1 = $i7 / 2;

        $i8 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        i4 = i0 - $i8;

        if i4 != 0 goto label2;

        return i1;

     label2:
        if i4 >= 0 goto label3;

        i3 = i1 - 1;

        goto label1;

     label3:
        i2 = i1 + 1;

        goto label1;

     label4:
        if i2 <= i1 goto label5;

        i1 = i2;

     label5:
        $i5 = -1 - i1;

        return $i5;
    }

    protected org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10;
        org.apache.xml.utils.SuballocatedIntVector r1, r2, r3, r4, $r5, $r7, $r11;
        java.util.Vector $r6, $r10, $r12;
        java.lang.Object $r8, $r9, $r13;
        short $s11;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        r2 = null;

        if r1 == null goto label1;

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int findInSortedSuballocatedIntVector(org.apache.xml.utils.SuballocatedIntVector,int)>($r5, i0);

        if i1 < 0 goto label2;

        $r12 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        $r13 = virtualinvoke $r12.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r2 = (org.apache.xml.utils.SuballocatedIntVector) $r13;

     label1:
        return r2;

     label2:
        r2 = null;

        if i1 == -1 goto label1;

        i2 = -1 - i1;

        r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        i3 = i2 - 1;

        i4 = virtualinvoke r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i3);

        i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i0);

        if i3 != 0 goto label8;

        if i4 >= i5 goto label8;

        $i10 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i0);

        i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getDocumentRoot(int)>($i10);

        i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i6);

        $s11 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i6);

        if $s11 != 9 goto label5;

        i9 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>(i7);

        if i9 == -1 goto label4;

        i8 = i9;

     label3:
        if i4 != i8 goto label8;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        $r9 = virtualinvoke $r10.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        $r11 = (org.apache.xml.utils.SuballocatedIntVector) $r9;

        return $r11;

     label4:
        i8 = i7;

        goto label3;

     label5:
        i8 = i7;

        goto label3;

     label6:
        if i4 >= i5 goto label9;

     label7:
        i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i5);

        if i4 < i5 goto label7;

     label8:
        r2 = null;

        if i3 < 0 goto label1;

        r2 = null;

        if i5 <= 0 goto label1;

        if i4 != i5 goto label6;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        $r8 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        $r7 = (org.apache.xml.utils.SuballocatedIntVector) $r8;

        return $r7;

     label9:
        r2 = null;

        if i3 <= 0 goto label1;

        r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        i3 = i3 + -1;

        i4 = virtualinvoke r4.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i3);

        goto label8;
    }

    public abstract int getAttributeNode(int, java.lang.String, java.lang.String);

    public org.apache.xml.utils.SuballocatedIntVector getDTMIDs()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.dtm.DTMManager $r1;
        org.apache.xml.utils.SuballocatedIntVector $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        return $r2;
    }

    public int getDocument()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.utils.SuballocatedIntVector $r1;
        int $i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i0 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(0);

        return $i0;
    }

    public boolean getDocumentAllDeclarationsProcessed()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        return 1;
    }

    public java.lang.String getDocumentBaseURI()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String m_documentBaseURI>;

        return $r1;
    }

    public java.lang.String getDocumentEncoding(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        return "UTF-8";
    }

    public int getDocumentRoot(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1;
        org.apache.xml.dtm.DTMManager $r1;
        org.apache.xml.dtm.DTM $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager getManager()>();

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $i1 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: int getDocument()>();

        return $i1;
    }

    public java.lang.String getDocumentStandalone(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getDocumentSystemIdentifier(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String m_documentBaseURI>;

        return $r1;
    }

    public abstract java.lang.String getDocumentTypeDeclarationPublicIdentifier();

    public abstract java.lang.String getDocumentTypeDeclarationSystemIdentifier();

    public java.lang.String getDocumentVersion(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        return null;
    }

    public abstract int getElementById(java.lang.String);

    public int getExpandedTypeID(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        if i1 != -1 goto label1;

        return -1;

     label1:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i1);

        return $i2;
    }

    public int getExpandedTypeID(java.lang.String, java.lang.String, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1, r2;
        int i0, $i1;
        org.apache.xml.dtm.ref.ExpandedNameTable $r3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i1 = virtualinvoke $r3.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $i1;
    }

    public int getFirstAttribute(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getFirstAttributeIdentity(int)>($i1);

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i2);

        return $i3;
    }

    protected int getFirstAttributeIdentity(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1;
        short s2, $s3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = -1;

        $s3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i0);

        if 1 != $s3 goto label2;

     label1:
        i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNodeIdentity(int)>(i0);

        if -1 == i0 goto label2;

        s2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i0);

        if s2 != 2 goto label3;

        i1 = i0;

     label2:
        return i1;

     label3:
        if 13 == s2 goto label1;

        return -1;
    }

    public int getFirstChild(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>($i1);

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i2);

        return $i3;
    }

    public int getFirstNamespaceNode(int, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i3, $i5, $i7, $i8;
        boolean z0;
        short s2, $s4, $s6;
        org.apache.xml.utils.SuballocatedIntVector r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label3;

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $s6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i3);

        if $s6 != 1 goto label1;

        r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)>(i3);

        if r1 == null goto label1;

        $i7 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if $i7 >= 1 goto label2;

     label1:
        return -1;

     label2:
        $i8 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(0);

        return $i8;

     label3:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $s4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i1);

        if $s4 != 1 goto label1;

     label4:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNodeIdentity(int)>(i1);

        if -1 == i1 goto label1;

        s2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i1);

        if s2 != 13 goto label5;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i1);

        return $i5;

     label5:
        if 2 == s2 goto label4;

        return -1;
    }

    public int getLastChild(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, $i3, $i4;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>($i3);

        i2 = -1;

     label1:
        if i1 == -1 goto label2;

        i2 = i1;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i1);

        goto label1;

     label2:
        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i2);

        return $i4;
    }

    public short getLevel(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3;
        short $s4;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _level(int)>($i1);

        $i3 = 1 + $i2;

        $s4 = (short) $i3;

        return $s4;
    }

    public abstract java.lang.String getLocalName(int);

    public java.lang.String getLocalNameFromExpandedNameID(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getLocalName(int)>(i0);

        return $r2;
    }

    public org.apache.xml.dtm.DTMManager getManager()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.dtm.DTMManager $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr>;

        return $r1;
    }

    public java.lang.String getNamespaceFromExpandedNameID(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getNamespace(int)>(i0);

        return $r2;
    }

    public int getNamespaceType(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>($i2);

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i3 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getNamespaceID(int)>(i1);

        return $i3;
    }

    public abstract java.lang.String getNamespaceURI(int);

    public int getNextAttribute(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i3, $i4;
        short $s2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $s2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i1);

        if $s2 != 2 goto label1;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextAttributeIdentity(int)>(i1);

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i3);

        return $i4;

     label1:
        return -1;
    }

    protected int getNextAttributeIdentity(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        short s1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

     label1:
        i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNodeIdentity(int)>(i0);

        if -1 == i0 goto label3;

        s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i0);

        if s1 != 2 goto label2;

        return i0;

     label2:
        if s1 == 13 goto label1;

     label3:
        return -1;
    }

    public int getNextNamespaceNode(int, int, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i4, $i5, $i6, $i7, $i8, $i9;
        boolean z0;
        short s3;
        org.apache.xml.utils.SuballocatedIntVector r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label3;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)>($i6);

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i7 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int indexOf(int)>(i1);

        i4 = 1 + $i7;

        if i4 <= 0 goto label1;

        $i9 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if i4 == $i9 goto label1;

        $i8 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i4);

        return $i8;

     label3:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i1);

     label4:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNodeIdentity(int)>(i2);

        if -1 == i2 goto label1;

        s3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i2);

        if s3 != 13 goto label5;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i2);

        return $i5;

     label5:
        if s3 == 2 goto label4;

        return -1;
    }

    protected abstract int getNextNodeIdentity(int);

    public int getNextSibling(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return -1;

     label1:
        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>($i1);

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i2);

        return $i3;
    }

    public org.w3c.dom.Node getNode(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        org.apache.xml.dtm.ref.DTMNodeProxy $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = new org.apache.xml.dtm.ref.DTMNodeProxy;

        specialinvoke $r1.<org.apache.xml.dtm.ref.DTMNodeProxy: void <init>(org.apache.xml.dtm.DTM,int)>(r0, i0);

        return $r1;
    }

    public int getNodeHandle(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i0);

        return $i1;
    }

    public int getNodeIdent(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        return $i1;
    }

    public abstract java.lang.String getNodeName(int);

    public java.lang.String getNodeNameX(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r1);

        return null;
    }

    public short getNodeType(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        short $s3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>($i1);

        $s3 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: short getType(int)>($i2);

        return $s3;
    }

    public abstract java.lang.String getNodeValue(int);

    protected abstract int getNumberOfNodes();

    public int getOwnerDocument(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i2;
        short $s1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        if 9 != $s1 goto label1;

        return -1;

     label1:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getDocumentRoot(int)>(i0);

        return $i2;
    }

    public int getParent(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        if i1 <= 0 goto label1;

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i1);

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i2);

        return $i3;

     label1:
        return -1;
    }

    public abstract java.lang.String getPrefix(int);

    public int getPreviousSibling(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.xml.utils.SuballocatedIntVector $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        if $r1 == null goto label2;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _prevsib(int)>($i6);

        $i8 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i7);

        return $i8;

     label2:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i1);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>($i4);

        i3 = -1;

     label3:
        if i2 == i1 goto label4;

        i3 = i2;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i2);

        goto label3;

     label4:
        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i3);

        return $i5;
    }

    protected boolean getShouldStripWhitespace()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $z0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_shouldStripWS>;

        return $z0;
    }

    public abstract org.apache.xml.utils.XMLString getStringValue(int);

    public char[] getStringValueChunk(int, int, int[])
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1;
        int[] r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        $r2 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r2);

        return null;
    }

    public int getStringValueChunkCount(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r1);

        return 0;
    }

    protected int getTypedAttribute(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, $i6;
        short s4, $s5;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = -1;

        $s5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        if 1 != $s5 goto label2;

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

     label1:
        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNodeIdentity(int)>(i3);

        if -1 == i3 goto label2;

        s4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i3);

        if s4 != 2 goto label3;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i3);

        if $i6 != i1 goto label1;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i3);

     label2:
        return i2;

     label3:
        if 13 == s4 goto label1;

        return -1;
    }

    public int getTypedFirstChild(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        short $s10;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = -1;

        if i1 >= 14 goto label5;

        $i9 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>($i9);

     label1:
        if i4 == -1 goto label3;

        i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i4);

        if i5 == i1 goto label2;

        if i5 < 14 goto label4;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $s10 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: short getType(int)>(i5);

        if $s10 != i1 goto label4;

     label2:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i4);

     label3:
        return i2;

     label4:
        i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i4);

        goto label1;

     label5:
        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>($i6);

     label6:
        if i3 == -1 goto label3;

        $i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i3);

        if $i7 != i1 goto label7;

        $i8 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i3);

        return $i8;

     label7:
        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i3);

        goto label6;
    }

    public int getTypedNextSibling(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, $i4;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        short $s5;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != -1 goto label2;

     label1:
        return -1;

     label2:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

     label3:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i2);

        if i2 == -1 goto label4;

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i2);

        if i3 == i1 goto label4;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $s5 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: short getType(int)>(i3);

        if $s5 != i1 goto label3;

     label4:
        if i2 == -1 goto label1;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i2);

        return $i4;
    }

    public abstract java.lang.String getUnparsedEntityURI(java.lang.String);

    public boolean hasChildNodes(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>($i1);

        if $i2 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void indexNode(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, $i5, $i6, $i7;
        org.apache.xml.dtm.ref.ExpandedNameTable r1;
        int[] r2;
        short $s4;
        int[][][] $r3;
        int[][] $r4;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $s4 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExpandedNameTable: short getType(int)>(i0);

        if 1 != $s4 goto label1;

        i2 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getNamespaceID(int)>(i0);

        i3 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getLocalNameID(int)>(i0);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void ensureSizeOfIndex(int,int)>(i2, i3);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $r4 = $r3[i2];

        r2 = $r4[i3];

        $i5 = r2[0];

        r2[$i5] = i1;

        $i6 = r2[0];

        $i7 = 1 + $i6;

        r2[0] = $i7;

     label1:
        return;
    }

    public abstract boolean isAttributeSpecified(int);

    public boolean isCharacterElementContentWhitespace(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isDocumentAllDeclarationsProcessed(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        return 1;
    }

    public boolean isNodeAfter(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i1);

        if i2 == -1 goto label1;

        if i3 == -1 goto label1;

        if i2 > i3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isSupported(java.lang.String, java.lang.String)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public final int makeNodeHandle(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.xml.utils.SuballocatedIntVector $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if -1 != i0 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i1 = i0 >>> 16;

        $i2 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        $i3 = 65535 & i0;

        $i4 = $i2 + $i3;

        return $i4;
    }

    public final int makeNodeIdentity(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.xml.dtm.ref.DTMManagerDefault $r1, $r3, $r6;
        org.apache.xml.utils.SuballocatedIntVector $r2;
        org.apache.xml.dtm.DTM[] $r4;
        org.apache.xml.dtm.DTM $r5;
        int[] $r7;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if -1 != i0 goto label2;

     label1:
        return -1;

     label2:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault>;

        if $r1 == null goto label3;

        i2 = i0 >>> 16;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault>;

        $r4 = $r3.<org.apache.xml.dtm.ref.DTMManagerDefault: org.apache.xml.dtm.DTM[] m_dtms>;

        $r5 = $r4[i2];

        if $r5 != r0 goto label1;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault>;

        $r7 = $r6.<org.apache.xml.dtm.ref.DTMManagerDefault: int[] m_dtm_offsets>;

        $i7 = $r7[i2];

        $i8 = i0 & 65535;

        $i9 = $i7 | $i8;

        return $i9;

     label3:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i3 = -65536 & i0;

        i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int indexOf(int)>($i3);

        if i1 == -1 goto label1;

        $i5 = i1 << 16;

        $i4 = i0 & 65535;

        $i6 = $i5 + $i4;

        return $i6;
    }

    public void migrateTo(org.apache.xml.dtm.DTMManager)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.dtm.DTMManager r1;
        boolean $z0;
        org.apache.xml.dtm.ref.DTMManagerDefault $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr> = r1;

        $z0 = r1 instanceof org.apache.xml.dtm.ref.DTMManagerDefault;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.xml.dtm.ref.DTMManagerDefault) r1;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault> = $r2;

     label1:
        return;
    }

    protected abstract boolean nextNode();

    protected void popShouldStripWhitespace()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.utils.BoolStack $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        $z0 = virtualinvoke $r2.<org.apache.xml.utils.BoolStack: boolean popAndTop()>();

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_shouldStripWS> = $z0;

     label1:
        return;
    }

    protected void pushShouldStripWhitespace(boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        boolean z0;
        org.apache.xml.utils.BoolStack $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_shouldStripWS> = z0;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        virtualinvoke $r2.<org.apache.xml.utils.BoolStack: boolean push(boolean)>(z0);

     label1:
        return;
    }

    public void setDocumentBaseURI(java.lang.String)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String m_documentBaseURI> = r1;

        return;
    }

    public void setFeature(java.lang.String, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    protected void setShouldStripWhitespace(boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        boolean z0;
        org.apache.xml.utils.BoolStack $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_shouldStripWS> = z0;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        virtualinvoke $r2.<org.apache.xml.utils.BoolStack: void setTop(boolean)>(z0);

     label1:
        return;
    }

    public boolean supportsPreStripping()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.xml.dtm.ref.DTMDefaultBase: int NOTPROCESSED> = -2;

        <org.apache.xml.dtm.ref.DTMDefaultBase: boolean JJK_DEBUG> = 0;

        <org.apache.xml.dtm.ref.DTMDefaultBase: int DEFAULT_NUMBLOCKS_SMALL> = 4;

        <org.apache.xml.dtm.ref.DTMDefaultBase: int DEFAULT_NUMBLOCKS> = 32;

        <org.apache.xml.dtm.ref.DTMDefaultBase: int DEFAULT_BLOCKSIZE> = 512;

        return;
    }
}
