public final class com.android.server.power.PowerManagerService extends android.os.IPowerManager$Stub implements com.android.server.Watchdog$Monitor
{
    private static final int BOOT_ANIMATION_POLL_INTERVAL;
    private static final java.lang.String BOOT_ANIMATION_SERVICE;
    private static final boolean DEBUG;
    private static final boolean DEBUG_SPEW;
    private static final int DEFAULT_SCREEN_OFF_TIMEOUT;
    private static final int DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED;
    private static final int DIRTY_BATTERY_STATE;
    private static final int DIRTY_BOOT_COMPLETED;
    private static final int DIRTY_DOCK_STATE;
    private static final int DIRTY_IS_POWERED;
    private static final int DIRTY_PROXIMITY_POSITIVE;
    private static final int DIRTY_SCREEN_ON_BLOCKER_RELEASED;
    private static final int DIRTY_SETTINGS;
    private static final int DIRTY_STAY_ON;
    private static final int DIRTY_USER_ACTIVITY;
    private static final int DIRTY_WAKEFULNESS;
    private static final int DIRTY_WAKE_LOCKS;
    private static final int DREAM_BATTERY_LEVEL_DRAIN_CUTOFF;
    private static final float MAXIMUM_SCREEN_DIM_RATIO;
    private static final int MINIMUM_SCREEN_OFF_TIMEOUT;
    private static final int MSG_CHECK_IF_BOOT_ANIMATION_FINISHED;
    private static final int MSG_SANDMAN;
    private static final int MSG_SCREEN_ON_BLOCKER_RELEASED;
    private static final int MSG_USER_ACTIVITY_TIMEOUT;
    private static final int SCREEN_DIM_DURATION;
    private static final java.lang.String TAG;
    private static final int USER_ACTIVITY_SCREEN_BRIGHT;
    private static final int USER_ACTIVITY_SCREEN_DIM;
    private static final int WAKEFULNESS_ASLEEP;
    private static final int WAKEFULNESS_AWAKE;
    private static final int WAKEFULNESS_DREAMING;
    private static final int WAKEFULNESS_NAPPING;
    private static final int WAKE_LOCK_BUTTON_BRIGHT;
    private static final int WAKE_LOCK_CPU;
    private static final int WAKE_LOCK_PROXIMITY_SCREEN_OFF;
    private static final int WAKE_LOCK_SCREEN_BRIGHT;
    private static final int WAKE_LOCK_SCREEN_DIM;
    private static final int WAKE_LOCK_STAY_AWAKE;
    private com.android.internal.app.IAppOpsService mAppOps;
    private com.android.server.LightsService$Light mAttentionLight;
    private int mBatteryLevel;
    private int mBatteryLevelWhenDreamStarted;
    private com.android.server.BatteryService mBatteryService;
    private com.android.internal.app.IBatteryStats mBatteryStats;
    private boolean mBootCompleted;
    private android.content.Context mContext;
    private int mDirty;
    private final com.android.server.power.PowerManagerService$DisplayBlankerImpl mDisplayBlanker;
    private com.android.server.display.DisplayManagerService mDisplayManagerService;
    private com.android.server.power.DisplayPowerController mDisplayPowerController;
    private final com.android.server.power.DisplayPowerController$Callbacks mDisplayPowerControllerCallbacks;
    private final com.android.server.power.DisplayPowerRequest mDisplayPowerRequest;
    private boolean mDisplayReady;
    private final com.android.server.power.SuspendBlocker mDisplaySuspendBlocker;
    private int mDockState;
    private com.android.server.dreams.DreamManagerService mDreamManager;
    private boolean mDreamsActivateOnDockSetting;
    private boolean mDreamsActivateOnSleepSetting;
    private boolean mDreamsActivatedOnDockByDefaultConfig;
    private boolean mDreamsActivatedOnSleepByDefaultConfig;
    private boolean mDreamsEnabledByDefaultConfig;
    private boolean mDreamsEnabledSetting;
    private boolean mDreamsSupportedConfig;
    private com.android.server.power.PowerManagerService$PowerManagerHandler mHandler;
    private android.os.HandlerThread mHandlerThread;
    private boolean mHoldingDisplaySuspendBlocker;
    private boolean mHoldingWakeLockSuspendBlocker;
    private boolean mIsPowered;
    private long mLastScreenOffEventElapsedRealTime;
    private long mLastSleepTime;
    private long mLastUserActivityTime;
    private long mLastUserActivityTimeNoChangeLights;
    private long mLastWakeTime;
    private long mLastWarningAboutUserActivityPermission;
    private com.android.server.LightsService mLightsService;
    private final java.lang.Object mLock;
    private int mMaximumScreenOffTimeoutFromDeviceAdmin;
    private com.android.server.power.Notifier mNotifier;
    private int mPlugType;
    private android.view.WindowManagerPolicy mPolicy;
    private boolean mProximityPositive;
    private boolean mRequestWaitForNegativeProximity;
    private boolean mSandmanScheduled;
    private float mScreenAutoBrightnessAdjustmentSetting;
    private int mScreenBrightnessModeSetting;
    private int mScreenBrightnessOverrideFromWindowManager;
    private int mScreenBrightnessSetting;
    private int mScreenBrightnessSettingDefault;
    private int mScreenBrightnessSettingMaximum;
    private int mScreenBrightnessSettingMinimum;
    private int mScreenOffTimeoutSetting;
    private final com.android.server.power.PowerManagerService$ScreenOnBlockerImpl mScreenOnBlocker;
    private boolean mSendGoToSleepFinishedNotificationWhenReady;
    private boolean mSendWakeUpFinishedNotificationWhenReady;
    private com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver;
    private boolean mStayOn;
    private int mStayOnWhilePluggedInSetting;
    private final java.util.ArrayList mSuspendBlockers;
    private boolean mSuspendWhenScreenOffDueToProximityConfig;
    private boolean mSystemReady;
    private float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride;
    private int mTemporaryScreenBrightnessSettingOverride;
    private int mUserActivitySummary;
    private long mUserActivityTimeoutOverrideFromWindowManager;
    private int mWakeLockSummary;
    private final com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker;
    private final java.util.ArrayList mWakeLocks;
    private boolean mWakeUpWhenPluggedOrUnpluggedConfig;
    private int mWakefulness;
    private com.android.server.power.WirelessChargerDetector mWirelessChargerDetector;

    public void <init>()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r13;
        java.util.ArrayList $r4, $r5;
        com.android.server.power.DisplayPowerRequest $r6;
        com.android.server.power.PowerManagerService$1 $r7;
        com.android.server.power.SuspendBlocker $r8, $r9, $r10;
        com.android.server.power.PowerManagerService$ScreenOnBlockerImpl $r11;
        com.android.server.power.PowerManagerService$DisplayBlankerImpl $r12;

        r0 := @this: com.android.server.power.PowerManagerService;

        specialinvoke r0.<android.os.IPowerManager$Stub: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks> = $r5;

        $r6 = new com.android.server.power.DisplayPowerRequest;

        specialinvoke $r6.<com.android.server.power.DisplayPowerRequest: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest> = $r6;

        r0.<com.android.server.power.PowerManagerService: int mDockState> = 0;

        r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin> = 2147483647;

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager> = -1;

        r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager> = -1L;

        r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride> = -1;

        r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride> = #NaNF;

        r0.<com.android.server.power.PowerManagerService: long mLastWarningAboutUserActivityPermission> = -9223372036854775808L;

        $r7 = new com.android.server.power.PowerManagerService$1;

        specialinvoke $r7.<com.android.server.power.PowerManagerService$1: void <init>(com.android.server.power.PowerManagerService)>(r0);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerController$Callbacks mDisplayPowerControllerCallbacks> = $r7;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r8 = specialinvoke r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker createSuspendBlockerLocked(java.lang.String)>("PowerManagerService.WakeLocks");

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker> = $r8;

        $r9 = specialinvoke r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker createSuspendBlockerLocked(java.lang.String)>("PowerManagerService.Display");

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker> = $r9;

        $r10 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r10.<com.android.server.power.SuspendBlocker: void acquire()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker> = 1;

        $r11 = new com.android.server.power.PowerManagerService$ScreenOnBlockerImpl;

        specialinvoke $r11.<com.android.server.power.PowerManagerService$ScreenOnBlockerImpl: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$ScreenOnBlockerImpl mScreenOnBlocker> = $r11;

        $r12 = new com.android.server.power.PowerManagerService$DisplayBlankerImpl;

        specialinvoke $r12.<com.android.server.power.PowerManagerService$DisplayBlankerImpl: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$DisplayBlankerImpl mDisplayBlanker> = $r12;

        r0.<com.android.server.power.PowerManagerService: int mWakefulness> = 1;

        exitmonitor r1;

     label2:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void nativeInit()>();

        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetPowerState(boolean,boolean)>(1, 1);

        return;

     label3:
        $r13 := @caughtexception;

        r2 = $r13;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static boolean access$1002(com.android.server.power.PowerManagerService, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive> = z0;

        return z0;
    }

    static boolean access$1100(com.android.server.power.PowerManagerService, long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, i1, i2, i3);

        return $z0;
    }

    static android.content.Context access$1200(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        return $r1;
    }

    static void access$1300(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleBatteryStateChangedLocked()>();

        return;
    }

    static void access$1400(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void startWatchingForBootAnimationFinished()>();

        return;
    }

    static void access$1500(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()>();

        return;
    }

    static void access$1600(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleSettingsChangedLocked()>();

        return;
    }

    static int access$1700(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        int $i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDockState>;

        return $i0;
    }

    static int access$1702(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        r0.<com.android.server.power.PowerManagerService: int mDockState> = i0;

        return i0;
    }

    static void access$1800(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleUserActivityTimeout()>();

        return;
    }

    static void access$1900(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleSandman()>();

        return;
    }

    static void access$2000(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleScreenOnBlockerReleased()>();

        return;
    }

    static void access$2100(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void checkIfBootAnimationFinished()>();

        return;
    }

    static android.os.WorkSource access$2200(android.os.WorkSource)
    {
        android.os.WorkSource r0, $r1;

        r0 := @parameter0: android.os.WorkSource;

        $r1 = staticinvoke <com.android.server.power.PowerManagerService: android.os.WorkSource copyWorkSource(android.os.WorkSource)>(r0);

        return $r1;
    }

    static void access$2300(com.android.server.power.PowerManagerService, com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: com.android.server.power.PowerManagerService$WakeLock;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        return;
    }

    static void access$2400(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeReleaseSuspendBlocker(java.lang.String)>(r0);

        return;
    }

    static void access$2500(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeAcquireSuspendBlocker(java.lang.String)>(r0);

        return;
    }

    static com.android.server.power.PowerManagerService$PowerManagerHandler access$2600(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        return $r1;
    }

    static com.android.server.display.DisplayManagerService access$2700(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.display.DisplayManagerService $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.display.DisplayManagerService mDisplayManagerService>;

        return $r1;
    }

    static void access$2800(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetInteractive(boolean)>(z0);

        return;
    }

    static void access$2900(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetAutoSuspend(boolean)>(z0);

        return;
    }

    static java.lang.Object access$700(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static int access$876(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, $i2;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        i1 = i0 | $i2;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = i1;

        return i1;
    }

    static void access$900(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    private void acquireWakeLockInternal(android.os.IBinder, int, java.lang.String, java.lang.String, android.os.WorkSource, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.String r2, r3;
        android.os.WorkSource r4;
        java.lang.Object r5, $r12;
        java.lang.Throwable r6, $r15;
        com.android.server.power.PowerManagerService$WakeLock r7, $r9;
        java.util.ArrayList $r10, $r11;
        boolean $z1;
        java.lang.IllegalArgumentException $r13;
        android.os.RemoteException $r14;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.os.WorkSource;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        r5 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r5;

     label01:
        i3 = specialinvoke r0.<com.android.server.power.PowerManagerService: int findWakeLockIndexLocked(android.os.IBinder)>(r1);

     label02:
        if i3 < 0 goto label06;

     label03:
        $r11 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.power.PowerManagerService$WakeLock) $r12;

        $z1 = virtualinvoke r7.<com.android.server.power.PowerManagerService$WakeLock: boolean hasSameProperties(int,java.lang.String,android.os.WorkSource,int,int)>(i0, r2, r4, i1, i2);

        if $z1 != 0 goto label04;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockReleasedLocked(com.android.server.power.PowerManagerService$WakeLock)>(r7);

        virtualinvoke r7.<com.android.server.power.PowerManagerService$WakeLock: void updateProperties(int,java.lang.String,java.lang.String,android.os.WorkSource,int,int)>(i0, r2, r3, r4, i1, i2);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockAcquiredLocked(com.android.server.power.PowerManagerService$WakeLock)>(r7);

     label04:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void applyWakeLockFlagsOnAcquireLocked(com.android.server.power.PowerManagerService$WakeLock)>(r7);

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i4 = 1 | $i5;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i4;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r5;

     label05:
        return;

     label06:
        $r9 = new com.android.server.power.PowerManagerService$WakeLock;

        specialinvoke $r9.<com.android.server.power.PowerManagerService$WakeLock: void <init>(com.android.server.power.PowerManagerService,android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,int,int)>(r0, r1, i0, r2, r3, r4, i1, i2);

        r7 = $r9;

     label07:
        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r7, 0);

     label08:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockAcquiredLocked(com.android.server.power.PowerManagerService$WakeLock)>(r7);

        $r10 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

     label09:
        goto label04;

     label10:
        $r15 := @caughtexception;

        r6 = $r15;

     label11:
        exitmonitor r5;

     label12:
        throw r6;

     label13:
        $r14 := @caughtexception;

     label14:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wake lock is already dead.");

     label15:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch android.os.RemoteException from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label10;
    }

    private void applyWakeLockFlagsOnAcquireLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int $i0, $i1;
        boolean $z0;
        long $l2;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i1 = 268435456 & $i0;

        if $i1 == 0 goto label1;

        $z0 = staticinvoke <com.android.server.power.PowerManagerService: boolean isScreenLock(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        if $z0 == 0 goto label1;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long)>($l2);

     label1:
        return;
    }

    private void applyWakeLockFlagsOnReleaseLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int $i0, $i1, $i3;
        boolean $z0;
        long $l2;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i1 = 536870912 & $i0;

        if $i1 == 0 goto label1;

        $z0 = staticinvoke <com.android.server.power.PowerManagerService: boolean isScreenLock(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        if $z0 == 0 goto label1;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i3 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>($l2, 0, 1, $i3);

     label1:
        return;
    }

    private boolean canDreamLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.power.DisplayPowerRequest $r1;
        int $i0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsSupportedConfig>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledSetting>;

        if $z1 == 0 goto label2;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $i0 = $r1.<com.android.server.power.DisplayPowerRequest: int screenState>;

        if $i0 == 0 goto label2;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z2 == 0 goto label2;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z3 != 0 goto label1;

        $z4 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptAwakeLocked()>();

        if $z4 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private void checkIfBootAnimationFinished()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean $z0, $z1;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = staticinvoke <android.os.SystemService: boolean isRunning(java.lang.String)>("bootanim");

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r3.<com.android.server.power.PowerManagerService$PowerManagerHandler: boolean sendEmptyMessageDelayed(int,long)>(4, 200L);

        return;

     label1:
        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z1 != 0 goto label3;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Boot animation finished.");

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleBootCompletedLocked()>();

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static android.os.WorkSource copyWorkSource(android.os.WorkSource)
    {
        android.os.WorkSource r0, $r1;

        r0 := @parameter0: android.os.WorkSource;

        if r0 == null goto label1;

        $r1 = new android.os.WorkSource;

        specialinvoke $r1.<android.os.WorkSource: void <init>(android.os.WorkSource)>(r0);

        return $r1;

     label1:
        return null;
    }

    private void crashInternal(java.lang.String)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.String r1;
        com.android.server.power.PowerManagerService$3 r2, $r4;
        java.lang.InterruptedException r3, $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: java.lang.String;

        $r4 = new com.android.server.power.PowerManagerService$3;

        specialinvoke $r4.<com.android.server.power.PowerManagerService$3: void <init>(com.android.server.power.PowerManagerService,java.lang.String,java.lang.String)>(r0, "PowerManagerService.crash()", r1);

        r2 = $r4;

     label1:
        virtualinvoke r2.<java.lang.Thread: void start()>();

        virtualinvoke r2.<java.lang.Thread: void join()>();

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("PowerManagerService", r3);

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private com.android.server.power.SuspendBlocker createSuspendBlockerLocked(java.lang.String)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.String r1;
        com.android.server.power.PowerManagerService$SuspendBlockerImpl r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = new com.android.server.power.PowerManagerService$SuspendBlockerImpl;

        specialinvoke $r3.<com.android.server.power.PowerManagerService$SuspendBlockerImpl: void <init>(com.android.server.power.PowerManagerService,java.lang.String)>(r0, r1);

        r2 = $r3;

        $r4 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        return r2;
    }

    private int findWakeLockIndexLocked(android.os.IBinder)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1, $r6;
        int i0, i1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        com.android.server.power.PowerManagerService$WakeLock $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.power.PowerManagerService$WakeLock) $r4;

        $r6 = $r5.<com.android.server.power.PowerManagerService$WakeLock: android.os.IBinder mLock>;

        if $r6 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private int getDesiredScreenPowerStateLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i2 = 2 & $i1;

        if $i2 != 0 goto label2;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i4 = 1 & $i3;

        if $i4 != 0 goto label2;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 != 0 goto label3;

     label2:
        return 2;

     label3:
        return 1;
    }

    private int getScreenDimDurationLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2;
        float $f0, $f1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $f0 = (float) i0;

        $f1 = 0.2F * $f0;

        $i1 = (int) $f1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(7000, $i1);

        return $i2;
    }

    private int getScreenOffTimeoutLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i3, $i7;
        boolean $z0;
        long $l1, $l4, $l5, $l6;
        byte $b2;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 = r0.<com.android.server.power.PowerManagerService: int mScreenOffTimeoutSetting>;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()>();

        if $z0 == 0 goto label1;

        $i7 = r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i7);

     label1:
        $l1 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        $b2 = $l1 cmp 0L;

        if $b2 < 0 goto label2;

        $l5 = (long) i0;

        $l4 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        $l6 = staticinvoke <java.lang.Math: long min(long,long)>($l5, $l4);

        i0 = (int) $l6;

     label2:
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(i0, 10000);

        return $i3;
    }

    private void goToSleepFromNative(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int)>(l0, i1);

        return;
    }

    private void goToSleepInternal(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int)>(l0, i1);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean goToSleepNoUpdateLocked(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l5;
        int i1, i2, i3, i4, $i7, $i9, $i10, $i12, $i13;
        byte $b6;
        boolean $z0, $z1;
        com.android.server.power.Notifier $r1;
        java.util.ArrayList $r2, $r3;
        com.android.server.power.PowerManagerService$WakeLock $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l5 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b6 = l0 cmp $l5;

        if $b6 < 0 goto label01;

        $i7 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i7 == 0 goto label01;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label01;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        tableswitch(i1)
        {
            case 1: goto label07;
            case 2: goto label08;
            default: goto label03;
        };

     label03:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Going to sleep by user request...");

        i1 = 0;

     label04:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void sendPendingNotificationsLocked()>();

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r1.<com.android.server.power.Notifier: void onGoToSleepStarted(int)>(i1);

        r0.<com.android.server.power.PowerManagerService: boolean mSendGoToSleepFinishedNotificationWhenReady> = 1;

        r0.<com.android.server.power.PowerManagerService: long mLastSleepTime> = l0;

        $i9 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i10 = 2 | $i9;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i10;

        r0.<com.android.server.power.PowerManagerService: int mWakefulness> = 0;

        i2 = 0;

        $r2 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i3 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i4 = 0;

     label05:
        if i4 >= i3 goto label10;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r4 = (com.android.server.power.PowerManagerService$WakeLock) $r5;

        $i13 = $r4.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i12 = 65535 & $i13;

        lookupswitch($i12)
        {
            case 6: goto label09;
            case 10: goto label09;
            case 26: goto label09;
            default: goto label06;
        };

     label06:
        i4 = i4 + 1;

        goto label05;

     label07:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Going to sleep due to device administration policy...");

        goto label04;

     label08:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Going to sleep due to screen timeout...");

        goto label04;

     label09:
        i2 = i2 + 1;

        goto label06;

     label10:
        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(2724, i2);

        return 1;
    }

    private void handleBatteryStateChangedLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = 256 | $i0;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    private void handleBootCompletedLocked()
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int $i1, $i2;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted> = 1;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i2 = 16 | $i1;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, 0, 0, 1000);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    private void handleDreamFinishedLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i3;
        boolean $z0;
        long $l1, $l2;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i0 == 2 goto label1;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i3 != 3 goto label2;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isItBedTimeYetLocked()>();

        if $z0 == 0 goto label3;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int)>($l2, 2);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        return;

     label3:
        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long)>($l1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    private void handleSandman()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1, r4;
        java.lang.Throwable r2, r5, $r18, $r19;
        boolean z0, z1, z2, z3, z4, $z5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        com.android.server.dreams.DreamManagerService r3, $r6, $r7, $r16, $r17;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled> = 0;

        z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean canDreamLocked()>();

     label02:
        z1 = 0;

        if z0 == 0 goto label05;

     label03:
        i0 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

     label04:
        z1 = 0;

        if i0 != 2 goto label05;

        z1 = 1;

     label05:
        exitmonitor r1;

     label06:
        r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.dreams.DreamManagerService mDreamManager>;

        z2 = 0;

        if r3 == null goto label08;

        if z1 == 0 goto label07;

        $r16 = r0.<com.android.server.power.PowerManagerService: com.android.server.dreams.DreamManagerService mDreamManager>;

        virtualinvoke $r16.<com.android.server.dreams.DreamManagerService: void startDream()>();

     label07:
        $r17 = r0.<com.android.server.power.PowerManagerService: com.android.server.dreams.DreamManagerService mDreamManager>;

        z2 = virtualinvoke $r17.<com.android.server.dreams.DreamManagerService: boolean isDreaming()>();

     label08:
        r4 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r4;

        z3 = 0;

        if z2 == 0 goto label13;

     label09:
        z4 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean canDreamLocked()>();

     label10:
        z3 = 0;

        if z4 == 0 goto label13;

     label11:
        $i2 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i2 != 2 goto label21;

        r0.<com.android.server.power.PowerManagerService: int mWakefulness> = 3;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i9 = 2 | $i8;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i9;

        $i11 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted> = $i11;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label12:
        z3 = 1;

     label13:
        if z3 != 0 goto label15;

     label14:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleDreamFinishedLocked()>();

     label15:
        exitmonitor r4;

     label16:
        $r7 = r0.<com.android.server.power.PowerManagerService: com.android.server.dreams.DreamManagerService mDreamManager>;

        if $r7 == null goto label17;

        if z3 != 0 goto label17;

        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.dreams.DreamManagerService mDreamManager>;

        virtualinvoke $r6.<com.android.server.dreams.DreamManagerService: void stopDream()>();

     label17:
        return;

     label18:
        $r18 := @caughtexception;

        r2 = $r18;

     label19:
        exitmonitor r1;

     label20:
        throw r2;

     label21:
        i1 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

     label22:
        z3 = 0;

        if i1 != 3 goto label13;

     label23:
        $z5 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptAwakeLocked()>();

        if $z5 != 0 goto label28;

        $i4 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted>;

        $i5 = -5 + $i3;

        if $i4 >= $i5 goto label28;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopping dream because the battery appears to be draining faster than it is charging.  Battery level when dream started: ");

        $i6 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%.  ");

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Battery level now: ");

        $i7 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%.");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r15);

     label24:
        z3 = 0;

        goto label13;

     label25:
        $r19 := @caughtexception;

        r5 = $r19;

     label26:
        exitmonitor r4;

     label27:
        throw r5;

     label28:
        z3 = 1;

        goto label13;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label15 to label16 with label25;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    private void handleScreenOnBlockerReleased()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = 1024 | $i0;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void handleSettingsChangedLocked()
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @this: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateSettingsLocked()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    private void handleUserActivityTimeout()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = 4 | $i0;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r7;
        int i0, $i1, $i2;
        java.util.ArrayList $r4, $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        r2 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i0 = virtualinvoke $r4.<java.util.ArrayList: int indexOf(java.lang.Object)>(r1);

     label2:
        if i0 >= 0 goto label5;

     label3:
        exitmonitor r2;

     label4:
        return;

     label5:
        $r5 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        virtualinvoke $r5.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockReleasedLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void applyWakeLockFlagsOnReleaseLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        $i1 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i2 = 1 | $i1;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r2;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

     label8:
        exitmonitor r2;

     label9:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private boolean isBeingKeptAwakeLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        if $z1 != 0 goto label1;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i1 = 32 & $i0;

        if $i1 != 0 goto label1;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i3 = 3 & $i2;

        if $i3 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isItBedTimeYetLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptAwakeLocked()>();

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin>;

        if $i0 < 0 goto label1;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin>;

        if $i1 >= 2147483647 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean isScreenLock(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService$WakeLock r0;
        int $i0, $i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $i0 = r0.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i1 = 65535 & $i0;

        lookupswitch($i1)
        {
            case 6: goto label2;
            case 10: goto label2;
            case 26: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    private boolean isScreenOnInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean z0, $z1;
        com.android.server.power.DisplayPowerRequest $r3;
        int $i0;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 == 0 goto label8;

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $i0 = $r3.<com.android.server.power.DisplayPowerRequest: int screenState>;

        if $i0 == 0 goto label9;

     label2:
        goto label8;

     label3:
        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        z0 = 1;

        goto label3;

     label9:
        z0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static boolean isValidAutoBrightnessAdjustment(float)
    {
        float f0;
        byte $b0, $b1;

        f0 := @parameter0: float;

        $b0 = f0 cmpl -1.0F;

        if $b0 < 0 goto label1;

        $b1 = f0 cmpg 1.0F;

        if $b1 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean isValidBrightness(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 255 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isWakeLockLevelSupportedInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        com.android.server.power.DisplayPowerController $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        z0 = 1;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

        lookupswitch(i0)
        {
            case 1: goto label03;
            case 6: goto label03;
            case 10: goto label03;
            case 26: goto label03;
            case 32: goto label08;
            default: goto label01;
        };

     label01:
        exitmonitor r1;

     label02:
        return 0;

     label03:
        exitmonitor r1;

     label04:
        return 1;

     label05:
        $r4 := @caughtexception;

        r2 = $r4;

     label06:
        exitmonitor r1;

     label07:
        throw r2;

     label08:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 == 0 goto label11;

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerController mDisplayPowerController>;

        $z2 = virtualinvoke $r3.<com.android.server.power.DisplayPowerController: boolean isProximitySensorAvailable()>();

        if $z2 == 0 goto label11;

     label09:
        exitmonitor r1;

     label10:
        return z0;

     label11:
        z0 = 0;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
    }

    public static void lowLevelReboot(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.InterruptedException $r6;
        java.lang.Thread $r7;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        r0 = "";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reboot,");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.powerctl", $r5);

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(20000L);

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public static void lowLevelShutdown()
    {
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.powerctl", "shutdown");

        return;
    }

    private void napInternal(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean napNoUpdateLocked(long)>(l0);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean napNoUpdateLocked(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l1;
        byte $b2;
        int $i3, $i5, $i6;
        boolean $z0, $z1;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        $l1 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label1;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i3 != 1 goto label1;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Nap time...");

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i6 = 2 | $i5;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i6;

        r0.<com.android.server.power.PowerManagerService: int mWakefulness> = 2;

        return 1;
    }

    private static native void nativeAcquireSuspendBlocker(java.lang.String);

    private native void nativeInit();

    private static native void nativeReleaseSuspendBlocker(java.lang.String);

    private static native void nativeSetAutoSuspend(boolean);

    private static native void nativeSetInteractive(boolean);

    private static native void nativeSetPowerState(boolean, boolean);

    private boolean needDisplaySuspendBlocker()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.power.DisplayPowerRequest $r1, $r2;
        int $i0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z0 != 0 goto label2;

     label1:
        return 1;

     label2:
        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $i0 = $r1.<com.android.server.power.DisplayPowerRequest: int screenState>;

        if $i0 == 0 goto label3;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $z1 = $r2.<com.android.server.power.DisplayPowerRequest: boolean useProximitySensor>;

        if $z1 == 0 goto label1;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        if $z2 == 0 goto label1;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mSuspendWhenScreenOffDueToProximityConfig>;

        if $z3 == 0 goto label1;

     label3:
        return 0;
    }

    private void notifyWakeLockAcquiredLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        boolean $z0;
        android.os.WorkSource $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r4;
        com.android.server.power.Notifier $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label1;

        r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired> = 1;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $i2 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $r4 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $r3 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

        $i1 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerPid>;

        $r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        virtualinvoke $r5.<com.android.server.power.Notifier: void onWakeLockAcquired(int,java.lang.String,java.lang.String,int,int,android.os.WorkSource)>($i2, $r4, $r3, $i1, $i0, $r2);

     label1:
        return;
    }

    private void notifyWakeLockReleasedLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        boolean $z0, $z1;
        android.os.WorkSource $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r4;
        com.android.server.power.Notifier $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label1;

        $z1 = r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired>;

        if $z1 == 0 goto label1;

        r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired> = 0;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $i2 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $r4 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $r3 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

        $i1 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerPid>;

        $r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        virtualinvoke $r5.<com.android.server.power.Notifier: void onWakeLockReleased(int,java.lang.String,java.lang.String,int,int,android.os.WorkSource)>($i2, $r4, $r3, $i1, $i0, $r2);

     label1:
        return;
    }

    private void readConfigurationLocked()
    {
        com.android.server.power.PowerManagerService r0;
        android.content.res.Resources r1;
        android.content.Context $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891355);

        r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedConfig> = $z0;

        $z1 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891363);

        r0.<com.android.server.power.PowerManagerService: boolean mSuspendWhenScreenOffDueToProximityConfig> = $z1;

        $z2 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891400);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsSupportedConfig> = $z2;

        $z3 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891401);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledByDefaultConfig> = $z3;

        $z4 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891403);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnSleepByDefaultConfig> = $z4;

        $z5 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891402);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnDockByDefaultConfig> = $z5;

        return;
    }

    private void releaseWakeLockInternal(android.os.IBinder, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1, $r9;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r10;
        com.android.server.power.PowerManagerService$WakeLock r4;
        java.util.ArrayList $r5, $r7;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r2 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        i1 = specialinvoke r0.<com.android.server.power.PowerManagerService: int findWakeLockIndexLocked(android.os.IBinder)>(r1);

     label02:
        if i1 >= 0 goto label05;

     label03:
        exitmonitor r2;

     label04:
        return;

     label05:
        $r5 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r4 = (com.android.server.power.PowerManagerService$WakeLock) $r6;

        $r7 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        virtualinvoke $r7.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockReleasedLocked(com.android.server.power.PowerManagerService$WakeLock)>(r4);

        $r9 = r4.<com.android.server.power.PowerManagerService$WakeLock: android.os.IBinder mLock>;

        interfaceinvoke $r9.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0);

     label06:
        $i2 = i0 & 1;

        if $i2 == 0 goto label08;

     label07:
        r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity> = 1;

     label08:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void applyWakeLockFlagsOnReleaseLocked(com.android.server.power.PowerManagerService$WakeLock)>(r4);

        $i4 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i3 = 1 | $i4;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i3;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r2;

     label09:
        return;

     label10:
        $r10 := @caughtexception;

        r3 = $r10;

     label11:
        exitmonitor r2;

     label12:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void scheduleSandmanLocked()
    {
        com.android.server.power.PowerManagerService r0;
        android.os.Message r1;
        boolean $z0;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r2, $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled> = 1;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.server.power.PowerManagerService$PowerManagerHandler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r3.<com.android.server.power.PowerManagerService$PowerManagerHandler: boolean sendMessage(android.os.Message)>(r1);

     label1:
        return;
    }

    private void sendPendingNotificationsLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1;
        com.android.server.power.Notifier $r1, $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSendWakeUpFinishedNotificationWhenReady>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.power.PowerManagerService: boolean mSendWakeUpFinishedNotificationWhenReady> = 0;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r2.<com.android.server.power.Notifier: void onWakeUpFinished()>();

     label1:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSendGoToSleepFinishedNotificationWhenReady>;

        if $z1 == 0 goto label2;

        r0.<com.android.server.power.PowerManagerService: boolean mSendGoToSleepFinishedNotificationWhenReady> = 0;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r1.<com.android.server.power.Notifier: void onGoToSleepFinished()>();

     label2:
        return;
    }

    private void setAttentionLightInternal(boolean, int)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        com.android.server.LightsService$Light r3;
        byte b1;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.LightsService$Light mAttentionLight>;

        exitmonitor r1;

     label4:
        if z0 == 0 goto label9;

        b1 = 3;

     label5:
        virtualinvoke r3.<com.android.server.LightsService$Light: void setFlashing(int,int,int,int)>(i0, 2, b1, 0);

        return;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

     label9:
        b1 = 0;

        goto label5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin> = i0;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i2 = 32 | $i1;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void setScreenBrightnessOverrideFromWindowManagerInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i1 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager>;

        if $i1 == i0 goto label2;

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager> = i0;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i3 = 32 | $i2;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i3;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setStayOnSettingInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, "stay_on_while_plugged_in", i0);

        return;
    }

    private void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float)
    {
        com.android.server.power.PowerManagerService r0;
        float f0, $f1;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        byte $b0;
        int $i1, $i2;

        r0 := @this: com.android.server.power.PowerManagerService;

        f0 := @parameter0: float;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $f1 = r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label2;

        r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride> = f0;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i2 = 32 | $i1;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setTemporaryScreenBrightnessSettingOverrideInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i1 = r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride>;

        if $i1 == i0 goto label2;

        r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride> = i0;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i3 = 32 | $i2;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i3;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l1;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        byte $b2;
        int $i3, $i4;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $l1 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        $b2 = $l1 cmp l0;

        if $b2 == 0 goto label2;

        r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager> = l0;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i4 = 32 | $i3;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i4;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean shouldNapAtBedTimeLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnSleepSetting>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnDockSetting>;

        if $z1 == 0 goto label2;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDockState>;

        if $i0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean shouldUseProximitySensorLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i1 = 16 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean shouldWakeUpWhenPluggedOrUnpluggedLocked(boolean, int, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        z1 := @parameter2: boolean;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedConfig>;

        if $z2 != 0 goto label2;

     label1:
        return 0;

     label2:
        if z0 == 0 goto label3;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z5 != 0 goto label3;

        if i0 == 4 goto label1;

     label3:
        if z0 != 0 goto label4;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z4 == 0 goto label4;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        if $i3 != 4 goto label4;

        if z1 == 0 goto label1;

     label4:
        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z3 == 0 goto label5;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i1 == 2 goto label1;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i2 == 3 goto label1;

     label5:
        return 1;
    }

    private void shutdownOrRebootInternal(boolean, boolean, java.lang.String, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, z2, $z3;
        java.lang.String r1;
        com.android.server.power.PowerManagerService$2 r2, $r8;
        android.os.Message r3;
        java.lang.Throwable r4, $r12;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r6, $r9, $r10;
        java.lang.IllegalStateException $r7;
        java.lang.InterruptedException $r11;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        z2 := @parameter3: boolean;

        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        if $r6 == null goto label1;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z3 != 0 goto label2;

     label1:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Too early to call shutdown() or reboot()");

        throw $r7;

     label2:
        $r8 = new com.android.server.power.PowerManagerService$2;

        specialinvoke $r8.<com.android.server.power.PowerManagerService$2: void <init>(com.android.server.power.PowerManagerService,boolean,boolean,java.lang.String)>(r0, z0, z1, r1);

        r2 = $r8;

        $r9 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        r3 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>($r9, r2);

        virtualinvoke r3.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r10 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r10.<com.android.server.power.PowerManagerService$PowerManagerHandler: boolean sendMessage(android.os.Message)>(r3);

        if z2 == 0 goto label9;

        entermonitor r2;

     label3:
        virtualinvoke r2.<java.lang.Object: void wait()>();

     label4:
        goto label3;

     label5:
        $r11 := @caughtexception;

        goto label3;

     label6:
        $r12 := @caughtexception;

        r4 = $r12;

     label7:
        exitmonitor r2;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void startWatchingForBootAnimationFinished()
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r1.<com.android.server.power.PowerManagerService$PowerManagerHandler: boolean sendEmptyMessage(int)>(4);

        return;
    }

    private void updateDisplayPowerStateLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        float f0, f1, $f2, $f3, $f4;
        com.android.server.power.DisplayPowerRequest $r1, $r2, $r3, $r4, $r5, $r6, $r9, $r10, $r11;
        com.android.server.power.PowerManagerService$ScreenOnBlockerImpl $r7;
        com.android.server.power.DisplayPowerController $r8;
        long $l14;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $i4 = i0 & 1087;

        if $i4 == 0 goto label08;

        i1 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getDesiredScreenPowerStateLocked()>();

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $i5 = $r1.<com.android.server.power.DisplayPowerRequest: int screenState>;

        if i1 == $i5 goto label04;

        if i1 != 0 goto label01;

        $r11 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $i13 = $r11.<com.android.server.power.DisplayPowerRequest: int screenState>;

        if $i13 == 0 goto label01;

        $l14 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.power.PowerManagerService: long mLastScreenOffEventElapsedRealTime> = $l14;

     label01:
        $r10 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $r10.<com.android.server.power.DisplayPowerRequest: int screenState> = i1;

        if i1 == 0 goto label09;

        z2 = 1;

     label02:
        if i1 != 2 goto label10;

        z3 = 1;

     label03:
        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetPowerState(boolean,boolean)>(z2, z3);

     label04:
        i2 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingDefault>;

        $i6 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessModeSetting>;

        if $i6 != 1 goto label11;

        z0 = 1;

     label05:
        $i7 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager>;

        $z4 = staticinvoke <com.android.server.power.PowerManagerService: boolean isValidBrightness(int)>($i7);

        if $z4 == 0 goto label12;

        i2 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager>;

        z0 = 0;

     label06:
        f0 = 0.0F;

        if z0 == 0 goto label07;

        i2 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingDefault>;

        $f4 = r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride>;

        $z11 = staticinvoke <com.android.server.power.PowerManagerService: boolean isValidAutoBrightnessAdjustment(float)>($f4);

        if $z11 == 0 goto label14;

        f0 = r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride>;

     label07:
        $i11 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMaximum>;

        $i10 = staticinvoke <java.lang.Math: int min(int,int)>(i2, $i11);

        $i12 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMinimum>;

        i3 = staticinvoke <java.lang.Math: int max(int,int)>($i10, $i12);

        $f2 = staticinvoke <java.lang.Math: float min(float,float)>(f0, 1.0F);

        f1 = staticinvoke <java.lang.Math: float max(float,float)>($f2, -1.0F);

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $r3.<com.android.server.power.DisplayPowerRequest: int screenBrightness> = i3;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $r2.<com.android.server.power.DisplayPowerRequest: float screenAutoBrightnessAdjustment> = f1;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $r5.<com.android.server.power.DisplayPowerRequest: boolean useAutoBrightness> = z0;

        $r4 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $z8 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean shouldUseProximitySensorLocked()>();

        $r4.<com.android.server.power.DisplayPowerRequest: boolean useProximitySensor> = $z8;

        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $r7 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$ScreenOnBlockerImpl mScreenOnBlocker>;

        $z7 = virtualinvoke $r7.<com.android.server.power.PowerManagerService$ScreenOnBlockerImpl: boolean isHeld()>();

        $r6.<com.android.server.power.DisplayPowerRequest: boolean blockScreenOn> = $z7;

        $r8 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerController mDisplayPowerController>;

        $r9 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $z10 = r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity>;

        $z9 = virtualinvoke $r8.<com.android.server.power.DisplayPowerController: boolean requestPowerState(com.android.server.power.DisplayPowerRequest,boolean)>($r9, $z10);

        r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady> = $z9;

        r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity> = 0;

     label08:
        return;

     label09:
        z2 = 0;

        goto label02;

     label10:
        z3 = 0;

        goto label03;

     label11:
        z0 = 0;

        goto label05;

     label12:
        $i8 = r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride>;

        $z5 = staticinvoke <com.android.server.power.PowerManagerService: boolean isValidBrightness(int)>($i8);

        if $z5 == 0 goto label13;

        i2 = r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride>;

        goto label06;

     label13:
        $i9 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting>;

        $z6 = staticinvoke <com.android.server.power.PowerManagerService: boolean isValidBrightness(int)>($i9);

        if $z6 == 0 goto label06;

        i2 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting>;

        goto label06;

     label14:
        $f3 = r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting>;

        z1 = staticinvoke <com.android.server.power.PowerManagerService: boolean isValidAutoBrightnessAdjustment(float)>($f3);

        f0 = 0.0F;

        if z1 == 0 goto label07;

        f0 = r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting>;

        goto label07;
    }

    private void updateDreamLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $i1 = i0 & 1015;

        if $i1 == 0 goto label1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()>();

     label1:
        return;
    }

    private void updateIsPoweredLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        long l2;
        com.android.server.BatteryService $r1, $r2, $r3;
        com.android.server.power.WirelessChargerDetector $r4;
        com.android.server.power.Notifier $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $i3 = i0 & 256;

        if $i3 == 0 goto label3;

        z0 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        i1 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.BatteryService mBatteryService>;

        $z2 = virtualinvoke $r1.<com.android.server.BatteryService: boolean isPowered(int)>(7);

        r0.<com.android.server.power.PowerManagerService: boolean mIsPowered> = $z2;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.BatteryService mBatteryService>;

        $i4 = virtualinvoke $r2.<com.android.server.BatteryService: int getPlugType()>();

        r0.<com.android.server.power.PowerManagerService: int mPlugType> = $i4;

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.BatteryService mBatteryService>;

        $i5 = virtualinvoke $r3.<com.android.server.BatteryService: int getBatteryLevel()>();

        r0.<com.android.server.power.PowerManagerService: int mBatteryLevel> = $i5;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if z0 != $z3 goto label1;

        $i10 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        if i1 == $i10 goto label3;

     label1:
        $i6 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i8 = 64 | $i6;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i8;

        $r4 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.WirelessChargerDetector mWirelessChargerDetector>;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        $i9 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        $i7 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        z1 = virtualinvoke $r4.<com.android.server.power.WirelessChargerDetector: boolean update(boolean,int,int)>($z4, $i9, $i7);

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $z5 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean shouldWakeUpWhenPluggedOrUnpluggedLocked(boolean,int,boolean)>(z0, i1, z1);

        if $z5 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long)>(l2);

     label2:
        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l2, 0, 0, 1000);

        if z1 == 0 goto label3;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r5.<com.android.server.power.Notifier: void onWirelessChargingStarted()>();

     label3:
        return;
    }

    private void updatePowerStateLocked()
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label1;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        if $i3 != 0 goto label2;

     label1:
        return;

     label2:
        $r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z1 != 0 goto label3;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("PowerManagerService", "Power manager lock was not held when calling updatePowerStateLocked");

     label3:
        $i4 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateIsPoweredLocked(int)>($i4);

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateStayOnLocked(int)>($i5);

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        i1 = 0;

     label4:
        i2 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        i1 = i1 | i2;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = 0;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockSummaryLocked(int)>(i2);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateUserActivitySummaryLocked(long,int)>(l0, i2);

        $z2 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean updateWakefulnessLocked(int)>(i2);

        if $z2 != 0 goto label4;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateDreamLocked(int)>(i1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateDisplayPowerStateLocked(int)>(i1);

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z3 == 0 goto label5;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void sendPendingNotificationsLocked()>();

     label5:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateSuspendBlockerLocked()>();

        return;
    }

    private void updateSettingsLocked()
    {
        com.android.server.power.PowerManagerService r0;
        android.content.ContentResolver r1;
        byte b0, b1, b2, $b12;
        boolean z0, z1, z2, $z3, $z4, $z5;
        int i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15;
        float f0, $f1, $f2;
        android.content.Context $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledByDefaultConfig>;

        if $z3 == 0 goto label09;

        b0 = 1;

     label01:
        $i4 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screensaver_enabled", b0, -2);

        if $i4 == 0 goto label10;

        z0 = 1;

     label02:
        r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledSetting> = z0;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnSleepByDefaultConfig>;

        if $z4 == 0 goto label11;

        b1 = 1;

     label03:
        $i5 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screensaver_activate_on_sleep", b1, -2);

        if $i5 == 0 goto label12;

        z1 = 1;

     label04:
        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnSleepSetting> = z1;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnDockByDefaultConfig>;

        if $z5 == 0 goto label13;

        b2 = 1;

     label05:
        $i6 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screensaver_activate_on_dock", b2, -2);

        if $i6 == 0 goto label14;

        z2 = 1;

     label06:
        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnDockSetting> = z2;

        $i8 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screen_off_timeout", 15000, -2);

        r0.<com.android.server.power.PowerManagerService: int mScreenOffTimeoutSetting> = $i8;

        $i7 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "stay_on_while_plugged_in", 1);

        r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting> = $i7;

        i3 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting>;

        $i10 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingDefault>;

        $i9 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screen_brightness", $i10, -2);

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting> = $i9;

        $i11 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting>;

        if i3 == $i11 goto label07;

        r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride> = -1;

     label07:
        f0 = r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting>;

        $f1 = staticinvoke <android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>(r1, "screen_auto_brightness_adj", 0.0F, -2);

        r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting> = $f1;

        $f2 = r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting>;

        $b12 = f0 cmpl $f2;

        if $b12 == 0 goto label08;

        r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride> = #NaNF;

     label08:
        $i14 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screen_brightness_mode", 0, -2);

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessModeSetting> = $i14;

        $i13 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i15 = 32 | $i13;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i15;

        return;

     label09:
        b0 = 0;

        goto label01;

     label10:
        z0 = 0;

        goto label02;

     label11:
        b1 = 0;

        goto label03;

     label12:
        z1 = 0;

        goto label04;

     label13:
        b2 = 0;

        goto label05;

     label14:
        z2 = 0;

        goto label06;
    }

    private void updateStayOnLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0, $z1, $z2, $z3;
        com.android.server.BatteryService $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $i1 = i0 & 288;

        if $i1 == 0 goto label2;

        z0 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        if $i2 == 0 goto label3;

        $z2 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()>();

        if $z2 != 0 goto label3;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.BatteryService mBatteryService>;

        $i5 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        $z3 = virtualinvoke $r1.<com.android.server.BatteryService: boolean isPowered(int)>($i5);

        r0.<com.android.server.power.PowerManagerService: boolean mStayOn> = $z3;

     label1:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        if $z1 == z0 goto label2;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i4 = 128 | $i3;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i4;

     label2:
        return;

     label3:
        r0.<com.android.server.power.PowerManagerService: boolean mStayOn> = 0;

        goto label1;
    }

    private void updateSuspendBlockerLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int $i0, $i1;
        com.android.server.power.SuspendBlocker $r1, $r2, $r3, $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i1 = 1 & $i0;

        if $i1 == 0 goto label6;

        z0 = 1;

     label1:
        z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean needDisplaySuspendBlocker()>();

        if z0 == 0 goto label2;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker>;

        if $z5 != 0 goto label2;

        $r4 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker>;

        interfaceinvoke $r4.<com.android.server.power.SuspendBlocker: void acquire()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker> = 1;

     label2:
        if z1 == 0 goto label3;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker>;

        if $z4 != 0 goto label3;

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r3.<com.android.server.power.SuspendBlocker: void acquire()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker> = 1;

     label3:
        if z0 != 0 goto label4;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker>;

        if $z3 == 0 goto label4;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker>;

        interfaceinvoke $r2.<com.android.server.power.SuspendBlocker: void release()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker> = 0;

     label4:
        if z1 != 0 goto label5;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker>;

        if $z2 == 0 goto label5;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r1.<com.android.server.power.SuspendBlocker: void release()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker> = 0;

     label5:
        return;

     label6:
        z0 = 0;

        goto label1;
    }

    private void updateUserActivitySummaryLocked(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l3, $l8, $l10, $l13, $l14, $l15, $l18, $l20, $l21, $l24, $l25, $l26, $l29;
        int i1, i4, i5, $i6, $i7, $i11, $i12, $i19, $i22, $i27, $i28, $i31, $i32;
        byte b2, $b9, $b16, $b17, $b23, $b30;
        android.os.Message r1;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r2, $r3, $r4;
        com.android.server.power.DisplayPowerRequest $r5, $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        b2 = 2;

        $i6 = i1 & 38;

        if $i6 == 0 goto label4;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r2.<com.android.server.power.PowerManagerService$PowerManagerHandler: void removeMessages(int)>(1);

        l3 = 0L;

        $i7 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i7 == 0 goto label6;

        i4 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getScreenOffTimeoutLocked()>();

        i5 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getScreenDimDurationLocked(int)>(i4);

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 0;

        $l10 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $l8 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b9 = $l10 cmp $l8;

        if $b9 < 0 goto label1;

        $l21 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $l20 = (long) i4;

        $l26 = $l21 + $l20;

        $l25 = (long) i5;

        l3 = $l26 - $l25;

        $b23 = l0 cmp l3;

        if $b23 >= 0 goto label5;

        $i31 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i32 = 1 | $i31;

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = $i32;

     label1:
        $i12 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        if $i12 != 0 goto label3;

        $l13 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        $l14 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b16 = $l13 cmp $l14;

        if $b16 < 0 goto label3;

        $l18 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        $l15 = (long) i4;

        l3 = $l18 + $l15;

        $b17 = l0 cmp l3;

        if $b17 >= 0 goto label3;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $i19 = $r5.<com.android.server.power.DisplayPowerRequest: int screenState>;

        if $i19 == 0 goto label3;

        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $i22 = $r6.<com.android.server.power.DisplayPowerRequest: int screenState>;

        if $i22 != 2 goto label2;

        b2 = 1;

     label2:
        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = b2;

     label3:
        $i11 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        if $i11 == 0 goto label4;

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        r1 = virtualinvoke $r3.<com.android.server.power.PowerManagerService$PowerManagerHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r4 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r4.<com.android.server.power.PowerManagerService$PowerManagerHandler: boolean sendMessageAtTime(android.os.Message,long)>(r1, l3);

     label4:
        return;

     label5:
        $l29 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $l24 = (long) i4;

        l3 = $l29 + $l24;

        $b30 = l0 cmp l3;

        if $b30 >= 0 goto label1;

        $i27 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i28 = 2 | $i27;

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = $i28;

        goto label1;

     label6:
        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 0;

        return;
    }

    private void updateWakeLockSummaryLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        java.util.ArrayList $r1, $r2;
        java.lang.Object $r3;
        com.android.server.power.PowerManagerService$WakeLock $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $i3 = i0 & 3;

        if $i3 == 0 goto label8;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = 0;

        $r1 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label8;

        $r2 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r4 = (com.android.server.power.PowerManagerService$WakeLock) $r3;

        $i4 = $r4.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i5 = 65535 & $i4;

        lookupswitch($i5)
        {
            case 1: goto label3;
            case 6: goto label6;
            case 10: goto label5;
            case 26: goto label4;
            case 32: goto label7;
            default: goto label2;
        };

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i25 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i26 = 1 | $i25;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i26;

        goto label2;

     label4:
        $i10 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i10 == 0 goto label2;

        $i9 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i12 = 11 | $i9;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i12;

        $i11 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i11 != 1 goto label2;

        $i14 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i13 = 32 | $i14;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i13;

        goto label2;

     label5:
        $i16 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i16 == 0 goto label2;

        $i15 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i18 = 3 | $i15;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i18;

        $i17 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i17 != 1 goto label2;

        $i20 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i19 = 32 | $i20;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i19;

        goto label2;

     label6:
        $i22 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i22 == 0 goto label2;

        $i21 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i24 = 5 | $i21;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i24;

        $i23 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i23 != 1 goto label2;

        $i27 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i28 = 32 | $i27;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i28;

        goto label2;

     label7:
        $i6 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i6 == 0 goto label2;

        $i7 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i8 = 16 | $i7;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i8;

        goto label2;

     label8:
        return;
    }

    private void updateWakeLockWorkSourceInternal(android.os.IBinder, android.os.WorkSource)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        android.os.WorkSource r2;
        java.lang.Object r3, $r7;
        java.lang.Throwable r4, $r9;
        int i0;
        com.android.server.power.PowerManagerService$WakeLock r5;
        java.util.ArrayList $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.WorkSource;

        r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        i0 = specialinvoke r0.<com.android.server.power.PowerManagerService: int findWakeLockIndexLocked(android.os.IBinder)>(r1);

     label2:
        if i0 >= 0 goto label7;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wake lock not active");

        throw $r8;

     label4:
        $r9 := @caughtexception;

        r4 = $r9;

     label5:
        exitmonitor r3;

     label6:
        throw r4;

     label7:
        $r6 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.power.PowerManagerService$WakeLock) $r7;

        $z0 = virtualinvoke r5.<com.android.server.power.PowerManagerService$WakeLock: boolean hasSameWorkSource(android.os.WorkSource)>(r2);

        if $z0 != 0 goto label8;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockReleasedLocked(com.android.server.power.PowerManagerService$WakeLock)>(r5);

        virtualinvoke r5.<com.android.server.power.PowerManagerService$WakeLock: void updateWorkSource(android.os.WorkSource)>(r2);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockAcquiredLocked(com.android.server.power.PowerManagerService$WakeLock)>(r5);

     label8:
        exitmonitor r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
        catch java.lang.Throwable from label8 to label9 with label4;
    }

    private boolean updateWakefulnessLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, i2;
        boolean z0, z1, $z2, $z3;
        long l3;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        i1 = i0 & 2711;

        z0 = 0;

        if i1 == 0 goto label1;

        i2 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        z0 = 0;

        if i2 != 1 goto label1;

        z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isItBedTimeYetLocked()>();

        z0 = 0;

        if z1 == 0 goto label1;

        l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $z2 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean shouldNapAtBedTimeLocked()>();

        if $z2 == 0 goto label2;

        z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean napNoUpdateLocked(long)>(l3);

     label1:
        return z0;

     label2:
        $z3 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int)>(l3, 2);

        return $z3;
    }

    private void userActivityFromNative(long, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)>(l0, i1, i2, 1000);

        return;
    }

    private void userActivityInternal(long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, i1, i2, i3);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean userActivityNoUpdateLocked(long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l4, $l6, $l10, $l13, $l15;
        int i1, i2, i3, $i8, $i9, $i11, $i14, $i17, $i19;
        byte $b5, $b7, $b12, $b16, $b18;
        boolean $z0, $z1;
        com.android.server.power.Notifier $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l4 = r0.<com.android.server.power.PowerManagerService: long mLastSleepTime>;

        $b5 = l0 cmp $l4;

        if $b5 < 0 goto label1;

        $l6 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b7 = l0 cmp $l6;

        if $b7 < 0 goto label1;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i8 == 0 goto label1;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r1.<com.android.server.power.Notifier: void onUserActivity(int,int)>(i1, i3);

        $i9 = i2 & 1;

        if $i9 == 0 goto label3;

        $l13 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        $b16 = l0 cmp $l13;

        if $b16 <= 0 goto label4;

        $l15 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $b18 = l0 cmp $l15;

        if $b18 <= 0 goto label4;

        r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights> = l0;

        $i17 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i19 = 4 | $i17;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i19;

        return 1;

     label3:
        $l10 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $b12 = l0 cmp $l10;

        if $b12 <= 0 goto label4;

        r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime> = l0;

        $i11 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i14 = 4 | $i11;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i14;

        return 1;

     label4:
        return 0;
    }

    private void wakeUpFromNative(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void wakeUpInternal(long)>(l0);

        return;
    }

    private void wakeUpInternal(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long)>(l0);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean wakeUpNoUpdateLocked(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l1;
        byte $b2;
        int $i3, $i4, $i5, $i6;
        boolean $z0, $z1;
        com.android.server.power.Notifier $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        $l1 = r0.<com.android.server.power.PowerManagerService: long mLastSleepTime>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label1;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i3 == 1 goto label1;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i4 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        tableswitch($i4)
        {
            case 0: goto label4;
            case 1: goto label3;
            case 2: goto label6;
            case 3: goto label5;
            default: goto label3;
        };

     label3:
        r0.<com.android.server.power.PowerManagerService: long mLastWakeTime> = l0;

        r0.<com.android.server.power.PowerManagerService: int mWakefulness> = 1;

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i6 = 2 | $i5;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i6;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, 0, 0, 1000);

        return 1;

     label4:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Waking up from sleep...");

        specialinvoke r0.<com.android.server.power.PowerManagerService: void sendPendingNotificationsLocked()>();

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r1.<com.android.server.power.Notifier: void onWakeUpStarted()>();

        r0.<com.android.server.power.PowerManagerService: boolean mSendWakeUpFinishedNotificationWhenReady> = 1;

        goto label3;

     label5:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Waking up from dream...");

        goto label3;

     label6:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Waking up from nap...");

        goto label3;
    }

    private static java.lang.String wakefulnessToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label5;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label2:
        return "Asleep";

     label3:
        return "Awake";

     label4:
        return "Dreaming";

     label5:
        return "Napping";
    }

    public void acquireWakeLock(android.os.IBinder, int, java.lang.String, java.lang.String, android.os.WorkSource)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        int i0, i1, i2, $i4;
        java.lang.String r2, r3;
        android.os.WorkSource r4, r5;
        long l3;
        java.lang.Throwable r6, $r11;
        android.content.Context $r7, $r8;
        java.lang.IllegalArgumentException $r9, $r10;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.os.WorkSource;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("lock must not be null");

        throw $r9;

     label1:
        if r3 != null goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("packageName must not be null");

        throw $r10;

     label2:
        staticinvoke <android.os.PowerManager: void validateWakeLockParameters(int,java.lang.String)>(i0, r2);

        $r7 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.WAKE_LOCK", null);

        if r4 == null goto label6;

        $i4 = virtualinvoke r4.<android.os.WorkSource: int size()>();

        if $i4 == 0 goto label6;

        $r8 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r8.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_DEVICE_STATS", null);

     label3:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r5 = r4;

     label4:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,int,int)>(r1, i0, r2, r3, r5, i1, i2);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return;

     label6:
        r4 = null;

        goto label3;

     label7:
        $r11 := @caughtexception;

        r6 = $r11;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r6;

        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public void acquireWakeLockWithUid(android.os.IBinder, int, java.lang.String, java.lang.String, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        int i0, i1;
        java.lang.String r2, r3;
        android.os.WorkSource $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        $r4 = new android.os.WorkSource;

        specialinvoke $r4.<android.os.WorkSource: void <init>(int)>(i1);

        virtualinvoke r0.<com.android.server.power.PowerManagerService: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource)>(r1, i0, r2, r3, $r4);

        return;
    }

    public void crash(java.lang.String)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.String r1;
        long l0;
        java.lang.Throwable r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.REBOOT", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void crashInternal(java.lang.String)>(r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.power.PowerManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.Object r4, $r230, $r253;
        java.lang.Throwable r5, $r242;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        java.util.Iterator r6, r7;
        com.android.server.power.DisplayPowerController r8;
        com.android.server.power.WirelessChargerDetector r9;
        com.android.server.power.SuspendBlocker r10;
        com.android.server.power.PowerManagerService$WakeLock r11;
        android.content.Context $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r19, $r20, $r22, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r38, $r39, $r41, $r42, $r44, $r45, $r47, $r49, $r50, $r52, $r53, $r54, $r55, $r56, $r58, $r60, $r62, $r63, $r65, $r66, $r67, $r68, $r69, $r71, $r73, $r74, $r75, $r77, $r78, $r79, $r82, $r83, $r84, $r85, $r86, $r87, $r90, $r91, $r93, $r94, $r95, $r98, $r99, $r101, $r103, $r105, $r106, $r107, $r108, $r110, $r111, $r112, $r113, $r114, $r116, $r118, $r119, $r120, $r123, $r124, $r125, $r127, $r128, $r129, $r130, $r132, $r133, $r135, $r136, $r137, $r138, $r139, $r140, $r142, $r144, $r145, $r146, $r147, $r149, $r151, $r152, $r153, $r154, $r155, $r156, $r157, $r158, $r160, $r161, $r162, $r163, $r164, $r165, $r167, $r168, $r170, $r172, $r173, $r175, $r176, $r178, $r179, $r180, $r182, $r183, $r184, $r186, $r187, $r188, $r190, $r191, $r192, $r193, $r194, $r195, $r197, $r199, $r200, $r201, $r202, $r203, $r205, $r206, $r208, $r212, $r213, $r216, $r218, $r219, $r220, $r221, $r222, $r223, $r224, $r227, $r228, $r229, $r232, $r233, $r235, $r236, $r237, $r238, $r239, $r241, $r243, $r244, $r246, $r248, $r249, $r251, $r254, $r255, $r256;
        java.lang.String $r16, $r18, $r21, $r23, $r28, $r29, $r33, $r40, $r43, $r46, $r48, $r51, $r57, $r59, $r61, $r64, $r70, $r72, $r76, $r80, $r81, $r88, $r89, $r92, $r96, $r97, $r100, $r102, $r104, $r109, $r115, $r117, $r121, $r122, $r126, $r131, $r134, $r141, $r143, $r148, $r150, $r159, $r166, $r169, $r171, $r174, $r177, $r181, $r185, $r189, $r196, $r198, $r204, $r210, $r215, $r217, $r225, $r226, $r231, $r234, $r240, $r247, $r252;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        long $l11, $l12, $l13, $l14, $l21;
        float $f0, $f1;
        java.util.ArrayList $r207, $r209, $r211, $r214;
        com.android.server.power.PowerManagerService$ScreenOnBlockerImpl $r245;
        com.android.server.power.PowerManagerService$DisplayBlankerImpl $r250;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r12 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r12.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i2 == 0 goto label02;

        $r237 = new java.lang.StringBuilder;

        specialinvoke $r237.<java.lang.StringBuilder: void <init>()>();

        $r236 = virtualinvoke $r237.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump PowerManager from from pid=");

        $i28 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r238 = virtualinvoke $r236.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r239 = virtualinvoke $r238.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i29 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r241 = virtualinvoke $r239.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r240 = virtualinvoke $r241.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r240);

     label01:
        return;

     label02:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("POWER MANAGER (dumpsys power)\n");

        r4 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label03:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Power Manager State:");

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDirty=0x");

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakefulness=");

        $i4 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        $r21 = staticinvoke <com.android.server.power.PowerManagerService: java.lang.String wakefulnessToString(int)>($i4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mIsPowered=");

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPlugType=");

        $i5 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBatteryLevel=");

        $i6 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r33);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBatteryLevelWhenDreamStarted=");

        $i7 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted>;

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r40);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDockState=");

        $i8 = r0.<com.android.server.power.PowerManagerService: int mDockState>;

        $r44 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r43);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mStayOn=");

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        $r47 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r46);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximityPositive=");

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r48);

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBootCompleted=");

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r51 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r51);

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSystemReady=");

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        $r60 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r61);

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakeLockSummary=0x");

        $i9 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $r57 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i9);

        $r58 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r59);

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUserActivitySummary=0x");

        $i10 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $r70 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i10);

        $r65 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r64);

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mRequestWaitForNegativeProximity=");

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity>;

        $r74 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r76);

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSandmanScheduled=");

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled>;

        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r72);

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastWakeTime=");

        $l11 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $r81 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l11);

        $r79 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r80);

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastSleepTime=");

        $l12 = r0.<com.android.server.power.PowerManagerService: long mLastSleepTime>;

        $r89 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l12);

        $r87 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r89);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r88);

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSendWakeUpFinishedNotificationWhenReady=");

        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mSendWakeUpFinishedNotificationWhenReady>;

        $r84 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r96 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r96);

        $r95 = new java.lang.StringBuilder;

        specialinvoke $r95.<java.lang.StringBuilder: void <init>()>();

        $r94 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSendGoToSleepFinishedNotificationWhenReady=");

        $z8 = r0.<com.android.server.power.PowerManagerService: boolean mSendGoToSleepFinishedNotificationWhenReady>;

        $r93 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r92 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r92);

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastUserActivityTime=");

        $l14 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $r102 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l14);

        $r101 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r102);

        $r100 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r100);

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastUserActivityTimeNoChangeLights=");

        $l13 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        $r97 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l13);

        $r110 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r97);

        $r109 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r109);

        $r112 = new java.lang.StringBuilder;

        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();

        $r111 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayReady=");

        $z11 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        $r113 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        $r115 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r115);

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r103 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHoldingWakeLockSuspendBlocker=");

        $z9 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker>;

        $r105 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r104 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r104);

        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        $r106 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHoldingDisplaySuspendBlocker=");

        $z10 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker>;

        $r108 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r122 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r122);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Settings and Configuration:");

        $r123 = new java.lang.StringBuilder;

        specialinvoke $r123.<java.lang.StringBuilder: void <init>()>();

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakeUpWhenPluggedOrUnpluggedConfig=");

        $z14 = r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedConfig>;

        $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z14);

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r126);

        $r127 = new java.lang.StringBuilder;

        specialinvoke $r127.<java.lang.StringBuilder: void <init>()>();

        $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSuspendWhenScreenOffDueToProximityConfig=");

        $z12 = r0.<com.android.server.power.PowerManagerService: boolean mSuspendWhenScreenOffDueToProximityConfig>;

        $r116 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z12);

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r117);

        $r118 = new java.lang.StringBuilder;

        specialinvoke $r118.<java.lang.StringBuilder: void <init>()>();

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsSupportedConfig=");

        $z13 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsSupportedConfig>;

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r121);

        $r138 = new java.lang.StringBuilder;

        specialinvoke $r138.<java.lang.StringBuilder: void <init>()>();

        $r137 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsEnabledByDefaultConfig=");

        $z16 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledByDefaultConfig>;

        $r136 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z16);

        $r141 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r141);

        $r140 = new java.lang.StringBuilder;

        specialinvoke $r140.<java.lang.StringBuilder: void <init>()>();

        $r139 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivatedOnSleepByDefaultConfig=");

        $z17 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnSleepByDefaultConfig>;

        $r132 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z17);

        $r131 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r131);

        $r130 = new java.lang.StringBuilder;

        specialinvoke $r130.<java.lang.StringBuilder: void <init>()>();

        $r129 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivatedOnDockByDefaultConfig=");

        $z15 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnDockByDefaultConfig>;

        $r135 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z15);

        $r134 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r134);

        $r133 = new java.lang.StringBuilder;

        specialinvoke $r133.<java.lang.StringBuilder: void <init>()>();

        $r151 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsEnabledSetting=");

        $z19 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledSetting>;

        $r149 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z19);

        $r150 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r150);

        $r153 = new java.lang.StringBuilder;

        specialinvoke $r153.<java.lang.StringBuilder: void <init>()>();

        $r154 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivateOnSleepSetting=");

        $z20 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnSleepSetting>;

        $r152 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z20);

        $r143 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r143);

        $r144 = new java.lang.StringBuilder;

        specialinvoke $r144.<java.lang.StringBuilder: void <init>()>();

        $r142 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivateOnDockSetting=");

        $z18 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnDockSetting>;

        $r147 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z18);

        $r148 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r148);

        $r145 = new java.lang.StringBuilder;

        specialinvoke $r145.<java.lang.StringBuilder: void <init>()>();

        $r146 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenOffTimeoutSetting=");

        $i17 = r0.<com.android.server.power.PowerManagerService: int mScreenOffTimeoutSetting>;

        $r164 = virtualinvoke $r146.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r166 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r166);

        $r165 = new java.lang.StringBuilder;

        specialinvoke $r165.<java.lang.StringBuilder: void <init>()>();

        $r161 = virtualinvoke $r165.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMaximumScreenOffTimeoutFromDeviceAdmin=");

        $i16 = r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin>;

        $r163 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r162 = virtualinvoke $r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (enforced=");

        $z21 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()>();

        $r158 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z21);

        $r160 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r159 = virtualinvoke $r160.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r159);

        $r156 = new java.lang.StringBuilder;

        specialinvoke $r156.<java.lang.StringBuilder: void <init>()>();

        $r155 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mStayOnWhilePluggedInSetting=");

        $i15 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        $r157 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r177 = virtualinvoke $r157.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r177);

        $r178 = new java.lang.StringBuilder;

        specialinvoke $r178.<java.lang.StringBuilder: void <init>()>();

        $r179 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessSetting=");

        $i19 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting>;

        $r173 = virtualinvoke $r179.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r174 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r174);

        $r175 = new java.lang.StringBuilder;

        specialinvoke $r175.<java.lang.StringBuilder: void <init>()>();

        $r176 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenAutoBrightnessAdjustmentSetting=");

        $f0 = r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting>;

        $r170 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r171 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r171);

        $r172 = new java.lang.StringBuilder;

        specialinvoke $r172.<java.lang.StringBuilder: void <init>()>();

        $r167 = virtualinvoke $r172.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessModeSetting=");

        $i18 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessModeSetting>;

        $r168 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r169 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r169);

        $r192 = new java.lang.StringBuilder;

        specialinvoke $r192.<java.lang.StringBuilder: void <init>()>();

        $r191 = virtualinvoke $r192.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessOverrideFromWindowManager=");

        $i22 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager>;

        $r190 = virtualinvoke $r191.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r189 = virtualinvoke $r190.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r189);

        $r188 = new java.lang.StringBuilder;

        specialinvoke $r188.<java.lang.StringBuilder: void <init>()>();

        $r187 = virtualinvoke $r188.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUserActivityTimeoutOverrideFromWindowManager=");

        $l21 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        $r186 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l21);

        $r185 = virtualinvoke $r186.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r185);

        $r184 = new java.lang.StringBuilder;

        specialinvoke $r184.<java.lang.StringBuilder: void <init>()>();

        $r183 = virtualinvoke $r184.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mTemporaryScreenBrightnessSettingOverride=");

        $i20 = r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride>;

        $r182 = virtualinvoke $r183.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r181 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r181);

        $r180 = new java.lang.StringBuilder;

        specialinvoke $r180.<java.lang.StringBuilder: void <init>()>();

        $r205 = virtualinvoke $r180.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mTemporaryScreenAutoBrightnessAdjustmentSettingOverride=");

        $f1 = r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride>;

        $r203 = virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r204 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r204);

        $r201 = new java.lang.StringBuilder;

        specialinvoke $r201.<java.lang.StringBuilder: void <init>()>();

        $r202 = virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessSettingMinimum=");

        $i24 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMinimum>;

        $r200 = virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r198 = virtualinvoke $r200.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r198);

        $r199 = new java.lang.StringBuilder;

        specialinvoke $r199.<java.lang.StringBuilder: void <init>()>();

        $r197 = virtualinvoke $r199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessSettingMaximum=");

        $i23 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMaximum>;

        $r195 = virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r196 = virtualinvoke $r195.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r196);

        $r193 = new java.lang.StringBuilder;

        specialinvoke $r193.<java.lang.StringBuilder: void <init>()>();

        $r194 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessSettingDefault=");

        $i27 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingDefault>;

        $r218 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        $r217 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r217);

        i0 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getScreenOffTimeoutLocked()>();

        i1 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getScreenDimDurationLocked(int)>(i0);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r221 = new java.lang.StringBuilder;

        specialinvoke $r221.<java.lang.StringBuilder: void <init>()>();

        $r219 = virtualinvoke $r221.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen off timeout: ");

        $r220 = virtualinvoke $r219.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r224 = virtualinvoke $r220.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r225 = virtualinvoke $r224.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r225);

        $r222 = new java.lang.StringBuilder;

        specialinvoke $r222.<java.lang.StringBuilder: void <init>()>();

        $r223 = virtualinvoke $r222.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen dim duration: ");

        $r228 = virtualinvoke $r223.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r229 = virtualinvoke $r228.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r226 = virtualinvoke $r229.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r226);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r227 = new java.lang.StringBuilder;

        specialinvoke $r227.<java.lang.StringBuilder: void <init>()>();

        $r208 = virtualinvoke $r227.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wake Locks: size=");

        $r207 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $i25 = virtualinvoke $r207.<java.util.ArrayList: int size()>();

        $r206 = virtualinvoke $r208.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i25);

        $r210 = virtualinvoke $r206.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r210);

        $r209 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        r6 = virtualinvoke $r209.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z22 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z22 == 0 goto label09;

        $r230 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.android.server.power.PowerManagerService$WakeLock) $r230;

        $r233 = new java.lang.StringBuilder;

        specialinvoke $r233.<java.lang.StringBuilder: void <init>()>();

        $r232 = virtualinvoke $r233.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r235 = virtualinvoke $r232.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r234 = virtualinvoke $r235.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r234);

     label05:
        goto label04;

     label06:
        $r242 := @caughtexception;

        r5 = $r242;

     label07:
        exitmonitor r4;

     label08:
        throw r5;

     label09:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r213 = new java.lang.StringBuilder;

        specialinvoke $r213.<java.lang.StringBuilder: void <init>()>();

        $r212 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Suspend Blockers: size=");

        $r211 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers>;

        $i26 = virtualinvoke $r211.<java.util.ArrayList: int size()>();

        $r216 = virtualinvoke $r212.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r215 = virtualinvoke $r216.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r215);

        $r214 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers>;

        r7 = virtualinvoke $r214.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z23 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z23 == 0 goto label12;

        $r253 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.android.server.power.SuspendBlocker) $r253;

        $r254 = new java.lang.StringBuilder;

        specialinvoke $r254.<java.lang.StringBuilder: void <init>()>();

        $r255 = virtualinvoke $r254.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r256 = virtualinvoke $r255.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r231 = virtualinvoke $r256.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r231);

     label11:
        goto label10;

     label12:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r243 = new java.lang.StringBuilder;

        specialinvoke $r243.<java.lang.StringBuilder: void <init>()>();

        $r244 = virtualinvoke $r243.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen On Blocker: ");

        $r245 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$ScreenOnBlockerImpl mScreenOnBlocker>;

        $r246 = virtualinvoke $r244.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r245);

        $r247 = virtualinvoke $r246.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r247);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r248 = new java.lang.StringBuilder;

        specialinvoke $r248.<java.lang.StringBuilder: void <init>()>();

        $r249 = virtualinvoke $r248.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Blanker: ");

        $r250 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$DisplayBlankerImpl mDisplayBlanker>;

        $r251 = virtualinvoke $r249.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r250);

        $r252 = virtualinvoke $r251.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r252);

        r8 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerController mDisplayPowerController>;

        r9 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.WirelessChargerDetector mWirelessChargerDetector>;

        exitmonitor r4;

     label13:
        if r8 == null goto label14;

        virtualinvoke r8.<com.android.server.power.DisplayPowerController: void dump(java.io.PrintWriter)>(r2);

     label14:
        if r9 == null goto label01;

        virtualinvoke r9.<com.android.server.power.WirelessChargerDetector: void dump(java.io.PrintWriter)>(r2);

        return;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label10 to label11 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
    }

    public void goToSleep(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l2, $l3;
        int i1;
        java.lang.Throwable r1, $r4;
        byte $b4;
        android.content.Context $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event time must not be in the future");

        throw $r3;

     label1:
        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int)>(l0, i1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r1;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void init(android.content.Context, com.android.server.LightsService, com.android.server.am.ActivityManagerService, com.android.server.BatteryService, com.android.internal.app.IBatteryStats, com.android.internal.app.IAppOpsService, com.android.server.display.DisplayManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        android.content.Context r1;
        com.android.server.LightsService r2;
        com.android.server.am.ActivityManagerService r3;
        com.android.server.BatteryService r4;
        com.android.internal.app.IBatteryStats r5;
        com.android.internal.app.IAppOpsService r6;
        com.android.server.display.DisplayManagerService r7;
        android.os.HandlerThread $r8, $r9, $r11, $r15;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r10, $r17;
        android.os.Looper $r12;
        com.android.server.Watchdog $r13, $r14;
        java.lang.String $r16;
        com.android.server.power.PowerManagerService$DisplayBlankerImpl $r18;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.LightsService;

        r3 := @parameter2: com.android.server.am.ActivityManagerService;

        r4 := @parameter3: com.android.server.BatteryService;

        r5 := @parameter4: com.android.internal.app.IBatteryStats;

        r6 := @parameter5: com.android.internal.app.IAppOpsService;

        r7 := @parameter6: com.android.server.display.DisplayManagerService;

        r0.<com.android.server.power.PowerManagerService: android.content.Context mContext> = r1;

        r0.<com.android.server.power.PowerManagerService: com.android.server.LightsService mLightsService> = r2;

        r0.<com.android.server.power.PowerManagerService: com.android.server.BatteryService mBatteryService> = r4;

        r0.<com.android.server.power.PowerManagerService: com.android.internal.app.IBatteryStats mBatteryStats> = r5;

        r0.<com.android.server.power.PowerManagerService: com.android.internal.app.IAppOpsService mAppOps> = r6;

        r0.<com.android.server.power.PowerManagerService: com.android.server.display.DisplayManagerService mDisplayManagerService> = r7;

        $r8 = new android.os.HandlerThread;

        specialinvoke $r8.<android.os.HandlerThread: void <init>(java.lang.String)>("PowerManagerService");

        r0.<com.android.server.power.PowerManagerService: android.os.HandlerThread mHandlerThread> = $r8;

        $r9 = r0.<com.android.server.power.PowerManagerService: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r9.<android.os.HandlerThread: void start()>();

        $r10 = new com.android.server.power.PowerManagerService$PowerManagerHandler;

        $r11 = r0.<com.android.server.power.PowerManagerService: android.os.HandlerThread mHandlerThread>;

        $r12 = virtualinvoke $r11.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r10.<com.android.server.power.PowerManagerService$PowerManagerHandler: void <init>(com.android.server.power.PowerManagerService,android.os.Looper)>(r0, $r12);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler> = $r10;

        $r13 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r13.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>(r0);

        $r14 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        $r17 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        $r15 = r0.<com.android.server.power.PowerManagerService: android.os.HandlerThread mHandlerThread>;

        $r16 = virtualinvoke $r15.<android.os.HandlerThread: java.lang.String getName()>();

        virtualinvoke $r14.<com.android.server.Watchdog: void addThread(android.os.Handler,java.lang.String)>($r17, $r16);

        $r18 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$DisplayBlankerImpl mDisplayBlanker>;

        virtualinvoke $r18.<com.android.server.power.PowerManagerService$DisplayBlankerImpl: void unblankAllDisplays()>();

        return;
    }

    public boolean isScreenOn()
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        java.lang.Throwable r1, $r2;
        boolean z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isScreenOnInternal()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isWakeLockLevelSupported(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        long l1;
        java.lang.Throwable r1, $r2;
        boolean z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isWakeLockLevelSupportedInternal(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void monitor()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void nap(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l1, $l2;
        java.lang.Throwable r1, $r4;
        byte $b3;
        android.content.Context $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $b3 = l0 cmp $l2;

        if $b3 <= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event time must not be in the future");

        throw $r3;

     label1:
        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void napInternal(long)>(l0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void reboot(boolean, java.lang.String, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1;
        java.lang.String r1;
        long l0;
        java.lang.Throwable r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.REBOOT", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void shutdownOrRebootInternal(boolean,boolean,java.lang.String,boolean)>(0, z0, r1, z1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void releaseWakeLock(android.os.IBinder, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        int i0;
        long l1;
        java.lang.Throwable r2, $r5;
        android.content.Context $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("lock must not be null");

        throw $r4;

     label1:
        $r3 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.WAKE_LOCK", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void releaseWakeLockInternal(android.os.IBinder,int)>(r1, i0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void setAttentionLight(boolean, int)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;
        int i0;
        long l1;
        java.lang.Throwable r1, $r3;
        android.content.Context $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void setAttentionLightInternal(boolean,int)>(z0, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setButtonBrightnessOverrideFromWindowManager(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        android.content.Context $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        return;
    }

    public void setMaximumScreenOffTimeoutFromDeviceAdmin(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        long l1;
        java.lang.Throwable r1, $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setPolicy(android.view.WindowManagerPolicy)
    {
        com.android.server.power.PowerManagerService r0;
        android.view.WindowManagerPolicy r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.view.WindowManagerPolicy;

        r2 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        r0.<com.android.server.power.PowerManagerService: android.view.WindowManagerPolicy mPolicy> = r1;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setScreenBrightnessOverrideFromWindowManager(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        long l1;
        java.lang.Throwable r1, $r3;
        android.content.Context $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void setScreenBrightnessOverrideFromWindowManagerInternal(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setStayOnSetting(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        long l1;
        java.lang.Throwable r1, $r3;
        android.content.Context $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.WRITE_SETTINGS", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void setStayOnSettingInternal(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(float)
    {
        com.android.server.power.PowerManagerService r0;
        float f0;
        long l0;
        java.lang.Throwable r1, $r3;
        android.content.Context $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        f0 := @parameter0: float;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float)>(f0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setTemporaryScreenBrightnessSettingOverride(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        long l1;
        java.lang.Throwable r1, $r3;
        android.content.Context $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverrideInternal(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setUserActivityTimeoutOverrideFromWindowManager(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l1;
        java.lang.Throwable r1, $r3;
        android.content.Context $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)>(l0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void shutdown(boolean, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1;
        long l0;
        java.lang.Throwable r1, $r3;
        android.content.Context $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.REBOOT", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void shutdownOrRebootInternal(boolean,boolean,java.lang.String,boolean)>(1, z0, null, z1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void systemReady(com.android.server.TwilightService, com.android.server.dreams.DreamManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.TwilightService r1;
        com.android.server.dreams.DreamManagerService r2;
        java.lang.Object r3, $r14;
        java.lang.Throwable r4, $r85;
        android.os.PowerManager r5;
        android.hardware.SystemSensorManager r6, $r16;
        android.content.IntentFilter r7, r8, r9, r10, r11, $r44, $r47, $r56, $r59, $r69;
        android.content.ContentResolver r12;
        android.content.Context $r13, $r18, $r22, $r35, $r50, $r53, $r58, $r61, $r63, $r66;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r15, $r28, $r30, $r39, $r41, $r49, $r52, $r62, $r64, $r67;
        android.os.Looper $r17, $r19, $r27;
        com.android.server.power.Notifier $r20, $r38;
        com.android.internal.app.IBatteryStats $r21;
        android.view.WindowManagerPolicy $r23;
        com.android.server.power.PowerManagerService$ScreenOnBlockerImpl $r24;
        com.android.internal.app.IAppOpsService $r25;
        com.android.server.power.SuspendBlocker $r26, $r31, $r42;
        com.android.server.power.DisplayPowerController $r29;
        com.android.server.display.DisplayManagerService $r32;
        com.android.server.power.DisplayPowerController$Callbacks $r33;
        com.android.server.power.PowerManagerService$DisplayBlankerImpl $r34;
        com.android.server.power.WirelessChargerDetector $r36;
        com.android.server.LightsService $r37, $r46;
        com.android.server.power.PowerManagerService$SettingsObserver $r40, $r72, $r74, $r77, $r79, $r80, $r82, $r84;
        com.android.server.power.PowerManagerService$BatteryReceiver $r43;
        com.android.server.LightsService$Light $r45;
        com.android.server.power.PowerManagerService$BootCompletedReceiver $r54;
        com.android.server.power.PowerManagerService$UserSwitchedReceiver $r57;
        com.android.server.power.PowerManagerService$DreamReceiver $r60;
        com.android.server.power.PowerManagerService$DockReceiver $r70;
        android.net.Uri $r71, $r73, $r75, $r76, $r78, $r81, $r83;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.TwilightService;

        r2 := @parameter1: com.android.server.dreams.DreamManagerService;

        r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        r0.<com.android.server.power.PowerManagerService: boolean mSystemReady> = 1;

        r0.<com.android.server.power.PowerManagerService: com.android.server.dreams.DreamManagerService mDreamManager> = r2;

        $r13 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r5 = (android.os.PowerManager) $r14;

        $i0 = virtualinvoke r5.<android.os.PowerManager: int getMinimumScreenBrightnessSetting()>();

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMinimum> = $i0;

        $i2 = virtualinvoke r5.<android.os.PowerManager: int getMaximumScreenBrightnessSetting()>();

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMaximum> = $i2;

        $i1 = virtualinvoke r5.<android.os.PowerManager: int getDefaultScreenBrightnessSetting()>();

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingDefault> = $i1;

        $r16 = new android.hardware.SystemSensorManager;

        $r18 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r15 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        $r17 = virtualinvoke $r15.<com.android.server.power.PowerManagerService$PowerManagerHandler: android.os.Looper getLooper()>();

        specialinvoke $r16.<android.hardware.SystemSensorManager: void <init>(android.content.Context,android.os.Looper)>($r18, $r17);

        r6 = $r16;

        $r20 = new com.android.server.power.Notifier;

        $r19 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r22 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r21 = r0.<com.android.server.power.PowerManagerService: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r25 = r0.<com.android.server.power.PowerManagerService: com.android.internal.app.IAppOpsService mAppOps>;

        $r26 = specialinvoke r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker createSuspendBlockerLocked(java.lang.String)>("PowerManagerService.Broadcasts");

        $r24 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$ScreenOnBlockerImpl mScreenOnBlocker>;

        $r23 = r0.<com.android.server.power.PowerManagerService: android.view.WindowManagerPolicy mPolicy>;

        specialinvoke $r20.<com.android.server.power.Notifier: void <init>(android.os.Looper,android.content.Context,com.android.internal.app.IBatteryStats,com.android.internal.app.IAppOpsService,com.android.server.power.SuspendBlocker,com.android.server.power.ScreenOnBlocker,android.view.WindowManagerPolicy)>($r19, $r22, $r21, $r25, $r26, $r24, $r23);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier> = $r20;

        $r29 = new com.android.server.power.DisplayPowerController;

        $r30 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        $r27 = virtualinvoke $r30.<com.android.server.power.PowerManagerService$PowerManagerHandler: android.os.Looper getLooper()>();

        $r35 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r38 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $r37 = r0.<com.android.server.power.PowerManagerService: com.android.server.LightsService mLightsService>;

        $r32 = r0.<com.android.server.power.PowerManagerService: com.android.server.display.DisplayManagerService mDisplayManagerService>;

        $r31 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        $r34 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$DisplayBlankerImpl mDisplayBlanker>;

        $r33 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerController$Callbacks mDisplayPowerControllerCallbacks>;

        $r28 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        specialinvoke $r29.<com.android.server.power.DisplayPowerController: void <init>(android.os.Looper,android.content.Context,com.android.server.power.Notifier,com.android.server.LightsService,com.android.server.TwilightService,android.hardware.SensorManager,com.android.server.display.DisplayManagerService,com.android.server.power.SuspendBlocker,com.android.server.power.DisplayBlanker,com.android.server.power.DisplayPowerController$Callbacks,android.os.Handler)>($r27, $r35, $r38, $r37, r1, r6, $r32, $r31, $r34, $r33, $r28);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerController mDisplayPowerController> = $r29;

        $r36 = new com.android.server.power.WirelessChargerDetector;

        $r42 = specialinvoke r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker createSuspendBlockerLocked(java.lang.String)>("PowerManagerService.WirelessChargerDetector");

        $r41 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        specialinvoke $r36.<com.android.server.power.WirelessChargerDetector: void <init>(android.hardware.SensorManager,com.android.server.power.SuspendBlocker,android.os.Handler)>(r6, $r42, $r41);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.WirelessChargerDetector mWirelessChargerDetector> = $r36;

        $r40 = new com.android.server.power.PowerManagerService$SettingsObserver;

        $r39 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        specialinvoke $r40.<com.android.server.power.PowerManagerService$SettingsObserver: void <init>(com.android.server.power.PowerManagerService,android.os.Handler)>(r0, $r39);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver> = $r40;

        $r46 = r0.<com.android.server.power.PowerManagerService: com.android.server.LightsService mLightsService>;

        $r45 = virtualinvoke $r46.<com.android.server.LightsService: com.android.server.LightsService$Light getLight(int)>(5);

        r0.<com.android.server.power.PowerManagerService: com.android.server.LightsService$Light mAttentionLight> = $r45;

        $r44 = new android.content.IntentFilter;

        specialinvoke $r44.<android.content.IntentFilter: void <init>()>();

        r7 = $r44;

        virtualinvoke r7.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        $r50 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r43 = new com.android.server.power.PowerManagerService$BatteryReceiver;

        specialinvoke $r43.<com.android.server.power.PowerManagerService$BatteryReceiver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r49 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r50.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r43, r7, null, $r49);

        $r47 = new android.content.IntentFilter;

        specialinvoke $r47.<android.content.IntentFilter: void <init>()>();

        r8 = $r47;

        virtualinvoke r8.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BOOT_COMPLETED");

        $r53 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r54 = new com.android.server.power.PowerManagerService$BootCompletedReceiver;

        specialinvoke $r54.<com.android.server.power.PowerManagerService$BootCompletedReceiver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r52 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r53.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r54, r8, null, $r52);

        $r59 = new android.content.IntentFilter;

        specialinvoke $r59.<android.content.IntentFilter: void <init>()>();

        r9 = $r59;

        virtualinvoke r9.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STARTED");

        virtualinvoke r9.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STOPPED");

        $r61 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r60 = new com.android.server.power.PowerManagerService$DreamReceiver;

        specialinvoke $r60.<com.android.server.power.PowerManagerService$DreamReceiver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r62 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r61.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r60, r9, null, $r62);

        $r56 = new android.content.IntentFilter;

        specialinvoke $r56.<android.content.IntentFilter: void <init>()>();

        r10 = $r56;

        virtualinvoke r10.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        $r58 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r57 = new com.android.server.power.PowerManagerService$UserSwitchedReceiver;

        specialinvoke $r57.<com.android.server.power.PowerManagerService$UserSwitchedReceiver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r67 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r58.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r57, r10, null, $r67);

        $r69 = new android.content.IntentFilter;

        specialinvoke $r69.<android.content.IntentFilter: void <init>()>();

        r11 = $r69;

        virtualinvoke r11.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DOCK_EVENT");

        $r63 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r70 = new com.android.server.power.PowerManagerService$DockReceiver;

        specialinvoke $r70.<com.android.server.power.PowerManagerService$DockReceiver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r64 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r63.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r70, r11, null, $r64);

        $r66 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        r12 = virtualinvoke $r66.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r75 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("screensaver_enabled");

        $r77 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r12.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r75, 0, $r77, -1);

        $r76 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("screensaver_activate_on_sleep");

        $r72 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r12.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r76, 0, $r72, -1);

        $r71 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("screensaver_activate_on_dock");

        $r74 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r12.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r71, 0, $r74, -1);

        $r73 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_off_timeout");

        $r82 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r12.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r73, 0, $r82, -1);

        $r81 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("stay_on_while_plugged_in");

        $r84 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r12.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r81, 0, $r84, -1);

        $r83 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_brightness");

        $r79 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r12.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r83, 0, $r79, -1);

        $r78 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_brightness_mode");

        $r80 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r12.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r78, 0, $r80, -1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void readConfigurationLocked()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateSettingsLocked()>();

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i4 = 256 | $i3;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i4;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r3;

     label2:
        return;

     label3:
        $r85 := @caughtexception;

        r4 = $r85;

     label4:
        exitmonitor r3;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public long timeSinceScreenWasLastOn()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        long l0, $l2, $l3;
        com.android.server.power.DisplayPowerRequest $r3;
        int $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.DisplayPowerRequest mDisplayPowerRequest>;

        $i1 = $r3.<com.android.server.power.DisplayPowerRequest: int screenState>;

        if $i1 == 0 goto label3;

        exitmonitor r1;

     label2:
        return 0L;

     label3:
        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l3 = r0.<com.android.server.power.PowerManagerService: long mLastScreenOffEventElapsedRealTime>;

        l0 = $l2 - $l3;

        exitmonitor r1;

     label4:
        return l0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void updateWakeLockUids(android.os.IBinder, int[])
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        int[] r2;
        android.os.WorkSource r3, $r4;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: int[];

        r3 = null;

        if r2 == null goto label2;

        $r4 = new android.os.WorkSource;

        specialinvoke $r4.<android.os.WorkSource: void <init>()>();

        r3 = $r4;

        i0 = 0;

     label1:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label2;

        $i2 = r2[i0];

        virtualinvoke r3.<android.os.WorkSource: boolean add(int)>($i2);

        i0 = i0 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)>(r1, r3);

        return;
    }

    public void updateWakeLockWorkSource(android.os.IBinder, android.os.WorkSource)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        android.os.WorkSource r2;
        long l0;
        java.lang.Throwable r3, $r7;
        android.content.Context $r4, $r5;
        int $i1;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.WorkSource;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("lock must not be null");

        throw $r6;

     label1:
        $r4 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.WAKE_LOCK", null);

        if r2 == null goto label5;

        $i1 = virtualinvoke r2.<android.os.WorkSource: int size()>();

        if $i1 == 0 goto label5;

        $r5 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_DEVICE_STATS", null);

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockWorkSourceInternal(android.os.IBinder,android.os.WorkSource)>(r1, r2);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        r2 = null;

        goto label2;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public void userActivity(long, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l3, l5, $l8, $l9, $l10;
        int i1, i2, i4, $i6, $i12, $i14;
        java.lang.Throwable r1, r3, $r12, $r13;
        java.lang.Object r2;
        android.content.Context $r4;
        byte $b7, $b11;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11;
        java.lang.String $r10;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $i6 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DEVICE_POWER");

        if $i6 == 0 goto label07;

        r2 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $l10 = r0.<com.android.server.power.PowerManagerService: long mLastWarningAboutUserActivityPermission>;

        $l9 = 300000L + $l10;

        $b11 = l3 cmp $l9;

        if $b11 < 0 goto label02;

        r0.<com.android.server.power.PowerManagerService: long mLastWarningAboutUserActivityPermission> = l3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring call to PowerManager.userActivity() because the caller does not have DEVICE_POWER permission.  Please fix your app!   pid=");

        $i12 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid=");

        $i14 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PowerManagerService", $r10);

     label02:
        exitmonitor r2;

     label03:
        return;

     label04:
        $r13 := @caughtexception;

        r3 = $r13;

     label05:
        exitmonitor r2;

     label06:
        throw r3;

     label07:
        $l8 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $b7 = l0 cmp $l8;

        if $b7 <= 0 goto label08;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event time must not be in the future");

        throw $r5;

     label08:
        i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)>(l0, i1, i2, i4);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        return;

     label11:
        $r12 := @caughtexception;

        r1 = $r12;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        throw r1;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public void wakeUp(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l1, $l2;
        java.lang.Throwable r1, $r4;
        byte $b3;
        android.content.Context $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $b3 = l0 cmp $l2;

        if $b3 <= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event time must not be in the future");

        throw $r3;

     label1:
        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void wakeUpInternal(long)>(l0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public static void <clinit>()
    {
        <com.android.server.power.PowerManagerService: int WAKE_LOCK_STAY_AWAKE> = 32;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_SCREEN_DIM> = 4;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_SCREEN_BRIGHT> = 2;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_PROXIMITY_SCREEN_OFF> = 16;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_CPU> = 1;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_BUTTON_BRIGHT> = 8;

        <com.android.server.power.PowerManagerService: int WAKEFULNESS_NAPPING> = 2;

        <com.android.server.power.PowerManagerService: int WAKEFULNESS_DREAMING> = 3;

        <com.android.server.power.PowerManagerService: int WAKEFULNESS_AWAKE> = 1;

        <com.android.server.power.PowerManagerService: int WAKEFULNESS_ASLEEP> = 0;

        <com.android.server.power.PowerManagerService: int USER_ACTIVITY_SCREEN_DIM> = 2;

        <com.android.server.power.PowerManagerService: int USER_ACTIVITY_SCREEN_BRIGHT> = 1;

        <com.android.server.power.PowerManagerService: java.lang.String TAG> = "PowerManagerService";

        <com.android.server.power.PowerManagerService: int SCREEN_DIM_DURATION> = 7000;

        <com.android.server.power.PowerManagerService: int MSG_USER_ACTIVITY_TIMEOUT> = 1;

        <com.android.server.power.PowerManagerService: int MSG_SCREEN_ON_BLOCKER_RELEASED> = 3;

        <com.android.server.power.PowerManagerService: int MSG_SANDMAN> = 2;

        <com.android.server.power.PowerManagerService: int MSG_CHECK_IF_BOOT_ANIMATION_FINISHED> = 4;

        <com.android.server.power.PowerManagerService: int MINIMUM_SCREEN_OFF_TIMEOUT> = 10000;

        <com.android.server.power.PowerManagerService: float MAXIMUM_SCREEN_DIM_RATIO> = 0.2F;

        <com.android.server.power.PowerManagerService: int DREAM_BATTERY_LEVEL_DRAIN_CUTOFF> = 5;

        <com.android.server.power.PowerManagerService: int DIRTY_WAKE_LOCKS> = 1;

        <com.android.server.power.PowerManagerService: int DIRTY_WAKEFULNESS> = 2;

        <com.android.server.power.PowerManagerService: int DIRTY_USER_ACTIVITY> = 4;

        <com.android.server.power.PowerManagerService: int DIRTY_STAY_ON> = 128;

        <com.android.server.power.PowerManagerService: int DIRTY_SETTINGS> = 32;

        <com.android.server.power.PowerManagerService: int DIRTY_SCREEN_ON_BLOCKER_RELEASED> = 1024;

        <com.android.server.power.PowerManagerService: int DIRTY_PROXIMITY_POSITIVE> = 512;

        <com.android.server.power.PowerManagerService: int DIRTY_IS_POWERED> = 64;

        <com.android.server.power.PowerManagerService: int DIRTY_DOCK_STATE> = 2048;

        <com.android.server.power.PowerManagerService: int DIRTY_BOOT_COMPLETED> = 16;

        <com.android.server.power.PowerManagerService: int DIRTY_BATTERY_STATE> = 256;

        <com.android.server.power.PowerManagerService: int DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED> = 8;

        <com.android.server.power.PowerManagerService: int DEFAULT_SCREEN_OFF_TIMEOUT> = 15000;

        <com.android.server.power.PowerManagerService: boolean DEBUG_SPEW> = 0;

        <com.android.server.power.PowerManagerService: boolean DEBUG> = 0;

        <com.android.server.power.PowerManagerService: java.lang.String BOOT_ANIMATION_SERVICE> = "bootanim";

        <com.android.server.power.PowerManagerService: int BOOT_ANIMATION_POLL_INTERVAL> = 200;

        return;
    }
}
