public final class org.apache.harmony.xml.dom.DocumentImpl extends org.apache.harmony.xml.dom.InnerNodeImpl implements org.w3c.dom.Document
{
    private java.lang.String documentUri;
    private org.apache.harmony.xml.dom.DOMConfigurationImpl domConfiguration;
    private org.w3c.dom.DOMImplementation domImplementation;
    private java.lang.String inputEncoding;
    private java.util.WeakHashMap nodeToUserData;
    private boolean strictErrorChecking;
    private java.lang.String xmlEncoding;
    private boolean xmlStandalone;
    private java.lang.String xmlVersion;

    public void <init>(org.apache.harmony.xml.dom.DOMImplementationImpl, java.lang.String, java.lang.String, org.w3c.dom.DocumentType, java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.apache.harmony.xml.dom.DOMImplementationImpl r1;
        java.lang.String r2, r3, r5;
        org.w3c.dom.DocumentType r4;
        org.apache.harmony.xml.dom.ElementImpl $r6;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: org.apache.harmony.xml.dom.DOMImplementationImpl;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.w3c.dom.DocumentType;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl)>(null);

        r0.<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String xmlVersion> = "1.0";

        r0.<org.apache.harmony.xml.dom.DocumentImpl: boolean xmlStandalone> = 0;

        r0.<org.apache.harmony.xml.dom.DocumentImpl: boolean strictErrorChecking> = 1;

        r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.DocumentImpl document> = r0;

        r0.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMImplementation domImplementation> = r1;

        r0.<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String inputEncoding> = r5;

        if r4 == null goto label1;

        virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r4);

     label1:
        if r3 == null goto label2;

        $r6 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ElementImpl createElementNS(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

     label2:
        return;
    }

    private void changeDocumentToThis(org.apache.harmony.xml.dom.NodeImpl)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0, $r5;
        org.apache.harmony.xml.dom.NodeImpl r1, $r10;
        java.util.Map r2, $r9;
        org.w3c.dom.NodeList r3;
        int i0, i1, $i2, $i4;
        org.w3c.dom.NamedNodeMap r4;
        boolean $z0;
        short $s3;
        org.w3c.dom.Node $r6, $r7;
        org.apache.harmony.xml.dom.AttrImpl $r8;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: org.apache.harmony.xml.dom.NodeImpl;

        $r5 = r1.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        r2 = virtualinvoke $r5.<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMapForRead(org.apache.harmony.xml.dom.NodeImpl)>(r1);

        $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r9 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMap(org.apache.harmony.xml.dom.NodeImpl)>(r1);

        interfaceinvoke $r9.<java.util.Map: void putAll(java.util.Map)>(r2);

     label1:
        r1.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.DocumentImpl document> = r0;

        r3 = virtualinvoke r1.<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

     label2:
        $i2 = interfaceinvoke r3.<org.w3c.dom.NodeList: int getLength()>();

        if i0 >= $i2 goto label3;

        $r7 = interfaceinvoke r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $r10 = (org.apache.harmony.xml.dom.NodeImpl) $r7;

        specialinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: void changeDocumentToThis(org.apache.harmony.xml.dom.NodeImpl)>($r10);

        i0 = i0 + 1;

        goto label2;

     label3:
        $s3 = virtualinvoke r1.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        if $s3 != 1 goto label5;

        r4 = virtualinvoke r1.<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()>();

        i1 = 0;

     label4:
        $i4 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i1 >= $i4 goto label5;

        $r6 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        $r8 = (org.apache.harmony.xml.dom.AttrImpl) $r6;

        specialinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: void changeDocumentToThis(org.apache.harmony.xml.dom.NodeImpl)>($r8);

        i1 = i1 + 1;

        goto label4;

     label5:
        return;
    }

    static boolean isXMLIdentifier(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i1, $i3;
        char $c2, $c4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: boolean isXMLIdentifierStart(char)>($c2);

        if $z0 == 0 goto label1;

        i0 = 1;

     label3:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i3 goto label4;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $z1 = staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: boolean isXMLIdentifierPart(char)>($c4);

        if $z1 == 0 goto label1;

        i0 = i0 + 1;

        goto label3;

     label4:
        return 1;
    }

    private static boolean isXMLIdentifierPart(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: boolean isXMLIdentifierStart(char)>(c0);

        if $z0 != 0 goto label2;

        if c0 < 48 goto label1;

        if c0 <= 57 goto label2;

     label1:
        if c0 == 45 goto label2;

        if c0 != 46 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    private static boolean isXMLIdentifierStart(char)
    {
        char c0;

        c0 := @parameter0: char;

        if c0 < 65 goto label1;

        if c0 <= 90 goto label3;

     label1:
        if c0 < 97 goto label2;

        if c0 <= 122 goto label3;

     label2:
        if c0 != 95 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    private static void notifyUserDataHandlers(short, org.w3c.dom.Node, org.apache.harmony.xml.dom.NodeImpl)
    {
        short s0;
        org.w3c.dom.Node r0;
        org.apache.harmony.xml.dom.NodeImpl r1, r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        org.apache.harmony.xml.dom.NodeImpl$UserData r5;
        boolean $z0, $z1;
        org.apache.harmony.xml.dom.DocumentImpl $r6, $r7;
        java.util.Map $r8;
        java.util.Set $r9;
        java.lang.Object $r10, $r11, $r14, $r15;
        org.w3c.dom.UserDataHandler $r12, $r13;
        java.lang.String $r16;

        s0 := @parameter0: short;

        r0 := @parameter1: org.w3c.dom.Node;

        r1 := @parameter2: org.apache.harmony.xml.dom.NodeImpl;

        $z0 = r0 instanceof org.apache.harmony.xml.dom.NodeImpl;

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        r2 = (org.apache.harmony.xml.dom.NodeImpl) r0;

        $r6 = r2.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        if $r6 == null goto label1;

        $r7 = r2.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        $r8 = virtualinvoke $r7.<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMapForRead(org.apache.harmony.xml.dom.NodeImpl)>(r2);

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label1;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (org.apache.harmony.xml.dom.NodeImpl$UserData) $r11;

        $r13 = r5.<org.apache.harmony.xml.dom.NodeImpl$UserData: org.w3c.dom.UserDataHandler handler>;

        if $r13 == null goto label3;

        $r12 = r5.<org.apache.harmony.xml.dom.NodeImpl$UserData: org.w3c.dom.UserDataHandler handler>;

        $r15 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (java.lang.String) $r15;

        $r14 = r5.<org.apache.harmony.xml.dom.NodeImpl$UserData: java.lang.Object value>;

        interfaceinvoke $r12.<org.w3c.dom.UserDataHandler: void handle(short,java.lang.String,java.lang.Object,org.w3c.dom.Node,org.w3c.dom.Node)>(s0, $r16, $r14, r0, r1);

        goto label3;
    }

    private org.apache.harmony.xml.dom.NodeImpl shallowCopy(short, org.w3c.dom.Node)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        short s0, $s2, $s3, $s4;
        org.w3c.dom.Node r1, $r43;
        org.w3c.dom.ProcessingInstruction r2;
        org.apache.harmony.xml.dom.ElementImpl r3, r4;
        org.w3c.dom.NamedNodeMap r5;
        int i1, $i5;
        org.apache.harmony.xml.dom.AttrImpl r6, r7, r8, r9;
        org.w3c.dom.DOMException $r10, $r15;
        java.lang.StringBuilder $r11, $r12, $r14, $r17, $r18, $r20;
        java.lang.String $r13, $r19, $r21, $r23, $r26, $r30, $r32, $r33, $r35, $r37, $r38, $r39, $r40, $r41, $r44, $r47, $r48;
        org.apache.harmony.xml.dom.DocumentFragmentImpl $r16;
        org.w3c.dom.Comment $r22;
        org.apache.harmony.xml.dom.ProcessingInstructionImpl $r24;
        org.apache.harmony.xml.dom.CommentImpl $r25;
        org.apache.harmony.xml.dom.EntityReferenceImpl $r27;
        org.w3c.dom.CharacterData $r28;
        java.lang.UnsupportedOperationException $r29;
        org.w3c.dom.Text $r31;
        org.apache.harmony.xml.dom.CDATASectionImpl $r34;
        org.apache.harmony.xml.dom.TextImpl $r36;
        boolean $z0, $z1, $z2;
        org.apache.harmony.xml.dom.NodeImpl $r42;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        s0 := @parameter0: short;

        r1 := @parameter1: org.w3c.dom.Node;

        $s2 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        tableswitch($s2)
        {
            case 1: goto label09;
            case 2: goto label02;
            case 3: goto label19;
            case 4: goto label05;
            case 5: goto label17;
            case 6: goto label16;
            case 7: goto label18;
            case 8: goto label06;
            case 9: goto label08;
            case 10: goto label08;
            case 11: goto label07;
            case 12: goto label16;
            default: goto label01;
        };

     label01:
        $r10 = new org.w3c.dom.DOMException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported node type ");

        $s3 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s3);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, $r13);

        throw $r10;

     label02:
        r8 = (org.apache.harmony.xml.dom.AttrImpl) r1;

        $z0 = r8.<org.apache.harmony.xml.dom.AttrImpl: boolean namespaceAware>;

        if $z0 == 0 goto label04;

        $r38 = virtualinvoke r8.<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNamespaceURI()>();

        $r37 = virtualinvoke r8.<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getLocalName()>();

        r9 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.AttrImpl createAttributeNS(java.lang.String,java.lang.String)>($r38, $r37);

        $r41 = virtualinvoke r8.<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getPrefix()>();

        virtualinvoke r9.<org.apache.harmony.xml.dom.AttrImpl: void setPrefix(java.lang.String)>($r41);

     label03:
        $r39 = virtualinvoke r8.<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getValue()>();

        virtualinvoke r9.<org.apache.harmony.xml.dom.AttrImpl: void setNodeValue(java.lang.String)>($r39);

        return r9;

     label04:
        $r35 = virtualinvoke r8.<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getName()>();

        r9 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.AttrImpl createAttribute(java.lang.String)>($r35);

        goto label03;

     label05:
        $r28 = (org.w3c.dom.CharacterData) r1;

        $r33 = interfaceinvoke $r28.<org.w3c.dom.CharacterData: java.lang.String getData()>();

        $r34 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.CDATASectionImpl createCDATASection(java.lang.String)>($r33);

        return $r34;

     label06:
        $r22 = (org.w3c.dom.Comment) r1;

        $r21 = interfaceinvoke $r22.<org.w3c.dom.Comment: java.lang.String getData()>();

        $r25 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.CommentImpl createComment(java.lang.String)>($r21);

        return $r25;

     label07:
        $r16 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.DocumentFragmentImpl createDocumentFragment()>();

        return $r16;

     label08:
        $r15 = new org.w3c.dom.DOMException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot copy node of type ");

        $s4 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s4);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, $r19);

        throw $r15;

     label09:
        r3 = (org.apache.harmony.xml.dom.ElementImpl) r1;

        $z1 = r3.<org.apache.harmony.xml.dom.ElementImpl: boolean namespaceAware>;

        if $z1 == 0 goto label13;

        $r44 = virtualinvoke r3.<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNamespaceURI()>();

        $r47 = virtualinvoke r3.<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getLocalName()>();

        r4 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ElementImpl createElementNS(java.lang.String,java.lang.String)>($r44, $r47);

        $r48 = virtualinvoke r3.<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getPrefix()>();

        virtualinvoke r4.<org.apache.harmony.xml.dom.ElementImpl: void setPrefix(java.lang.String)>($r48);

     label10:
        r5 = virtualinvoke r3.<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()>();

        i1 = 0;

     label11:
        $i5 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i1 >= $i5 goto label15;

        $r43 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        r6 = (org.apache.harmony.xml.dom.AttrImpl) $r43;

        $r42 = specialinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.NodeImpl shallowCopy(short,org.w3c.dom.Node)>(s0, r6);

        r7 = (org.apache.harmony.xml.dom.AttrImpl) $r42;

        staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: void notifyUserDataHandlers(short,org.w3c.dom.Node,org.apache.harmony.xml.dom.NodeImpl)>(s0, r6, r7);

        $z2 = r6.<org.apache.harmony.xml.dom.AttrImpl: boolean namespaceAware>;

        if $z2 == 0 goto label14;

        virtualinvoke r4.<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>(r7);

     label12:
        i1 = i1 + 1;

        goto label11;

     label13:
        $r40 = virtualinvoke r3.<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getTagName()>();

        r4 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ElementImpl createElement(java.lang.String)>($r40);

        goto label10;

     label14:
        virtualinvoke r4.<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>(r7);

        goto label12;

     label15:
        return r4;

     label16:
        $r29 = new java.lang.UnsupportedOperationException;

        specialinvoke $r29.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r29;

     label17:
        $r30 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r27 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.EntityReferenceImpl createEntityReference(java.lang.String)>($r30);

        return $r27;

     label18:
        r2 = (org.w3c.dom.ProcessingInstruction) r1;

        $r26 = interfaceinvoke r2.<org.w3c.dom.ProcessingInstruction: java.lang.String getTarget()>();

        $r23 = interfaceinvoke r2.<org.w3c.dom.ProcessingInstruction: java.lang.String getData()>();

        $r24 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ProcessingInstructionImpl createProcessingInstruction(java.lang.String,java.lang.String)>($r26, $r23);

        return $r24;

     label19:
        $r31 = (org.w3c.dom.Text) r1;

        $r32 = interfaceinvoke $r31.<org.w3c.dom.Text: java.lang.String getData()>();

        $r36 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.TextImpl createTextNode(java.lang.String)>($r32);

        return $r36;
    }

    public org.w3c.dom.Node adoptNode(org.w3c.dom.Node)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.w3c.dom.Node r1, r3;
        org.apache.harmony.xml.dom.NodeImpl r2;
        org.apache.harmony.xml.dom.AttrImpl r4;
        boolean $z0;
        short $s0, $s1, $s2;
        org.w3c.dom.DOMException $r5, $r10;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r14;
        java.lang.String $r9, $r13;
        org.apache.harmony.xml.dom.ElementImpl $r15, $r16;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        $z0 = r1 instanceof org.apache.harmony.xml.dom.NodeImpl;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r2 = (org.apache.harmony.xml.dom.NodeImpl) r1;

        $s0 = virtualinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        tableswitch($s0)
        {
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label4;
            case 6: goto label6;
            case 7: goto label4;
            case 8: goto label4;
            case 9: goto label6;
            case 10: goto label6;
            case 11: goto label4;
            case 12: goto label6;
            default: goto label2;
        };

     label2:
        $r5 = new org.w3c.dom.DOMException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported node type ");

        $s1 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, $r9);

        throw $r5;

     label3:
        r4 = (org.apache.harmony.xml.dom.AttrImpl) r1;

        $r15 = r4.<org.apache.harmony.xml.dom.AttrImpl: org.apache.harmony.xml.dom.ElementImpl ownerElement>;

        if $r15 == null goto label4;

        $r16 = r4.<org.apache.harmony.xml.dom.AttrImpl: org.apache.harmony.xml.dom.ElementImpl ownerElement>;

        virtualinvoke $r16.<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)>(r4);

     label4:
        r3 = virtualinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getParentNode()>();

        if r3 == null goto label5;

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r2);

     label5:
        specialinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: void changeDocumentToThis(org.apache.harmony.xml.dom.NodeImpl)>(r2);

        staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: void notifyUserDataHandlers(short,org.w3c.dom.Node,org.apache.harmony.xml.dom.NodeImpl)>(5, r1, null);

        return r2;

     label6:
        $r10 = new org.w3c.dom.DOMException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot adopt nodes of type ");

        $s2 = virtualinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, $r13);

        throw $r10;
    }

    org.w3c.dom.Node cloneOrImportNode(short, org.w3c.dom.Node, boolean)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        short s0;
        org.w3c.dom.Node r1, $r4, $r5;
        boolean z0;
        org.apache.harmony.xml.dom.NodeImpl r2;
        org.w3c.dom.NodeList r3;
        int i1, $i2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        s0 := @parameter0: short;

        r1 := @parameter1: org.w3c.dom.Node;

        z0 := @parameter2: boolean;

        r2 = specialinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.NodeImpl shallowCopy(short,org.w3c.dom.Node)>(s0, r1);

        if z0 == 0 goto label2;

        r3 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i1 = 0;

     label1:
        $i2 = interfaceinvoke r3.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i2 goto label2;

        $r4 = interfaceinvoke r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $r5 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Node cloneOrImportNode(short,org.w3c.dom.Node,boolean)>(s0, $r4, z0);

        virtualinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: void notifyUserDataHandlers(short,org.w3c.dom.Node,org.apache.harmony.xml.dom.NodeImpl)>(s0, r1, r2);

        return r2;
    }

    public org.apache.harmony.xml.dom.AttrImpl createAttribute(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.AttrImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.harmony.xml.dom.AttrImpl;

        specialinvoke $r2.<org.apache.harmony.xml.dom.AttrImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String)>(r0, r1);

        return $r2;
    }

    public volatile org.w3c.dom.Attr createAttribute(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.AttrImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.AttrImpl createAttribute(java.lang.String)>(r1);

        return $r2;
    }

    public org.apache.harmony.xml.dom.AttrImpl createAttributeNS(java.lang.String, java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1, r2;
        org.apache.harmony.xml.dom.AttrImpl $r3;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new org.apache.harmony.xml.dom.AttrImpl;

        specialinvoke $r3.<org.apache.harmony.xml.dom.AttrImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    public volatile org.w3c.dom.Attr createAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1, r2;
        org.apache.harmony.xml.dom.AttrImpl $r3;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.AttrImpl createAttributeNS(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public org.apache.harmony.xml.dom.CDATASectionImpl createCDATASection(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.CDATASectionImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.harmony.xml.dom.CDATASectionImpl;

        specialinvoke $r2.<org.apache.harmony.xml.dom.CDATASectionImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String)>(r0, r1);

        return $r2;
    }

    public volatile org.w3c.dom.CDATASection createCDATASection(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.CDATASectionImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.CDATASectionImpl createCDATASection(java.lang.String)>(r1);

        return $r2;
    }

    public org.apache.harmony.xml.dom.CommentImpl createComment(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.CommentImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.harmony.xml.dom.CommentImpl;

        specialinvoke $r2.<org.apache.harmony.xml.dom.CommentImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String)>(r0, r1);

        return $r2;
    }

    public volatile org.w3c.dom.Comment createComment(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.CommentImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.CommentImpl createComment(java.lang.String)>(r1);

        return $r2;
    }

    public org.apache.harmony.xml.dom.DocumentFragmentImpl createDocumentFragment()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.apache.harmony.xml.dom.DocumentFragmentImpl $r1;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $r1 = new org.apache.harmony.xml.dom.DocumentFragmentImpl;

        specialinvoke $r1.<org.apache.harmony.xml.dom.DocumentFragmentImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl)>(r0);

        return $r1;
    }

    public volatile org.w3c.dom.DocumentFragment createDocumentFragment()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.apache.harmony.xml.dom.DocumentFragmentImpl $r1;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $r1 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.DocumentFragmentImpl createDocumentFragment()>();

        return $r1;
    }

    public org.apache.harmony.xml.dom.ElementImpl createElement(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.ElementImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.harmony.xml.dom.ElementImpl;

        specialinvoke $r2.<org.apache.harmony.xml.dom.ElementImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String)>(r0, r1);

        return $r2;
    }

    public volatile org.w3c.dom.Element createElement(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.ElementImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ElementImpl createElement(java.lang.String)>(r1);

        return $r2;
    }

    public org.apache.harmony.xml.dom.ElementImpl createElementNS(java.lang.String, java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1, r2;
        org.apache.harmony.xml.dom.ElementImpl $r3;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new org.apache.harmony.xml.dom.ElementImpl;

        specialinvoke $r3.<org.apache.harmony.xml.dom.ElementImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    public volatile org.w3c.dom.Element createElementNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1, r2;
        org.apache.harmony.xml.dom.ElementImpl $r3;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ElementImpl createElementNS(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public org.apache.harmony.xml.dom.EntityReferenceImpl createEntityReference(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.EntityReferenceImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.harmony.xml.dom.EntityReferenceImpl;

        specialinvoke $r2.<org.apache.harmony.xml.dom.EntityReferenceImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String)>(r0, r1);

        return $r2;
    }

    public volatile org.w3c.dom.EntityReference createEntityReference(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.EntityReferenceImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.EntityReferenceImpl createEntityReference(java.lang.String)>(r1);

        return $r2;
    }

    public org.apache.harmony.xml.dom.ProcessingInstructionImpl createProcessingInstruction(java.lang.String, java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1, r2;
        org.apache.harmony.xml.dom.ProcessingInstructionImpl $r3;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new org.apache.harmony.xml.dom.ProcessingInstructionImpl;

        specialinvoke $r3.<org.apache.harmony.xml.dom.ProcessingInstructionImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    public volatile org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1, r2;
        org.apache.harmony.xml.dom.ProcessingInstructionImpl $r3;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ProcessingInstructionImpl createProcessingInstruction(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public org.apache.harmony.xml.dom.TextImpl createTextNode(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.TextImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.harmony.xml.dom.TextImpl;

        specialinvoke $r2.<org.apache.harmony.xml.dom.TextImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String)>(r0, r1);

        return $r2;
    }

    public volatile org.w3c.dom.Text createTextNode(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.TextImpl $r2;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.TextImpl createTextNode(java.lang.String)>(r1);

        return $r2;
    }

    public org.w3c.dom.DocumentType getDoctype()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.util.Iterator r1;
        org.apache.harmony.xml.dom.LeafNodeImpl r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        org.w3c.dom.DocumentType $r5;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $r3 = r0.<org.apache.harmony.xml.dom.DocumentImpl: java.util.List children>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.harmony.xml.dom.LeafNodeImpl) $r4;

        $z1 = r2 instanceof org.w3c.dom.DocumentType;

        if $z1 == 0 goto label1;

        $r5 = (org.w3c.dom.DocumentType) r2;

        return $r5;

     label2:
        return null;
    }

    public org.w3c.dom.Element getDocumentElement()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.util.Iterator r1;
        org.apache.harmony.xml.dom.LeafNodeImpl r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        org.w3c.dom.Element $r5;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $r3 = r0.<org.apache.harmony.xml.dom.DocumentImpl: java.util.List children>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.harmony.xml.dom.LeafNodeImpl) $r4;

        $z1 = r2 instanceof org.w3c.dom.Element;

        if $z1 == 0 goto label1;

        $r5 = (org.w3c.dom.Element) r2;

        return $r5;

     label2:
        return null;
    }

    public java.lang.String getDocumentURI()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String documentUri>;

        return $r1;
    }

    public org.w3c.dom.DOMConfiguration getDomConfig()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.apache.harmony.xml.dom.DOMConfigurationImpl $r1, $r2, $r3;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.DOMConfigurationImpl domConfiguration>;

        if $r1 != null goto label1;

        $r3 = new org.apache.harmony.xml.dom.DOMConfigurationImpl;

        specialinvoke $r3.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void <init>()>();

        r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.DOMConfigurationImpl domConfiguration> = $r3;

     label1:
        $r2 = r0.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.DOMConfigurationImpl domConfiguration>;

        return $r2;
    }

    public org.w3c.dom.Element getElementById(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.ElementImpl r2;
        org.w3c.dom.Element $r3, $r4;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Element getDocumentElement()>();

        r2 = (org.apache.harmony.xml.dom.ElementImpl) $r3;

        if r2 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r2.<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.Element getElementById(java.lang.String)>(r1);

        return $r4;
    }

    public org.w3c.dom.NodeList getElementsByTagName(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.NodeListImpl r2, $r3;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = new org.apache.harmony.xml.dom.NodeListImpl;

        specialinvoke $r3.<org.apache.harmony.xml.dom.NodeListImpl: void <init>()>();

        r2 = $r3;

        virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: void getElementsByTagName(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String)>(r2, r1);

        return r2;
    }

    public org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1, r2;
        org.apache.harmony.xml.dom.NodeListImpl r3, $r4;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = new org.apache.harmony.xml.dom.NodeListImpl;

        specialinvoke $r4.<org.apache.harmony.xml.dom.NodeListImpl: void <init>()>();

        r3 = $r4;

        virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: void getElementsByTagNameNS(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String,java.lang.String)>(r3, r1, r2);

        return r3;
    }

    public org.w3c.dom.DOMImplementation getImplementation()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.w3c.dom.DOMImplementation $r1;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMImplementation domImplementation>;

        return $r1;
    }

    public java.lang.String getInputEncoding()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String inputEncoding>;

        return $r1;
    }

    public java.lang.String getNodeName()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        return "#document";
    }

    public short getNodeType()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        return 9;
    }

    public boolean getStrictErrorChecking()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $z0 = r0.<org.apache.harmony.xml.dom.DocumentImpl: boolean strictErrorChecking>;

        return $z0;
    }

    public java.lang.String getTextContent()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        return null;
    }

    java.util.Map getUserDataMap(org.apache.harmony.xml.dom.NodeImpl)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.apache.harmony.xml.dom.NodeImpl r1;
        java.util.Map r2;
        java.util.WeakHashMap $r3, $r4, $r7, $r9;
        java.lang.Object $r5;
        java.util.HashMap $r6;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: org.apache.harmony.xml.dom.NodeImpl;

        $r3 = r0.<org.apache.harmony.xml.dom.DocumentImpl: java.util.WeakHashMap nodeToUserData>;

        if $r3 != null goto label1;

        $r9 = new java.util.WeakHashMap;

        specialinvoke $r9.<java.util.WeakHashMap: void <init>()>();

        r0.<org.apache.harmony.xml.dom.DocumentImpl: java.util.WeakHashMap nodeToUserData> = $r9;

     label1:
        $r4 = r0.<org.apache.harmony.xml.dom.DocumentImpl: java.util.WeakHashMap nodeToUserData>;

        $r5 = virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.util.Map) $r5;

        if r2 != null goto label2;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r2 = $r6;

        $r7 = r0.<org.apache.harmony.xml.dom.DocumentImpl: java.util.WeakHashMap nodeToUserData>;

        virtualinvoke $r7.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label2:
        return r2;
    }

    java.util.Map getUserDataMapForRead(org.apache.harmony.xml.dom.NodeImpl)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.apache.harmony.xml.dom.NodeImpl r1;
        java.util.Map r2, $r6;
        java.util.WeakHashMap $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: org.apache.harmony.xml.dom.NodeImpl;

        $r3 = r0.<org.apache.harmony.xml.dom.DocumentImpl: java.util.WeakHashMap nodeToUserData>;

        if $r3 != null goto label2;

        r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

     label1:
        return r2;

     label2:
        $r4 = r0.<org.apache.harmony.xml.dom.DocumentImpl: java.util.WeakHashMap nodeToUserData>;

        $r5 = virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.util.Map) $r5;

        if r2 != null goto label1;

        $r6 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r6;
    }

    public java.lang.String getXmlEncoding()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String xmlEncoding>;

        return $r1;
    }

    public boolean getXmlStandalone()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $z0 = r0.<org.apache.harmony.xml.dom.DocumentImpl: boolean xmlStandalone>;

        return $z0;
    }

    public java.lang.String getXmlVersion()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String xmlVersion>;

        return $r1;
    }

    public org.w3c.dom.Node importNode(org.w3c.dom.Node, boolean)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.w3c.dom.Node r1, $r2;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Node cloneOrImportNode(short,org.w3c.dom.Node,boolean)>(2, r1, z0);

        return $r2;
    }

    public org.w3c.dom.Node insertChildAt(org.w3c.dom.Node, int)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.w3c.dom.Node r1, $r2;
        int i0;
        boolean $z0, $z1;
        org.w3c.dom.DocumentType $r3;
        org.w3c.dom.DOMException $r4, $r6;
        org.w3c.dom.Element $r5;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        i0 := @parameter1: int;

        $z0 = r1 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Element getDocumentElement()>();

        if $r5 == null goto label1;

        $r6 = new org.w3c.dom.DOMException;

        specialinvoke $r6.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, "Only one root element allowed");

        throw $r6;

     label1:
        $z1 = r1 instanceof org.w3c.dom.DocumentType;

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DocumentType getDoctype()>();

        if $r3 == null goto label2;

        $r4 = new org.w3c.dom.DOMException;

        specialinvoke $r4.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, "Only one DOCTYPE element allowed");

        throw $r4;

     label2:
        $r2 = specialinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node insertChildAt(org.w3c.dom.Node,int)>(r1, i0);

        return $r2;
    }

    public void normalizeDocument()
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.w3c.dom.Element r1;
        org.w3c.dom.DOMConfiguration $r2;
        org.apache.harmony.xml.dom.DOMConfigurationImpl $r3;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Element getDocumentElement()>();

        if r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMConfiguration getDomConfig()>();

        $r3 = (org.apache.harmony.xml.dom.DOMConfigurationImpl) $r2;

        virtualinvoke $r3.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void normalize(org.w3c.dom.Node)>(r1);

        return;
    }

    public org.w3c.dom.Node renameNode(org.w3c.dom.Node, java.lang.String, java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        org.w3c.dom.Node r1;
        java.lang.String r2, r3;
        org.w3c.dom.Document $r4;
        org.apache.harmony.xml.dom.NodeImpl $r5;
        org.w3c.dom.DOMException $r6;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        if $r4 == r0 goto label1;

        $r6 = new org.w3c.dom.DOMException;

        specialinvoke $r6.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(4, null);

        throw $r6;

     label1:
        $r5 = (org.apache.harmony.xml.dom.NodeImpl) r1;

        staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: void setNameNS(org.apache.harmony.xml.dom.NodeImpl,java.lang.String,java.lang.String)>($r5, r2, r3);

        staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: void notifyUserDataHandlers(short,org.w3c.dom.Node,org.apache.harmony.xml.dom.NodeImpl)>(4, r1, null);

        return r1;
    }

    public void setDocumentURI(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String documentUri> = r1;

        return;
    }

    public void setStrictErrorChecking(boolean)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.harmony.xml.dom.DocumentImpl: boolean strictErrorChecking> = z0;

        return;
    }

    public void setXmlStandalone(boolean)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.harmony.xml.dom.DocumentImpl: boolean xmlStandalone> = z0;

        return;
    }

    public void setXmlVersion(java.lang.String)
    {
        org.apache.harmony.xml.dom.DocumentImpl r0;
        java.lang.String r1;

        r0 := @this: org.apache.harmony.xml.dom.DocumentImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String xmlVersion> = r1;

        return;
    }
}
