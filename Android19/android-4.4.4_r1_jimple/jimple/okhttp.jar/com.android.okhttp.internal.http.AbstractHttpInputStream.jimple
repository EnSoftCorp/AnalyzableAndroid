abstract class com.android.okhttp.internal.http.AbstractHttpInputStream extends java.io.InputStream
{
    private final java.io.OutputStream cacheBody;
    private final java.net.CacheRequest cacheRequest;
    protected boolean closed;
    protected final com.android.okhttp.internal.http.HttpEngine httpEngine;
    protected final java.io.InputStream in;

    void <init>(java.io.InputStream, com.android.okhttp.internal.http.HttpEngine, java.net.CacheRequest) throws java.io.IOException
    {
        com.android.okhttp.internal.http.AbstractHttpInputStream r0;
        java.io.InputStream r1;
        com.android.okhttp.internal.http.HttpEngine r2;
        java.net.CacheRequest r3;
        java.io.OutputStream r4;

        r0 := @this: com.android.okhttp.internal.http.AbstractHttpInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.android.okhttp.internal.http.HttpEngine;

        r3 := @parameter2: java.net.CacheRequest;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: java.io.InputStream in> = r1;

        r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: com.android.okhttp.internal.http.HttpEngine httpEngine> = r2;

        if r3 == null goto label3;

        r4 = virtualinvoke r3.<java.net.CacheRequest: java.io.OutputStream getBody()>();

     label1:
        if r4 != null goto label2;

        r3 = null;

     label2:
        r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: java.io.OutputStream cacheBody> = r4;

        r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: java.net.CacheRequest cacheRequest> = r3;

        return;

     label3:
        r4 = null;

        goto label1;
    }

    protected final void cacheWrite(byte[], int, int) throws java.io.IOException
    {
        com.android.okhttp.internal.http.AbstractHttpInputStream r0;
        byte[] r1;
        int i0, i1;
        java.io.OutputStream $r2, $r3;

        r0 := @this: com.android.okhttp.internal.http.AbstractHttpInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: java.io.OutputStream cacheBody>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: java.io.OutputStream cacheBody>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

     label1:
        return;
    }

    protected final void checkNotClosed() throws java.io.IOException
    {
        com.android.okhttp.internal.http.AbstractHttpInputStream r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: com.android.okhttp.internal.http.AbstractHttpInputStream;

        $z0 = r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("stream closed");

        throw $r1;

     label1:
        return;
    }

    protected final void endOfInput(boolean) throws java.io.IOException
    {
        com.android.okhttp.internal.http.AbstractHttpInputStream r0;
        boolean z0;
        java.net.CacheRequest $r1;
        com.android.okhttp.internal.http.HttpEngine $r2;
        java.io.OutputStream $r3;

        r0 := @this: com.android.okhttp.internal.http.AbstractHttpInputStream;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: java.net.CacheRequest cacheRequest>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: java.io.OutputStream cacheBody>;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label1:
        $r2 = r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        virtualinvoke $r2.<com.android.okhttp.internal.http.HttpEngine: void release(boolean)>(z0);

        return;
    }

    public final int read() throws java.io.IOException
    {
        com.android.okhttp.internal.http.AbstractHttpInputStream r0;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.AbstractHttpInputStream;

        $i0 = staticinvoke <com.android.okhttp.internal.Util: int readSingleByte(java.io.InputStream)>(r0);

        return $i0;
    }

    protected final void unexpectedEndOfInput()
    {
        com.android.okhttp.internal.http.AbstractHttpInputStream r0;
        java.net.CacheRequest $r1, $r3;
        com.android.okhttp.internal.http.HttpEngine $r2;

        r0 := @this: com.android.okhttp.internal.http.AbstractHttpInputStream;

        $r1 = r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: java.net.CacheRequest cacheRequest>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: java.net.CacheRequest cacheRequest>;

        virtualinvoke $r3.<java.net.CacheRequest: void abort()>();

     label1:
        $r2 = r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        virtualinvoke $r2.<com.android.okhttp.internal.http.HttpEngine: void release(boolean)>(1);

        return;
    }
}
