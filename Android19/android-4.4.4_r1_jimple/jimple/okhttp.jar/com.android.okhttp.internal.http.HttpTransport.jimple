public final class com.android.okhttp.internal.http.HttpTransport extends java.lang.Object implements com.android.okhttp.internal.http.Transport
{
    public static final int DEFAULT_CHUNK_LENGTH;
    private static final int DISCARD_STREAM_TIMEOUT_MILLIS;
    private final com.android.okhttp.internal.http.HttpEngine httpEngine;
    private java.io.OutputStream requestOut;
    private final java.io.InputStream socketIn;
    private final java.io.OutputStream socketOut;

    public void <init>(com.android.okhttp.internal.http.HttpEngine, java.io.OutputStream, java.io.InputStream)
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.internal.http.HttpEngine r1;
        java.io.OutputStream r2;
        java.io.InputStream r3;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        r1 := @parameter0: com.android.okhttp.internal.http.HttpEngine;

        r2 := @parameter1: java.io.OutputStream;

        r3 := @parameter2: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine> = r1;

        r0.<com.android.okhttp.internal.http.HttpTransport: java.io.OutputStream socketOut> = r2;

        r0.<com.android.okhttp.internal.http.HttpTransport: java.io.OutputStream requestOut> = r2;

        r0.<com.android.okhttp.internal.http.HttpTransport: java.io.InputStream socketIn> = r3;

        return;
    }

    static boolean access$200(com.android.okhttp.internal.http.HttpEngine, java.io.InputStream)
    {
        com.android.okhttp.internal.http.HttpEngine r0;
        java.io.InputStream r1;
        boolean $z0;

        r0 := @parameter0: com.android.okhttp.internal.http.HttpEngine;

        r1 := @parameter1: java.io.InputStream;

        $z0 = staticinvoke <com.android.okhttp.internal.http.HttpTransport: boolean discardStream(com.android.okhttp.internal.http.HttpEngine,java.io.InputStream)>(r0, r1);

        return $z0;
    }

    static com.android.okhttp.internal.http.HttpEngine access$300(com.android.okhttp.internal.http.HttpTransport)
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.internal.http.HttpEngine $r1;

        r0 := @parameter0: com.android.okhttp.internal.http.HttpTransport;

        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        return $r1;
    }

    static java.io.InputStream access$400(com.android.okhttp.internal.http.HttpTransport)
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        java.io.InputStream $r1;

        r0 := @parameter0: com.android.okhttp.internal.http.HttpTransport;

        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.InputStream socketIn>;

        return $r1;
    }

    private static boolean discardStream(com.android.okhttp.internal.http.HttpEngine, java.io.InputStream)
    {
        com.android.okhttp.internal.http.HttpEngine r0;
        java.io.InputStream r1;
        com.android.okhttp.Connection r2;
        java.net.Socket r3;
        int i0;
        java.lang.Throwable r5, $r6;
        java.io.IOException $r7;

        r0 := @parameter0: com.android.okhttp.internal.http.HttpEngine;

        r1 := @parameter1: java.io.InputStream;

        r2 = r0.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.Connection connection>;

        if r2 != null goto label2;

     label1:
        return 0;

     label2:
        r3 = virtualinvoke r2.<com.android.okhttp.Connection: java.net.Socket getSocket()>();

        if r3 == null goto label1;

     label3:
        i0 = virtualinvoke r3.<java.net.Socket: int getSoTimeout()>();

        virtualinvoke r3.<java.net.Socket: void setSoTimeout(int)>(100);

     label4:
        staticinvoke <com.android.okhttp.internal.Util: void skipAll(java.io.InputStream)>(r1);

     label5:
        virtualinvoke r3.<java.net.Socket: void setSoTimeout(int)>(i0);

     label6:
        return 1;

     label7:
        $r6 := @caughtexception;

        r5 = $r6;

     label8:
        virtualinvoke r3.<java.net.Socket: void setSoTimeout(int)>(i0);

        throw r5;

     label9:
        $r7 := @caughtexception;

        return 0;

        catch java.io.IOException from label3 to label4 with label9;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.io.IOException from label5 to label6 with label9;
        catch java.io.IOException from label8 to label9 with label9;
    }

    public java.io.OutputStream createRequestBody() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        boolean z0;
        long l0, l1;
        int i2, $i6, $i7, $i8;
        com.android.okhttp.internal.http.HttpEngine $r1, $r3, $r5, $r9, $r13, $r18, $r19, $r21;
        com.android.okhttp.internal.http.RequestHeaders $r2, $r6, $r12, $r22;
        com.android.okhttp.internal.http.Policy $r4, $r15, $r20;
        byte $b3, $b4, $b5;
        com.android.okhttp.internal.http.RetryableOutputStream $r7, $r8;
        java.lang.IllegalArgumentException $r10;
        com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream $r11;
        java.io.OutputStream $r14, $r16;
        com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream $r17;
        com.android.okhttp.Connection $r23;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r2 = $r1.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.RequestHeaders requestHeaders>;

        z0 = virtualinvoke $r2.<com.android.okhttp.internal.http.RequestHeaders: boolean isChunked()>();

        if z0 != 0 goto label1;

        $r19 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r20 = $r19.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.Policy policy>;

        $i7 = interfaceinvoke $r20.<com.android.okhttp.internal.http.Policy: int getChunkLength()>();

        if $i7 <= 0 goto label1;

        $r18 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r23 = $r18.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.Connection connection>;

        $i8 = virtualinvoke $r23.<com.android.okhttp.Connection: int getHttpMinorVersion()>();

        if $i8 == 0 goto label1;

        $r21 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r22 = $r21.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.RequestHeaders requestHeaders>;

        virtualinvoke $r22.<com.android.okhttp.internal.http.RequestHeaders: void setChunked()>();

        z0 = 1;

     label1:
        if z0 == 0 goto label3;

        $r13 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r15 = $r13.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.Policy policy>;

        i2 = interfaceinvoke $r15.<com.android.okhttp.internal.http.Policy: int getChunkLength()>();

        if i2 != -1 goto label2;

        i2 = 1024;

     label2:
        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport: void writeRequestHeaders()>();

        $r17 = new com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream;

        $r16 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.OutputStream requestOut>;

        specialinvoke $r17.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: void <init>(java.io.OutputStream,int,com.android.okhttp.internal.http.HttpTransport$1)>($r16, i2, null);

        return $r17;

     label3:
        $r3 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r4 = $r3.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.Policy policy>;

        l0 = interfaceinvoke $r4.<com.android.okhttp.internal.http.Policy: long getFixedContentLength()>();

        $b3 = l0 cmp -1L;

        if $b3 == 0 goto label4;

        $r9 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r12 = $r9.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.RequestHeaders requestHeaders>;

        virtualinvoke $r12.<com.android.okhttp.internal.http.RequestHeaders: void setContentLength(long)>(l0);

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport: void writeRequestHeaders()>();

        $r11 = new com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream;

        $r14 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.OutputStream requestOut>;

        specialinvoke $r11.<com.android.okhttp.internal.http.HttpTransport$FixedLengthOutputStream: void <init>(java.io.OutputStream,long,com.android.okhttp.internal.http.HttpTransport$1)>($r14, l0, null);

        return $r11;

     label4:
        $r5 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r6 = $r5.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.RequestHeaders requestHeaders>;

        l1 = virtualinvoke $r6.<com.android.okhttp.internal.http.RequestHeaders: long getContentLength()>();

        $b4 = l1 cmp 2147483647L;

        if $b4 <= 0 goto label5;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Use setFixedLengthStreamingMode() or setChunkedStreamingMode() for requests larger than 2 GiB.");

        throw $r10;

     label5:
        $b5 = l1 cmp -1L;

        if $b5 == 0 goto label6;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport: void writeRequestHeaders()>();

        $r8 = new com.android.okhttp.internal.http.RetryableOutputStream;

        $i6 = (int) l1;

        specialinvoke $r8.<com.android.okhttp.internal.http.RetryableOutputStream: void <init>(int)>($i6);

        return $r8;

     label6:
        $r7 = new com.android.okhttp.internal.http.RetryableOutputStream;

        specialinvoke $r7.<com.android.okhttp.internal.http.RetryableOutputStream: void <init>()>();

        return $r7;
    }

    public void flushRequest() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        java.io.OutputStream $r1, $r2;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.OutputStream requestOut>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.OutputStream socketOut>;

        r0.<com.android.okhttp.internal.http.HttpTransport: java.io.OutputStream requestOut> = $r2;

        return;
    }

    public java.io.InputStream getTransferStream(java.net.CacheRequest) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        java.net.CacheRequest r1;
        com.android.okhttp.internal.http.HttpEngine $r2, $r3, $r5, $r8, $r11, $r13, $r19;
        boolean $z0, $z1;
        com.android.okhttp.internal.http.ResponseHeaders $r4, $r6, $r12;
        int $i0, $i1;
        com.android.okhttp.internal.http.UnknownLengthHttpInputStream $r7;
        java.io.InputStream $r9, $r14, $r17, $r18;
        com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream $r10, $r16;
        com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream $r15;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        r1 := @parameter0: java.net.CacheRequest;

        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $z0 = virtualinvoke $r2.<com.android.okhttp.internal.http.HttpEngine: boolean hasResponseBody()>();

        if $z0 != 0 goto label1;

        $r16 = new com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream;

        $r18 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.InputStream socketIn>;

        $r19 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        specialinvoke $r16.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: void <init>(java.io.InputStream,java.net.CacheRequest,com.android.okhttp.internal.http.HttpEngine,int)>($r18, r1, $r19, 0);

        return $r16;

     label1:
        $r3 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r4 = $r3.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.ResponseHeaders responseHeaders>;

        $z1 = virtualinvoke $r4.<com.android.okhttp.internal.http.ResponseHeaders: boolean isChunked()>();

        if $z1 == 0 goto label2;

        $r15 = new com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream;

        $r17 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.InputStream socketIn>;

        specialinvoke $r15.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: void <init>(java.io.InputStream,java.net.CacheRequest,com.android.okhttp.internal.http.HttpTransport)>($r17, r1, r0);

        return $r15;

     label2:
        $r5 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r6 = $r5.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.ResponseHeaders responseHeaders>;

        $i0 = virtualinvoke $r6.<com.android.okhttp.internal.http.ResponseHeaders: int getContentLength()>();

        if $i0 == -1 goto label3;

        $r10 = new com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream;

        $r14 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.InputStream socketIn>;

        $r13 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r11 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r12 = $r11.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.ResponseHeaders responseHeaders>;

        $i1 = virtualinvoke $r12.<com.android.okhttp.internal.http.ResponseHeaders: int getContentLength()>();

        specialinvoke $r10.<com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream: void <init>(java.io.InputStream,java.net.CacheRequest,com.android.okhttp.internal.http.HttpEngine,int)>($r14, r1, $r13, $i1);

        return $r10;

     label3:
        $r7 = new com.android.okhttp.internal.http.UnknownLengthHttpInputStream;

        $r9 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.InputStream socketIn>;

        $r8 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        specialinvoke $r7.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: void <init>(java.io.InputStream,java.net.CacheRequest,com.android.okhttp.internal.http.HttpEngine)>($r9, r1, $r8);

        return $r7;
    }

    public boolean makeReusable(boolean, java.io.OutputStream, java.io.InputStream)
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.io.OutputStream r1;
        java.io.InputStream r2;
        com.android.okhttp.internal.http.HttpEngine $r3, $r5, $r7, $r8;
        com.android.okhttp.internal.http.RequestHeaders $r4;
        com.android.okhttp.internal.http.ResponseHeaders $r6, $r9;
        com.android.okhttp.internal.AbstractOutputStream $r10;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: java.io.InputStream;

        if z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        if r1 == null goto label3;

        $r10 = (com.android.okhttp.internal.AbstractOutputStream) r1;

        $z5 = virtualinvoke $r10.<com.android.okhttp.internal.AbstractOutputStream: boolean isClosed()>();

        if $z5 == 0 goto label1;

     label3:
        $r3 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r4 = $r3.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.RequestHeaders requestHeaders>;

        $z1 = virtualinvoke $r4.<com.android.okhttp.internal.http.RequestHeaders: boolean hasConnectionClose()>();

        if $z1 != 0 goto label1;

        $r5 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r6 = $r5.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.ResponseHeaders responseHeaders>;

        if $r6 == null goto label4;

        $r8 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r9 = $r8.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.ResponseHeaders responseHeaders>;

        $z4 = virtualinvoke $r9.<com.android.okhttp.internal.http.ResponseHeaders: boolean hasConnectionClose()>();

        if $z4 != 0 goto label1;

     label4:
        $z2 = r2 instanceof com.android.okhttp.internal.http.UnknownLengthHttpInputStream;

        if $z2 != 0 goto label1;

        if r2 == null goto label5;

        $r7 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $z3 = staticinvoke <com.android.okhttp.internal.http.HttpTransport: boolean discardStream(com.android.okhttp.internal.http.HttpEngine,java.io.InputStream)>($r7, r2);

        return $z3;

     label5:
        return 1;
    }

    public com.android.okhttp.internal.http.ResponseHeaders readResponseHeaders() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.internal.http.RawHeaders r1;
        com.android.okhttp.internal.http.ResponseHeaders r2, $r7;
        java.io.InputStream $r3;
        com.android.okhttp.internal.http.HttpEngine $r4, $r6, $r8;
        com.android.okhttp.Connection $r5;
        int $i0;
        java.net.URI $r9;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        $r3 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.InputStream socketIn>;

        r1 = staticinvoke <com.android.okhttp.internal.http.RawHeaders: com.android.okhttp.internal.http.RawHeaders fromBytes(java.io.InputStream)>($r3);

        $r4 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r5 = $r4.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.Connection connection>;

        $i0 = virtualinvoke r1.<com.android.okhttp.internal.http.RawHeaders: int getHttpMinorVersion()>();

        virtualinvoke $r5.<com.android.okhttp.Connection: void setHttpMinorVersion(int)>($i0);

        $r6 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        virtualinvoke $r6.<com.android.okhttp.internal.http.HttpEngine: void receiveHeaders(com.android.okhttp.internal.http.RawHeaders)>(r1);

        $r7 = new com.android.okhttp.internal.http.ResponseHeaders;

        $r8 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r9 = $r8.<com.android.okhttp.internal.http.HttpEngine: java.net.URI uri>;

        specialinvoke $r7.<com.android.okhttp.internal.http.ResponseHeaders: void <init>(java.net.URI,com.android.okhttp.internal.http.RawHeaders)>($r9, r1);

        r2 = $r7;

        virtualinvoke r2.<com.android.okhttp.internal.http.ResponseHeaders: void setTransport(java.lang.String)>("http/1.1");

        return r2;
    }

    public void writeRequestBody(com.android.okhttp.internal.http.RetryableOutputStream) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.internal.http.RetryableOutputStream r1;
        java.io.OutputStream $r2;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        r1 := @parameter0: com.android.okhttp.internal.http.RetryableOutputStream;

        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.OutputStream requestOut>;

        virtualinvoke r1.<com.android.okhttp.internal.http.RetryableOutputStream: void writeToSocket(java.io.OutputStream)>($r2);

        return;
    }

    public void writeRequestHeaders() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        byte[] r1;
        com.android.okhttp.internal.http.HttpEngine $r2, $r3;
        com.android.okhttp.internal.http.RequestHeaders $r4;
        com.android.okhttp.internal.http.RawHeaders $r5;
        java.io.OutputStream $r6;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        virtualinvoke $r2.<com.android.okhttp.internal.http.HttpEngine: void writingRequestHeaders()>();

        $r3 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r4 = $r3.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.RequestHeaders requestHeaders>;

        $r5 = virtualinvoke $r4.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders getHeaders()>();

        r1 = virtualinvoke $r5.<com.android.okhttp.internal.http.RawHeaders: byte[] toBytes()>();

        $r6 = r0.<com.android.okhttp.internal.http.HttpTransport: java.io.OutputStream requestOut>;

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[])>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.okhttp.internal.http.HttpTransport: int DISCARD_STREAM_TIMEOUT_MILLIS> = 100;

        <com.android.okhttp.internal.http.HttpTransport: int DEFAULT_CHUNK_LENGTH> = 1024;

        return;
    }
}
