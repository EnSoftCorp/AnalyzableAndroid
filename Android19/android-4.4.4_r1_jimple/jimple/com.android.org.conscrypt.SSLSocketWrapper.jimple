public class com.android.org.conscrypt.SSLSocketWrapper extends com.android.org.conscrypt.SSLSocketImpl
{
    private final boolean autoClose;
    private final java.net.Socket socket;

    protected void <init>(java.net.Socket, java.lang.String, int, boolean, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket r1;
        java.lang.String r2;
        int i0;
        boolean z0, $z1;
        com.android.org.conscrypt.SSLParametersImpl r3;
        java.net.SocketException $r4;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r3 := @parameter4: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<com.android.org.conscrypt.SSLSocketImpl: void <init>(java.lang.String,int,com.android.org.conscrypt.SSLParametersImpl)>(r2, i0, r3);

        $z1 = virtualinvoke r1.<java.net.Socket: boolean isConnected()>();

        if $z1 != 0 goto label1;

        $r4 = new java.net.SocketException;

        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("Socket is not connected.");

        throw $r4;

     label1:
        r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket> = r1;

        r0.<com.android.org.conscrypt.SSLSocketWrapper: boolean autoClose> = z0;

        virtualinvoke r0.<com.android.org.conscrypt.SSLSocketWrapper: void init()>();

        return;
    }

    public void bind(java.net.SocketAddress) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.SocketAddress r1;
        java.io.IOException $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        r1 := @parameter0: java.net.SocketAddress;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Underlying socket is already connected.");

        throw $r2;
    }

    protected void closeTransportLayer() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        boolean $z0;
        java.io.InputStream $r1, $r3;
        java.net.Socket $r2;
        java.io.OutputStream $r4;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $z0 = r0.<com.android.org.conscrypt.SSLSocketWrapper: boolean autoClose>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.io.InputStream input>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void close()>();

        $r3 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.io.InputStream input>;

        virtualinvoke $r3.<java.io.InputStream: void close()>();

        $r4 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.io.OutputStream output>;

        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label1:
        return;
    }

    public void connect(java.net.SocketAddress) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.SocketAddress r1;
        java.io.IOException $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        r1 := @parameter0: java.net.SocketAddress;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Underlying socket is already connected.");

        throw $r2;
    }

    public void connect(java.net.SocketAddress, int) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.SocketAddress r1;
        int i0;
        java.io.IOException $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        r1 := @parameter0: java.net.SocketAddress;

        i0 := @parameter1: int;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Underlying socket is already connected.");

        throw $r2;
    }

    public java.io.FileDescriptor getFileDescriptor$()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $r2 = virtualinvoke $r1.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        return $r2;
    }

    public java.net.InetAddress getInetAddress()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        java.net.InetAddress $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $r2 = virtualinvoke $r1.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        return $r2;
    }

    public boolean getKeepAlive() throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean getKeepAlive()>();

        return $z0;
    }

    public java.net.InetAddress getLocalAddress()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        java.net.InetAddress $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $r2 = virtualinvoke $r1.<java.net.Socket: java.net.InetAddress getLocalAddress()>();

        return $r2;
    }

    public int getLocalPort()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        int $i0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getLocalPort()>();

        return $i0;
    }

    public java.net.SocketAddress getLocalSocketAddress()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        java.net.SocketAddress $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $r2 = virtualinvoke $r1.<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>();

        return $r2;
    }

    public boolean getOOBInline() throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean getOOBInline()>();

        return $z0;
    }

    public int getPort()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        int $i0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getPort()>();

        return $i0;
    }

    public int getReceiveBufferSize() throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        int $i0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getReceiveBufferSize()>();

        return $i0;
    }

    public java.net.SocketAddress getRemoteSocketAddress()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        java.net.SocketAddress $r2;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $r2 = virtualinvoke $r1.<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>();

        return $r2;
    }

    public boolean getReuseAddress() throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean getReuseAddress()>();

        return $z0;
    }

    public int getSendBufferSize() throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        int $i0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getSendBufferSize()>();

        return $i0;
    }

    public int getSoLinger() throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        int $i0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getSoLinger()>();

        return $i0;
    }

    public int getSoTimeout() throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        int $i0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getSoTimeout()>();

        return $i0;
    }

    public boolean getTcpNoDelay() throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean getTcpNoDelay()>();

        return $z0;
    }

    public int getTrafficClass() throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        int $i0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getTrafficClass()>();

        return $i0;
    }

    protected void initTransportLayer() throws java.io.IOException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1, $r3;
        java.io.InputStream $r2;
        java.io.OutputStream $r4;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $r2 = virtualinvoke $r1.<java.net.Socket: java.io.InputStream getInputStream()>();

        r0.<com.android.org.conscrypt.SSLSocketWrapper: java.io.InputStream input> = $r2;

        $r3 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $r4 = virtualinvoke $r3.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        r0.<com.android.org.conscrypt.SSLSocketWrapper: java.io.OutputStream output> = $r4;

        return;
    }

    public boolean isBound()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isBound()>();

        return $z0;
    }

    public boolean isClosed()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isClosed()>();

        return $z0;
    }

    public boolean isConnected()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isConnected()>();

        return $z0;
    }

    public boolean isInputShutdown()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isInputShutdown()>();

        return $z0;
    }

    public boolean isOutputShutdown()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.net.Socket $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isOutputShutdown()>();

        return $z0;
    }

    public void setKeepAlive(boolean) throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        boolean z0;
        java.net.Socket $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setKeepAlive(boolean)>(z0);

        return;
    }

    public void setReceiveBufferSize(int) throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        int i0;
        java.net.Socket $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setReceiveBufferSize(int)>(i0);

        return;
    }

    public void setReuseAddress(boolean) throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        boolean z0;
        java.net.Socket $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setReuseAddress(boolean)>(z0);

        return;
    }

    public void setSendBufferSize(int) throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        int i0;
        java.net.Socket $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setSendBufferSize(int)>(i0);

        return;
    }

    public void setSoLinger(boolean, int) throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        boolean z0;
        int i0;
        java.net.Socket $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setSoLinger(boolean,int)>(z0, i0);

        return;
    }

    public void setSoTimeout(int) throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        int i0;
        java.net.Socket $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>(i0);

        return;
    }

    public void setTcpNoDelay(boolean) throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        boolean z0;
        java.net.Socket $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setTcpNoDelay(boolean)>(z0);

        return;
    }

    public void setTrafficClass(int) throws java.net.SocketException
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        int i0;
        java.net.Socket $r1;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setTrafficClass(int)>(i0);

        return;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.SSLSocketWrapper r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        java.net.Socket $r3;
        java.lang.String $r4, $r6;

        r0 := @this: com.android.org.conscrypt.SSLSocketWrapper;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SSL socket over ");

        $r3 = r0.<com.android.org.conscrypt.SSLSocketWrapper: java.net.Socket socket>;

        $r4 = virtualinvoke $r3.<java.net.Socket: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
