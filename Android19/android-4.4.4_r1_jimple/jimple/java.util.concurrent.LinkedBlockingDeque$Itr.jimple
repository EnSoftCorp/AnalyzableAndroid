class java.util.concurrent.LinkedBlockingDeque$Itr extends java.util.concurrent.LinkedBlockingDeque$AbstractItr
{
    final java.util.concurrent.LinkedBlockingDeque this$0;

    private void <init>(java.util.concurrent.LinkedBlockingDeque)
    {
        java.util.concurrent.LinkedBlockingDeque$Itr r0;
        java.util.concurrent.LinkedBlockingDeque r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque$Itr;

        r1 := @parameter0: java.util.concurrent.LinkedBlockingDeque;

        r0.<java.util.concurrent.LinkedBlockingDeque$Itr: java.util.concurrent.LinkedBlockingDeque this$0> = r1;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: void <init>(java.util.concurrent.LinkedBlockingDeque)>(r1);

        return;
    }

    void <init>(java.util.concurrent.LinkedBlockingDeque, java.util.concurrent.LinkedBlockingDeque$1)
    {
        java.util.concurrent.LinkedBlockingDeque$Itr r0;
        java.util.concurrent.LinkedBlockingDeque r1;
        java.util.concurrent.LinkedBlockingDeque$1 r2;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque$Itr;

        r1 := @parameter0: java.util.concurrent.LinkedBlockingDeque;

        r2 := @parameter1: java.util.concurrent.LinkedBlockingDeque$1;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque$Itr: void <init>(java.util.concurrent.LinkedBlockingDeque)>(r1);

        return;
    }

    java.util.concurrent.LinkedBlockingDeque$Node firstNode()
    {
        java.util.concurrent.LinkedBlockingDeque$Itr r0;
        java.util.concurrent.LinkedBlockingDeque $r1;
        java.util.concurrent.LinkedBlockingDeque$Node $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque$Itr;

        $r1 = r0.<java.util.concurrent.LinkedBlockingDeque$Itr: java.util.concurrent.LinkedBlockingDeque this$0>;

        $r2 = $r1.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

        return $r2;
    }

    java.util.concurrent.LinkedBlockingDeque$Node nextNode(java.util.concurrent.LinkedBlockingDeque$Node)
    {
        java.util.concurrent.LinkedBlockingDeque$Itr r0;
        java.util.concurrent.LinkedBlockingDeque$Node r1, $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque$Itr;

        r1 := @parameter0: java.util.concurrent.LinkedBlockingDeque$Node;

        $r2 = r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next>;

        return $r2;
    }
}
