public final class com.android.okhttp.internal.DiskLruCache extends java.lang.Object implements java.io.Closeable
{
    static final long ANY_SEQUENCE_NUMBER;
    private static final java.lang.String CLEAN;
    private static final java.lang.String DIRTY;
    static final java.lang.String JOURNAL_FILE;
    static final java.lang.String JOURNAL_FILE_BACKUP;
    static final java.lang.String JOURNAL_FILE_TEMP;
    static final java.util.regex.Pattern LEGAL_KEY_PATTERN;
    static final java.lang.String MAGIC;
    private static final java.io.OutputStream NULL_OUTPUT_STREAM;
    private static final java.lang.String READ;
    private static final java.lang.String REMOVE;
    static final java.lang.String VERSION_1;
    private final int appVersion;
    private final java.util.concurrent.Callable cleanupCallable;
    private final java.io.File directory;
    final java.util.concurrent.ThreadPoolExecutor executorService;
    private final java.io.File journalFile;
    private final java.io.File journalFileBackup;
    private final java.io.File journalFileTmp;
    private java.io.Writer journalWriter;
    private final java.util.LinkedHashMap lruEntries;
    private long maxSize;
    private long nextSequenceNumber;
    private int redundantOpCount;
    private long size;
    private final int valueCount;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        com.android.okhttp.internal.DiskLruCache$2 $r1;

        <com.android.okhttp.internal.DiskLruCache: java.lang.String VERSION_1> = "1";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String REMOVE> = "REMOVE";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String READ> = "READ";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String MAGIC> = "libcore.io.DiskLruCache";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String JOURNAL_FILE_TEMP> = "journal.tmp";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String JOURNAL_FILE_BACKUP> = "journal.bkp";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String JOURNAL_FILE> = "journal";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String DIRTY> = "DIRTY";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String CLEAN> = "CLEAN";

        <com.android.okhttp.internal.DiskLruCache: long ANY_SEQUENCE_NUMBER> = -1L;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[a-z0-9_-]{1,64}");

        <com.android.okhttp.internal.DiskLruCache: java.util.regex.Pattern LEGAL_KEY_PATTERN> = $r0;

        $r1 = new com.android.okhttp.internal.DiskLruCache$2;

        specialinvoke $r1.<com.android.okhttp.internal.DiskLruCache$2: void <init>()>();

        <com.android.okhttp.internal.DiskLruCache: java.io.OutputStream NULL_OUTPUT_STREAM> = $r1;

        return;
    }

    private void <init>(java.io.File, int, int, long)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.io.File r1, $r7, $r8, $r9;
        int i0, i1;
        long l2;
        java.util.LinkedHashMap $r2;
        java.util.concurrent.ThreadPoolExecutor $r3;
        java.util.concurrent.LinkedBlockingQueue $r4;
        java.util.concurrent.TimeUnit $r5;
        com.android.okhttp.internal.DiskLruCache$1 $r6;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.internal.DiskLruCache: long size> = 0L;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(int,float,boolean)>(0, 0.75F, 1);

        r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries> = $r2;

        r0.<com.android.okhttp.internal.DiskLruCache: long nextSequenceNumber> = 0L;

        $r3 = new java.util.concurrent.ThreadPoolExecutor;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r4 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r4.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(0, 1, 60L, $r5, $r4);

        r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService> = $r3;

        $r6 = new com.android.okhttp.internal.DiskLruCache$1;

        specialinvoke $r6.<com.android.okhttp.internal.DiskLruCache$1: void <init>(com.android.okhttp.internal.DiskLruCache)>(r0);

        r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.Callable cleanupCallable> = $r6;

        r0.<com.android.okhttp.internal.DiskLruCache: java.io.File directory> = r1;

        r0.<com.android.okhttp.internal.DiskLruCache: int appVersion> = i0;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "journal");

        r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile> = $r7;

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "journal.tmp");

        r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileTmp> = $r8;

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "journal.bkp");

        r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileBackup> = $r9;

        r0.<com.android.okhttp.internal.DiskLruCache: int valueCount> = i1;

        r0.<com.android.okhttp.internal.DiskLruCache: long maxSize> = l2;

        return;
    }

    static java.io.Writer access$000(com.android.okhttp.internal.DiskLruCache)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.io.Writer $r1;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        return $r1;
    }

    static void access$100(com.android.okhttp.internal.DiskLruCache) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void trimToSize()>();

        return;
    }

    static com.android.okhttp.internal.DiskLruCache$Editor access$1600(com.android.okhttp.internal.DiskLruCache, java.lang.String, long) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1;
        long l0;
        com.android.okhttp.internal.DiskLruCache$Editor $r2;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $r2 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: com.android.okhttp.internal.DiskLruCache$Editor edit(java.lang.String,long)>(r1, l0);

        return $r2;
    }

    static java.lang.String access$1700(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.lang.String $r1;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.android.okhttp.internal.DiskLruCache: java.lang.String inputStreamToString(java.io.InputStream)>(r0);

        return $r1;
    }

    static int access$1800(com.android.okhttp.internal.DiskLruCache)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        int $i0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        $i0 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        return $i0;
    }

    static java.io.File access$1900(com.android.okhttp.internal.DiskLruCache)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.io.File $r1;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File directory>;

        return $r1;
    }

    static boolean access$200(com.android.okhttp.internal.DiskLruCache)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        boolean $z0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        $z0 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: boolean journalRebuildRequired()>();

        return $z0;
    }

    static java.io.OutputStream access$2000()
    {
        java.io.OutputStream $r0;

        $r0 = <com.android.okhttp.internal.DiskLruCache: java.io.OutputStream NULL_OUTPUT_STREAM>;

        return $r0;
    }

    static void access$2200(com.android.okhttp.internal.DiskLruCache, com.android.okhttp.internal.DiskLruCache$Editor, boolean) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        com.android.okhttp.internal.DiskLruCache$Editor r1;
        boolean z0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter1: com.android.okhttp.internal.DiskLruCache$Editor;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void completeEdit(com.android.okhttp.internal.DiskLruCache$Editor,boolean)>(r1, z0);

        return;
    }

    static void access$300(com.android.okhttp.internal.DiskLruCache) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void rebuildJournal()>();

        return;
    }

    static int access$402(com.android.okhttp.internal.DiskLruCache, int)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        int i0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        i0 := @parameter1: int;

        r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount> = i0;

        return i0;
    }

    private void checkNotClosed()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.io.Writer $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cache is closed");

        throw $r2;

     label1:
        return;
    }

    private void completeEdit(com.android.okhttp.internal.DiskLruCache$Editor, boolean) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        com.android.okhttp.internal.DiskLruCache$Editor r1, $r6;
        boolean z0, $z1, $z2, $z4, $z5, $z7, $z8, $z9;
        java.lang.Throwable r2, $r37;
        com.android.okhttp.internal.DiskLruCache$Entry r3;
        int i0, i4, $i5, $i6, $i7, $i16;
        long l1, l2, l3, $l8, $l9, $l12, $l13, $l14, $l15;
        java.io.File r4, r5, $r33;
        java.util.LinkedHashMap $r8;
        java.lang.StringBuilder $r9, $r13, $r14, $r15, $r22, $r23, $r25, $r28, $r29, $r35, $r38, $r39;
        java.io.Writer $r10, $r18, $r26;
        java.lang.String $r11, $r16, $r17, $r24, $r27, $r30, $r41;
        java.util.concurrent.ThreadPoolExecutor $r19;
        byte $b10;
        java.util.concurrent.Callable $r21;
        long[] $r31, $r32;
        java.lang.IllegalStateException $r34, $r40;
        boolean[] $r36;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: com.android.okhttp.internal.DiskLruCache$Editor;

        z0 := @parameter1: boolean;

        entermonitor r0;

     label01:
        r3 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Editor: com.android.okhttp.internal.DiskLruCache$Entry access$1400(com.android.okhttp.internal.DiskLruCache$Editor)>(r1);

        $r6 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        if $r6 == r1 goto label03;

        $r40 = new java.lang.IllegalStateException;

        specialinvoke $r40.<java.lang.IllegalStateException: void <init>()>();

        throw $r40;

     label02:
        $r37 := @caughtexception;

        r2 = $r37;

        exitmonitor r0;

        throw r2;

     label03:
        if z0 == 0 goto label10;

     label04:
        $z8 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: boolean access$600(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        if $z8 != 0 goto label10;

     label05:
        i4 = 0;

     label06:
        $i16 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i4 >= $i16 goto label10;

        $r36 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Editor: boolean[] access$1500(com.android.okhttp.internal.DiskLruCache$Editor)>(r1);

        $z9 = $r36[i4];

        if $z9 != 0 goto label07;

        virtualinvoke r1.<com.android.okhttp.internal.DiskLruCache$Editor: void abort()>();

        $r34 = new java.lang.IllegalStateException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Newly created entry didn\'t create value for index ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r41);

        throw $r34;

     label07:
        $r33 = virtualinvoke r3.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i4);

        $z7 = virtualinvoke $r33.<java.io.File: boolean exists()>();

        if $z7 != 0 goto label09;

        virtualinvoke r1.<com.android.okhttp.internal.DiskLruCache$Editor: void abort()>();

     label08:
        exitmonitor r0;

        return;

     label09:
        i4 = i4 + 1;

        goto label06;

     label10:
        i0 = 0;

     label11:
        $i5 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i0 >= $i5 goto label17;

        r4 = virtualinvoke r3.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i0);

     label12:
        if z0 == 0 goto label15;

     label13:
        $z5 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z5 == 0 goto label25;

        r5 = virtualinvoke r3.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i0);

        virtualinvoke r4.<java.io.File: boolean renameTo(java.io.File)>(r5);

        $r32 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        l2 = $r32[i0];

        l3 = virtualinvoke r5.<java.io.File: long length()>();

        $r31 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        $r31[i0] = l3;

        $l13 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

        $l14 = $l13 - l2;

        $l15 = l3 + $l14;

        r0.<com.android.okhttp.internal.DiskLruCache: long size> = $l15;

     label14:
        goto label25;

     label15:
        staticinvoke <com.android.okhttp.internal.DiskLruCache: void deleteIfExists(java.io.File)>(r4);

     label16:
        goto label25;

     label17:
        $i7 = r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount>;

        $i6 = 1 + $i7;

        r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount> = $i6;

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$702(com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$Editor)>(r3, null);

        $z1 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: boolean access$600(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        $z2 = z0 | $z1;

        if $z2 == 0 goto label23;

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: boolean access$602(com.android.okhttp.internal.DiskLruCache$Entry,boolean)>(r3, 1);

        $r26 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLEAN ");

        $r24 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String access$1100(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r30 = virtualinvoke r3.<com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String getLengths()>();

        $r29 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.Writer: void write(java.lang.String)>($r27);

     label18:
        if z0 == 0 goto label20;

     label19:
        l1 = r0.<com.android.okhttp.internal.DiskLruCache: long nextSequenceNumber>;

        $l12 = 1L + l1;

        r0.<com.android.okhttp.internal.DiskLruCache: long nextSequenceNumber> = $l12;

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long access$1202(com.android.okhttp.internal.DiskLruCache$Entry,long)>(r3, l1);

     label20:
        $r18 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r18.<java.io.Writer: void flush()>();

        $l9 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

        $l8 = r0.<com.android.okhttp.internal.DiskLruCache: long maxSize>;

        $b10 = $l9 cmp $l8;

        if $b10 > 0 goto label21;

        $z4 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: boolean journalRebuildRequired()>();

        if $z4 == 0 goto label08;

     label21:
        $r19 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r21 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r19.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r21);

     label22:
        goto label08;

     label23:
        $r8 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r11 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String access$1100(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        virtualinvoke $r8.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r11);

        $r10 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REMOVE ");

        $r16 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String access$1100(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.Writer: void write(java.lang.String)>($r17);

     label24:
        goto label20;

     label25:
        i0 = i0 + 1;

        goto label11;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label07 to label08 with label02;
        catch java.lang.Throwable from label11 to label12 with label02;
        catch java.lang.Throwable from label13 to label14 with label02;
        catch java.lang.Throwable from label15 to label16 with label02;
        catch java.lang.Throwable from label17 to label18 with label02;
        catch java.lang.Throwable from label19 to label20 with label02;
        catch java.lang.Throwable from label20 to label21 with label02;
        catch java.lang.Throwable from label21 to label22 with label02;
        catch java.lang.Throwable from label23 to label24 with label02;
    }

    private static void deleteIfExists(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0, $z1;
        java.io.IOException $r1;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private com.android.okhttp.internal.DiskLruCache$Editor edit(java.lang.String, long) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1, $r14;
        long l0, l1;
        java.lang.Throwable r2, $r20;
        com.android.okhttp.internal.DiskLruCache$Entry r3, $r18;
        com.android.okhttp.internal.DiskLruCache$Editor r4, r5, $r9;
        byte b2, $b3;
        java.util.LinkedHashMap $r6, $r17;
        java.lang.Object $r7;
        java.io.Writer $r10, $r16;
        java.lang.StringBuilder $r11, $r12, $r13, $r15;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void validateKey(java.lang.String)>(r1);

        $r6 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r7 = virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.okhttp.internal.DiskLruCache$Entry) $r7;

     label02:
        $b3 = l0 cmp -1L;

        if $b3 == 0 goto label06;

        r4 = null;

        if r3 == null goto label05;

     label03:
        l1 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long access$1200(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

     label04:
        b2 = l1 cmp l0;

        r4 = null;

        if b2 == 0 goto label06;

     label05:
        exitmonitor r0;

        return r4;

     label06:
        if r3 != null goto label11;

     label07:
        $r18 = new com.android.okhttp.internal.DiskLruCache$Entry;

        specialinvoke $r18.<com.android.okhttp.internal.DiskLruCache$Entry: void <init>(com.android.okhttp.internal.DiskLruCache,java.lang.String,com.android.okhttp.internal.DiskLruCache$1)>(r0, r1, null);

        r3 = $r18;

        $r17 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r17.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label08:
        $r9 = new com.android.okhttp.internal.DiskLruCache$Editor;

        specialinvoke $r9.<com.android.okhttp.internal.DiskLruCache$Editor: void <init>(com.android.okhttp.internal.DiskLruCache,com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$1)>(r0, r3, null);

        r4 = $r9;

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$702(com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$Editor)>(r3, r4);

        $r10 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DIRTY ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.Writer: void write(java.lang.String)>($r14);

        $r16 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r16.<java.io.Writer: void flush()>();

     label09:
        goto label05;

     label10:
        $r20 := @caughtexception;

        r2 = $r20;

        exitmonitor r0;

        throw r2;

     label11:
        r5 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

     label12:
        if r5 == null goto label08;

        r4 = null;

        goto label05;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private static java.lang.String inputStreamToString(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.InputStreamReader $r1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.io.InputStream;

        $r1 = new java.io.InputStreamReader;

        $r2 = <com.android.okhttp.internal.Util: java.nio.charset.Charset UTF_8>;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r0, $r2);

        $r3 = staticinvoke <com.android.okhttp.internal.Util: java.lang.String readFully(java.io.Reader)>($r1);

        return $r3;
    }

    private boolean journalRebuildRequired()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        int $i0, $i1, $i2;
        java.util.LinkedHashMap $r1;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $i0 = r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount>;

        if $i0 < 2000 goto label1;

        $i1 = r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount>;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $i2 = virtualinvoke $r1.<java.util.LinkedHashMap: int size()>();

        if $i1 < $i2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static com.android.okhttp.internal.DiskLruCache open(java.io.File, int, int, long) throws java.io.IOException
    {
        java.io.File r0, r1, r2, $r6, $r8, $r14, $r15;
        int i0, i1;
        long l2;
        com.android.okhttp.internal.DiskLruCache r3, r4, $r7, $r10;
        java.io.IOException r5, $r17;
        byte $b3;
        boolean $z0, $z2, $z3;
        java.io.BufferedWriter $r9;
        java.io.FileOutputStream $r11;
        java.io.OutputStreamWriter $r12;
        java.nio.charset.Charset $r13;
        java.lang.IllegalArgumentException $r16, $r18;
        java.lang.StringBuilder $r19, $r21, $r23, $r24, $r26, $r27;
        com.android.okhttp.internal.Platform $r20;
        java.lang.String $r22, $r25;

        r0 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        $b3 = l2 cmp 0L;

        if $b3 > 0 goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxSize <= 0");

        throw $r18;

     label1:
        if i1 > 0 goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("valueCount <= 0");

        throw $r16;

     label2:
        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "journal.bkp");

        r1 = $r6;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "journal");

        r2 = $r15;

        $z3 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label6;

        virtualinvoke r1.<java.io.File: boolean delete()>();

     label3:
        $r7 = new com.android.okhttp.internal.DiskLruCache;

        specialinvoke $r7.<com.android.okhttp.internal.DiskLruCache: void <init>(java.io.File,int,int,long)>(r0, i0, i1, l2);

        r3 = $r7;

        $r8 = r3.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        $z2 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label8;

     label4:
        specialinvoke r3.<com.android.okhttp.internal.DiskLruCache: void readJournal()>();

        specialinvoke r3.<com.android.okhttp.internal.DiskLruCache: void processJournal()>();

        $r9 = new java.io.BufferedWriter;

        $r12 = new java.io.OutputStreamWriter;

        $r11 = new java.io.FileOutputStream;

        $r14 = r3.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        specialinvoke $r11.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r14, 1);

        $r13 = <com.android.okhttp.internal.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r12.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r11, $r13);

        specialinvoke $r9.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r12);

        r3.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter> = $r9;

     label5:
        return r3;

     label6:
        staticinvoke <com.android.okhttp.internal.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>(r1, r2, 0);

        goto label3;

     label7:
        $r17 := @caughtexception;

        r5 = $r17;

        $r20 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DiskLruCache ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is corrupt: ");

        $r22 = virtualinvoke r5.<java.io.IOException: java.lang.String getMessage()>();

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", removing");

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<com.android.okhttp.internal.Platform: void logW(java.lang.String)>($r25);

        virtualinvoke r3.<com.android.okhttp.internal.DiskLruCache: void delete()>();

     label8:
        virtualinvoke r0.<java.io.File: boolean mkdirs()>();

        $r10 = new com.android.okhttp.internal.DiskLruCache;

        specialinvoke $r10.<com.android.okhttp.internal.DiskLruCache: void <init>(java.io.File,int,int,long)>(r0, i0, i1, l2);

        r4 = $r10;

        specialinvoke r4.<com.android.okhttp.internal.DiskLruCache: void rebuildJournal()>();

        return r4;

        catch java.io.IOException from label4 to label5 with label7;
    }

    private void processJournal() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.util.Iterator r1;
        com.android.okhttp.internal.DiskLruCache$Entry r2;
        int i0, i1, $i2, $i3;
        java.io.File $r3, $r9, $r10;
        java.util.LinkedHashMap $r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.Object $r6;
        com.android.okhttp.internal.DiskLruCache$Editor $r7;
        long[] $r11;
        long $l4, $l5, $l6;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r3 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileTmp>;

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void deleteIfExists(java.io.File)>($r3);

        $r4 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.okhttp.internal.DiskLruCache$Entry) $r6;

        $r7 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        if $r7 != null goto label3;

        i1 = 0;

     label2:
        $i3 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i1 >= $i3 goto label1;

        $l4 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

        $r11 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        $l6 = $r11[i1];

        $l5 = $l4 + $l6;

        r0.<com.android.okhttp.internal.DiskLruCache: long size> = $l5;

        i1 = i1 + 1;

        goto label2;

     label3:
        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$702(com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$Editor)>(r2, null);

        i0 = 0;

     label4:
        $i2 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i0 >= $i2 goto label5;

        $r9 = virtualinvoke r2.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i0);

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void deleteIfExists(java.io.File)>($r9);

        $r10 = virtualinvoke r2.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i0);

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void deleteIfExists(java.io.File)>($r10);

        i0 = i0 + 1;

        goto label4;

     label5:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        goto label1;

     label6:
        return;
    }

    private void readJournal() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        com.android.okhttp.internal.StrictLineReader r1, $r9;
        java.lang.Throwable r2, $r33;
        java.lang.String r3, r4, r5, r6, r7, $r13, $r25, $r26, $r27, $r28, $r29, $r30;
        int i0, $i1, $i2, $i3, $i4;
        java.io.FileInputStream $r10;
        java.io.File $r11;
        java.nio.charset.Charset $r12;
        java.io.IOException $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.io.EOFException $r31;
        java.util.LinkedHashMap $r32;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r9 = new com.android.okhttp.internal.StrictLineReader;

        $r10 = new java.io.FileInputStream;

        $r11 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.io.File)>($r11);

        $r12 = <com.android.okhttp.internal.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r9.<com.android.okhttp.internal.StrictLineReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r10, $r12);

        r1 = $r9;

     label1:
        r3 = virtualinvoke r1.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        r4 = virtualinvoke r1.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        r5 = virtualinvoke r1.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        r6 = virtualinvoke r1.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        r7 = virtualinvoke r1.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        $r13 = "libcore.io.DiskLruCache";

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        $r26 = "1";

        $z1 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        $i1 = r0.<com.android.okhttp.internal.DiskLruCache: int appVersion>;

        $r28 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        $z2 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z2 == 0 goto label2;

        $i2 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        $z4 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z4 == 0 goto label2;

        $r30 = "";

        $z3 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z3 != 0 goto label4;

     label2:
        $r14 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal header: [");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r14;

     label3:
        $r33 := @caughtexception;

        r2 = $r33;

        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>(r1);

        throw r2;

     label4:
        i0 = 0;

     label5:
        $r29 = virtualinvoke r1.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void readJournalLine(java.lang.String)>($r29);

     label6:
        i0 = i0 + 1;

        goto label5;

     label7:
        $r31 := @caughtexception;

     label8:
        $r32 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $i3 = virtualinvoke $r32.<java.util.LinkedHashMap: int size()>();

        $i4 = i0 - $i3;

        r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount> = $i4;

     label9:
        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>(r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.io.EOFException from label5 to label6 with label7;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label8 to label9 with label3;
    }

    private void readJournalLine(java.lang.String) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1, r2, $r10, $r12, $r13, $r16, $r18, $r23, $r28;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        com.android.okhttp.internal.DiskLruCache$Entry r3, $r20;
        java.lang.String[] r4;
        java.util.LinkedHashMap $r5, $r21, $r22;
        java.lang.Object $r6;
        java.io.IOException $r7, $r27;
        java.lang.StringBuilder $r8, $r9, $r11, $r24, $r25, $r29;
        boolean $z0, $z1, $z2, $z4;
        com.android.okhttp.internal.DiskLruCache$Editor $r15;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(32);

        if i0 != -1 goto label1;

        $r27 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal line: ");

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label1:
        i1 = i0 + 1;

        i2 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(32, i1);

        if i2 != -1 goto label3;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i1);

        $r23 = "REMOVE";

        $i7 = virtualinvoke $r23.<java.lang.String: int length()>();

        if i0 != $i7 goto label4;

        $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("REMOVE");

        if $z4 == 0 goto label4;

        $r22 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r22.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r2);

     label2:
        return;

     label3:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);

     label4:
        $r5 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r6 = virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.okhttp.internal.DiskLruCache$Entry) $r6;

        if r3 != null goto label5;

        $r20 = new com.android.okhttp.internal.DiskLruCache$Entry;

        specialinvoke $r20.<com.android.okhttp.internal.DiskLruCache$Entry: void <init>(com.android.okhttp.internal.DiskLruCache,java.lang.String,com.android.okhttp.internal.DiskLruCache$1)>(r0, r2, null);

        r3 = $r20;

        $r21 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r21.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label5:
        if i2 == -1 goto label6;

        $r16 = "CLEAN";

        $i5 = virtualinvoke $r16.<java.lang.String: int length()>();

        if i0 != $i5 goto label6;

        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("CLEAN");

        if $z2 == 0 goto label6;

        $i6 = i2 + 1;

        $r18 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i6);

        r4 = virtualinvoke $r18.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: boolean access$602(com.android.okhttp.internal.DiskLruCache$Entry,boolean)>(r3, 1);

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$702(com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$Editor)>(r3, null);

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: void access$800(com.android.okhttp.internal.DiskLruCache$Entry,java.lang.String[])>(r3, r4);

        return;

     label6:
        if i2 != -1 goto label7;

        $r13 = "DIRTY";

        $i4 = virtualinvoke $r13.<java.lang.String: int length()>();

        if i0 != $i4 goto label7;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("DIRTY");

        if $z1 == 0 goto label7;

        $r15 = new com.android.okhttp.internal.DiskLruCache$Editor;

        specialinvoke $r15.<com.android.okhttp.internal.DiskLruCache$Editor: void <init>(com.android.okhttp.internal.DiskLruCache,com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$1)>(r0, r3, null);

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$702(com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$Editor)>(r3, $r15);

        return;

     label7:
        if i2 != -1 goto label8;

        $r12 = "READ";

        $i3 = virtualinvoke $r12.<java.lang.String: int length()>();

        if i0 != $i3 goto label8;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("READ");

        if $z0 != 0 goto label2;

     label8:
        $r7 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal line: ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r7;
    }

    private void rebuildJournal() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.Throwable r1, r3, $r43, $r44;
        java.io.BufferedWriter r2, $r7, $r21;
        java.util.Iterator r4;
        com.android.okhttp.internal.DiskLruCache$Entry r5;
        java.io.Writer $r6, $r45;
        java.io.OutputStreamWriter $r8, $r20;
        java.io.FileOutputStream $r9, $r23;
        java.io.File $r10, $r16, $r17, $r18, $r19, $r22, $r24, $r25;
        java.nio.charset.Charset $r11, $r26;
        int $i0, $i1;
        java.lang.String $r12, $r13, $r31, $r33, $r38, $r39, $r42;
        java.util.Collection $r14;
        java.util.LinkedHashMap $r15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r27, $r28, $r32, $r34, $r35, $r36, $r37, $r40, $r41;
        java.lang.Object $r29;
        com.android.okhttp.internal.DiskLruCache$Editor $r30;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        entermonitor r0;

     label01:
        $r6 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        if $r6 == null goto label02;

        $r45 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r45.<java.io.Writer: void close()>();

     label02:
        $r7 = new java.io.BufferedWriter;

        $r8 = new java.io.OutputStreamWriter;

        $r9 = new java.io.FileOutputStream;

        $r10 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileTmp>;

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        $r11 = <com.android.okhttp.internal.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r9, $r11);

        specialinvoke $r7.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r8);

        r2 = $r7;

     label03:
        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("libcore.io.DiskLruCache");

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("\n");

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("1");

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("\n");

        $i0 = r0.<com.android.okhttp.internal.DiskLruCache: int appVersion>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r12);

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("\n");

        $i1 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r13);

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("\n");

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>("\n");

        $r15 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r14 = virtualinvoke $r15.<java.util.LinkedHashMap: java.util.Collection values()>();

        r4 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r29 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.okhttp.internal.DiskLruCache$Entry) $r29;

        $r30 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r5);

        if $r30 == null goto label09;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DIRTY ");

        $r42 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String access$1100(com.android.okhttp.internal.DiskLruCache$Entry)>(r5);

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r39);

     label05:
        goto label04;

     label06:
        $r44 := @caughtexception;

        r3 = $r44;

     label07:
        virtualinvoke r2.<java.io.Writer: void close()>();

        throw r3;

     label08:
        $r43 := @caughtexception;

        r1 = $r43;

        exitmonitor r0;

        throw r1;

     label09:
        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLEAN ");

        $r33 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String access$1100(com.android.okhttp.internal.DiskLruCache$Entry)>(r5);

        $r34 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r31 = virtualinvoke r5.<com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String getLengths()>();

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r38);

     label10:
        goto label04;

     label11:
        virtualinvoke r2.<java.io.Writer: void close()>();

        $r16 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        $z1 = virtualinvoke $r16.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label12;

        $r25 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        $r24 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileBackup>;

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>($r25, $r24, 1);

     label12:
        $r17 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileTmp>;

        $r18 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>($r17, $r18, 0);

        $r19 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileBackup>;

        virtualinvoke $r19.<java.io.File: boolean delete()>();

        $r21 = new java.io.BufferedWriter;

        $r20 = new java.io.OutputStreamWriter;

        $r23 = new java.io.FileOutputStream;

        $r22 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        specialinvoke $r23.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r22, 1);

        $r26 = <com.android.okhttp.internal.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r20.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r23, $r26);

        specialinvoke $r21.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r20);

        r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter> = $r21;

     label13:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label11 to label12 with label08;
        catch java.lang.Throwable from label12 to label13 with label08;
    }

    private static void renameTo(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0, $z1;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void deleteIfExists(java.io.File)>(r1);

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean renameTo(java.io.File)>(r1);

        if $z1 != 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>()>();

        throw $r2;

     label2:
        return;
    }

    private void trimToSize() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        long $l0, $l1;
        byte $b2;
        java.util.LinkedHashMap $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4, $r6;
        java.util.Map$Entry $r5;
        java.lang.String $r7;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

     label1:
        $l1 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

        $l0 = r0.<com.android.okhttp.internal.DiskLruCache: long maxSize>;

        $b2 = $l1 cmp $l0;

        if $b2 <= 0 goto label2;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r2 = virtualinvoke $r1.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        virtualinvoke r0.<com.android.okhttp.internal.DiskLruCache: boolean remove(java.lang.String)>($r7);

        goto label1;

     label2:
        return;
    }

    private void validateKey(java.lang.String)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1, $r9;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        $r2 = <com.android.okhttp.internal.DiskLruCache: java.util.regex.Pattern LEGAL_KEY_PATTERN>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("keys must match regex [a-z0-9_-]{1,64}: \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.Throwable r1, $r12;
        java.io.Writer r2, $r8;
        java.util.Iterator r3;
        com.android.okhttp.internal.DiskLruCache$Entry r4;
        java.util.ArrayList $r5;
        java.util.LinkedHashMap $r6;
        java.util.Collection $r7;
        boolean $z0;
        java.lang.Object $r9;
        com.android.okhttp.internal.DiskLruCache$Editor $r10, $r11;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        entermonitor r0;

     label1:
        r2 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

     label2:
        if r2 != null goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r5 = new java.util.ArrayList;

        $r6 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r7 = virtualinvoke $r6.<java.util.LinkedHashMap: java.util.Collection values()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.okhttp.internal.DiskLruCache$Entry) $r9;

        $r10 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r4);

        if $r10 == null goto label5;

        $r11 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r4);

        virtualinvoke $r11.<com.android.okhttp.internal.DiskLruCache$Editor: void abort()>();

     label6:
        goto label5;

     label7:
        $r12 := @caughtexception;

        r1 = $r12;

        exitmonitor r0;

        throw r1;

     label8:
        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void trimToSize()>();

        $r8 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r8.<java.io.Writer: void close()>();

        r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter> = null;

     label9:
        goto label3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void delete() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.io.File $r1;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        virtualinvoke r0.<com.android.okhttp.internal.DiskLruCache: void close()>();

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File directory>;

        staticinvoke <com.android.okhttp.internal.Util: void deleteContents(java.io.File)>($r1);

        return;
    }

    public com.android.okhttp.internal.DiskLruCache$Editor edit(java.lang.String) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1;
        com.android.okhttp.internal.DiskLruCache$Editor $r2;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: com.android.okhttp.internal.DiskLruCache$Editor edit(java.lang.String,long)>(r1, -1L);

        return $r2;
    }

    public void flush() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.Throwable r1, $r3;
        java.io.Writer $r2;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void trimToSize()>();

        $r2 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r2.<java.io.Writer: void flush()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public com.android.okhttp.internal.DiskLruCache$Snapshot get(java.lang.String) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1, $r16;
        java.lang.Throwable r2, $r25;
        com.android.okhttp.internal.DiskLruCache$Entry r3;
        com.android.okhttp.internal.DiskLruCache$Snapshot r4, $r17;
        boolean z0, $z1;
        java.io.InputStream[] r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.io.InputStream r7, $r26;
        java.util.LinkedHashMap $r8;
        java.lang.Object $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14;
        java.io.Writer $r12;
        long[] $r18;
        long $l7;
        java.io.FileInputStream $r20;
        java.util.concurrent.Callable $r21;
        java.util.concurrent.ThreadPoolExecutor $r22;
        java.io.FileNotFoundException $r23;
        java.io.File $r24;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void validateKey(java.lang.String)>(r1);

        $r8 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r9 = virtualinvoke $r8.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.okhttp.internal.DiskLruCache$Entry) $r9;

     label02:
        r4 = null;

        if r3 != null goto label04;

     label03:
        exitmonitor r0;

        return r4;

     label04:
        z0 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: boolean access$600(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

     label05:
        r4 = null;

        if z0 == 0 goto label03;

     label06:
        $i3 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        r5 = newarray (java.io.InputStream)[$i3];

     label07:
        i0 = 0;

     label08:
        $i5 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i0 >= $i5 goto label17;

        $r20 = new java.io.FileInputStream;

        $r24 = virtualinvoke r3.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i0);

        specialinvoke $r20.<java.io.FileInputStream: void <init>(java.io.File)>($r24);

        r5[i0] = $r20;

     label09:
        i0 = i0 + 1;

        goto label08;

     label10:
        $r23 := @caughtexception;

        i1 = 0;

     label11:
        i2 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

     label12:
        r4 = null;

        if i1 >= i2 goto label03;

     label13:
        r7 = r5[i1];

     label14:
        r4 = null;

        if r7 == null goto label03;

     label15:
        $r26 = r5[i1];

        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>($r26);

     label16:
        i1 = i1 + 1;

        goto label11;

     label17:
        $i4 = r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount>;

        $i6 = 1 + $i4;

        r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount> = $i6;

        $r12 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("READ ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r16);

        $z1 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: boolean journalRebuildRequired()>();

        if $z1 == 0 goto label18;

        $r22 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r21 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r22.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r21);

     label18:
        $r17 = new com.android.okhttp.internal.DiskLruCache$Snapshot;

        $l7 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long access$1200(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        $r18 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        specialinvoke $r17.<com.android.okhttp.internal.DiskLruCache$Snapshot: void <init>(com.android.okhttp.internal.DiskLruCache,java.lang.String,long,java.io.InputStream[],long[],com.android.okhttp.internal.DiskLruCache$1)>(r0, r1, $l7, r5, $r18, null);

        r4 = $r17;

     label19:
        goto label03;

     label20:
        $r25 := @caughtexception;

        r2 = $r25;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.io.FileNotFoundException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
    }

    public java.io.File getDirectory()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.io.File $r1;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File directory>;

        return $r1;
    }

    public long getMaxSize()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        long $l0;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $l0 = r0.<com.android.okhttp.internal.DiskLruCache: long maxSize>;

        return $l0;
    }

    public boolean isClosed()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.io.Writer $r1;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean remove(java.lang.String) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1, $r14, $r24;
        java.lang.Throwable r2, $r27;
        com.android.okhttp.internal.DiskLruCache$Entry r3;
        com.android.okhttp.internal.DiskLruCache$Editor r4;
        int i0, $i1, $i2, $i3;
        boolean z0, $z1, $z2;
        java.io.File r5;
        java.util.LinkedHashMap $r6, $r16;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r23, $r25, $r26;
        java.io.Writer $r10;
        java.util.concurrent.Callable $r17;
        java.util.concurrent.ThreadPoolExecutor $r19;
        long $l4, $l5, $l6;
        long[] $r20, $r21;
        java.io.IOException $r22;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void validateKey(java.lang.String)>(r1);

        $r6 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r7 = virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.okhttp.internal.DiskLruCache$Entry) $r7;

     label02:
        if r3 == null goto label05;

     label03:
        r4 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

     label04:
        if r4 == null goto label07;

     label05:
        z0 = 0;

     label06:
        exitmonitor r0;

        return z0;

     label07:
        i0 = 0;

     label08:
        $i2 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i0 >= $i2 goto label12;

        r5 = virtualinvoke r3.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i0);

        $z2 = virtualinvoke r5.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label10;

        $r22 = new java.io.IOException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to delete ");

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r22;

     label09:
        $r27 := @caughtexception;

        r2 = $r27;

        exitmonitor r0;

        throw r2;

     label10:
        $l4 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

        $r20 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        $l5 = $r20[i0];

        $l6 = $l4 - $l5;

        r0.<com.android.okhttp.internal.DiskLruCache: long size> = $l6;

        $r21 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        $r21[i0] = 0L;

     label11:
        i0 = i0 + 1;

        goto label08;

     label12:
        $i1 = r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount>;

        $i3 = 1 + $i1;

        r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount> = $i3;

        $r10 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.Writer journalWriter>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REMOVE ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r14);

        $r16 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r16.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $z1 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: boolean journalRebuildRequired()>();

        if $z1 == 0 goto label13;

        $r19 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r17 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r19.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r17);

     label13:
        z0 = 1;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }

    public void setMaxSize(long)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        long l0;
        java.lang.Throwable r1, $r5;
        java.util.concurrent.Callable $r2;
        java.util.concurrent.ThreadPoolExecutor $r3;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        l0 := @parameter0: long;

        entermonitor r0;

     label1:
        r0.<com.android.okhttp.internal.DiskLruCache: long maxSize> = l0;

        $r3 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r2 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r2);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long size()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.Throwable r1, $r2;
        long l0;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        entermonitor r0;

     label1:
        l0 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

     label2:
        exitmonitor r0;

        return l0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
