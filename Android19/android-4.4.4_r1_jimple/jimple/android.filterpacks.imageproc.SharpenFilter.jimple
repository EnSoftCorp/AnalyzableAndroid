public class android.filterpacks.imageproc.SharpenFilter extends android.filterfw.core.Filter
{
    private int mHeight;
    private android.filterfw.core.Program mProgram;
    private float mScale;
    private final java.lang.String mSharpenShader;
    private int mTarget;
    private int mTileSize;
    private int mWidth;

    public void <init>(java.lang.String)
    {
        android.filterpacks.imageproc.SharpenFilter r0;
        java.lang.String r1;

        r0 := @this: android.filterpacks.imageproc.SharpenFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.imageproc.SharpenFilter: float mScale> = 0.0F;

        r0.<android.filterpacks.imageproc.SharpenFilter: int mTileSize> = 640;

        r0.<android.filterpacks.imageproc.SharpenFilter: int mWidth> = 0;

        r0.<android.filterpacks.imageproc.SharpenFilter: int mHeight> = 0;

        r0.<android.filterpacks.imageproc.SharpenFilter: int mTarget> = 0;

        r0.<android.filterpacks.imageproc.SharpenFilter: java.lang.String mSharpenShader> = "precision mediump float;\nuniform sampler2D tex_sampler_0;\nuniform float scale;\nuniform float stepsizeX;\nuniform float stepsizeY;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec3 nbr_color = vec3(0.0, 0.0, 0.0);\n  vec2 coord;\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  coord.x = v_texcoord.x - 0.5 * stepsizeX;\n  coord.y = v_texcoord.y - stepsizeY;\n  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;\n  coord.x = v_texcoord.x - stepsizeX;\n  coord.y = v_texcoord.y + 0.5 * stepsizeY;\n  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;\n  coord.x = v_texcoord.x + stepsizeX;\n  coord.y = v_texcoord.y - 0.5 * stepsizeY;\n  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;\n  coord.x = v_texcoord.x + stepsizeX;\n  coord.y = v_texcoord.y + 0.5 * stepsizeY;\n  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;\n  gl_FragColor = vec4(color.rgb - 2.0 * scale * nbr_color, color.a);\n}\n";

        return;
    }

    private void updateFrameSize(int, int)
    {
        android.filterpacks.imageproc.SharpenFilter r0;
        int i0, i1, $i2, $i3;
        android.filterfw.core.Program $r1, $r2, $r4;
        float $f0, $f1, $f2, $f3;
        java.lang.Float $r3, $r5;

        r0 := @this: android.filterpacks.imageproc.SharpenFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<android.filterpacks.imageproc.SharpenFilter: int mWidth> = i0;

        r0.<android.filterpacks.imageproc.SharpenFilter: int mHeight> = i1;

        $r1 = r0.<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.Program mProgram>;

        if $r1 == null goto label1;

        $r2 = r0.<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.Program mProgram>;

        $i2 = r0.<android.filterpacks.imageproc.SharpenFilter: int mWidth>;

        $f0 = (float) $i2;

        $f1 = 1.0F / $f0;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        virtualinvoke $r2.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("stepsizeX", $r3);

        $r4 = r0.<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.Program mProgram>;

        $i3 = r0.<android.filterpacks.imageproc.SharpenFilter: int mHeight>;

        $f2 = (float) $i3;

        $f3 = 1.0F / $f2;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        virtualinvoke $r4.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("stepsizeY", $r5);

        specialinvoke r0.<android.filterpacks.imageproc.SharpenFilter: void updateParameters()>();

     label1:
        return;
    }

    private void updateParameters()
    {
        android.filterpacks.imageproc.SharpenFilter r0;
        float $f0;
        android.filterfw.core.Program $r1;
        java.lang.Float $r2;

        r0 := @this: android.filterpacks.imageproc.SharpenFilter;

        $r1 = r0.<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.Program mProgram>;

        $f0 = r0.<android.filterpacks.imageproc.SharpenFilter: float mScale>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r1.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("scale", $r2);

        return;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.SharpenFilter r0;
        java.lang.String r1;
        android.filterfw.core.FilterContext r2;
        android.filterfw.core.Program $r3;

        r0 := @this: android.filterpacks.imageproc.SharpenFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        $r3 = r0.<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.Program mProgram>;

        if $r3 == null goto label1;

        specialinvoke r0.<android.filterpacks.imageproc.SharpenFilter: void updateParameters()>();

     label1:
        return;
    }

    public android.filterfw.core.FrameFormat getOutputFormat(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.SharpenFilter r0;
        java.lang.String r1;
        android.filterfw.core.FrameFormat r2;

        r0 := @this: android.filterpacks.imageproc.SharpenFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        return r2;
    }

    public void initProgram(android.filterfw.core.FilterContext, int)
    {
        android.filterpacks.imageproc.SharpenFilter r0;
        android.filterfw.core.FilterContext r1;
        int i0, $i1;
        android.filterfw.core.ShaderProgram r2, $r9;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: android.filterpacks.imageproc.SharpenFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        i0 := @parameter1: int;

        tableswitch(i0)
        {
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter Sharpen does not support frames of target ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        $r9 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r9.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, "precision mediump float;\nuniform sampler2D tex_sampler_0;\nuniform float scale;\nuniform float stepsizeX;\nuniform float stepsizeY;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec3 nbr_color = vec3(0.0, 0.0, 0.0);\n  vec2 coord;\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  coord.x = v_texcoord.x - 0.5 * stepsizeX;\n  coord.y = v_texcoord.y - stepsizeY;\n  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;\n  coord.x = v_texcoord.x - stepsizeX;\n  coord.y = v_texcoord.y + 0.5 * stepsizeY;\n  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;\n  coord.x = v_texcoord.x + stepsizeX;\n  coord.y = v_texcoord.y - 0.5 * stepsizeY;\n  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;\n  coord.x = v_texcoord.x + stepsizeX;\n  coord.y = v_texcoord.y + 0.5 * stepsizeY;\n  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;\n  gl_FragColor = vec4(color.rgb - 2.0 * scale * nbr_color, color.a);\n}\n");

        r2 = $r9;

        $i1 = r0.<android.filterpacks.imageproc.SharpenFilter: int mTileSize>;

        virtualinvoke r2.<android.filterfw.core.ShaderProgram: void setMaximumTileSize(int)>($i1);

        r0.<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.Program mProgram> = r2;

        r0.<android.filterpacks.imageproc.SharpenFilter: int mTarget> = i0;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.SharpenFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame r2, r4;
        android.filterfw.core.FrameFormat r3;
        android.filterfw.core.FrameManager $r5;
        android.filterfw.core.Program $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: android.filterpacks.imageproc.SharpenFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 = virtualinvoke r0.<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("image");

        r3 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $r5 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        r4 = virtualinvoke $r5.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>(r3);

        $r6 = r0.<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.Program mProgram>;

        if $r6 == null goto label1;

        $i6 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getTarget()>();

        $i8 = r0.<android.filterpacks.imageproc.SharpenFilter: int mTarget>;

        if $i6 == $i8 goto label2;

     label1:
        $i0 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getTarget()>();

        virtualinvoke r0.<android.filterpacks.imageproc.SharpenFilter: void initProgram(android.filterfw.core.FilterContext,int)>(r1, $i0);

     label2:
        $i1 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getWidth()>();

        $i2 = r0.<android.filterpacks.imageproc.SharpenFilter: int mWidth>;

        if $i1 != $i2 goto label3;

        $i5 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getHeight()>();

        $i7 = r0.<android.filterpacks.imageproc.SharpenFilter: int mHeight>;

        if $i5 == $i7 goto label4;

     label3:
        $i3 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getWidth()>();

        $i4 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getHeight()>();

        specialinvoke r0.<android.filterpacks.imageproc.SharpenFilter: void updateFrameSize(int,int)>($i3, $i4);

     label4:
        $r7 = r0.<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.Program mProgram>;

        virtualinvoke $r7.<android.filterfw.core.Program: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r2, r4);

        virtualinvoke r0.<android.filterpacks.imageproc.SharpenFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("image", r4);

        virtualinvoke r4.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        return;
    }

    public void setupPorts()
    {
        android.filterpacks.imageproc.SharpenFilter r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.imageproc.SharpenFilter;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int)>(3);

        virtualinvoke r0.<android.filterpacks.imageproc.SharpenFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>("image", $r1);

        virtualinvoke r0.<android.filterpacks.imageproc.SharpenFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>("image", "image");

        return;
    }
}
