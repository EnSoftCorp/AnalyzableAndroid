public final class libcore.io.Memory extends java.lang.Object
{

    private void <init>()
    {
        libcore.io.Memory r0;

        r0 := @this: libcore.io.Memory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static native void memmove(java.lang.Object, int, java.lang.Object, int, long);

    public static native byte peekByte(long);

    public static native void peekByteArray(long, byte[], int, int);

    public static native void peekCharArray(long, char[], int, int, boolean);

    public static native void peekDoubleArray(long, double[], int, int, boolean);

    public static native void peekFloatArray(long, float[], int, int, boolean);

    public static native int peekInt(long, boolean);

    public static int peekInt(byte[], int, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i16, $i17, $i21, $i22, $i24, $i27, $i29, $i33, $i34, $i36;
        java.nio.ByteOrder r1, $r2;
        byte $b11, $b14, $b15, $b20, $b23, $b25, $b30, $b31;
        short $s12, $s13, $s18, $s19, $s26, $s28, $s32, $s35;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        i6 = i0 + 1;

        $b23 = r0[i0];

        $s26 = 255 & $b23;

        i7 = $s26 << 24;

        i8 = i6 + 1;

        $b25 = r0[i6];

        $s28 = 255 & $b25;

        $i27 = $s28 << 16;

        i9 = i7 | $i27;

        i10 = i8 + 1;

        $b31 = r0[i8];

        $s32 = 255 & $b31;

        $i29 = $s32 << 8;

        $i33 = i9 | $i29;

        $b30 = r0[i10];

        $s35 = 255 & $b30;

        $i36 = $s35 << 0;

        $i34 = $i33 | $i36;

        return $i34;

     label1:
        i1 = i0 + 1;

        $b11 = r0[i0];

        $s12 = 255 & $b11;

        i2 = $s12 << 0;

        i3 = i1 + 1;

        $b14 = r0[i1];

        $s13 = 255 & $b14;

        $i16 = $s13 << 8;

        i4 = i2 | $i16;

        i5 = i3 + 1;

        $b15 = r0[i3];

        $s18 = 255 & $b15;

        $i17 = $s18 << 16;

        $i21 = i4 | $i17;

        $b20 = r0[i5];

        $s19 = 255 & $b20;

        $i22 = $s19 << 24;

        $i24 = $i21 | $i22;

        return $i24;
    }

    public static native void peekIntArray(long, int[], int, int, boolean);

    public static native long peekLong(long, boolean);

    public static long peekLong(byte[], int, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, $i30, $i33, $i40, $i41, $i47, $i50, $i51, $i52, $i63, $i65, $i68, $i71, $i76, $i81, $i84;
        java.nio.ByteOrder r1, $r2;
        byte $b28, $b32, $b34, $b35, $b37, $b42, $b43, $b46, $b58, $b60, $b61, $b64, $b66, $b69, $b72, $b74;
        short $s29, $s31, $s36, $s38, $s39, $s44, $s45, $s48, $s57, $s59, $s62, $s67, $s70, $s73, $s75, $s82;
        long $l49, $l53, $l54, $l55, $l56, $l77, $l78, $l79, $l80, $l83;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        i15 = i0 + 1;

        $b60 = r0[i0];

        $s59 = 255 & $b60;

        i14 = $s59 << 24;

        i17 = i15 + 1;

        $b58 = r0[i15];

        $s57 = 255 & $b58;

        $i65 = $s57 << 16;

        i16 = i14 | $i65;

        i19 = i17 + 1;

        $b66 = r0[i17];

        $s67 = 255 & $b66;

        $i68 = $s67 << 8;

        i18 = i16 | $i68;

        i21 = i19 + 1;

        $b61 = r0[i19];

        $s62 = 255 & $b61;

        $i63 = $s62 << 0;

        i20 = i18 | $i63;

        i23 = i21 + 1;

        $b64 = r0[i21];

        $s73 = 255 & $b64;

        i22 = $s73 << 24;

        i25 = i23 + 1;

        $b74 = r0[i23];

        $s75 = 255 & $b74;

        $i76 = $s75 << 16;

        i24 = i22 | $i76;

        i27 = i25 + 1;

        $b69 = r0[i25];

        $s70 = 255 & $b69;

        $i71 = $s70 << 8;

        $i84 = i24 | $i71;

        $b72 = r0[i27];

        $s82 = 255 & $b72;

        $i81 = $s82 << 0;

        i26 = $i84 | $i81;

        $l83 = (long) i20;

        $l80 = $l83 << 32;

        $l78 = (long) i26;

        $l77 = 4294967295L & $l78;

        $l79 = $l80 | $l77;

        return $l79;

     label1:
        i1 = i0 + 1;

        $b28 = r0[i0];

        $s31 = 255 & $b28;

        i2 = $s31 << 0;

        i3 = i1 + 1;

        $b32 = r0[i1];

        $s29 = 255 & $b32;

        $i30 = $s29 << 8;

        i4 = i2 | $i30;

        i5 = i3 + 1;

        $b35 = r0[i3];

        $s36 = 255 & $b35;

        $i33 = $s36 << 16;

        i6 = i4 | $i33;

        i7 = i5 + 1;

        $b34 = r0[i5];

        $s39 = 255 & $b34;

        $i40 = $s39 << 24;

        i8 = i6 | $i40;

        i9 = i7 + 1;

        $b37 = r0[i7];

        $s38 = 255 & $b37;

        i10 = $s38 << 0;

        i11 = i9 + 1;

        $b43 = r0[i9];

        $s44 = 255 & $b43;

        $i41 = $s44 << 8;

        i12 = i10 | $i41;

        i13 = i11 + 1;

        $b42 = r0[i11];

        $s48 = 255 & $b42;

        $i47 = $s48 << 16;

        $i51 = i12 | $i47;

        $b46 = r0[i13];

        $s45 = 255 & $b46;

        $i52 = $s45 << 24;

        $i50 = $i51 | $i52;

        $l49 = (long) $i50;

        $l54 = $l49 << 32;

        $l56 = (long) i8;

        $l55 = 4294967295L & $l56;

        $l53 = $l54 | $l55;

        return $l53;
    }

    public static native void peekLongArray(long, long[], int, int, boolean);

    public static native short peekShort(long, boolean);

    public static short peekShort(byte[], int, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, $i1, $i5, $i6, $i9, $i12, $i14;
        java.nio.ByteOrder r1, $r2;
        byte $b2, $b3, $b8, $b10;
        short $s4, $s7, $s11, $s13;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        $b8 = r0[i0];

        $i12 = $b8 << 8;

        $i9 = i0 + 1;

        $b10 = r0[$i9];

        $s11 = 255 & $b10;

        $i14 = $i12 | $s11;

        $s13 = (short) $i14;

        return $s13;

     label1:
        $i1 = i0 + 1;

        $b2 = r0[$i1];

        $i5 = $b2 << 8;

        $b3 = r0[i0];

        $s4 = 255 & $b3;

        $i6 = $i5 | $s4;

        $s7 = (short) $i6;

        return $s7;
    }

    public static native void peekShortArray(long, short[], int, int, boolean);

    public static native void pokeByte(long, byte);

    public static native void pokeByteArray(long, byte[], int, int);

    public static native void pokeCharArray(long, char[], int, int, boolean);

    public static native void pokeDoubleArray(long, double[], int, int, boolean);

    public static native void pokeFloatArray(long, float[], int, int, boolean);

    public static native void pokeInt(long, int, boolean);

    public static void pokeInt(byte[], int, int, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i22, $i23, $i24, $i25, $i28, $i30, $i31;
        java.nio.ByteOrder r1, $r2;
        byte $b10, $b14, $b15, $b20, $b21, $b26, $b27, $b29;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        i5 = i0 + 1;

        $i19 = i1 >> 24;

        $i22 = 255 & $i19;

        $b21 = (byte) $i22;

        r0[i0] = $b21;

        i6 = i5 + 1;

        $i24 = i1 >> 16;

        $i23 = 255 & $i24;

        $b26 = (byte) $i23;

        r0[i5] = $b26;

        i7 = i6 + 1;

        $i25 = i1 >> 8;

        $i28 = 255 & $i25;

        $b27 = (byte) $i28;

        r0[i6] = $b27;

        $i30 = i1 >> 0;

        $i31 = 255 & $i30;

        $b29 = (byte) $i31;

        r0[i7] = $b29;

        return;

     label1:
        i2 = i0 + 1;

        $i8 = i1 >> 0;

        $i9 = 255 & $i8;

        $b10 = (byte) $i9;

        r0[i0] = $b10;

        i3 = i2 + 1;

        $i11 = i1 >> 8;

        $i12 = 255 & $i11;

        $b14 = (byte) $i12;

        r0[i2] = $b14;

        i4 = i3 + 1;

        $i13 = i1 >> 16;

        $i16 = 255 & $i13;

        $b15 = (byte) $i16;

        r0[i3] = $b15;

        $i18 = i1 >> 24;

        $i17 = 255 & $i18;

        $b20 = (byte) $i17;

        r0[i4] = $b20;

        return;
    }

    public static native void pokeIntArray(long, int[], int, int, boolean);

    public static native void pokeLong(long, long, boolean);

    public static void pokeLong(byte[], int, long, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, $i20, $i21, $i22, $i25, $i26, $i27, $i28, $i31, $i32, $i35, $i37, $i38, $i39, $i40, $i41, $i42, $i44, $i45, $i49, $i50, $i52, $i54, $i55, $i56, $i57, $i59, $i60, $i61, $i63, $i65, $i66, $i68;
        long l1, $l34, $l46;
        java.nio.ByteOrder r1, $r2;
        byte $b23, $b24, $b29, $b30, $b33, $b36, $b43, $b47, $b48, $b51, $b53, $b58, $b62, $b64, $b67, $b69;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r1 := @parameter3: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        $l46 = l1 >> 32;

        i11 = (int) $l46;

        i12 = i0 + 1;

        $i45 = i11 >> 24;

        $i44 = 255 & $i45;

        $b51 = (byte) $i44;

        r0[i0] = $b51;

        i14 = i12 + 1;

        $i50 = i11 >> 16;

        $i49 = 255 & $i50;

        $b48 = (byte) $i49;

        r0[i12] = $b48;

        i13 = i14 + 1;

        $i55 = i11 >> 8;

        $i54 = 255 & $i55;

        $b53 = (byte) $i54;

        r0[i14] = $b53;

        i16 = i13 + 1;

        $i52 = i11 >> 0;

        $i59 = 255 & $i52;

        $b58 = (byte) $i59;

        r0[i13] = $b58;

        i15 = (int) l1;

        i18 = i16 + 1;

        $i57 = i15 >> 24;

        $i56 = 255 & $i57;

        $b64 = (byte) $i56;

        r0[i16] = $b64;

        i17 = i18 + 1;

        $i65 = i15 >> 16;

        $i66 = 255 & $i65;

        $b67 = (byte) $i66;

        r0[i18] = $b67;

        i19 = i17 + 1;

        $i60 = i15 >> 8;

        $i61 = 255 & $i60;

        $b62 = (byte) $i61;

        r0[i17] = $b62;

        $i63 = i15 >> 0;

        $i68 = 255 & $i63;

        $b69 = (byte) $i68;

        r0[i19] = $b69;

        return;

     label1:
        i2 = (int) l1;

        i3 = i0 + 1;

        $i21 = i2 >> 0;

        $i20 = 255 & $i21;

        $b23 = (byte) $i20;

        r0[i0] = $b23;

        i4 = i3 + 1;

        $i22 = i2 >> 8;

        $i25 = 255 & $i22;

        $b24 = (byte) $i25;

        r0[i3] = $b24;

        i5 = i4 + 1;

        $i27 = i2 >> 16;

        $i26 = 255 & $i27;

        $b30 = (byte) $i26;

        r0[i4] = $b30;

        i6 = i5 + 1;

        $i31 = i2 >> 24;

        $i28 = 255 & $i31;

        $b29 = (byte) $i28;

        r0[i5] = $b29;

        $l34 = l1 >> 32;

        i7 = (int) $l34;

        i8 = i6 + 1;

        $i35 = i7 >> 0;

        $i32 = 255 & $i35;

        $b33 = (byte) $i32;

        r0[i6] = $b33;

        i9 = i8 + 1;

        $i38 = i7 >> 8;

        $i39 = 255 & $i38;

        $b36 = (byte) $i39;

        r0[i8] = $b36;

        i10 = i9 + 1;

        $i37 = i7 >> 16;

        $i42 = 255 & $i37;

        $b43 = (byte) $i42;

        r0[i9] = $b43;

        $i40 = i7 >> 24;

        $i41 = 255 & $i40;

        $b47 = (byte) $i41;

        r0[i10] = $b47;

        return;
    }

    public static native void pokeLongArray(long, long[], int, int, boolean);

    public static native void pokeShort(long, short, boolean);

    public static void pokeShort(byte[], int, short, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, i2, i3;
        short s1, $s4, $s5, $s7, $s8, $s10, $s11, $s13, $s14;
        java.nio.ByteOrder r1, $r2;
        byte $b6, $b9, $b12, $b15;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        s1 := @parameter2: short;

        r1 := @parameter3: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        i3 = i0 + 1;

        $s10 = s1 >> 8;

        $s11 = 255 & $s10;

        $b12 = (byte) $s11;

        r0[i0] = $b12;

        $s14 = s1 >> 0;

        $s13 = 255 & $s14;

        $b15 = (byte) $s13;

        r0[i3] = $b15;

        return;

     label1:
        i2 = i0 + 1;

        $s4 = s1 >> 0;

        $s5 = 255 & $s4;

        $b6 = (byte) $s5;

        r0[i0] = $b6;

        $s7 = s1 >> 8;

        $s8 = 255 & $s7;

        $b9 = (byte) $s8;

        r0[i2] = $b9;

        return;
    }

    public static native void pokeShortArray(long, short[], int, int, boolean);

    public static native void unsafeBulkGet(java.lang.Object, int, int, byte[], int, int, boolean);

    public static native void unsafeBulkPut(byte[], int, int, java.lang.Object, int, int, boolean);
}
