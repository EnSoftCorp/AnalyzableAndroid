public class com.android.org.conscrypt.OpenSSLSecretKey extends java.lang.Object implements javax.crypto.SecretKey, com.android.org.conscrypt.OpenSSLKeyHolder
{
    private static final long serialVersionUID;
    private final java.lang.String algorithm;
    private final byte[] encoded;
    private transient com.android.org.conscrypt.OpenSSLKey key;
    private final int type;

    public void <init>(java.lang.String, com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLSecretKey r0;
        java.lang.String r1;
        com.android.org.conscrypt.OpenSSLKey r2;
        long $l0;
        int $i1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSecretKey;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSecretKey: java.lang.String algorithm> = r1;

        r0.<com.android.org.conscrypt.OpenSSLSecretKey: com.android.org.conscrypt.OpenSSLKey key> = r2;

        $l0 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_type(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLSecretKey: int type> = $i1;

        r0.<com.android.org.conscrypt.OpenSSLSecretKey: byte[] encoded> = null;

        return;
    }

    public void <init>(java.lang.String, byte[])
    {
        com.android.org.conscrypt.OpenSSLSecretKey r0;
        java.lang.String r1;
        byte[] r2;
        com.android.org.conscrypt.OpenSSLKey $r3;
        int $i0;
        long $l1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSecretKey;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSecretKey: java.lang.String algorithm> = r1;

        r0.<com.android.org.conscrypt.OpenSSLSecretKey: byte[] encoded> = r2;

        r0.<com.android.org.conscrypt.OpenSSLSecretKey: int type> = 855;

        $r3 = new com.android.org.conscrypt.OpenSSLKey;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: int type>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_mac_key(int,byte[])>($i0, r2);

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l1);

        r0.<com.android.org.conscrypt.OpenSSLSecretKey: com.android.org.conscrypt.OpenSSLKey key> = $r3;

        return;
    }

    public static com.android.org.conscrypt.OpenSSLKey getInstance(javax.crypto.SecretKey) throws java.security.InvalidKeyException
    {
        javax.crypto.SecretKey r0;
        com.android.org.conscrypt.OpenSSLKey r1, $r3;
        java.lang.Exception r2, $r5;
        byte[] $r4;
        long $l0;
        java.security.InvalidKeyException $r6;

        r0 := @parameter0: javax.crypto.SecretKey;

     label1:
        $r3 = new com.android.org.conscrypt.OpenSSLKey;

        $r4 = interfaceinvoke r0.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_mac_key(int,byte[])>(855, $r4);

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        r1 = $r3;

     label2:
        return r1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.security.InvalidKeyException;

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.android.org.conscrypt.OpenSSLSecretKey r0;
        java.io.ObjectInputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        byte[] $r3;
        int $i0;
        long $l1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSecretKey;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new com.android.org.conscrypt.OpenSSLKey;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: int type>;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: byte[] encoded>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_mac_key(int,byte[])>($i0, $r3);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l1);

        r0.<com.android.org.conscrypt.OpenSSLSecretKey: com.android.org.conscrypt.OpenSSLKey key> = $r2;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSecretKey r0;
        java.io.ObjectOutputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        boolean $z0;
        java.io.NotSerializableException $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSecretKey;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSecretKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        $r3 = new java.io.NotSerializableException;

        specialinvoke $r3.<java.io.NotSerializableException: void <init>(java.lang.String)>("engine-based keys can not be serialized");

        throw $r3;

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLSecretKey r0, r3;
        java.lang.Object r1;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7;
        javax.crypto.SecretKey r2;
        java.lang.String $r4, $r5, $r7, $r8;
        com.android.org.conscrypt.OpenSSLKey $r6, $r11, $r12;
        byte[] $r9, $r10;

        r0 := @this: com.android.org.conscrypt.OpenSSLSecretKey;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label2;

        z1 = 1;

     label1:
        return z1;

     label2:
        z0 = r1 instanceof javax.crypto.SecretKey;

        z1 = 0;

        if z0 == 0 goto label1;

        r2 = (javax.crypto.SecretKey) r1;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: java.lang.String algorithm>;

        $r5 = interfaceinvoke r2.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();

        z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        z1 = 0;

        if z2 == 0 goto label1;

        $z5 = r1 instanceof com.android.org.conscrypt.OpenSSLSecretKey;

        if $z5 == 0 goto label3;

        r3 = (com.android.org.conscrypt.OpenSSLSecretKey) r1;

        $r11 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: com.android.org.conscrypt.OpenSSLKey key>;

        $r12 = virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSecretKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z7 = virtualinvoke $r11.<com.android.org.conscrypt.OpenSSLKey: boolean equals(java.lang.Object)>($r12);

        return $z7;

     label3:
        $r6 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: com.android.org.conscrypt.OpenSSLKey key>;

        z3 = virtualinvoke $r6.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        z1 = 0;

        if z3 != 0 goto label1;

        $r7 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSecretKey: java.lang.String getFormat()>();

        $r8 = interfaceinvoke r2.<javax.crypto.SecretKey: java.lang.String getFormat()>();

        z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        z1 = 0;

        if z4 == 0 goto label1;

        $r10 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: byte[] encoded>;

        $r9 = interfaceinvoke r2.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $z6 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r10, $r9);

        return $z6;
    }

    public java.lang.String getAlgorithm()
    {
        com.android.org.conscrypt.OpenSSLSecretKey r0;
        java.lang.String $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSecretKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: java.lang.String algorithm>;

        return $r1;
    }

    public byte[] getEncoded()
    {
        com.android.org.conscrypt.OpenSSLSecretKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        boolean $z0;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSecretKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: byte[] encoded>;

        return $r2;
    }

    public java.lang.String getFormat()
    {
        com.android.org.conscrypt.OpenSSLSecretKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSecretKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        return "RAW";
    }

    public com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()
    {
        com.android.org.conscrypt.OpenSSLSecretKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSecretKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: com.android.org.conscrypt.OpenSSLKey key>;

        return $r1;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLSecretKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSecretKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSecretKey: com.android.org.conscrypt.OpenSSLKey key>;

        $i0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: int hashCode()>();

        return $i0;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.OpenSSLSecretKey: long serialVersionUID> = 1831053062911514589L;

        return;
    }
}
