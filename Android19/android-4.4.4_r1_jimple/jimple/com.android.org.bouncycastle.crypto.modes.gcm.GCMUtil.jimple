abstract class com.android.org.bouncycastle.crypto.modes.gcm.GCMUtil extends java.lang.Object
{

    void <init>()
    {
        com.android.org.bouncycastle.crypto.modes.gcm.GCMUtil r0;

        r0 := @this: com.android.org.bouncycastle.crypto.modes.gcm.GCMUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static byte[] asBytes(int[])
    {
        int[] r0;
        byte[] r1;

        r0 := @parameter0: int[];

        r1 = newarray (byte)[16];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void intToBigEndian(int[],byte[],int)>(r0, r1, 0);

        return r1;
    }

    static void asInts(byte[], int[])
    {
        byte[] r0;
        int[] r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: int[];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void bigEndianToInt(byte[],int,int[])>(r0, 0, r1);

        return;
    }

    static int[] asInts(byte[])
    {
        byte[] r0;
        int[] r1;

        r0 := @parameter0: byte[];

        r1 = newarray (int)[4];

        staticinvoke <com.android.org.bouncycastle.crypto.util.Pack: void bigEndianToInt(byte[],int,int[])>(r0, 0, r1);

        return r1;
    }

    static void multiply(byte[], byte[])
    {
        byte[] r0, r1, r2, r3;
        int i0, i2, $i3, $i4;
        byte b1, $b5, $b6, $b7, $b8, $b9;
        boolean z0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 = staticinvoke <com.android.org.bouncycastle.util.Arrays: byte[] clone(byte[])>(r0);

        r3 = newarray (byte)[16];

        i0 = 0;

     label1:
        if i0 >= 16 goto label8;

        b1 = r1[i0];

        i2 = 7;

     label2:
        if i2 < 0 goto label7;

        $i3 = 1 << i2;

        $i4 = b1 & $i3;

        if $i4 == 0 goto label3;

        staticinvoke <com.android.org.bouncycastle.crypto.modes.gcm.GCMUtil: void xor(byte[],byte[])>(r3, r2);

     label3:
        $b5 = r2[15];

        $b6 = 1 & $b5;

        if $b6 == 0 goto label6;

        z0 = 1;

     label4:
        staticinvoke <com.android.org.bouncycastle.crypto.modes.gcm.GCMUtil: void shiftRight(byte[])>(r2);

        if z0 == 0 goto label5;

        $b7 = r2[0];

        $b8 = -31 ^ $b7;

        $b9 = (byte) $b8;

        r2[0] = $b9;

     label5:
        i2 = i2 + -1;

        goto label2;

     label6:
        z0 = 0;

        goto label4;

     label7:
        i0 = i0 + 1;

        goto label1;

     label8:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r0, 0, 16);

        return;
    }

    static void multiplyP(int[])
    {
        int[] r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: int[];

        $i0 = r0[3];

        $i1 = 1 & $i0;

        if $i1 == 0 goto label3;

        z0 = 1;

     label1:
        staticinvoke <com.android.org.bouncycastle.crypto.modes.gcm.GCMUtil: void shiftRight(int[])>(r0);

        if z0 == 0 goto label2;

        $i2 = r0[0];

        $i3 = -520093696 ^ $i2;

        r0[0] = $i3;

     label2:
        return;

     label3:
        z0 = 0;

        goto label1;
    }

    static void multiplyP(int[], int[])
    {
        int[] r0, r1;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        $i0 = r0[3];

        $i1 = 1 & $i0;

        if $i1 == 0 goto label3;

        z0 = 1;

     label1:
        staticinvoke <com.android.org.bouncycastle.crypto.modes.gcm.GCMUtil: void shiftRight(int[],int[])>(r0, r1);

        if z0 == 0 goto label2;

        $i2 = r1[0];

        $i3 = -520093696 ^ $i2;

        r1[0] = $i3;

     label2:
        return;

     label3:
        z0 = 0;

        goto label1;
    }

    static void multiplyP8(int[])
    {
        int[] r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @parameter0: int[];

        i0 = r0[3];

        staticinvoke <com.android.org.bouncycastle.crypto.modes.gcm.GCMUtil: void shiftRightN(int[],int)>(r0, 8);

        i1 = 7;

     label1:
        if i1 < 0 goto label3;

        $i2 = 1 << i1;

        $i3 = i0 & $i2;

        if $i3 == 0 goto label2;

        $i6 = r0[0];

        $i4 = 7 - i1;

        $i5 = -520093696 >>> $i4;

        $i7 = $i6 ^ $i5;

        r0[0] = $i7;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return;
    }

    static void multiplyP8(int[], int[])
    {
        int[] r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i0 = r0[3];

        staticinvoke <com.android.org.bouncycastle.crypto.modes.gcm.GCMUtil: void shiftRightN(int[],int,int[])>(r0, 8, r1);

        i1 = 7;

     label1:
        if i1 < 0 goto label3;

        $i2 = 1 << i1;

        $i3 = i0 & $i2;

        if $i3 == 0 goto label2;

        $i6 = r1[0];

        $i4 = 7 - i1;

        $i5 = -520093696 >>> $i4;

        $i7 = $i6 ^ $i5;

        r1[0] = $i7;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return;
    }

    static byte[] oneAsBytes()
    {
        byte[] r0;

        r0 = newarray (byte)[16];

        r0[0] = -128;

        return r0;
    }

    static int[] oneAsInts()
    {
        int[] r0;

        r0 = newarray (int)[4];

        r0[0] = -2147483648;

        return r0;
    }

    static void shiftRight(byte[])
    {
        byte[] r0;
        int i0, i1, $i5;
        short s2, $s4, $s7;
        byte $b3, $b6;

        r0 := @parameter0: byte[];

        i0 = 0;

        i1 = 0;

     label1:
        $b3 = r0[i0];

        s2 = 255 & $b3;

        $s4 = s2 >>> 1;

        $i5 = i1 | $s4;

        $b6 = (byte) $i5;

        r0[i0] = $b6;

        i0 = i0 + 1;

        if i0 != 16 goto label2;

        return;

     label2:
        $s7 = s2 & 1;

        i1 = $s7 << 7;

        goto label1;
    }

    static void shiftRight(byte[], byte[])
    {
        byte[] r0, r1;
        int i0, i1, $i5;
        short s2, $s4, $s7;
        byte $b3, $b6;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 = 0;

        i1 = 0;

     label1:
        $b3 = r0[i0];

        s2 = 255 & $b3;

        $s4 = s2 >>> 1;

        $i5 = i1 | $s4;

        $b6 = (byte) $i5;

        r1[i0] = $b6;

        i0 = i0 + 1;

        if i0 != 16 goto label2;

        return;

     label2:
        $s7 = s2 & 1;

        i1 = $s7 << 7;

        goto label1;
    }

    static void shiftRight(int[])
    {
        int[] r0;
        int i0, i1, i2, $i3, $i4;

        r0 := @parameter0: int[];

        i0 = 0;

        i1 = 0;

     label1:
        i2 = r0[i0];

        $i3 = i2 >>> 1;

        $i4 = i1 | $i3;

        r0[i0] = $i4;

        i0 = i0 + 1;

        if i0 != 4 goto label2;

        return;

     label2:
        i1 = i2 << 31;

        goto label1;
    }

    static void shiftRight(int[], int[])
    {
        int[] r0, r1;
        int i0, i1, i2, $i3, $i4;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i0 = 0;

        i1 = 0;

     label1:
        i2 = r0[i0];

        $i3 = i2 >>> 1;

        $i4 = i1 | $i3;

        r1[i0] = $i4;

        i0 = i0 + 1;

        if i0 != 4 goto label2;

        return;

     label2:
        i1 = i2 << 31;

        goto label1;
    }

    static void shiftRightN(int[], int)
    {
        int[] r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 = 0;

        i2 = 0;

     label1:
        i3 = r0[i1];

        $i4 = i3 >>> i0;

        $i5 = i2 | $i4;

        r0[i1] = $i5;

        i1 = i1 + 1;

        if i1 != 4 goto label2;

        return;

     label2:
        $i6 = 32 - i0;

        i2 = i3 << $i6;

        goto label1;
    }

    static void shiftRightN(int[], int, int[])
    {
        int[] r0, r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        i1 = 0;

        i2 = 0;

     label1:
        i3 = r0[i1];

        $i4 = i3 >>> i0;

        $i5 = i2 | $i4;

        r1[i1] = $i5;

        i1 = i1 + 1;

        if i1 != 4 goto label2;

        return;

     label2:
        $i6 = 32 - i0;

        i2 = i3 << $i6;

        goto label1;
    }

    static void xor(byte[], byte[])
    {
        byte[] r0, r1;
        int i0;
        byte $b1, $b2, $b3, $b4;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 = 15;

     label1:
        if i0 < 0 goto label2;

        $b2 = r0[i0];

        $b1 = r1[i0];

        $b3 = $b2 ^ $b1;

        $b4 = (byte) $b3;

        r0[i0] = $b4;

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }

    static void xor(byte[], byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, $i4;
        byte $b5, $b6, $b7, $b8;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = i1;

     label1:
        i3 = i2 - 1;

        if i2 <= 0 goto label2;

        $b6 = r0[i3];

        $i4 = i0 + i3;

        $b5 = r1[$i4];

        $b7 = $b6 ^ $b5;

        $b8 = (byte) $b7;

        r0[i3] = $b8;

        i2 = i3;

        goto label1;

     label2:
        return;
    }

    static void xor(byte[], byte[], byte[])
    {
        byte[] r0, r1, r2;
        int i0;
        byte $b1, $b2, $b3, $b4;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        i0 = 15;

     label1:
        if i0 < 0 goto label2;

        $b2 = r0[i0];

        $b1 = r1[i0];

        $b3 = $b2 ^ $b1;

        $b4 = (byte) $b3;

        r2[i0] = $b4;

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }

    static void xor(int[], int[])
    {
        int[] r0, r1;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i0 = 3;

     label1:
        if i0 < 0 goto label2;

        $i2 = r0[i0];

        $i1 = r1[i0];

        $i3 = $i2 ^ $i1;

        r0[i0] = $i3;

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }

    static void xor(int[], int[], int[])
    {
        int[] r0, r1, r2;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        i0 = 3;

     label1:
        if i0 < 0 goto label2;

        $i2 = r0[i0];

        $i1 = r1[i0];

        $i3 = $i2 ^ $i1;

        r2[i0] = $i3;

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }
}
