public class org.apache.xalan.templates.AbsPathChecker extends org.apache.xpath.XPathVisitor
{
    private boolean m_isAbs;

    public void <init>()
    {
        org.apache.xalan.templates.AbsPathChecker r0;

        r0 := @this: org.apache.xalan.templates.AbsPathChecker;

        specialinvoke r0.<org.apache.xpath.XPathVisitor: void <init>()>();

        r0.<org.apache.xalan.templates.AbsPathChecker: boolean m_isAbs> = 1;

        return;
    }

    public boolean checkAbsolute(org.apache.xpath.axes.LocPathIterator)
    {
        org.apache.xalan.templates.AbsPathChecker r0;
        org.apache.xpath.axes.LocPathIterator r1;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.AbsPathChecker;

        r1 := @parameter0: org.apache.xpath.axes.LocPathIterator;

        r0.<org.apache.xalan.templates.AbsPathChecker: boolean m_isAbs> = 1;

        virtualinvoke r1.<org.apache.xpath.axes.LocPathIterator: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>(null, r0);

        $z0 = r0.<org.apache.xalan.templates.AbsPathChecker: boolean m_isAbs>;

        return $z0;
    }

    public boolean visitFunction(org.apache.xpath.ExpressionOwner, org.apache.xpath.functions.Function)
    {
        org.apache.xalan.templates.AbsPathChecker r0;
        org.apache.xpath.ExpressionOwner r1;
        org.apache.xpath.functions.Function r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.templates.AbsPathChecker;

        r1 := @parameter0: org.apache.xpath.ExpressionOwner;

        r2 := @parameter1: org.apache.xpath.functions.Function;

        $z0 = r2 instanceof org.apache.xpath.functions.FuncCurrent;

        if $z0 != 0 goto label1;

        $z1 = r2 instanceof org.apache.xpath.functions.FuncExtFunction;

        if $z1 == 0 goto label2;

     label1:
        r0.<org.apache.xalan.templates.AbsPathChecker: boolean m_isAbs> = 0;

     label2:
        return 1;
    }

    public boolean visitVariableRef(org.apache.xpath.ExpressionOwner, org.apache.xpath.operations.Variable)
    {
        org.apache.xalan.templates.AbsPathChecker r0;
        org.apache.xpath.ExpressionOwner r1;
        org.apache.xpath.operations.Variable r2;

        r0 := @this: org.apache.xalan.templates.AbsPathChecker;

        r1 := @parameter0: org.apache.xpath.ExpressionOwner;

        r2 := @parameter1: org.apache.xpath.operations.Variable;

        r0.<org.apache.xalan.templates.AbsPathChecker: boolean m_isAbs> = 0;

        return 1;
    }
}
