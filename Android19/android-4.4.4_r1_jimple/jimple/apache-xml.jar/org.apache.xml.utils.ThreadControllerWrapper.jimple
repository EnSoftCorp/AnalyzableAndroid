public class org.apache.xml.utils.ThreadControllerWrapper extends java.lang.Object
{
    private static org.apache.xml.utils.ThreadControllerWrapper$ThreadController m_tpool;

    static void <clinit>()
    {
        org.apache.xml.utils.ThreadControllerWrapper$ThreadController $r0;

        $r0 = new org.apache.xml.utils.ThreadControllerWrapper$ThreadController;

        specialinvoke $r0.<org.apache.xml.utils.ThreadControllerWrapper$ThreadController: void <init>()>();

        <org.apache.xml.utils.ThreadControllerWrapper: org.apache.xml.utils.ThreadControllerWrapper$ThreadController m_tpool> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.xml.utils.ThreadControllerWrapper r0;

        r0 := @this: org.apache.xml.utils.ThreadControllerWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Thread runThread(java.lang.Runnable, int)
    {
        java.lang.Runnable r0;
        int i0;
        org.apache.xml.utils.ThreadControllerWrapper$ThreadController $r1;
        java.lang.Thread $r2;

        r0 := @parameter0: java.lang.Runnable;

        i0 := @parameter1: int;

        $r1 = <org.apache.xml.utils.ThreadControllerWrapper: org.apache.xml.utils.ThreadControllerWrapper$ThreadController m_tpool>;

        $r2 = virtualinvoke $r1.<org.apache.xml.utils.ThreadControllerWrapper$ThreadController: java.lang.Thread run(java.lang.Runnable,int)>(r0, i0);

        return $r2;
    }

    public static void waitThread(java.lang.Thread, java.lang.Runnable) throws java.lang.InterruptedException
    {
        java.lang.Thread r0;
        java.lang.Runnable r1;
        org.apache.xml.utils.ThreadControllerWrapper$ThreadController $r2;

        r0 := @parameter0: java.lang.Thread;

        r1 := @parameter1: java.lang.Runnable;

        $r2 = <org.apache.xml.utils.ThreadControllerWrapper: org.apache.xml.utils.ThreadControllerWrapper$ThreadController m_tpool>;

        virtualinvoke $r2.<org.apache.xml.utils.ThreadControllerWrapper$ThreadController: void waitThread(java.lang.Thread,java.lang.Runnable)>(r0, r1);

        return;
    }
}
