public class org.apache.xpath.axes.NodeSequence extends org.apache.xpath.objects.XObject implements org.apache.xml.dtm.DTMIterator, java.lang.Cloneable, org.apache.xpath.axes.PathComponent
{
    static final long serialVersionUID;
    private org.apache.xpath.axes.NodeSequence$IteratorCache m_cache;
    protected org.apache.xml.dtm.DTMManager m_dtmMgr;
    protected org.apache.xml.dtm.DTMIterator m_iter;
    protected int m_last;
    protected int m_next;

    public void <init>()
    {
        org.apache.xpath.axes.NodeSequence r0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        specialinvoke r0.<org.apache.xpath.objects.XObject: void <init>()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = -1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        return;
    }

    public void <init>(java.lang.Object)
    {
        org.apache.xpath.axes.NodeSequence r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        org.apache.xml.dtm.DTMIterator $r2, $r3;
        int $i0;
        org.apache.xml.utils.NodeVector $r4;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.apache.xpath.objects.XObject: void <init>(java.lang.Object)>(r1);

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = -1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        $z0 = r1 instanceof org.apache.xml.utils.NodeVector;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.xml.utils.NodeVector) r1;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void SetVector(org.apache.xml.utils.NodeVector)>($r4);

     label1:
        if r1 == null goto label2;

        $z1 = r1 instanceof org.apache.xml.utils.NodeVector;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void assertion(boolean,java.lang.String)>($z1, "Must have a NodeVector as the object for NodeSequence!");

        $z2 = r1 instanceof org.apache.xml.dtm.DTMIterator;

        if $z2 == 0 goto label2;

        $r2 = (org.apache.xml.dtm.DTMIterator) r1;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setIter(org.apache.xml.dtm.DTMIterator)>($r2);

        $r3 = (org.apache.xml.dtm.DTMIterator) r1;

        $i0 = interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: int getLength()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i0;

     label2:
        return;
    }

    private void <init>(org.apache.xml.dtm.DTMIterator, int, org.apache.xpath.XPathContext, boolean)
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator r1;
        int i0;
        org.apache.xpath.XPathContext r2;
        boolean z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.xpath.XPathContext;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.xpath.objects.XObject: void <init>()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = -1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setIter(org.apache.xml.dtm.DTMIterator)>(r1);

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setRoot(int,java.lang.Object)>(i0, r2);

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setShouldCacheNodes(boolean)>(z0);

        return;
    }

    private void <init>(org.apache.xml.dtm.DTMManager)
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMManager r1;
        org.apache.xml.utils.NodeVector $r2;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        $r2 = new org.apache.xml.utils.NodeVector;

        specialinvoke $r2.<org.apache.xml.utils.NodeVector: void <init>()>();

        specialinvoke r0.<org.apache.xpath.objects.XObject: void <init>(java.lang.Object)>($r2);

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = -1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = 0;

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr> = r1;

        return;
    }

    private boolean cacheComplete()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xpath.axes.NodeSequence$IteratorCache $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        $z0 = staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: boolean access$100(org.apache.xpath.axes.NodeSequence$IteratorCache)>($r2);

        return $z0;

     label1:
        return 0;
    }

    private org.apache.xpath.axes.NodeSequence$IteratorCache getCache()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xpath.axes.NodeSequence$IteratorCache $r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        return $r1;
    }

    private void markCacheComplete()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.utils.NodeVector $r1;
        org.apache.xpath.axes.NodeSequence$IteratorCache $r2;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: void access$200(org.apache.xpath.axes.NodeSequence$IteratorCache,boolean)>($r2, 1);

     label1:
        return;
    }

    protected void SetVector(org.apache.xml.utils.NodeVector)
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.utils.NodeVector r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: org.apache.xml.utils.NodeVector;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setObject(java.lang.Object)>(r1);

        return;
    }

    protected int addNodeInDocOrder(int)
    {
        org.apache.xpath.axes.NodeSequence r0;
        int i0, i1, i2, i3, $i4;
        org.apache.xml.utils.NodeVector r1;
        boolean $z0, $z1;
        org.apache.xml.dtm.DTMManager $r2;
        org.apache.xml.dtm.DTM $r3;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void assertion(boolean,java.lang.String)>($z0, "addNodeInDocOrder must be done on a mutable sequence!");

        i1 = -1;

        r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        $i4 = virtualinvoke r1.<org.apache.xml.utils.NodeVector: int size()>();

        i2 = -1 + $i4;

     label1:
        if i2 < 0 goto label2;

        i3 = virtualinvoke r1.<org.apache.xml.utils.NodeVector: int elementAt(int)>(i2);

        if i3 != i0 goto label4;

        i2 = -2;

     label2:
        if i2 == -2 goto label3;

        i1 = i2 + 1;

        virtualinvoke r1.<org.apache.xml.utils.NodeVector: void insertElementAt(int,int)>(i0, i1);

     label3:
        return i1;

     label4:
        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $z1 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: boolean isNodeAfter(int,int)>(i0, i3);

        if $z1 == 0 goto label2;

        i2 = i2 + -1;

        goto label1;
    }

    public void allowDetachToRelease(boolean)
    {
        org.apache.xpath.axes.NodeSequence r0;
        boolean z0, $z1;
        org.apache.xml.dtm.DTMIterator $r1, $r2;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z1 != 0 goto label1;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setShouldCacheNodes(boolean)>(1);

     label1:
        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: void allowDetachToRelease(boolean)>(z0);

     label2:
        specialinvoke r0.<org.apache.xpath.objects.XObject: void allowDetachToRelease(boolean)>(z0);

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.NodeSequence r0, r1;
        java.lang.Object $r2, $r7;
        org.apache.xml.dtm.DTMIterator $r3, $r6, $r8;
        org.apache.xpath.axes.NodeSequence$IteratorCache $r4, $r5;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (org.apache.xpath.axes.NodeSequence) $r2;

        $r3 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r3 == null goto label1;

        $r6 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $r7 = interfaceinvoke $r6.<org.apache.xml.dtm.DTMIterator: java.lang.Object clone()>();

        $r8 = (org.apache.xml.dtm.DTMIterator) $r7;

        r1.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter> = $r8;

     label1:
        $r4 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        if $r4 == null goto label2;

        $r5 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: void access$500(org.apache.xpath.axes.NodeSequence$IteratorCache)>($r5);

     label2:
        return r1;
    }

    public org.apache.xml.dtm.DTMIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.NodeSequence r0, r1;
        java.lang.Object $r2;
        org.apache.xpath.axes.NodeSequence$IteratorCache $r3, $r4;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (org.apache.xpath.axes.NodeSequence) $r2;

        r1.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        $r3 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: void access$500(org.apache.xpath.axes.NodeSequence$IteratorCache)>($r4);

     label1:
        return r1;
    }

    public void detach()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: void detach()>();

     label1:
        specialinvoke r0.<org.apache.xpath.objects.XObject: void detach()>();

        return;
    }

    public void fixupVariables(java.util.Vector, int)
    {
        org.apache.xpath.axes.NodeSequence r0;
        java.util.Vector r1;
        int i0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: java.util.Vector;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.xpath.objects.XObject: void fixupVariables(java.util.Vector,int)>(r1, i0);

        return;
    }

    public int getAnalysisBits()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1, $r2, $r3;
        boolean $z0;
        org.apache.xpath.axes.PathComponent $r4;
        int $i0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z0 = $r2 instanceof org.apache.xpath.axes.PathComponent;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $r4 = (org.apache.xpath.axes.PathComponent) $r3;

        $i0 = interfaceinvoke $r4.<org.apache.xpath.axes.PathComponent: int getAnalysisBits()>();

        return $i0;

     label1:
        return 0;
    }

    public int getAxis()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        int $i0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: int getAxis()>();

        return $i0;

     label1:
        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void assertion(boolean,java.lang.String)>(0, "Can not getAxis from a non-iterated node sequence!");

        return 0;
    }

    public final org.apache.xml.dtm.DTMIterator getContainedIter()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        return $r1;
    }

    public int getCurrentNode()
    {
        org.apache.xpath.axes.NodeSequence r0;
        int i0, i1, $i2, $i3, $i4;
        org.apache.xml.utils.NodeVector r1;
        boolean $z0;
        org.apache.xml.dtm.DTMIterator $r2, $r3;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 = -1;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label2;

        $i3 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        i1 = -1 + $i3;

        r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        if i1 < 0 goto label1;

        $i4 = virtualinvoke r1.<org.apache.xml.utils.NodeVector: int size()>();

        if i1 >= $i4 goto label1;

        i0 = virtualinvoke r1.<org.apache.xml.utils.NodeVector: int elementAt(int)>(i1);

     label1:
        return i0;

     label2:
        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i2 = interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: int getCurrentNode()>();

        return $i2;
    }

    public int getCurrentPos()
    {
        org.apache.xpath.axes.NodeSequence r0;
        int $i0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $i0 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        return $i0;
    }

    public org.apache.xml.dtm.DTM getDTM(int)
    {
        org.apache.xpath.axes.NodeSequence r0;
        int i0;
        org.apache.xml.dtm.DTMManager $r1, $r2;
        org.apache.xml.dtm.DTM $r3;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager getDTMManager()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager getDTMManager()>();

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        return $r3;

     label1:
        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void assertion(boolean,java.lang.String)>(0, "Can not get a DTM Unless a DTMManager has been set!");

        return null;
    }

    public org.apache.xml.dtm.DTMManager getDTMManager()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMManager $r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        return $r1;
    }

    public boolean getExpandEntityReferences()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: boolean getExpandEntityReferences()>();

        return $z0;

     label1:
        return 1;
    }

    protected org.apache.xpath.axes.NodeSequence$IteratorCache getIteratorCache()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xpath.axes.NodeSequence$IteratorCache $r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        return $r1;
    }

    public int getLength()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xpath.axes.NodeSequence$IteratorCache r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.xml.dtm.DTMIterator $r2, $r3, $r4;
        boolean $z0, $z1;
        org.apache.xml.utils.NodeVector $r5;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 = specialinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache getCache()>();

        if r1 == null goto label4;

        $z0 = staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: boolean access$100(org.apache.xpath.axes.NodeSequence$IteratorCache)>(r1);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: org.apache.xml.utils.NodeVector access$000(org.apache.xpath.axes.NodeSequence$IteratorCache)>(r1);

        $i7 = virtualinvoke $r5.<org.apache.xml.utils.NodeVector: int size()>();

        return $i7;

     label1:
        $r3 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z1 = $r3 instanceof org.apache.xpath.NodeSetDTM;

        if $z1 == 0 goto label2;

        $r4 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i6 = interfaceinvoke $r4.<org.apache.xml.dtm.DTMIterator: int getLength()>();

        return $i6;

     label2:
        $i4 = r0.<org.apache.xpath.axes.NodeSequence: int m_last>;

        if -1 != $i4 goto label3;

        i1 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void runTo(int)>(-1);

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = i1;

     label3:
        $i5 = r0.<org.apache.xpath.axes.NodeSequence: int m_last>;

        return $i5;

     label4:
        $i2 = r0.<org.apache.xpath.axes.NodeSequence: int m_last>;

        if -1 != $i2 goto label5;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        i0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: int getLength()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = i0;

        return i0;

     label5:
        $i3 = r0.<org.apache.xpath.axes.NodeSequence: int m_last>;

        return $i3;
    }

    public int getRoot()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        int $i0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: int getRoot()>();

        return $i0;

     label1:
        return -1;
    }

    protected org.apache.xml.utils.NodeVector getVector()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xpath.axes.NodeSequence$IteratorCache $r1, $r2;
        org.apache.xml.utils.NodeVector $r3;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        $r3 = staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: org.apache.xml.utils.NodeVector access$000(org.apache.xpath.axes.NodeSequence$IteratorCache)>($r2);

        return $r3;

     label1:
        return null;
    }

    public int getWhatToShow()
    {
        org.apache.xpath.axes.NodeSequence r0;
        boolean $z0;
        org.apache.xml.dtm.DTMIterator $r1;
        int $i0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label1;

        return -17;

     label1:
        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMIterator: int getWhatToShow()>();

        return $i0;
    }

    public boolean hasCache()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.utils.NodeVector $r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isDocOrdered()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: boolean isDocOrdered()>();

        return $z0;

     label1:
        return 1;
    }

    public boolean isFresh()
    {
        org.apache.xpath.axes.NodeSequence r0;
        int $i0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $i0 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isMutable()
    {
        org.apache.xpath.axes.NodeSequence r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        return $z0;
    }

    public int item(int)
    {
        org.apache.xpath.axes.NodeSequence r0;
        int i0, i1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setCurrentPos(int)>(i0);

        i1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int nextNode()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = i0;

        return i1;
    }

    public int nextNode()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.utils.NodeVector r1, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        org.apache.xml.dtm.DTMIterator $r2, $r3, $r4, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        if r1 == null goto label4;

        $i10 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i12 = virtualinvoke r1.<org.apache.xml.utils.NodeVector: int size()>();

        if $i10 >= $i12 goto label2;

        $i16 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        i0 = virtualinvoke r1.<org.apache.xml.utils.NodeVector: int elementAt(int)>($i16);

        $i18 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i17 = 1 + $i18;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i17;

     label1:
        return i0;

     label2:
        $z2 = specialinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean cacheComplete()>();

        if $z2 != 0 goto label3;

        $i15 = r0.<org.apache.xpath.axes.NodeSequence: int m_last>;

        if -1 != $i15 goto label3;

        $r6 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r6 != null goto label4;

     label3:
        $i14 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i13 = 1 + $i14;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i13;

        return -1;

     label4:
        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r2 != null goto label5;

        return -1;

     label5:
        $r3 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        i0 = interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        if -1 == i0 goto label8;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label7;

        $r4 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z1 = interfaceinvoke $r4.<org.apache.xml.dtm.DTMIterator: boolean isDocOrdered()>();

        if $z1 == 0 goto label6;

        $r5 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        virtualinvoke $r5.<org.apache.xml.utils.NodeVector: void addElement(int)>(i0);

        $i9 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i11 = 1 + $i9;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i11;

        return i0;

     label6:
        $i6 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int addNodeInDocOrder(int)>(i0);

        if $i6 < 0 goto label1;

        $i8 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i7 = 1 + $i8;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i7;

        return i0;

     label7:
        $i4 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i5 = 1 + $i4;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i5;

        return i0;

     label8:
        specialinvoke r0.<org.apache.xpath.axes.NodeSequence: void markCacheComplete()>();

        $i1 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i1;

        $i2 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i3 = 1 + $i2;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i3;

        return i0;
    }

    public int previousNode()
    {
        org.apache.xpath.axes.NodeSequence r0;
        boolean $z0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label2;

        $i3 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if $i3 > 0 goto label1;

        return -1;

     label1:
        $i4 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i5 = -1 + $i4;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i5;

        $i6 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i7 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int item(int)>($i6);

        return $i7;

     label2:
        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r1.<org.apache.xml.dtm.DTMIterator: int previousNode()>();

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i1 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: int getCurrentPos()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i1;

        $i2 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        return $i2;
    }

    public void reset()
    {
        org.apache.xpath.axes.NodeSequence r0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        return;
    }

    public void runTo(int)
    {
        org.apache.xpath.axes.NodeSequence r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0;
        org.apache.xml.utils.NodeVector $r1, $r2;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        if -1 != i0 goto label3;

        i1 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

     label1:
        $i10 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int nextNode()>();

        if -1 != $i10 goto label1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = i1;

     label2:
        return;

     label3:
        $i2 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if $i2 == i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label4;

        $i8 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $r2 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        $i9 = virtualinvoke $r2.<org.apache.xml.utils.NodeVector: int size()>();

        if $i8 >= $i9 goto label4;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = i0;

        return;

     label4:
        $r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        if $r1 != null goto label6;

        $i5 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if i0 >= $i5 goto label6;

     label5:
        $i6 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if $i6 < i0 goto label2;

        $i7 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int previousNode()>();

        if -1 == $i7 goto label2;

        goto label5;

     label6:
        $i3 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if $i3 >= i0 goto label2;

        $i4 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int nextNode()>();

        if -1 == $i4 goto label2;

        goto label6;
    }

    public void setCurrentPos(int)
    {
        org.apache.xpath.axes.NodeSequence r0;
        int i0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void runTo(int)>(i0);

        return;
    }

    public void setItem(int, int)
    {
        org.apache.xpath.axes.NodeSequence r0;
        int i0, i1, $i2, $i3, $i4;
        org.apache.xml.utils.NodeVector r1, r4;
        org.apache.xpath.axes.NodeSequence$IteratorCache r2, $r6, $r7;
        java.lang.CloneNotSupportedException r3, $r9;
        org.apache.xml.dtm.DTMIterator $r5;
        java.lang.Object $r8;
        java.lang.String $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        if r1 == null goto label5;

        $i2 = virtualinvoke r1.<org.apache.xml.utils.NodeVector: int elementAt(int)>(i1);

        if $i2 == i0 goto label3;

        $r6 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        $i4 = staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: int access$300(org.apache.xpath.axes.NodeSequence$IteratorCache)>($r6);

        if $i4 <= 1 goto label3;

        $r7 = new org.apache.xpath.axes.NodeSequence$IteratorCache;

        specialinvoke $r7.<org.apache.xpath.axes.NodeSequence$IteratorCache: void <init>()>();

        r2 = $r7;

     label1:
        $r8 = virtualinvoke r1.<org.apache.xml.utils.NodeVector: java.lang.Object clone()>();

        r4 = (org.apache.xml.utils.NodeVector) $r8;

     label2:
        staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: void access$400(org.apache.xpath.axes.NodeSequence$IteratorCache,org.apache.xml.utils.NodeVector)>(r2, r4);

        staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: void access$200(org.apache.xpath.axes.NodeSequence$IteratorCache,boolean)>(r2, 1);

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache> = r2;

        r1 = r4;

        specialinvoke r0.<org.apache.xpath.objects.XObject: void setObject(java.lang.Object)>(r4);

     label3:
        virtualinvoke r1.<org.apache.xml.utils.NodeVector: void setElementAt(int,int)>(i0, i1);

        $i3 = virtualinvoke r1.<org.apache.xml.utils.NodeVector: int size()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i3;

        return;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        virtualinvoke r3.<java.lang.CloneNotSupportedException: void printStackTrace()>();

        $r11 = new java.lang.RuntimeException;

        $r10 = virtualinvoke r3.<java.lang.CloneNotSupportedException: java.lang.String getMessage()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r11;

     label5:
        $r5 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r5.<org.apache.xml.dtm.DTMIterator: void setItem(int,int)>(i0, i1);

        return;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label4;
    }

    public final void setIter(org.apache.xml.dtm.DTMIterator)
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter> = r1;

        return;
    }

    protected void setObject(java.lang.Object)
    {
        org.apache.xpath.axes.NodeSequence r0;
        java.lang.Object r1;
        org.apache.xpath.axes.NodeSequence$IteratorCache r2, $r4, $r6, $r7, $r8, $r9;
        org.apache.xml.utils.NodeVector r3, $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.xml.utils.NodeVector;

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.apache.xpath.objects.XObject: void setObject(java.lang.Object)>(r1);

        r3 = (org.apache.xml.utils.NodeVector) r1;

        $r6 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        if $r6 == null goto label2;

        $r9 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: void access$400(org.apache.xpath.axes.NodeSequence$IteratorCache,org.apache.xml.utils.NodeVector)>($r9, r3);

     label1:
        return;

     label2:
        if r3 == null goto label1;

        $r7 = new org.apache.xpath.axes.NodeSequence$IteratorCache;

        specialinvoke $r7.<org.apache.xpath.axes.NodeSequence$IteratorCache: void <init>()>();

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache> = $r7;

        $r8 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: void access$400(org.apache.xpath.axes.NodeSequence$IteratorCache,org.apache.xml.utils.NodeVector)>($r8, r3);

        return;

     label3:
        $z1 = r1 instanceof org.apache.xpath.axes.NodeSequence$IteratorCache;

        if $z1 == 0 goto label4;

        r2 = (org.apache.xpath.axes.NodeSequence$IteratorCache) r1;

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache> = r2;

        $r4 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xpath.axes.NodeSequence$IteratorCache m_cache>;

        staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: void access$500(org.apache.xpath.axes.NodeSequence$IteratorCache)>($r4);

        $r5 = staticinvoke <org.apache.xpath.axes.NodeSequence$IteratorCache: org.apache.xml.utils.NodeVector access$000(org.apache.xpath.axes.NodeSequence$IteratorCache)>(r2);

        specialinvoke r0.<org.apache.xpath.objects.XObject: void setObject(java.lang.Object)>($r5);

        return;

     label4:
        specialinvoke r0.<org.apache.xpath.objects.XObject: void setObject(java.lang.Object)>(r1);

        return;
    }

    public void setRoot(int, java.lang.Object)
    {
        org.apache.xpath.axes.NodeSequence r0;
        int i0;
        java.lang.Object r1;
        org.apache.xml.dtm.DTMIterator $r2, $r5, $r6;
        org.apache.xpath.XPathContext $r3;
        org.apache.xml.dtm.DTMManager $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r2 == null goto label3;

        $r3 = (org.apache.xpath.XPathContext) r1;

        $r4 = virtualinvoke $r3.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTMManager getDTMManager()>();

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr> = $r4;

        $r5 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r5.<org.apache.xml.dtm.DTMIterator: void setRoot(int,java.lang.Object)>(i0, r1);

        $r6 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z0 = interfaceinvoke $r6.<org.apache.xml.dtm.DTMIterator: boolean isDocOrdered()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z1 != 0 goto label1;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setShouldCacheNodes(boolean)>(1);

     label1:
        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void runTo(int)>(-1);

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

     label2:
        return;

     label3:
        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void assertion(boolean,java.lang.String)>(0, "Can not setRoot on a non-iterated NodeSequence!");

        return;
    }

    public void setShouldCacheNodes(boolean)
    {
        org.apache.xpath.axes.NodeSequence r0;
        boolean z0, $z1;
        org.apache.xml.utils.NodeVector $r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z1 != 0 goto label1;

        $r1 = new org.apache.xml.utils.NodeVector;

        specialinvoke $r1.<org.apache.xml.utils.NodeVector: void <init>()>();

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void SetVector(org.apache.xml.utils.NodeVector)>($r1);

     label1:
        return;

     label2:
        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void SetVector(org.apache.xml.utils.NodeVector)>(null);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.axes.NodeSequence: long serialVersionUID> = 3866261934726581044L;

        return;
    }
}
