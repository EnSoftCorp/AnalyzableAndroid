public class org.apache.xml.utils.ObjectPool extends java.lang.Object implements java.io.Serializable
{
    static final long serialVersionUID;
    private final java.util.ArrayList freeStack;
    private final java.lang.Class objectType;

    public void <init>()
    {
        org.apache.xml.utils.ObjectPool r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.lang.Class objectType> = null;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.util.ArrayList freeStack> = $r1;

        return;
    }

    public void <init>(java.lang.Class)
    {
        org.apache.xml.utils.ObjectPool r0;
        java.lang.Class r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.lang.Class objectType> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.util.ArrayList freeStack> = $r2;

        return;
    }

    public void <init>(java.lang.Class, int)
    {
        org.apache.xml.utils.ObjectPool r0;
        java.lang.Class r1;
        int i0;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        r1 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.lang.Class objectType> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<org.apache.xml.utils.ObjectPool: java.util.ArrayList freeStack> = $r2;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.xml.utils.ObjectPool r0;
        java.lang.String r1;
        java.lang.ClassNotFoundException r2, $r6;
        java.lang.ClassLoader $r3;
        java.lang.Class $r4;
        java.util.ArrayList $r5;
        org.apache.xml.utils.WrappedRuntimeException $r7;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r3 = staticinvoke <org.apache.xml.utils.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r4 = staticinvoke <org.apache.xml.utils.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>(r1, $r3, 1);

        r0.<org.apache.xml.utils.ObjectPool: java.lang.Class objectType> = $r4;

     label2:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xml.utils.ObjectPool: java.util.ArrayList freeStack> = $r5;

        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new org.apache.xml.utils.WrappedRuntimeException;

        specialinvoke $r7.<org.apache.xml.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>(r2);

        throw $r7;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void freeInstance(java.lang.Object)
    {
        org.apache.xml.utils.ObjectPool r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.xml.utils.ObjectPool: java.util.ArrayList freeStack>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object getInstance()
    {
        org.apache.xml.utils.ObjectPool r0;
        java.lang.Throwable r1, $r13;
        boolean z0;
        java.lang.Object r2, r3, r6;
        java.util.ArrayList $r7, $r8, $r9;
        int $i0, $i1;
        java.lang.Class $r10;
        java.lang.RuntimeException $r11;
        java.lang.IllegalAccessException $r12;
        java.lang.String $r14;
        java.lang.InstantiationException $r15;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        entermonitor r0;

     label01:
        $r7 = r0.<org.apache.xml.utils.ObjectPool: java.util.ArrayList freeStack>;

        z0 = virtualinvoke $r7.<java.util.ArrayList: boolean isEmpty()>();

     label02:
        if z0 == 0 goto label09;

     label03:
        $r10 = r0.<org.apache.xml.utils.ObjectPool: java.lang.Class objectType>;

        r6 = virtualinvoke $r10.<java.lang.Class: java.lang.Object newInstance()>();

     label04:
        r3 = r6;

     label05:
        exitmonitor r0;

        return r3;

     label06:
        $r12 := @caughtexception;

     label07:
        $r11 = new java.lang.RuntimeException;

        $r14 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_EXCEPTION_CREATING_POOL", null);

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label08:
        $r13 := @caughtexception;

        r1 = $r13;

        exitmonitor r0;

        throw r1;

     label09:
        $r9 = r0.<org.apache.xml.utils.ObjectPool: java.util.ArrayList freeStack>;

        $r8 = r0.<org.apache.xml.utils.ObjectPool: java.util.ArrayList freeStack>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i1 = -1 + $i0;

        r2 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

     label10:
        r3 = r2;

        goto label05;

     label11:
        $r15 := @caughtexception;

        goto label07;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.InstantiationException from label03 to label04 with label11;
        catch java.lang.IllegalAccessException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.lang.Object getInstanceIfFree()
    {
        org.apache.xml.utils.ObjectPool r0;
        java.lang.Throwable r1, $r7;
        java.lang.Object r2, r3;
        java.util.ArrayList $r4, $r5, $r6;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.xml.utils.ObjectPool;

        entermonitor r0;

     label1:
        $r4 = r0.<org.apache.xml.utils.ObjectPool: java.util.ArrayList freeStack>;

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r6 = r0.<org.apache.xml.utils.ObjectPool: java.util.ArrayList freeStack>;

        $r5 = r0.<org.apache.xml.utils.ObjectPool: java.util.ArrayList freeStack>;

        $i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $i1 = -1 + $i0;

        r3 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

     label2:
        r2 = r3;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        r2 = null;

        goto label3;

     label5:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public static void <clinit>()
    {
        <org.apache.xml.utils.ObjectPool: long serialVersionUID> = -8519013691660936643L;

        return;
    }
}
