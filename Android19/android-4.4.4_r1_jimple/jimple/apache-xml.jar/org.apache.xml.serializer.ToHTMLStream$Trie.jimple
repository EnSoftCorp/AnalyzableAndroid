class org.apache.xml.serializer.ToHTMLStream$Trie extends java.lang.Object
{
    public static final int ALPHA_SIZE;
    final org.apache.xml.serializer.ToHTMLStream$Trie$Node m_Root;
    private char[] m_charBuffer;
    private final boolean m_lowerCaseOnly;

    public void <init>()
    {
        org.apache.xml.serializer.ToHTMLStream$Trie r0;
        char[] $r1;
        org.apache.xml.serializer.ToHTMLStream$Trie$Node $r2;

        r0 := @this: org.apache.xml.serializer.ToHTMLStream$Trie;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (char)[0];

        r0.<org.apache.xml.serializer.ToHTMLStream$Trie: char[] m_charBuffer> = $r1;

        $r2 = new org.apache.xml.serializer.ToHTMLStream$Trie$Node;

        specialinvoke $r2.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: void <init>(org.apache.xml.serializer.ToHTMLStream$Trie)>(r0);

        r0.<org.apache.xml.serializer.ToHTMLStream$Trie: org.apache.xml.serializer.ToHTMLStream$Trie$Node m_Root> = $r2;

        r0.<org.apache.xml.serializer.ToHTMLStream$Trie: boolean m_lowerCaseOnly> = 0;

        return;
    }

    public void <init>(org.apache.xml.serializer.ToHTMLStream$Trie)
    {
        org.apache.xml.serializer.ToHTMLStream$Trie r0, r1;
        char[] $r2, $r4;
        org.apache.xml.serializer.ToHTMLStream$Trie$Node $r3;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.xml.serializer.ToHTMLStream$Trie;

        r1 := @parameter0: org.apache.xml.serializer.ToHTMLStream$Trie;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (char)[0];

        r0.<org.apache.xml.serializer.ToHTMLStream$Trie: char[] m_charBuffer> = $r2;

        $r3 = r1.<org.apache.xml.serializer.ToHTMLStream$Trie: org.apache.xml.serializer.ToHTMLStream$Trie$Node m_Root>;

        r0.<org.apache.xml.serializer.ToHTMLStream$Trie: org.apache.xml.serializer.ToHTMLStream$Trie$Node m_Root> = $r3;

        $z0 = r1.<org.apache.xml.serializer.ToHTMLStream$Trie: boolean m_lowerCaseOnly>;

        r0.<org.apache.xml.serializer.ToHTMLStream$Trie: boolean m_lowerCaseOnly> = $z0;

        $i0 = virtualinvoke r1.<org.apache.xml.serializer.ToHTMLStream$Trie: int getLongestKeyLength()>();

        $r4 = newarray (char)[$i0];

        r0.<org.apache.xml.serializer.ToHTMLStream$Trie: char[] m_charBuffer> = $r4;

        return;
    }

    public void <init>(boolean)
    {
        org.apache.xml.serializer.ToHTMLStream$Trie r0;
        boolean z0;
        char[] $r1;
        org.apache.xml.serializer.ToHTMLStream$Trie$Node $r2;

        r0 := @this: org.apache.xml.serializer.ToHTMLStream$Trie;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (char)[0];

        r0.<org.apache.xml.serializer.ToHTMLStream$Trie: char[] m_charBuffer> = $r1;

        $r2 = new org.apache.xml.serializer.ToHTMLStream$Trie$Node;

        specialinvoke $r2.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: void <init>(org.apache.xml.serializer.ToHTMLStream$Trie)>(r0);

        r0.<org.apache.xml.serializer.ToHTMLStream$Trie: org.apache.xml.serializer.ToHTMLStream$Trie$Node m_Root> = $r2;

        r0.<org.apache.xml.serializer.ToHTMLStream$Trie: boolean m_lowerCaseOnly> = z0;

        return;
    }

    public java.lang.Object get(java.lang.String)
    {
        org.apache.xml.serializer.ToHTMLStream$Trie r0;
        java.lang.String r1;
        int i0, i2, $i4;
        org.apache.xml.serializer.ToHTMLStream$Trie$Node r2, r3;
        char c1, c3;
        char[] $r4;
        java.lang.Object $r5, $r8;
        org.apache.xml.serializer.ToHTMLStream$Trie$Node[] $r6, $r7;

        r0 := @this: org.apache.xml.serializer.ToHTMLStream$Trie;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r4 = r0.<org.apache.xml.serializer.ToHTMLStream$Trie: char[] m_charBuffer>;

        $i4 = lengthof $r4;

        if $i4 >= i0 goto label2;

     label1:
        return null;

     label2:
        r2 = r0.<org.apache.xml.serializer.ToHTMLStream$Trie: org.apache.xml.serializer.ToHTMLStream$Trie$Node m_Root>;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label5;
            default: goto label3;
        };

     label3:
        i2 = 0;

     label4:
        if i2 >= i0 goto label6;

        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if 128 <= c3 goto label1;

        $r6 = r2.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: org.apache.xml.serializer.ToHTMLStream$Trie$Node[] m_nextChar>;

        r2 = $r6[c3];

        if r2 == null goto label1;

        i2 = i2 + 1;

        goto label4;

     label5:
        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if c1 >= 128 goto label1;

        $r7 = r2.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: org.apache.xml.serializer.ToHTMLStream$Trie$Node[] m_nextChar>;

        r3 = $r7[c1];

        if r3 == null goto label1;

        $r8 = r3.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: java.lang.Object m_Value>;

        return $r8;

     label6:
        $r5 = r2.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: java.lang.Object m_Value>;

        return $r5;
    }

    public java.lang.Object get2(java.lang.String)
    {
        org.apache.xml.serializer.ToHTMLStream$Trie r0;
        java.lang.String r1;
        int i0, i2, $i4;
        org.apache.xml.serializer.ToHTMLStream$Trie$Node r2, r3;
        char c1, c3;
        char[] $r4, $r5, $r7;
        java.lang.Object $r6, $r9;
        org.apache.xml.serializer.ToHTMLStream$Trie$Node[] $r8, $r10;

        r0 := @this: org.apache.xml.serializer.ToHTMLStream$Trie;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r4 = r0.<org.apache.xml.serializer.ToHTMLStream$Trie: char[] m_charBuffer>;

        $i4 = lengthof $r4;

        if $i4 >= i0 goto label2;

     label1:
        return null;

     label2:
        r2 = r0.<org.apache.xml.serializer.ToHTMLStream$Trie: org.apache.xml.serializer.ToHTMLStream$Trie$Node m_Root>;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label5;
            default: goto label3;
        };

     label3:
        $r5 = r0.<org.apache.xml.serializer.ToHTMLStream$Trie: char[] m_charBuffer>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r5, 0);

        i2 = 0;

     label4:
        if i2 >= i0 goto label6;

        $r7 = r0.<org.apache.xml.serializer.ToHTMLStream$Trie: char[] m_charBuffer>;

        c3 = $r7[i2];

        if 128 <= c3 goto label1;

        $r8 = r2.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: org.apache.xml.serializer.ToHTMLStream$Trie$Node[] m_nextChar>;

        r2 = $r8[c3];

        if r2 == null goto label1;

        i2 = i2 + 1;

        goto label4;

     label5:
        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if c1 >= 128 goto label1;

        $r10 = r2.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: org.apache.xml.serializer.ToHTMLStream$Trie$Node[] m_nextChar>;

        r3 = $r10[c1];

        if r3 == null goto label1;

        $r9 = r3.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: java.lang.Object m_Value>;

        return $r9;

     label6:
        $r6 = r2.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: java.lang.Object m_Value>;

        return $r6;
    }

    public int getLongestKeyLength()
    {
        org.apache.xml.serializer.ToHTMLStream$Trie r0;
        char[] $r1;
        int $i0;

        r0 := @this: org.apache.xml.serializer.ToHTMLStream$Trie;

        $r1 = r0.<org.apache.xml.serializer.ToHTMLStream$Trie: char[] m_charBuffer>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public java.lang.Object put(java.lang.String, java.lang.Object)
    {
        org.apache.xml.serializer.ToHTMLStream$Trie r0;
        java.lang.String r1;
        java.lang.Object r2, r4;
        int i0, i1, $i2;
        org.apache.xml.serializer.ToHTMLStream$Trie$Node r3, r5, r6, $r9;
        char[] $r7, $r13;
        org.apache.xml.serializer.ToHTMLStream$Trie$Node[] $r8, $r10, $r11, $r12;
        char $c3, $c4, $c5, $c6, $c7, $c8, $c9, $c10;
        boolean $z0;

        r0 := @this: org.apache.xml.serializer.ToHTMLStream$Trie;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r7 = r0.<org.apache.xml.serializer.ToHTMLStream$Trie: char[] m_charBuffer>;

        $i2 = lengthof $r7;

        if i0 <= $i2 goto label1;

        $r13 = newarray (char)[i0];

        r0.<org.apache.xml.serializer.ToHTMLStream$Trie: char[] m_charBuffer> = $r13;

     label1:
        r3 = r0.<org.apache.xml.serializer.ToHTMLStream$Trie: org.apache.xml.serializer.ToHTMLStream$Trie$Node m_Root>;

        i1 = 0;

     label2:
        if i1 >= i0 goto label6;

        $r8 = r3.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: org.apache.xml.serializer.ToHTMLStream$Trie$Node[] m_nextChar>;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        $c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c3);

        r5 = $r8[$c4];

        if r5 == null goto label3;

        r3 = r5;

        i1 = i1 + 1;

        goto label2;

     label3:
        if i1 >= i0 goto label6;

        $r9 = new org.apache.xml.serializer.ToHTMLStream$Trie$Node;

        specialinvoke $r9.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: void <init>(org.apache.xml.serializer.ToHTMLStream$Trie)>(r0);

        r6 = $r9;

        $z0 = r0.<org.apache.xml.serializer.ToHTMLStream$Trie: boolean m_lowerCaseOnly>;

        if $z0 == 0 goto label5;

        $r12 = r3.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: org.apache.xml.serializer.ToHTMLStream$Trie$Node[] m_nextChar>;

        $c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        $c9 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c10);

        $r12[$c9] = r6;

     label4:
        r3 = r6;

        i1 = i1 + 1;

        goto label3;

     label5:
        $r10 = r3.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: org.apache.xml.serializer.ToHTMLStream$Trie$Node[] m_nextChar>;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        $c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c6);

        $r10[$c5] = r6;

        $r11 = r3.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: org.apache.xml.serializer.ToHTMLStream$Trie$Node[] m_nextChar>;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        $c8 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c7);

        $r11[$c8] = r6;

        goto label4;

     label6:
        r4 = r3.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: java.lang.Object m_Value>;

        r3.<org.apache.xml.serializer.ToHTMLStream$Trie$Node: java.lang.Object m_Value> = r2;

        return r4;
    }

    public static void <clinit>()
    {
        <org.apache.xml.serializer.ToHTMLStream$Trie: int ALPHA_SIZE> = 128;

        return;
    }
}
