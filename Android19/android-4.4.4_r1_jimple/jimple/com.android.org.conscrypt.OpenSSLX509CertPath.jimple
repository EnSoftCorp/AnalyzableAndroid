public class com.android.org.conscrypt.OpenSSLX509CertPath extends java.security.cert.CertPath
{
    private static final java.util.List ALL_ENCODINGS;
    private static final com.android.org.conscrypt.OpenSSLX509CertPath$Encoding DEFAULT_ENCODING;
    private static final byte[] PKCS7_MARKER;
    private static final int PUSHBACK_SIZE;
    private final java.util.List mCertificates;

    static void <clinit>()
    {
        java.lang.String[] r0;
        java.lang.String $r1, $r4, $r6;
        byte[] $r2;
        com.android.org.conscrypt.OpenSSLX509CertPath$Encoding $r3, $r5, $r9;
        java.util.List $r7, $r8;

        <com.android.org.conscrypt.OpenSSLX509CertPath: int PUSHBACK_SIZE> = 64;

        $r1 = "-----BEGIN PKCS7";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        <com.android.org.conscrypt.OpenSSLX509CertPath: byte[] PKCS7_MARKER> = $r2;

        r0 = newarray (java.lang.String)[2];

        $r3 = <com.android.org.conscrypt.OpenSSLX509CertPath$Encoding: com.android.org.conscrypt.OpenSSLX509CertPath$Encoding PKI_PATH>;

        $r4 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath$Encoding: java.lang.String access$000(com.android.org.conscrypt.OpenSSLX509CertPath$Encoding)>($r3);

        r0[0] = $r4;

        $r5 = <com.android.org.conscrypt.OpenSSLX509CertPath$Encoding: com.android.org.conscrypt.OpenSSLX509CertPath$Encoding PKCS7>;

        $r6 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath$Encoding: java.lang.String access$000(com.android.org.conscrypt.OpenSSLX509CertPath$Encoding)>($r5);

        r0[1] = $r6;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r7);

        <com.android.org.conscrypt.OpenSSLX509CertPath: java.util.List ALL_ENCODINGS> = $r8;

        $r9 = <com.android.org.conscrypt.OpenSSLX509CertPath$Encoding: com.android.org.conscrypt.OpenSSLX509CertPath$Encoding PKI_PATH>;

        <com.android.org.conscrypt.OpenSSLX509CertPath: com.android.org.conscrypt.OpenSSLX509CertPath$Encoding DEFAULT_ENCODING> = $r9;

        return;
    }

    protected void <init>(java.util.List)
    {
        com.android.org.conscrypt.OpenSSLX509CertPath r0;
        java.util.List r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertPath;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.security.cert.CertPath: void <init>(java.lang.String)>("X.509");

        r0.<com.android.org.conscrypt.OpenSSLX509CertPath: java.util.List mCertificates> = r1;

        return;
    }

    public static java.security.cert.CertPath fromEncoding(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLX509CertPath$Encoding $r1;
        java.security.cert.CertPath $r2;

        r0 := @parameter0: java.io.InputStream;

        $r1 = <com.android.org.conscrypt.OpenSSLX509CertPath: com.android.org.conscrypt.OpenSSLX509CertPath$Encoding DEFAULT_ENCODING>;

        $r2 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath: java.security.cert.CertPath fromEncoding(java.io.InputStream,com.android.org.conscrypt.OpenSSLX509CertPath$Encoding)>(r0, $r1);

        return $r2;
    }

    private static java.security.cert.CertPath fromEncoding(java.io.InputStream, com.android.org.conscrypt.OpenSSLX509CertPath$Encoding) throws java.security.cert.CertificateException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLX509CertPath$Encoding r1;
        int[] $r2;
        int $i0, $i1;
        java.security.cert.CertificateEncodingException $r3;
        java.security.cert.CertPath $r4, $r5;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: com.android.org.conscrypt.OpenSSLX509CertPath$Encoding;

        $r2 = <com.android.org.conscrypt.OpenSSLX509CertPath$1: int[] $SwitchMap$org$conscrypt$OpenSSLX509CertPath$Encoding>;

        $i0 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLX509CertPath$Encoding: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        $r3 = new java.security.cert.CertificateEncodingException;

        specialinvoke $r3.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>("Unknown encoding");

        throw $r3;

     label2:
        $r5 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath: java.security.cert.CertPath fromPkiPathEncoding(java.io.InputStream)>(r0);

        return $r5;

     label3:
        $r4 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath: java.security.cert.CertPath fromPkcs7Encoding(java.io.InputStream)>(r0);

        return $r4;
    }

    public static java.security.cert.CertPath fromEncoding(java.io.InputStream, java.lang.String) throws java.security.cert.CertificateException
    {
        java.io.InputStream r0;
        java.lang.String r1, $r8;
        com.android.org.conscrypt.OpenSSLX509CertPath$Encoding r2;
        java.security.cert.CertPath $r3;
        java.security.cert.CertificateException $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r9 = new java.security.cert.CertificateException;

        specialinvoke $r9.<java.security.cert.CertificateException: void <init>(java.lang.String)>("inStream == null");

        throw $r9;

     label1:
        r2 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath$Encoding: com.android.org.conscrypt.OpenSSLX509CertPath$Encoding findByApiName(java.lang.String)>(r1);

        if r2 != null goto label2;

        $r4 = new java.security.cert.CertificateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid encoding: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $r3 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath: java.security.cert.CertPath fromEncoding(java.io.InputStream,com.android.org.conscrypt.OpenSSLX509CertPath$Encoding)>(r0, r2);

        return $r3;
    }

    private static java.security.cert.CertPath fromPkcs7Encoding(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLX509CertPath r1, r7, $r8, $r14, $r17;
        java.io.IOException r2, $r20, $r22;
        boolean z0, $z1;
        java.io.PushbackInputStream r3, $r10;
        java.lang.Exception r4, $r18;
        byte[] r6, $r11, $r12, $r15;
        int i0, $i1, $i2, $i3;
        java.util.List $r9, $r13, $r16;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException $r19;
        java.security.cert.CertificateException $r21, $r23;

        r0 := @parameter0: java.io.InputStream;

        if r0 == null goto label02;

     label01:
        $i1 = virtualinvoke r0.<java.io.InputStream: int available()>();

        if $i1 != 0 goto label05;

     label02:
        $r8 = new com.android.org.conscrypt.OpenSSLX509CertPath;

        $r9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLX509CertPath: void <init>(java.util.List)>($r9);

        r1 = $r8;

     label03:
        return r1;

     label04:
        $r20 := @caughtexception;

        r2 = $r20;

        $r23 = new java.security.cert.CertificateException;

        specialinvoke $r23.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>("Problem reading input stream", r2);

        throw $r23;

     label05:
        z0 = virtualinvoke r0.<java.io.InputStream: boolean markSupported()>();

        if z0 == 0 goto label06;

        virtualinvoke r0.<java.io.InputStream: void mark(int)>(64);

     label06:
        $r10 = new java.io.PushbackInputStream;

        specialinvoke $r10.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>(r0, 64);

        r3 = $r10;

     label07:
        $r11 = <com.android.org.conscrypt.OpenSSLX509CertPath: byte[] PKCS7_MARKER>;

        $i2 = lengthof $r11;

        r6 = newarray (byte)[$i2];

        i0 = virtualinvoke r3.<java.io.PushbackInputStream: int read(byte[])>(r6);

     label08:
        if i0 >= 0 goto label13;

     label09:
        $r19 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r19.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.String)>("inStream is empty");

        throw $r19;

     label10:
        $r18 := @caughtexception;

        r4 = $r18;

        if z0 == 0 goto label12;

     label11:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label12:
        $r21 = new java.security.cert.CertificateException;

        specialinvoke $r21.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r4);

        throw $r21;

     label13:
        virtualinvoke r3.<java.io.PushbackInputStream: void unread(byte[],int,int)>(r6, 0, i0);

        $r12 = <com.android.org.conscrypt.OpenSSLX509CertPath: byte[] PKCS7_MARKER>;

        $i3 = lengthof $r12;

        if i0 != $i3 goto label14;

        $r15 = <com.android.org.conscrypt.OpenSSLX509CertPath: byte[] PKCS7_MARKER>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r15, r6);

        if $z1 == 0 goto label14;

        $r17 = new com.android.org.conscrypt.OpenSSLX509CertPath;

        $r16 = staticinvoke <com.android.org.conscrypt.OpenSSLX509Certificate: java.util.List fromPkcs7PemInputStream(java.io.InputStream)>(r3);

        specialinvoke $r17.<com.android.org.conscrypt.OpenSSLX509CertPath: void <init>(java.util.List)>($r16);

        return $r17;

     label14:
        $r14 = new com.android.org.conscrypt.OpenSSLX509CertPath;

        $r13 = staticinvoke <com.android.org.conscrypt.OpenSSLX509Certificate: java.util.List fromPkcs7DerInputStream(java.io.InputStream)>(r3);

        specialinvoke $r14.<com.android.org.conscrypt.OpenSSLX509CertPath: void <init>(java.util.List)>($r13);

        r7 = $r14;

     label15:
        return r7;

     label16:
        $r22 := @caughtexception;

        goto label12;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Exception from label07 to label08 with label10;
        catch java.lang.Exception from label09 to label10 with label10;
        catch java.io.IOException from label11 to label12 with label16;
        catch java.lang.Exception from label13 to label14 with label10;
        catch java.lang.Exception from label14 to label15 with label10;
    }

    private static java.security.cert.CertPath fromPkiPathEncoding(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream r1, $r7;
        boolean z0;
        java.lang.Throwable r2, $r14;
        java.lang.Exception r3, $r16;
        long[] r5;
        java.util.ArrayList r6, $r8;
        int i0, $i3, $i4;
        long $l1, $l2, $l6, $l7, $l8;
        com.android.org.conscrypt.OpenSSLX509CertPath $r9, $r11;
        byte $b5;
        com.android.org.conscrypt.OpenSSLX509Certificate $r10;
        java.io.IOException $r12;
        java.util.List $r13;
        java.security.cert.CertificateException $r15;

        r0 := @parameter0: java.io.InputStream;

        $r7 = new com.android.org.conscrypt.OpenSSLBIOInputStream;

        specialinvoke $r7.<com.android.org.conscrypt.OpenSSLBIOInputStream: void <init>(java.io.InputStream)>(r0);

        r1 = $r7;

        z0 = virtualinvoke r0.<java.io.InputStream: boolean markSupported()>();

        if z0 == 0 goto label01;

        virtualinvoke r0.<java.io.InputStream: void mark(int)>(64);

     label01:
        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        r5 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long[] ASN1_seq_unpack_X509_bio(long)>($l1);

     label02:
        $l2 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l2);

        if r5 != null goto label07;

        $r11 = new com.android.org.conscrypt.OpenSSLX509CertPath;

        $r13 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLX509CertPath: void <init>(java.util.List)>($r13);

        return $r11;

     label03:
        $r16 := @caughtexception;

        r3 = $r16;

        if z0 == 0 goto label05;

     label04:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label05:
        $r15 = new java.security.cert.CertificateException;

        specialinvoke $r15.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r3);

        throw $r15;

     label06:
        $r14 := @caughtexception;

        r2 = $r14;

        $l8 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l8);

        throw r2;

     label07:
        $r8 = new java.util.ArrayList;

        $i3 = lengthof r5;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i3);

        r6 = $r8;

        $i4 = lengthof r5;

        i0 = -1 + $i4;

     label08:
        if i0 < 0 goto label11;

        $l6 = r5[i0];

        $b5 = $l6 cmp 0L;

        if $b5 != 0 goto label10;

     label09:
        i0 = i0 + -1;

        goto label08;

     label10:
        $r10 = new com.android.org.conscrypt.OpenSSLX509Certificate;

        $l7 = r5[i0];

        specialinvoke $r10.<com.android.org.conscrypt.OpenSSLX509Certificate: void <init>(long)>($l7);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label09;

     label11:
        $r9 = new com.android.org.conscrypt.OpenSSLX509CertPath;

        specialinvoke $r9.<com.android.org.conscrypt.OpenSSLX509CertPath: void <init>(java.util.List)>(r6);

        return $r9;

     label12:
        $r12 := @caughtexception;

        goto label05;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
    }

    private byte[] getEncoded(com.android.org.conscrypt.OpenSSLX509CertPath$Encoding) throws java.security.cert.CertificateEncodingException
    {
        com.android.org.conscrypt.OpenSSLX509CertPath r0;
        com.android.org.conscrypt.OpenSSLX509CertPath$Encoding r1;
        com.android.org.conscrypt.OpenSSLX509Certificate[] r2;
        long[] r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.security.cert.X509Certificate r4;
        java.util.List $r5, $r9;
        int[] $r6;
        java.security.cert.CertificateEncodingException $r7;
        byte[] $r8, $r10, $r13;
        boolean $z0;
        java.lang.Object $r11;
        com.android.org.conscrypt.OpenSSLX509Certificate $r12, $r14, $r15;
        long $l7;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertPath;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLX509CertPath$Encoding;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLX509CertPath: java.util.List mCertificates>;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        r2 = newarray (com.android.org.conscrypt.OpenSSLX509Certificate)[$i2];

        $i3 = lengthof r2;

        r3 = newarray (long)[$i3];

        i0 = 0;

        $i4 = lengthof r2;

        i1 = -1 + $i4;

     label1:
        if i1 < 0 goto label4;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLX509CertPath: java.util.List mCertificates>;

        $r11 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (java.security.cert.X509Certificate) $r11;

        $z0 = r4 instanceof com.android.org.conscrypt.OpenSSLX509Certificate;

        if $z0 == 0 goto label3;

        $r15 = (com.android.org.conscrypt.OpenSSLX509Certificate) r4;

        r2[i1] = $r15;

     label2:
        $r14 = r2[i1];

        $l7 = virtualinvoke $r14.<com.android.org.conscrypt.OpenSSLX509Certificate: long getContext()>();

        r3[i1] = $l7;

        i0 = i0 + 1;

        i1 = i1 + -1;

        goto label1;

     label3:
        $r13 = virtualinvoke r4.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        $r12 = staticinvoke <com.android.org.conscrypt.OpenSSLX509Certificate: com.android.org.conscrypt.OpenSSLX509Certificate fromX509Der(byte[])>($r13);

        r2[i1] = $r12;

        goto label2;

     label4:
        $r6 = <com.android.org.conscrypt.OpenSSLX509CertPath$1: int[] $SwitchMap$org$conscrypt$OpenSSLX509CertPath$Encoding>;

        $i5 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLX509CertPath$Encoding: int ordinal()>();

        $i6 = $r6[$i5];

        tableswitch($i6)
        {
            case 1: goto label6;
            case 2: goto label7;
            default: goto label5;
        };

     label5:
        $r7 = new java.security.cert.CertificateEncodingException;

        specialinvoke $r7.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>("Unknown encoding");

        throw $r7;

     label6:
        $r10 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] ASN1_seq_pack_X509(long[])>(r3);

        return $r10;

     label7:
        $r8 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_PKCS7(long[])>(r3);

        return $r8;
    }

    static java.util.Iterator getEncodingsIterator()
    {
        java.util.List $r0;
        java.util.Iterator $r1;

        $r0 = <com.android.org.conscrypt.OpenSSLX509CertPath: java.util.List ALL_ENCODINGS>;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        return $r1;
    }

    public java.util.List getCertificates()
    {
        com.android.org.conscrypt.OpenSSLX509CertPath r0;
        java.util.List $r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertPath;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLX509CertPath: java.util.List mCertificates>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public byte[] getEncoded() throws java.security.cert.CertificateEncodingException
    {
        com.android.org.conscrypt.OpenSSLX509CertPath r0;
        com.android.org.conscrypt.OpenSSLX509CertPath$Encoding $r1;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertPath;

        $r1 = <com.android.org.conscrypt.OpenSSLX509CertPath: com.android.org.conscrypt.OpenSSLX509CertPath$Encoding DEFAULT_ENCODING>;

        $r2 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLX509CertPath: byte[] getEncoded(com.android.org.conscrypt.OpenSSLX509CertPath$Encoding)>($r1);

        return $r2;
    }

    public byte[] getEncoded(java.lang.String) throws java.security.cert.CertificateEncodingException
    {
        com.android.org.conscrypt.OpenSSLX509CertPath r0;
        java.lang.String r1, $r8;
        com.android.org.conscrypt.OpenSSLX509CertPath$Encoding r2;
        byte[] $r3;
        java.security.cert.CertificateEncodingException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertPath;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath$Encoding: com.android.org.conscrypt.OpenSSLX509CertPath$Encoding findByApiName(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r4 = new java.security.cert.CertificateEncodingException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid encoding: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r3 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLX509CertPath: byte[] getEncoded(com.android.org.conscrypt.OpenSSLX509CertPath$Encoding)>(r2);

        return $r3;
    }

    public java.util.Iterator getEncodings()
    {
        com.android.org.conscrypt.OpenSSLX509CertPath r0;
        java.util.Iterator $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertPath;

        $r1 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertPath: java.util.Iterator getEncodingsIterator()>();

        return $r1;
    }
}
