final class dalvik.system.DexPathList extends java.lang.Object
{
    private static final java.lang.String APK_SUFFIX;
    private static final java.lang.String DEX_SUFFIX;
    private static final java.lang.String JAR_SUFFIX;
    private static final java.lang.String ZIP_SUFFIX;
    private final java.lang.ClassLoader definingContext;
    private final dalvik.system.DexPathList$Element[] dexElements;
    private final java.io.IOException[] dexElementsSuppressedExceptions;
    private final java.io.File[] nativeLibraryDirectories;

    public void <init>(java.lang.ClassLoader, java.lang.String, java.lang.String, java.io.File)
    {
        dalvik.system.DexPathList r0;
        java.lang.ClassLoader r1;
        java.lang.String r2, r3, $r16, $r21;
        java.io.File r4;
        java.util.ArrayList r5, $r6, $r7;
        dalvik.system.DexPathList$Element[] $r8;
        int $i0, $i1;
        java.io.File[] $r9;
        java.io.IOException[] $r10, $r12;
        java.lang.Object[] $r11;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r13, $r18;
        java.lang.StringBuilder $r14, $r15, $r17, $r19, $r20, $r22;
        java.lang.NullPointerException $r23, $r24;

        r0 := @this: dalvik.system.DexPathList;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r23 = new java.lang.NullPointerException;

        specialinvoke $r23.<java.lang.NullPointerException: void <init>(java.lang.String)>("definingContext == null");

        throw $r23;

     label1:
        if r2 != null goto label2;

        $r24 = new java.lang.NullPointerException;

        specialinvoke $r24.<java.lang.NullPointerException: void <init>(java.lang.String)>("dexPath == null");

        throw $r24;

     label2:
        if r4 == null goto label5;

        $z0 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $r18 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("optimizedDirectory doesn\'t exist: ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r18;

     label3:
        $z1 = virtualinvoke r4.<java.io.File: boolean canRead()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r4.<java.io.File: boolean canWrite()>();

        if $z2 != 0 goto label5;

     label4:
        $r13 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("optimizedDirectory not readable/writable: ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label5:
        r0.<dalvik.system.DexPathList: java.lang.ClassLoader definingContext> = r1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r5 = $r6;

        $r7 = staticinvoke <dalvik.system.DexPathList: java.util.ArrayList splitDexPath(java.lang.String)>(r2);

        $r8 = staticinvoke <dalvik.system.DexPathList: dalvik.system.DexPathList$Element[] makeDexElements(java.util.ArrayList,java.io.File,java.util.ArrayList)>($r7, r4, r5);

        r0.<dalvik.system.DexPathList: dalvik.system.DexPathList$Element[] dexElements> = $r8;

        $i0 = virtualinvoke r5.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label7;

        $i1 = virtualinvoke r5.<java.util.ArrayList: int size()>();

        $r10 = newarray (java.io.IOException)[$i1];

        $r11 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (java.io.IOException[]) $r11;

        r0.<dalvik.system.DexPathList: java.io.IOException[] dexElementsSuppressedExceptions> = $r12;

     label6:
        $r9 = staticinvoke <dalvik.system.DexPathList: java.io.File[] splitLibraryPath(java.lang.String)>(r3);

        r0.<dalvik.system.DexPathList: java.io.File[] nativeLibraryDirectories> = $r9;

        return;

     label7:
        r0.<dalvik.system.DexPathList: java.io.IOException[] dexElementsSuppressedExceptions> = null;

        goto label6;
    }

    private static dalvik.system.DexFile loadDexFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;
        java.lang.String r2, $r3;
        dalvik.system.DexFile $r4, $r5;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r1 != null goto label1;

        $r5 = new dalvik.system.DexFile;

        specialinvoke $r5.<dalvik.system.DexFile: void <init>(java.io.File)>(r0);

        return $r5;

     label1:
        r2 = staticinvoke <dalvik.system.DexPathList: java.lang.String optimizedPathFor(java.io.File,java.io.File)>(r0, r1);

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r4 = staticinvoke <dalvik.system.DexFile: dalvik.system.DexFile loadDex(java.lang.String,java.lang.String,int)>($r3, r2, 0);

        return $r4;
    }

    private static dalvik.system.DexPathList$Element[] makeDexElements(java.util.ArrayList, java.io.File, java.util.ArrayList)
    {
        java.util.ArrayList r0, r2, r3, $r13;
        java.io.File r1, r5, r6;
        java.util.Iterator r4;
        java.lang.String r7, $r22, $r28;
        java.io.IOException r8, r11, $r26, $r29;
        dalvik.system.DexFile r9, r10, r12;
        int $i0;
        boolean $z0, $z1, $z2, $z4, $z5, $z6;
        java.lang.Object[] $r14;
        dalvik.system.DexPathList$Element[] $r15, $r17;
        java.lang.Object $r16;
        dalvik.system.DexPathList$Element $r18, $r23;
        java.lang.StringBuilder $r19, $r20, $r21, $r24, $r25, $r27;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.util.ArrayList;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r3 = $r13;

        r4 = virtualinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.io.File) $r16;

        r6 = null;

        r7 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        $z1 = virtualinvoke r7.<java.lang.String: boolean endsWith(java.lang.String)>(".dex");

        if $z1 == 0 goto label07;

     label02:
        r12 = staticinvoke <dalvik.system.DexPathList: dalvik.system.DexFile loadDexFile(java.io.File,java.io.File)>(r5, r1);

     label03:
        r9 = r12;

     label04:
        if r6 != null goto label05;

        if r9 == null goto label01;

     label05:
        $r18 = new dalvik.system.DexPathList$Element;

        specialinvoke $r18.<dalvik.system.DexPathList$Element: void <init>(java.io.File,boolean,java.io.File,dalvik.system.DexFile)>(r5, 0, r6, r9);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

        goto label01;

     label06:
        $r26 := @caughtexception;

        r11 = $r26;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load dex file: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <java.lang.System: void logE(java.lang.String,java.lang.Throwable)>($r28, r11);

        r9 = null;

        r6 = null;

        goto label04;

     label07:
        $z2 = virtualinvoke r7.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z2 != 0 goto label08;

        $z5 = virtualinvoke r7.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        if $z5 != 0 goto label08;

        $z4 = virtualinvoke r7.<java.lang.String: boolean endsWith(java.lang.String)>(".zip");

        if $z4 == 0 goto label12;

     label08:
        r6 = r5;

     label09:
        r10 = staticinvoke <dalvik.system.DexPathList: dalvik.system.DexFile loadDexFile(java.io.File,java.io.File)>(r5, r1);

     label10:
        r9 = r10;

        goto label04;

     label11:
        $r29 := @caughtexception;

        r8 = $r29;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

        r9 = null;

        goto label04;

     label12:
        $z6 = virtualinvoke r5.<java.io.File: boolean isDirectory()>();

        if $z6 == 0 goto label13;

        $r23 = new dalvik.system.DexPathList$Element;

        specialinvoke $r23.<dalvik.system.DexPathList$Element: void <init>(java.io.File,boolean,java.io.File,dalvik.system.DexFile)>(r5, 1, null, null);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

        r9 = null;

        r6 = null;

        goto label04;

     label13:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown file type for: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <java.lang.System: void logW(java.lang.String)>($r22);

        r9 = null;

        r6 = null;

        goto label04;

     label14:
        $i0 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        $r15 = newarray (dalvik.system.DexPathList$Element)[$i0];

        $r14 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        $r17 = (dalvik.system.DexPathList$Element[]) $r14;

        return $r17;

        catch java.io.IOException from label02 to label03 with label06;
        catch java.io.IOException from label09 to label10 with label11;
    }

    private static java.lang.String optimizedPathFor(java.io.File, java.io.File)
    {
        java.io.File r0, r1, $r4;
        java.lang.String r2, $r5;
        int i0, $i1;
        java.lang.StringBuilder r3, $r6, $r9, $r10, $r11;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        r2 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".dex");

        if $z0 != 0 goto label1;

        i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        if i0 >= 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dex");

        r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r2);

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getPath()>();

        return $r5;

     label2:
        $r6 = new java.lang.StringBuilder;

        $i1 = i0 + 4;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i1);

        r3 = $r6;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r2, 0, i0);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dex");

        r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;
    }

    private static void splitAndAdd(java.lang.String, boolean, java.util.ArrayList)
    {
        java.lang.String r0, r3;
        boolean z0, $z2;
        java.util.ArrayList r1;
        java.lang.String[] r2;
        int i0, i1, $i2;
        libcore.io.StructStat r5;
        libcore.io.Os $r6;
        java.io.File $r7;
        libcore.io.ErrnoException $r8;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.ArrayList;

        if r0 != null goto label2;

     label1:
        return;

     label2:
        r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        i0 = lengthof r2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label1;

        r3 = r2[i1];

     label4:
        $r6 = <libcore.io.Libcore: libcore.io.Os os>;

        r5 = interfaceinvoke $r6.<libcore.io.Os: libcore.io.StructStat stat(java.lang.String)>(r3);

     label5:
        if z0 == 0 goto label7;

     label6:
        $i2 = r5.<libcore.io.StructStat: int st_mode>;

        $z2 = staticinvoke <libcore.io.OsConstants: boolean S_ISDIR(int)>($i2);

        if $z2 == 0 goto label8;

     label7:
        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(r3);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label8:
        i1 = i1 + 1;

        goto label3;

     label9:
        $r8 := @caughtexception;

        goto label8;

        catch libcore.io.ErrnoException from label4 to label5 with label9;
        catch libcore.io.ErrnoException from label6 to label7 with label9;
        catch libcore.io.ErrnoException from label7 to label8 with label9;
    }

    private static java.util.ArrayList splitDexPath(java.lang.String)
    {
        java.lang.String r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <dalvik.system.DexPathList: java.util.ArrayList splitPaths(java.lang.String,java.lang.String,boolean)>(r0, null, 0);

        return $r1;
    }

    private static java.io.File[] splitLibraryPath(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.ArrayList r1;
        int $i0;
        java.io.File[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.library.path");

        r1 = staticinvoke <dalvik.system.DexPathList: java.util.ArrayList splitPaths(java.lang.String,java.lang.String,boolean)>(r0, $r2, 1);

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r3 = newarray (java.io.File)[$i0];

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.io.File[]) $r4;

        return $r5;
    }

    private static java.util.ArrayList splitPaths(java.lang.String, java.lang.String, boolean)
    {
        java.lang.String r0, r1;
        boolean z0;
        java.util.ArrayList r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2 = $r3;

        staticinvoke <dalvik.system.DexPathList: void splitAndAdd(java.lang.String,boolean,java.util.ArrayList)>(r0, z0, r2);

        staticinvoke <dalvik.system.DexPathList: void splitAndAdd(java.lang.String,boolean,java.util.ArrayList)>(r1, z0, r2);

        return r2;
    }

    public java.lang.Class findClass(java.lang.String, java.util.List)
    {
        dalvik.system.DexPathList r0;
        java.lang.String r1;
        java.util.List r2, $r8;
        dalvik.system.DexPathList$Element[] r3;
        int i0, i1;
        dalvik.system.DexFile r4;
        java.lang.Class r5;
        java.io.IOException[] $r6, $r7;
        dalvik.system.DexPathList$Element $r9;
        java.lang.ClassLoader $r10;

        r0 := @this: dalvik.system.DexPathList;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        r3 = r0.<dalvik.system.DexPathList: dalvik.system.DexPathList$Element[] dexElements>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r9 = r3[i1];

        r4 = staticinvoke <dalvik.system.DexPathList$Element: dalvik.system.DexFile access$000(dalvik.system.DexPathList$Element)>($r9);

        if r4 == null goto label2;

        $r10 = r0.<dalvik.system.DexPathList: java.lang.ClassLoader definingContext>;

        r5 = virtualinvoke r4.<dalvik.system.DexFile: java.lang.Class loadClassBinaryName(java.lang.String,java.lang.ClassLoader,java.util.List)>(r1, $r10, r2);

        if r5 == null goto label2;

        return r5;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r6 = r0.<dalvik.system.DexPathList: java.io.IOException[] dexElementsSuppressedExceptions>;

        if $r6 == null goto label4;

        $r7 = r0.<dalvik.system.DexPathList: java.io.IOException[] dexElementsSuppressedExceptions>;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r8);

     label4:
        return null;
    }

    public java.lang.String findLibrary(java.lang.String)
    {
        dalvik.system.DexPathList r0;
        java.lang.String r1, r2, r4;
        java.io.File[] r3;
        int i0, i1;
        java.io.File $r5, $r6;
        boolean $z0;

        r0 := @this: dalvik.system.DexPathList;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <java.lang.System: java.lang.String mapLibraryName(java.lang.String)>(r1);

        r3 = r0.<dalvik.system.DexPathList: java.io.File[] nativeLibraryDirectories>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r5 = new java.io.File;

        $r6 = r3[i1];

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r2);

        r4 = virtualinvoke $r5.<java.io.File: java.lang.String getPath()>();

        $z0 = staticinvoke <libcore.io.IoUtils: boolean canOpenReadOnly(java.lang.String)>(r4);

        if $z0 == 0 goto label2;

        return r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public java.net.URL findResource(java.lang.String)
    {
        dalvik.system.DexPathList r0;
        java.lang.String r1;
        dalvik.system.DexPathList$Element[] r2;
        int i0, i1;
        java.net.URL r3;
        dalvik.system.DexPathList$Element $r4;

        r0 := @this: dalvik.system.DexPathList;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<dalvik.system.DexPathList: dalvik.system.DexPathList$Element[] dexElements>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r2[i1];

        r3 = virtualinvoke $r4.<dalvik.system.DexPathList$Element: java.net.URL findResource(java.lang.String)>(r1);

        if r3 == null goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public java.util.Enumeration findResources(java.lang.String)
    {
        dalvik.system.DexPathList r0;
        java.lang.String r1;
        java.util.ArrayList r2, $r5;
        dalvik.system.DexPathList$Element[] r3;
        int i0, i1;
        java.net.URL r4;
        java.util.Enumeration $r6;
        dalvik.system.DexPathList$Element $r7;

        r0 := @this: dalvik.system.DexPathList;

        r1 := @parameter0: java.lang.String;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        r3 = r0.<dalvik.system.DexPathList: dalvik.system.DexPathList$Element[] dexElements>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r7 = r3[i1];

        r4 = virtualinvoke $r7.<dalvik.system.DexPathList$Element: java.net.URL findResource(java.lang.String)>(r1);

        if r4 == null goto label2;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r6 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>(r2);

        return $r6;
    }

    public java.io.File[] getNativeLibraryDirectories()
    {
        dalvik.system.DexPathList r0;
        java.io.File[] $r1;

        r0 := @this: dalvik.system.DexPathList;

        $r1 = r0.<dalvik.system.DexPathList: java.io.File[] nativeLibraryDirectories>;

        return $r1;
    }

    public java.lang.String toString()
    {
        dalvik.system.DexPathList r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r9, $r10;
        dalvik.system.DexPathList$Element[] $r3;
        java.lang.String $r4, $r8, $r11;
        java.io.File[] $r7;

        r0 := @this: dalvik.system.DexPathList;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DexPathList[");

        $r3 = r0.<dalvik.system.DexPathList: dalvik.system.DexPathList$Element[] dexElements>;

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",nativeLibraryDirectories=");

        $r7 = r0.<dalvik.system.DexPathList: java.io.File[] nativeLibraryDirectories>;

        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public static void <clinit>()
    {
        <dalvik.system.DexPathList: java.lang.String ZIP_SUFFIX> = ".zip";

        <dalvik.system.DexPathList: java.lang.String JAR_SUFFIX> = ".jar";

        <dalvik.system.DexPathList: java.lang.String DEX_SUFFIX> = ".dex";

        <dalvik.system.DexPathList: java.lang.String APK_SUFFIX> = ".apk";

        return;
    }
}
