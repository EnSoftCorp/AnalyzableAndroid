public final enum class javax.net.ssl.SSLEngineResult$HandshakeStatus extends java.lang.Enum
{
    private static final javax.net.ssl.SSLEngineResult$HandshakeStatus[] $VALUES;
    public static final enum javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED;
    public static final enum javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK;
    public static final enum javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP;
    public static final enum javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP;
    public static final enum javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING;

    static void <clinit>()
    {
        javax.net.ssl.SSLEngineResult$HandshakeStatus[] r0;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        $r1 = new javax.net.ssl.SSLEngineResult$HandshakeStatus;

        specialinvoke $r1.<javax.net.ssl.SSLEngineResult$HandshakeStatus: void <init>(java.lang.String,int)>("NOT_HANDSHAKING", 0);

        <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING> = $r1;

        $r2 = new javax.net.ssl.SSLEngineResult$HandshakeStatus;

        specialinvoke $r2.<javax.net.ssl.SSLEngineResult$HandshakeStatus: void <init>(java.lang.String,int)>("FINISHED", 1);

        <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED> = $r2;

        $r3 = new javax.net.ssl.SSLEngineResult$HandshakeStatus;

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult$HandshakeStatus: void <init>(java.lang.String,int)>("NEED_TASK", 2);

        <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK> = $r3;

        $r4 = new javax.net.ssl.SSLEngineResult$HandshakeStatus;

        specialinvoke $r4.<javax.net.ssl.SSLEngineResult$HandshakeStatus: void <init>(java.lang.String,int)>("NEED_WRAP", 3);

        <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP> = $r4;

        $r5 = new javax.net.ssl.SSLEngineResult$HandshakeStatus;

        specialinvoke $r5.<javax.net.ssl.SSLEngineResult$HandshakeStatus: void <init>(java.lang.String,int)>("NEED_UNWRAP", 4);

        <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP> = $r5;

        r0 = newarray (javax.net.ssl.SSLEngineResult$HandshakeStatus)[5];

        $r6 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        r0[0] = $r6;

        $r7 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED>;

        r0[1] = $r7;

        $r8 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;

        r0[2] = $r8;

        $r9 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        r0[3] = $r9;

        $r10 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        r0[4] = $r10;

        <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus[] $VALUES> = r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        javax.net.ssl.SSLEngineResult$HandshakeStatus r0;
        java.lang.String r1;
        int i0;

        r0 := @this: javax.net.ssl.SSLEngineResult$HandshakeStatus;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static javax.net.ssl.SSLEngineResult$HandshakeStatus valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "javax/net/ssl/SSLEngineResult$HandshakeStatus", r0);

        $r2 = (javax.net.ssl.SSLEngineResult$HandshakeStatus) $r1;

        return $r2;
    }

    public static javax.net.ssl.SSLEngineResult$HandshakeStatus[] values()
    {
        javax.net.ssl.SSLEngineResult$HandshakeStatus[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (javax.net.ssl.SSLEngineResult$HandshakeStatus[]) $r1;

        return $r2;
    }
}
