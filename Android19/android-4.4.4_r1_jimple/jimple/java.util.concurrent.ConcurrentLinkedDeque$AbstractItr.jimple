abstract class java.util.concurrent.ConcurrentLinkedDeque$AbstractItr extends java.lang.Object implements java.util.Iterator
{
    private java.util.concurrent.ConcurrentLinkedDeque$Node lastRet;
    private java.lang.Object nextItem;
    private java.util.concurrent.ConcurrentLinkedDeque$Node nextNode;
    final java.util.concurrent.ConcurrentLinkedDeque this$0;

    void <init>(java.util.concurrent.ConcurrentLinkedDeque)
    {
        java.util.concurrent.ConcurrentLinkedDeque$AbstractItr r0;
        java.util.concurrent.ConcurrentLinkedDeque r1;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$AbstractItr;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedDeque;

        r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: void advance()>();

        return;
    }

    private void advance()
    {
        java.util.concurrent.ConcurrentLinkedDeque$AbstractItr r0;
        java.util.concurrent.ConcurrentLinkedDeque$Node r1, $r3, $r4, $r5;
        java.lang.Object r2;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$AbstractItr;

        $r3 = r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque$Node nextNode>;

        r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque$Node lastRet> = $r3;

        $r4 = r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque$Node nextNode>;

        if $r4 != null goto label2;

        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque$Node startNode()>();

     label1:
        if r1 != null goto label3;

        r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque$Node nextNode> = null;

        r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.lang.Object nextItem> = null;

        return;

     label2:
        $r5 = r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque$Node nextNode>;

        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque$Node nextNode(java.util.concurrent.ConcurrentLinkedDeque$Node)>($r5);

        goto label1;

     label3:
        r2 = r1.<java.util.concurrent.ConcurrentLinkedDeque$Node: java.lang.Object item>;

        if r2 == null goto label4;

        r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque$Node nextNode> = r1;

        r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.lang.Object nextItem> = r2;

        return;

     label4:
        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque$Node nextNode(java.util.concurrent.ConcurrentLinkedDeque$Node)>(r1);

        goto label1;
    }

    public boolean hasNext()
    {
        java.util.concurrent.ConcurrentLinkedDeque$AbstractItr r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$AbstractItr;

        $r1 = r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.lang.Object nextItem>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        java.util.concurrent.ConcurrentLinkedDeque$AbstractItr r0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$AbstractItr;

        r1 = r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.lang.Object nextItem>;

        if r1 != null goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        specialinvoke r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: void advance()>();

        return r1;
    }

    abstract java.util.concurrent.ConcurrentLinkedDeque$Node nextNode(java.util.concurrent.ConcurrentLinkedDeque$Node);

    public void remove()
    {
        java.util.concurrent.ConcurrentLinkedDeque$AbstractItr r0;
        java.util.concurrent.ConcurrentLinkedDeque$Node r1;
        java.util.concurrent.ConcurrentLinkedDeque $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$AbstractItr;

        r1 = r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque$Node lastRet>;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        r1.<java.util.concurrent.ConcurrentLinkedDeque$Node: java.lang.Object item> = null;

        $r2 = r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque this$0>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentLinkedDeque: void unlink(java.util.concurrent.ConcurrentLinkedDeque$Node)>(r1);

        r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: java.util.concurrent.ConcurrentLinkedDeque$Node lastRet> = null;

        return;
    }

    abstract java.util.concurrent.ConcurrentLinkedDeque$Node startNode();
}
