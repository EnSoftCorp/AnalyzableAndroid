public class java.util.zip.Adler32 extends java.lang.Object implements java.util.zip.Checksum
{
    private long adler;

    public void <init>()
    {
        java.util.zip.Adler32 r0;

        r0 := @this: java.util.zip.Adler32;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.zip.Adler32: long adler> = 1L;

        return;
    }

    private native long updateByteImpl(int, long);

    private native long updateImpl(byte[], int, int, long);

    public long getValue()
    {
        java.util.zip.Adler32 r0;
        long $l0;

        r0 := @this: java.util.zip.Adler32;

        $l0 = r0.<java.util.zip.Adler32: long adler>;

        return $l0;
    }

    public void reset()
    {
        java.util.zip.Adler32 r0;

        r0 := @this: java.util.zip.Adler32;

        r0.<java.util.zip.Adler32: long adler> = 1L;

        return;
    }

    public void update(int)
    {
        java.util.zip.Adler32 r0;
        int i0;
        long $l1, $l2;

        r0 := @this: java.util.zip.Adler32;

        i0 := @parameter0: int;

        $l1 = r0.<java.util.zip.Adler32: long adler>;

        $l2 = specialinvoke r0.<java.util.zip.Adler32: long updateByteImpl(int,long)>(i0, $l1);

        r0.<java.util.zip.Adler32: long adler> = $l2;

        return;
    }

    public void update(byte[])
    {
        java.util.zip.Adler32 r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.util.zip.Adler32;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.util.zip.Adler32: void update(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void update(byte[], int, int)
    {
        java.util.zip.Adler32 r0;
        byte[] r1;
        int i0, i1, $i2;
        long $l3, $l4;

        r0 := @this: java.util.zip.Adler32;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $l3 = r0.<java.util.zip.Adler32: long adler>;

        $l4 = specialinvoke r0.<java.util.zip.Adler32: long updateImpl(byte[],int,int,long)>(r1, i0, i1, $l3);

        r0.<java.util.zip.Adler32: long adler> = $l4;

        return;
    }
}
