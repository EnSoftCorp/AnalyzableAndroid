public class java.util.zip.ZipFile extends java.lang.Object implements java.io.Closeable, java.util.zip.ZipConstants
{
    static final int GPBF_DATA_DESCRIPTOR_FLAG;
    static final int GPBF_ENCRYPTED_FLAG;
    static final int GPBF_UNSUPPORTED_MASK;
    static final int GPBF_UTF8_FLAG;
    public static final int OPEN_DELETE;
    public static final int OPEN_READ;
    private java.lang.String comment;
    private final java.util.LinkedHashMap entries;
    private java.io.File fileToDeleteOnClose;
    private final java.lang.String filename;
    private final dalvik.system.CloseGuard guard;
    private java.io.RandomAccessFile raf;

    public void <init>(java.io.File) throws java.util.zip.ZipException, java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.io.File r1;

        r0 := @this: java.util.zip.ZipFile;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.util.zip.ZipFile: void <init>(java.io.File,int)>(r1, 1);

        return;
    }

    public void <init>(java.io.File, int) throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.io.File r1, $r8;
        int i0, $i1;
        java.util.LinkedHashMap $r2;
        dalvik.system.CloseGuard $r3, $r7;
        java.lang.String $r4, $r6, $r13;
        java.io.RandomAccessFile $r5;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @this: java.util.zip.ZipFile;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries> = $r2;

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.util.zip.ZipFile: dalvik.system.CloseGuard guard> = $r3;

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        r0.<java.util.zip.ZipFile: java.lang.String filename> = $r4;

        if i0 == 1 goto label1;

        if i0 == 5 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad mode: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $i1 = i0 & 4;

        if $i1 == 0 goto label3;

        r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose> = r1;

        $r8 = r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose>;

        virtualinvoke $r8.<java.io.File: void deleteOnExit()>();

     label2:
        $r5 = new java.io.RandomAccessFile;

        $r6 = r0.<java.util.zip.ZipFile: java.lang.String filename>;

        specialinvoke $r5.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r6, "r");

        r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf> = $r5;

        specialinvoke r0.<java.util.zip.ZipFile: void readCentralDir()>();

        $r7 = r0.<java.util.zip.ZipFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r7.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

     label3:
        r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose> = null;

        goto label2;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.lang.String r1;
        java.io.File $r2;

        r0 := @this: java.util.zip.ZipFile;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<java.util.zip.ZipFile: void <init>(java.io.File,int)>($r2, 1);

        return;
    }

    static void access$000(java.util.zip.ZipFile)
    {
        java.util.zip.ZipFile r0;

        r0 := @parameter0: java.util.zip.ZipFile;

        specialinvoke r0.<java.util.zip.ZipFile: void checkNotClosed()>();

        return;
    }

    private void checkNotClosed()
    {
        java.util.zip.ZipFile r0;
        java.io.RandomAccessFile $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: java.util.zip.ZipFile;

        $r1 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Zip file closed");

        throw $r2;

     label1:
        return;
    }

    private void readCentralDir() throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        long l0, l1, l6, $l9, $l12, $l19, $l26, $l30, $l32;
        byte[] r1, r5, r9;
        libcore.io.BufferIterator r2;
        int i2, i3, i4, i5, i7, i8, $i11, $i13, $i16, $i17, $i21, $i27, $i31;
        java.util.zip.ZipFile$RAFStream r3, $r19;
        java.io.BufferedInputStream r4, $r22;
        java.lang.String r6, r8, $r26, $r35, $r37;
        java.util.zip.ZipEntry r7, $r21;
        java.io.RandomAccessFile $r10, $r11, $r12, $r13, $r14, $r16, $r18, $r34, $r38;
        byte $b10, $b14, $b15, $b18, $b20, $b29;
        java.util.zip.ZipException $r15, $r20, $r29, $r30, $r31, $r33;
        java.nio.ByteOrder $r17;
        short $s22, $s23, $s24, $s25, $s28;
        java.lang.StringBuilder $r23, $r24, $r25, $r32, $r39, $r40;
        java.util.LinkedHashMap $r27;
        java.lang.Object $r28;
        java.nio.charset.Charset $r36;

        r0 := @this: java.util.zip.ZipFile;

        $r10 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        $l9 = virtualinvoke $r10.<java.io.RandomAccessFile: long length()>();

        l0 = $l9 - 22L;

        $b10 = l0 cmp 0L;

        if $b10 >= 0 goto label01;

        $r31 = new java.util.zip.ZipException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File too short to be a zip file: ");

        $r38 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        $l32 = virtualinvoke $r38.<java.io.RandomAccessFile: long length()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l32);

        $r37 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.util.zip.ZipException: void <init>(java.lang.String)>($r37);

        throw $r31;

     label01:
        $r11 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        virtualinvoke $r11.<java.io.RandomAccessFile: void seek(long)>(0L);

        $r12 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        $i11 = virtualinvoke $r12.<java.io.RandomAccessFile: int readInt()>();

        $i13 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i11);

        $l12 = (long) $i13;

        $b15 = $l12 cmp 67324752L;

        if $b15 == 0 goto label02;

        $r30 = new java.util.zip.ZipException;

        specialinvoke $r30.<java.util.zip.ZipException: void <init>(java.lang.String)>("Not a zip archive");

        throw $r30;

     label02:
        l1 = l0 - 65536L;

        $b14 = l1 cmp 0L;

        if $b14 >= 0 goto label03;

        l1 = 0L;

     label03:
        $r13 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        virtualinvoke $r13.<java.io.RandomAccessFile: void seek(long)>(l0);

        $r14 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        $i16 = virtualinvoke $r14.<java.io.RandomAccessFile: int readInt()>();

        $i17 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i16);

        $l19 = (long) $i17;

        $b20 = $l19 cmp 101010256L;

        if $b20 != 0 goto label05;

        r1 = newarray (byte)[18];

        $r16 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        virtualinvoke $r16.<java.io.RandomAccessFile: void readFully(byte[])>(r1);

        $i21 = lengthof r1;

        $r17 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r2 = staticinvoke <libcore.io.HeapBufferIterator: libcore.io.BufferIterator iterator(byte[],int,int,java.nio.ByteOrder)>(r1, 0, $i21, $r17);

        $s23 = virtualinvoke r2.<libcore.io.BufferIterator: short readShort()>();

        i2 = 65535 & $s23;

        $s22 = virtualinvoke r2.<libcore.io.BufferIterator: short readShort()>();

        i3 = 65535 & $s22;

        $s25 = virtualinvoke r2.<libcore.io.BufferIterator: short readShort()>();

        i4 = 65535 & $s25;

        $s24 = virtualinvoke r2.<libcore.io.BufferIterator: short readShort()>();

        i5 = 65535 & $s24;

        virtualinvoke r2.<libcore.io.BufferIterator: void skip(int)>(4);

        $i27 = virtualinvoke r2.<libcore.io.BufferIterator: int readInt()>();

        $l26 = (long) $i27;

        l6 = 4294967295L & $l26;

        $s28 = virtualinvoke r2.<libcore.io.BufferIterator: short readShort()>();

        i7 = 65535 & $s28;

        if i4 != i5 goto label04;

        if i2 != 0 goto label04;

        if i3 == 0 goto label06;

     label04:
        $r20 = new java.util.zip.ZipException;

        specialinvoke $r20.<java.util.zip.ZipException: void <init>(java.lang.String)>("Spanned archives not supported");

        throw $r20;

     label05:
        l0 = l0 - 1L;

        $b18 = l0 cmp l1;

        if $b18 >= 0 goto label03;

        $r15 = new java.util.zip.ZipException;

        specialinvoke $r15.<java.util.zip.ZipException: void <init>(java.lang.String)>("End Of Central Directory signature not found");

        throw $r15;

     label06:
        if i7 <= 0 goto label07;

        r9 = newarray (byte)[i7];

        $r34 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        virtualinvoke $r34.<java.io.RandomAccessFile: void readFully(byte[])>(r9);

        $r35 = new java.lang.String;

        $i31 = lengthof r9;

        $r36 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r35.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r9, 0, $i31, $r36);

        r8 = $r35;

        r0.<java.util.zip.ZipFile: java.lang.String comment> = r8;

     label07:
        $r19 = new java.util.zip.ZipFile$RAFStream;

        $r18 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        specialinvoke $r19.<java.util.zip.ZipFile$RAFStream: void <init>(java.io.RandomAccessFile,long)>($r18, l6);

        r3 = $r19;

        $r22 = new java.io.BufferedInputStream;

        specialinvoke $r22.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(r3, 4096);

        r4 = $r22;

        r5 = newarray (byte)[46];

        i8 = 0;

     label08:
        if i8 >= i4 goto label11;

        $r21 = new java.util.zip.ZipEntry;

        specialinvoke $r21.<java.util.zip.ZipEntry: void <init>(byte[],java.io.InputStream)>(r5, r4);

        r7 = $r21;

        $l30 = r7.<java.util.zip.ZipEntry: long localHeaderRelOffset>;

        $b29 = $l30 cmp l6;

        if $b29 < 0 goto label09;

        $r33 = new java.util.zip.ZipException;

        specialinvoke $r33.<java.util.zip.ZipException: void <init>(java.lang.String)>("Local file header offset is after central directory");

        throw $r33;

     label09:
        r6 = virtualinvoke r7.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r27 = r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries>;

        $r28 = virtualinvoke $r27.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

        if $r28 == null goto label10;

        $r29 = new java.util.zip.ZipException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate entry name: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.util.zip.ZipException: void <init>(java.lang.String)>($r26);

        throw $r29;

     label10:
        i8 = i8 + 1;

        goto label08;

     label11:
        return;
    }

    static void throwZipException(java.lang.String, int) throws java.util.zip.ZipException
    {
        java.lang.String r0, r1, $r7;
        int i0;
        java.util.zip.ZipException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = staticinvoke <java.lang.IntegralToString: java.lang.String intToHexString(int,boolean,int)>(i0, 1, 8);

        $r2 = new java.util.zip.ZipException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature not found; was ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.util.zip.ZipException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.io.RandomAccessFile r1;
        java.lang.Throwable r2, $r6;
        dalvik.system.CloseGuard $r3;
        java.io.File $r4, $r5;

        r0 := @this: java.util.zip.ZipFile;

        $r3 = r0.<java.util.zip.ZipFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void close()>();

        r1 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        if r1 == null goto label3;

        entermonitor r1;

     label1:
        r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf> = null;

        virtualinvoke r1.<java.io.RandomAccessFile: void close()>();

        exitmonitor r1;

     label2:
        $r4 = r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose>;

        if $r4 == null goto label3;

        $r5 = r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose>;

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose> = null;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.util.Enumeration entries()
    {
        java.util.zip.ZipFile r0;
        java.util.zip.ZipFile$1 $r1;
        java.util.LinkedHashMap $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;

        r0 := @this: java.util.zip.ZipFile;

        specialinvoke r0.<java.util.zip.ZipFile: void checkNotClosed()>();

        $r1 = new java.util.zip.ZipFile$1;

        $r2 = r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        specialinvoke $r1.<java.util.zip.ZipFile$1: void <init>(java.util.zip.ZipFile,java.util.Iterator)>(r0, $r4);

        return $r1;
    }

    protected void finalize() throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.lang.Throwable r1, r2, r3, $r6, $r7, $r9;
        dalvik.system.CloseGuard $r4, $r5;
        java.lang.AssertionError $r8, $r10;

        r0 := @this: java.util.zip.ZipFile;

     label1:
        $r4 = r0.<java.util.zip.ZipFile: dalvik.system.CloseGuard guard>;

        if $r4 == null goto label2;

        $r5 = r0.<java.util.zip.ZipFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

     label5:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label6:
        throw r1;

     label7:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r8;

     label8:
        $r9 := @caughtexception;

        r3 = $r9;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public java.lang.String getComment()
    {
        java.util.zip.ZipFile r0;
        java.lang.String $r1;

        r0 := @this: java.util.zip.ZipFile;

        specialinvoke r0.<java.util.zip.ZipFile: void checkNotClosed()>();

        $r1 = r0.<java.util.zip.ZipFile: java.lang.String comment>;

        return $r1;
    }

    public java.util.zip.ZipEntry getEntry(java.lang.String)
    {
        java.util.zip.ZipFile r0;
        java.lang.String r1, $r9;
        java.util.zip.ZipEntry r2;
        java.util.LinkedHashMap $r3, $r6;
        java.lang.Object $r4, $r10;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.NullPointerException $r11;

        r0 := @this: java.util.zip.ZipFile;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.util.zip.ZipFile: void checkNotClosed()>();

        if r1 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("entryName == null");

        throw $r11;

     label1:
        $r3 = r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.util.zip.ZipEntry) $r4;

        if r2 != null goto label2;

        $r6 = r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r9);

        r2 = (java.util.zip.ZipEntry) $r10;

     label2:
        return r2;
    }

    public java.io.InputStream getInputStream(java.util.zip.ZipEntry) throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.util.zip.ZipEntry r1, r2;
        java.io.RandomAccessFile r3;
        java.util.zip.ZipFile$RAFStream r4, $r9;
        java.io.DataInputStream r5, $r10;
        java.lang.Throwable r6, $r18;
        int i0, i1, i2, i3, i4, $i6, $i13, $i20, $i23, $i28;
        java.lang.String $r7, $r17;
        java.util.zip.ZipFile$ZipInflaterInputStream r8, $r12;
        long $l5, $l7, $l17, $l21, $l22, $l24, $l25, $l26, $l29, $l30, $l31;
        byte $b9;
        short $s10, $s12, $s14, $s15, $s16, $s19;
        java.util.zip.Inflater $r11;
        java.lang.StringBuilder $r13, $r15, $r16;
        java.util.zip.ZipException $r14;

        r0 := @this: java.util.zip.ZipFile;

        r1 := @parameter0: java.util.zip.ZipEntry;

        $r7 = virtualinvoke r1.<java.util.zip.ZipEntry: java.lang.String getName()>();

        r2 = virtualinvoke r0.<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>($r7);

        if r2 != null goto label01;

        return null;

     label01:
        r3 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        entermonitor r3;

     label02:
        $r9 = new java.util.zip.ZipFile$RAFStream;

        $l5 = r2.<java.util.zip.ZipEntry: long localHeaderRelOffset>;

        specialinvoke $r9.<java.util.zip.ZipFile$RAFStream: void <init>(java.io.RandomAccessFile,long)>(r3, $l5);

        r4 = $r9;

        $r10 = new java.io.DataInputStream;

        specialinvoke $r10.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r4);

        r5 = $r10;

        $i6 = virtualinvoke r5.<java.io.DataInputStream: int readInt()>();

        i0 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i6);

     label03:
        $l7 = (long) i0;

        $b9 = $l7 cmp 67324752L;

        if $b9 == 0 goto label05;

     label04:
        staticinvoke <java.util.zip.ZipFile: void throwZipException(java.lang.String,int)>("Local File Header", i0);

     label05:
        virtualinvoke r5.<java.io.DataInputStream: int skipBytes(int)>(2);

        $s10 = virtualinvoke r5.<java.io.DataInputStream: short readShort()>();

        $s12 = staticinvoke <java.lang.Short: short reverseBytes(short)>($s10);

        i1 = 65535 & $s12;

     label06:
        $i13 = i1 & 1;

        if $i13 == 0 goto label11;

     label07:
        $r14 = new java.util.zip.ZipException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid General Purpose Bit Flag: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.util.zip.ZipException: void <init>(java.lang.String)>($r17);

        throw $r14;

     label08:
        $r18 := @caughtexception;

        r6 = $r18;

     label09:
        exitmonitor r3;

     label10:
        throw r6;

     label11:
        virtualinvoke r5.<java.io.DataInputStream: int skipBytes(int)>(18);

        $s15 = virtualinvoke r5.<java.io.DataInputStream: short readShort()>();

        $s16 = staticinvoke <java.lang.Short: short reverseBytes(short)>($s15);

        i2 = 65535 & $s16;

        $s14 = virtualinvoke r5.<java.io.DataInputStream: short readShort()>();

        $s19 = staticinvoke <java.lang.Short: short reverseBytes(short)>($s14);

        i3 = 65535 & $s19;

        virtualinvoke r5.<java.io.DataInputStream: void close()>();

        $i20 = i2 + i3;

        $l17 = (long) $i20;

        virtualinvoke r4.<java.util.zip.ZipFile$RAFStream: long skip(long)>($l17);

        $i23 = r2.<java.util.zip.ZipEntry: int compressionMethod>;

        if $i23 != 0 goto label13;

        $l31 = staticinvoke <java.util.zip.ZipFile$RAFStream: long access$200(java.util.zip.ZipFile$RAFStream)>(r4);

        $l30 = r2.<java.util.zip.ZipEntry: long size>;

        $l29 = $l31 + $l30;

        staticinvoke <java.util.zip.ZipFile$RAFStream: long access$102(java.util.zip.ZipFile$RAFStream,long)>(r4, $l29);

        exitmonitor r3;

     label12:
        return r4;

     label13:
        $l24 = staticinvoke <java.util.zip.ZipFile$RAFStream: long access$200(java.util.zip.ZipFile$RAFStream)>(r4);

        $l21 = r2.<java.util.zip.ZipEntry: long compressedSize>;

        $l22 = $l24 + $l21;

        staticinvoke <java.util.zip.ZipFile$RAFStream: long access$102(java.util.zip.ZipFile$RAFStream,long)>(r4, $l22);

        $l26 = virtualinvoke r2.<java.util.zip.ZipEntry: long getSize()>();

        $l25 = staticinvoke <java.lang.Math: long min(long,long)>($l26, 65535L);

        $i28 = (int) $l25;

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(1024, $i28);

        $r12 = new java.util.zip.ZipFile$ZipInflaterInputStream;

        $r11 = new java.util.zip.Inflater;

        specialinvoke $r11.<java.util.zip.Inflater: void <init>(boolean)>(1);

        specialinvoke $r12.<java.util.zip.ZipFile$ZipInflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int,java.util.zip.ZipEntry)>(r4, $r11, i4, r2);

        r8 = $r12;

        exitmonitor r3;

     label14:
        return r8;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label11 to label12 with label08;
        catch java.lang.Throwable from label13 to label14 with label08;
    }

    public java.lang.String getName()
    {
        java.util.zip.ZipFile r0;
        java.lang.String $r1;

        r0 := @this: java.util.zip.ZipFile;

        $r1 = r0.<java.util.zip.ZipFile: java.lang.String filename>;

        return $r1;
    }

    public int size()
    {
        java.util.zip.ZipFile r0;
        java.util.LinkedHashMap $r1;
        int $i0;

        r0 := @this: java.util.zip.ZipFile;

        specialinvoke r0.<java.util.zip.ZipFile: void checkNotClosed()>();

        $r1 = r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries>;

        $i0 = virtualinvoke $r1.<java.util.LinkedHashMap: int size()>();

        return $i0;
    }

    public static void <clinit>()
    {
        <java.util.zip.ZipFile: int OPEN_READ> = 1;

        <java.util.zip.ZipFile: int OPEN_DELETE> = 4;

        <java.util.zip.ZipFile: int GPBF_UTF8_FLAG> = 2048;

        <java.util.zip.ZipFile: int GPBF_UNSUPPORTED_MASK> = 1;

        <java.util.zip.ZipFile: int GPBF_ENCRYPTED_FLAG> = 1;

        <java.util.zip.ZipFile: int GPBF_DATA_DESCRIPTOR_FLAG> = 8;

        return;
    }
}
