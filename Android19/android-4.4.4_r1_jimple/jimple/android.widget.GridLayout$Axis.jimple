final class android.widget.GridLayout$Axis extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    private static final int COMPLETE;
    private static final int NEW;
    private static final int PENDING;
    public android.widget.GridLayout$Arc[] arcs;
    public boolean arcsValid;
    android.widget.GridLayout$PackedMap backwardLinks;
    public boolean backwardLinksValid;
    public int definedCount;
    android.widget.GridLayout$PackedMap forwardLinks;
    public boolean forwardLinksValid;
    android.widget.GridLayout$PackedMap groupBounds;
    public boolean groupBoundsValid;
    public final boolean horizontal;
    public int[] leadingMargins;
    public boolean leadingMarginsValid;
    public int[] locations;
    public boolean locationsValid;
    private int maxIndex;
    boolean orderPreserved;
    private android.widget.GridLayout$MutableInt parentMax;
    private android.widget.GridLayout$MutableInt parentMin;
    final android.widget.GridLayout this$0;
    public int[] trailingMargins;
    public boolean trailingMarginsValid;

    static void <clinit>()
    {
        boolean z0, $z1;
        java.lang.Class $r0;

        <android.widget.GridLayout$Axis: int PENDING> = 1;

        <android.widget.GridLayout$Axis: int NEW> = 0;

        <android.widget.GridLayout$Axis: int COMPLETE> = 2;

        $r0 = class "android/widget/GridLayout";

        $z1 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z1 != 0 goto label2;

        z0 = 1;

     label1:
        <android.widget.GridLayout$Axis: boolean $assertionsDisabled> = z0;

        return;

     label2:
        z0 = 0;

        goto label1;

        return;
    }

    private void <init>(android.widget.GridLayout, boolean)
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout r1;
        boolean z0;
        android.widget.GridLayout$MutableInt $r2, $r3;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: android.widget.GridLayout;

        z0 := @parameter1: boolean;

        r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.widget.GridLayout$Axis: int definedCount> = -2147483648;

        r0.<android.widget.GridLayout$Axis: int maxIndex> = -2147483648;

        r0.<android.widget.GridLayout$Axis: boolean groupBoundsValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean forwardLinksValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean backwardLinksValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean leadingMarginsValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean trailingMarginsValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean arcsValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean locationsValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean orderPreserved> = 1;

        $r2 = new android.widget.GridLayout$MutableInt;

        specialinvoke $r2.<android.widget.GridLayout$MutableInt: void <init>(int)>(0);

        r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$MutableInt parentMin> = $r2;

        $r3 = new android.widget.GridLayout$MutableInt;

        specialinvoke $r3.<android.widget.GridLayout$MutableInt: void <init>(int)>(-100000);

        r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$MutableInt parentMax> = $r3;

        r0.<android.widget.GridLayout$Axis: boolean horizontal> = z0;

        return;
    }

    void <init>(android.widget.GridLayout, boolean, android.widget.GridLayout$1)
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout r1;
        boolean z0;
        android.widget.GridLayout$1 r2;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: android.widget.GridLayout;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.widget.GridLayout$1;

        specialinvoke r0.<android.widget.GridLayout$Axis: void <init>(android.widget.GridLayout,boolean)>(r1, z0);

        return;
    }

    private void addComponentSizes(java.util.List, android.widget.GridLayout$PackedMap)
    {
        android.widget.GridLayout$Axis r0;
        java.util.List r1;
        android.widget.GridLayout$PackedMap r2;
        int i0, $i1;
        java.lang.Object[] $r3, $r5, $r7;
        android.widget.GridLayout$Interval[] $r4, $r6;
        android.widget.GridLayout$MutableInt[] $r8;
        android.widget.GridLayout$MutableInt $r9;
        android.widget.GridLayout$Interval $r10;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.widget.GridLayout$PackedMap;

        i0 = 0;

     label1:
        $r3 = r2.<android.widget.GridLayout$PackedMap: java.lang.Object[] keys>;

        $r4 = (android.widget.GridLayout$Interval[]) $r3;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label2;

        $r5 = r2.<android.widget.GridLayout$PackedMap: java.lang.Object[] keys>;

        $r6 = (android.widget.GridLayout$Interval[]) $r5;

        $r10 = $r6[i0];

        $r7 = r2.<android.widget.GridLayout$PackedMap: java.lang.Object[] values>;

        $r8 = (android.widget.GridLayout$MutableInt[]) $r7;

        $r9 = $r8[i0];

        specialinvoke r0.<android.widget.GridLayout$Axis: void include(java.util.List,android.widget.GridLayout$Interval,android.widget.GridLayout$MutableInt,boolean)>(r1, $r10, $r9, 0);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private java.lang.String arcsToString(java.util.List)
    {
        android.widget.GridLayout$Axis r0;
        java.util.List r1;
        java.lang.String r2, r6, $r8;
        java.lang.StringBuilder r3, $r7, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        boolean z0, $z1, $z2;
        java.util.Iterator r4;
        android.widget.GridLayout$Arc r5;
        int i0, i1, i2, $i3;
        java.lang.Object $r9;
        android.widget.GridLayout$Interval $r10, $r11;
        android.widget.GridLayout$MutableInt $r13;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: java.util.List;

        $z1 = r0.<android.widget.GridLayout$Axis: boolean horizontal>;

        if $z1 == 0 goto label5;

        r2 = "x";

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r3 = $r7;

        z0 = 1;

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.widget.GridLayout$Arc) $r9;

        if z0 == 0 goto label6;

        z0 = 0;

     label3:
        $r11 = r5.<android.widget.GridLayout$Arc: android.widget.GridLayout$Interval span>;

        i0 = $r11.<android.widget.GridLayout$Interval: int min>;

        $r10 = r5.<android.widget.GridLayout$Arc: android.widget.GridLayout$Interval span>;

        i1 = $r10.<android.widget.GridLayout$Interval: int max>;

        $r13 = r5.<android.widget.GridLayout$Arc: android.widget.GridLayout$MutableInt value>;

        i2 = $r13.<android.widget.GridLayout$MutableInt: int value>;

        if i0 >= i1 goto label7;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">=");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        r6 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        goto label2;

     label5:
        r2 = "y";

        goto label1;

     label6:
        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        goto label3;

     label7:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<=");

        $i3 = neg i2;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r6 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label8:
        $r8 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private int calculateMaxIndex()
    {
        android.widget.GridLayout$Axis r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        android.view.View r1;
        android.widget.GridLayout$LayoutParams r2;
        android.widget.GridLayout$Spec r3;
        android.widget.GridLayout$Interval r4;
        android.widget.GridLayout $r5, $r6, $r7;
        boolean $z0;

        r0 := @this: android.widget.GridLayout$Axis;

        i0 = -1;

        i1 = 0;

        $r5 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        i2 = virtualinvoke $r5.<android.widget.GridLayout: int getChildCount()>();

     label1:
        if i1 >= i2 goto label4;

        $r6 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        r1 = virtualinvoke $r6.<android.widget.GridLayout: android.view.View getChildAt(int)>(i1);

        $r7 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        r2 = virtualinvoke $r7.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r1);

        $z0 = r0.<android.widget.GridLayout$Axis: boolean horizontal>;

        if $z0 == 0 goto label3;

        r3 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

     label2:
        r4 = r3.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        $i3 = r4.<android.widget.GridLayout$Interval: int min>;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i3);

        $i4 = r4.<android.widget.GridLayout$Interval: int max>;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i4);

        $i6 = virtualinvoke r4.<android.widget.GridLayout$Interval: int size()>();

        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6);

        i1 = i1 + 1;

        goto label1;

     label3:
        r3 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

        goto label2;

     label4:
        if i0 != -1 goto label5;

        i0 = -2147483648;

     label5:
        return i0;
    }

    private void computeArcs()
    {
        android.widget.GridLayout$Axis r0;

        r0 := @this: android.widget.GridLayout$Axis;

        specialinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getForwardLinks()>();

        specialinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getBackwardLinks()>();

        return;
    }

    private void computeGroupBounds()
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout$Bounds[] r1;
        int i0, i1, i2, $i3;
        android.view.View r2;
        android.widget.GridLayout$LayoutParams r3;
        android.widget.GridLayout$Spec r4;
        android.widget.GridLayout$PackedMap $r5, $r11;
        java.lang.Object[] $r6;
        android.widget.GridLayout $r7, $r8, $r9, $r13;
        boolean $z0;
        java.lang.Object $r10;
        android.widget.GridLayout$Bounds $r12, $r14;

        r0 := @this: android.widget.GridLayout$Axis;

        $r5 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap groupBounds>;

        $r6 = $r5.<android.widget.GridLayout$PackedMap: java.lang.Object[] values>;

        r1 = (android.widget.GridLayout$Bounds[]) $r6;

        i0 = 0;

     label1:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label2;

        $r14 = r1[i0];

        virtualinvoke $r14.<android.widget.GridLayout$Bounds: void reset()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        i1 = 0;

        $r7 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        i2 = virtualinvoke $r7.<android.widget.GridLayout: int getChildCount()>();

     label3:
        if i1 >= i2 goto label6;

        $r8 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        r2 = virtualinvoke $r8.<android.widget.GridLayout: android.view.View getChildAt(int)>(i1);

        $r9 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        r3 = virtualinvoke $r9.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r2);

        $z0 = r0.<android.widget.GridLayout$Axis: boolean horizontal>;

        if $z0 == 0 goto label5;

        r4 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

     label4:
        $r11 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap groupBounds>;

        $r10 = virtualinvoke $r11.<android.widget.GridLayout$PackedMap: java.lang.Object getValue(int)>(i1);

        $r12 = (android.widget.GridLayout$Bounds) $r10;

        $r13 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        virtualinvoke $r12.<android.widget.GridLayout$Bounds: void include(android.widget.GridLayout,android.view.View,android.widget.GridLayout$Spec,android.widget.GridLayout$Axis)>($r13, r2, r4, r0);

        i1 = i1 + 1;

        goto label3;

     label5:
        r4 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

        goto label4;

     label6:
        return;
    }

    private void computeLinks(android.widget.GridLayout$PackedMap, boolean)
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout$PackedMap r1, $r6;
        boolean z0;
        android.widget.GridLayout$MutableInt[] r2;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        android.widget.GridLayout$Bounds[] r3;
        android.widget.GridLayout$MutableInt r4, $r10;
        java.lang.Object[] $r5, $r7;
        android.widget.GridLayout$Bounds $r8;
        java.lang.Object $r9;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: android.widget.GridLayout$PackedMap;

        z0 := @parameter1: boolean;

        $r5 = r1.<android.widget.GridLayout$PackedMap: java.lang.Object[] values>;

        r2 = (android.widget.GridLayout$MutableInt[]) $r5;

        i0 = 0;

     label1:
        $i4 = lengthof r2;

        if i0 >= $i4 goto label2;

        $r10 = r2[i0];

        virtualinvoke $r10.<android.widget.GridLayout$MutableInt: void reset()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        $r6 = virtualinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getGroupBounds()>();

        $r7 = $r6.<android.widget.GridLayout$PackedMap: java.lang.Object[] values>;

        r3 = (android.widget.GridLayout$Bounds[]) $r7;

        i1 = 0;

     label3:
        $i5 = lengthof r3;

        if i1 >= $i5 goto label6;

        $r8 = r3[i1];

        i2 = virtualinvoke $r8.<android.widget.GridLayout$Bounds: int size(boolean)>(z0);

        $r9 = virtualinvoke r1.<android.widget.GridLayout$PackedMap: java.lang.Object getValue(int)>(i1);

        r4 = (android.widget.GridLayout$MutableInt) $r9;

        i3 = r4.<android.widget.GridLayout$MutableInt: int value>;

        if z0 == 0 goto label5;

     label4:
        $i6 = staticinvoke <java.lang.Math: int max(int,int)>(i3, i2);

        r4.<android.widget.GridLayout$MutableInt: int value> = $i6;

        i1 = i1 + 1;

        goto label3;

     label5:
        i2 = neg i2;

        goto label4;

     label6:
        return;
    }

    private void computeLocations(int[])
    {
        android.widget.GridLayout$Axis r0;
        int[] r1;
        int i0, i1, i2, $i3, $i4;
        android.widget.GridLayout$Arc[] $r2;
        boolean $z0;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: int[];

        $r2 = virtualinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] getArcs()>();

        specialinvoke r0.<android.widget.GridLayout$Axis: void solve(android.widget.GridLayout$Arc[],int[])>($r2, r1);

        $z0 = r0.<android.widget.GridLayout$Axis: boolean orderPreserved>;

        if $z0 != 0 goto label2;

        i0 = r1[0];

        i1 = 0;

        i2 = lengthof r1;

     label1:
        if i1 >= i2 goto label2;

        $i3 = r1[i1];

        $i4 = $i3 - i0;

        r1[i1] = $i4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void computeMargins(boolean)
    {
        android.widget.GridLayout$Axis r0;
        boolean z0, $z1, $z2;
        int[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        android.view.View r2;
        android.widget.GridLayout$LayoutParams r3;
        android.widget.GridLayout$Spec r4;
        android.widget.GridLayout$Interval r5;
        android.widget.GridLayout $r6, $r7, $r8, $r9;

        r0 := @this: android.widget.GridLayout$Axis;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label04;

        r1 = r0.<android.widget.GridLayout$Axis: int[] leadingMargins>;

     label01:
        i0 = 0;

        $r6 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        i1 = virtualinvoke $r6.<android.widget.GridLayout: int getChildCount()>();

     label02:
        if i0 >= i1 goto label10;

        $r7 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        r2 = virtualinvoke $r7.<android.widget.GridLayout: android.view.View getChildAt(int)>(i0);

        $i3 = virtualinvoke r2.<android.view.View: int getVisibility()>();

        if $i3 != 8 goto label05;

     label03:
        i0 = i0 + 1;

        goto label02;

     label04:
        r1 = r0.<android.widget.GridLayout$Axis: int[] trailingMargins>;

        goto label01;

     label05:
        $r8 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        r3 = virtualinvoke $r8.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r2);

        $z1 = r0.<android.widget.GridLayout$Axis: boolean horizontal>;

        if $z1 == 0 goto label08;

        r4 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

     label06:
        r5 = r4.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        if z0 == 0 goto label09;

        i2 = r5.<android.widget.GridLayout$Interval: int min>;

     label07:
        $i5 = r1[i2];

        $r9 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        $z2 = r0.<android.widget.GridLayout$Axis: boolean horizontal>;

        $i4 = virtualinvoke $r9.<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>(r2, $z2, z0);

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i4);

        r1[i2] = $i6;

        goto label03;

     label08:
        r4 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

        goto label06;

     label09:
        i2 = r5.<android.widget.GridLayout$Interval: int max>;

        goto label07;

     label10:
        return;
    }

    private android.widget.GridLayout$Arc[] createArcs()
    {
        android.widget.GridLayout$Axis r0;
        java.util.ArrayList r1, r2, $r3, $r4;
        int i0, i1, $i2, $i3;
        android.widget.GridLayout$PackedMap $r5, $r6;
        boolean $z0;
        android.widget.GridLayout$Interval $r7, $r9, $r15;
        android.widget.GridLayout$MutableInt $r8, $r10, $r16;
        android.widget.GridLayout$Arc[] $r11, $r13, $r14;
        java.lang.Object[] $r12;

        r0 := @this: android.widget.GridLayout$Axis;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = $r4;

        $r5 = specialinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getForwardLinks()>();

        specialinvoke r0.<android.widget.GridLayout$Axis: void addComponentSizes(java.util.List,android.widget.GridLayout$PackedMap)>(r1, $r5);

        $r6 = specialinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getBackwardLinks()>();

        specialinvoke r0.<android.widget.GridLayout$Axis: void addComponentSizes(java.util.List,android.widget.GridLayout$PackedMap)>(r2, $r6);

        $z0 = r0.<android.widget.GridLayout$Axis: boolean orderPreserved>;

        if $z0 == 0 goto label2;

        i1 = 0;

     label1:
        $i2 = virtualinvoke r0.<android.widget.GridLayout$Axis: int getCount()>();

        if i1 >= $i2 goto label2;

        $r15 = new android.widget.GridLayout$Interval;

        $i3 = i1 + 1;

        specialinvoke $r15.<android.widget.GridLayout$Interval: void <init>(int,int)>(i1, $i3);

        $r16 = new android.widget.GridLayout$MutableInt;

        specialinvoke $r16.<android.widget.GridLayout$MutableInt: void <init>(int)>(0);

        specialinvoke r0.<android.widget.GridLayout$Axis: void include(java.util.List,android.widget.GridLayout$Interval,android.widget.GridLayout$MutableInt)>(r1, $r15, $r16);

        i1 = i1 + 1;

        goto label1;

     label2:
        i0 = virtualinvoke r0.<android.widget.GridLayout$Axis: int getCount()>();

        $r7 = new android.widget.GridLayout$Interval;

        specialinvoke $r7.<android.widget.GridLayout$Interval: void <init>(int,int)>(0, i0);

        $r8 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$MutableInt parentMin>;

        specialinvoke r0.<android.widget.GridLayout$Axis: void include(java.util.List,android.widget.GridLayout$Interval,android.widget.GridLayout$MutableInt,boolean)>(r1, $r7, $r8, 0);

        $r9 = new android.widget.GridLayout$Interval;

        specialinvoke $r9.<android.widget.GridLayout$Interval: void <init>(int,int)>(i0, 0);

        $r10 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$MutableInt parentMax>;

        specialinvoke r0.<android.widget.GridLayout$Axis: void include(java.util.List,android.widget.GridLayout$Interval,android.widget.GridLayout$MutableInt,boolean)>(r2, $r9, $r10, 0);

        $r11 = specialinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] topologicalSort(java.util.List)>(r1);

        $r13 = specialinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] topologicalSort(java.util.List)>(r2);

        $r12 = staticinvoke <android.widget.GridLayout: java.lang.Object[] append(java.lang.Object[],java.lang.Object[])>($r11, $r13);

        $r14 = (android.widget.GridLayout$Arc[]) $r12;

        return $r14;
    }

    private android.widget.GridLayout$PackedMap createGroupBounds()
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout$Assoc r1;
        int i0, i1;
        android.view.View r2;
        android.widget.GridLayout$LayoutParams r3;
        android.widget.GridLayout$Spec r4;
        android.widget.GridLayout $r5, $r7, $r8, $r11;
        android.widget.GridLayout$PackedMap $r6;
        boolean $z0, $z1;
        android.widget.GridLayout$Alignment $r9, $r10;
        android.widget.GridLayout$Bounds $r12;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 = staticinvoke <android.widget.GridLayout$Assoc: android.widget.GridLayout$Assoc of(java.lang.Class,java.lang.Class)>(class "android/widget/GridLayout$Spec", class "android/widget/GridLayout$Bounds");

        i0 = 0;

        $r5 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        i1 = virtualinvoke $r5.<android.widget.GridLayout: int getChildCount()>();

     label1:
        if i0 >= i1 goto label4;

        $r7 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        r2 = virtualinvoke $r7.<android.widget.GridLayout: android.view.View getChildAt(int)>(i0);

        $r8 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        r3 = virtualinvoke $r8.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r2);

        $z0 = r0.<android.widget.GridLayout$Axis: boolean horizontal>;

        if $z0 == 0 goto label3;

        r4 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

     label2:
        $r11 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        $r9 = r4.<android.widget.GridLayout$Spec: android.widget.GridLayout$Alignment alignment>;

        $z1 = r0.<android.widget.GridLayout$Axis: boolean horizontal>;

        $r10 = virtualinvoke $r11.<android.widget.GridLayout: android.widget.GridLayout$Alignment getAlignment(android.widget.GridLayout$Alignment,boolean)>($r9, $z1);

        $r12 = virtualinvoke $r10.<android.widget.GridLayout$Alignment: android.widget.GridLayout$Bounds getBounds()>();

        virtualinvoke r1.<android.widget.GridLayout$Assoc: void put(java.lang.Object,java.lang.Object)>(r4, $r12);

        i0 = i0 + 1;

        goto label1;

     label3:
        r4 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

        goto label2;

     label4:
        $r6 = virtualinvoke r1.<android.widget.GridLayout$Assoc: android.widget.GridLayout$PackedMap pack()>();

        return $r6;
    }

    private android.widget.GridLayout$PackedMap createLinks(boolean)
    {
        android.widget.GridLayout$Axis r0;
        boolean z0;
        android.widget.GridLayout$Assoc r1;
        android.widget.GridLayout$Spec[] r2;
        int i0, i1;
        android.widget.GridLayout$Interval r3, $r8;
        android.widget.GridLayout$PackedMap $r4, $r6;
        java.lang.Object[] $r5;
        android.widget.GridLayout$Spec $r7, $r10;
        android.widget.GridLayout$MutableInt $r9;

        r0 := @this: android.widget.GridLayout$Axis;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.widget.GridLayout$Assoc: android.widget.GridLayout$Assoc of(java.lang.Class,java.lang.Class)>(class "android/widget/GridLayout$Interval", class "android/widget/GridLayout$MutableInt");

        $r4 = virtualinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getGroupBounds()>();

        $r5 = $r4.<android.widget.GridLayout$PackedMap: java.lang.Object[] keys>;

        r2 = (android.widget.GridLayout$Spec[]) $r5;

        i0 = 0;

        i1 = lengthof r2;

     label1:
        if i0 >= i1 goto label4;

        if z0 == 0 goto label3;

        $r10 = r2[i0];

        r3 = $r10.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

     label2:
        $r9 = new android.widget.GridLayout$MutableInt;

        specialinvoke $r9.<android.widget.GridLayout$MutableInt: void <init>()>();

        virtualinvoke r1.<android.widget.GridLayout$Assoc: void put(java.lang.Object,java.lang.Object)>(r3, $r9);

        i0 = i0 + 1;

        goto label1;

     label3:
        $r7 = r2[i0];

        $r8 = $r7.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        r3 = virtualinvoke $r8.<android.widget.GridLayout$Interval: android.widget.GridLayout$Interval inverse()>();

        goto label2;

     label4:
        $r6 = virtualinvoke r1.<android.widget.GridLayout$Assoc: android.widget.GridLayout$PackedMap pack()>();

        return $r6;
    }

    private android.widget.GridLayout$PackedMap getBackwardLinks()
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout$PackedMap $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: android.widget.GridLayout$Axis;

        $r1 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap backwardLinks>;

        if $r1 != null goto label1;

        $r4 = specialinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap createLinks(boolean)>(0);

        r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap backwardLinks> = $r4;

     label1:
        $z0 = r0.<android.widget.GridLayout$Axis: boolean backwardLinksValid>;

        if $z0 != 0 goto label2;

        $r3 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap backwardLinks>;

        specialinvoke r0.<android.widget.GridLayout$Axis: void computeLinks(android.widget.GridLayout$PackedMap,boolean)>($r3, 0);

        r0.<android.widget.GridLayout$Axis: boolean backwardLinksValid> = 1;

     label2:
        $r2 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap backwardLinks>;

        return $r2;
    }

    private android.widget.GridLayout$PackedMap getForwardLinks()
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout$PackedMap $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: android.widget.GridLayout$Axis;

        $r1 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap forwardLinks>;

        if $r1 != null goto label1;

        $r4 = specialinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap createLinks(boolean)>(1);

        r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap forwardLinks> = $r4;

     label1:
        $z0 = r0.<android.widget.GridLayout$Axis: boolean forwardLinksValid>;

        if $z0 != 0 goto label2;

        $r3 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap forwardLinks>;

        specialinvoke r0.<android.widget.GridLayout$Axis: void computeLinks(android.widget.GridLayout$PackedMap,boolean)>($r3, 1);

        r0.<android.widget.GridLayout$Axis: boolean forwardLinksValid> = 1;

     label2:
        $r2 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap forwardLinks>;

        return $r2;
    }

    private int getMaxIndex()
    {
        android.widget.GridLayout$Axis r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.widget.GridLayout$Axis;

        $i0 = r0.<android.widget.GridLayout$Axis: int maxIndex>;

        if $i0 != -2147483648 goto label1;

        $i2 = specialinvoke r0.<android.widget.GridLayout$Axis: int calculateMaxIndex()>();

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        r0.<android.widget.GridLayout$Axis: int maxIndex> = $i3;

     label1:
        $i1 = r0.<android.widget.GridLayout$Axis: int maxIndex>;

        return $i1;
    }

    private int getMeasure(int, int)
    {
        android.widget.GridLayout$Axis r0;
        int i0, i1, $i2;
        int[] $r1;

        r0 := @this: android.widget.GridLayout$Axis;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.widget.GridLayout$Axis: void setParentConstraints(int,int)>(i0, i1);

        $r1 = virtualinvoke r0.<android.widget.GridLayout$Axis: int[] getLocations()>();

        $i2 = specialinvoke r0.<android.widget.GridLayout$Axis: int size(int[])>($r1);

        return $i2;
    }

    private void include(java.util.List, android.widget.GridLayout$Interval, android.widget.GridLayout$MutableInt)
    {
        android.widget.GridLayout$Axis r0;
        java.util.List r1;
        android.widget.GridLayout$Interval r2;
        android.widget.GridLayout$MutableInt r3;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.widget.GridLayout$Interval;

        r3 := @parameter2: android.widget.GridLayout$MutableInt;

        specialinvoke r0.<android.widget.GridLayout$Axis: void include(java.util.List,android.widget.GridLayout$Interval,android.widget.GridLayout$MutableInt,boolean)>(r1, r2, r3, 1);

        return;
    }

    private void include(java.util.List, android.widget.GridLayout$Interval, android.widget.GridLayout$MutableInt, boolean)
    {
        android.widget.GridLayout$Axis r0;
        java.util.List r1;
        android.widget.GridLayout$Interval r2, $r8;
        android.widget.GridLayout$MutableInt r3;
        boolean z0, $z2, $z3;
        java.util.Iterator r4;
        int $i0;
        android.widget.GridLayout$Arc $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.widget.GridLayout$Interval;

        r3 := @parameter2: android.widget.GridLayout$MutableInt;

        z0 := @parameter3: boolean;

        $i0 = virtualinvoke r2.<android.widget.GridLayout$Interval: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        if z0 == 0 goto label3;

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.widget.GridLayout$Arc) $r6;

        $r8 = $r7.<android.widget.GridLayout$Arc: android.widget.GridLayout$Interval span>;

        $z3 = virtualinvoke $r8.<android.widget.GridLayout$Interval: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label2;

        return;

     label3:
        $r5 = new android.widget.GridLayout$Arc;

        specialinvoke $r5.<android.widget.GridLayout$Arc: void <init>(android.widget.GridLayout$Interval,android.widget.GridLayout$MutableInt)>(r2, r3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        return;
    }

    private void init(int[])
    {
        android.widget.GridLayout$Axis r0;
        int[] r1;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: int[];

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r1, 0);

        return;
    }

    private void logError(java.lang.String, android.widget.GridLayout$Arc[], boolean[])
    {
        android.widget.GridLayout$Axis r0;
        java.lang.String r1, $r15, $r16, $r20;
        android.widget.GridLayout$Arc[] r2;
        boolean[] r3;
        java.util.ArrayList r4, r5, $r7, $r8;
        int i0, $i1;
        android.widget.GridLayout$Arc r6;
        android.widget.GridLayout $r9;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r17, $r18, $r19;
        android.util.Printer $r11;
        boolean $z0, $z2;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.widget.GridLayout$Arc[];

        r3 := @parameter2: boolean[];

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r4 = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r5 = $r8;

        i0 = 0;

     label1:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label4;

        r6 = r2[i0];

        $z0 = r3[i0];

        if $z0 == 0 goto label2;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r6);

     label2:
        $z2 = r6.<android.widget.GridLayout$Arc: boolean valid>;

        if $z2 != 0 goto label3;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r6);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        $r9 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout this$0>;

        $r11 = $r9.<android.widget.GridLayout: android.util.Printer mPrinter>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" constraints: ");

        $r15 = specialinvoke r0.<android.widget.GridLayout$Axis: java.lang.String arcsToString(java.util.List)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" are inconsistent; permanently removing: ");

        $r16 = specialinvoke r0.<android.widget.GridLayout$Axis: java.lang.String arcsToString(java.util.List)>(r5);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<android.util.Printer: void println(java.lang.String)>($r20);

        return;
    }

    private boolean relax(int[], android.widget.GridLayout$Arc)
    {
        android.widget.GridLayout$Axis r0;
        int[] r1;
        android.widget.GridLayout$Arc r2;
        android.widget.GridLayout$Interval r3;
        int i0, i1, i2, $i3, $i4, $i5;
        boolean $z0;
        android.widget.GridLayout$MutableInt $r4;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.widget.GridLayout$Arc;

        $z0 = r2.<android.widget.GridLayout$Arc: boolean valid>;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        r3 = r2.<android.widget.GridLayout$Arc: android.widget.GridLayout$Interval span>;

        i0 = r3.<android.widget.GridLayout$Interval: int min>;

        i1 = r3.<android.widget.GridLayout$Interval: int max>;

        $r4 = r2.<android.widget.GridLayout$Arc: android.widget.GridLayout$MutableInt value>;

        $i4 = $r4.<android.widget.GridLayout$MutableInt: int value>;

        $i3 = r1[i0];

        i2 = $i4 + $i3;

        $i5 = r1[i1];

        if i2 <= $i5 goto label1;

        r1[i1] = i2;

        return 1;
    }

    private void setParentConstraints(int, int)
    {
        android.widget.GridLayout$Axis r0;
        int i0, i1, $i2;
        android.widget.GridLayout$MutableInt $r1, $r2;

        r0 := @this: android.widget.GridLayout$Axis;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$MutableInt parentMin>;

        $r1.<android.widget.GridLayout$MutableInt: int value> = i0;

        $r2 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$MutableInt parentMax>;

        $i2 = neg i1;

        $r2.<android.widget.GridLayout$MutableInt: int value> = $i2;

        r0.<android.widget.GridLayout$Axis: boolean locationsValid> = 0;

        return;
    }

    private int size(int[])
    {
        android.widget.GridLayout$Axis r0;
        int[] r1;
        int $i0, $i1;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: int[];

        $i0 = virtualinvoke r0.<android.widget.GridLayout$Axis: int getCount()>();

        $i1 = r1[$i0];

        return $i1;
    }

    private void solve(android.widget.GridLayout$Arc[], int[])
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout$Arc[] r1;
        int[] r2;
        java.lang.String r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14;
        boolean[] r4, r5;
        android.widget.GridLayout$Arc r6, $r9, $r10;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.widget.GridLayout$Interval $r7, $r8;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: android.widget.GridLayout$Arc[];

        r2 := @parameter1: int[];

        $z1 = r0.<android.widget.GridLayout$Axis: boolean horizontal>;

        if $z1 == 0 goto label05;

        r3 = "horizontal";

     label01:
        $i9 = virtualinvoke r0.<android.widget.GridLayout$Axis: int getCount()>();

        i0 = 1 + $i9;

        r4 = null;

        i1 = 0;

     label02:
        $i11 = lengthof r1;

        if i1 >= $i11 goto label07;

        specialinvoke r0.<android.widget.GridLayout$Axis: void init(int[])>(r2);

        i2 = 0;

     label03:
        if i2 >= i0 goto label09;

        z0 = 0;

        i7 = 0;

        i8 = lengthof r1;

     label04:
        if i7 >= i8 goto label06;

        $r10 = r1[i7];

        $z6 = specialinvoke r0.<android.widget.GridLayout$Axis: boolean relax(int[],android.widget.GridLayout$Arc)>(r2, $r10);

        z0 = z0 | $z6;

        i7 = i7 + 1;

        goto label04;

     label05:
        r3 = "vertical";

        goto label01;

     label06:
        if z0 != 0 goto label08;

        if r4 == null goto label07;

        specialinvoke r0.<android.widget.GridLayout$Axis: void logError(java.lang.String,android.widget.GridLayout$Arc[],boolean[])>(r3, r1, r4);

     label07:
        return;

     label08:
        i2 = i2 + 1;

        goto label03;

     label09:
        $i10 = lengthof r1;

        r5 = newarray (boolean)[$i10];

        i3 = 0;

     label10:
        if i3 >= i0 goto label13;

        i5 = 0;

        i6 = lengthof r1;

     label11:
        if i5 >= i6 goto label12;

        $z3 = r5[i5];

        $r9 = r1[i5];

        $z5 = specialinvoke r0.<android.widget.GridLayout$Axis: boolean relax(int[],android.widget.GridLayout$Arc)>(r2, $r9);

        $z4 = $z3 | $z5;

        r5[i5] = $z4;

        i5 = i5 + 1;

        goto label11;

     label12:
        i3 = i3 + 1;

        goto label10;

     label13:
        if i1 != 0 goto label14;

        r4 = r5;

     label14:
        i4 = 0;

     label15:
        $i12 = lengthof r1;

        if i4 >= $i12 goto label18;

        $z2 = r5[i4];

        if $z2 == 0 goto label16;

        r6 = r1[i4];

        $r8 = r6.<android.widget.GridLayout$Arc: android.widget.GridLayout$Interval span>;

        $i13 = $r8.<android.widget.GridLayout$Interval: int min>;

        $r7 = r6.<android.widget.GridLayout$Arc: android.widget.GridLayout$Interval span>;

        $i14 = $r7.<android.widget.GridLayout$Interval: int max>;

        if $i13 >= $i14 goto label17;

     label16:
        i4 = i4 + 1;

        goto label15;

     label17:
        r6.<android.widget.GridLayout$Arc: boolean valid> = 0;

     label18:
        i1 = i1 + 1;

        goto label02;
    }

    private android.widget.GridLayout$Arc[] topologicalSort(java.util.List)
    {
        android.widget.GridLayout$Axis r0;
        java.util.List r1;
        int $i0;
        android.widget.GridLayout$Arc[] $r2, $r4, $r5;
        java.lang.Object[] $r3;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (android.widget.GridLayout$Arc)[$i0];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (android.widget.GridLayout$Arc[]) $r3;

        $r5 = specialinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] topologicalSort(android.widget.GridLayout$Arc[])>($r4);

        return $r5;
    }

    private android.widget.GridLayout$Arc[] topologicalSort(android.widget.GridLayout$Arc[])
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout$Arc[] r1, $r3;
        android.widget.GridLayout$Axis$1 $r2;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: android.widget.GridLayout$Arc[];

        $r2 = new android.widget.GridLayout$Axis$1;

        specialinvoke $r2.<android.widget.GridLayout$Axis$1: void <init>(android.widget.GridLayout$Axis,android.widget.GridLayout$Arc[])>(r0, r1);

        $r3 = virtualinvoke $r2.<android.widget.GridLayout$Axis$1: android.widget.GridLayout$Arc[] sort()>();

        return $r3;
    }

    public android.widget.GridLayout$Arc[] getArcs()
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout$Arc[] $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: android.widget.GridLayout$Axis;

        $r1 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] arcs>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] createArcs()>();

        r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] arcs> = $r3;

     label1:
        $z0 = r0.<android.widget.GridLayout$Axis: boolean arcsValid>;

        if $z0 != 0 goto label2;

        specialinvoke r0.<android.widget.GridLayout$Axis: void computeArcs()>();

        r0.<android.widget.GridLayout$Axis: boolean arcsValid> = 1;

     label2:
        $r2 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] arcs>;

        return $r2;
    }

    public int getCount()
    {
        android.widget.GridLayout$Axis r0;
        int $i0, $i1, $i2;

        r0 := @this: android.widget.GridLayout$Axis;

        $i0 = r0.<android.widget.GridLayout$Axis: int definedCount>;

        $i1 = specialinvoke r0.<android.widget.GridLayout$Axis: int getMaxIndex()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        return $i2;
    }

    public android.widget.GridLayout$PackedMap getGroupBounds()
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout$PackedMap $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: android.widget.GridLayout$Axis;

        $r1 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap groupBounds>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap createGroupBounds()>();

        r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap groupBounds> = $r3;

     label1:
        $z0 = r0.<android.widget.GridLayout$Axis: boolean groupBoundsValid>;

        if $z0 != 0 goto label2;

        specialinvoke r0.<android.widget.GridLayout$Axis: void computeGroupBounds()>();

        r0.<android.widget.GridLayout$Axis: boolean groupBoundsValid> = 1;

     label2:
        $r2 = r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap groupBounds>;

        return $r2;
    }

    public int[] getLeadingMargins()
    {
        android.widget.GridLayout$Axis r0;
        int[] $r1, $r2, $r3;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: android.widget.GridLayout$Axis;

        $r1 = r0.<android.widget.GridLayout$Axis: int[] leadingMargins>;

        if $r1 != null goto label1;

        $i0 = virtualinvoke r0.<android.widget.GridLayout$Axis: int getCount()>();

        $i1 = 1 + $i0;

        $r3 = newarray (int)[$i1];

        r0.<android.widget.GridLayout$Axis: int[] leadingMargins> = $r3;

     label1:
        $z0 = r0.<android.widget.GridLayout$Axis: boolean leadingMarginsValid>;

        if $z0 != 0 goto label2;

        specialinvoke r0.<android.widget.GridLayout$Axis: void computeMargins(boolean)>(1);

        r0.<android.widget.GridLayout$Axis: boolean leadingMarginsValid> = 1;

     label2:
        $r2 = r0.<android.widget.GridLayout$Axis: int[] leadingMargins>;

        return $r2;
    }

    public int[] getLocations()
    {
        android.widget.GridLayout$Axis r0;
        int[] $r1, $r2, $r3, $r4;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: android.widget.GridLayout$Axis;

        $r1 = r0.<android.widget.GridLayout$Axis: int[] locations>;

        if $r1 != null goto label1;

        $i0 = virtualinvoke r0.<android.widget.GridLayout$Axis: int getCount()>();

        $i1 = 1 + $i0;

        $r4 = newarray (int)[$i1];

        r0.<android.widget.GridLayout$Axis: int[] locations> = $r4;

     label1:
        $z0 = r0.<android.widget.GridLayout$Axis: boolean locationsValid>;

        if $z0 != 0 goto label2;

        $r3 = r0.<android.widget.GridLayout$Axis: int[] locations>;

        specialinvoke r0.<android.widget.GridLayout$Axis: void computeLocations(int[])>($r3);

        r0.<android.widget.GridLayout$Axis: boolean locationsValid> = 1;

     label2:
        $r2 = r0.<android.widget.GridLayout$Axis: int[] locations>;

        return $r2;
    }

    public int getMeasure(int)
    {
        android.widget.GridLayout$Axis r0;
        int i0, i1, i2, i3, $i4, $i5;
        boolean z0;
        java.lang.AssertionError $r1;

        r0 := @this: android.widget.GridLayout$Axis;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        i2 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        lookupswitch(i1)
        {
            case -2147483648: goto label5;
            case 0: goto label2;
            case 1073741824: goto label4;
            default: goto label1;
        };

     label1:
        z0 = <android.widget.GridLayout$Axis: boolean $assertionsDisabled>;

        i3 = 0;

        if z0 != 0 goto label3;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        i3 = specialinvoke r0.<android.widget.GridLayout$Axis: int getMeasure(int,int)>(0, 100000);

     label3:
        return i3;

     label4:
        $i4 = specialinvoke r0.<android.widget.GridLayout$Axis: int getMeasure(int,int)>(i2, i2);

        return $i4;

     label5:
        $i5 = specialinvoke r0.<android.widget.GridLayout$Axis: int getMeasure(int,int)>(0, i2);

        return $i5;
    }

    public int[] getTrailingMargins()
    {
        android.widget.GridLayout$Axis r0;
        int[] $r1, $r2, $r3;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: android.widget.GridLayout$Axis;

        $r1 = r0.<android.widget.GridLayout$Axis: int[] trailingMargins>;

        if $r1 != null goto label1;

        $i0 = virtualinvoke r0.<android.widget.GridLayout$Axis: int getCount()>();

        $i1 = 1 + $i0;

        $r3 = newarray (int)[$i1];

        r0.<android.widget.GridLayout$Axis: int[] trailingMargins> = $r3;

     label1:
        $z0 = r0.<android.widget.GridLayout$Axis: boolean trailingMarginsValid>;

        if $z0 != 0 goto label2;

        specialinvoke r0.<android.widget.GridLayout$Axis: void computeMargins(boolean)>(0);

        r0.<android.widget.GridLayout$Axis: boolean trailingMarginsValid> = 1;

     label2:
        $r2 = r0.<android.widget.GridLayout$Axis: int[] trailingMargins>;

        return $r2;
    }

    android.widget.GridLayout$Arc[][] groupArcsByFirstVertex(android.widget.GridLayout$Arc[])
    {
        android.widget.GridLayout$Axis r0;
        android.widget.GridLayout$Arc[] r1, r5, $r7;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14;
        android.widget.GridLayout$Arc[][] r2;
        int[] r3;
        android.widget.GridLayout$Arc r4, $r9;
        android.widget.GridLayout$Interval $r6, $r8;

        r0 := @this: android.widget.GridLayout$Axis;

        r1 := @parameter0: android.widget.GridLayout$Arc[];

        $i10 = virtualinvoke r0.<android.widget.GridLayout$Axis: int getCount()>();

        i0 = 1 + $i10;

        r2 = newarray (android.widget.GridLayout$Arc[])[i0];

        r3 = newarray (int)[i0];

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r9 = r1[i2];

        $r8 = $r9.<android.widget.GridLayout$Arc: android.widget.GridLayout$Interval span>;

        i8 = $r8.<android.widget.GridLayout$Interval: int min>;

        $i14 = r3[i8];

        $i13 = 1 + $i14;

        r3[i8] = $i13;

        i2 = i2 + 1;

        goto label1;

     label2:
        i3 = 0;

     label3:
        $i9 = lengthof r3;

        if i3 >= $i9 goto label4;

        $i12 = r3[i3];

        $r7 = newarray (android.widget.GridLayout$Arc)[$i12];

        r2[i3] = $r7;

        i3 = i3 + 1;

        goto label3;

     label4:
        staticinvoke <java.util.Arrays: void fill(int[],int)>(r3, 0);

        i4 = lengthof r1;

        i5 = 0;

     label5:
        if i5 >= i4 goto label6;

        r4 = r1[i5];

        $r6 = r4.<android.widget.GridLayout$Arc: android.widget.GridLayout$Interval span>;

        i6 = $r6.<android.widget.GridLayout$Interval: int min>;

        r5 = r2[i6];

        i7 = r3[i6];

        $i11 = i7 + 1;

        r3[i6] = $i11;

        r5[i7] = r4;

        i5 = i5 + 1;

        goto label5;

     label6:
        return r2;
    }

    public void invalidateStructure()
    {
        android.widget.GridLayout$Axis r0;

        r0 := @this: android.widget.GridLayout$Axis;

        r0.<android.widget.GridLayout$Axis: int maxIndex> = -2147483648;

        r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap groupBounds> = null;

        r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap forwardLinks> = null;

        r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap backwardLinks> = null;

        r0.<android.widget.GridLayout$Axis: int[] leadingMargins> = null;

        r0.<android.widget.GridLayout$Axis: int[] trailingMargins> = null;

        r0.<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] arcs> = null;

        r0.<android.widget.GridLayout$Axis: int[] locations> = null;

        virtualinvoke r0.<android.widget.GridLayout$Axis: void invalidateValues()>();

        return;
    }

    public void invalidateValues()
    {
        android.widget.GridLayout$Axis r0;

        r0 := @this: android.widget.GridLayout$Axis;

        r0.<android.widget.GridLayout$Axis: boolean groupBoundsValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean forwardLinksValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean backwardLinksValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean leadingMarginsValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean trailingMarginsValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean arcsValid> = 0;

        r0.<android.widget.GridLayout$Axis: boolean locationsValid> = 0;

        return;
    }

    public boolean isOrderPreserved()
    {
        android.widget.GridLayout$Axis r0;
        boolean $z0;

        r0 := @this: android.widget.GridLayout$Axis;

        $z0 = r0.<android.widget.GridLayout$Axis: boolean orderPreserved>;

        return $z0;
    }

    public void layout(int)
    {
        android.widget.GridLayout$Axis r0;
        int i0;

        r0 := @this: android.widget.GridLayout$Axis;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.GridLayout$Axis: void setParentConstraints(int,int)>(i0, i0);

        virtualinvoke r0.<android.widget.GridLayout$Axis: int[] getLocations()>();

        return;
    }

    public void setCount(int)
    {
        android.widget.GridLayout$Axis r0;
        int i0, $i1;
        java.lang.StringBuilder r1, $r3, $r4, $r5, $r6;
        java.lang.String r2, $r7;
        boolean $z0;

        r0 := @this: android.widget.GridLayout$Axis;

        i0 := @parameter0: int;

        if i0 == -2147483648 goto label2;

        $i1 = specialinvoke r0.<android.widget.GridLayout$Axis: int getMaxIndex()>();

        if i0 >= $i1 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        $z0 = r0.<android.widget.GridLayout$Axis: boolean horizontal>;

        if $z0 == 0 goto label3;

        r2 = "column";

     label1:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Count must be greater than or equal to the maximum of all grid indices ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(and spans) defined in the LayoutParams of each child");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.widget.GridLayout: void access$100(java.lang.String)>($r7);

     label2:
        r0.<android.widget.GridLayout$Axis: int definedCount> = i0;

        return;

     label3:
        r2 = "row";

        goto label1;
    }

    public void setOrderPreserved(boolean)
    {
        android.widget.GridLayout$Axis r0;
        boolean z0;

        r0 := @this: android.widget.GridLayout$Axis;

        z0 := @parameter0: boolean;

        r0.<android.widget.GridLayout$Axis: boolean orderPreserved> = z0;

        virtualinvoke r0.<android.widget.GridLayout$Axis: void invalidateStructure()>();

        return;
    }
}
