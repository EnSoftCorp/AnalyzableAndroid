public class org.apache.http.protocol.UriPatternMatcher extends java.lang.Object
{
    private final java.util.Map handlerMap;

    public void <init>()
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap> = $r1;

        return;
    }

    public java.lang.Object lookup(java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.lang.String r1, r3, r5;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r2, $r9;
        java.util.Iterator r4;
        java.util.Map $r6, $r7, $r10;
        java.util.Set $r8;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Request URI may not be null");

        throw $r11;

     label1:
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("?");

        if i0 == -1 goto label2;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label2:
        $r6 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        r2 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r2 != null goto label5;

        r3 = null;

        $r7 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        r4 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r9;

        $z1 = virtualinvoke r0.<org.apache.http.protocol.UriPatternMatcher: boolean matchUriRequestPattern(java.lang.String,java.lang.String)>(r5, r1);

        if $z1 == 0 goto label3;

        if r3 == null goto label4;

        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        $i1 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i2 < $i1 goto label4;

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        $i3 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i4 != $i3 goto label3;

        $z2 = virtualinvoke r5.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z2 == 0 goto label3;

     label4:
        $r10 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        r2 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r3 = r5;

        goto label3;

     label5:
        return r2;
    }

    protected boolean matchUriRequestPattern(java.lang.String, java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.lang.String r1, r2, $r3, $r4;
        boolean z0, z1, z2, $z3, $z4, $z5;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z3 == 0 goto label1;

        return 1;

     label1:
        $z4 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z4 == 0 goto label2;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = -1 + $i1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $z5 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z5 != 0 goto label3;

     label2:
        z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        z1 = 0;

        if z0 == 0 goto label4;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

        z2 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>($r3);

        z1 = 0;

        if z2 == 0 goto label4;

     label3:
        z1 = 1;

     label4:
        return z1;
    }

    public void register(java.lang.String, java.lang.Object)
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.util.Map $r3;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("URI request pattern may not be null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request handelr may not be null");

        throw $r5;

     label2:
        $r3 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void setHandlers(java.util.Map)
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.util.Map r1, $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        r1 := @parameter0: java.util.Map;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map of handlers may not be null");

        throw $r4;

     label1:
        $r2 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r1);

        return;
    }

    public void unregister(java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.lang.String r1;
        java.util.Map $r2;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }
}
