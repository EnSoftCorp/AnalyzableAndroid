public abstract class java.security.MessageDigestSpi extends java.lang.Object
{

    public void <init>()
    {
        java.security.MessageDigestSpi r0;

        r0 := @this: java.security.MessageDigestSpi;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.security.MessageDigestSpi r0;
        java.lang.Object $r1;

        r0 := @this: java.security.MessageDigestSpi;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    protected int engineDigest(byte[], int, int) throws java.security.DigestException
    {
        java.security.MessageDigestSpi r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.security.DigestException $r3, $r4, $r5, $r6;

        r0 := @this: java.security.MessageDigestSpi;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<java.security.MessageDigestSpi: int engineGetDigestLength()>();

        if i1 >= $i2 goto label1;

        virtualinvoke r0.<java.security.MessageDigestSpi: void engineReset()>();

        $r6 = new java.security.DigestException;

        specialinvoke $r6.<java.security.DigestException: void <init>(java.lang.String)>("The value of len parameter is less than the actual digest length");

        throw $r6;

     label1:
        if i0 >= 0 goto label2;

        virtualinvoke r0.<java.security.MessageDigestSpi: void engineReset()>();

        $r5 = new java.security.DigestException;

        specialinvoke $r5.<java.security.DigestException: void <init>(java.lang.String)>("offset < 0");

        throw $r5;

     label2:
        $i4 = i0 + i1;

        $i3 = lengthof r1;

        if $i4 <= $i3 goto label3;

        virtualinvoke r0.<java.security.MessageDigestSpi: void engineReset()>();

        $r4 = new java.security.DigestException;

        specialinvoke $r4.<java.security.DigestException: void <init>(java.lang.String)>("offset + len > buf.length");

        throw $r4;

     label3:
        r2 = virtualinvoke r0.<java.security.MessageDigestSpi: byte[] engineDigest()>();

        $i5 = lengthof r2;

        if i1 >= $i5 goto label4;

        $r3 = new java.security.DigestException;

        specialinvoke $r3.<java.security.DigestException: void <init>(java.lang.String)>("The value of len parameter is less than the actual digest length");

        throw $r3;

     label4:
        $i6 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i0, $i6);

        $i7 = lengthof r2;

        return $i7;
    }

    protected abstract byte[] engineDigest();

    protected int engineGetDigestLength()
    {
        java.security.MessageDigestSpi r0;

        r0 := @this: java.security.MessageDigestSpi;

        return 0;
    }

    protected abstract void engineReset();

    protected abstract void engineUpdate(byte);

    protected void engineUpdate(java.nio.ByteBuffer)
    {
        java.security.MessageDigestSpi r0;
        java.nio.ByteBuffer r1;
        byte[] r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1;

        r0 := @this: java.security.MessageDigestSpi;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label2;

        r3 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i8 = i0 + i1;

        $i7 = i2 - i1;

        virtualinvoke r0.<java.security.MessageDigestSpi: void engineUpdate(byte[],int,int)>(r3, $i8, $i7);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i2);

        return;

     label2:
        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i5 = $i3 - $i4;

        r2 = newarray (byte)[$i5];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);

        $i6 = lengthof r2;

        virtualinvoke r0.<java.security.MessageDigestSpi: void engineUpdate(byte[],int,int)>(r2, 0, $i6);

        return;
    }

    protected abstract void engineUpdate(byte[], int, int);
}
