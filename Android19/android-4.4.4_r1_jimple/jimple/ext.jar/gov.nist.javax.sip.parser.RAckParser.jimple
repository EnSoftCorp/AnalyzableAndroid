public class gov.nist.javax.sip.parser.RAckParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.RAckParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.RAckParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.RAckParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.RAckParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.RAckParser r0;
        gov.nist.javax.sip.header.RAck r1, $r4;
        java.lang.Throwable r2, $r22;
        javax.sip.InvalidArgumentException r3, $r19;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r5, $r7, $r8, $r10, $r11, $r14, $r15, $r18;
        java.lang.String $r6, $r9, $r16, $r21;
        long $l0, $l1;
        gov.nist.core.Token $r13;
        java.text.ParseException $r20;

        r0 := @this: gov.nist.javax.sip.parser.RAckParser;

        $z0 = <gov.nist.javax.sip.parser.RAckParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.RAckParser: void dbg_enter(java.lang.String)>("RAckParser.parse");

     label01:
        $r4 = new gov.nist.javax.sip.header.RAck;

        specialinvoke $r4.<gov.nist.javax.sip.header.RAck: void <init>()>();

        r1 = $r4;

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.RAckParser: void headerName(int)>(2109);

        virtualinvoke r1.<gov.nist.javax.sip.header.RAck: void setHeaderName(java.lang.String)>("RAck");

     label03:
        $r5 = r0.<gov.nist.javax.sip.parser.RAckParser: gov.nist.core.LexerCore lexer>;

        $r6 = virtualinvoke $r5.<gov.nist.core.LexerCore: java.lang.String number()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r6);

        virtualinvoke r1.<gov.nist.javax.sip.header.RAck: void setRSequenceNumber(long)>($l0);

        $r7 = r0.<gov.nist.javax.sip.parser.RAckParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: void SPorHT()>();

        $r8 = r0.<gov.nist.javax.sip.parser.RAckParser: gov.nist.core.LexerCore lexer>;

        $r9 = virtualinvoke $r8.<gov.nist.core.LexerCore: java.lang.String number()>();

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r9);

        virtualinvoke r1.<gov.nist.javax.sip.header.RAck: void setCSequenceNumber(long)>($l1);

        $r10 = r0.<gov.nist.javax.sip.parser.RAckParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: void SPorHT()>();

        $r11 = r0.<gov.nist.javax.sip.parser.RAckParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r14 = r0.<gov.nist.javax.sip.parser.RAckParser: gov.nist.core.LexerCore lexer>;

        $r13 = virtualinvoke $r14.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r16 = virtualinvoke $r13.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.RAck: void setMethod(java.lang.String)>($r16);

     label04:
        $r15 = r0.<gov.nist.javax.sip.parser.RAckParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r15.<gov.nist.core.LexerCore: void SPorHT()>();

        $r18 = r0.<gov.nist.javax.sip.parser.RAckParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r18.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(10);

     label05:
        $z1 = <gov.nist.javax.sip.parser.RAckParser: boolean debug>;

        if $z1 == 0 goto label06;

        virtualinvoke r0.<gov.nist.javax.sip.parser.RAckParser: void dbg_leave(java.lang.String)>("RAckParser.parse");

     label06:
        return r1;

     label07:
        $r19 := @caughtexception;

        r3 = $r19;

     label08:
        $r21 = virtualinvoke r3.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r20 = virtualinvoke r0.<gov.nist.javax.sip.parser.RAckParser: java.text.ParseException createParseException(java.lang.String)>($r21);

        throw $r20;

     label09:
        $r22 := @caughtexception;

        r2 = $r22;

        $z2 = <gov.nist.javax.sip.parser.RAckParser: boolean debug>;

        if $z2 == 0 goto label10;

        virtualinvoke r0.<gov.nist.javax.sip.parser.RAckParser: void dbg_leave(java.lang.String)>("RAckParser.parse");

     label10:
        throw r2;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch javax.sip.InvalidArgumentException from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
    }
}
