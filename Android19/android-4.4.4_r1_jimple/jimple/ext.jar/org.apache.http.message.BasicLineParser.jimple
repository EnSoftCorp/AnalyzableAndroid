public class org.apache.http.message.BasicLineParser extends java.lang.Object implements org.apache.http.message.LineParser
{
    public static final org.apache.http.message.BasicLineParser DEFAULT;
    protected final org.apache.http.ProtocolVersion protocol;

    static void <clinit>()
    {
        org.apache.http.message.BasicLineParser $r0;

        $r0 = new org.apache.http.message.BasicLineParser;

        specialinvoke $r0.<org.apache.http.message.BasicLineParser: void <init>()>();

        <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.http.message.BasicLineParser r0;

        r0 := @this: org.apache.http.message.BasicLineParser;

        specialinvoke r0.<org.apache.http.message.BasicLineParser: void <init>(org.apache.http.ProtocolVersion)>(null);

        return;
    }

    public void <init>(org.apache.http.ProtocolVersion)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.ProtocolVersion r1;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.ProtocolVersion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        r1 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label1:
        r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol> = r1;

        return;
    }

    public static final org.apache.http.Header parseHeader(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        org.apache.http.message.LineParser r1;
        org.apache.http.util.CharArrayBuffer r2, $r3;
        int $i0;
        org.apache.http.Header $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r5;

     label1:
        if r1 != null goto label2;

        r1 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r3 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        r2 = $r3;

        virtualinvoke r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r4 = interfaceinvoke r1.<org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>(r2);

        return $r4;
    }

    public static final org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        org.apache.http.message.LineParser r1;
        org.apache.http.util.CharArrayBuffer r2, $r3;
        int $i0, $i1;
        org.apache.http.message.ParserCursor $r4;
        org.apache.http.ProtocolVersion $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r6;

     label1:
        if r1 != null goto label2;

        r1 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r3 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        r2 = $r3;

        virtualinvoke r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r4 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r4.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r5 = interfaceinvoke r1.<org.apache.http.message.LineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r2, $r4);

        return $r5;
    }

    public static final org.apache.http.RequestLine parseRequestLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        org.apache.http.message.LineParser r1;
        org.apache.http.util.CharArrayBuffer r2, $r3;
        int $i0, $i1;
        org.apache.http.message.ParserCursor $r4;
        org.apache.http.RequestLine $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r6;

     label1:
        if r1 != null goto label2;

        r1 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r3 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        r2 = $r3;

        virtualinvoke r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r4 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r4.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r5 = interfaceinvoke r1.<org.apache.http.message.LineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r2, $r4);

        return $r5;
    }

    public static final org.apache.http.StatusLine parseStatusLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        org.apache.http.message.LineParser r1;
        org.apache.http.util.CharArrayBuffer r2, $r3;
        int $i0, $i1;
        org.apache.http.message.ParserCursor $r4;
        org.apache.http.StatusLine $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r6;

     label1:
        if r1 != null goto label2;

        r1 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r3 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        r2 = $r3;

        virtualinvoke r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r4 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r4.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r5 = interfaceinvoke r1.<org.apache.http.message.LineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r2, $r4);

        return $r5;
    }

    protected org.apache.http.ProtocolVersion createProtocolVersion(int, int)
    {
        org.apache.http.message.BasicLineParser r0;
        int i0, i1;
        org.apache.http.ProtocolVersion $r1, $r2;

        r0 := @this: org.apache.http.message.BasicLineParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        $r2 = virtualinvoke $r1.<org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)>(i0, i1);

        return $r2;
    }

    protected org.apache.http.RequestLine createRequestLine(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion)
    {
        org.apache.http.message.BasicLineParser r0;
        java.lang.String r1, r2;
        org.apache.http.ProtocolVersion r3;
        org.apache.http.message.BasicRequestLine $r4;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.http.ProtocolVersion;

        $r4 = new org.apache.http.message.BasicRequestLine;

        specialinvoke $r4.<org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>(r1, r2, r3);

        return $r4;
    }

    protected org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.ProtocolVersion r1;
        int i0;
        java.lang.String r2;
        org.apache.http.message.BasicStatusLine $r3;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.ProtocolVersion;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = new org.apache.http.message.BasicStatusLine;

        specialinvoke $r3.<org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>(r1, i0, r2);

        return $r3;
    }

    public boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i14, $i15, $i16;
        java.lang.String r3;
        boolean z0, $z1;
        org.apache.http.ProtocolVersion $r4;
        char $c10, $c11, $c12, $c13;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r5;

     label01:
        if r2 != null goto label02;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r6;

     label02:
        i0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $r4 = r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        r3 = virtualinvoke $r4.<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>();

        i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $i3 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i4 = i1 + 4;

        if $i3 >= $i4 goto label04;

     label03:
        return 0;

     label04:
        if i0 >= 0 goto label08;

        $i16 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i15 = -4 + $i16;

        i0 = $i15 - i1;

     label05:
        $i5 = i0 + i1;

        $i6 = 4 + $i5;

        $i8 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i6 > $i8 goto label03;

        z0 = 1;

        i2 = 0;

     label06:
        if z0 == 0 goto label11;

        if i2 >= i1 goto label11;

        $i9 = i0 + i2;

        $c12 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i9);

        $c11 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i2);

        if $c12 != $c11 goto label10;

        z0 = 1;

     label07:
        i2 = i2 + 1;

        goto label06;

     label08:
        if i0 != 0 goto label05;

     label09:
        $i14 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i0 >= $i14 goto label05;

        $c13 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i0);

        $z1 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c13);

        if $z1 == 0 goto label05;

        i0 = i0 + 1;

        goto label09;

     label10:
        z0 = 0;

        goto label07;

     label11:
        if z0 == 0 goto label12;

        $i7 = i0 + i1;

        $c10 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i7);

        if $c10 != 47 goto label13;

        z0 = 1;

     label12:
        return z0;

     label13:
        z0 = 0;

        goto label12;
    }

    public org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.BufferedHeader $r2;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 = new org.apache.http.message.BufferedHeader;

        specialinvoke $r2.<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)>(r1);

        return $r2;
    }

    public org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        java.lang.String r3, $r7, $r8, $r13, $r15, $r17, $r21, $r24, $r30, $r31, $r37, $r40, $r43;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i18;
        boolean z0;
        org.apache.http.ProtocolVersion $r6, $r11;
        org.apache.http.ParseException $r9, $r18, $r22, $r34, $r42;
        java.lang.StringBuilder $r10, $r12, $r14, $r16, $r19, $r20, $r23, $r25, $r26, $r32, $r33, $r35, $r36, $r38, $r39;
        char $c15, $c16, $c17;
        java.lang.NumberFormatException $r27, $r41;
        java.lang.IllegalArgumentException $r28, $r29;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 != null goto label01;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r28;

     label01:
        if r2 != null goto label02;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r29;

     label02:
        $r6 = r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        r3 = virtualinvoke $r6.<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>();

        i0 = virtualinvoke r3.<java.lang.String: int length()>();

        i1 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i2 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        i3 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i12 = i3 + i0;

        $i11 = 4 + $i12;

        if $i11 <= i2 goto label03;

        $r22 = new org.apache.http.ParseException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid protocol version: ");

        $r24 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.http.ParseException: void <init>(java.lang.String)>($r30);

        throw $r22;

     label03:
        z0 = 1;

        i4 = 0;

     label04:
        if z0 == 0 goto label07;

        if i4 >= i0 goto label07;

        $i18 = i3 + i4;

        $c17 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i18);

        $c16 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i4);

        if $c17 != $c16 goto label06;

        z0 = 1;

     label05:
        i4 = i4 + 1;

        goto label04;

     label06:
        z0 = 0;

        goto label05;

     label07:
        if z0 == 0 goto label08;

        $i14 = i3 + i0;

        $c15 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i14);

        if $c15 != 47 goto label09;

        z0 = 1;

     label08:
        if z0 != 0 goto label10;

        $r18 = new org.apache.http.ParseException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid protocol version: ");

        $r17 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.apache.http.ParseException: void <init>(java.lang.String)>($r21);

        throw $r18;

     label09:
        z0 = 0;

        goto label08;

     label10:
        $i13 = i0 + 1;

        i5 = i3 + $i13;

        i6 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(46, i5, i2);

        if i6 != -1 goto label11;

        $r9 = new org.apache.http.ParseException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol version number: ");

        $r15 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.http.ParseException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label11:
        $r7 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i5, i6);

        i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label12:
        i8 = i6 + 1;

        i9 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i8, i2);

        if i9 != -1 goto label13;

        i9 = i2;

     label13:
        $r8 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i8, i9);

        i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

     label14:
        virtualinvoke r2.<org.apache.http.message.ParserCursor: void updatePos(int)>(i9);

        $r11 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion createProtocolVersion(int,int)>(i7, i10);

        return $r11;

     label15:
        $r41 := @caughtexception;

        $r42 = new org.apache.http.ParseException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol major version number: ");

        $r37 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r43 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<org.apache.http.ParseException: void <init>(java.lang.String)>($r43);

        throw $r42;

     label16:
        $r27 := @caughtexception;

        $r34 = new org.apache.http.ParseException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol minor version number: ");

        $r31 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        $r39 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<org.apache.http.ParseException: void <init>(java.lang.String)>($r40);

        throw $r34;

        catch java.lang.NumberFormatException from label11 to label12 with label15;
        catch java.lang.NumberFormatException from label13 to label14 with label16;
    }

    public org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        int i0, i1, i2, i3, i4, i5;
        java.lang.String r4, r5, $r12, $r14, $r15, $r21, $r23, $r25, $r31, $r33;
        org.apache.http.ProtocolVersion r6;
        org.apache.http.RequestLine r7;
        boolean $z0;
        org.apache.http.ParseException $r8, $r13, $r22, $r27;
        java.lang.StringBuilder $r9, $r10, $r11, $r16, $r17, $r18, $r19, $r20, $r26, $r28, $r32, $r34;
        java.lang.IllegalArgumentException $r24, $r29;
        java.lang.IndexOutOfBoundsException $r30;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 != null goto label01;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r29;

     label01:
        if r2 != null goto label02;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r24;

     label02:
        i0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i1 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label03:
        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        i2 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i3 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i2, i1);

     label04:
        if i3 >= 0 goto label07;

     label05:
        $r22 = new org.apache.http.ParseException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r25 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r26 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.http.ParseException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label06:
        $r30 := @caughtexception;

        $r27 = new org.apache.http.ParseException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r33 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.apache.http.ParseException: void <init>(java.lang.String)>($r31);

        throw $r27;

     label07:
        r4 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i2, i3);

        virtualinvoke r2.<org.apache.http.message.ParserCursor: void updatePos(int)>(i3);

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        i4 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i5 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i4, i1);

     label08:
        if i5 >= 0 goto label10;

     label09:
        $r13 = new org.apache.http.ParseException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r15 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.http.ParseException: void <init>(java.lang.String)>($r21);

        throw $r13;

     label10:
        r5 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i4, i5);

        virtualinvoke r2.<org.apache.http.message.ParserCursor: void updatePos(int)>(i5);

        r6 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        $z0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label11;

        $r8 = new org.apache.http.ParseException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r12 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.http.ParseException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label11:
        r7 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>(r4, r5, r6);

     label12:
        return r7;

        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label06;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label06;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label06;
        catch java.lang.IndexOutOfBoundsException from label09 to label10 with label06;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label06;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label06;
    }

    public org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        int i0, i1, i2, i3, i4, i5, i6;
        org.apache.http.ProtocolVersion r4;
        java.lang.String r6, $r7, $r14, $r16, $r22, $r23;
        org.apache.http.StatusLine $r8;
        java.lang.IllegalArgumentException $r9, $r11;
        java.lang.IndexOutOfBoundsException $r10;
        java.lang.StringBuilder $r12, $r15, $r17, $r18, $r19, $r24;
        org.apache.http.ParseException $r13, $r21;
        java.lang.NumberFormatException $r20;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 != null goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r11;

     label01:
        if r2 != null goto label02;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r9;

     label02:
        i0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i1 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label03:
        r4 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        i2 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i3 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i2, i1);

     label04:
        i4 = i3;

        if i4 >= 0 goto label05;

        i4 = i1;

     label05:
        $r7 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i2, i4);

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label06:
        i6 = i4;

        if i6 >= i1 goto label12;

     label07:
        r6 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i6, i1);

     label08:
        $r8 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)>(r4, i5, r6);

        return $r8;

     label09:
        $r20 := @caughtexception;

     label10:
        $r21 = new org.apache.http.ParseException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse status code from status line: ");

        $r23 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.http.ParseException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label11:
        $r10 := @caughtexception;

        $r13 = new org.apache.http.ParseException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid status line: ");

        $r14 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.http.ParseException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label12:
        r6 = "";

        goto label08;

        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label11;
        catch java.lang.NumberFormatException from label05 to label06 with label09;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label11;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label11;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label11;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label11;
    }

    protected void skipWhitespace(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        int i0, i1;
        char $c2;
        boolean $z0;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        i0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i1 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label1:
        if i0 >= i1 goto label2;

        $c2 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i0);

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c2);

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<org.apache.http.message.ParserCursor: void updatePos(int)>(i0);

        return;
    }
}
