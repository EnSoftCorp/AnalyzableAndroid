public class gov.nist.javax.sip.parser.ServerParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ServerParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ServerParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ServerParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ServerParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ServerParser r0;
        gov.nist.javax.sip.header.Server r1, $r6;
        java.lang.Throwable r2, $r18;
        int i0, $i5, $i7;
        java.lang.String r4, r5, $r20, $r24, $r25;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r21, $r22;
        char $c1, $c2, $c3, $c4, $c6;
        java.lang.StringBuilder $r14, $r15, $r16, $r19;
        java.text.ParseException $r17, $r23;

        r0 := @this: gov.nist.javax.sip.parser.ServerParser;

        $z0 = <gov.nist.javax.sip.parser.ServerParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ServerParser: void dbg_enter(java.lang.String)>("ServerParser.parse");

     label01:
        $r6 = new gov.nist.javax.sip.header.Server;

        specialinvoke $r6.<gov.nist.javax.sip.header.Server: void <init>()>();

        r1 = $r6;

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.ServerParser: void headerName(int)>(2066);

        $r7 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r7.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 10 goto label05;

        $r17 = virtualinvoke r0.<gov.nist.javax.sip.parser.ServerParser: java.text.ParseException createParseException(java.lang.String)>("empty header");

        throw $r17;

     label03:
        $r18 := @caughtexception;

        r2 = $r18;

        $z2 = <gov.nist.javax.sip.parser.ServerParser: boolean debug>;

        if $z2 == 0 goto label04;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ServerParser: void dbg_leave(java.lang.String)>("ServerParser.parse");

     label04:
        throw r2;

     label05:
        $r8 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r8.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 == 10 goto label13;

        $r9 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        $c3 = virtualinvoke $r9.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c3 == 0 goto label13;

        $r10 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        $c4 = virtualinvoke $r10.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c4 != 40 goto label07;

        $r13 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        r5 = virtualinvoke $r13.<gov.nist.core.LexerCore: java.lang.String comment()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.Server: void addProductToken(java.lang.String)>($r20);

     label06:
        goto label05;

     label07:
        i0 = 0;

     label08:
        $r11 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        i0 = virtualinvoke $r11.<gov.nist.core.LexerCore: int markInputPosition()>();

        $r12 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        r4 = virtualinvoke $r12.<gov.nist.core.LexerCore: java.lang.String getString(char)>(47);

        $i5 = virtualinvoke r4.<java.lang.String: int length()>();

        $i7 = -1 + $i5;

        $c6 = virtualinvoke r4.<java.lang.String: char charAt(int)>($i7);

        if $c6 != 10 goto label09;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

     label09:
        virtualinvoke r1.<gov.nist.javax.sip.header.Server: void addProductToken(java.lang.String)>(r4);

     label10:
        goto label05;

     label11:
        $r23 := @caughtexception;

     label12:
        $r21 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r21.<gov.nist.core.LexerCore: void rewindInputPosition(int)>(i0);

        $r22 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        $r24 = virtualinvoke $r22.<gov.nist.core.LexerCore: java.lang.String getRest()>();

        $r25 = virtualinvoke $r24.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.Server: void addProductToken(java.lang.String)>($r25);

     label13:
        $z1 = <gov.nist.javax.sip.parser.ServerParser: boolean debug>;

        if $z1 == 0 goto label14;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ServerParser: void dbg_leave(java.lang.String)>("ServerParser.parse");

     label14:
        return r1;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.text.ParseException from label08 to label09 with label11;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.text.ParseException from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label03;
        catch java.lang.Throwable from label12 to label13 with label03;
    }
}
