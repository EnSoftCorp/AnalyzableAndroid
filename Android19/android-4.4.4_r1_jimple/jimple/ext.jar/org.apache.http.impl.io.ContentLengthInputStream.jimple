public class org.apache.http.impl.io.ContentLengthInputStream extends java.io.InputStream
{
    private static final int BUFFER_SIZE;
    private boolean closed;
    private long contentLength;
    private org.apache.http.io.SessionInputBuffer in;
    private long pos;

    public void <init>(org.apache.http.io.SessionInputBuffer, long)
    {
        org.apache.http.impl.io.ContentLengthInputStream r0;
        org.apache.http.io.SessionInputBuffer r1;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        l0 := @parameter1: long;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos> = 0L;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed> = 0;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in> = null;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input stream may not be null");

        throw $r3;

     label1:
        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Content length may not be negative");

        throw $r2;

     label2:
        r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in> = r1;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength> = l0;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthInputStream r0;
        java.lang.Throwable r1, $r3;
        byte[] r2;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        $z0 = r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed>;

        if $z0 != 0 goto label4;

     label1:
        r2 = newarray (byte)[2048];

     label2:
        i0 = virtualinvoke r0.<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[])>(r2);

     label3:
        if i0 >= 0 goto label2;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed> = 1;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        r1 = $r3;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed> = 1;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public int read() throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthInputStream r0;
        boolean $z0;
        long $l0, $l1, $l3, $l4;
        byte $b2;
        org.apache.http.io.SessionInputBuffer $r1;
        int $i5;
        java.io.IOException $r2;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        $z0 = r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r2;

     label1:
        $l1 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l0 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b2 = $l1 cmp $l0;

        if $b2 < 0 goto label2;

        return -1;

     label2:
        $l3 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l4 = 1L + $l3;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos> = $l4;

        $r1 = r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i5 = interfaceinvoke $r1.<org.apache.http.io.SessionInputBuffer: int read()>();

        return $i5;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthInputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthInputStream r0;
        byte[] r1;
        int i0, i1, i2;
        boolean $z0;
        long $l3, $l4, $l6, $l7, $l8, $l9, $l11, $l12, $l13, $l14, $l15, $l16;
        byte $b5, $b10;
        org.apache.http.io.SessionInputBuffer $r2;
        java.io.IOException $r3;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r3;

     label1:
        $l4 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l3 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b5 = $l4 cmp $l3;

        if $b5 < 0 goto label2;

        return -1;

     label2:
        $l7 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l6 = (long) i1;

        $l9 = $l7 + $l6;

        $l8 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b10 = $l9 cmp $l8;

        if $b10 <= 0 goto label3;

        $l16 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $l13 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l15 = $l16 - $l13;

        i1 = (int) $l15;

     label3:
        $r2 = r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in>;

        i2 = interfaceinvoke $r2.<org.apache.http.io.SessionInputBuffer: int read(byte[],int,int)>(r1, i0, i1);

        $l11 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l12 = (long) i2;

        $l14 = $l11 + $l12;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos> = $l14;

        return i2;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthInputStream r0;
        long l0, l1, l2, $l5, $l6, $l7, $l9, $l10, $l12, $l13, $l14;
        byte[] r1;
        int i3, $i11;
        byte $b4, $b8;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        l0 := @parameter0: long;

        $b4 = l0 cmp 0L;

        if $b4 > 0 goto label1;

        return 0L;

     label1:
        r1 = newarray (byte)[2048];

        $l6 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $l5 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l7 = $l6 - $l5;

        l1 = staticinvoke <java.lang.Math: long min(long,long)>(l0, $l7);

        l2 = 0L;

     label2:
        $b8 = l1 cmp 0L;

        if $b8 <= 0 goto label3;

        $l12 = staticinvoke <java.lang.Math: long min(long,long)>(2048L, l1);

        $i11 = (int) $l12;

        i3 = virtualinvoke r0.<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>(r1, 0, $i11);

        if i3 != -1 goto label4;

     label3:
        $l9 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l10 = l2 + $l9;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos> = $l10;

        return l2;

     label4:
        $l13 = (long) i3;

        l2 = l2 + $l13;

        $l14 = (long) i3;

        l1 = l1 - $l14;

        goto label2;
    }

    public static void <clinit>()
    {
        <org.apache.http.impl.io.ContentLengthInputStream: int BUFFER_SIZE> = 2048;

        return;
    }
}
