public class gov.nist.javax.sip.parser.WarningParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.WarningParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.WarningParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.WarningParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.WarningParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.WarningParser r0;
        gov.nist.javax.sip.header.WarningList r1, $r15;
        java.lang.Throwable r2, $r85;
        gov.nist.javax.sip.header.Warning r3, r8, $r17, $r39;
        gov.nist.core.Token r4, r7, r9, r12, r13, r14;
        javax.sip.InvalidArgumentException r5, r10, $r69, $r84;
        java.lang.NumberFormatException r6, r11, $r78, $r79;
        boolean $z0, $z1, $z4;
        char $c0, $c2, $c3, $c5;
        gov.nist.core.LexerCore $r16, $r18, $r19, $r21, $r22, $r24, $r26, $r27, $r28, $r30, $r31, $r33, $r35, $r36, $r38, $r40, $r42, $r44, $r45, $r47, $r48, $r50, $r52, $r54, $r59, $r62, $r65, $r67;
        java.lang.String $r23, $r29, $r32, $r41, $r43, $r53, $r58, $r60, $r66, $r70, $r72, $r74, $r75, $r80, $r81, $r87;
        int $i1, $i4;
        java.lang.StringBuilder $r55, $r56, $r57, $r61, $r64, $r71, $r73, $r76;
        java.text.ParseException $r77, $r82, $r83, $r86;

        r0 := @this: gov.nist.javax.sip.parser.WarningParser;

        $r15 = new gov.nist.javax.sip.header.WarningList;

        specialinvoke $r15.<gov.nist.javax.sip.header.WarningList: void <init>()>();

        r1 = $r15;

        $z0 = <gov.nist.javax.sip.parser.WarningParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.WarningParser: void dbg_enter(java.lang.String)>("WarningParser.parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.WarningParser: void headerName(int)>(2078);

     label02:
        $r16 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r16.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 == 10 goto label25;

        $r17 = new gov.nist.javax.sip.header.Warning;

        specialinvoke $r17.<gov.nist.javax.sip.header.Warning: void <init>()>();

        r3 = $r17;

        virtualinvoke r3.<gov.nist.javax.sip.header.Warning: void setHeaderName(java.lang.String)>("Warning");

        $r19 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r19.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r18 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        r4 = virtualinvoke $r18.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

     label03:
        $r23 = virtualinvoke r4.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r23);

        virtualinvoke r3.<gov.nist.javax.sip.header.Warning: void setCode(int)>($i1);

     label04:
        $r21 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r21.<gov.nist.core.LexerCore: void SPorHT()>();

        $r22 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r22.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r26 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        r7 = virtualinvoke $r26.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r24 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r24.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 != 58 goto label17;

        $r65 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r65.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r67 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r67.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r62 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        r14 = virtualinvoke $r62.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke r7.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $r76 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75);

        $r73 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r74 = virtualinvoke r14.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $r71 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<gov.nist.javax.sip.header.Warning: void setAgent(java.lang.String)>($r72);

     label05:
        $r27 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r27.<gov.nist.core.LexerCore: void SPorHT()>();

        $r28 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        $r32 = virtualinvoke $r28.<gov.nist.core.LexerCore: java.lang.String quotedString()>();

        virtualinvoke r3.<gov.nist.javax.sip.header.Warning: void setText(java.lang.String)>($r32);

        $r31 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r31.<gov.nist.core.LexerCore: void SPorHT()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.WarningList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r3);

     label06:
        $r30 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        $c3 = virtualinvoke $r30.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c3 != 44 goto label02;

        $r35 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r35.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        $r33 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r33.<gov.nist.core.LexerCore: void SPorHT()>();

        $r39 = new gov.nist.javax.sip.header.Warning;

        specialinvoke $r39.<gov.nist.javax.sip.header.Warning: void <init>()>();

        r8 = $r39;

        $r38 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r38.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r36 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        r9 = virtualinvoke $r36.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

     label07:
        $r41 = virtualinvoke r9.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r41);

        virtualinvoke r8.<gov.nist.javax.sip.header.Warning: void setCode(int)>($i4);

     label08:
        $r40 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r40.<gov.nist.core.LexerCore: void SPorHT()>();

        $r45 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r45.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r47 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        r12 = virtualinvoke $r47.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r42 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        $c5 = virtualinvoke $r42.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c5 != 58 goto label23;

        $r48 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r48.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r50 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r50.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r59 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        r13 = virtualinvoke $r59.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke r12.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $r56 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r58 = virtualinvoke r13.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r66 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<gov.nist.javax.sip.header.Warning: void setAgent(java.lang.String)>($r66);

     label09:
        $r44 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r44.<gov.nist.core.LexerCore: void SPorHT()>();

        $r52 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        $r53 = virtualinvoke $r52.<gov.nist.core.LexerCore: java.lang.String quotedString()>();

        virtualinvoke r8.<gov.nist.javax.sip.header.Warning: void setText(java.lang.String)>($r53);

        $r54 = r0.<gov.nist.javax.sip.parser.WarningParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r54.<gov.nist.core.LexerCore: void SPorHT()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.WarningList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r8);

     label10:
        goto label06;

     label11:
        $r85 := @caughtexception;

        r2 = $r85;

        $z4 = <gov.nist.javax.sip.parser.WarningParser: boolean debug>;

        if $z4 == 0 goto label12;

        virtualinvoke r0.<gov.nist.javax.sip.parser.WarningParser: void dbg_leave(java.lang.String)>("WarningParser.parse");

     label12:
        throw r2;

     label13:
        $r79 := @caughtexception;

        r6 = $r79;

     label14:
        $r80 = virtualinvoke r6.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r77 = virtualinvoke r0.<gov.nist.javax.sip.parser.WarningParser: java.text.ParseException createParseException(java.lang.String)>($r80);

        throw $r77;

     label15:
        $r69 := @caughtexception;

        r5 = $r69;

     label16:
        $r70 = virtualinvoke r5.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r83 = virtualinvoke r0.<gov.nist.javax.sip.parser.WarningParser: java.text.ParseException createParseException(java.lang.String)>($r70);

        throw $r83;

     label17:
        $r29 = virtualinvoke r7.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r3.<gov.nist.javax.sip.header.Warning: void setAgent(java.lang.String)>($r29);

     label18:
        goto label05;

     label19:
        $r78 := @caughtexception;

        r11 = $r78;

     label20:
        $r87 = virtualinvoke r11.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r86 = virtualinvoke r0.<gov.nist.javax.sip.parser.WarningParser: java.text.ParseException createParseException(java.lang.String)>($r87);

        throw $r86;

     label21:
        $r84 := @caughtexception;

        r10 = $r84;

     label22:
        $r81 = virtualinvoke r10.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r82 = virtualinvoke r0.<gov.nist.javax.sip.parser.WarningParser: java.text.ParseException createParseException(java.lang.String)>($r81);

        throw $r82;

     label23:
        $r43 = virtualinvoke r12.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r8.<gov.nist.javax.sip.header.Warning: void setAgent(java.lang.String)>($r43);

     label24:
        goto label09;

     label25:
        $z1 = <gov.nist.javax.sip.parser.WarningParser: boolean debug>;

        if $z1 == 0 goto label26;

        virtualinvoke r0.<gov.nist.javax.sip.parser.WarningParser: void dbg_leave(java.lang.String)>("WarningParser.parse");

     label26:
        return r1;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.NumberFormatException from label03 to label04 with label13;
        catch javax.sip.InvalidArgumentException from label03 to label04 with label15;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.NumberFormatException from label07 to label08 with label19;
        catch javax.sip.InvalidArgumentException from label07 to label08 with label21;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label14 to label15 with label11;
        catch java.lang.Throwable from label16 to label17 with label11;
        catch java.lang.Throwable from label17 to label18 with label11;
        catch java.lang.Throwable from label20 to label21 with label11;
        catch java.lang.Throwable from label22 to label23 with label11;
        catch java.lang.Throwable from label23 to label24 with label11;
    }
}
