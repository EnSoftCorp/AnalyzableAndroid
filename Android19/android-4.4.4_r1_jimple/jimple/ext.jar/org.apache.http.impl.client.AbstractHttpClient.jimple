public abstract class org.apache.http.impl.client.AbstractHttpClient extends java.lang.Object implements org.apache.http.client.HttpClient
{
    private org.apache.http.conn.ClientConnectionManager connManager;
    private org.apache.http.client.CookieStore cookieStore;
    private org.apache.http.client.CredentialsProvider credsProvider;
    private org.apache.http.params.HttpParams defaultParams;
    private org.apache.http.protocol.BasicHttpProcessor httpProcessor;
    private org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy;
    private final org.apache.commons.logging.Log log;
    private org.apache.http.client.AuthenticationHandler proxyAuthHandler;
    private org.apache.http.client.RedirectHandler redirectHandler;
    private org.apache.http.protocol.HttpRequestExecutor requestExec;
    private org.apache.http.client.HttpRequestRetryHandler retryHandler;
    private org.apache.http.ConnectionReuseStrategy reuseStrategy;
    private org.apache.http.conn.routing.HttpRoutePlanner routePlanner;
    private org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes;
    private org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs;
    private org.apache.http.client.AuthenticationHandler targetAuthHandler;
    private org.apache.http.client.UserTokenHandler userTokenHandler;

    protected void <init>(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)
    {
        org.apache.commons.logging.Log $r0;
        org.apache.http.impl.client.AbstractHttpClient r1;
        org.apache.http.conn.ClientConnectionManager r2;
        org.apache.http.params.HttpParams r3;
        java.lang.Class $r4;

        r1 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r2 := @parameter0: org.apache.http.conn.ClientConnectionManager;

        r3 := @parameter1: org.apache.http.params.HttpParams;

        specialinvoke r1.<java.lang.Object: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r4);

        r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.commons.logging.Log log> = $r0;

        r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams defaultParams> = r3;

        r1.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager connManager> = r2;

        return;
    }

    private org.apache.http.HttpHost determineTarget(org.apache.http.client.methods.HttpUriRequest)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.methods.HttpUriRequest r1;
        java.net.URI r2;
        boolean z0;
        org.apache.http.HttpHost r3, $r4;
        java.lang.String $r5, $r6;
        int $i0;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r2 = interfaceinvoke r1.<org.apache.http.client.methods.HttpUriRequest: java.net.URI getURI()>();

        z0 = virtualinvoke r2.<java.net.URI: boolean isAbsolute()>();

        r3 = null;

        if z0 == 0 goto label1;

        $r4 = new org.apache.http.HttpHost;

        $r5 = virtualinvoke r2.<java.net.URI: java.lang.String getHost()>();

        $i0 = virtualinvoke r2.<java.net.URI: int getPort()>();

        $r6 = virtualinvoke r2.<java.net.URI: java.lang.String getScheme()>();

        specialinvoke $r4.<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>($r5, $i0, $r6);

        r3 = $r4;

     label1:
        return r3;
    }

    public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpRequestInterceptor r1;
        java.lang.Throwable r2, $r4;
        org.apache.http.protocol.BasicHttpProcessor $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.HttpRequestInterceptor;

        entermonitor r0;

     label1:
        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r3.<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor)>(r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpRequestInterceptor r1;
        int i0;
        java.lang.Throwable r2, $r4;
        org.apache.http.protocol.BasicHttpProcessor $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.HttpRequestInterceptor;

        i0 := @parameter1: int;

        entermonitor r0;

     label1:
        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r3.<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor,int)>(r1, i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpResponseInterceptor r1;
        java.lang.Throwable r2, $r4;
        org.apache.http.protocol.BasicHttpProcessor $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.HttpResponseInterceptor;

        entermonitor r0;

     label1:
        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r3.<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor)>(r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpResponseInterceptor r1;
        int i0;
        java.lang.Throwable r2, $r4;
        org.apache.http.protocol.BasicHttpProcessor $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.HttpResponseInterceptor;

        i0 := @parameter1: int;

        entermonitor r0;

     label1:
        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r3.<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor,int)>(r1, i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void clearRequestInterceptors()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r3;
        org.apache.http.protocol.BasicHttpProcessor $r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r2.<org.apache.http.protocol.BasicHttpProcessor: void clearRequestInterceptors()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void clearResponseInterceptors()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r3;
        org.apache.http.protocol.BasicHttpProcessor $r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r2.<org.apache.http.protocol.BasicHttpProcessor: void clearResponseInterceptors()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected abstract org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry();

    protected abstract org.apache.http.conn.ClientConnectionManager createClientConnectionManager();

    protected org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor, org.apache.http.conn.ClientConnectionManager, org.apache.http.ConnectionReuseStrategy, org.apache.http.conn.ConnectionKeepAliveStrategy, org.apache.http.conn.routing.HttpRoutePlanner, org.apache.http.protocol.HttpProcessor, org.apache.http.client.HttpRequestRetryHandler, org.apache.http.client.RedirectHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.UserTokenHandler, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.protocol.HttpRequestExecutor r1;
        org.apache.http.conn.ClientConnectionManager r2;
        org.apache.http.ConnectionReuseStrategy r3;
        org.apache.http.conn.ConnectionKeepAliveStrategy r4;
        org.apache.http.conn.routing.HttpRoutePlanner r5;
        org.apache.http.protocol.HttpProcessor r6;
        org.apache.http.client.HttpRequestRetryHandler r7;
        org.apache.http.client.RedirectHandler r8;
        org.apache.http.client.AuthenticationHandler r9, r10;
        org.apache.http.client.UserTokenHandler r11;
        org.apache.http.params.HttpParams r12;
        org.apache.http.impl.client.DefaultRequestDirector $r13;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.protocol.HttpRequestExecutor;

        r2 := @parameter1: org.apache.http.conn.ClientConnectionManager;

        r3 := @parameter2: org.apache.http.ConnectionReuseStrategy;

        r4 := @parameter3: org.apache.http.conn.ConnectionKeepAliveStrategy;

        r5 := @parameter4: org.apache.http.conn.routing.HttpRoutePlanner;

        r6 := @parameter5: org.apache.http.protocol.HttpProcessor;

        r7 := @parameter6: org.apache.http.client.HttpRequestRetryHandler;

        r8 := @parameter7: org.apache.http.client.RedirectHandler;

        r9 := @parameter8: org.apache.http.client.AuthenticationHandler;

        r10 := @parameter9: org.apache.http.client.AuthenticationHandler;

        r11 := @parameter10: org.apache.http.client.UserTokenHandler;

        r12 := @parameter11: org.apache.http.params.HttpParams;

        $r13 = new org.apache.http.impl.client.DefaultRequestDirector;

        specialinvoke $r13.<org.apache.http.impl.client.DefaultRequestDirector: void <init>(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12);

        return $r13;
    }

    protected abstract org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy();

    protected abstract org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy();

    protected abstract org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry();

    protected abstract org.apache.http.client.CookieStore createCookieStore();

    protected abstract org.apache.http.client.CredentialsProvider createCredentialsProvider();

    protected abstract org.apache.http.protocol.HttpContext createHttpContext();

    protected abstract org.apache.http.params.HttpParams createHttpParams();

    protected abstract org.apache.http.protocol.BasicHttpProcessor createHttpProcessor();

    protected abstract org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler();

    protected abstract org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner();

    protected abstract org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler();

    protected abstract org.apache.http.client.RedirectHandler createRedirectHandler();

    protected abstract org.apache.http.protocol.HttpRequestExecutor createRequestExecutor();

    protected abstract org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler();

    protected abstract org.apache.http.client.UserTokenHandler createUserTokenHandler();

    protected org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.impl.client.ClientParamsStack $r2;
        org.apache.http.params.HttpParams $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.HttpRequest;

        $r2 = new org.apache.http.impl.client.ClientParamsStack;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams getParams()>();

        $r4 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        specialinvoke $r2.<org.apache.http.impl.client.ClientParamsStack: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>(null, $r3, $r4, null);

        return $r2;
    }

    public java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;
        org.apache.http.client.ResponseHandler r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.client.ResponseHandler;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>(r1, r2, r3, null);

        return $r4;
    }

    public java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;
        org.apache.http.client.ResponseHandler r3;
        org.apache.http.protocol.HttpContext r4;
        org.apache.http.HttpResponse r5;
        java.lang.Throwable r6, r8, $r12, $r18;
        org.apache.http.HttpEntity r7, r10;
        java.lang.Object r9;
        java.lang.IllegalArgumentException $r11;
        boolean $z0, $z1, $z2;
        java.io.IOException $r13;
        java.lang.reflect.UndeclaredThrowableException $r14;
        java.lang.Error $r15;
        java.lang.RuntimeException $r16;
        org.apache.commons.logging.Log $r17;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.client.ResponseHandler;

        r4 := @parameter3: org.apache.http.protocol.HttpContext;

        if r3 != null goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Response handler must not be null.");

        throw $r11;

     label01:
        r5 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r2, r4);

     label02:
        r9 = interfaceinvoke r3.<org.apache.http.client.ResponseHandler: java.lang.Object handleResponse(org.apache.http.HttpResponse)>(r5);

     label03:
        r10 = interfaceinvoke r5.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        if r10 == null goto label04;

        interfaceinvoke r10.<org.apache.http.HttpEntity: void consumeContent()>();

     label04:
        return r9;

     label05:
        $r12 := @caughtexception;

        r6 = $r12;

        r7 = interfaceinvoke r5.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        if r7 == null goto label07;

     label06:
        interfaceinvoke r7.<org.apache.http.HttpEntity: void consumeContent()>();

     label07:
        $z0 = r6 instanceof java.lang.Error;

        if $z0 == 0 goto label09;

        $r15 = (java.lang.Error) r6;

        throw $r15;

     label08:
        $r18 := @caughtexception;

        r8 = $r18;

        $r17 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.commons.logging.Log log>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Error consuming content after an exception.", r8);

        goto label07;

     label09:
        $z2 = r6 instanceof java.lang.RuntimeException;

        if $z2 == 0 goto label10;

        $r16 = (java.lang.RuntimeException) r6;

        throw $r16;

     label10:
        $z1 = r6 instanceof java.io.IOException;

        if $z1 == 0 goto label11;

        $r13 = (java.io.IOException) r6;

        throw $r13;

     label11:
        $r14 = new java.lang.reflect.UndeclaredThrowableException;

        specialinvoke $r14.<java.lang.reflect.UndeclaredThrowableException: void <init>(java.lang.Throwable)>(r6);

        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
    }

    public java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.client.ResponseHandler r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r2 := @parameter1: org.apache.http.client.ResponseHandler;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>(r1, r2, null);

        return $r3;
    }

    public java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.client.ResponseHandler r2;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.HttpHost $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r2 := @parameter1: org.apache.http.client.ResponseHandler;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        $r4 = specialinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpHost determineTarget(org.apache.http.client.methods.HttpUriRequest)>(r1);

        $r5 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>($r4, r1, r2, r3);

        return $r5;
    }

    public final org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;
        org.apache.http.protocol.HttpContext $r3;
        org.apache.http.HttpResponse $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        $r3 = (org.apache.http.protocol.HttpContext) null;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r2, $r3);

        return $r4;
    }

    public final org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;
        org.apache.http.protocol.HttpContext r3, r5, r7;
        java.lang.Throwable r4, $r25;
        org.apache.http.protocol.DefaultedHttpContext r6, $r11;
        org.apache.http.client.RequestDirector r8;
        org.apache.http.HttpException r9, $r28;
        org.apache.http.HttpResponse r10;
        org.apache.http.protocol.HttpRequestExecutor $r12;
        org.apache.http.conn.ClientConnectionManager $r13;
        org.apache.http.conn.ConnectionKeepAliveStrategy $r14;
        org.apache.http.ConnectionReuseStrategy $r15;
        org.apache.http.protocol.BasicHttpProcessor $r16, $r19;
        org.apache.http.conn.routing.HttpRoutePlanner $r17;
        org.apache.http.client.HttpRequestRetryHandler $r18;
        org.apache.http.client.AuthenticationHandler $r20, $r23;
        org.apache.http.client.RedirectHandler $r21;
        org.apache.http.client.UserTokenHandler $r22;
        org.apache.http.params.HttpParams $r24;
        java.lang.IllegalArgumentException $r26;
        org.apache.http.client.ClientProtocolException $r27;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        if r2 != null goto label01;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Request must not be null.");

        throw $r26;

     label01:
        entermonitor r0;

     label02:
        r5 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpContext createHttpContext()>();

     label03:
        if r3 != null goto label07;

        r7 = r5;

     label04:
        $r12 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor getRequestExecutor()>();

        $r13 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        $r15 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()>();

        $r14 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()>();

        $r17 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner()>();

        $r16 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        $r19 = virtualinvoke $r16.<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.protocol.BasicHttpProcessor copy()>();

        $r18 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler()>();

        $r21 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler getRedirectHandler()>();

        $r20 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler()>();

        $r23 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler()>();

        $r22 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler getUserTokenHandler()>();

        $r24 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest)>(r2);

        r8 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>($r12, $r13, $r15, $r14, $r17, $r19, $r18, $r21, $r20, $r23, $r22, $r24);

        exitmonitor r0;

     label05:
        r10 = interfaceinvoke r8.<org.apache.http.client.RequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r2, r7);

     label06:
        return r10;

     label07:
        $r11 = new org.apache.http.protocol.DefaultedHttpContext;

        specialinvoke $r11.<org.apache.http.protocol.DefaultedHttpContext: void <init>(org.apache.http.protocol.HttpContext,org.apache.http.protocol.HttpContext)>(r3, r5);

        r6 = $r11;

     label08:
        r7 = r6;

        goto label04;

     label09:
        $r25 := @caughtexception;

        r4 = $r25;

     label10:
        exitmonitor r0;

     label11:
        throw r4;

     label12:
        $r28 := @caughtexception;

        r9 = $r28;

        $r27 = new org.apache.http.client.ClientProtocolException;

        specialinvoke $r27.<org.apache.http.client.ClientProtocolException: void <init>(java.lang.Throwable)>(r9);

        throw $r27;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch org.apache.http.HttpException from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public final org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.protocol.HttpContext $r2;
        org.apache.http.HttpResponse $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        $r2 = (org.apache.http.protocol.HttpContext) null;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>(r1, $r2);

        return $r3;
    }

    public final org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.HttpHost $r3;
        org.apache.http.HttpResponse $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Request must not be null.");

        throw $r5;

     label1:
        $r3 = specialinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpHost determineTarget(org.apache.http.client.methods.HttpUriRequest)>(r1);

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r3, r1, r2);

        return $r4;
    }

    public final org.apache.http.auth.AuthSchemeRegistry getAuthSchemes()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.auth.AuthSchemeRegistry r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.conn.ConnectionKeepAliveStrategy r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.conn.ClientConnectionManager getConnectionManager()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.conn.ClientConnectionManager r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager connManager>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager connManager> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager connManager>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.ConnectionReuseStrategy r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy reuseStrategy>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy reuseStrategy> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy reuseStrategy>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.cookie.CookieSpecRegistry getCookieSpecs()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.cookie.CookieSpecRegistry r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.client.CookieStore getCookieStore()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.client.CookieStore r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore cookieStore>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore createCookieStore()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore cookieStore> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore cookieStore>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.client.CredentialsProvider getCredentialsProvider()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.client.CredentialsProvider r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider credsProvider>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider createCredentialsProvider()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider credsProvider> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider credsProvider>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    protected final org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.protocol.BasicHttpProcessor r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor httpProcessor>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor httpProcessor> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor httpProcessor>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.client.HttpRequestRetryHandler r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler retryHandler>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler retryHandler> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler retryHandler>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.params.HttpParams getParams()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.params.HttpParams r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams defaultParams>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams createHttpParams()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams defaultParams> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams defaultParams>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.client.AuthenticationHandler r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler proxyAuthHandler>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler proxyAuthHandler> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler proxyAuthHandler>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.client.RedirectHandler getRedirectHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.client.RedirectHandler r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler redirectHandler>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler createRedirectHandler()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler redirectHandler> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler redirectHandler>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.protocol.HttpRequestExecutor getRequestExecutor()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.protocol.HttpRequestExecutor r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor requestExec>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor createRequestExecutor()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor requestExec> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor requestExec>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        int i0;
        java.lang.Throwable r1, $r4;
        org.apache.http.HttpRequestInterceptor r2;
        org.apache.http.protocol.BasicHttpProcessor $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        r2 = virtualinvoke $r3.<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)>(i0);

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getRequestInterceptorCount()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r3;
        int i0;
        org.apache.http.protocol.BasicHttpProcessor $r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        i0 = virtualinvoke $r2.<org.apache.http.protocol.BasicHttpProcessor: int getRequestInterceptorCount()>();

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        int i0;
        java.lang.Throwable r1, $r4;
        org.apache.http.HttpResponseInterceptor r2;
        org.apache.http.protocol.BasicHttpProcessor $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r3 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        r2 = virtualinvoke $r3.<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)>(i0);

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getResponseInterceptorCount()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r3;
        int i0;
        org.apache.http.protocol.BasicHttpProcessor $r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        i0 = virtualinvoke $r2.<org.apache.http.protocol.BasicHttpProcessor: int getResponseInterceptorCount()>();

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.conn.routing.HttpRoutePlanner r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner routePlanner>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner routePlanner> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner routePlanner>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.client.AuthenticationHandler r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler targetAuthHandler>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler targetAuthHandler> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler targetAuthHandler>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.client.UserTokenHandler getUserTokenHandler()
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Throwable r1, $r5;
        org.apache.http.client.UserTokenHandler r2, $r3, $r4;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler userTokenHandler>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler createUserTokenHandler()>();

        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler userTokenHandler> = $r4;

     label2:
        r2 = r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler userTokenHandler>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void removeRequestInterceptorByClass(java.lang.Class)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Class r1;
        org.apache.http.protocol.BasicHttpProcessor $r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r2.<org.apache.http.protocol.BasicHttpProcessor: void removeRequestInterceptorByClass(java.lang.Class)>(r1);

        return;
    }

    public void removeResponseInterceptorByClass(java.lang.Class)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        java.lang.Class r1;
        org.apache.http.protocol.BasicHttpProcessor $r2;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>();

        virtualinvoke $r2.<org.apache.http.protocol.BasicHttpProcessor: void removeResponseInterceptorByClass(java.lang.Class)>(r1);

        return;
    }

    public void setAuthSchemes(org.apache.http.auth.AuthSchemeRegistry)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.auth.AuthSchemeRegistry r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.auth.AuthSchemeRegistry;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setCookieSpecs(org.apache.http.cookie.CookieSpecRegistry)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.cookie.CookieSpecRegistry r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.cookie.CookieSpecRegistry;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setCookieStore(org.apache.http.client.CookieStore)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.CookieStore r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.CookieStore;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore cookieStore> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setCredentialsProvider(org.apache.http.client.CredentialsProvider)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.CredentialsProvider r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.CredentialsProvider;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider credsProvider> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.HttpRequestRetryHandler r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.HttpRequestRetryHandler;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler retryHandler> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.conn.ConnectionKeepAliveStrategy r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.conn.ConnectionKeepAliveStrategy;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setParams(org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.params.HttpParams r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams defaultParams> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.AuthenticationHandler r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.AuthenticationHandler;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler proxyAuthHandler> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setRedirectHandler(org.apache.http.client.RedirectHandler)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.RedirectHandler r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.RedirectHandler;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler redirectHandler> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setReuseStrategy(org.apache.http.ConnectionReuseStrategy)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.ConnectionReuseStrategy r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.ConnectionReuseStrategy;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy reuseStrategy> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.conn.routing.HttpRoutePlanner r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.conn.routing.HttpRoutePlanner;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner routePlanner> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.AuthenticationHandler r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.AuthenticationHandler;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler targetAuthHandler> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setUserTokenHandler(org.apache.http.client.UserTokenHandler)
    {
        org.apache.http.impl.client.AbstractHttpClient r0;
        org.apache.http.client.UserTokenHandler r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.http.impl.client.AbstractHttpClient;

        r1 := @parameter0: org.apache.http.client.UserTokenHandler;

        entermonitor r0;

     label1:
        r0.<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler userTokenHandler> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
