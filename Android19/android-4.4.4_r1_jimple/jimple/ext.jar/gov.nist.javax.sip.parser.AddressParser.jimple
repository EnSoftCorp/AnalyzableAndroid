public class gov.nist.javax.sip.parser.AddressParser extends gov.nist.javax.sip.parser.Parser
{

    public void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.AddressParser r0;
        gov.nist.javax.sip.parser.Lexer r1;
        gov.nist.core.LexerCore $r2;

        r0 := @this: gov.nist.javax.sip.parser.AddressParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.Parser: void <init>()>();

        r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer> = r1;

        $r2 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r2.<gov.nist.core.LexerCore: void selectLexer(java.lang.String)>("charLexer");

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.AddressParser r0;
        java.lang.String r1;
        gov.nist.javax.sip.parser.Lexer $r2;

        r0 := @this: gov.nist.javax.sip.parser.AddressParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.Parser: void <init>()>();

        $r2 = new gov.nist.javax.sip.parser.Lexer;

        specialinvoke $r2.<gov.nist.javax.sip.parser.Lexer: void <init>(java.lang.String,java.lang.String)>("charLexer", r1);

        r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer> = $r2;

        return;
    }

    public gov.nist.javax.sip.address.AddressImpl address(boolean) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.AddressParser r0;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0;
        java.lang.Throwable r1, $r15, $r16;
        char c1, c2;
        gov.nist.javax.sip.address.AddressImpl r2, r3, r4, $r8;
        gov.nist.javax.sip.address.GenericURI r5;
        gov.nist.core.LexerCore $r6, $r7, $r9, $r12;
        gov.nist.javax.sip.parser.URLParser $r10;
        gov.nist.javax.sip.parser.Lexer $r11;
        java.text.ParseException $r13, $r14;

        r0 := @this: gov.nist.javax.sip.parser.AddressParser;

        z0 := @parameter0: boolean;

        $z1 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z1 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_enter(java.lang.String)>("address");

     label01:
        i0 = 0;

     label02:
        $r6 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $z2 = virtualinvoke $r6.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z2 == 0 goto label04;

        $r12 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        c2 = virtualinvoke $r12.<gov.nist.core.LexerCore: char lookAhead(int)>(i0);

     label03:
        if c2 == 60 goto label04;

        if c2 == 34 goto label04;

        if c2 == 58 goto label04;

        if c2 != 47 goto label10;

     label04:
        $r7 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        c1 = virtualinvoke $r7.<gov.nist.core.LexerCore: char lookAhead(int)>(i0);

     label05:
        if c1 == 60 goto label06;

        if c1 != 34 goto label16;

     label06:
        r2 = virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.javax.sip.address.AddressImpl nameAddr()>();

     label07:
        r3 = r2;

     label08:
        $z3 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z3 == 0 goto label09;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_leave(java.lang.String)>("address");

     label09:
        return r3;

     label10:
        if c2 != 0 goto label15;

     label11:
        $r14 = virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: java.text.ParseException createParseException(java.lang.String)>("unexpected EOL");

        throw $r14;

     label12:
        $r16 := @caughtexception;

        r1 = $r16;

     label13:
        $z4 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z4 == 0 goto label14;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_leave(java.lang.String)>("address");

     label14:
        throw r1;

     label15:
        i0 = i0 + 1;

        goto label02;

     label16:
        if c1 == 58 goto label17;

        if c1 != 47 goto label20;

     label17:
        $r8 = new gov.nist.javax.sip.address.AddressImpl;

        specialinvoke $r8.<gov.nist.javax.sip.address.AddressImpl: void <init>()>();

        r4 = $r8;

     label18:
        $r10 = new gov.nist.javax.sip.parser.URLParser;

        $r9 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $r11 = (gov.nist.javax.sip.parser.Lexer) $r9;

        specialinvoke $r10.<gov.nist.javax.sip.parser.URLParser: void <init>(gov.nist.javax.sip.parser.Lexer)>($r11);

        r5 = virtualinvoke $r10.<gov.nist.javax.sip.parser.URLParser: gov.nist.javax.sip.address.GenericURI uriReference(boolean)>(z0);

        virtualinvoke r4.<gov.nist.javax.sip.address.AddressImpl: void setAddressType(int)>(2);

        virtualinvoke r4.<gov.nist.javax.sip.address.AddressImpl: void setURI(javax.sip.address.URI)>(r5);

     label19:
        r3 = r4;

        goto label08;

     label20:
        $r13 = virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: java.text.ParseException createParseException(java.lang.String)>("Bad address spec");

        throw $r13;

     label21:
        $r15 := @caughtexception;

        r1 = $r15;

        goto label13;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label17 to label18 with label12;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label20 to label21 with label12;
    }

    protected gov.nist.javax.sip.address.AddressImpl nameAddr() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.AddressParser r0;
        java.lang.Throwable r1, $r33;
        gov.nist.javax.sip.address.AddressImpl r2, r7, $r9, $r19, $r30;
        java.lang.String r3, r4, $r12;
        gov.nist.javax.sip.address.GenericURI r5, r6;
        boolean $z0, $z1, $z2, $z3;
        gov.nist.core.LexerCore $r8, $r10, $r11, $r14, $r16, $r18, $r20, $r21, $r23, $r24, $r25, $r27, $r28, $r29, $r31, $r34;
        char $c0, $c1;
        gov.nist.javax.sip.parser.URLParser $r15, $r26;
        gov.nist.javax.sip.parser.Lexer $r17, $r32;

        r0 := @this: gov.nist.javax.sip.parser.AddressParser;

        $z0 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_enter(java.lang.String)>("nameAddr");

     label01:
        $r8 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r8.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 != 60 goto label04;

        $r24 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r24.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r28 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r28.<gov.nist.core.LexerCore: void selectLexer(java.lang.String)>("sip_urlLexer");

        $r29 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r29.<gov.nist.core.LexerCore: void SPorHT()>();

        $r26 = new gov.nist.javax.sip.parser.URLParser;

        $r27 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $r32 = (gov.nist.javax.sip.parser.Lexer) $r27;

        specialinvoke $r26.<gov.nist.javax.sip.parser.URLParser: void <init>(gov.nist.javax.sip.parser.Lexer)>($r32);

        r6 = virtualinvoke $r26.<gov.nist.javax.sip.parser.URLParser: gov.nist.javax.sip.address.GenericURI uriReference(boolean)>(1);

        $r30 = new gov.nist.javax.sip.address.AddressImpl;

        specialinvoke $r30.<gov.nist.javax.sip.address.AddressImpl: void <init>()>();

        r7 = $r30;

        virtualinvoke r7.<gov.nist.javax.sip.address.AddressImpl: void setAddressType(int)>(1);

        virtualinvoke r7.<gov.nist.javax.sip.address.AddressImpl: void setURI(javax.sip.address.URI)>(r6);

        $r31 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r31.<gov.nist.core.LexerCore: void SPorHT()>();

        $r34 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r34.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(62);

     label02:
        $z2 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z2 == 0 goto label03;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_leave(java.lang.String)>("nameAddr");

     label03:
        return r7;

     label04:
        $r9 = new gov.nist.javax.sip.address.AddressImpl;

        specialinvoke $r9.<gov.nist.javax.sip.address.AddressImpl: void <init>()>();

        r2 = $r9;

        virtualinvoke r2.<gov.nist.javax.sip.address.AddressImpl: void setAddressType(int)>(1);

        $r10 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r10.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 34 goto label08;

        $r25 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        r4 = virtualinvoke $r25.<gov.nist.core.LexerCore: java.lang.String quotedString()>();

        $r23 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r23.<gov.nist.core.LexerCore: void SPorHT()>();

     label05:
        $r12 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r2.<gov.nist.javax.sip.address.AddressImpl: void setDisplayName(java.lang.String)>($r12);

        $r14 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r14.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(60);

        $r16 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: void SPorHT()>();

        $r15 = new gov.nist.javax.sip.parser.URLParser;

        $r18 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $r17 = (gov.nist.javax.sip.parser.Lexer) $r18;

        specialinvoke $r15.<gov.nist.javax.sip.parser.URLParser: void <init>(gov.nist.javax.sip.parser.Lexer)>($r17);

        r5 = virtualinvoke $r15.<gov.nist.javax.sip.parser.URLParser: gov.nist.javax.sip.address.GenericURI uriReference(boolean)>(1);

        $r19 = new gov.nist.javax.sip.address.AddressImpl;

        specialinvoke $r19.<gov.nist.javax.sip.address.AddressImpl: void <init>()>();

        virtualinvoke r2.<gov.nist.javax.sip.address.AddressImpl: void setAddressType(int)>(1);

        virtualinvoke r2.<gov.nist.javax.sip.address.AddressImpl: void setURI(javax.sip.address.URI)>(r5);

        $r21 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r21.<gov.nist.core.LexerCore: void SPorHT()>();

        $r20 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r20.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(62);

     label06:
        $z1 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z1 == 0 goto label07;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_leave(java.lang.String)>("nameAddr");

     label07:
        return r2;

     label08:
        $r11 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        r3 = virtualinvoke $r11.<gov.nist.core.LexerCore: java.lang.String getNextToken(char)>(60);

     label09:
        r4 = r3;

        goto label05;

     label10:
        $r33 := @caughtexception;

        r1 = $r33;

        $z3 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z3 == 0 goto label11;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_leave(java.lang.String)>("nameAddr");

     label11:
        throw r1;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }
}
