public abstract class gov.nist.core.GenericObject extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    protected static final java.lang.String AND;
    protected static final java.lang.String AT;
    protected static final java.lang.String COLON;
    protected static final java.lang.String COMMA;
    protected static final java.lang.String DOT;
    protected static final java.lang.String DOUBLE_QUOTE;
    protected static final java.lang.String EQUALS;
    protected static final java.lang.String GREATER_THAN;
    protected static final java.lang.String HT;
    protected static final java.lang.String LESS_THAN;
    protected static final java.lang.String LPAREN;
    protected static final java.lang.String NEWLINE;
    protected static final java.lang.String PERCENT;
    protected static final java.lang.String POUND;
    protected static final java.lang.String QUESTION;
    protected static final java.lang.String QUOTE;
    protected static final java.lang.String RETURN;
    protected static final java.lang.String RPAREN;
    protected static final java.lang.String SEMICOLON;
    protected static final java.lang.String SLASH;
    protected static final java.lang.String SP;
    protected static final java.lang.String STAR;
    static final java.lang.String[] immutableClassNames;
    protected static final java.util.Set immutableClasses;
    protected int indentation;
    protected gov.nist.core.Match matchExpression;
    protected java.lang.String stringRepresentation;

    static void <clinit>()
    {
        int i0, $i1;
        java.lang.ClassNotFoundException r0, $r12;
        java.util.HashSet $r1;
        java.lang.String[] $r2, $r3, $r7;
        java.lang.StringBuilder $r4, $r6, $r9;
        java.util.Set $r5;
        java.lang.String $r8, $r10;
        java.lang.Class $r11;
        java.lang.RuntimeException $r13;

        <gov.nist.core.GenericObject: java.lang.String STAR> = "*";

        <gov.nist.core.GenericObject: java.lang.String SP> = " ";

        <gov.nist.core.GenericObject: java.lang.String SLASH> = "/";

        <gov.nist.core.GenericObject: java.lang.String SEMICOLON> = ";";

        <gov.nist.core.GenericObject: java.lang.String RPAREN> = ")";

        <gov.nist.core.GenericObject: java.lang.String RETURN> = "\n";

        <gov.nist.core.GenericObject: java.lang.String QUOTE> = "\'";

        <gov.nist.core.GenericObject: java.lang.String QUESTION> = "?";

        <gov.nist.core.GenericObject: java.lang.String POUND> = "#";

        <gov.nist.core.GenericObject: java.lang.String PERCENT> = "%";

        <gov.nist.core.GenericObject: java.lang.String NEWLINE> = "\r\n";

        <gov.nist.core.GenericObject: java.lang.String LPAREN> = "(";

        <gov.nist.core.GenericObject: java.lang.String LESS_THAN> = "<";

        <gov.nist.core.GenericObject: java.lang.String HT> = "\t";

        <gov.nist.core.GenericObject: java.lang.String GREATER_THAN> = ">";

        <gov.nist.core.GenericObject: java.lang.String EQUALS> = "=";

        <gov.nist.core.GenericObject: java.lang.String DOUBLE_QUOTE> = "\"";

        <gov.nist.core.GenericObject: java.lang.String DOT> = ".";

        <gov.nist.core.GenericObject: java.lang.String COMMA> = ",";

        <gov.nist.core.GenericObject: java.lang.String COLON> = ":";

        <gov.nist.core.GenericObject: java.lang.String AT> = "@";

        <gov.nist.core.GenericObject: java.lang.String AND> = "&";

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>(int)>(10);

        <gov.nist.core.GenericObject: java.util.Set immutableClasses> = $r1;

        $r2 = newarray (java.lang.String)[9];

        $r2[0] = "String";

        $r2[1] = "Character";

        $r2[2] = "Boolean";

        $r2[3] = "Byte";

        $r2[4] = "Short";

        $r2[5] = "Integer";

        $r2[6] = "Long";

        $r2[7] = "Float";

        $r2[8] = "Double";

        <gov.nist.core.GenericObject: java.lang.String[] immutableClassNames> = $r2;

        i0 = 0;

     label1:
        $r3 = <gov.nist.core.GenericObject: java.lang.String[] immutableClassNames>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label4;

        $r5 = <gov.nist.core.GenericObject: java.util.Set immutableClasses>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java.lang.");

        $r7 = <gov.nist.core.GenericObject: java.lang.String[] immutableClassNames>;

        $r8 = $r7[i0];

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r10);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r11);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r12 := @caughtexception;

        r0 = $r12;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error", r0);

        throw $r13;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    protected void <init>()
    {
        gov.nist.core.GenericObject r0;

        r0 := @this: gov.nist.core.GenericObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.core.GenericObject: int indentation> = 0;

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = "";

        return;
    }

    public static java.lang.Class getClassFromName(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Exception r1, $r3;
        java.lang.Class r2;

        r0 := @parameter0: java.lang.String;

     label1:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r1);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean isMySubclass(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "gov/nist/core/GenericObject";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }

    public static java.lang.Object makeClone(java.lang.Object)
    {
        java.lang.Object r0, r2, r8;
        java.lang.Class r1, r9, $r11, $r12, $r13, $r19, $r20, $r21, $r22, $r23, $r24, $r27, $r28;
        java.lang.IllegalArgumentException r7, $r45;
        java.util.Set $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.reflect.Method $r14;
        java.lang.Class[] $r15;
        java.lang.Object[] $r16, $r42, $r43;
        gov.nist.core.GenericObjectList $r17;
        gov.nist.core.GenericObject $r18;
        double[] $r25, $r26;
        float[] $r29, $r30;
        int[] $r31, $r36;
        long[] $r32, $r33;
        short[] $r34, $r35;
        byte[] $r37, $r38;
        char[] $r39, $r44;
        boolean[] $r40, $r41;
        java.lang.NoSuchMethodException $r46;
        java.lang.reflect.InvocationTargetException $r47;
        java.lang.NullPointerException $r48;
        java.lang.IllegalAccessException $r49;
        java.lang.SecurityException $r50;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        $r48 = new java.lang.NullPointerException;

        specialinvoke $r48.<java.lang.NullPointerException: void <init>(java.lang.String)>("null obj!");

        throw $r48;

     label01:
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = r0;

        $r10 = <gov.nist.core.GenericObject: java.util.Set immutableClasses>;

        $z0 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label02;

        return r0;

     label02:
        $z1 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label12;

        r9 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $z5 = virtualinvoke r9.<java.lang.Class: boolean isPrimitive()>();

        if $z5 != 0 goto label04;

        $r43 = (java.lang.Object[]) r0;

        $r42 = (java.lang.Object[]) $r43;

        r2 = virtualinvoke $r42.<java.lang.Object: java.lang.Object clone()>();

     label03:
        return r2;

     label04:
        $r20 = <java.lang.Character: java.lang.Class TYPE>;

        if r9 != $r20 goto label06;

        $r39 = (char[]) r0;

        $r44 = (char[]) $r39;

        r2 = virtualinvoke $r44.<java.lang.Object: java.lang.Object clone()>();

     label05:
        $r23 = <java.lang.Byte: java.lang.Class TYPE>;

        if r9 != $r23 goto label07;

        $r38 = (byte[]) r0;

        $r37 = (byte[]) $r38;

        r2 = virtualinvoke $r37.<java.lang.Object: java.lang.Object clone()>();

        goto label03;

     label06:
        $r19 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r9 != $r19 goto label05;

        $r41 = (boolean[]) r0;

        $r40 = (boolean[]) $r41;

        r2 = virtualinvoke $r40.<java.lang.Object: java.lang.Object clone()>();

        goto label05;

     label07:
        $r24 = <java.lang.Short: java.lang.Class TYPE>;

        if r9 != $r24 goto label08;

        $r35 = (short[]) r0;

        $r34 = (short[]) $r35;

        r2 = virtualinvoke $r34.<java.lang.Object: java.lang.Object clone()>();

        goto label03;

     label08:
        $r21 = <java.lang.Integer: java.lang.Class TYPE>;

        if r9 != $r21 goto label09;

        $r31 = (int[]) r0;

        $r36 = (int[]) $r31;

        r2 = virtualinvoke $r36.<java.lang.Object: java.lang.Object clone()>();

        goto label03;

     label09:
        $r22 = <java.lang.Long: java.lang.Class TYPE>;

        if r9 != $r22 goto label10;

        $r32 = (long[]) r0;

        $r33 = (long[]) $r32;

        r2 = virtualinvoke $r33.<java.lang.Object: java.lang.Object clone()>();

        goto label03;

     label10:
        $r27 = <java.lang.Float: java.lang.Class TYPE>;

        if r9 != $r27 goto label11;

        $r30 = (float[]) r0;

        $r29 = (float[]) $r30;

        r2 = virtualinvoke $r29.<java.lang.Object: java.lang.Object clone()>();

        goto label03;

     label11:
        $r28 = <java.lang.Double: java.lang.Class TYPE>;

        if r9 != $r28 goto label03;

        $r25 = (double[]) r0;

        $r26 = (double[]) $r25;

        r2 = virtualinvoke $r26.<java.lang.Object: java.lang.Object clone()>();

        goto label03;

     label12:
        $r11 = class "gov/nist/core/GenericObject";

        $z2 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z2 == 0 goto label13;

        $r18 = (gov.nist.core.GenericObject) r0;

        r2 = virtualinvoke $r18.<gov.nist.core.GenericObject: java.lang.Object clone()>();

        goto label03;

     label13:
        $r12 = class "gov/nist/core/GenericObjectList";

        $z3 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z3 == 0 goto label14;

        $r17 = (gov.nist.core.GenericObjectList) r0;

        r2 = virtualinvoke $r17.<gov.nist.core.GenericObjectList: java.lang.Object clone()>();

        goto label03;

     label14:
        $r13 = class "java/lang/Cloneable";

        $z4 = virtualinvoke $r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z4 == 0 goto label03;

     label15:
        $r15 = (java.lang.Class[]) null;

        $r14 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", $r15);

        $r16 = (java.lang.Object[]) null;

        r8 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r16);

     label16:
        r2 = r8;

        goto label03;

     label17:
        $r45 := @caughtexception;

        r7 = $r45;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r7);

        goto label03;

     label18:
        $r46 := @caughtexception;

        goto label03;

     label19:
        $r47 := @caughtexception;

        goto label03;

     label20:
        $r49 := @caughtexception;

        goto label03;

     label21:
        $r50 := @caughtexception;

        goto label03;

        catch java.lang.SecurityException from label15 to label16 with label21;
        catch java.lang.IllegalArgumentException from label15 to label16 with label17;
        catch java.lang.IllegalAccessException from label15 to label16 with label20;
        catch java.lang.reflect.InvocationTargetException from label15 to label16 with label19;
        catch java.lang.NoSuchMethodException from label15 to label16 with label18;
    }

    public java.lang.Object clone()
    {
        gov.nist.core.GenericObject r0;
        java.lang.Object r2;
        java.lang.CloneNotSupportedException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: gov.nist.core.GenericObject;

     label1:
        r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error");

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    protected void dbgPrint()
    {
        gov.nist.core.GenericObject r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        $r1 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String debugDump()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>($r1);

        return;
    }

    protected void dbgPrint(java.lang.String)
    {
        gov.nist.core.GenericObject r0;
        java.lang.String r1;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>(r1);

        return;
    }

    public java.lang.String debugDump()
    {
        gov.nist.core.GenericObject r0, $r40;
        java.lang.Class r1, r4, $r15, $r16, $r26;
        java.lang.reflect.Field[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18;
        java.lang.reflect.Field r3;
        java.lang.String r5, r8, $r9, $r10, $r13, $r21, $r23, $r24, $r27, $r30, $r38, $r39, $r41;
        java.lang.Exception r6, $r46;
        java.lang.StringBuilder $r11, $r12, $r14, $r18, $r19, $r20, $r28, $r32, $r33, $r42, $r43, $r44;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r17, $r22, $r25, $r29, $r31, $r35, $r36, $r37;
        gov.nist.core.GenericObjectList $r34;
        float $f0;
        short $s17;
        java.lang.IllegalAccessException $r45;
        double $d0;
        long $l19;
        char $c20;

        r0 := @this: gov.nist.core.GenericObject;

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = "";

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r9);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("{");

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = 0;

     label01:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label35;

        r3 = r2[i0];

        $i3 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $i2 = 2 & $i3;

        if $i2 != 2 goto label03;

     label02:
        i0 = i0 + 1;

        goto label01;

     label03:
        r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        r5 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $i5 = virtualinvoke r5.<java.lang.String: int compareTo(java.lang.String)>("stringRepresentation");

        if $i5 == 0 goto label02;

        $i4 = virtualinvoke r5.<java.lang.String: int compareTo(java.lang.String)>("indentation");

        if $i4 == 0 goto label02;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r13);

     label04:
        $z0 = virtualinvoke r4.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label19;

        r8 = virtualinvoke r4.<java.lang.Class: java.lang.String toString()>();

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r41);

        $i13 = virtualinvoke r8.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i13 != 0 goto label06;

        $i18 = virtualinvoke r3.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(int)>($i18);

     label05:
        goto label02;

     label06:
        $i14 = virtualinvoke r8.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i14 != 0 goto label09;

        $s17 = virtualinvoke r3.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(short)>($s17);

     label07:
        goto label02;

     label08:
        $r46 := @caughtexception;

        r6 = $r46;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r6);

        goto label02;

     label09:
        $i15 = virtualinvoke r8.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i15 != 0 goto label11;

        $c20 = virtualinvoke r3.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(char)>($c20);

     label10:
        goto label02;

     label11:
        $i16 = virtualinvoke r8.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i16 != 0 goto label13;

        $l19 = virtualinvoke r3.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(long)>($l19);

     label12:
        goto label02;

     label13:
        $i10 = virtualinvoke r8.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i10 != 0 goto label15;

        $z3 = virtualinvoke r3.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(boolean)>($z3);

     label14:
        goto label02;

     label15:
        $i11 = virtualinvoke r8.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i11 != 0 goto label17;

        $d0 = virtualinvoke r3.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(double)>($d0);

     label16:
        goto label02;

     label17:
        $i12 = virtualinvoke r8.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i12 != 0 goto label02;

        $f0 = virtualinvoke r3.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(float)>($f0);

     label18:
        goto label02;

     label19:
        $r15 = class "gov/nist/core/GenericObject";

        $z1 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z1 == 0 goto label23;

        $r37 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r37 == null goto label21;

        $r36 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r40 = (gov.nist.core.GenericObject) $r36;

        $i8 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i9 = 1 + $i8;

        $r39 = virtualinvoke $r40.<gov.nist.core.GenericObject: java.lang.String debugDump(int)>($i9);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r39);

     label20:
        goto label02;

     label21:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("<null>");

     label22:
        goto label02;

     label23:
        $r16 = class "gov/nist/core/GenericObjectList";

        $z2 = virtualinvoke $r16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z2 == 0 goto label27;

        $r31 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r31 == null goto label25;

        $r35 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r34 = (gov.nist.core.GenericObjectList) $r35;

        $i7 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i6 = 1 + $i7;

        $r38 = virtualinvoke $r34.<gov.nist.core.GenericObjectList: java.lang.String debugDump(int)>($i6);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r38);

     label24:
        goto label02;

     label25:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("<null>");

     label26:
        goto label02;

     label27:
        $r17 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r17 == null goto label31;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r26 = virtualinvoke $r29.<java.lang.Object: java.lang.Class getClass()>();

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.String getName()>();

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r30);

     label28:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("{");

        $r25 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r25 == null goto label33;

        $r22 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r23);

     label29:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("}");

     label30:
        goto label02;

     label31:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r24);

     label32:
        goto label28;

     label33:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("<null>");

     label34:
        goto label29;

     label35:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("}");

        $r10 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        return $r10;

     label36:
        $r45 := @caughtexception;

        goto label02;

        catch java.lang.IllegalAccessException from label04 to label05 with label36;
        catch java.lang.Exception from label04 to label05 with label08;
        catch java.lang.IllegalAccessException from label06 to label07 with label36;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.IllegalAccessException from label09 to label10 with label36;
        catch java.lang.Exception from label09 to label10 with label08;
        catch java.lang.IllegalAccessException from label11 to label12 with label36;
        catch java.lang.Exception from label11 to label12 with label08;
        catch java.lang.IllegalAccessException from label13 to label14 with label36;
        catch java.lang.Exception from label13 to label14 with label08;
        catch java.lang.IllegalAccessException from label15 to label16 with label36;
        catch java.lang.Exception from label15 to label16 with label08;
        catch java.lang.IllegalAccessException from label17 to label18 with label36;
        catch java.lang.Exception from label17 to label18 with label08;
        catch java.lang.IllegalAccessException from label19 to label20 with label36;
        catch java.lang.Exception from label19 to label20 with label08;
        catch java.lang.IllegalAccessException from label21 to label22 with label36;
        catch java.lang.Exception from label21 to label22 with label08;
        catch java.lang.IllegalAccessException from label23 to label24 with label36;
        catch java.lang.Exception from label23 to label24 with label08;
        catch java.lang.IllegalAccessException from label25 to label26 with label36;
        catch java.lang.Exception from label25 to label26 with label08;
        catch java.lang.IllegalAccessException from label27 to label28 with label36;
        catch java.lang.Exception from label27 to label28 with label08;
        catch java.lang.IllegalAccessException from label28 to label29 with label36;
        catch java.lang.Exception from label28 to label29 with label08;
        catch java.lang.IllegalAccessException from label29 to label30 with label36;
        catch java.lang.Exception from label29 to label30 with label08;
        catch java.lang.IllegalAccessException from label31 to label32 with label36;
        catch java.lang.Exception from label31 to label32 with label08;
        catch java.lang.IllegalAccessException from label33 to label34 with label36;
        catch java.lang.Exception from label33 to label34 with label08;
    }

    public java.lang.String debugDump(int)
    {
        gov.nist.core.GenericObject r0;
        int i0;
        java.lang.String r1;

        r0 := @this: gov.nist.core.GenericObject;

        i0 := @parameter0: int;

        r0.<gov.nist.core.GenericObject: int indentation> = i0;

        r1 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String debugDump()>();

        r0.<gov.nist.core.GenericObject: int indentation> = 0;

        return r1;
    }

    public abstract java.lang.String encode();

    public java.lang.StringBuffer encode(java.lang.StringBuffer)
    {
        gov.nist.core.GenericObject r0;
        java.lang.StringBuffer r1, $r3;
        java.lang.String $r2;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.StringBuffer;

        $r2 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String encode()>();

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        gov.nist.core.GenericObject r0;
        java.lang.Object r1, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.lang.Class r2, r3, r8, $r12, $r13;
        java.lang.reflect.Field[] r4, r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i22, $i23;
        java.lang.reflect.Field r6, r7;
        java.lang.String r9, r11;
        java.lang.IllegalAccessException r10, $r22;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        float $f0, $f1;
        byte $b13, $b14, $b20;
        double $d0, $d1;
        long $l15, $l16;
        short $s17, $s21;
        char $c18, $c19;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        return 0;

     label01:
        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r13);

        if $z1 != 0 goto label02;

        return 0;

     label02:
        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        r4 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        r5 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = 0;

     label04:
        $i1 = lengthof r4;

        if i0 >= $i1 goto label32;

        r6 = r4[i0];

        r7 = r5[i0];

        $i3 = virtualinvoke r6.<java.lang.reflect.Field: int getModifiers()>();

        $i2 = 2 & $i3;

        if $i2 != 2 goto label06;

     label05:
        i0 = i0 + 1;

        goto label04;

     label06:
        r8 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Class getType()>();

        r9 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $i5 = virtualinvoke r9.<java.lang.String: int compareTo(java.lang.String)>("stringRepresentation");

        if $i5 == 0 goto label05;

        $i4 = virtualinvoke r9.<java.lang.String: int compareTo(java.lang.String)>("indentation");

        if $i4 == 0 goto label05;

     label07:
        $z3 = virtualinvoke r8.<java.lang.Class: boolean isPrimitive()>();

        if $z3 == 0 goto label21;

        r11 = virtualinvoke r8.<java.lang.Class: java.lang.String toString()>();

        $i6 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i6 != 0 goto label09;

        $i22 = virtualinvoke r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r0);

        $i23 = virtualinvoke r7.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r1);

        if $i22 == $i23 goto label05;

     label08:
        return 0;

     label09:
        $i9 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i9 != 0 goto label11;

        $s17 = virtualinvoke r6.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r0);

        $s21 = virtualinvoke r7.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r1);

        if $s17 == $s21 goto label05;

     label10:
        return 0;

     label11:
        $i10 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i10 != 0 goto label13;

        $c19 = virtualinvoke r6.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r0);

        $c18 = virtualinvoke r7.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r1);

        if $c19 == $c18 goto label05;

     label12:
        return 0;

     label13:
        $i7 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i7 != 0 goto label15;

        $l16 = virtualinvoke r6.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r0);

        $l15 = virtualinvoke r7.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r1);

        $b20 = $l16 cmp $l15;

        if $b20 == 0 goto label05;

     label14:
        return 0;

     label15:
        $i8 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i8 != 0 goto label17;

        $z5 = virtualinvoke r6.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r0);

        $z4 = virtualinvoke r7.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r1);

        if $z5 == $z4 goto label05;

     label16:
        return 0;

     label17:
        $i12 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i12 != 0 goto label19;

        $d1 = virtualinvoke r6.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r0);

        $d0 = virtualinvoke r7.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r1);

        $b13 = $d1 cmpl $d0;

        if $b13 == 0 goto label05;

     label18:
        return 0;

     label19:
        $i11 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i11 != 0 goto label05;

        $f1 = virtualinvoke r6.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r0);

        $f0 = virtualinvoke r7.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r1);

        $b14 = $f1 cmpl $f0;

        if $b14 == 0 goto label05;

     label20:
        return 0;

     label21:
        $r16 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $r14 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r16 != $r14 goto label23;

     label22:
        return 1;

     label23:
        $r15 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r15 != null goto label25;

     label24:
        return 0;

     label25:
        $r19 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        if $r19 != null goto label27;

     label26:
        return 0;

     label27:
        $r20 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        if $r20 != null goto label29;

        $r21 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r21 == null goto label29;

     label28:
        return 0;

     label29:
        $r17 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r18 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        z0 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>($r18);

     label30:
        if z0 != 0 goto label05;

        return 0;

     label31:
        $r22 := @caughtexception;

        r10 = $r22;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r10);

        goto label05;

     label32:
        $z2 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "gov/nist/core/GenericObject");

        if $z2 == 0 goto label33;

        return 1;

     label33:
        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label03;

        catch java.lang.IllegalAccessException from label07 to label08 with label31;
        catch java.lang.IllegalAccessException from label09 to label10 with label31;
        catch java.lang.IllegalAccessException from label11 to label12 with label31;
        catch java.lang.IllegalAccessException from label13 to label14 with label31;
        catch java.lang.IllegalAccessException from label15 to label16 with label31;
        catch java.lang.IllegalAccessException from label17 to label18 with label31;
        catch java.lang.IllegalAccessException from label19 to label20 with label31;
        catch java.lang.IllegalAccessException from label21 to label22 with label31;
        catch java.lang.IllegalAccessException from label23 to label24 with label31;
        catch java.lang.IllegalAccessException from label25 to label26 with label31;
        catch java.lang.IllegalAccessException from label27 to label28 with label31;
        catch java.lang.IllegalAccessException from label29 to label30 with label31;
    }

    protected java.lang.String getIndentation()
    {
        gov.nist.core.GenericObject r0;
        char[] r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: gov.nist.core.GenericObject;

        $i0 = r0.<gov.nist.core.GenericObject: int indentation>;

        r1 = newarray (char)[$i0];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r1, 32);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public gov.nist.core.Match getMatcher()
    {
        gov.nist.core.GenericObject r0;
        gov.nist.core.Match $r1;

        r0 := @this: gov.nist.core.GenericObject;

        $r1 = r0.<gov.nist.core.GenericObject: gov.nist.core.Match matchExpression>;

        return $r1;
    }

    public boolean match(java.lang.Object)
    {
        gov.nist.core.GenericObject r0, r2, $r21;
        java.lang.Object r1, r10, r11;
        java.lang.reflect.Field[] r3, r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i23, $i24;
        java.lang.reflect.Field r5, r6;
        java.lang.Class r7, $r13, $r14, $r15, $r16, $r17, $r19;
        java.lang.String r8, r12, $r20, $r22, $r23, $r24;
        java.lang.IllegalAccessException r9, $r25;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        gov.nist.core.GenericObjectList $r18;
        byte $b13, $b15, $b22;
        float $f0, $f1;
        double $d0, $d1;
        char $c16, $c17;
        short $s18, $s19;
        long $l20, $l21;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        return 1;

     label01:
        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>($r14);

        if $z1 != 0 goto label02;

        return 0;

     label02:
        r2 = (gov.nist.core.GenericObject) r1;

        $r15 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $r16 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r4 = virtualinvoke $r16.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = 0;

     label03:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label29;

        r5 = r3[i0];

        r6 = r4[i0];

        $i3 = virtualinvoke r5.<java.lang.reflect.Field: int getModifiers()>();

        $i2 = 2 & $i3;

        if $i2 != 2 goto label05;

     label04:
        i0 = i0 + 1;

        goto label03;

     label05:
        r7 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.Class getType()>();

        r8 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $i5 = virtualinvoke r8.<java.lang.String: int compareTo(java.lang.String)>("stringRepresentation");

        if $i5 == 0 goto label04;

        $i4 = virtualinvoke r8.<java.lang.String: int compareTo(java.lang.String)>("indentation");

        if $i4 == 0 goto label04;

     label06:
        $z2 = virtualinvoke r7.<java.lang.Class: boolean isPrimitive()>();

        if $z2 == 0 goto label20;

        r12 = virtualinvoke r7.<java.lang.Class: java.lang.String toString()>();

        $i7 = virtualinvoke r12.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i7 != 0 goto label08;

        $i23 = virtualinvoke r5.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r0);

        $i24 = virtualinvoke r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r2);

        if $i23 == $i24 goto label04;

     label07:
        return 0;

     label08:
        $i6 = virtualinvoke r12.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i6 != 0 goto label10;

        $s18 = virtualinvoke r5.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r0);

        $s19 = virtualinvoke r6.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r2);

        if $s18 == $s19 goto label04;

     label09:
        return 0;

     label10:
        $i12 = virtualinvoke r12.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i12 != 0 goto label12;

        $c16 = virtualinvoke r5.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r0);

        $c17 = virtualinvoke r6.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r2);

        if $c16 == $c17 goto label04;

     label11:
        return 0;

     label12:
        $i11 = virtualinvoke r12.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i11 != 0 goto label14;

        $l20 = virtualinvoke r5.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r0);

        $l21 = virtualinvoke r6.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r2);

        $b22 = $l20 cmp $l21;

        if $b22 == 0 goto label04;

     label13:
        return 0;

     label14:
        $i10 = virtualinvoke r12.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i10 != 0 goto label16;

        $z9 = virtualinvoke r5.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r0);

        $z10 = virtualinvoke r6.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r2);

        if $z9 == $z10 goto label04;

     label15:
        return 0;

     label16:
        $i9 = virtualinvoke r12.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i9 != 0 goto label18;

        $d1 = virtualinvoke r5.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r0);

        $d0 = virtualinvoke r6.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r2);

        $b15 = $d1 cmpl $d0;

        if $b15 == 0 goto label04;

     label17:
        return 0;

     label18:
        $i14 = virtualinvoke r12.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i14 != 0 goto label04;

        $f1 = virtualinvoke r5.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r0);

        $f0 = virtualinvoke r6.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r2);

        $b13 = $f1 cmpl $f0;

        if $b13 == 0 goto label04;

     label19:
        return 0;

     label20:
        r10 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        r11 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r2);

     label21:
        if r11 == null goto label30;

        if r10 != null goto label30;

        return 0;

     label22:
        $z4 = r11 instanceof java.lang.String;

        if $z4 == 0 goto label24;

        $z6 = r10 instanceof java.lang.String;

        if $z6 == 0 goto label24;

        $r20 = (java.lang.String) r11;

        $r24 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>();

        $z8 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z8 != 0 goto label04;

        $r23 = (java.lang.String) r10;

        $r22 = (java.lang.String) r11;

        $i8 = virtualinvoke $r23.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r22);

        if $i8 == 0 goto label04;

     label23:
        return 0;

     label24:
        $r17 = virtualinvoke r10.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = staticinvoke <gov.nist.core.GenericObject: boolean isMySubclass(java.lang.Class)>($r17);

        if $z3 == 0 goto label26;

        $r21 = (gov.nist.core.GenericObject) r10;

        $z7 = virtualinvoke $r21.<gov.nist.core.GenericObject: boolean match(java.lang.Object)>(r11);

        if $z7 != 0 goto label26;

     label25:
        return 0;

     label26:
        $r19 = virtualinvoke r10.<java.lang.Object: java.lang.Class getClass()>();

        $z5 = staticinvoke <gov.nist.core.GenericObjectList: boolean isMySubclass(java.lang.Class)>($r19);

        if $z5 == 0 goto label04;

        $r18 = (gov.nist.core.GenericObjectList) r10;

        z0 = virtualinvoke $r18.<gov.nist.core.GenericObjectList: boolean match(java.lang.Object)>(r11);

     label27:
        if z0 != 0 goto label04;

        return 0;

     label28:
        $r25 := @caughtexception;

        r9 = $r25;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r9);

        goto label04;

     label29:
        return 1;

     label30:
        if r11 != null goto label31;

        if r10 != null goto label04;

     label31:
        if r11 != null goto label22;

        if r10 == null goto label04;

        goto label22;

        catch java.lang.IllegalAccessException from label06 to label07 with label28;
        catch java.lang.IllegalAccessException from label08 to label09 with label28;
        catch java.lang.IllegalAccessException from label10 to label11 with label28;
        catch java.lang.IllegalAccessException from label12 to label13 with label28;
        catch java.lang.IllegalAccessException from label14 to label15 with label28;
        catch java.lang.IllegalAccessException from label16 to label17 with label28;
        catch java.lang.IllegalAccessException from label18 to label19 with label28;
        catch java.lang.IllegalAccessException from label20 to label21 with label28;
        catch java.lang.IllegalAccessException from label22 to label23 with label28;
        catch java.lang.IllegalAccessException from label24 to label25 with label28;
        catch java.lang.IllegalAccessException from label26 to label27 with label28;
    }

    public void merge(java.lang.Object)
    {
        gov.nist.core.GenericObject r0, $r12;
        java.lang.Object r1, r8, r9;
        java.lang.Class r2, r5, $r10, $r11;
        java.lang.reflect.Field[] r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i13;
        java.lang.reflect.Field r4;
        java.lang.String r6;
        java.lang.IllegalAccessException r7, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        float $f0;
        double $d0;
        char $c10;
        short $s11;
        long $l12;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        return;

     label01:
        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label02;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad override object");

        throw $r14;

     label02:
        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = 0;

     label04:
        $i2 = lengthof r3;

        if i0 >= $i2 goto label30;

        r4 = r3[i0];

        i1 = virtualinvoke r4.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i1);

        if $z2 == 0 goto label06;

     label05:
        i0 = i0 + 1;

        goto label04;

     label06:
        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i1);

        if $z4 != 0 goto label05;

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isInterface(int)>(i1);

        if $z3 != 0 goto label05;

        r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        r6 = virtualinvoke r5.<java.lang.Class: java.lang.String toString()>();

     label07:
        $z5 = virtualinvoke r5.<java.lang.Class: boolean isPrimitive()>();

        if $z5 == 0 goto label22;

        $i3 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i3 != 0 goto label10;

        $i13 = virtualinvoke r4.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setInt(java.lang.Object,int)>(r0, $i13);

     label08:
        goto label05;

     label09:
        $r13 := @caughtexception;

        r7 = $r13;

        virtualinvoke r7.<java.lang.IllegalAccessException: void printStackTrace()>();

        goto label05;

     label10:
        $i6 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i6 != 0 goto label12;

        $s11 = virtualinvoke r4.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setShort(java.lang.Object,short)>(r0, $s11);

     label11:
        goto label05;

     label12:
        $i7 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i7 != 0 goto label14;

        $c10 = virtualinvoke r4.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setChar(java.lang.Object,char)>(r0, $c10);

     label13:
        goto label05;

     label14:
        $i4 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i4 != 0 goto label16;

        $l12 = virtualinvoke r4.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setLong(java.lang.Object,long)>(r0, $l12);

     label15:
        goto label05;

     label16:
        $i5 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i5 != 0 goto label18;

        $z7 = virtualinvoke r4.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>(r0, $z7);

     label17:
        goto label05;

     label18:
        $i8 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i8 != 0 goto label20;

        $d0 = virtualinvoke r4.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>(r0, $d0);

     label19:
        goto label05;

     label20:
        $i9 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i9 != 0 goto label05;

        $f0 = virtualinvoke r4.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>(r0, $f0);

     label21:
        goto label05;

     label22:
        r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        r9 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

     label23:
        if r9 == null goto label05;

        if r8 != null goto label26;

     label24:
        virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r9);

     label25:
        goto label05;

     label26:
        $z6 = r8 instanceof gov.nist.core.GenericObject;

        if $z6 == 0 goto label28;

        $r12 = (gov.nist.core.GenericObject) r8;

        virtualinvoke $r12.<gov.nist.core.GenericObject: void merge(java.lang.Object)>(r9);

     label27:
        goto label05;

     label28:
        virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r9);

     label29:
        goto label05;

     label30:
        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "gov/nist/core/GenericObject");

        if $z1 == 0 goto label03;

        return;

        catch java.lang.IllegalAccessException from label07 to label08 with label09;
        catch java.lang.IllegalAccessException from label10 to label11 with label09;
        catch java.lang.IllegalAccessException from label12 to label13 with label09;
        catch java.lang.IllegalAccessException from label14 to label15 with label09;
        catch java.lang.IllegalAccessException from label16 to label17 with label09;
        catch java.lang.IllegalAccessException from label18 to label19 with label09;
        catch java.lang.IllegalAccessException from label20 to label21 with label09;
        catch java.lang.IllegalAccessException from label22 to label23 with label09;
        catch java.lang.IllegalAccessException from label24 to label25 with label09;
        catch java.lang.IllegalAccessException from label26 to label27 with label09;
        catch java.lang.IllegalAccessException from label28 to label29 with label09;
    }

    public void setMatcher(gov.nist.core.Match)
    {
        gov.nist.core.GenericObject r0;
        gov.nist.core.Match r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: gov.nist.core.Match;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null arg!");

        throw $r2;

     label1:
        r0.<gov.nist.core.GenericObject: gov.nist.core.Match matchExpression> = r1;

        return;
    }

    protected void sprint(char)
    {
        gov.nist.core.GenericObject r0;
        char c0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(double)
    {
        gov.nist.core.GenericObject r0;
        double d0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(float)
    {
        gov.nist.core.GenericObject r0;
        float f0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        f0 := @parameter0: float;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(int)
    {
        gov.nist.core.GenericObject r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(long)
    {
        gov.nist.core.GenericObject r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(java.lang.Object)
    {
        gov.nist.core.GenericObject r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r2);

        return;
    }

    protected void sprint(java.lang.String)
    {
        gov.nist.core.GenericObject r0;
        java.lang.String r1, $r3, $r5, $r7, $r9, $r12, $r13, $r17, $r18, $r20, $r22, $r27, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.StringBuilder $r2, $r4, $r6, $r8, $r10, $r11, $r14, $r15, $r16, $r19, $r21, $r23, $r24, $r25, $r26;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label2;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String getIndentation()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r22;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<null>\n");

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r28;

     label1:
        return;

     label2:
        $i0 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("}");

        if $i0 == 0 goto label3;

        $i6 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("]");

        if $i6 != 0 goto label4;

     label3:
        $i1 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i2 = -1 + $i1;

        r0.<gov.nist.core.GenericObject: int indentation> = $i2;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String getIndentation()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r12;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r17;

        $i3 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("{");

        if $i3 == 0 goto label5;

        $i7 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("[");

        if $i7 != 0 goto label1;

     label5:
        $i5 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i4 = 1 + $i5;

        r0.<gov.nist.core.GenericObject: int indentation> = $i4;

        return;
    }

    protected void sprint(short)
    {
        gov.nist.core.GenericObject r0;
        short s0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        s0 := @parameter0: short;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(s0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(boolean)
    {
        gov.nist.core.GenericObject r0;
        boolean z0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }
}
