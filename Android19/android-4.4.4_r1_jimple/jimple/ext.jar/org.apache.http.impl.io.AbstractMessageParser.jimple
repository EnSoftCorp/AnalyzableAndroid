public abstract class org.apache.http.impl.io.AbstractMessageParser extends java.lang.Object implements org.apache.http.io.HttpMessageParser
{
    protected final org.apache.http.message.LineParser lineParser;
    private final int maxHeaderCount;
    private final int maxLineLen;
    private final org.apache.http.io.SessionInputBuffer sessionBuffer;

    public void <init>(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.io.AbstractMessageParser r0;
        org.apache.http.io.SessionInputBuffer r1;
        org.apache.http.message.LineParser r2;
        org.apache.http.params.HttpParams r3;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r4, $r5;

        r0 := @this: org.apache.http.impl.io.AbstractMessageParser;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        r2 := @parameter1: org.apache.http.message.LineParser;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r5;

     label1:
        if r3 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r4;

     label2:
        r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer> = r1;

        $i0 = interfaceinvoke r3.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-header-count", -1);

        r0.<org.apache.http.impl.io.AbstractMessageParser: int maxHeaderCount> = $i0;

        $i1 = interfaceinvoke r3.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-line-length", -1);

        r0.<org.apache.http.impl.io.AbstractMessageParser: int maxLineLen> = $i1;

        if r2 == null goto label4;

     label3:
        r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.message.LineParser lineParser> = r2;

        return;

     label4:
        r2 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

        goto label3;
    }

    public static org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer, int, int, org.apache.http.message.LineParser) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.io.SessionInputBuffer r0;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        org.apache.http.message.LineParser r1;
        java.util.ArrayList r2, $r8;
        org.apache.http.util.CharArrayBuffer r3, r4, r6, $r15;
        org.apache.http.Header[] r5;
        org.apache.http.ParseException r7, $r14;
        char c4, $c8, $c19;
        org.apache.http.Header $r9;
        java.lang.Object $r10;
        java.io.IOException $r11, $r12;
        java.lang.IllegalArgumentException $r13;
        org.apache.http.ProtocolException $r16;
        java.lang.String $r17;

        r0 := @parameter0: org.apache.http.io.SessionInputBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: org.apache.http.message.LineParser;

        if r0 != null goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r13;

     label01:
        if r1 != null goto label02;

        r1 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label02:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

        r3 = null;

        r4 = null;

     label03:
        if r3 != null goto label09;

        $r15 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r15.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(64);

        r3 = $r15;

     label04:
        $i5 = interfaceinvoke r0.<org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>(r3);

        if $i5 == -1 goto label05;

        $i9 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i9 >= 1 goto label10;

     label05:
        $i7 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        r5 = newarray (org.apache.http.Header)[$i7];

        i2 = 0;

     label06:
        $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if i2 >= $i6 goto label19;

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r6 = (org.apache.http.util.CharArrayBuffer) $r10;

     label07:
        $r9 = interfaceinvoke r1.<org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>(r6);

        r5[i2] = $r9;

     label08:
        i2 = i2 + 1;

        goto label06;

     label09:
        virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: void clear()>();

        goto label04;

     label10:
        $c8 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(0);

        if $c8 == 32 goto label11;

        $c19 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(0);

        if $c19 != 9 goto label17;

     label11:
        if r4 == null goto label17;

        i3 = 0;

     label12:
        $i11 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i3 >= $i11 goto label13;

        c4 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i3);

        if c4 == 32 goto label14;

        if c4 == 9 goto label14;

     label13:
        if i1 <= 0 goto label15;

        $i14 = virtualinvoke r4.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i16 = 1 + $i14;

        $i15 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i17 = $i16 + $i15;

        $i18 = $i17 - i3;

        if $i18 <= i1 goto label15;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Maximum line length limit exceeded");

        throw $r12;

     label14:
        i3 = i3 + 1;

        goto label12;

     label15:
        virtualinvoke r4.<org.apache.http.util.CharArrayBuffer: void append(char)>(32);

        $i13 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i12 = $i13 - i3;

        virtualinvoke r4.<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)>(r3, i3, $i12);

     label16:
        if i0 <= 0 goto label03;

        $i10 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i10 < i0 goto label03;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Maximum header count exceeded");

        throw $r11;

     label17:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        r4 = r3;

        r3 = null;

        goto label16;

     label18:
        $r14 := @caughtexception;

        r7 = $r14;

        $r16 = new org.apache.http.ProtocolException;

        $r17 = virtualinvoke r7.<org.apache.http.ParseException: java.lang.String getMessage()>();

        specialinvoke $r16.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label19:
        return r5;

        catch org.apache.http.ParseException from label07 to label08 with label18;
    }

    public org.apache.http.HttpMessage parse() throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.impl.io.AbstractMessageParser r0;
        org.apache.http.ParseException r1, $r7;
        org.apache.http.HttpMessage r2;
        org.apache.http.io.SessionInputBuffer $r3, $r5;
        org.apache.http.message.LineParser $r4;
        int $i0, $i1;
        org.apache.http.Header[] $r6;
        org.apache.http.ProtocolException $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.http.impl.io.AbstractMessageParser;

     label1:
        $r3 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer>;

        r2 = virtualinvoke r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)>($r3);

     label2:
        $r5 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer>;

        $i1 = r0.<org.apache.http.impl.io.AbstractMessageParser: int maxHeaderCount>;

        $i0 = r0.<org.apache.http.impl.io.AbstractMessageParser: int maxLineLen>;

        $r4 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.message.LineParser lineParser>;

        $r6 = staticinvoke <org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)>($r5, $i1, $i0, $r4);

        interfaceinvoke r2.<org.apache.http.HttpMessage: void setHeaders(org.apache.http.Header[])>($r6);

        return r2;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new org.apache.http.ProtocolException;

        $r9 = virtualinvoke r1.<org.apache.http.ParseException: java.lang.String getMessage()>();

        specialinvoke $r8.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r9, r1);

        throw $r8;

        catch org.apache.http.ParseException from label1 to label2 with label3;
    }

    protected abstract org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws java.io.IOException, org.apache.http.HttpException, org.apache.http.ParseException;
}
