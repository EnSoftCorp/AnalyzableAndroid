public class gov.nist.javax.sip.parser.extensions.MinSEParser extends gov.nist.javax.sip.parser.ParametersParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.extensions.MinSEParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.extensions.MinSEParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.extensions.MinSEParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.extensions.MinSEParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public static void main(java.lang.String[]) throws java.text.ParseException
    {
        java.lang.String[] r0, r1, $r3;
        int i0, $i1, $i2;
        gov.nist.javax.sip.header.extensions.MinSE r2;
        gov.nist.javax.sip.parser.extensions.MinSEParser $r4;
        java.lang.String $r5, $r10, $r12, $r17, $r18, $r21, $r23;
        gov.nist.javax.sip.header.SIPHeader $r6;
        java.lang.StringBuilder $r7, $r9, $r11, $r13, $r14, $r16, $r20, $r22, $r24;
        java.io.PrintStream $r8, $r15, $r19;

        r0 := @parameter0: java.lang.String[];

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "Min-SE: 30\n";

        $r3[1] = "Min-SE: 45;some-param=somevalue\n";

        r1 = $r3;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        $r4 = new gov.nist.javax.sip.parser.extensions.MinSEParser;

        $r5 = r1[i0];

        specialinvoke $r4.<gov.nist.javax.sip.parser.extensions.MinSEParser: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<gov.nist.javax.sip.parser.extensions.MinSEParser: gov.nist.javax.sip.header.SIPHeader parse()>();

        r2 = (gov.nist.javax.sip.header.extensions.MinSE) $r6;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encoded = ");

        $r10 = virtualinvoke r2.<gov.nist.javax.sip.header.extensions.MinSE: java.lang.String encode()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\ntime=");

        $i2 = virtualinvoke r2.<gov.nist.javax.sip.header.extensions.MinSE: int getExpires()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r18);

        $r17 = virtualinvoke r2.<gov.nist.javax.sip.header.extensions.MinSE: java.lang.String getParameter(java.lang.String)>("some-param");

        if $r17 == null goto label2;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("some-param=");

        $r21 = virtualinvoke r2.<gov.nist.javax.sip.header.extensions.MinSE: java.lang.String getParameter(java.lang.String)>("some-param");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r23);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.extensions.MinSEParser r0;
        gov.nist.javax.sip.header.extensions.MinSE r1, $r6;
        java.lang.Throwable r2, $r14;
        java.lang.String r3, $r10;
        javax.sip.InvalidArgumentException r4, $r9;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r7, $r8;
        int $i0;
        java.text.ParseException $r11, $r12;
        java.lang.NumberFormatException $r13;

        r0 := @this: gov.nist.javax.sip.parser.extensions.MinSEParser;

        $r6 = new gov.nist.javax.sip.header.extensions.MinSE;

        specialinvoke $r6.<gov.nist.javax.sip.header.extensions.MinSE: void <init>()>();

        r1 = $r6;

        $z0 = <gov.nist.javax.sip.parser.extensions.MinSEParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: void dbg_enter(java.lang.String)>("parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: void headerName(int)>(2134);

        $r7 = r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: gov.nist.core.LexerCore lexer>;

        r3 = virtualinvoke $r7.<gov.nist.core.LexerCore: java.lang.String getNextId()>();

     label02:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

        virtualinvoke r1.<gov.nist.javax.sip.header.extensions.MinSE: void setExpires(int)>($i0);

     label03:
        $r8 = r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: void SPorHT()>();

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r1);

     label04:
        $z1 = <gov.nist.javax.sip.parser.extensions.MinSEParser: boolean debug>;

        if $z1 == 0 goto label05;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: void dbg_leave(java.lang.String)>("parse");

     label05:
        return r1;

     label06:
        $r13 := @caughtexception;

     label07:
        $r12 = virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: java.text.ParseException createParseException(java.lang.String)>("bad integer format");

        throw $r12;

     label08:
        $r14 := @caughtexception;

        r2 = $r14;

        $z2 = <gov.nist.javax.sip.parser.extensions.MinSEParser: boolean debug>;

        if $z2 == 0 goto label09;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: void dbg_leave(java.lang.String)>("parse");

     label09:
        throw r2;

     label10:
        $r9 := @caughtexception;

        r4 = $r9;

     label11:
        $r10 = virtualinvoke r4.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r11 = virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: java.text.ParseException createParseException(java.lang.String)>($r10);

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.NumberFormatException from label02 to label03 with label06;
        catch javax.sip.InvalidArgumentException from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label11 to label12 with label08;
    }
}
