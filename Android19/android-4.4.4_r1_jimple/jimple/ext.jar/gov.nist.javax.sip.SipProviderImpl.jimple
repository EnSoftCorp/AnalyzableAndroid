public class gov.nist.javax.sip.SipProviderImpl extends java.lang.Object implements javax.sip.SipProvider, gov.nist.javax.sip.SipProviderExt, gov.nist.javax.sip.stack.SIPTransactionEventListener, gov.nist.javax.sip.stack.SIPDialogEventListener
{
    private java.lang.String IN6_ADDR_ANY;
    private java.lang.String IN_ADDR_ANY;
    private java.lang.String address;
    private boolean automaticDialogSupportEnabled;
    private boolean dialogErrorsAutomaticallyHandled;
    private gov.nist.javax.sip.EventScanner eventScanner;
    private java.util.concurrent.ConcurrentHashMap listeningPoints;
    private int port;
    private javax.sip.SipListener sipListener;
    protected gov.nist.javax.sip.SipStackImpl sipStack;

    private void <init>()
    {
        gov.nist.javax.sip.SipProviderImpl r0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN_ADDR_ANY> = "0.0.0.0";

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN6_ADDR_ANY> = "::0";

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

        return;
    }

    protected void <init>(gov.nist.javax.sip.SipStackImpl)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.SipStackImpl r1, $r5, $r6;
        gov.nist.javax.sip.EventScanner $r2, $r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        boolean $z0, $z1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: gov.nist.javax.sip.SipStackImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN_ADDR_ANY> = "0.0.0.0";

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN6_ADDR_ANY> = "::0";

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

        $r2 = virtualinvoke r1.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner getEventScanner()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner> = $r2;

        r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack> = r1;

        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r3.<gov.nist.javax.sip.EventScanner: void incrementRefcount()>();

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints> = $r4;

        $r5 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r5.<gov.nist.javax.sip.SipStackImpl: boolean isAutomaticDialogSupportEnabled()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean automaticDialogSupportEnabled> = $z0;

        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z1 = virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: boolean isAutomaticDialogErrorHandlingEnabled()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = $z1;

        return;
    }

    public void addListeningPoint(javax.sip.ListeningPoint) throws javax.sip.ObjectInUseException
    {
        gov.nist.javax.sip.SipProviderImpl r0, $r5, $r18;
        javax.sip.ListeningPoint r1;
        java.lang.Throwable r2, $r19;
        gov.nist.javax.sip.ListeningPointImpl r3;
        java.lang.String r4, $r6, $r8, $r9, $r16;
        java.util.concurrent.ConcurrentHashMap $r7, $r11, $r12, $r15;
        boolean $z0, $z1, $z2;
        javax.sip.ObjectInUseException $r10, $r17, $r20;
        int $i0, $i1, $i2;
        java.lang.Object $r14;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.ListeningPoint;

        entermonitor r0;

     label1:
        r3 = (gov.nist.javax.sip.ListeningPointImpl) r1;

        $r5 = r3.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider>;

        if $r5 == null goto label3;

        $r18 = r3.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider>;

        if $r18 == r0 goto label3;

        $r20 = new javax.sip.ObjectInUseException;

        specialinvoke $r20.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Listening point assigned to another provider");

        throw $r20;

     label2:
        $r19 := @caughtexception;

        r2 = $r19;

        exitmonitor r0;

        throw r2;

     label3:
        $r6 = virtualinvoke r3.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()>();

        r4 = virtualinvoke $r6.<java.lang.String: java.lang.String toUpperCase()>();

        $r7 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $z0 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        $r16 = interfaceinvoke r1.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String address> = $r16;

        $i2 = interfaceinvoke r1.<javax.sip.ListeningPoint: int getPort()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: int port> = $i2;

     label4:
        $r11 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $z2 = virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r4);

        if $z2 == 0 goto label7;

        $r15 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r14 = virtualinvoke $r15.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r4);

        if $r14 == r1 goto label7;

        $r17 = new javax.sip.ObjectInUseException;

        specialinvoke $r17.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Listening point already assigned for transport!");

        throw $r17;

     label5:
        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String address>;

        $r9 = interfaceinvoke r1.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label6;

        $i0 = r0.<gov.nist.javax.sip.SipProviderImpl: int port>;

        $i1 = interfaceinvoke r1.<javax.sip.ListeningPoint: int getPort()>();

        if $i0 == $i1 goto label4;

     label6:
        $r10 = new javax.sip.ObjectInUseException;

        specialinvoke $r10.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Provider already has different IP Address associated");

        throw $r10;

     label7:
        r3.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider> = r0;

        $r12 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r3);

     label8:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
        catch java.lang.Throwable from label6 to label7 with label2;
        catch java.lang.Throwable from label7 to label8 with label2;
    }

    public void addSipListener(javax.sip.SipListener) throws java.util.TooManyListenersException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.SipListener r1, $r3, $r5;
        gov.nist.javax.sip.SipStackImpl $r2, $r4, $r6, $r7, $r14;
        boolean $z0;
        gov.nist.core.StackLogger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        java.util.TooManyListenersException $r13;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.SipListener;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r3 = $r2.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener>;

        if $r3 != null goto label3;

        $r14 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r14.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener> = r1;

     label1:
        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label2;

        $r7 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r8 = virtualinvoke $r7.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add SipListener ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r12);

     label2:
        r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener sipListener> = r1;

        return;

     label3:
        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r5 = $r4.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener>;

        if $r5 == r1 goto label1;

        $r13 = new java.util.TooManyListenersException;

        specialinvoke $r13.<java.util.TooManyListenersException: void <init>(java.lang.String)>("Stack already has a listener. Only one listener per stack allowed");

        throw $r13;
    }

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.CloneNotSupportedException $r1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = new java.lang.CloneNotSupportedException;

        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>()>();

        throw $r1;
    }

    public void dialogErrorEvent(gov.nist.javax.sip.stack.SIPDialogErrorEvent)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.stack.SIPDialogErrorEvent r1;
        java.lang.Throwable r2, $r13;
        gov.nist.javax.sip.stack.SIPDialog r3;
        gov.nist.javax.sip.DialogTimeoutEvent$Reason r4;
        java.lang.Object $r5;
        int $i0, $i1;
        gov.nist.javax.sip.SipStackImpl $r6, $r8;
        boolean $z0;
        gov.nist.javax.sip.DialogTimeoutEvent $r7;
        gov.nist.core.StackLogger $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r14;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPDialogErrorEvent;

        entermonitor r0;

     label1:
        $r5 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialogErrorEvent: java.lang.Object getSource()>();

        r3 = (gov.nist.javax.sip.stack.SIPDialog) $r5;

        r4 = <gov.nist.javax.sip.DialogTimeoutEvent$Reason: gov.nist.javax.sip.DialogTimeoutEvent$Reason AckNotReceived>;

        $i0 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialogErrorEvent: int getErrorID()>();

        if $i0 != 2 goto label5;

        r4 = <gov.nist.javax.sip.DialogTimeoutEvent$Reason: gov.nist.javax.sip.DialogTimeoutEvent$Reason AckNotSent>;

     label2:
        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label3;

        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog TimeoutError occured on ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r14);

     label3:
        $r7 = new gov.nist.javax.sip.DialogTimeoutEvent;

        specialinvoke $r7.<gov.nist.javax.sip.DialogTimeoutEvent: void <init>(java.lang.Object,javax.sip.Dialog,gov.nist.javax.sip.DialogTimeoutEvent$Reason)>(r0, r3, r4);

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>($r7, null);

     label4:
        exitmonitor r0;

        return;

     label5:
        $i1 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialogErrorEvent: int getErrorID()>();

        if $i1 != 3 goto label2;

        r4 = <gov.nist.javax.sip.DialogTimeoutEvent$Reason: gov.nist.javax.sip.DialogTimeoutEvent$Reason ReInviteTimeout>;

     label6:
        goto label2;

     label7:
        $r13 := @caughtexception;

        r2 = $r13;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public javax.sip.ListeningPoint getListeningPoint()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        int $i0;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        javax.sip.ListeningPoint $r6;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (javax.sip.ListeningPoint) $r5;

        return $r6;

     label1:
        return null;
    }

    public javax.sip.ListeningPoint getListeningPoint(java.lang.String)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.String r1, $r3;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r4;
        javax.sip.ListeningPoint $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null transport param");

        throw $r6;

     label1:
        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r4 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (javax.sip.ListeningPoint) $r4;

        return $r5;
    }

    public javax.sip.ListeningPoint[] getListeningPoints()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.Throwable r1, $r7;
        gov.nist.javax.sip.ListeningPointImpl[] r2;
        java.util.concurrent.ConcurrentHashMap $r3, $r4;
        int $i0;
        java.util.Collection $r5;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        entermonitor r0;

     label1:
        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: int size()>();

        r2 = newarray (gov.nist.javax.sip.ListeningPointImpl)[$i0];

        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        interfaceinvoke $r5.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r2);

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public javax.sip.header.CallIdHeader getNewCallId()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.String r1, $r6;
        gov.nist.javax.sip.header.CallID r2, $r7;
        gov.nist.javax.sip.Utils $r4;
        javax.sip.ListeningPoint $r5;
        java.text.ParseException $r8;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r4 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        $r5 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint()>();

        $r6 = interfaceinvoke $r5.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        r1 = virtualinvoke $r4.<gov.nist.javax.sip.Utils: java.lang.String generateCallIdentifier(java.lang.String)>($r6);

        $r7 = new gov.nist.javax.sip.header.CallID;

        specialinvoke $r7.<gov.nist.javax.sip.header.CallID: void <init>()>();

        r2 = $r7;

     label1:
        virtualinvoke r2.<gov.nist.javax.sip.header.CallID: void setCallId(java.lang.String)>(r1);

     label2:
        return r2;

     label3:
        $r8 := @caughtexception;

        return r2;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public javax.sip.ClientTransaction getNewClientTransaction(javax.sip.message.Request) throws javax.sip.TransactionUnavailableException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.message.Request r1;
        gov.nist.javax.sip.message.SIPRequest r2, $r33, $r64, $r69, $r75, $r91;
        java.text.ParseException r3, r14, $r93, $r106;
        javax.sip.TransactionUnavailableException r4, r6, r13, r15, r16, $r54, $r56, $r87, $r92, $r94, $r97, $r98, $r99, $r100, $r102, $r105;
        javax.sip.SipException r5, $r103;
        javax.sip.address.Hop r7;
        java.lang.String r8, r10, r19, r21, $r26, $r30, $r31, $r36, $r39, $r43, $r48, $r50, $r52, $r53, $r65, $r68, $r78, $r80, $r104;
        gov.nist.javax.sip.ListeningPointImpl r9, $r85;
        gov.nist.javax.sip.stack.SIPDialog r11, $r51, $r79;
        javax.sip.InvalidArgumentException r12, $r101;
        java.io.IOException r17, $r95;
        gov.nist.javax.sip.header.Via r18, $r27, $r28, $r38, $r40, $r42, $r49, $r77, $r86;
        gov.nist.javax.sip.stack.SIPClientTransaction r20, r22, r24, $r71, $r81;
        gov.nist.javax.sip.SipStackImpl $r23, $r29, $r32, $r34, $r41, $r47, $r55, $r57, $r59, $r74, $r76, $r83, $r89;
        java.lang.Object $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        javax.sip.ListeningPoint $r35, $r88;
        gov.nist.javax.sip.Utils $r37;
        int $i0, $i1;
        gov.nist.javax.sip.stack.MessageChannel $r45, $r70;
        gov.nist.javax.sip.stack.MessageProcessor $r46;
        gov.nist.core.StackLogger $r58;
        javax.sip.DialogState $r60, $r61;
        java.lang.StringBuilder $r62, $r63, $r66, $r67;
        gov.nist.javax.sip.stack.SIPTransaction $r72, $r73, $r90;
        javax.sip.Dialog $r82, $r84;
        java.lang.NullPointerException $r96;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.message.Request;

        if r1 != null goto label01;

        $r96 = new java.lang.NullPointerException;

        specialinvoke $r96.<java.lang.NullPointerException: void <init>(java.lang.String)>("null request");

        throw $r96;

     label01:
        $r23 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r23.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 != 0 goto label02;

        $r97 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r97.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Stack is stopped");

        throw $r97;

     label02:
        r2 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r25 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        if $r25 == null goto label03;

        $r98 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r98.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction already assigned to request");

        throw $r98;

     label03:
        $r26 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z1 == 0 goto label04;

        $r99 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r99.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot create client transaction for  ACK");

        throw $r99;

     label04:
        $r28 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        if $r28 != null goto label05;

        $r88 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>("udp");

        $r85 = (gov.nist.javax.sip.ListeningPointImpl) $r88;

        $r86 = virtualinvoke $r85.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.header.Via getViaHeader()>();

        interfaceinvoke r1.<javax.sip.message.Request: void setHeader(javax.sip.header.Header)>($r86);

     label05:
        virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: void checkHeaders()>();

     label06:
        $r27 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r30 = virtualinvoke $r27.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if $r30 == null goto label08;

        $r77 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r78 = virtualinvoke $r77.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $z8 = virtualinvoke $r78.<java.lang.String: boolean startsWith(java.lang.String)>("z9hG4bK");

        if $z8 == 0 goto label08;

        $r89 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r91 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r90 = virtualinvoke $r89.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r91, 0);

        if $r90 == null goto label08;

        $r87 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r87.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction already exists!");

        throw $r87;

     label07:
        $r106 := @caughtexception;

        r3 = $r106;

        $r105 = new javax.sip.TransactionUnavailableException;

        $r104 = virtualinvoke r3.<java.text.ParseException: java.lang.String getMessage()>();

        specialinvoke $r105.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>($r104, r3);

        r4 = $r105;

        throw r4;

     label08:
        $r31 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z2 = virtualinvoke $r31.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("CANCEL");

        if $z2 == 0 goto label10;

        $r74 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r64 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r73 = virtualinvoke $r74.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(gov.nist.javax.sip.message.SIPRequest,boolean)>($r64, 0);

        r22 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r73;

        if r22 == null goto label10;

        $r76 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r75 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r70 = virtualinvoke r22.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        r24 = virtualinvoke $r76.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction createClientTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>($r75, $r70);

        $r72 = (gov.nist.javax.sip.stack.SIPTransaction) r24;

        virtualinvoke $r72.<gov.nist.javax.sip.stack.SIPTransaction: void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)>(r0);

        $r83 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r71 = (gov.nist.javax.sip.stack.SIPClientTransaction) r24;

        virtualinvoke $r83.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPClientTransaction)>($r71);

        $r84 = virtualinvoke r22.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        if $r84 == null goto label09;

        $r81 = (gov.nist.javax.sip.stack.SIPClientTransaction) r24;

        $r82 = virtualinvoke r22.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        $r79 = (gov.nist.javax.sip.stack.SIPDialog) $r82;

        $r80 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke $r81.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>($r79, $r80);

     label09:
        return r24;

     label10:
        $r29 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r29.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label11;

        $r57 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r58 = virtualinvoke $r57.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not find existing transaction for ");

        $r69 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r68 = virtualinvoke $r69.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r63 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" creating a new one ");

        $r65 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r58.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r65);

     label11:
        $r32 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r33 = (gov.nist.javax.sip.message.SIPRequest) r1;

        r7 = virtualinvoke $r32.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Hop getNextHop(gov.nist.javax.sip.message.SIPRequest)>($r33);

     label12:
        if r7 != null goto label15;

     label13:
        $r56 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r56.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot resolve next hop -- transaction unavailable");

        throw $r56;

     label14:
        $r103 := @caughtexception;

        r5 = $r103;

        $r102 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r102.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot resolve next hop -- transaction unavailable", r5);

        r6 = $r102;

        throw r6;

     label15:
        r8 = interfaceinvoke r7.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r35 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>(r8);

        r9 = (gov.nist.javax.sip.ListeningPointImpl) $r35;

        r10 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        $r34 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r11 = virtualinvoke $r34.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r10);

        if r11 == null goto label16;

        $r60 = virtualinvoke r11.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r61 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        if $r60 != $r61 goto label16;

        $r55 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r55.<gov.nist.javax.sip.SipStackImpl: void removeDialog(gov.nist.javax.sip.stack.SIPDialog)>(r11);

     label16:
        $r38 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r36 = virtualinvoke $r38.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if $r36 == null goto label17;

        $r49 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r50 = virtualinvoke $r49.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $z6 = virtualinvoke $r50.<java.lang.String: boolean startsWith(java.lang.String)>("z9hG4bK");

        if $z6 == 0 goto label17;

        $r59 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z7 = virtualinvoke $r59.<gov.nist.javax.sip.SipStackImpl: boolean checkBranchId()>();

        if $z7 == 0 goto label18;

     label17:
        $r37 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        r19 = virtualinvoke $r37.<gov.nist.javax.sip.Utils: java.lang.String generateBranchId()>();

        $r40 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        virtualinvoke $r40.<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)>(r19);

     label18:
        r18 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r39 = virtualinvoke r18.<gov.nist.javax.sip.header.Via: java.lang.String getTransport()>();

        if $r39 != null goto label19;

        virtualinvoke r18.<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)>(r8);

     label19:
        $i0 = virtualinvoke r18.<gov.nist.javax.sip.header.Via: int getPort()>();

        if $i0 != -1 goto label20;

        $i1 = virtualinvoke r9.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        virtualinvoke r18.<gov.nist.javax.sip.header.Via: void setPort(int)>($i1);

     label20:
        $r42 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r21 = virtualinvoke $r42.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $r41 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r46 = virtualinvoke r9.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        $r45 = virtualinvoke $r41.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageProcessor,javax.sip.address.Hop)>(r2, $r46, r7);

        r20 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r45;

     label21:
        if r20 != null goto label24;

     label22:
        $r54 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r54.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cound not create tx");

        throw $r54;

     label23:
        $r95 := @caughtexception;

        r17 = $r95;

        $r94 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r94.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Could not resolve next hop or listening point unavailable! ", r17);

        r16 = $r94;

        throw r16;

     label24:
        virtualinvoke r20.<gov.nist.javax.sip.stack.SIPClientTransaction: void setNextHop(javax.sip.address.Hop)>(r7);

        virtualinvoke r20.<gov.nist.javax.sip.stack.SIPClientTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r2);

        virtualinvoke r20.<gov.nist.javax.sip.stack.SIPClientTransaction: void setBranch(java.lang.String)>(r21);

        $r43 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z5 = staticinvoke <gov.nist.javax.sip.SipStackImpl: boolean isDialogCreated(java.lang.String)>($r43);

        if $z5 == 0 goto label32;

     label25:
        if r11 == null goto label29;

     label26:
        $r53 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke r20.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r11, $r53);

     label27:
        virtualinvoke r20.<gov.nist.javax.sip.stack.SIPClientTransaction: void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)>(r0);

     label28:
        return r20;

     label29:
        $z4 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z4 == 0 goto label27;

        $r47 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r51 = virtualinvoke $r47.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>(r20);

        $r52 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke r20.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>($r51, $r52);

     label30:
        goto label27;

     label31:
        $r93 := @caughtexception;

        r14 = $r93;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r14);

        $r92 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r92.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected Exception FIXME! ", r14);

        r15 = $r92;

        throw r15;

     label32:
        if r11 == null goto label27;

     label33:
        $r48 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke r20.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r11, $r48);

     label34:
        goto label27;

     label35:
        $r101 := @caughtexception;

        r12 = $r101;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r12);

        $r100 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r100.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected Exception FIXME! ", r12);

        r13 = $r100;

        throw r13;

        catch java.text.ParseException from label05 to label06 with label07;
        catch javax.sip.SipException from label11 to label12 with label14;
        catch javax.sip.SipException from label13 to label14 with label14;
        catch java.io.IOException from label16 to label17 with label23;
        catch java.text.ParseException from label16 to label17 with label31;
        catch javax.sip.InvalidArgumentException from label16 to label17 with label35;
        catch java.io.IOException from label17 to label18 with label23;
        catch java.text.ParseException from label17 to label18 with label31;
        catch javax.sip.InvalidArgumentException from label17 to label18 with label35;
        catch java.io.IOException from label18 to label19 with label23;
        catch java.text.ParseException from label18 to label19 with label31;
        catch javax.sip.InvalidArgumentException from label18 to label19 with label35;
        catch java.io.IOException from label19 to label20 with label23;
        catch java.text.ParseException from label19 to label20 with label31;
        catch javax.sip.InvalidArgumentException from label19 to label20 with label35;
        catch java.io.IOException from label20 to label21 with label23;
        catch java.text.ParseException from label20 to label21 with label31;
        catch javax.sip.InvalidArgumentException from label20 to label21 with label35;
        catch java.io.IOException from label22 to label23 with label23;
        catch java.text.ParseException from label22 to label23 with label31;
        catch javax.sip.InvalidArgumentException from label22 to label23 with label35;
        catch java.io.IOException from label24 to label25 with label23;
        catch java.text.ParseException from label24 to label25 with label31;
        catch javax.sip.InvalidArgumentException from label24 to label25 with label35;
        catch java.io.IOException from label26 to label27 with label23;
        catch java.text.ParseException from label26 to label27 with label31;
        catch javax.sip.InvalidArgumentException from label26 to label27 with label35;
        catch java.io.IOException from label27 to label28 with label23;
        catch java.text.ParseException from label27 to label28 with label31;
        catch javax.sip.InvalidArgumentException from label27 to label28 with label35;
        catch java.io.IOException from label29 to label30 with label23;
        catch java.text.ParseException from label29 to label30 with label31;
        catch javax.sip.InvalidArgumentException from label29 to label30 with label35;
        catch java.io.IOException from label33 to label34 with label23;
        catch java.text.ParseException from label33 to label34 with label31;
        catch javax.sip.InvalidArgumentException from label33 to label34 with label35;
    }

    public javax.sip.Dialog getNewDialog(javax.sip.Transaction) throws javax.sip.SipException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.Transaction r1;
        gov.nist.javax.sip.stack.SIPTransaction r2, $r27;
        gov.nist.javax.sip.stack.SIPClientTransaction r3;
        java.lang.String r4, r9, $r13, $r23, $r24, $r35, $r37;
        gov.nist.javax.sip.stack.SIPDialog r5, $r18;
        gov.nist.javax.sip.stack.SIPServerTransaction r6;
        gov.nist.javax.sip.message.SIPResponse r7, $r14;
        gov.nist.javax.sip.message.SIPRequest r8, $r17;
        gov.nist.javax.sip.SipStackImpl $r10, $r19, $r20, $r25, $r26, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javax.sip.message.Request $r12, $r15, $r22, $r31;
        javax.sip.SipException $r16, $r21, $r28, $r32, $r34, $r39;
        int $i0;
        java.lang.StringBuilder $r30, $r33, $r36;
        java.lang.NullPointerException $r38;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.Transaction;

        if r1 != null goto label01;

        $r38 = new java.lang.NullPointerException;

        specialinvoke $r38.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null transaction!");

        throw $r38;

     label01:
        $r10 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 != 0 goto label02;

        $r39 = new javax.sip.SipException;

        specialinvoke $r39.<javax.sip.SipException: void <init>(java.lang.String)>("Stack is stopped.");

        throw $r39;

     label02:
        $z1 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z1 == 0 goto label03;

        $r34 = new javax.sip.SipException;

        specialinvoke $r34.<javax.sip.SipException: void <init>(java.lang.String)>(" Error - AUTOMATIC_DIALOG_SUPPORT is on");

        throw $r34;

     label03:
        $r12 = interfaceinvoke r1.<javax.sip.Transaction: javax.sip.message.Request getRequest()>();

        $r13 = interfaceinvoke $r12.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z2 = staticinvoke <gov.nist.javax.sip.SipStackImpl: boolean isDialogCreated(java.lang.String)>($r13);

        if $z2 != 0 goto label04;

        $r32 = new javax.sip.SipException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog cannot be created for this method ");

        $r31 = interfaceinvoke r1.<javax.sip.Transaction: javax.sip.message.Request getRequest()>();

        $r37 = interfaceinvoke $r31.<javax.sip.message.Request: java.lang.String getMethod()>();

        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<javax.sip.SipException: void <init>(java.lang.String)>($r35);

        throw $r32;

     label04:
        r2 = (gov.nist.javax.sip.stack.SIPTransaction) r1;

        $z3 = r1 instanceof javax.sip.ServerTransaction;

        if $z3 == 0 goto label09;

        r6 = (gov.nist.javax.sip.stack.SIPServerTransaction) r1;

        r7 = virtualinvoke r6.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        if r7 == null goto label05;

        $i0 = interfaceinvoke r7.<javax.sip.message.Response: int getStatusCode()>();

        if $i0 == 100 goto label05;

        $r28 = new javax.sip.SipException;

        specialinvoke $r28.<javax.sip.SipException: void <init>(java.lang.String)>("Cannot set dialog after response has been sent");

        throw $r28;

     label05:
        $r22 = interfaceinvoke r1.<javax.sip.Transaction: javax.sip.message.Request getRequest()>();

        r8 = (gov.nist.javax.sip.message.SIPRequest) $r22;

        r9 = virtualinvoke r8.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r25 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r5 = virtualinvoke $r25.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r9);

        if r5 != null goto label08;

        $r29 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r27 = (gov.nist.javax.sip.stack.SIPTransaction) r1;

        r5 = virtualinvoke $r29.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>($r27);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r8);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r5, null);

     label06:
        $r24 = virtualinvoke r8.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z4 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z4 == 0 goto label07;

        $z5 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z5 == 0 goto label07;

        $r26 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r26.<gov.nist.javax.sip.SipStackImpl: void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction,gov.nist.javax.sip.message.SIPRequest)>(r6, r8);

     label07:
        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPDialog: void addEventListener(gov.nist.javax.sip.stack.SIPDialogEventListener)>(r0);

        return r5;

     label08:
        $r23 = virtualinvoke r8.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r5, $r23);

        goto label06;

     label09:
        r3 = (gov.nist.javax.sip.stack.SIPClientTransaction) r1;

        $r14 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        if $r14 != null goto label11;

        $r15 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request getRequest()>();

        $r17 = (gov.nist.javax.sip.message.SIPRequest) $r15;

        r4 = virtualinvoke $r17.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        $r19 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r18 = virtualinvoke $r19.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r4);

        if $r18 == null goto label10;

        $r21 = new javax.sip.SipException;

        specialinvoke $r21.<javax.sip.SipException: void <init>(java.lang.String)>("Dialog already exists!");

        throw $r21;

     label10:
        $r20 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r5 = virtualinvoke $r20.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

        virtualinvoke r3.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r5, null);

        goto label07;

     label11:
        $r16 = new javax.sip.SipException;

        specialinvoke $r16.<javax.sip.SipException: void <init>(java.lang.String)>("Cannot call this method after response is received!");

        throw $r16;
    }

    public javax.sip.ServerTransaction getNewServerTransaction(javax.sip.message.Request) throws javax.sip.TransactionAlreadyExistsException, javax.sip.TransactionUnavailableException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.message.Request r1;
        gov.nist.javax.sip.message.SIPRequest r2, $r27, $r31, $r40, $r47, $r49, $r51, $r55, $r58, $r62;
        java.text.ParseException r3, $r92;
        java.lang.Throwable r4, $r94;
        gov.nist.javax.sip.stack.SIPServerTransaction r5, r9, r12, $r26, $r44;
        java.lang.String r6, r10, r14, r18, $r20, $r21, $r23, $r35, $r42, $r52, $r64, $r66, $r68, $r69, $r72, $r81, $r90;
        gov.nist.javax.sip.stack.SIPDialog r7, r11, r16, r17;
        gov.nist.javax.sip.stack.MessageChannel r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        gov.nist.javax.sip.SipStackImpl $r19, $r22, $r28, $r30, $r33, $r34, $r37, $r38, $r39, $r43, $r46, $r48, $r56, $r57, $r59, $r60, $r65, $r67, $r74, $r75, $r78, $r82, $r88, $r89, $r93;
        gov.nist.javax.sip.stack.SIPTransaction $r25, $r45, $r61;
        java.lang.Object $r29, $r32, $r50, $r63;
        javax.sip.TransactionUnavailableException $r36, $r53, $r71, $r73, $r76, $r84, $r86, $r87, $r91, $r95;
        javax.sip.TransactionAlreadyExistsException $r41, $r54, $r70;
        gov.nist.javax.sip.stack.SIPClientTransaction $r77;
        javax.sip.ListeningPoint $r79;
        gov.nist.javax.sip.ListeningPointImpl $r80;
        java.io.IOException $r83, $r96;
        gov.nist.core.StackLogger $r85;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.message.Request;

        $r19 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r19.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 != 0 goto label01;

        $r86 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r86.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Stack is stopped");

        throw $r86;

     label01:
        r2 = (gov.nist.javax.sip.message.SIPRequest) r1;

     label02:
        virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: void checkHeaders()>();

     label03:
        $r20 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z1 == 0 goto label06;

        $r89 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z10 = virtualinvoke $r89.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label04;

        $r88 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r85 = virtualinvoke $r88.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r85.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Creating server transaction for ACK -- makes no sense!");

     label04:
        $r87 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r87.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot create Server transaction for ACK ");

        throw $r87;

     label05:
        $r92 := @caughtexception;

        r3 = $r92;

        $r91 = new javax.sip.TransactionUnavailableException;

        $r90 = virtualinvoke r3.<java.text.ParseException: java.lang.String getMessage()>();

        specialinvoke $r91.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>($r90, r3);

        throw $r91;

     label06:
        $r21 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z2 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("NOTIFY");

        if $z2 == 0 goto label07;

        $r72 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFromTag()>();

        if $r72 == null goto label07;

        $r81 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getToTag()>();

        if $r81 != null goto label07;

        $r82 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r79 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint()>();

        $r80 = (gov.nist.javax.sip.ListeningPointImpl) $r79;

        $r77 = virtualinvoke $r82.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction findSubscribeTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.ListeningPointImpl)>(r2, $r80);

        if $r77 != null goto label07;

        $r78 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z9 = $r78.<gov.nist.javax.sip.SipStackImpl: boolean deliverUnsolicitedNotify>;

        if $z9 != 0 goto label07;

        $r76 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r76.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot find matching Subscription (and gov.nist.javax.sip.DELIVER_UNSOLICITED_NOTIFY not set)");

        throw $r76;

     label07:
        $r22 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r22.<gov.nist.javax.sip.SipStackImpl: boolean acquireSem()>();

        if $z3 != 0 goto label08;

        $r73 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r73.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction not available -- could not acquire stack lock");

        throw $r73;

     label08:
        $r23 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z5 = staticinvoke <gov.nist.javax.sip.SipStackImpl: boolean isDialogCreated(java.lang.String)>($r23);

        if $z5 == 0 goto label23;

        $r60 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r55 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r61 = virtualinvoke $r60.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r55, 1);

        if $r61 == null goto label10;

        $r70 = new javax.sip.TransactionAlreadyExistsException;

        specialinvoke $r70.<javax.sip.TransactionAlreadyExistsException: void <init>(java.lang.String)>("server transaction already exists!");

        throw $r70;

     label09:
        $r94 := @caughtexception;

        r4 = $r94;

        $r93 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r93.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        throw r4;

     label10:
        $r62 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r63 = virtualinvoke $r62.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        r12 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r63;

     label11:
        if r12 != null goto label13;

     label12:
        $r71 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r71.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction not available");

        throw $r71;

     label13:
        $r58 = virtualinvoke r12.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r58 != null goto label14;

        virtualinvoke r12.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r2);

     label14:
        $r59 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r59.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r12);

     label15:
        virtualinvoke r12.<gov.nist.javax.sip.stack.SIPServerTransaction: void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)>(r0);

        $z6 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z6 == 0 goto label20;

        r18 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r67 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r17 = virtualinvoke $r67.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r18);

     label16:
        if r17 != null goto label18;

     label17:
        $r75 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r17 = virtualinvoke $r75.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>(r12);

     label18:
        $r69 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r12.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r17, $r69);

        $r68 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z7 = virtualinvoke $r68.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z7 == 0 goto label19;

        $z8 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z8 == 0 goto label19;

        $r74 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r74.<gov.nist.javax.sip.SipStackImpl: void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction,gov.nist.javax.sip.message.SIPRequest)>(r12, r2);

     label19:
        virtualinvoke r17.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r2);

        $r64 = virtualinvoke r17.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getRemoteTag()>();

        if $r64 == null goto label20;

        $r66 = virtualinvoke r17.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getLocalTag()>();

        if $r66 == null goto label20;

        $r65 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r65.<gov.nist.javax.sip.SipStackImpl: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>(r17);

     label20:
        $r57 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r57.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        return r12;

     label21:
        $r96 := @caughtexception;

     label22:
        $r95 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r95.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Error sending provisional response");

        throw $r95;

     label23:
        $z4 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z4 == 0 goto label35;

        $r46 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r47 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r45 = virtualinvoke $r46.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r47, 1);

        $r44 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r45;

        if $r44 == null goto label24;

        $r54 = new javax.sip.TransactionAlreadyExistsException;

        specialinvoke $r54.<javax.sip.TransactionAlreadyExistsException: void <init>(java.lang.String)>("Transaction exists! ");

        throw $r54;

     label24:
        $r51 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r50 = virtualinvoke $r51.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        r12 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r50;

     label25:
        if r12 != null goto label27;

     label26:
        $r53 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r53.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction not available!");

        throw $r53;

     label27:
        $r49 = virtualinvoke r12.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r49 != null goto label28;

        virtualinvoke r12.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r2);

     label28:
        $r48 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r48.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r12);

     label29:
        r14 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r56 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r16 = virtualinvoke $r56.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r14);

     label30:
        if r16 == null goto label20;

     label31:
        virtualinvoke r16.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r12);

        virtualinvoke r16.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r2);

        $r52 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r12.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r16, $r52);

     label32:
        goto label20;

     label33:
        $r83 := @caughtexception;

     label34:
        $r84 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r84.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Could not send back provisional response!");

        throw $r84;

     label35:
        $r28 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r27 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r25 = virtualinvoke $r28.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r27, 1);

        $r26 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r25;

        if $r26 == null goto label36;

        $r41 = new javax.sip.TransactionAlreadyExistsException;

        specialinvoke $r41.<javax.sip.TransactionAlreadyExistsException: void <init>(java.lang.String)>("Transaction exists! ");

        throw $r41;

     label36:
        $r31 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r32 = virtualinvoke $r31.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        r5 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r32;

     label37:
        if r5 == null goto label43;

     label38:
        $r40 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r40 != null goto label39;

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r2);

     label39:
        $r39 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r39.<gov.nist.javax.sip.SipStackImpl: void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        r6 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r38 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r7 = virtualinvoke $r38.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r6);

     label40:
        if r7 == null goto label42;

     label41:
        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r2);

        $r42 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r7, $r42);

     label42:
        $r43 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r43.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        return r5;

     label43:
        $r29 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getMessageChannel()>();

        r8 = (gov.nist.javax.sip.stack.MessageChannel) $r29;

        $r30 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r9 = virtualinvoke $r30.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction createServerTransaction(gov.nist.javax.sip.stack.MessageChannel)>(r8);

     label44:
        if r9 != null goto label46;

     label45:
        $r36 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r36.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction unavailable -- too many servrer transactions");

        throw $r36;

     label46:
        virtualinvoke r9.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r2);

        $r34 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r34.<gov.nist.javax.sip.SipStackImpl: void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r9);

        r10 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r33 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r11 = virtualinvoke $r33.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r10);

     label47:
        if r11 == null goto label49;

     label48:
        virtualinvoke r11.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r9);

        virtualinvoke r11.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r2);

        $r35 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r9.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r11, $r35);

     label49:
        $r37 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r37.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        return r9;

        catch java.text.ParseException from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
        catch java.io.IOException from label14 to label15 with label21;
        catch java.lang.Throwable from label14 to label15 with label09;
        catch java.lang.Throwable from label15 to label16 with label09;
        catch java.lang.Throwable from label17 to label18 with label09;
        catch java.lang.Throwable from label18 to label19 with label09;
        catch java.lang.Throwable from label19 to label20 with label09;
        catch java.lang.Throwable from label22 to label23 with label09;
        catch java.lang.Throwable from label23 to label24 with label09;
        catch java.lang.Throwable from label24 to label25 with label09;
        catch java.lang.Throwable from label26 to label27 with label09;
        catch java.lang.Throwable from label27 to label28 with label09;
        catch java.io.IOException from label28 to label29 with label33;
        catch java.lang.Throwable from label28 to label29 with label09;
        catch java.lang.Throwable from label29 to label30 with label09;
        catch java.lang.Throwable from label31 to label32 with label09;
        catch java.lang.Throwable from label34 to label35 with label09;
        catch java.lang.Throwable from label35 to label36 with label09;
        catch java.lang.Throwable from label36 to label37 with label09;
        catch java.lang.Throwable from label38 to label39 with label09;
        catch java.lang.Throwable from label39 to label40 with label09;
        catch java.lang.Throwable from label41 to label42 with label09;
        catch java.lang.Throwable from label43 to label44 with label09;
        catch java.lang.Throwable from label45 to label46 with label09;
        catch java.lang.Throwable from label46 to label47 with label09;
        catch java.lang.Throwable from label48 to label49 with label09;
    }

    public javax.sip.SipListener getSipListener()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.SipListener $r1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener sipListener>;

        return $r1;
    }

    public javax.sip.SipStack getSipStack()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.SipStackImpl $r1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        return $r1;
    }

    public void handleEvent(java.util.EventObject, gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.util.EventObject r1;
        gov.nist.javax.sip.stack.SIPTransaction r2;
        gov.nist.javax.sip.EventWrapper r3, $r7;
        javax.sip.Dialog r4, r5;
        gov.nist.javax.sip.SipStackImpl $r6, $r8, $r11, $r25, $r28, $r29, $r34, $r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        gov.nist.javax.sip.EventScanner $r9, $r10;
        gov.nist.core.StackLogger $r12, $r27, $r32, $r37;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r30, $r31, $r33, $r38, $r41, $r42;
        javax.sip.SipListener $r18;
        java.lang.Object $r23;
        java.lang.String $r24, $r35, $r40;
        javax.sip.ResponseEvent $r26;
        javax.sip.RequestEvent $r36;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: java.util.EventObject;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPTransaction;

        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label2;

        $r11 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r12 = virtualinvoke $r11.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleEvent ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("currentTransaction = ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this.sipListener = ");

        $r18 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sipEvent.source = ");

        $r23 = virtualinvoke r1.<java.util.EventObject: java.lang.Object getSource()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r24);

        $z2 = r1 instanceof javax.sip.RequestEvent;

        if $z2 == 0 goto label3;

        $r36 = (javax.sip.RequestEvent) r1;

        r5 = virtualinvoke $r36.<javax.sip.RequestEvent: javax.sip.Dialog getDialog()>();

        $r34 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z5 = virtualinvoke $r34.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label1;

        $r39 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r37 = virtualinvoke $r39.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog = ");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r37.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r40);

     label1:
        $r25 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r27 = virtualinvoke $r25.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r27.<gov.nist.core.StackLogger: void logStackTrace()>();

     label2:
        $r7 = new gov.nist.javax.sip.EventWrapper;

        specialinvoke $r7.<gov.nist.javax.sip.EventWrapper: void <init>(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r1, r2);

        r3 = $r7;

        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z1 = $r8.<gov.nist.javax.sip.SipStackImpl: boolean reEntrantListener>;

        if $z1 != 0 goto label4;

        $r10 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r10.<gov.nist.javax.sip.EventScanner: void addEvent(gov.nist.javax.sip.EventWrapper)>(r3);

        return;

     label3:
        $z3 = r1 instanceof javax.sip.ResponseEvent;

        if $z3 == 0 goto label1;

        $r26 = (javax.sip.ResponseEvent) r1;

        r4 = virtualinvoke $r26.<javax.sip.ResponseEvent: javax.sip.Dialog getDialog()>();

        $r29 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z4 = virtualinvoke $r29.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label1;

        $r28 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r32 = virtualinvoke $r28.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog = ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r32.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r35);

        goto label1;

     label4:
        $r9 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r9.<gov.nist.javax.sip.EventScanner: void deliverEvent(gov.nist.javax.sip.EventWrapper)>(r3);

        return;
    }

    public boolean isAutomaticDialogSupportEnabled()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $z0 = r0.<gov.nist.javax.sip.SipProviderImpl: boolean automaticDialogSupportEnabled>;

        return $z0;
    }

    public boolean isDialogErrorsAutomaticallyHandled()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $z0 = r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled>;

        return $z0;
    }

    public void removeListeningPoint(javax.sip.ListeningPoint) throws javax.sip.ObjectInUseException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.ListeningPoint r1;
        java.lang.Throwable r2, $r10;
        gov.nist.javax.sip.ListeningPointImpl r3;
        gov.nist.javax.sip.stack.MessageProcessor $r4;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.lang.String $r6, $r7;
        javax.sip.ObjectInUseException $r9;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.ListeningPoint;

        entermonitor r0;

     label1:
        r3 = (gov.nist.javax.sip.ListeningPointImpl) r1;

        $r4 = r3.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $z0 = virtualinvoke $r4.<gov.nist.javax.sip.stack.MessageProcessor: boolean inUse()>();

        if $z0 == 0 goto label3;

        $r9 = new javax.sip.ObjectInUseException;

        specialinvoke $r9.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Object is in use");

        throw $r9;

     label2:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r0;

        throw r2;

     label3:
        $r5 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r6 = virtualinvoke r3.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r7);

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void removeListeningPoints()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.Throwable r1, $r8;
        java.util.Iterator r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.Collection $r4;
        boolean $z0;
        java.lang.Object $r5;
        gov.nist.javax.sip.ListeningPointImpl $r6;
        gov.nist.javax.sip.stack.MessageProcessor $r7;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        entermonitor r0;

     label1:
        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (gov.nist.javax.sip.ListeningPointImpl) $r5;

        $r7 = $r6.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        virtualinvoke $r7.<gov.nist.javax.sip.stack.MessageProcessor: void stop()>();

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label3:
        goto label2;

     label4:
        $r8 := @caughtexception;

        r1 = $r8;

        exitmonitor r0;

        throw r1;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void removeSipListener(javax.sip.SipListener)
    {
        gov.nist.javax.sip.SipProviderImpl r0, $r7;
        javax.sip.SipListener r1, $r3, $r8;
        boolean z0, $z1;
        java.util.Iterator r2;
        gov.nist.javax.sip.SipStackImpl $r4, $r5;
        java.lang.Object $r6;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.SipListener;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        if r1 != $r3 goto label1;

        r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener sipListener> = null;

     label1:
        z0 = 0;

        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r2 = virtualinvoke $r4.<gov.nist.javax.sip.SipStackImpl: java.util.Iterator getSipProviders()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (gov.nist.javax.sip.SipProviderImpl) $r6;

        $r8 = virtualinvoke $r7.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        if $r8 == null goto label2;

        z0 = 1;

        goto label2;

     label3:
        if z0 != 0 goto label4;

        $r5 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r5.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener> = null;

     label4:
        return;
    }

    public void sendRequest(javax.sip.message.Request) throws javax.sip.SipException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.message.Request r1;
        javax.sip.address.Hop r2;
        gov.nist.javax.sip.message.SIPRequest r3, $r15, $r17, $r47;
        java.text.ParseException r4, $r71;
        gov.nist.core.StackLogger r5, $r50, $r63, $r68;
        java.lang.String r6, r11, $r19, $r21, $r24, $r28, $r34, $r36, $r40, $r41, $r42, $r48, $r52, $r61, $r72, $r76, $r77;
        java.lang.Throwable r7, $r67;
        java.io.IOException r8, $r56;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        gov.nist.javax.sip.stack.MessageChannel r9;
        gov.nist.javax.sip.header.Via r10, $r45;
        gov.nist.javax.sip.stack.SIPDialog r12;
        gov.nist.javax.sip.SipStackImpl $r13, $r16, $r26, $r31, $r38, $r46, $r49, $r54, $r57, $r62, $r64, $r65, $r81, $r82;
        gov.nist.javax.sip.header.RequestLine $r14;
        javax.sip.address.Router $r18;
        java.util.concurrent.ConcurrentHashMap $r20;
        java.lang.StringBuilder $r22, $r25, $r27, $r29, $r30, $r32, $r33, $r35, $r51, $r58, $r60, $r69, $r70, $r73, $r74, $r75, $r78, $r79, $r80, $r83, $r84;
        javax.sip.SipException $r23, $r43, $r44, $r55, $r66;
        javax.sip.ListeningPoint $r37, $r39;
        int $i0, $i1;
        javax.sip.DialogState $r53, $r59;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.message.Request;

        $r13 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z1 = virtualinvoke $r13.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z1 != 0 goto label01;

        $r55 = new javax.sip.SipException;

        specialinvoke $r55.<javax.sip.SipException: void <init>(java.lang.String)>("Stack is stopped.");

        throw $r55;

     label01:
        $r15 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r14 = virtualinvoke $r15.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.RequestLine getRequestLine()>();

        if $r14 == null goto label02;

        $r48 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z5 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z5 == 0 goto label02;

        $r46 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r47 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r52 = virtualinvoke $r47.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        r12 = virtualinvoke $r46.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>($r52);

        if r12 == null goto label02;

        $r53 = interfaceinvoke r12.<javax.sip.Dialog: javax.sip.DialogState getState()>();

        if $r53 == null goto label02;

        $r54 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z6 = virtualinvoke $r54.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label02;

        $r49 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r50 = virtualinvoke $r49.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog exists -- you may want to use Dialog.sendAck() ");

        $r59 = interfaceinvoke r12.<javax.sip.Dialog: javax.sip.DialogState getState()>();

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r50.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>($r61);

     label02:
        $r16 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r17 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r18 = virtualinvoke $r16.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter(gov.nist.javax.sip.message.SIPRequest)>($r17);

        r2 = interfaceinvoke $r18.<javax.sip.address.Router: javax.sip.address.Hop getNextHop(javax.sip.message.Request)>(r1);

        if r2 != null goto label03;

        $r43 = new javax.sip.SipException;

        specialinvoke $r43.<javax.sip.SipException: void <init>(java.lang.String)>("could not determine next hop!");

        throw $r43;

     label03:
        r3 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $z3 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: boolean isNullRequest()>();

        if $z3 != 0 goto label04;

        $r45 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        if $r45 != null goto label04;

        $r44 = new javax.sip.SipException;

        specialinvoke $r44.<javax.sip.SipException: void <init>(java.lang.String)>("Invalid SipRequest -- no via header!");

        throw $r44;

     label04:
        $z2 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: boolean isNullRequest()>();

        if $z2 != 0 goto label08;

        r10 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r11 = virtualinvoke r10.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

     label05:
        if r11 == null goto label07;

     label06:
        $i1 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i1 != 0 goto label08;

     label07:
        $r42 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        virtualinvoke r10.<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)>($r42);

     label08:
        $r20 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r19 = interfaceinvoke r2.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String toUpperCase()>();

        z0 = virtualinvoke $r20.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>($r21);

     label09:
        r9 = null;

        if z0 == 0 goto label11;

     label10:
        $r38 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r36 = interfaceinvoke r2.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r37 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>($r36);

        $r41 = interfaceinvoke $r37.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        $r40 = interfaceinvoke r2.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r39 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>($r40);

        $i0 = interfaceinvoke $r39.<javax.sip.ListeningPoint: int getPort()>();

        r9 = virtualinvoke $r38.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.MessageChannel createRawMessageChannel(java.lang.String,int,javax.sip.address.Hop)>($r41, $i0, r2);

     label11:
        if r9 == null goto label16;

     label12:
        virtualinvoke r9.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,javax.sip.address.Hop)>(r3, r2);

     label13:
        $r26 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z4 = virtualinvoke $r26.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label15;

        $r31 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r5 = virtualinvoke $r31.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("done sending ");

        $r34 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r32 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to hop ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        r6 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        interfaceinvoke r5.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>(r6);

     label15:
        return;

     label16:
        $r23 = new javax.sip.SipException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create a message channel for ");

        $r24 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<javax.sip.SipException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label17:
        $r56 := @caughtexception;

        r8 = $r56;

     label18:
        $r57 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z7 = virtualinvoke $r57.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label19;

        $r65 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r68 = virtualinvoke $r65.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r68.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r8);

     label19:
        $r66 = new javax.sip.SipException;

        specialinvoke $r66.<javax.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("IO Exception occured while Sending Request", r8);

        throw $r66;

     label20:
        $r67 := @caughtexception;

        r7 = $r67;

        $r62 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z8 = virtualinvoke $r62.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z8 == 0 goto label21;

        $r64 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r63 = virtualinvoke $r64.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("done sending ");

        $r76 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $r75 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        $r70 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to hop ");

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r72 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r63.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r72);

     label21:
        throw r7;

     label22:
        $r71 := @caughtexception;

        r4 = $r71;

     label23:
        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r4);

     label24:
        $r82 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z9 = virtualinvoke $r82.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label15;

        $r81 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r5 = virtualinvoke $r81.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("done sending ");

        $r77 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $r78 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        $r83 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to hop ");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        r6 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label14;

        catch java.io.IOException from label04 to label05 with label17;
        catch java.text.ParseException from label04 to label05 with label22;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.io.IOException from label06 to label07 with label17;
        catch java.text.ParseException from label06 to label07 with label22;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.io.IOException from label07 to label08 with label17;
        catch java.text.ParseException from label07 to label08 with label22;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.io.IOException from label08 to label09 with label17;
        catch java.text.ParseException from label08 to label09 with label22;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.io.IOException from label10 to label11 with label17;
        catch java.text.ParseException from label10 to label11 with label22;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.io.IOException from label12 to label13 with label17;
        catch java.text.ParseException from label12 to label13 with label22;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.io.IOException from label16 to label17 with label17;
        catch java.text.ParseException from label16 to label17 with label22;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label19 to label20 with label20;
        catch java.lang.Throwable from label23 to label24 with label20;
    }

    public void sendResponse(javax.sip.message.Response) throws javax.sip.SipException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.message.Response r1;
        gov.nist.javax.sip.message.SIPResponse r2;
        gov.nist.javax.sip.header.Via r3;
        gov.nist.javax.sip.stack.SIPServerTransaction r4;
        java.lang.String r5, r6, $r18, $r20, $r29, $r37;
        int i0, $i1, $i2, $i3;
        javax.sip.address.Hop r7;
        java.io.IOException r8, $r39;
        gov.nist.javax.sip.ListeningPointImpl r9;
        gov.nist.javax.sip.SipStackImpl $r10, $r12, $r14, $r19;
        boolean $z0, $z1, $z2;
        gov.nist.javax.sip.message.SIPMessage $r11;
        gov.nist.javax.sip.stack.SIPTransaction $r13;
        gov.nist.javax.sip.stack.HopImpl $r15;
        gov.nist.core.net.AddressResolver $r16;
        javax.sip.ListeningPoint $r17, $r21;
        gov.nist.javax.sip.stack.MessageChannel $r22;
        java.lang.StringBuilder $r23, $r24, $r26, $r27, $r28, $r30, $r31;
        javax.sip.SipException $r25, $r34, $r35, $r36, $r38;
        javax.sip.TransactionState $r32, $r33;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.message.Response;

        $r10 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 != 0 goto label01;

        $r34 = new javax.sip.SipException;

        specialinvoke $r34.<javax.sip.SipException: void <init>(java.lang.String)>("Stack is stopped");

        throw $r34;

     label01:
        r2 = (gov.nist.javax.sip.message.SIPResponse) r1;

        r3 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.Via getTopmostVia()>();

        if r3 != null goto label02;

        $r35 = new javax.sip.SipException;

        specialinvoke $r35.<javax.sip.SipException: void <init>(java.lang.String)>("No via header in response!");

        throw $r35;

     label02:
        $r12 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r11 = (gov.nist.javax.sip.message.SIPMessage) r1;

        $r13 = virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r11, 1);

        r4 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r13;

        if r4 == null goto label03;

        $r32 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r33 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        if $r32 == $r33 goto label03;

        $z2 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z2 == 0 goto label03;

        $r36 = new javax.sip.SipException;

        specialinvoke $r36.<javax.sip.SipException: void <init>(java.lang.String)>("Transaction exists -- cannot send response statelessly");

        throw $r36;

     label03:
        r5 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: java.lang.String getTransport()>();

        r6 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: java.lang.String getReceived()>();

        if r6 != null goto label04;

        r6 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: java.lang.String getHost()>();

     label04:
        i0 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: int getRPort()>();

        if i0 != -1 goto label05;

        i0 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: int getPort()>();

        if i0 != -1 goto label05;

        $z1 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TLS");

        if $z1 == 0 goto label11;

        i0 = 5061;

     label05:
        $i1 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i1 <= 0 goto label06;

        $i3 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>("[");

        if $i3 >= 0 goto label06;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r6 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r14 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r16 = virtualinvoke $r14.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.AddressResolver getAddressResolver()>();

        $r15 = new gov.nist.javax.sip.stack.HopImpl;

        specialinvoke $r15.<gov.nist.javax.sip.stack.HopImpl: void <init>(java.lang.String,int,java.lang.String)>(r6, i0, r5);

        r7 = interfaceinvoke $r16.<gov.nist.core.net.AddressResolver: javax.sip.address.Hop resolveAddress(javax.sip.address.Hop)>($r15);

     label07:
        $r17 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>(r5);

        r9 = (gov.nist.javax.sip.ListeningPointImpl) $r17;

     label08:
        if r9 != null goto label12;

     label09:
        $r25 = new javax.sip.SipException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("whoopsa daisy! no listening point found for transport ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<javax.sip.SipException: void <init>(java.lang.String)>($r29);

        throw $r25;

     label10:
        $r39 := @caughtexception;

        r8 = $r39;

        $r38 = new javax.sip.SipException;

        $r37 = virtualinvoke r8.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r38.<javax.sip.SipException: void <init>(java.lang.String)>($r37);

        throw $r38;

     label11:
        i0 = 5060;

        goto label05;

     label12:
        $r19 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r18 = interfaceinvoke r7.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r21 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>($r18);

        $r20 = interfaceinvoke $r21.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        $i2 = r9.<gov.nist.javax.sip.ListeningPointImpl: int port>;

        $r22 = virtualinvoke $r19.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.MessageChannel createRawMessageChannel(java.lang.String,int,javax.sip.address.Hop)>($r20, $i2, r7);

        virtualinvoke $r22.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>(r2);

     label13:
        return;

        catch java.io.IOException from label07 to label08 with label10;
        catch java.io.IOException from label09 to label10 with label10;
        catch java.io.IOException from label12 to label13 with label10;
    }

    public void setAutomaticDialogSupportEnabled(boolean)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        boolean z0, $z1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        z0 := @parameter0: boolean;

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean automaticDialogSupportEnabled> = z0;

        $z1 = r0.<gov.nist.javax.sip.SipProviderImpl: boolean automaticDialogSupportEnabled>;

        if $z1 == 0 goto label1;

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

     label1:
        return;
    }

    public void setDialogErrorsAutomaticallyHandled()
    {
        gov.nist.javax.sip.SipProviderImpl r0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

        return;
    }

    public void setListeningPoint(javax.sip.ListeningPoint)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.ListeningPoint r1;
        gov.nist.javax.sip.ListeningPointImpl r2;
        java.lang.String r3, $r5, $r6;
        java.lang.Throwable r4, $r11;
        int $i0;
        java.util.concurrent.ConcurrentHashMap $r7, $r8;
        java.lang.NullPointerException $r10;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.ListeningPoint;

        entermonitor r0;

        if r1 != null goto label3;

     label1:
        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null listening point");

        throw $r10;

     label2:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r0;

        throw r4;

     label3:
        r2 = (gov.nist.javax.sip.ListeningPointImpl) r1;

        r2.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider> = r0;

        $r5 = virtualinvoke r2.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()>();

        r3 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>();

        $r6 = interfaceinvoke r1.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String address> = $r6;

        $i0 = interfaceinvoke r1.<javax.sip.ListeningPoint: int getPort()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: int port> = $i0;

        $r7 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r1);

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    protected void stop()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.util.Iterator r1;
        gov.nist.javax.sip.SipStackImpl $r2, $r8;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.Collection $r4;
        gov.nist.javax.sip.EventScanner $r5;
        java.lang.Object $r6;
        gov.nist.javax.sip.ListeningPointImpl $r7;
        gov.nist.core.StackLogger $r9;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r2.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Exiting provider");

     label1:
        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (gov.nist.javax.sip.ListeningPointImpl) $r6;

        virtualinvoke $r7.<gov.nist.javax.sip.ListeningPointImpl: void removeSipProvider()>();

        goto label2;

     label3:
        $r5 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r5.<gov.nist.javax.sip.EventScanner: void stop()>();

        return;
    }

    public void transactionErrorEvent(gov.nist.javax.sip.stack.SIPTransactionErrorEvent)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.stack.SIPTransactionErrorEvent r1;
        gov.nist.javax.sip.stack.SIPTransaction r2, $r20, $r28, $r44;
        java.lang.Object r3, r6, r10, $r14;
        javax.sip.Timeout r4, r7, r11;
        javax.sip.TimeoutEvent r5, r8, r12, $r18, $r19, $r29, $r31, $r39, $r48;
        javax.sip.address.Hop r9, r13;
        int $i0, $i1, $i2;
        javax.sip.Transaction $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javax.sip.Dialog $r16;
        javax.sip.ClientTransaction $r17, $r27, $r38;
        gov.nist.javax.sip.SipStackImpl $r21, $r24, $r32, $r35, $r36, $r43, $r46;
        javax.sip.ServerTransaction $r22, $r34, $r47;
        gov.nist.core.StackLogger $r23, $r45;
        javax.sip.address.Router $r25, $r33, $r40, $r42;
        gov.nist.javax.sip.stack.SIPClientTransaction $r26, $r37;
        gov.nist.javax.sip.address.RouterExt $r30, $r41;
        java.lang.StringBuilder $r49, $r50, $r51;
        java.lang.String $r52;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionErrorEvent;

        $r14 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r2 = (gov.nist.javax.sip.stack.SIPTransaction) $r14;

        $i0 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()>();

        if $i0 != 2 goto label06;

        $r35 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r35.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label01;

        $r46 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r45 = virtualinvoke $r46.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TransportError occured on ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r45.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r52);

     label01:
        r10 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r11 = <javax.sip.Timeout: javax.sip.Timeout TRANSACTION>;

        $z4 = r10 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z4 == 0 goto label04;

        $r48 = new javax.sip.TimeoutEvent;

        $r47 = (javax.sip.ServerTransaction) r10;

        specialinvoke $r48.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Timeout)>(r0, $r47, r11);

        r12 = $r48;

     label02:
        $r44 = (gov.nist.javax.sip.stack.SIPTransaction) r10;

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r12, $r44);

     label03:
        return;

     label04:
        $r37 = (gov.nist.javax.sip.stack.SIPClientTransaction) r10;

        r13 = virtualinvoke $r37.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.address.Hop getNextHop()>();

        $r36 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r40 = virtualinvoke $r36.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $z5 = $r40 instanceof gov.nist.javax.sip.address.RouterExt;

        if $z5 == 0 goto label05;

        $r43 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r42 = virtualinvoke $r43.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $r41 = (gov.nist.javax.sip.address.RouterExt) $r42;

        interfaceinvoke $r41.<gov.nist.javax.sip.address.RouterExt: void transactionTimeout(javax.sip.address.Hop)>(r13);

     label05:
        $r39 = new javax.sip.TimeoutEvent;

        $r38 = (javax.sip.ClientTransaction) r10;

        specialinvoke $r39.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction,javax.sip.Timeout)>(r0, $r38, r11);

        r12 = $r39;

        goto label02;

     label06:
        $i2 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()>();

        if $i2 != 1 goto label10;

        r6 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r7 = <javax.sip.Timeout: javax.sip.Timeout TRANSACTION>;

        $z1 = r6 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z1 == 0 goto label08;

        $r31 = new javax.sip.TimeoutEvent;

        $r34 = (javax.sip.ServerTransaction) r6;

        specialinvoke $r31.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Timeout)>(r0, $r34, r7);

        r8 = $r31;

     label07:
        $r28 = (gov.nist.javax.sip.stack.SIPTransaction) r6;

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r8, $r28);

        return;

     label08:
        $r26 = (gov.nist.javax.sip.stack.SIPClientTransaction) r6;

        r9 = virtualinvoke $r26.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.address.Hop getNextHop()>();

        $r24 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r25 = virtualinvoke $r24.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $z2 = $r25 instanceof gov.nist.javax.sip.address.RouterExt;

        if $z2 == 0 goto label09;

        $r32 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r33 = virtualinvoke $r32.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $r30 = (gov.nist.javax.sip.address.RouterExt) $r33;

        interfaceinvoke $r30.<gov.nist.javax.sip.address.RouterExt: void transactionTimeout(javax.sip.address.Hop)>(r9);

     label09:
        $r29 = new javax.sip.TimeoutEvent;

        $r27 = (javax.sip.ClientTransaction) r6;

        specialinvoke $r29.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction,javax.sip.Timeout)>(r0, $r27, r7);

        r8 = $r29;

        goto label07;

     label10:
        $i1 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()>();

        if $i1 != 3 goto label03;

        r3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        $r15 = (javax.sip.Transaction) r3;

        $r16 = interfaceinvoke $r15.<javax.sip.Transaction: javax.sip.Dialog getDialog()>();

        if $r16 == null goto label11;

        $r21 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r23 = virtualinvoke $r21.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.String,gov.nist.core.StackLogger)>("Unexpected event !", $r23);

     label11:
        r4 = <javax.sip.Timeout: javax.sip.Timeout RETRANSMIT>;

        $z0 = r3 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z0 == 0 goto label13;

        $r19 = new javax.sip.TimeoutEvent;

        $r22 = (javax.sip.ServerTransaction) r3;

        specialinvoke $r19.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Timeout)>(r0, $r22, r4);

        r5 = $r19;

     label12:
        $r20 = (gov.nist.javax.sip.stack.SIPTransaction) r3;

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r5, $r20);

        return;

     label13:
        $r18 = new javax.sip.TimeoutEvent;

        $r17 = (javax.sip.ClientTransaction) r3;

        specialinvoke $r18.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction,javax.sip.Timeout)>(r0, $r17, r4);

        r5 = $r18;

        goto label12;
    }
}
