public final class org.apache.http.conn.MultihomePlainSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.SocketFactory
{
    private static final org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY;

    static void <clinit>()
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;

        $r0 = new org.apache.http.conn.MultihomePlainSocketFactory;

        specialinvoke $r0.<org.apache.http.conn.MultihomePlainSocketFactory: void <init>()>();

        <org.apache.http.conn.MultihomePlainSocketFactory: org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY> = $r0;

        return;
    }

    private void <init>()
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.http.conn.MultihomePlainSocketFactory getSocketFactory()
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;

        $r0 = <org.apache.http.conn.MultihomePlainSocketFactory: org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY>;

        return $r0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;
        java.net.Socket r1, $r21;
        java.lang.String r2;
        int i0, i1, i2, $i3;
        java.net.InetAddress r3, r9;
        org.apache.http.params.HttpParams r4;
        java.net.InetAddress[] r5;
        java.util.ArrayList r6, $r13;
        java.io.IOException r7, r10, $r19;
        java.util.Iterator r8;
        java.net.SocketTimeoutException r11, $r20;
        java.net.InetSocketAddress $r12, $r16;
        java.util.List $r14;
        java.lang.Object $r15;
        boolean $z1;
        java.lang.IllegalArgumentException $r17, $r18;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.net.InetAddress;

        i1 := @parameter4: int;

        r4 := @parameter5: org.apache.http.params.HttpParams;

        if r2 != null goto label01;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null.");

        throw $r17;

     label01:
        if r4 != null goto label02;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null.");

        throw $r18;

     label02:
        if r1 != null goto label03;

        r1 = virtualinvoke r0.<org.apache.http.conn.MultihomePlainSocketFactory: java.net.Socket createSocket()>();

     label03:
        if r3 != null goto label04;

        if i1 <= 0 goto label06;

     label04:
        if i1 >= 0 goto label05;

        i1 = 0;

     label05:
        $r12 = new java.net.InetSocketAddress;

        specialinvoke $r12.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r3, i1);

        virtualinvoke r1.<java.net.Socket: void bind(java.net.SocketAddress)>($r12);

     label06:
        i2 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>(r4);

        r5 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>(r2);

        $r13 = new java.util.ArrayList;

        $i3 = lengthof r5;

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i3);

        r6 = $r13;

        $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r5);

        interfaceinvoke r6.<java.util.List: boolean addAll(java.util.Collection)>($r14);

        staticinvoke <java.util.Collections: void shuffle(java.util.List)>(r6);

        r7 = null;

        r8 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r15 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.net.InetAddress) $r15;

     label08:
        $r16 = new java.net.InetSocketAddress;

        specialinvoke $r16.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r9, i0);

        virtualinvoke r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r16, i2);

     label09:
        if r7 == null goto label12;

        throw r7;

     label10:
        $r20 := @caughtexception;

        r11 = $r20;

        throw r11;

     label11:
        $r19 := @caughtexception;

        r10 = $r19;

        $r21 = new java.net.Socket;

        specialinvoke $r21.<java.net.Socket: void <init>()>();

        r1 = $r21;

        r7 = r10;

        goto label07;

     label12:
        return r1;

        catch java.net.SocketTimeoutException from label08 to label09 with label10;
        catch java.io.IOException from label08 to label09 with label11;
    }

    public java.net.Socket createSocket()
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;
        java.net.Socket $r1;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        $r1 = new java.net.Socket;

        specialinvoke $r1.<java.net.Socket: void <init>()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;
        java.lang.Object r1;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;
        java.lang.Class $r1;
        int $i0;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        $r1 = class "org/apache/http/conn/scheme/PlainSocketFactory";

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public final boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;
        java.net.Socket r1;
        java.lang.Class $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r4, $r5;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        r1 := @parameter0: java.net.Socket;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null.");

        throw $r5;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == class "java/net/Socket" goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory.");

        throw $r4;

     label2:
        $z0 = virtualinvoke r1.<java.net.Socket: boolean isClosed()>();

        if $z0 == 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r3;

     label3:
        return 0;
    }
}
