public class gov.nist.javax.sip.stack.ServerLog extends java.lang.Object implements gov.nist.core.ServerLogger
{
    private java.lang.String auxInfo;
    private java.util.Properties configurationProperties;
    private java.lang.String description;
    private boolean logContent;
    private java.lang.String logFileName;
    private java.io.PrintWriter printWriter;
    private gov.nist.javax.sip.stack.SIPTransactionStack sipStack;
    private java.lang.String stackIpAddress;
    protected gov.nist.core.StackLogger stackLogger;
    protected int traceLevel;

    public void <init>()
    {
        gov.nist.javax.sip.stack.ServerLog r0;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.stack.ServerLog: int traceLevel> = 16;

        return;
    }

    private void logMessage(java.lang.String)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        java.lang.String r1;
        java.io.PrintWriter $r2, $r5;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3;
        boolean $z0;
        gov.nist.core.StackLogger $r4;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void checkLogFile()>();

        $r2 = r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter>;

        if $r2 == null goto label1;

        $r5 = r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter>;

        virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>(r1);

     label1:
        $r3 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r4.<gov.nist.core.StackLogger: void logInfo(java.lang.String)>(r1);

     label2:
        return;
    }

    private void logMessage(java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, long)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r7, $r11;
        boolean z0;
        long l0, l1;
        gov.nist.javax.sip.LogRecord r8;
        gov.nist.javax.sip.stack.SIPTransactionStack $r9;
        gov.nist.javax.sip.LogRecordFactory $r10;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        l0 := @parameter8: long;

        l1 := @parameter9: long;

        $r9 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r10 = $r9.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.LogRecordFactory logRecordFactory>;

        r8 = interfaceinvoke $r10.<gov.nist.javax.sip.LogRecordFactory: gov.nist.javax.sip.LogRecord createLogRecord(java.lang.String,java.lang.String,java.lang.String,long,boolean,java.lang.String,java.lang.String,java.lang.String,long)>(r1, r2, r3, l0, z0, r5, r7, r4, l1);

        if r8 == null goto label1;

        $r11 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void logMessage(java.lang.String)>($r11);

     label1:
        return;
    }

    private void setProperties(java.util.Properties)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        java.util.Properties r1;
        java.lang.String r2, r3, $r5, $r6, $r7, $r14;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int i0, i1;
        java.lang.NumberFormatException $r8;
        java.io.PrintStream $r9, $r13;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: java.util.Properties;

        r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties> = r1;

        $r5 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.STACK_NAME");

        r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String description> = $r5;

        $r6 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.IP_ADDRESS");

        r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String stackIpAddress> = $r6;

        $r7 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.SERVER_LOG");

        r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String logFileName> = $r7;

        r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.TRACE_LEVEL");

        r3 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.LOG_MESSAGE_CONTENT");

        if r3 == null goto label03;

        $z7 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z7 == 0 goto label03;

        z0 = 1;

     label01:
        r0.<gov.nist.javax.sip.stack.ServerLog: boolean logContent> = z0;

        if r2 == null goto label02;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("LOG4J");

        if $z1 == 0 goto label04;

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void checkLogFile()>();

        return;

     label03:
        z0 = 0;

        goto label01;

     label04:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("DEBUG");

        if $z2 == 0 goto label09;

     label05:
        i0 = 32;

     label06:
        virtualinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void setTraceLevel(int)>(i0);

     label07:
        goto label02;

     label08:
        $r8 := @caughtexception;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ServerLog: WARNING Bad integer ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r14);

        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("logging dislabled ");

        virtualinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void setTraceLevel(int)>(0);

        goto label02;

     label09:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("INFO");

        if $z3 == 0 goto label11;

     label10:
        i0 = 16;

        goto label06;

     label11:
        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("ERROR");

        if $z5 == 0 goto label13;

     label12:
        i0 = 4;

        goto label06;

     label13:
        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("NONE");

        if $z4 != 0 goto label17;

        $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("OFF");

        if $z6 == 0 goto label15;

     label14:
        goto label17;

     label15:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label16:
        i0 = i1;

        goto label06;

     label17:
        i0 = 0;

        goto label06;

        catch java.lang.NumberFormatException from label04 to label05 with label08;
        catch java.lang.NumberFormatException from label06 to label07 with label08;
        catch java.lang.NumberFormatException from label09 to label10 with label08;
        catch java.lang.NumberFormatException from label11 to label12 with label08;
        catch java.lang.NumberFormatException from label13 to label14 with label08;
        catch java.lang.NumberFormatException from label15 to label16 with label08;
    }

    public void checkLogFile()
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        boolean z0, z1, $z2, $z3, $z4;
        java.io.File r1, $r5;
        java.lang.String r3, $r4, $r6, $r9, $r18, $r21, $r29, $r34, $r38, $r42, $r45, $r47, $r50, $r53, $r61, $r63, $r67, $r72, $r77, $r87, $r92, $r95, $r98, $r101, $r106, $r109, $r113, $r116, $r125, $r126;
        int $i0;
        java.io.PrintWriter $r7, $r12, $r13, $r36;
        java.util.Properties $r8, $r15, $r22, $r25, $r33, $r46, $r55, $r74, $r83, $r88, $r91, $r97, $r104, $r110;
        java.lang.Boolean $r10;
        java.io.FileWriter $r11;
        java.lang.StringBuilder $r14, $r16, $r17, $r19, $r20, $r23, $r24, $r26, $r27, $r28, $r30, $r31, $r32, $r35, $r37, $r39, $r40, $r41, $r43, $r44, $r48, $r49, $r51, $r54, $r56, $r58, $r60, $r62, $r66, $r70, $r71, $r73, $r75, $r76, $r80, $r81, $r82, $r84, $r85, $r86, $r89, $r90, $r93, $r94, $r96, $r99, $r100, $r102, $r103, $r107, $r108, $r111, $r112, $r114, $r115, $r117, $r119, $r122, $r123, $r124, $r127;
        gov.nist.javax.sip.stack.SIPTransactionStack $r52, $r78;
        gov.nist.core.StackLogger $r57, $r59, $r64, $r65, $r68, $r69, $r79, $r105, $r118, $r120, $r128, $r129;
        java.io.IOException $r121;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        z0 = 1;

        $r4 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String logFileName>;

        if $r4 == null goto label01;

        $i0 = r0.<gov.nist.javax.sip.stack.ServerLog: int traceLevel>;

        if $i0 >= 16 goto label02;

     label01:
        return;

     label02:
        $r5 = new java.io.File;

        $r6 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String logFileName>;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6);

        r1 = $r5;

        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label03;

        virtualinvoke r1.<java.io.File: boolean createNewFile()>();

        r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter> = null;

     label03:
        $r7 = r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter>;

        if $r7 != null goto label01;

        $r8 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r9 = virtualinvoke $r8.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.SERVER_LOG_OVERWRITE");

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r9);

        z1 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        r3 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String logFileName>;

     label04:
        if z1 != 0 goto label10;

     label05:
        $r12 = new java.io.PrintWriter;

        $r11 = new java.io.FileWriter;

        specialinvoke $r11.<java.io.FileWriter: void <init>(java.lang.String,boolean)>(r3, z0);

        specialinvoke $r12.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r11, 1);

        r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter> = $r12;

        $r13 = r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<!-- Use the  Trace Viewer in src/tools/tracesviewer to view this  trace  \nHere are the stack configuration properties \njavax.sip.IP_ADDRESS= ");

        $r15 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r18 = virtualinvoke $r15.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.IP_ADDRESS");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("javax.sip.STACK_NAME= ");

        $r22 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r21 = virtualinvoke $r22.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.STACK_NAME");

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("javax.sip.ROUTER_PATH= ");

        $r25 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r29 = virtualinvoke $r25.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.ROUTER_PATH");

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("javax.sip.OUTBOUND_PROXY= ");

        $r33 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r34 = virtualinvoke $r33.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.OUTBOUND_PROXY");

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-->");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintWriter: void println(java.lang.String)>($r38);

        $r36 = r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<description\n logDescription=\"");

        $r42 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String description>;

        $r39 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\n name=\"");

        $r46 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r45 = virtualinvoke $r46.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.STACK_NAME");

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\n auxInfo=\"");

        $r50 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String auxInfo>;

        $r49 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>\n ");

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r36.<java.io.PrintWriter: void println(java.lang.String)>($r47);

        $r53 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String auxInfo>;

        if $r53 == null goto label07;

        $r78 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z4 = virtualinvoke $r78.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label01;

        $r79 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Here are the stack configuration properties \njavax.sip.IP_ADDRESS= ");

        $r74 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r77 = virtualinvoke $r74.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.IP_ADDRESS");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        $r86 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r85 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("javax.sip.ROUTER_PATH= ");

        $r88 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r87 = virtualinvoke $r88.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.ROUTER_PATH");

        $r82 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

        $r81 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r84 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("javax.sip.OUTBOUND_PROXY= ");

        $r83 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r95 = virtualinvoke $r83.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.OUTBOUND_PROXY");

        $r96 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r95);

        $r93 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gov.nist.javax.sip.CACHE_CLIENT_CONNECTIONS= ");

        $r91 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r92 = virtualinvoke $r91.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.CACHE_CLIENT_CONNECTIONS");

        $r89 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r103 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gov.nist.javax.sip.CACHE_SERVER_CONNECTIONS= ");

        $r104 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r101 = virtualinvoke $r104.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.CACHE_SERVER_CONNECTIONS");

        $r102 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r101);

        $r99 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gov.nist.javax.sip.REENTRANT_LISTENER= ");

        $r97 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r98 = virtualinvoke $r97.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.REENTRANT_LISTENER");

        $r112 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r98);

        $r111 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gov.nist.javax.sip.THREAD_POOL_SIZE= ");

        $r110 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r109 = virtualinvoke $r110.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.THREAD_POOL_SIZE");

        $r108 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r109);

        $r107 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r106 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r79.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r106);

        $r105 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r105.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>(" ]]> ");

        $r120 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r120.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("</debug>");

        $r118 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        $r119 = new java.lang.StringBuilder;

        specialinvoke $r119.<java.lang.StringBuilder: void <init>()>();

        $r117 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<description\n logDescription=\"");

        $r116 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String description>;

        $r115 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r116);

        $r114 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\n name=\"");

        $r113 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String stackIpAddress>;

        $r123 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r113);

        $r122 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\n auxInfo=\"");

        $r125 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String auxInfo>;

        $r124 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r125);

        $r127 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>\n ");

        $r126 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r118.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r126);

        $r129 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r129.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("<debug>");

        $r128 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r128.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("<![CDATA[ ");

     label06:
        return;

     label07:
        $r52 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z3 = virtualinvoke $r52.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label01;

        $r57 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Here are the stack configuration properties \n");

        $r55 = r0.<gov.nist.javax.sip.stack.ServerLog: java.util.Properties configurationProperties>;

        $r54 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r55);

        $r62 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r57.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r63);

        $r64 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r64.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>(" ]]>");

        $r65 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r65.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("</debug>");

        $r59 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<description\n logDescription=\"");

        $r61 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String description>;

        $r70 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\n name=\"");

        $r72 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String stackIpAddress>;

        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r66 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" />\n");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r59.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r67);

        $r68 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r68.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("<debug>");

        $r69 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r69.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("<![CDATA[ ");

     label08:
        return;

     label09:
        $r121 := @caughtexception;

        return;

     label10:
        z0 = 0;

        goto label05;

        catch java.io.IOException from label02 to label03 with label09;
        catch java.io.IOException from label03 to label04 with label09;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label09;
    }

    public void closeLogFile()
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        java.lang.Throwable r1, $r4;
        java.io.PrintWriter $r2, $r3;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        entermonitor r0;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter>;

        if $r2 == null goto label2;

        $r3 = r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter>;

        virtualinvoke $r3.<java.io.PrintWriter: void close()>();

        r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getLogFileName()
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        $r1 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String logFileName>;

        return $r1;
    }

    public int getTraceLevel()
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        $i0 = r0.<gov.nist.javax.sip.stack.ServerLog: int traceLevel>;

        return $i0;
    }

    public void logException(java.lang.Exception)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        java.lang.Exception r1;
        int $i0;
        java.io.PrintWriter $r2, $r3;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: java.lang.Exception;

        $i0 = r0.<gov.nist.javax.sip.stack.ServerLog: int traceLevel>;

        if $i0 < 4 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void checkLogFile()>();

        virtualinvoke r1.<java.lang.Exception: void printStackTrace()>();

        $r2 = r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter>;

        if $r2 == null goto label1;

        $r3 = r0.<gov.nist.javax.sip.stack.ServerLog: java.io.PrintWriter printWriter>;

        virtualinvoke r1.<java.lang.Exception: void printStackTrace(java.io.PrintWriter)>($r3);

     label1:
        return;
    }

    public void logMessage(gov.nist.javax.sip.message.SIPMessage, java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        java.lang.String r2, r3, r4;
        boolean z0;
        long $l0;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.lang.String,java.lang.String,java.lang.String,boolean,long)>(r1, r2, r3, r4, z0, $l0);

        return;
    }

    public void logMessage(gov.nist.javax.sip.message.SIPMessage, java.lang.String, java.lang.String, java.lang.String, boolean, long)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        java.lang.String r2, r3, r4, r6, r7, r8, r9, $r11;
        boolean z0, $z1;
        long l0, l1;
        gov.nist.javax.sip.header.CallID r5;
        javax.sip.header.TimeStampHeader r10;
        javax.sip.header.CallIdHeader $r12;
        javax.sip.header.Header $r13;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        l0 := @parameter5: long;

        virtualinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void checkLogFile()>();

        $r12 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CallIdHeader getCallId()>();

        r5 = (gov.nist.javax.sip.header.CallID) $r12;

        r6 = null;

        if r5 == null goto label1;

        r6 = virtualinvoke r5.<gov.nist.javax.sip.header.CallID: java.lang.String getCallId()>();

     label1:
        $r11 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getFirstLine()>();

        r7 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        $z1 = r0.<gov.nist.javax.sip.stack.ServerLog: boolean logContent>;

        if $z1 == 0 goto label4;

        r8 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String encode()>();

     label2:
        r9 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getTransactionId()>();

        $r13 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.Header getHeader(java.lang.String)>("Timestamp");

        r10 = (javax.sip.header.TimeStampHeader) $r13;

        if r10 != null goto label5;

        l1 = 0L;

     label3:
        specialinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void logMessage(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long)>(r8, r2, r3, z0, r6, r7, r4, r9, l0, l1);

        return;

     label4:
        r8 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String encodeMessage()>();

        goto label2;

     label5:
        l1 = interfaceinvoke r10.<javax.sip.header.TimeStampHeader: long getTime()>();

        goto label3;
    }

    public void logMessage(gov.nist.javax.sip.message.SIPMessage, java.lang.String, java.lang.String, boolean, long)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        java.lang.String r2, r3, r5, r6, r7, r8, $r10, $r11;
        boolean z0, $z1;
        long l0, l1;
        gov.nist.javax.sip.header.CallID r4;
        javax.sip.header.TimeStampHeader r9;
        javax.sip.header.CallIdHeader $r12;
        javax.sip.header.Header $r13;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        l0 := @parameter4: long;

        virtualinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void checkLogFile()>();

        $r10 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getFirstLine()>();

        if $r10 != null goto label1;

        return;

     label1:
        $r12 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CallIdHeader getCallId()>();

        r4 = (gov.nist.javax.sip.header.CallID) $r12;

        r5 = null;

        if r4 == null goto label2;

        r5 = virtualinvoke r4.<gov.nist.javax.sip.header.CallID: java.lang.String getCallId()>();

     label2:
        $r11 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getFirstLine()>();

        r6 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        $z1 = r0.<gov.nist.javax.sip.stack.ServerLog: boolean logContent>;

        if $z1 == 0 goto label5;

        r7 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String encode()>();

     label3:
        r8 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getTransactionId()>();

        $r13 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.Header getHeader(java.lang.String)>("Timestamp");

        r9 = (javax.sip.header.TimeStampHeader) $r13;

        if r9 != null goto label6;

        l1 = 0L;

     label4:
        specialinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void logMessage(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long)>(r7, r2, r3, z0, r5, r6, null, r8, l0, l1);

        return;

     label5:
        r7 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String encodeMessage()>();

        goto label3;

     label6:
        l1 = interfaceinvoke r9.<javax.sip.header.TimeStampHeader: long getTime()>();

        goto label4;
    }

    public boolean needsLogging()
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        $r1 = r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String logFileName>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public void setAuxInfo(java.lang.String)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: java.lang.String;

        r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String auxInfo> = r1;

        return;
    }

    public void setLevel(int)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        i0 := @parameter0: int;

        return;
    }

    public void setLogFileName(java.lang.String)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: java.lang.String;

        r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String logFileName> = r1;

        return;
    }

    public void setSipStack(javax.sip.SipStack)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        javax.sip.SipStack r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r4;
        gov.nist.core.StackLogger $r5;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: javax.sip.SipStack;

        $z0 = r1 instanceof gov.nist.javax.sip.stack.SIPTransactionStack;

        if $z0 == 0 goto label1;

        $r3 = (gov.nist.javax.sip.stack.SIPTransactionStack) r1;

        r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.javax.sip.stack.SIPTransactionStack sipStack> = $r3;

        $r4 = r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        r0.<gov.nist.javax.sip.stack.ServerLog: gov.nist.core.StackLogger stackLogger> = $r5;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sipStack must be a SIPTransactionStack");

        throw $r2;
    }

    public void setStackIpAddress(java.lang.String)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: java.lang.String;

        r0.<gov.nist.javax.sip.stack.ServerLog: java.lang.String stackIpAddress> = r1;

        return;
    }

    public void setStackProperties(java.util.Properties)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        java.util.Properties r1;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        r1 := @parameter0: java.util.Properties;

        specialinvoke r0.<gov.nist.javax.sip.stack.ServerLog: void setProperties(java.util.Properties)>(r1);

        return;
    }

    public void setTraceLevel(int)
    {
        gov.nist.javax.sip.stack.ServerLog r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.ServerLog;

        i0 := @parameter0: int;

        r0.<gov.nist.javax.sip.stack.ServerLog: int traceLevel> = i0;

        return;
    }
}
