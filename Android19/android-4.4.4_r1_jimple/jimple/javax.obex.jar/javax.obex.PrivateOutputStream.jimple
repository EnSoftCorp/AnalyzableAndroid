public final class javax.obex.PrivateOutputStream extends java.io.OutputStream
{
    private java.io.ByteArrayOutputStream mArray;
    private int mMaxPacketSize;
    private boolean mOpen;
    private javax.obex.BaseStream mParent;

    public void <init>(javax.obex.BaseStream, int)
    {
        javax.obex.PrivateOutputStream r0;
        javax.obex.BaseStream r1;
        int i0;
        java.io.ByteArrayOutputStream $r2;

        r0 := @this: javax.obex.PrivateOutputStream;

        r1 := @parameter0: javax.obex.BaseStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent> = r1;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray> = $r2;

        r0.<javax.obex.PrivateOutputStream: int mMaxPacketSize> = i0;

        r0.<javax.obex.PrivateOutputStream: boolean mOpen> = 1;

        return;
    }

    private void ensureOpen() throws java.io.IOException
    {
        javax.obex.PrivateOutputStream r0;
        javax.obex.BaseStream $r1;
        boolean $z0;
        java.io.IOException $r2;

        r0 := @this: javax.obex.PrivateOutputStream;

        $r1 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r1.<javax.obex.BaseStream: void ensureOpen()>();

        $z0 = r0.<javax.obex.PrivateOutputStream: boolean mOpen>;

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Output stream is closed");

        throw $r2;

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        javax.obex.PrivateOutputStream r0;
        javax.obex.BaseStream $r1;

        r0 := @this: javax.obex.PrivateOutputStream;

        r0.<javax.obex.PrivateOutputStream: boolean mOpen> = 0;

        $r1 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r1.<javax.obex.BaseStream: void streamClosed(boolean)>(0);

        return;
    }

    public boolean isClosed()
    {
        javax.obex.PrivateOutputStream r0;
        boolean $z0;

        r0 := @this: javax.obex.PrivateOutputStream;

        $z0 = r0.<javax.obex.PrivateOutputStream: boolean mOpen>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public byte[] readBytes(int)
    {
        javax.obex.PrivateOutputStream r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable r1, $r8;
        byte[] r2, r3;
        java.io.ByteArrayOutputStream $r4, $r5, $r6, $r7;

        r0 := @this: javax.obex.PrivateOutputStream;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r4 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i1 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: int size()>();

        if $i1 <= 0 goto label3;

        $r5 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        r3 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r6 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>();

        r2 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r2, 0, i0);

        $i2 = lengthof r3;

        if $i2 == i0 goto label2;

        $r7 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i3 = lengthof r3;

        $i4 = $i3 - i0;

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r3, i0, $i4);

     label2:
        exitmonitor r0;

        return r2;

     label3:
        r2 = null;

        goto label2;

     label4:
        $r8 := @caughtexception;

        r1 = $r8;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public int size()
    {
        javax.obex.PrivateOutputStream r0;
        java.io.ByteArrayOutputStream $r1;
        int $i0;

        r0 := @this: javax.obex.PrivateOutputStream;

        $r1 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i0 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        return $i0;
    }

    public void write(int) throws java.io.IOException
    {
        javax.obex.PrivateOutputStream r0;
        int i0, $i1, $i2;
        java.lang.Throwable r1, $r6;
        javax.obex.BaseStream $r2, $r5;
        java.io.ByteArrayOutputStream $r3, $r4;

        r0 := @this: javax.obex.PrivateOutputStream;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<javax.obex.PrivateOutputStream: void ensureOpen()>();

        $r2 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r2.<javax.obex.BaseStream: void ensureNotDone()>();

        $r3 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(int)>(i0);

        $r4 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i1 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: int size()>();

        $i2 = r0.<javax.obex.PrivateOutputStream: int mMaxPacketSize>;

        if $i1 != $i2 goto label2;

        $r5 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r5.<javax.obex.BaseStream: boolean continueOperation(boolean,boolean)>(1, 0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void write(byte[]) throws java.io.IOException
    {
        javax.obex.PrivateOutputStream r0;
        byte[] r1;
        int $i0;

        r0 := @this: javax.obex.PrivateOutputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<javax.obex.PrivateOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        javax.obex.PrivateOutputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.Throwable r2, $r10;
        java.lang.IndexOutOfBoundsException $r3;
        javax.obex.BaseStream $r4, $r9;
        java.io.ByteArrayOutputStream $r5, $r6, $r7, $r8;
        java.io.IOException $r11;

        r0 := @this: javax.obex.PrivateOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

        i2 = i0;

        i3 = i1;

        if r1 != null goto label03;

     label01:
        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("buffer is null");

        throw $r11;

     label02:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r0;

        throw r2;

     label03:
        $i5 = i0 | i1;

        if $i5 < 0 goto label05;

     label04:
        $i6 = lengthof r1;

        $i7 = $i6 - i0;

        if i1 <= $i7 goto label06;

     label05:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("index outof bound");

        throw $r3;

     label06:
        specialinvoke r0.<javax.obex.PrivateOutputStream: void ensureOpen()>();

        $r4 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r4.<javax.obex.BaseStream: void ensureNotDone()>();

     label07:
        $r5 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i8 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: int size()>();

        $i9 = i3 + $i8;

        $i10 = r0.<javax.obex.PrivateOutputStream: int mMaxPacketSize>;

        if $i9 < $i10 goto label11;

        $i11 = r0.<javax.obex.PrivateOutputStream: int mMaxPacketSize>;

        $r7 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i12 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: int size()>();

        i4 = $i11 - $i12;

        $r8 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i2, i4);

     label08:
        i2 = i2 + i4;

        i3 = i3 - i4;

     label09:
        $r9 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r9.<javax.obex.BaseStream: boolean continueOperation(boolean,boolean)>(1, 0);

     label10:
        goto label07;

     label11:
        if i3 <= 0 goto label13;

     label12:
        $r6 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i2, i3);

     label13:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label07 to label08 with label02;
        catch java.lang.Throwable from label09 to label10 with label02;
        catch java.lang.Throwable from label12 to label13 with label02;
    }
}
