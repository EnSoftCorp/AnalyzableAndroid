public class javax.crypto.Mac extends java.lang.Object implements java.lang.Cloneable
{
    private static final org.apache.harmony.security.fortress.Engine ENGINE;
    private final java.lang.String algorithm;
    private boolean isInitMac;
    private final java.security.Provider provider;
    private final javax.crypto.MacSpi spiImpl;

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("Mac");

        <javax.crypto.Mac: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        return;
    }

    protected void <init>(javax.crypto.MacSpi, java.security.Provider, java.lang.String)
    {
        javax.crypto.Mac r0;
        javax.crypto.MacSpi r1;
        java.security.Provider r2;
        java.lang.String r3;

        r0 := @this: javax.crypto.Mac;

        r1 := @parameter0: javax.crypto.MacSpi;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.crypto.Mac: java.security.Provider provider> = r2;

        r0.<javax.crypto.Mac: java.lang.String algorithm> = r3;

        r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl> = r1;

        r0.<javax.crypto.Mac: boolean isInitMac> = 0;

        return;
    }

    public static final javax.crypto.Mac getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r1;
        org.apache.harmony.security.fortress.Engine $r2;
        javax.crypto.Mac $r3;
        java.lang.Object $r4;
        java.security.Provider $r5;
        javax.crypto.MacSpi $r6;
        java.lang.NullPointerException $r7;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r7;

     label1:
        $r2 = <javax.crypto.Mac: org.apache.harmony.security.fortress.Engine ENGINE>;

        r1 = virtualinvoke $r2.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)>(r0, null);

        $r3 = new javax.crypto.Mac;

        $r4 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $r6 = (javax.crypto.MacSpi) $r4;

        $r5 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        specialinvoke $r3.<javax.crypto.Mac: void <init>(javax.crypto.MacSpi,java.security.Provider,java.lang.String)>($r6, $r5, r0);

        return $r3;
    }

    public static final javax.crypto.Mac getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1;
        java.security.Provider r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        javax.crypto.Mac $r4;
        java.security.NoSuchProviderException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provider is null or empty");

        throw $r3;

     label2:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);

        if r2 != null goto label3;

        $r5 = new java.security.NoSuchProviderException;

        specialinvoke $r5.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label3:
        $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.security.Provider)>(r0, r2);

        return $r4;
    }

    public static final javax.crypto.Mac getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1;
        javax.crypto.Mac $r2;
        org.apache.harmony.security.fortress.Engine $r3;
        java.lang.Object $r4;
        javax.crypto.MacSpi $r5;
        java.lang.NullPointerException $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r7;

     label1:
        if r0 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r6;

     label2:
        $r2 = new javax.crypto.Mac;

        $r3 = <javax.crypto.Mac: org.apache.harmony.security.fortress.Engine ENGINE>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)>(r0, r1, null);

        $r5 = (javax.crypto.MacSpi) $r4;

        specialinvoke $r2.<javax.crypto.Mac: void <init>(javax.crypto.MacSpi,java.security.Provider,java.lang.String)>($r5, r1, r0);

        return $r2;
    }

    public final java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        javax.crypto.Mac r0, r1, $r2;
        javax.crypto.MacSpi $r3, $r7;
        java.lang.Object $r4;
        java.lang.String $r5;
        java.security.Provider $r6;
        boolean $z0;

        r0 := @this: javax.crypto.Mac;

        $r2 = new javax.crypto.Mac;

        $r3 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        $r4 = virtualinvoke $r3.<javax.crypto.MacSpi: java.lang.Object clone()>();

        $r7 = (javax.crypto.MacSpi) $r4;

        $r6 = r0.<javax.crypto.Mac: java.security.Provider provider>;

        $r5 = r0.<javax.crypto.Mac: java.lang.String algorithm>;

        specialinvoke $r2.<javax.crypto.Mac: void <init>(javax.crypto.MacSpi,java.security.Provider,java.lang.String)>($r7, $r6, $r5);

        r1 = $r2;

        $z0 = r0.<javax.crypto.Mac: boolean isInitMac>;

        r1.<javax.crypto.Mac: boolean isInitMac> = $z0;

        return r1;
    }

    public final void doFinal(byte[], int) throws javax.crypto.ShortBufferException, java.lang.IllegalStateException
    {
        javax.crypto.Mac r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        javax.crypto.ShortBufferException $r3, $r10, $r15;
        java.lang.StringBuilder $r4, $r5, $r6, $r11, $r12, $r13, $r14;
        java.lang.String $r7, $r16;
        javax.crypto.MacSpi $r8, $r9;
        java.lang.IllegalStateException $r17;

        r0 := @this: javax.crypto.Mac;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $z0 = r0.<javax.crypto.Mac: boolean isInitMac>;

        if $z0 != 0 goto label1;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>()>();

        throw $r17;

     label1:
        if r1 != null goto label2;

        $r15 = new javax.crypto.ShortBufferException;

        specialinvoke $r15.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("output == null");

        throw $r15;

     label2:
        if i0 < 0 goto label3;

        $i2 = lengthof r1;

        if i0 < $i2 goto label4;

     label3:
        $r3 = new javax.crypto.ShortBufferException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect outOffset: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label4:
        $r8 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        i1 = virtualinvoke $r8.<javax.crypto.MacSpi: int engineGetMacLength()>();

        $i3 = lengthof r1;

        $i4 = $i3 - i0;

        if i1 <= $i4 goto label5;

        $r10 = new javax.crypto.ShortBufferException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output buffer is short. Needed ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes.");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label5:
        $r9 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        r2 = virtualinvoke $r9.<javax.crypto.MacSpi: byte[] engineDoFinal()>();

        $i5 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i0, $i5);

        return;
    }

    public final byte[] doFinal() throws java.lang.IllegalStateException
    {
        javax.crypto.Mac r0;
        boolean $z0;
        javax.crypto.MacSpi $r1;
        byte[] $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: javax.crypto.Mac;

        $z0 = r0.<javax.crypto.Mac: boolean isInitMac>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        $r2 = virtualinvoke $r1.<javax.crypto.MacSpi: byte[] engineDoFinal()>();

        return $r2;
    }

    public final byte[] doFinal(byte[]) throws java.lang.IllegalStateException
    {
        javax.crypto.Mac r0;
        byte[] r1, $r3;
        boolean $z0;
        javax.crypto.MacSpi $r2, $r4;
        int $i0;
        java.lang.IllegalStateException $r5;

        r0 := @this: javax.crypto.Mac;

        r1 := @parameter0: byte[];

        $z0 = r0.<javax.crypto.Mac: boolean isInitMac>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        if r1 == null goto label2;

        $r4 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        $i0 = lengthof r1;

        virtualinvoke $r4.<javax.crypto.MacSpi: void engineUpdate(byte[],int,int)>(r1, 0, $i0);

     label2:
        $r2 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        $r3 = virtualinvoke $r2.<javax.crypto.MacSpi: byte[] engineDoFinal()>();

        return $r3;
    }

    public final java.lang.String getAlgorithm()
    {
        javax.crypto.Mac r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.Mac;

        $r1 = r0.<javax.crypto.Mac: java.lang.String algorithm>;

        return $r1;
    }

    public final int getMacLength()
    {
        javax.crypto.Mac r0;
        javax.crypto.MacSpi $r1;
        int $i0;

        r0 := @this: javax.crypto.Mac;

        $r1 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        $i0 = virtualinvoke $r1.<javax.crypto.MacSpi: int engineGetMacLength()>();

        return $i0;
    }

    public final java.security.Provider getProvider()
    {
        javax.crypto.Mac r0;
        java.security.Provider $r1;

        r0 := @this: javax.crypto.Mac;

        $r1 = r0.<javax.crypto.Mac: java.security.Provider provider>;

        return $r1;
    }

    public final void init(java.security.Key) throws java.security.InvalidKeyException
    {
        javax.crypto.Mac r0;
        java.security.Key r1;
        java.security.InvalidAlgorithmParameterException r2, $r5;
        javax.crypto.MacSpi $r3;
        java.security.InvalidKeyException $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: javax.crypto.Mac;

        r1 := @parameter0: java.security.Key;

        if r1 != null goto label1;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r4;

     label1:
        $r3 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        virtualinvoke $r3.<javax.crypto.MacSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r1, null);

        r0.<javax.crypto.Mac: boolean isInitMac> = 1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    public final void init(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Mac r0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        javax.crypto.MacSpi $r3;
        java.security.InvalidKeyException $r4;

        r0 := @this: javax.crypto.Mac;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        if r1 != null goto label1;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r4;

     label1:
        $r3 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        virtualinvoke $r3.<javax.crypto.MacSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r1, r2);

        r0.<javax.crypto.Mac: boolean isInitMac> = 1;

        return;
    }

    public final void reset()
    {
        javax.crypto.Mac r0;
        javax.crypto.MacSpi $r1;

        r0 := @this: javax.crypto.Mac;

        $r1 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        virtualinvoke $r1.<javax.crypto.MacSpi: void engineReset()>();

        return;
    }

    public final void update(byte) throws java.lang.IllegalStateException
    {
        javax.crypto.Mac r0;
        byte b0;
        boolean $z0;
        javax.crypto.MacSpi $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: javax.crypto.Mac;

        b0 := @parameter0: byte;

        $z0 = r0.<javax.crypto.Mac: boolean isInitMac>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        virtualinvoke $r1.<javax.crypto.MacSpi: void engineUpdate(byte)>(b0);

        return;
    }

    public final void update(java.nio.ByteBuffer)
    {
        javax.crypto.Mac r0;
        java.nio.ByteBuffer r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        javax.crypto.MacSpi $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: javax.crypto.Mac;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = r0.<javax.crypto.Mac: boolean isInitMac>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        if r1 == null goto label2;

        $r3 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        virtualinvoke $r3.<javax.crypto.MacSpi: void engineUpdate(java.nio.ByteBuffer)>(r1);

        return;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input == null");

        throw $r2;
    }

    public final void update(byte[]) throws java.lang.IllegalStateException
    {
        javax.crypto.Mac r0;
        byte[] r1;
        boolean $z0;
        int $i0;
        javax.crypto.MacSpi $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: javax.crypto.Mac;

        r1 := @parameter0: byte[];

        $z0 = r0.<javax.crypto.Mac: boolean isInitMac>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        if r1 == null goto label2;

        $r2 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        $i0 = lengthof r1;

        virtualinvoke $r2.<javax.crypto.MacSpi: void engineUpdate(byte[],int,int)>(r1, 0, $i0);

     label2:
        return;
    }

    public final void update(byte[], int, int) throws java.lang.IllegalStateException
    {
        javax.crypto.Mac r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        javax.crypto.MacSpi $r11;
        java.lang.IllegalStateException $r12;

        r0 := @this: javax.crypto.Mac;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<javax.crypto.Mac: boolean isInitMac>;

        if $z0 != 0 goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>()>();

        throw $r12;

     label1:
        if r1 != null goto label2;

        return;

     label2:
        if i0 < 0 goto label3;

        if i1 < 0 goto label3;

        $i4 = i0 + i1;

        $i3 = lengthof r1;

        if $i4 <= $i3 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect arguments. input.length=");

        $i2 = lengthof r1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" offset=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", len=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label4:
        $r11 = r0.<javax.crypto.Mac: javax.crypto.MacSpi spiImpl>;

        virtualinvoke $r11.<javax.crypto.MacSpi: void engineUpdate(byte[],int,int)>(r1, i0, i1);

        return;
    }
}
