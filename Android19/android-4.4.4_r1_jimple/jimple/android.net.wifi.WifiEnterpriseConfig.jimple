public class android.net.wifi.WifiEnterpriseConfig extends java.lang.Object implements android.os.Parcelable
{
    private static final java.lang.String ANON_IDENTITY_KEY;
    private static final java.lang.String CA_CERT_KEY;
    private static final java.lang.String CA_CERT_PREFIX;
    private static final java.lang.String CLIENT_CERT_KEY;
    private static final java.lang.String CLIENT_CERT_PREFIX;
    public static final android.os.Parcelable$Creator CREATOR;
    private static final boolean DBG;
    private static final java.lang.String EAP_KEY;
    static final java.lang.String EMPTY_VALUE;
    private static final java.lang.String ENGINE_DISABLE;
    private static final java.lang.String ENGINE_ENABLE;
    private static final java.lang.String ENGINE_ID_KEY;
    private static final java.lang.String ENGINE_ID_KEYSTORE;
    private static final java.lang.String ENGINE_KEY;
    private static final java.lang.String IDENTITY_KEY;
    private static final java.lang.String KEYSTORE_URI;
    private static final java.lang.String OLD_PRIVATE_KEY_NAME;
    private static final java.lang.String OPP_KEY_CACHING;
    private static final java.lang.String PASSWORD_KEY;
    private static final java.lang.String PHASE2_KEY;
    private static final java.lang.String PRIVATE_KEY_ID_KEY;
    private static final java.lang.String SUBJECT_MATCH_KEY;
    private static final java.lang.String TAG;
    private java.security.cert.X509Certificate mCaCert;
    private java.security.cert.X509Certificate mClientCertificate;
    private java.security.PrivateKey mClientPrivateKey;
    private java.util.HashMap mFields;
    private boolean mNeedsSoftwareKeystore;

    static void <clinit>()
    {
        android.net.wifi.WifiEnterpriseConfig$1 $r0;

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String TAG> = "WifiEnterpriseConfig";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String SUBJECT_MATCH_KEY> = "subject_match";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String PRIVATE_KEY_ID_KEY> = "key_id";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String PHASE2_KEY> = "phase2";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String PASSWORD_KEY> = "password";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String OPP_KEY_CACHING> = "proactive_key_caching";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String OLD_PRIVATE_KEY_NAME> = "private_key";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String KEYSTORE_URI> = "keystore://";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String IDENTITY_KEY> = "identity";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String ENGINE_KEY> = "engine";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String ENGINE_ID_KEYSTORE> = "keystore";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String ENGINE_ID_KEY> = "engine_id";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String ENGINE_ENABLE> = "1";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String ENGINE_DISABLE> = "0";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String EMPTY_VALUE> = "NULL";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String EAP_KEY> = "eap";

        <android.net.wifi.WifiEnterpriseConfig: boolean DBG> = 0;

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String CLIENT_CERT_PREFIX> = "keystore://USRCERT_";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String CLIENT_CERT_KEY> = "client_cert";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String CA_CERT_PREFIX> = "keystore://CACERT_";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String CA_CERT_KEY> = "ca_cert";

        <android.net.wifi.WifiEnterpriseConfig: java.lang.String ANON_IDENTITY_KEY> = "anonymous_identity";

        $r0 = new android.net.wifi.WifiEnterpriseConfig$1;

        specialinvoke $r0.<android.net.wifi.WifiEnterpriseConfig$1: void <init>()>();

        <android.net.wifi.WifiEnterpriseConfig: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.util.HashMap $r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields> = $r1;

        r0.<android.net.wifi.WifiEnterpriseConfig: boolean mNeedsSoftwareKeystore> = 0;

        return;
    }

    public void <init>(android.net.wifi.WifiEnterpriseConfig)
    {
        android.net.wifi.WifiEnterpriseConfig r0, r1;
        java.util.Iterator r2;
        java.lang.String r3;
        java.util.HashMap $r4, $r5, $r8, $r9;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r10;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: android.net.wifi.WifiEnterpriseConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields> = $r4;

        r0.<android.net.wifi.WifiEnterpriseConfig: boolean mNeedsSoftwareKeystore> = 0;

        $r5 = r1.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r7;

        $r9 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r8 = r1.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r10 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r10);

        goto label1;

     label2:
        return;
    }

    static java.util.HashMap access$000(android.net.wifi.WifiEnterpriseConfig)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.util.HashMap $r1;

        r0 := @parameter0: android.net.wifi.WifiEnterpriseConfig;

        $r1 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        return $r1;
    }

    static java.security.cert.X509Certificate access$102(android.net.wifi.WifiEnterpriseConfig, java.security.cert.X509Certificate)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.security.cert.X509Certificate r1;

        r0 := @parameter0: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter1: java.security.cert.X509Certificate;

        r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mCaCert> = r1;

        return r1;
    }

    static java.security.PrivateKey access$202(android.net.wifi.WifiEnterpriseConfig, java.security.PrivateKey)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.security.PrivateKey r1;

        r0 := @parameter0: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter1: java.security.PrivateKey;

        r0.<android.net.wifi.WifiEnterpriseConfig: java.security.PrivateKey mClientPrivateKey> = r1;

        return r1;
    }

    static java.security.cert.X509Certificate access$302(android.net.wifi.WifiEnterpriseConfig, java.security.cert.X509Certificate)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.security.cert.X509Certificate r1;

        r0 := @parameter0: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter1: java.security.cert.X509Certificate;

        r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mClientCertificate> = r1;

        return r1;
    }

    private java.lang.String convertToQuotedString(java.lang.String)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private java.lang.String getFieldValue(java.lang.String, java.lang.String)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1, r2, r3, r4, $r7, $r8;
        java.util.HashMap $r5;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r6;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 != 0 goto label1;

        $r7 = "NULL";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

     label1:
        return "";

     label2:
        r4 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String removeDoubleQuotes(java.lang.String)>(r3);

        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $r8 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r8;

     label3:
        return r4;
    }

    private int getStringIndex(java.lang.String[], java.lang.String, int)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String[] r1;
        java.lang.String r2, $r3;
        int i0, i1, $i2;
        boolean $z0, $z1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label2;

     label1:
        return i0;

     label2:
        i1 = 0;

     label3:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label1;

        $r3 = r1[i1];

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        return i1;

     label4:
        i1 = i1 + 1;

        goto label3;
    }

    static java.lang.String[] getSupplicantKeys()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[11];

        $r0[0] = "eap";

        $r0[1] = "phase2";

        $r0[2] = "identity";

        $r0[3] = "anonymous_identity";

        $r0[4] = "password";

        $r0[5] = "client_cert";

        $r0[6] = "ca_cert";

        $r0[7] = "subject_match";

        $r0[8] = "engine";

        $r0[9] = "engine_id";

        $r0[10] = "key_id";

        return $r0;
    }

    static boolean hasHardwareBackedKey(java.security.cert.Certificate)
    {
        java.security.cert.Certificate r0;
        java.security.PublicKey $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @parameter0: java.security.cert.Certificate;

        $r1 = virtualinvoke r0.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

        $r2 = interfaceinvoke $r1.<java.security.PublicKey: java.lang.String getAlgorithm()>();

        $z0 = staticinvoke <android.security.KeyChain: boolean isBoundKeyAlgorithm(java.lang.String)>($r2);

        return $z0;
    }

    static boolean isHardwareBackedKey(java.security.PrivateKey)
    {
        java.security.PrivateKey r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: java.security.PrivateKey;

        $r1 = interfaceinvoke r0.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        $z0 = staticinvoke <android.security.KeyChain: boolean isBoundKeyAlgorithm(java.lang.String)>($r1);

        return $z0;
    }

    private boolean putCertInKeyStore(android.security.KeyStore, java.lang.String, java.security.cert.Certificate)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        android.security.KeyStore r1;
        java.lang.String r2;
        java.security.cert.Certificate r3;
        boolean z0;
        java.security.cert.Certificate[] $r6;
        byte[] $r7;
        java.io.IOException $r8;
        java.security.cert.CertificateException $r9;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: android.security.KeyStore;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.security.cert.Certificate;

     label1:
        $r6 = newarray (java.security.cert.Certificate)[1];

        $r6[0] = r3;

        $r7 = staticinvoke <android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])>($r6);

        z0 = virtualinvoke r1.<android.security.KeyStore: boolean put(java.lang.String,byte[],int,int)>(r2, $r7, 1010, 0);

     label2:
        return z0;

     label3:
        $r8 := @caughtexception;

        return 0;

     label4:
        $r9 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.security.cert.CertificateException from label1 to label2 with label4;
    }

    private java.lang.String removeDoubleQuotes(java.lang.String)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1, $r2;
        int i0, $i2, $i4;
        boolean $z0;
        char $c1, $c3;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label2;

        r1 = "";

     label1:
        return r1;

     label2:
        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 <= 1 goto label1;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c1 != 34 goto label1;

        $i2 = i0 - 1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i2);

        if $c3 != 34 goto label1;

        $i4 = i0 - 1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i4);

        return $r2;
    }

    private void setFieldValue(java.lang.String, java.lang.String, java.lang.String)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1, r2, r3, $r8, $r9;
        boolean $z0;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.util.HashMap $r5, $r11;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        $r11 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, "NULL");

        return;

     label1:
        $r5 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String convertToQuotedString(java.lang.String)>($r8);

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

        return;
    }

    private void writeCertificate(android.os.Parcel, java.security.cert.X509Certificate)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        android.os.Parcel r1;
        java.security.cert.X509Certificate r2;
        byte[] r4;
        int $i0;
        java.security.cert.CertificateEncodingException $r5;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: java.security.cert.X509Certificate;

        if r2 == null goto label4;

     label1:
        r4 = virtualinvoke r2.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        $i0 = lengthof r4;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i0);

        virtualinvoke r1.<android.os.Parcel: void writeByteArray(byte[])>(r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

        return;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

        return;

        catch java.security.cert.CertificateEncodingException from label1 to label2 with label3;
    }

    public int describeContents()
    {
        android.net.wifi.WifiEnterpriseConfig r0;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        return 0;
    }

    public java.lang.String getAnonymousIdentity()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String $r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r1 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String,java.lang.String)>("anonymous_identity", "");

        return $r1;
    }

    public java.security.cert.X509Certificate getCaCertificate()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.security.cert.X509Certificate $r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r1 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mCaCert>;

        return $r1;
    }

    public java.lang.String getCaCertificateAlias()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String $r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r1 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String,java.lang.String)>("ca_cert", "keystore://CACERT_");

        return $r1;
    }

    public java.security.cert.X509Certificate getClientCertificate()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.security.cert.X509Certificate $r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r1 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mClientCertificate>;

        return $r1;
    }

    public java.lang.String getClientCertificateAlias()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String $r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r1 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String,java.lang.String)>("client_cert", "keystore://USRCERT_");

        return $r1;
    }

    public int getEapMethod()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String[] $r4;
        int $i0;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r2 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("eap");

        r1 = (java.lang.String) $r3;

        $r4 = <android.net.wifi.WifiEnterpriseConfig$Eap: java.lang.String[] strings>;

        $i0 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: int getStringIndex(java.lang.String[],java.lang.String,int)>($r4, r1, -1);

        return $i0;
    }

    java.util.HashMap getFields()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.util.HashMap $r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r1 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        return $r1;
    }

    public java.lang.String getIdentity()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String $r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r1 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String,java.lang.String)>("identity", "");

        return $r1;
    }

    java.lang.String getKeyId(android.net.wifi.WifiEnterpriseConfig)
    {
        android.net.wifi.WifiEnterpriseConfig r0, r1;
        java.lang.String r2, r3, $r12;
        java.util.HashMap $r4, $r6, $r13, $r14;
        java.lang.Object $r5, $r7, $r15, $r16;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: android.net.wifi.WifiEnterpriseConfig;

        $r4 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("eap");

        r2 = (java.lang.String) $r5;

        $r6 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("phase2");

        r3 = (java.lang.String) $r7;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        $r14 = r1.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r16 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("eap");

        r2 = (java.lang.String) $r16;

     label1:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z1 == 0 goto label2;

        $r13 = r1.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r15 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("phase2");

        r3 = (java.lang.String) $r15;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public java.lang.String getPassword()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String $r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r1 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String,java.lang.String)>("password", "");

        return $r1;
    }

    public int getPhase2Method()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1, $r4, $r6;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.String[] $r5;
        int $i0, $i1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r2 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("phase2");

        $r4 = (java.lang.String) $r3;

        r1 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String removeDoubleQuotes(java.lang.String)>($r4);

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("auth=");

        if $z0 == 0 goto label1;

        $r6 = "auth=";

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

     label1:
        $r5 = <android.net.wifi.WifiEnterpriseConfig$Phase2: java.lang.String[] strings>;

        $i0 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: int getStringIndex(java.lang.String[],java.lang.String,int)>($r5, r1, 0);

        return $i0;
    }

    public java.lang.String getSubjectMatch()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String $r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r1 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String,java.lang.String)>("subject_match", "");

        return $r1;
    }

    void initializeSoftwareKeystoreFlag(android.security.KeyStore)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        android.security.KeyStore r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: android.security.KeyStore;

        $r2 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String,java.lang.String)>("client_cert", "keystore://USRCERT_");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z0 != 0 goto label1;

        r0.<android.net.wifi.WifiEnterpriseConfig: boolean mNeedsSoftwareKeystore> = 1;

     label1:
        return;
    }

    boolean installKeys(android.security.KeyStore, java.lang.String)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        android.security.KeyStore r1;
        java.lang.String r2, r3, r4, r5;
        boolean z0, z1, $z4;
        byte[] r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.security.cert.X509Certificate $r16, $r17, $r18, $r19, $r20, $r21, $r24;
        java.security.PrivateKey $r22, $r23;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: android.security.KeyStore;

        r2 := @parameter1: java.lang.String;

        z0 = 1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mClientCertificate>;

        if $r16 == null goto label4;

        $r23 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.PrivateKey mClientPrivateKey>;

        r6 = interfaceinvoke $r23.<java.security.PrivateKey: byte[] getEncoded()>();

        $r22 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.PrivateKey mClientPrivateKey>;

        $z4 = staticinvoke <android.net.wifi.WifiEnterpriseConfig: boolean isHardwareBackedKey(java.security.PrivateKey)>($r22);

        if $z4 == 0 goto label2;

        z1 = virtualinvoke r1.<android.security.KeyStore: boolean importKey(java.lang.String,byte[],int,int)>(r3, r6, 1010, 0);

     label1:
        if z1 != 0 goto label3;

        return z1;

     label2:
        z1 = virtualinvoke r1.<android.security.KeyStore: boolean importKey(java.lang.String,byte[],int,int)>(r3, r6, 1010, 1);

        r0.<android.net.wifi.WifiEnterpriseConfig: boolean mNeedsSoftwareKeystore> = 1;

        goto label1;

     label3:
        $r24 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mClientCertificate>;

        z0 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: boolean putCertInKeyStore(android.security.KeyStore,java.lang.String,java.security.cert.Certificate)>(r1, r4, $r24);

        if z0 != 0 goto label4;

        virtualinvoke r1.<android.security.KeyStore: boolean delKey(java.lang.String,int)>(r3, 1010);

        return z0;

     label4:
        $r18 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mCaCert>;

        if $r18 == null goto label6;

        $r19 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mCaCert>;

        z0 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: boolean putCertInKeyStore(android.security.KeyStore,java.lang.String,java.security.cert.Certificate)>(r1, r5, $r19);

        if z0 != 0 goto label6;

        $r21 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mClientCertificate>;

        if $r21 == null goto label5;

        virtualinvoke r1.<android.security.KeyStore: boolean delKey(java.lang.String,int)>(r3, 1010);

        virtualinvoke r1.<android.security.KeyStore: boolean delete(java.lang.String,int)>(r4, 1010);

     label5:
        return z0;

     label6:
        $r17 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mClientCertificate>;

        if $r17 == null goto label7;

        virtualinvoke r0.<android.net.wifi.WifiEnterpriseConfig: void setClientCertificateAlias(java.lang.String)>(r2);

        r0.<android.net.wifi.WifiEnterpriseConfig: java.security.PrivateKey mClientPrivateKey> = null;

        r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mClientCertificate> = null;

     label7:
        $r20 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mCaCert>;

        if $r20 == null goto label8;

        virtualinvoke r0.<android.net.wifi.WifiEnterpriseConfig: void setCaCertificateAlias(java.lang.String)>(r2);

        r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mCaCert> = null;

     label8:
        return z0;
    }

    void migrateCerts(android.security.KeyStore)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        android.security.KeyStore r1;
        java.lang.String r2, r3, $r7, $r12, $r14, $r19, $r22, $r29, $r32, $r33;
        boolean $z0, $z1, $z2, $z4;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r13, $r15, $r16, $r17, $r18, $r20, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r30, $r31, $r34, $r35;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: android.security.KeyStore;

        r2 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String,java.lang.String)>("client_cert", "keystore://USRCERT_");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $z4 = virtualinvoke r1.<android.security.KeyStore: boolean contains(java.lang.String,int)>($r19, 1010);

        if $z4 != 0 goto label1;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.security.KeyStore: boolean duplicate(java.lang.String,int,java.lang.String,int)>($r22, -1, $r29, 1010);

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.security.KeyStore: boolean duplicate(java.lang.String,int,java.lang.String,int)>($r32, -1, $r33, 1010);

     label1:
        r3 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String,java.lang.String)>("ca_cert", "keystore://CACERT_");

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z1 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = virtualinvoke r1.<android.security.KeyStore: boolean contains(java.lang.String,int)>($r7, 1010);

        if $z2 != 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.security.KeyStore: boolean duplicate(java.lang.String,int,java.lang.String,int)>($r12, -1, $r14, 1010);

     label2:
        return;
    }

    boolean migrateOldEapTlsNative(android.net.wifi.WifiNative, int)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        android.net.wifi.WifiNative r1;
        int i0, $i1;
        java.lang.String r2, r3, r4, $r9, $r11, $r15, $r17, $r21, $r22, $r23, $r24;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r5, $r7, $r10, $r12, $r16, $r20;
        java.lang.Object $r14, $r18, $r19;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: android.net.wifi.WifiNative;

        i0 := @parameter1: int;

        r2 = virtualinvoke r1.<android.net.wifi.WifiNative: java.lang.String getNetworkVariable(int,java.lang.String)>(i0, "private_key");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        r3 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String removeDoubleQuotes(java.lang.String)>(r2);

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z1 != 0 goto label1;

        $r5 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("engine", "1");

        $r7 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r9 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String convertToQuotedString(java.lang.String)>("keystore");

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("engine_id", $r9);

        $z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("keystore://");

        if $z2 == 0 goto label4;

        $r21 = new java.lang.String;

        $r24 = "keystore://";

        $i1 = virtualinvoke $r24.<java.lang.String: int length()>();

        $r23 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i1);

        specialinvoke $r21.<java.lang.String: void <init>(java.lang.String)>($r23);

        r4 = $r21;

     label3:
        $r10 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r11 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String convertToQuotedString(java.lang.String)>(r4);

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("key_id", $r11);

        $r12 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r14 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("engine");

        $r15 = (java.lang.String) $r14;

        virtualinvoke r1.<android.net.wifi.WifiNative: boolean setNetworkVariable(int,java.lang.String,java.lang.String)>(i0, "engine", $r15);

        $r16 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r18 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("engine_id");

        $r17 = (java.lang.String) $r18;

        virtualinvoke r1.<android.net.wifi.WifiNative: boolean setNetworkVariable(int,java.lang.String,java.lang.String)>(i0, "engine_id", $r17);

        $r20 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r19 = virtualinvoke $r20.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("key_id");

        $r22 = (java.lang.String) $r19;

        virtualinvoke r1.<android.net.wifi.WifiNative: boolean setNetworkVariable(int,java.lang.String,java.lang.String)>(i0, "key_id", $r22);

        virtualinvoke r1.<android.net.wifi.WifiNative: boolean setNetworkVariable(int,java.lang.String,java.lang.String)>(i0, "private_key", "NULL");

        return 1;

     label4:
        r4 = r3;

        goto label3;
    }

    boolean needsKeyStore()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.security.cert.X509Certificate $r1, $r2;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r1 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mClientCertificate>;

        if $r1 != null goto label1;

        $r2 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mCaCert>;

        if $r2 != null goto label1;

        return 0;

     label1:
        return 1;
    }

    boolean needsSoftwareBackedKeyStore()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        boolean $z0;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $z0 = r0.<android.net.wifi.WifiEnterpriseConfig: boolean mNeedsSoftwareKeystore>;

        return $z0;
    }

    void removeKeys(android.security.KeyStore)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        android.security.KeyStore r1;
        java.lang.String r2, r3, $r7, $r11, $r14;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r15;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: android.security.KeyStore;

        r2 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String,java.lang.String)>("client_cert", "keystore://USRCERT_");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.security.KeyStore: boolean delKey(java.lang.String,int)>($r11, 1010);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.security.KeyStore: boolean delete(java.lang.String,int)>($r14, 1010);

     label1:
        r3 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String,java.lang.String)>("ca_cert", "keystore://CACERT_");

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z1 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.security.KeyStore: boolean delete(java.lang.String,int)>($r7, 1010);

     label2:
        return;
    }

    public void setAnonymousIdentity(java.lang.String)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: void setFieldValue(java.lang.String,java.lang.String,java.lang.String)>("anonymous_identity", r1, "");

        return;
    }

    public void setCaCertificate(java.security.cert.X509Certificate)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.security.cert.X509Certificate r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.security.cert.X509Certificate;

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<java.security.cert.X509Certificate: int getBasicConstraints()>();

        if $i0 < 0 goto label1;

        r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mCaCert> = r1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not a CA certificate");

        throw $r2;

     label2:
        r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mCaCert> = null;

        return;
    }

    public void setCaCertificateAlias(java.lang.String)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: void setFieldValue(java.lang.String,java.lang.String,java.lang.String)>("ca_cert", r1, "keystore://CACERT_");

        return;
    }

    public void setClientCertificateAlias(java.lang.String)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1, $r5;
        boolean $z0;
        java.util.HashMap $r2, $r4, $r7, $r9;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: void setFieldValue(java.lang.String,java.lang.String,java.lang.String)>("client_cert", r1, "keystore://USRCERT_");

        specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: void setFieldValue(java.lang.String,java.lang.String,java.lang.String)>("key_id", r1, "USRPKEY_");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r7 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("engine", "0");

        $r9 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("engine_id", "NULL");

        return;

     label1:
        $r2 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("engine", "1");

        $r4 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r5 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String convertToQuotedString(java.lang.String)>("keystore");

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("engine_id", $r5);

        return;
    }

    public void setClientKeyEntry(java.security.PrivateKey, java.security.cert.X509Certificate)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.security.PrivateKey r1;
        java.security.cert.X509Certificate r2;
        int $i0;
        byte[] $r3;
        java.lang.IllegalArgumentException $r4, $r5, $r6;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.security.PrivateKey;

        r2 := @parameter1: java.security.cert.X509Certificate;

        if r2 == null goto label3;

        $i0 = virtualinvoke r2.<java.security.cert.X509Certificate: int getBasicConstraints()>();

        if $i0 == -1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot be a CA certificate");

        throw $r6;

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Client cert without a private key");

        throw $r5;

     label2:
        $r3 = interfaceinvoke r1.<java.security.PrivateKey: byte[] getEncoded()>();

        if $r3 != null goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Private key cannot be encoded");

        throw $r4;

     label3:
        r0.<android.net.wifi.WifiEnterpriseConfig: java.security.PrivateKey mClientPrivateKey> = r1;

        r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mClientCertificate> = r2;

        return;
    }

    public void setEapMethod(int)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String[] $r2;
        java.lang.String $r3;
        java.util.HashMap $r4, $r6;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unknown EAP method");

        throw $r1;

     label2:
        $r4 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r2 = <android.net.wifi.WifiEnterpriseConfig$Eap: java.lang.String[] strings>;

        $r3 = $r2[i0];

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("eap", $r3);

        $r6 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("proactive_key_caching", "1");

        return;
    }

    public void setIdentity(java.lang.String)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: void setFieldValue(java.lang.String,java.lang.String,java.lang.String)>("identity", r1, "");

        return;
    }

    public void setPassword(java.lang.String)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: void setFieldValue(java.lang.String,java.lang.String,java.lang.String)>("password", r1, "");

        return;
    }

    public void setPhase2Method(int)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r4, $r7;
        java.util.HashMap $r3, $r11;
        java.lang.String[] $r5;
        java.lang.String $r6, $r8, $r9;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unknown Phase 2 method");

        throw $r1;

     label2:
        $r11 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("phase2", "NULL");

        return;

     label3:
        $r3 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("auth=");

        $r5 = <android.net.wifi.WifiEnterpriseConfig$Phase2: java.lang.String[] strings>;

        $r6 = $r5[i0];

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: java.lang.String convertToQuotedString(java.lang.String)>($r8);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("phase2", $r9);

        return;
    }

    public void setSubjectMatch(java.lang.String)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.String r1;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: void setFieldValue(java.lang.String,java.lang.String,java.lang.String)>("subject_match", r1, "");

        return;
    }

    public java.lang.String toString()
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        java.lang.StringBuffer r1, $r4, $r9, $r10, $r15;
        java.util.Iterator r2;
        java.lang.String r3, $r7, $r13;
        java.util.HashMap $r5, $r11;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r8, $r12;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        r1 = $r4;

        $r5 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r8;

        $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r11 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r13 = (java.lang.String) $r12;

        $r15 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        goto label1;

     label2:
        $r7 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.net.wifi.WifiEnterpriseConfig r0;
        android.os.Parcel r1;
        int i0, $i1, $i2;
        java.util.Iterator r2;
        java.lang.String r3, $r15, $r17;
        byte[] r4;
        java.util.Map$Entry r5;
        java.util.HashMap $r6, $r7;
        java.util.Set $r8;
        boolean $z0;
        java.security.cert.X509Certificate $r9, $r11;
        java.security.PrivateKey $r10, $r12, $r13;
        java.lang.Object $r14, $r16, $r18;

        r0 := @this: android.net.wifi.WifiEnterpriseConfig;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r6 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $i1 = virtualinvoke $r6.<java.util.HashMap: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r7 = r0.<android.net.wifi.WifiEnterpriseConfig: java.util.HashMap mFields>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r14;

        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (java.lang.String) $r16;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r15);

        $r18 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (java.lang.String) $r18;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r17);

        goto label1;

     label2:
        $r9 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mCaCert>;

        specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: void writeCertificate(android.os.Parcel,java.security.cert.X509Certificate)>(r1, $r9);

        $r10 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.PrivateKey mClientPrivateKey>;

        if $r10 == null goto label4;

        $r12 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.PrivateKey mClientPrivateKey>;

        r3 = interfaceinvoke $r12.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        $r13 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.PrivateKey mClientPrivateKey>;

        r4 = interfaceinvoke $r13.<java.security.PrivateKey: byte[] getEncoded()>();

        $i2 = lengthof r4;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        virtualinvoke r1.<android.os.Parcel: void writeByteArray(byte[])>(r4);

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r3);

     label3:
        $r11 = r0.<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate mClientCertificate>;

        specialinvoke r0.<android.net.wifi.WifiEnterpriseConfig: void writeCertificate(android.os.Parcel,java.security.cert.X509Certificate)>(r1, $r11);

        return;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

        goto label3;
    }
}
