public abstract class com.android.internal.telephony.InboundSmsHandler extends com.android.internal.util.StateMachine
{
    static final int ADDRESS_COLUMN;
    static final int COUNT_COLUMN;
    static final int DATE_COLUMN;
    protected static final boolean DBG;
    static final int DESTINATION_PORT_COLUMN;
    static final int EVENT_BROADCAST_COMPLETE;
    static final int EVENT_BROADCAST_SMS;
    public static final int EVENT_NEW_SMS;
    static final int EVENT_RELEASE_WAKELOCK;
    static final int EVENT_RETURN_TO_IDLE;
    static final int EVENT_START_ACCEPTING_SMS;
    static final int EVENT_UPDATE_PHONE_OBJECT;
    static final int ID_COLUMN;
    static final int PDU_COLUMN;
    private static final java.lang.String[] PDU_PROJECTION;
    private static final java.lang.String[] PDU_SEQUENCE_PORT_PROJECTION;
    static final int REFERENCE_NUMBER_COLUMN;
    static final java.lang.String SELECT_BY_ID;
    static final java.lang.String SELECT_BY_REFERENCE;
    static final int SEQUENCE_COLUMN;
    private static final boolean VDBG;
    private static final int WAKELOCK_TIMEOUT;
    private static final android.net.Uri sRawUri;
    protected com.android.internal.telephony.CellBroadcastHandler mCellBroadcastHandler;
    protected final android.content.Context mContext;
    final com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState;
    final com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState;
    final com.android.internal.telephony.InboundSmsHandler$IdleState mIdleState;
    protected com.android.internal.telephony.PhoneBase mPhone;
    private final android.content.ContentResolver mResolver;
    private final boolean mSmsReceiveDisabled;
    final com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState;
    protected com.android.internal.telephony.SmsStorageMonitor mStorageMonitor;
    final com.android.internal.telephony.InboundSmsHandler$WaitingState mWaitingState;
    final android.os.PowerManager$WakeLock mWakeLock;
    private final com.android.internal.telephony.WapPushOverSms mWapPush;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;
        android.net.Uri $r2, $r3;

        <com.android.internal.telephony.InboundSmsHandler: int WAKELOCK_TIMEOUT> = 3000;

        <com.android.internal.telephony.InboundSmsHandler: boolean VDBG> = 0;

        <com.android.internal.telephony.InboundSmsHandler: int SEQUENCE_COLUMN> = 1;

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String SELECT_BY_REFERENCE> = "address=? AND reference_number=? AND count=?";

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String SELECT_BY_ID> = "_id=?";

        <com.android.internal.telephony.InboundSmsHandler: int REFERENCE_NUMBER_COLUMN> = 4;

        <com.android.internal.telephony.InboundSmsHandler: int PDU_COLUMN> = 0;

        <com.android.internal.telephony.InboundSmsHandler: int ID_COLUMN> = 7;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_UPDATE_PHONE_OBJECT> = 7;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_START_ACCEPTING_SMS> = 6;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_RETURN_TO_IDLE> = 4;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_RELEASE_WAKELOCK> = 5;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_NEW_SMS> = 1;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_BROADCAST_SMS> = 2;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_BROADCAST_COMPLETE> = 3;

        <com.android.internal.telephony.InboundSmsHandler: int DESTINATION_PORT_COLUMN> = 2;

        <com.android.internal.telephony.InboundSmsHandler: boolean DBG> = 1;

        <com.android.internal.telephony.InboundSmsHandler: int DATE_COLUMN> = 3;

        <com.android.internal.telephony.InboundSmsHandler: int COUNT_COLUMN> = 5;

        <com.android.internal.telephony.InboundSmsHandler: int ADDRESS_COLUMN> = 6;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "pdu";

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_PROJECTION> = $r0;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "pdu";

        $r1[1] = "sequence";

        $r1[2] = "destination_port";

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_SEQUENCE_PORT_PROJECTION> = $r1;

        $r2 = <android.provider.Telephony$Sms: android.net.Uri CONTENT_URI>;

        $r3 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r2, "raw");

        <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri> = $r3;

        return;
    }

    protected void <init>(java.lang.String, android.content.Context, com.android.internal.telephony.SmsStorageMonitor, com.android.internal.telephony.PhoneBase, com.android.internal.telephony.CellBroadcastHandler)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1;
        android.content.Context r2, $r13, $r15;
        com.android.internal.telephony.SmsStorageMonitor r3;
        com.android.internal.telephony.PhoneBase r4;
        com.android.internal.telephony.CellBroadcastHandler r5;
        boolean z0, $z1, $z2;
        com.android.internal.telephony.InboundSmsHandler$DefaultState $r6, $r20, $r21, $r22, $r24;
        com.android.internal.telephony.InboundSmsHandler$StartupState $r7, $r23, $r29;
        com.android.internal.telephony.InboundSmsHandler$IdleState $r8, $r25;
        com.android.internal.telephony.InboundSmsHandler$DeliveringState $r9, $r26, $r27;
        com.android.internal.telephony.InboundSmsHandler$WaitingState $r10, $r28;
        android.content.ContentResolver $r11;
        com.android.internal.telephony.WapPushOverSms $r12;
        android.content.res.Resources $r14;
        android.os.PowerManager $r16;
        java.lang.Object $r17;
        android.os.PowerManager$WakeLock $r18, $r19;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: com.android.internal.telephony.SmsStorageMonitor;

        r4 := @parameter3: com.android.internal.telephony.PhoneBase;

        r5 := @parameter4: com.android.internal.telephony.CellBroadcastHandler;

        specialinvoke r0.<com.android.internal.util.StateMachine: void <init>(java.lang.String)>(r1);

        $r6 = new com.android.internal.telephony.InboundSmsHandler$DefaultState;

        specialinvoke $r6.<com.android.internal.telephony.InboundSmsHandler$DefaultState: void <init>(com.android.internal.telephony.InboundSmsHandler)>(r0);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState> = $r6;

        $r7 = new com.android.internal.telephony.InboundSmsHandler$StartupState;

        specialinvoke $r7.<com.android.internal.telephony.InboundSmsHandler$StartupState: void <init>(com.android.internal.telephony.InboundSmsHandler)>(r0);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState> = $r7;

        $r8 = new com.android.internal.telephony.InboundSmsHandler$IdleState;

        specialinvoke $r8.<com.android.internal.telephony.InboundSmsHandler$IdleState: void <init>(com.android.internal.telephony.InboundSmsHandler)>(r0);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$IdleState mIdleState> = $r8;

        $r9 = new com.android.internal.telephony.InboundSmsHandler$DeliveringState;

        specialinvoke $r9.<com.android.internal.telephony.InboundSmsHandler$DeliveringState: void <init>(com.android.internal.telephony.InboundSmsHandler)>(r0);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState> = $r9;

        $r10 = new com.android.internal.telephony.InboundSmsHandler$WaitingState;

        specialinvoke $r10.<com.android.internal.telephony.InboundSmsHandler$WaitingState: void <init>(com.android.internal.telephony.InboundSmsHandler)>(r0);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$WaitingState mWaitingState> = $r10;

        r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext> = r2;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.SmsStorageMonitor mStorageMonitor> = r3;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.PhoneBase mPhone> = r4;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.CellBroadcastHandler mCellBroadcastHandler> = r5;

        $r11 = virtualinvoke r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver> = $r11;

        $r12 = new com.android.internal.telephony.WapPushOverSms;

        specialinvoke $r12.<com.android.internal.telephony.WapPushOverSms: void <init>(android.content.Context)>(r2);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.WapPushOverSms mWapPush> = $r12;

        $r13 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r14.<android.content.res.Resources: boolean getBoolean(int)>(17891385);

        $z2 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("telephony.sms.receive", $z1);

        if $z2 != 0 goto label2;

        z0 = 1;

     label1:
        r0.<com.android.internal.telephony.InboundSmsHandler: boolean mSmsReceiveDisabled> = z0;

        $r15 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r17 = virtualinvoke $r15.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r16 = (android.os.PowerManager) $r17;

        $r19 = virtualinvoke $r16.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, r1);

        r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock> = $r19;

        $r18 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r18.<android.os.PowerManager$WakeLock: void acquire()>();

        $r21 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.util.State)>($r21);

        $r23 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState>;

        $r20 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r23, $r20);

        $r25 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$IdleState mIdleState>;

        $r22 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r25, $r22);

        $r27 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState>;

        $r24 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r27, $r24);

        $r28 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$WaitingState mWaitingState>;

        $r26 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r28, $r26);

        $r29 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void setInitialState(com.android.internal.util.State)>($r29);

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>("created InboundSmsHandler");

        return;

     label2:
        z0 = 0;

        goto label1;
    }

    static void access$000(com.android.internal.telephony.InboundSmsHandler, android.os.Message)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.Message r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$100(com.android.internal.telephony.InboundSmsHandler, com.android.internal.util.IState)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$200(com.android.internal.telephony.InboundSmsHandler, android.os.Message)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.Message r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$300(com.android.internal.telephony.InboundSmsHandler, com.android.internal.util.IState)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$400(com.android.internal.telephony.InboundSmsHandler, com.android.internal.util.IState)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$500(com.android.internal.telephony.InboundSmsHandler, com.android.internal.util.IState)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$600(com.android.internal.telephony.InboundSmsHandler, android.os.Message)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.Message r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$700(com.android.internal.telephony.InboundSmsHandler, com.android.internal.util.IState)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    private int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsTracker r1;
        android.content.ContentValues r2;
        android.net.Uri r3, $r17, $r24;
        java.lang.Exception r4, $r46;
        long l0;
        java.lang.String[] r5, $r23, $r25, $r26;
        android.database.Cursor r6;
        java.lang.Throwable r7, $r47, r52;
        android.database.SQLException r8, $r45;
        byte b1;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String r9, r10, r11, r12, r13, $r21, $r22, $r33, $r42, $r44;
        byte[] r14, r15, $r36;
        android.content.ContentResolver $r16, $r28;
        java.lang.StringBuilder $r19, $r20, $r29, $r30, $r31, $r32, $r34, $r37, $r38, $r40, $r41, $r43, r48, r49, r50, r51;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.InboundSmsTracker;

        $i3 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        if $i3 == 1 goto label06;

        r6 = null;

     label01:
        i2 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getSequenceNumber()>();

        r9 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getAddress()>();

        $i5 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getReferenceNumber()>();

        r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        $i6 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6);

        r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i2);

        $r25 = newarray (java.lang.String)[3];

        $r25[0] = r9;

        $r25[1] = r10;

        $r25[2] = r11;

        virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: void setDeleteWhere(java.lang.String,java.lang.String[])>("address=? AND reference_number=? AND count=?", $r25);

        $r28 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r24 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        $r23 = <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_PROJECTION>;

        $r26 = newarray (java.lang.String)[4];

        $r26[0] = r9;

        $r26[1] = r10;

        $r26[2] = r11;

        $r26[3] = r13;

        r6 = virtualinvoke $r28.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r24, $r23, "address=? AND reference_number=? AND count=? AND sequence=?", $r26, null);

        $z0 = interfaceinvoke r6.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label04;

        r48 = new java.lang.StringBuilder;

        specialinvoke r48.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Discarding duplicate message segment, refNumber=");

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seqNumber=");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>($r33);

        r12 = interfaceinvoke r6.<android.database.Cursor: java.lang.String getString(int)>(0);

        r15 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: byte[] getPdu()>();

        r14 = staticinvoke <com.android.internal.util.HexDump: byte[] hexStringToByteArray(java.lang.String)>(r12);

        $r36 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: byte[] getPdu()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r14, $r36);

        if $z1 != 0 goto label02;

        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: dup message segment PDU of length ");

        $i8 = lengthof r15;

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is different from existing PDU of length ");

        $i7 = lengthof r14;

        $r43 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>($r44);

     label02:
        b1 = 5;

        if r6 == null goto label03;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label03:
        return b1;

     label04:
        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label05:
        if r6 == null goto label06;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label06:
        r2 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: android.content.ContentValues getContentValues()>();

        $r16 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r17 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        r3 = virtualinvoke $r16.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r17, r2);

        r50 = new java.lang.StringBuilder;

        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URI of new row -> ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r21);

     label07:
        l0 = staticinvoke <android.content.ContentUris: long parseId(android.net.Uri)>(r3);

        $i4 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        if $i4 != 1 goto label08;

        r5 = newarray (java.lang.String)[1];

        $r22 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        r5[0] = $r22;

        virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: void setDeleteWhere(java.lang.String,java.lang.String[])>("_id=?", r5);

     label08:
        return 1;

     label09:
        $r45 := @caughtexception;

        r8 = $r45;

     label10:
        r52 = (java.lang.Throwable) r8;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>("Can\'t access multipart SMS database", r52);

     label11:
        b1 = 2;

        if r6 == null goto label03;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

        return 2;

     label12:
        $r47 := @caughtexception;

        r7 = $r47;

        if r6 == null goto label13;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label13:
        throw r7;

     label14:
        $r46 := @caughtexception;

        r4 = $r46;

        r51 = new java.lang.StringBuilder;

        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error parsing URI for new row: ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>($r42, r4);

        return 2;

        catch android.database.SQLException from label01 to label02 with label09;
        catch java.lang.Throwable from label01 to label02 with label12;
        catch android.database.SQLException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Exception from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    static boolean isCurrentFormat3gpp2()
    {
        android.telephony.TelephonyManager $r0;
        int $i0;

        $r0 = staticinvoke <android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()>();

        $i0 = virtualinvoke $r0.<android.telephony.TelephonyManager: int getCurrentPhoneType()>();

        if 2 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected abstract void acknowledgeLastIncomingSms(boolean, int, android.os.Message);

    protected int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsTracker r1;
        byte b0;
        int $i1;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.InboundSmsTracker;

        b0 = 1;

        $i1 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)>(r1);

        lookupswitch($i1)
        {
            case 1: goto label3;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        b0 = 2;

     label2:
        return b0;

     label3:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void sendMessage(int,java.lang.Object)>(2, r1);

        return 1;
    }

    void deleteFromRawTable(java.lang.String, java.lang.String[])
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r9;
        java.lang.String[] r2;
        int i0;
        android.net.Uri $r3;
        android.content.ContentResolver $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        $r4 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r3 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        i0 = virtualinvoke $r4.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>($r3, r1, r2);

        if i0 != 0 goto label1;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>("No rows were deleted from raw table!");

        return;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rows from raw table.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r9);

        return;
    }

    void dispatchIntent(android.content.Intent, java.lang.String, int, android.content.BroadcastReceiver)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0;
        android.content.BroadcastReceiver r3;
        android.content.Context $r5;
        android.os.Handler $r6;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.content.BroadcastReceiver;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(134217728);

        $r5 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r6 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: android.os.Handler getHandler()>();

        virtualinvoke $r5.<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r1, r2, i0, r3, $r6, -1, null, null);

        return;
    }

    public int dispatchMessage(com.android.internal.telephony.SmsMessageBase)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.SmsMessageBase r1;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.SmsMessageBase;

        if r1 != null goto label1;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>("dispatchSmsMessage: message is null");

        return 2;

     label1:
        $z0 = r0.<com.android.internal.telephony.InboundSmsHandler: boolean mSmsReceiveDisabled>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>("Received short message on device which doesn\'t support receiving SMS. Ignored.");

        return 1;

     label2:
        $i0 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)>(r1);

        return $i0;
    }

    protected abstract int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase);

    protected int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.SmsMessageBase r1;
        com.android.internal.telephony.SmsHeader r2;
        int i0, i1, $i3, $i5, $i6, $i7;
        com.android.internal.telephony.InboundSmsTracker r3, $r6, $r14;
        com.android.internal.telephony.SmsHeader$ConcatRef r4, $r15;
        com.android.internal.telephony.SmsHeader$PortAddrs r5, $r8, $r9;
        byte[] $r7, $r16;
        long $l2, $l4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r10, $r11, $r13;
        java.lang.String $r12, $r17;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.SmsMessageBase;

        r2 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()>();

        if r2 == null goto label1;

        $r15 = r2.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$ConcatRef concatRef>;

        if $r15 != null goto label4;

     label1:
        i0 = -1;

        if r2 == null goto label2;

        $r8 = r2.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$PortAddrs portAddrs>;

        if $r8 == null goto label2;

        $r9 = r2.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$PortAddrs portAddrs>;

        i0 = $r9.<com.android.internal.telephony.SmsHeader$PortAddrs: int destPort>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("destination port: ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r12);

     label2:
        $r6 = new com.android.internal.telephony.InboundSmsTracker;

        $r7 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()>();

        $l2 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()>();

        $z0 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean is3gpp2()>();

        specialinvoke $r6.<com.android.internal.telephony.InboundSmsTracker: void <init>(byte[],long,int,boolean,boolean)>($r7, $l2, i0, $z0, 0);

        r3 = $r6;

     label3:
        $i3 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)>(r3);

        return $i3;

     label4:
        r4 = r2.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$ConcatRef concatRef>;

        r5 = r2.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$PortAddrs portAddrs>;

        if r5 == null goto label6;

        i1 = r5.<com.android.internal.telephony.SmsHeader$PortAddrs: int destPort>;

     label5:
        $r14 = new com.android.internal.telephony.InboundSmsTracker;

        $r16 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()>();

        $l4 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()>();

        $z1 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean is3gpp2()>();

        $r17 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()>();

        $i7 = r4.<com.android.internal.telephony.SmsHeader$ConcatRef: int refNumber>;

        $i5 = r4.<com.android.internal.telephony.SmsHeader$ConcatRef: int seqNumber>;

        $i6 = r4.<com.android.internal.telephony.SmsHeader$ConcatRef: int msgCount>;

        specialinvoke $r14.<com.android.internal.telephony.InboundSmsTracker: void <init>(byte[],long,int,boolean,java.lang.String,int,int,int,boolean)>($r16, $l4, i1, $z1, $r17, $i7, $i5, $i6, 0);

        r3 = $r14;

        goto label3;

     label6:
        i1 = -1;

        goto label5;
    }

    public void dispose()
    {
        com.android.internal.telephony.InboundSmsHandler r0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void quit()>();

        return;
    }

    void handleNewSms(android.os.AsyncResult)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.AsyncResult r1;
        boolean z0;
        java.lang.RuntimeException r2, $r12;
        int i0, i1, i2;
        java.lang.Throwable $r3, $r9;
        java.lang.Object $r4;
        android.telephony.SmsMessage $r5;
        com.android.internal.telephony.SmsMessageBase $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r11;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: android.os.AsyncResult;

        z0 = 1;

        $r3 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r3 == null goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception processing incoming SMS: ");

        $r9 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>($r11);

     label1:
        return;

     label2:
        $r4 = r1.<android.os.AsyncResult: java.lang.Object result>;

        $r5 = (android.telephony.SmsMessage) $r4;

        $r6 = $r5.<android.telephony.SmsMessage: com.android.internal.telephony.SmsMessageBase mWrappedSmsMessage>;

        i1 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>($r6);

     label3:
        i0 = i1;

     label4:
        if i0 == -1 goto label1;

        i2 = (int) 1;

        if i0 != i2 goto label7;

     label5:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)>(z0, i0, null);

        return;

     label6:
        $r12 := @caughtexception;

        r2 = $r12;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>("Exception dispatching message", r2);

        i0 = 2;

        goto label4;

     label7:
        z0 = 0;

        goto label5;

        catch java.lang.RuntimeException from label2 to label3 with label6;
    }

    protected abstract boolean is3gpp2();

    protected void log(java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: java.lang.String getName()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    protected void loge(java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: java.lang.String getName()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    protected void loge(java.lang.String, java.lang.Throwable)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r3;
        java.lang.Throwable r2;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: java.lang.String getName()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    void notifyAndAcknowledgeLastIncomingSms(boolean, int, android.os.Message)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        boolean z0;
        int i0;
        android.os.Message r1;
        android.content.Intent r2, $r3;
        android.content.Context $r5;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Message;

        if z0 != 0 goto label1;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.provider.Telephony.SMS_REJECTED");

        r2 = $r3;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("result", i0);

        $r5 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>(r2, "android.permission.RECEIVE_SMS");

     label1:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)>(z0, i0, r1);

        return;
    }

    protected void onQuitting()
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.WapPushOverSms $r1;
        android.os.PowerManager$WakeLock $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.WapPushOverSms mWapPush>;

        virtualinvoke $r1.<com.android.internal.telephony.WapPushOverSms: void dispose()>();

     label1:
        $r2 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r2.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

        goto label1;

     label2:
        return;
    }

    protected void onUpdatePhoneObject(com.android.internal.telephony.PhoneBase)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.PhoneBase r1, $r2, $r6;
        com.android.internal.telephony.SmsStorageMonitor $r3;
        java.lang.StringBuilder $r4, $r5, $r9;
        java.lang.Class $r7;
        java.lang.String $r8, $r10;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.PhoneBase;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.PhoneBase mPhone> = r1;

        $r2 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.PhoneBase mPhone>;

        $r3 = $r2.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.SmsStorageMonitor mSmsStorageMonitor>;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.SmsStorageMonitor mStorageMonitor> = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onUpdatePhoneObject: phone=");

        $r6 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.PhoneBase mPhone>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r10);

        return;
    }

    boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsTracker r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13;
        android.database.Cursor r2;
        java.lang.String[] r3, $r15, $r18;
        java.lang.Throwable r4, $r52, r61;
        android.database.SQLException r5, $r51;
        byte[][] r6, r9;
        com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver r7, r54;
        java.io.ByteArrayOutputStream r8, r55;
        byte[] r10, $r39, $r50, $r53;
        android.content.ComponentName r11;
        android.content.Intent r12, r57, r60;
        java.lang.String r13, $r16, $r17, $r20, $r28, $r35, $r38, $r43, $r46, $r48;
        android.net.Uri r14, $r19;
        boolean $z0, $z1, $z2;
        android.content.ContentResolver $r21;
        java.lang.StringBuilder $r22, $r23, $r32, $r36, $r37, $r41, $r42, $r47, r56, r58, r59;
        android.content.Context $r29;
        com.android.internal.telephony.WapPushOverSms $r45;
        android.telephony.SmsMessage $r49;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.InboundSmsTracker;

        i0 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        i1 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getDestPort()>();

        if i0 != 1 goto label04;

        r6 = newarray (byte[])[1];

        $r50 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: byte[] getPdu()>();

        r6[0] = $r50;

     label01:
        r54 = new com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver;

        specialinvoke r54.<com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: void <init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsTracker)>(r0, r1);

        r7 = r54;

        if i1 != 2948 goto label21;

        r55 = new java.io.ByteArrayOutputStream;

        specialinvoke r55.<java.io.ByteArrayOutputStream: void <init>()>();

        r8 = r55;

        r9 = r6;

        i3 = lengthof r9;

        i4 = 0;

     label02:
        if i4 >= i3 goto label19;

        r10 = r9[i4];

        $z1 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: boolean is3gpp2()>();

        if $z1 != 0 goto label03;

        $r49 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)>(r10, "3gpp");

        r10 = virtualinvoke $r49.<android.telephony.SmsMessage: byte[] getUserData()>();

     label03:
        i6 = lengthof r10;

        virtualinvoke r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r10, 0, i6);

        i4 = i4 + 1;

        goto label02;

     label04:
        r2 = null;

     label05:
        $r15 = newarray (java.lang.String)[3];

        $r16 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getAddress()>();

        $r15[0] = $r16;

        $i9 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getReferenceNumber()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i9);

        $r15[1] = $r17;

        $i10 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i10);

        $r15[2] = $r20;

        r3 = $r15;

        $r21 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r19 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        $r18 = <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_SEQUENCE_PORT_PROJECTION>;

        r2 = virtualinvoke $r21.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r19, $r18, "address=? AND reference_number=? AND count=?", r3, null);

        i2 = interfaceinvoke r2.<android.database.Cursor: int getCount()>();

     label06:
        if i2 >= i0 goto label08;

        if r2 == null goto label07;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label07:
        return 0;

     label08:
        r6 = newarray (byte[])[i0];

     label09:
        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label13;

        $i11 = interfaceinvoke r2.<android.database.Cursor: int getInt(int)>(1);

        $i12 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getIndexOffset()>();

        i7 = $i11 - $i12;

        $r46 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r53 = staticinvoke <com.android.internal.util.HexDump: byte[] hexStringToByteArray(java.lang.String)>($r46);

        r6[i7] = $r53;

     label10:
        if i7 != 0 goto label09;

     label11:
        $z2 = interfaceinvoke r2.<android.database.Cursor: boolean isNull(int)>(2);

        if $z2 != 0 goto label09;

        $i13 = interfaceinvoke r2.<android.database.Cursor: int getInt(int)>(2);

        i8 = staticinvoke <com.android.internal.telephony.InboundSmsTracker: int getRealDestPort(int)>($i13);

     label12:
        if i8 == -1 goto label09;

        i1 = i8;

        goto label09;

     label13:
        if r2 == null goto label01;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

        goto label01;

     label14:
        $r51 := @caughtexception;

        r5 = $r51;

     label15:
        r61 = (java.lang.Throwable) r5;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>("Can\'t access multipart SMS database", r61);

     label16:
        if r2 == null goto label07;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

        return 0;

     label17:
        $r52 := @caughtexception;

        r4 = $r52;

        if r2 == null goto label18;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label18:
        throw r4;

     label19:
        $r45 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.WapPushOverSms mWapPush>;

        $r39 = virtualinvoke r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        i5 = virtualinvoke $r45.<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[],android.content.BroadcastReceiver,com.android.internal.telephony.InboundSmsHandler)>($r39, r7, r0);

        r56 = new java.lang.StringBuilder;

        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatchWapPdu() returned ");

        $r47 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r48);

        if i5 != -1 goto label20;

        return 1;

     label20:
        return 0;

     label21:
        if i1 != -1 goto label23;

        r57 = new android.content.Intent;

        specialinvoke r57.<android.content.Intent: void <init>(java.lang.String)>("android.provider.Telephony.SMS_DELIVER");

        r12 = r57;

        $r29 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        r11 = staticinvoke <com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSmsApplication(android.content.Context,boolean)>($r29, 1);

        if r11 == null goto label22;

        virtualinvoke r12.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r11);

        r58 = new java.lang.StringBuilder;

        specialinvoke r58.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delivering SMS to: ");

        $r38 = virtualinvoke r11.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r35 = virtualinvoke r11.<android.content.ComponentName: java.lang.String getClassName()>();

        $r42 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r43);

     label22:
        virtualinvoke r12.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>("pdus", r6);

        r13 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getFormat()>();

        virtualinvoke r12.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("format", r13);

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void dispatchIntent(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver)>(r12, "android.permission.RECEIVE_SMS", 16, r7);

        return 1;

     label23:
        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sms://localhost:");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        r14 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r28);

        r60 = new android.content.Intent;

        specialinvoke r60.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.DATA_SMS_RECEIVED", r14);

        r12 = r60;

        goto label22;

        catch android.database.SQLException from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch android.database.SQLException from label08 to label09 with label14;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch android.database.SQLException from label09 to label10 with label14;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch android.database.SQLException from label11 to label12 with label14;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    public void updatePhoneObject(com.android.internal.telephony.PhoneBase)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.PhoneBase r1;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.PhoneBase;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void sendMessage(int,java.lang.Object)>(7, r1);

        return;
    }
}
