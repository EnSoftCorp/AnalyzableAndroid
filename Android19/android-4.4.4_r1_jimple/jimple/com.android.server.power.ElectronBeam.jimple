final class com.android.server.power.ElectronBeam extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final int DEJANK_FRAMES;
    private static final int ELECTRON_BEAM_LAYER;
    private static final float HSTRETCH_DURATION;
    public static final int MODE_COOL_DOWN;
    public static final int MODE_FADE;
    public static final int MODE_WARM_UP;
    private static final java.lang.String TAG;
    private static final float VSTRETCH_DURATION;
    private int mDisplayHeight;
    private int mDisplayLayerStack;
    private final com.android.server.display.DisplayManagerService mDisplayManager;
    private int mDisplayWidth;
    private android.opengl.EGLConfig mEglConfig;
    private android.opengl.EGLContext mEglContext;
    private android.opengl.EGLDisplay mEglDisplay;
    private android.opengl.EGLSurface mEglSurface;
    private int mMode;
    private boolean mPrepared;
    private android.view.Surface mSurface;
    private float mSurfaceAlpha;
    private android.view.SurfaceControl mSurfaceControl;
    private com.android.server.power.ElectronBeam$NaturalSurfaceLayout mSurfaceLayout;
    private android.view.SurfaceSession mSurfaceSession;
    private boolean mSurfaceVisible;
    private final java.nio.FloatBuffer mTexCoordBuffer;
    private final float[] mTexMatrix;
    private final int[] mTexNames;
    private boolean mTexNamesGenerated;
    private final java.nio.FloatBuffer mVertexBuffer;

    public void <init>(com.android.server.display.DisplayManagerService)
    {
        com.android.server.power.ElectronBeam r0;
        com.android.server.display.DisplayManagerService r1;
        int[] $r2;
        float[] $r3;
        java.nio.FloatBuffer $r4, $r5;

        r0 := @this: com.android.server.power.ElectronBeam;

        r1 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (int)[1];

        r0.<com.android.server.power.ElectronBeam: int[] mTexNames> = $r2;

        $r3 = newarray (float)[16];

        r0.<com.android.server.power.ElectronBeam: float[] mTexMatrix> = $r3;

        $r4 = staticinvoke <com.android.server.power.ElectronBeam: java.nio.FloatBuffer createNativeFloatBuffer(int)>(8);

        r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mVertexBuffer> = $r4;

        $r5 = staticinvoke <com.android.server.power.ElectronBeam: java.nio.FloatBuffer createNativeFloatBuffer(int)>(8);

        r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mTexCoordBuffer> = $r5;

        r0.<com.android.server.power.ElectronBeam: com.android.server.display.DisplayManagerService mDisplayManager> = r1;

        return;
    }

    private boolean attachEglContext()
    {
        com.android.server.power.ElectronBeam r0;
        android.opengl.EGLSurface $r1, $r3, $r4;
        android.opengl.EGLContext $r2;
        android.opengl.EGLDisplay $r5;
        boolean $z0;

        r0 := @this: com.android.server.power.ElectronBeam;

        $r1 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLSurface mEglSurface>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r5 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay>;

        $r4 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLSurface mEglSurface>;

        $r3 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLSurface mEglSurface>;

        $r2 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLContext mEglContext>;

        $z0 = staticinvoke <android.opengl.EGL14: boolean eglMakeCurrent(android.opengl.EGLDisplay,android.opengl.EGLSurface,android.opengl.EGLSurface,android.opengl.EGLContext)>($r5, $r4, $r3, $r2);

        if $z0 != 0 goto label2;

        staticinvoke <com.android.server.power.ElectronBeam: void logEglError(java.lang.String)>("eglMakeCurrent");

        return 0;

     label2:
        return 1;
    }

    private boolean captureScreenshotTextureAndSetViewport()
    {
        com.android.server.power.ElectronBeam r0;
        java.lang.Throwable r1, r4, $r26, $r29;
        android.graphics.SurfaceTexture r2, $r6;
        android.view.Surface r3, $r7;
        boolean z0, $z1, $z2;
        int[] $r5, $r28;
        int $i0, $i1, $i2, $i3, $i4;
        float[] $r8, $r27;
        android.os.IBinder $r9;
        java.nio.FloatBuffer $r11, $r13, $r15, $r17, $r19, $r20, $r22, $r24;
        float $f0, $f1;

        r0 := @this: com.android.server.power.ElectronBeam;

        $z1 = specialinvoke r0.<com.android.server.power.ElectronBeam: boolean attachEglContext()>();

        if $z1 != 0 goto label01;

        return 0;

     label01:
        $z2 = r0.<com.android.server.power.ElectronBeam: boolean mTexNamesGenerated>;

        if $z2 != 0 goto label04;

        $r28 = r0.<com.android.server.power.ElectronBeam: int[] mTexNames>;

        staticinvoke <android.opengl.GLES10: void glGenTextures(int,int[],int)>(1, $r28, 0);

        z0 = staticinvoke <com.android.server.power.ElectronBeam: boolean checkGlErrors(java.lang.String)>("glGenTextures");

     label02:
        if z0 == 0 goto label03;

        specialinvoke r0.<com.android.server.power.ElectronBeam: void detachEglContext()>();

        return 0;

     label03:
        r0.<com.android.server.power.ElectronBeam: boolean mTexNamesGenerated> = 1;

     label04:
        $r6 = new android.graphics.SurfaceTexture;

        $r5 = r0.<com.android.server.power.ElectronBeam: int[] mTexNames>;

        $i0 = $r5[0];

        specialinvoke $r6.<android.graphics.SurfaceTexture: void <init>(int)>($i0);

        r2 = $r6;

        $r7 = new android.view.Surface;

        specialinvoke $r7.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>(r2);

        r3 = $r7;

     label05:
        $r9 = staticinvoke <android.view.SurfaceControl: android.os.IBinder getBuiltInDisplay(int)>(0);

        staticinvoke <android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface)>($r9, r3);

     label06:
        virtualinvoke r3.<android.view.Surface: void release()>();

        virtualinvoke r2.<android.graphics.SurfaceTexture: void updateTexImage()>();

        $r8 = r0.<com.android.server.power.ElectronBeam: float[] mTexMatrix>;

        virtualinvoke r2.<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>($r8);

        $r11 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r11.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(0, 0.0F);

        $r13 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r13.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(1, 0.0F);

        $r15 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r15.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(2, 0.0F);

        $r17 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r17.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(3, 1.0F);

        $r19 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r19.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(4, 1.0F);

        $r22 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r22.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(5, 1.0F);

        $r20 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r20.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(6, 1.0F);

        $r24 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r24.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(7, 0.0F);

        $i2 = r0.<com.android.server.power.ElectronBeam: int mDisplayWidth>;

        $i1 = r0.<com.android.server.power.ElectronBeam: int mDisplayHeight>;

        staticinvoke <android.opengl.GLES10: void glViewport(int,int,int,int)>(0, 0, $i2, $i1);

        staticinvoke <android.opengl.GLES10: void glMatrixMode(int)>(5889);

        staticinvoke <android.opengl.GLES10: void glLoadIdentity()>();

        $i3 = r0.<com.android.server.power.ElectronBeam: int mDisplayWidth>;

        $f1 = (float) $i3;

        $i4 = r0.<com.android.server.power.ElectronBeam: int mDisplayHeight>;

        $f0 = (float) $i4;

        staticinvoke <android.opengl.GLES10: void glOrthof(float,float,float,float,float,float)>(0.0F, $f1, 0.0F, $f0, 0.0F, 1.0F);

        staticinvoke <android.opengl.GLES10: void glMatrixMode(int)>(5888);

        staticinvoke <android.opengl.GLES10: void glLoadIdentity()>();

        staticinvoke <android.opengl.GLES10: void glMatrixMode(int)>(5890);

        staticinvoke <android.opengl.GLES10: void glLoadIdentity()>();

        $r27 = r0.<com.android.server.power.ElectronBeam: float[] mTexMatrix>;

        staticinvoke <android.opengl.GLES10: void glLoadMatrixf(float[],int)>($r27, 0);

     label07:
        specialinvoke r0.<com.android.server.power.ElectronBeam: void detachEglContext()>();

        return 1;

     label08:
        $r29 := @caughtexception;

        r4 = $r29;

     label09:
        virtualinvoke r3.<android.view.Surface: void release()>();

        throw r4;

     label10:
        $r26 := @caughtexception;

        r1 = $r26;

        specialinvoke r0.<com.android.server.power.ElectronBeam: void detachEglContext()>();

        throw r1;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    private static boolean checkGlErrors(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.android.server.power.ElectronBeam: boolean checkGlErrors(java.lang.String,boolean)>(r0, 1);

        return $z0;
    }

    private static boolean checkGlErrors(java.lang.String, boolean)
    {
        java.lang.String r0, $r5;
        boolean z0, z1;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.Throwable $r6;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 = 0;

     label1:
        i0 = staticinvoke <android.opengl.GLES10: int glGetError()>();

        if i0 == 0 goto label3;

        if z0 == 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed: error ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.Throwable;

        specialinvoke $r6.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ElectronBeam", $r5, $r6);

     label2:
        z1 = 1;

        goto label1;

     label3:
        return z1;
    }

    private boolean createEglContext()
    {
        com.android.server.power.ElectronBeam r0;
        int[] r1, r2, r4, r5, $r9, $r15;
        android.opengl.EGLConfig[] r3;
        android.opengl.EGLDisplay $r6, $r12, $r16, $r18, $r19, $r20, $r21;
        android.opengl.EGLConfig $r7, $r11, $r17;
        android.opengl.EGLContext $r8, $r10, $r13, $r14;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.power.ElectronBeam;

        $r6 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay>;

        if $r6 != null goto label2;

        $r19 = staticinvoke <android.opengl.EGL14: android.opengl.EGLDisplay eglGetDisplay(int)>(0);

        r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay> = $r19;

        $r21 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay>;

        $r18 = <android.opengl.EGL14: android.opengl.EGLDisplay EGL_NO_DISPLAY>;

        if $r21 != $r18 goto label1;

        staticinvoke <com.android.server.power.ElectronBeam: void logEglError(java.lang.String)>("eglGetDisplay");

        return 0;

     label1:
        r5 = newarray (int)[2];

        $r20 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay>;

        $z1 = staticinvoke <android.opengl.EGL14: boolean eglInitialize(android.opengl.EGLDisplay,int[],int,int[],int)>($r20, r5, 0, r5, 1);

        if $z1 != 0 goto label2;

        r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay> = null;

        staticinvoke <com.android.server.power.ElectronBeam: void logEglError(java.lang.String)>("eglInitialize");

        return 0;

     label2:
        $r7 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLConfig mEglConfig>;

        if $r7 != null goto label4;

        $r15 = newarray (int)[9];

        $r15[0] = 12324;

        $r15[1] = 8;

        $r15[2] = 12323;

        $r15[3] = 8;

        $r15[4] = 12322;

        $r15[5] = 8;

        $r15[6] = 12321;

        $r15[7] = 8;

        $r15[8] = 12344;

        r1 = $r15;

        r2 = newarray (int)[1];

        r3 = newarray (android.opengl.EGLConfig)[1];

        $r16 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay>;

        $i0 = lengthof r3;

        $z0 = staticinvoke <android.opengl.EGL14: boolean eglChooseConfig(android.opengl.EGLDisplay,int[],int,android.opengl.EGLConfig[],int,int,int[],int)>($r16, r1, 0, r3, 0, $i0, r2, 0);

        if $z0 != 0 goto label3;

        staticinvoke <com.android.server.power.ElectronBeam: void logEglError(java.lang.String)>("eglChooseConfig");

        return 0;

     label3:
        $r17 = r3[0];

        r0.<com.android.server.power.ElectronBeam: android.opengl.EGLConfig mEglConfig> = $r17;

     label4:
        $r8 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLContext mEglContext>;

        if $r8 != null goto label5;

        $r9 = newarray (int)[1];

        $r9[0] = 12344;

        r4 = $r9;

        $r12 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay>;

        $r11 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLConfig mEglConfig>;

        $r10 = <android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>;

        $r13 = staticinvoke <android.opengl.EGL14: android.opengl.EGLContext eglCreateContext(android.opengl.EGLDisplay,android.opengl.EGLConfig,android.opengl.EGLContext,int[],int)>($r12, $r11, $r10, r4, 0);

        r0.<com.android.server.power.ElectronBeam: android.opengl.EGLContext mEglContext> = $r13;

        $r14 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLContext mEglContext>;

        if $r14 != null goto label5;

        staticinvoke <com.android.server.power.ElectronBeam: void logEglError(java.lang.String)>("eglCreateContext");

        return 0;

     label5:
        return 1;
    }

    private boolean createEglSurface()
    {
        com.android.server.power.ElectronBeam r0;
        int[] r1, $r3;
        android.opengl.EGLSurface $r2, $r7, $r8;
        android.view.Surface $r4;
        android.opengl.EGLConfig $r5;
        android.opengl.EGLDisplay $r6;

        r0 := @this: com.android.server.power.ElectronBeam;

        $r2 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLSurface mEglSurface>;

        if $r2 != null goto label1;

        $r3 = newarray (int)[1];

        $r3[0] = 12344;

        r1 = $r3;

        $r6 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay>;

        $r5 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLConfig mEglConfig>;

        $r4 = r0.<com.android.server.power.ElectronBeam: android.view.Surface mSurface>;

        $r7 = staticinvoke <android.opengl.EGL14: android.opengl.EGLSurface eglCreateWindowSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.lang.Object,int[],int)>($r6, $r5, $r4, r1, 0);

        r0.<com.android.server.power.ElectronBeam: android.opengl.EGLSurface mEglSurface> = $r7;

        $r8 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLSurface mEglSurface>;

        if $r8 != null goto label1;

        staticinvoke <com.android.server.power.ElectronBeam: void logEglError(java.lang.String)>("eglCreateWindowSurface");

        return 0;

     label1:
        return 1;
    }

    private static java.nio.FloatBuffer createNativeFloatBuffer(int)
    {
        int i0, $i1;
        java.nio.ByteBuffer r0;
        java.nio.ByteOrder $r1;
        java.nio.FloatBuffer $r3;

        i0 := @parameter0: int;

        $i1 = i0 * 4;

        r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i1);

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        $r3 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        return $r3;
    }

    private boolean createSurface()
    {
        com.android.server.power.ElectronBeam r0;
        java.lang.Throwable r1, $r18;
        android.view.SurfaceControl r2, $r5, $r6, $r8, $r12, $r14;
        android.view.Surface$OutOfResourcesException r3, $r16;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.SurfaceSession $r4, $r15, $r17;
        android.view.Surface $r7, $r9;
        com.android.server.power.ElectronBeam$NaturalSurfaceLayout $r10, $r13;
        com.android.server.display.DisplayManagerService $r11;

        r0 := @this: com.android.server.power.ElectronBeam;

        $r4 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceSession mSurfaceSession>;

        if $r4 != null goto label01;

        $r17 = new android.view.SurfaceSession;

        specialinvoke $r17.<android.view.SurfaceSession: void <init>()>();

        r0.<com.android.server.power.ElectronBeam: android.view.SurfaceSession mSurfaceSession> = $r17;

     label01:
        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label02:
        r2 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl>;

     label03:
        if r2 != null goto label07;

     label04:
        $i4 = r0.<com.android.server.power.ElectronBeam: int mMode>;

        if $i4 != 2 goto label09;

     label05:
        i0 = 131076;

     label06:
        $r14 = new android.view.SurfaceControl;

        $r15 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceSession mSurfaceSession>;

        $i6 = r0.<com.android.server.power.ElectronBeam: int mDisplayWidth>;

        $i5 = r0.<com.android.server.power.ElectronBeam: int mDisplayHeight>;

        specialinvoke $r14.<android.view.SurfaceControl: void <init>(android.view.SurfaceSession,java.lang.String,int,int,int,int)>($r15, "ElectronBeam", $i6, $i5, -1, i0);

        r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl> = $r14;

     label07:
        $r5 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl>;

        $i1 = r0.<com.android.server.power.ElectronBeam: int mDisplayLayerStack>;

        virtualinvoke $r5.<android.view.SurfaceControl: void setLayerStack(int)>($i1);

        $r6 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl>;

        $i3 = r0.<com.android.server.power.ElectronBeam: int mDisplayWidth>;

        $i2 = r0.<com.android.server.power.ElectronBeam: int mDisplayHeight>;

        virtualinvoke $r6.<android.view.SurfaceControl: void setSize(int,int)>($i3, $i2);

        $r7 = new android.view.Surface;

        specialinvoke $r7.<android.view.Surface: void <init>()>();

        r0.<com.android.server.power.ElectronBeam: android.view.Surface mSurface> = $r7;

        $r9 = r0.<com.android.server.power.ElectronBeam: android.view.Surface mSurface>;

        $r8 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r9.<android.view.Surface: void copyFrom(android.view.SurfaceControl)>($r8);

        $r10 = new com.android.server.power.ElectronBeam$NaturalSurfaceLayout;

        $r11 = r0.<com.android.server.power.ElectronBeam: com.android.server.display.DisplayManagerService mDisplayManager>;

        $r12 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl>;

        specialinvoke $r10.<com.android.server.power.ElectronBeam$NaturalSurfaceLayout: void <init>(com.android.server.display.DisplayManagerService,android.view.SurfaceControl)>($r11, $r12);

        r0.<com.android.server.power.ElectronBeam: com.android.server.power.ElectronBeam$NaturalSurfaceLayout mSurfaceLayout> = $r10;

        $r13 = r0.<com.android.server.power.ElectronBeam: com.android.server.power.ElectronBeam$NaturalSurfaceLayout mSurfaceLayout>;

        virtualinvoke $r13.<com.android.server.power.ElectronBeam$NaturalSurfaceLayout: void onDisplayTransaction()>();

     label08:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        return 1;

     label09:
        i0 = 1028;

        goto label06;

     label10:
        $r16 := @caughtexception;

        r3 = $r16;

     label11:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ElectronBeam", "Unable to create surface.", r3);

     label12:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        return 0;

     label13:
        $r18 := @caughtexception;

        r1 = $r18;

        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw r1;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch android.view.Surface$OutOfResourcesException from label04 to label05 with label10;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch android.view.Surface$OutOfResourcesException from label06 to label07 with label10;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    private void destroyEglSurface()
    {
        com.android.server.power.ElectronBeam r0;
        android.opengl.EGLSurface $r1, $r2;
        android.opengl.EGLDisplay $r3;
        boolean $z0;

        r0 := @this: com.android.server.power.ElectronBeam;

        $r1 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLSurface mEglSurface>;

        if $r1 == null goto label2;

        $r3 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay>;

        $r2 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLSurface mEglSurface>;

        $z0 = staticinvoke <android.opengl.EGL14: boolean eglDestroySurface(android.opengl.EGLDisplay,android.opengl.EGLSurface)>($r3, $r2);

        if $z0 != 0 goto label1;

        staticinvoke <com.android.server.power.ElectronBeam: void logEglError(java.lang.String)>("eglDestroySurface");

     label1:
        r0.<com.android.server.power.ElectronBeam: android.opengl.EGLSurface mEglSurface> = null;

     label2:
        return;
    }

    private void destroyScreenshotTexture()
    {
        com.android.server.power.ElectronBeam r0;
        java.lang.Throwable r1, $r3;
        boolean $z0, $z1;
        int[] $r2;

        r0 := @this: com.android.server.power.ElectronBeam;

        $z0 = r0.<com.android.server.power.ElectronBeam: boolean mTexNamesGenerated>;

        if $z0 == 0 goto label3;

        r0.<com.android.server.power.ElectronBeam: boolean mTexNamesGenerated> = 0;

        $z1 = specialinvoke r0.<com.android.server.power.ElectronBeam: boolean attachEglContext()>();

        if $z1 == 0 goto label3;

     label1:
        $r2 = r0.<com.android.server.power.ElectronBeam: int[] mTexNames>;

        staticinvoke <android.opengl.GLES10: void glDeleteTextures(int,int[],int)>(1, $r2, 0);

        staticinvoke <com.android.server.power.ElectronBeam: boolean checkGlErrors(java.lang.String)>("glDeleteTextures");

     label2:
        specialinvoke r0.<com.android.server.power.ElectronBeam: void detachEglContext()>();

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r1 = $r3;

        specialinvoke r0.<com.android.server.power.ElectronBeam: void detachEglContext()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private void destroySurface()
    {
        com.android.server.power.ElectronBeam r0;
        java.lang.Throwable r1, $r6;
        android.view.SurfaceControl $r2, $r4;
        com.android.server.power.ElectronBeam$NaturalSurfaceLayout $r3;
        android.view.Surface $r5;

        r0 := @this: com.android.server.power.ElectronBeam;

        $r2 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.power.ElectronBeam: com.android.server.power.ElectronBeam$NaturalSurfaceLayout mSurfaceLayout>;

        virtualinvoke $r3.<com.android.server.power.ElectronBeam$NaturalSurfaceLayout: void dispose()>();

        r0.<com.android.server.power.ElectronBeam: com.android.server.power.ElectronBeam$NaturalSurfaceLayout mSurfaceLayout> = null;

        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label1:
        $r4 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r4.<android.view.SurfaceControl: void destroy()>();

        $r5 = r0.<com.android.server.power.ElectronBeam: android.view.Surface mSurface>;

        virtualinvoke $r5.<android.view.Surface: void release()>();

     label2:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl> = null;

        r0.<com.android.server.power.ElectronBeam: boolean mSurfaceVisible> = 0;

        r0.<com.android.server.power.ElectronBeam: float mSurfaceAlpha> = 0.0F;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private void detachEglContext()
    {
        com.android.server.power.ElectronBeam r0;
        android.opengl.EGLDisplay $r1, $r5;
        android.opengl.EGLContext $r2;
        android.opengl.EGLSurface $r3, $r4;

        r0 := @this: com.android.server.power.ElectronBeam;

        $r1 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay>;

        if $r1 == null goto label1;

        $r5 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay>;

        $r4 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        $r3 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        $r2 = <android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>;

        staticinvoke <android.opengl.EGL14: boolean eglMakeCurrent(android.opengl.EGLDisplay,android.opengl.EGLSurface,android.opengl.EGLSurface,android.opengl.EGLContext)>($r5, $r4, $r3, $r2);

     label1:
        return;
    }

    private void drawHStretch(float)
    {
        com.android.server.power.ElectronBeam r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        byte $b0;
        java.nio.FloatBuffer $r1, $r2;
        int $i1, $i2;

        r0 := @this: com.android.server.power.ElectronBeam;

        f0 := @parameter0: float;

        f1 = staticinvoke <com.android.server.power.ElectronBeam: float scurve(float,float)>(f0, 8.0F);

        $b0 = f0 cmpg 1.0F;

        if $b0 >= 0 goto label1;

        $r1 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mVertexBuffer>;

        staticinvoke <android.opengl.GLES10: void glVertexPointer(int,int,int,java.nio.Buffer)>(2, 5126, 0, $r1);

        staticinvoke <android.opengl.GLES10: void glEnableClientState(int)>(32884);

        $r2 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mVertexBuffer>;

        $i1 = r0.<com.android.server.power.ElectronBeam: int mDisplayWidth>;

        $f3 = (float) $i1;

        $i2 = r0.<com.android.server.power.ElectronBeam: int mDisplayHeight>;

        $f2 = (float) $i2;

        staticinvoke <com.android.server.power.ElectronBeam: void setHStretchQuad(java.nio.FloatBuffer,float,float,float)>($r2, $f3, $f2, f1);

        $f4 = f1 * 0.75F;

        $f9 = 1.0F - $f4;

        $f5 = f1 * 0.75F;

        $f8 = 1.0F - $f5;

        $f6 = f1 * 0.75F;

        $f7 = 1.0F - $f6;

        staticinvoke <android.opengl.GLES10: void glColor4f(float,float,float,float)>($f9, $f8, $f7, 1.0F);

        staticinvoke <android.opengl.GLES10: void glDrawArrays(int,int,int)>(6, 0, 4);

        staticinvoke <android.opengl.GLES10: void glDisableClientState(int)>(32884);

     label1:
        return;
    }

    private void drawVStretch(float)
    {
        com.android.server.power.ElectronBeam r0;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9;
        short s0;
        java.nio.FloatBuffer $r1, $r3, $r4, $r5, $r6;
        int[] $r2;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: com.android.server.power.ElectronBeam;

        f0 := @parameter0: float;

        f1 = staticinvoke <com.android.server.power.ElectronBeam: float scurve(float,float)>(f0, 7.5F);

        f2 = staticinvoke <com.android.server.power.ElectronBeam: float scurve(float,float)>(f0, 8.0F);

        f3 = staticinvoke <com.android.server.power.ElectronBeam: float scurve(float,float)>(f0, 8.5F);

        staticinvoke <android.opengl.GLES10: void glBlendFunc(int,int)>(1, 1);

        staticinvoke <android.opengl.GLES10: void glEnable(int)>(3042);

        $r1 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mVertexBuffer>;

        staticinvoke <android.opengl.GLES10: void glVertexPointer(int,int,int,java.nio.Buffer)>(2, 5126, 0, $r1);

        staticinvoke <android.opengl.GLES10: void glEnableClientState(int)>(32884);

        staticinvoke <android.opengl.GLES10: void glDisable(int)>(3553);

        staticinvoke <android.opengl.GLES10: void glEnable(int)>(36197);

        $r2 = r0.<com.android.server.power.ElectronBeam: int[] mTexNames>;

        $i1 = $r2[0];

        staticinvoke <android.opengl.GLES10: void glBindTexture(int,int)>(36197, $i1);

        $i2 = r0.<com.android.server.power.ElectronBeam: int mMode>;

        if $i2 != 0 goto label3;

        s0 = 8448;

     label1:
        staticinvoke <android.opengl.GLES10: void glTexEnvx(int,int,int)>(8960, 8704, s0);

        staticinvoke <android.opengl.GLES10: void glTexParameterx(int,int,int)>(36197, 10240, 9729);

        staticinvoke <android.opengl.GLES10: void glTexParameterx(int,int,int)>(36197, 10241, 9729);

        staticinvoke <android.opengl.GLES10: void glTexParameterx(int,int,int)>(36197, 10242, 33071);

        staticinvoke <android.opengl.GLES10: void glTexParameterx(int,int,int)>(36197, 10243, 33071);

        staticinvoke <android.opengl.GLES10: void glEnable(int)>(36197);

        $r3 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mTexCoordBuffer>;

        staticinvoke <android.opengl.GLES10: void glTexCoordPointer(int,int,int,java.nio.Buffer)>(2, 5126, 0, $r3);

        staticinvoke <android.opengl.GLES10: void glEnableClientState(int)>(32888);

        $r4 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mVertexBuffer>;

        $i3 = r0.<com.android.server.power.ElectronBeam: int mDisplayWidth>;

        $f4 = (float) $i3;

        $i4 = r0.<com.android.server.power.ElectronBeam: int mDisplayHeight>;

        $f5 = (float) $i4;

        staticinvoke <com.android.server.power.ElectronBeam: void setVStretchQuad(java.nio.FloatBuffer,float,float,float)>($r4, $f4, $f5, f1);

        staticinvoke <android.opengl.GLES10: void glColorMask(boolean,boolean,boolean,boolean)>(1, 0, 0, 1);

        staticinvoke <android.opengl.GLES10: void glDrawArrays(int,int,int)>(6, 0, 4);

        $r5 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mVertexBuffer>;

        $i5 = r0.<com.android.server.power.ElectronBeam: int mDisplayWidth>;

        $f7 = (float) $i5;

        $i6 = r0.<com.android.server.power.ElectronBeam: int mDisplayHeight>;

        $f6 = (float) $i6;

        staticinvoke <com.android.server.power.ElectronBeam: void setVStretchQuad(java.nio.FloatBuffer,float,float,float)>($r5, $f7, $f6, f2);

        staticinvoke <android.opengl.GLES10: void glColorMask(boolean,boolean,boolean,boolean)>(0, 1, 0, 1);

        staticinvoke <android.opengl.GLES10: void glDrawArrays(int,int,int)>(6, 0, 4);

        $r6 = r0.<com.android.server.power.ElectronBeam: java.nio.FloatBuffer mVertexBuffer>;

        $i8 = r0.<com.android.server.power.ElectronBeam: int mDisplayWidth>;

        $f8 = (float) $i8;

        $i7 = r0.<com.android.server.power.ElectronBeam: int mDisplayHeight>;

        $f9 = (float) $i7;

        staticinvoke <com.android.server.power.ElectronBeam: void setVStretchQuad(java.nio.FloatBuffer,float,float,float)>($r6, $f8, $f9, f3);

        staticinvoke <android.opengl.GLES10: void glColorMask(boolean,boolean,boolean,boolean)>(0, 0, 1, 1);

        staticinvoke <android.opengl.GLES10: void glDrawArrays(int,int,int)>(6, 0, 4);

        staticinvoke <android.opengl.GLES10: void glDisable(int)>(36197);

        staticinvoke <android.opengl.GLES10: void glDisableClientState(int)>(32888);

        staticinvoke <android.opengl.GLES10: void glColorMask(boolean,boolean,boolean,boolean)>(1, 1, 1, 1);

        $i9 = r0.<com.android.server.power.ElectronBeam: int mMode>;

        if $i9 != 1 goto label2;

        staticinvoke <android.opengl.GLES10: void glColor4f(float,float,float,float)>(f2, f2, f2, 1.0F);

        staticinvoke <android.opengl.GLES10: void glDrawArrays(int,int,int)>(6, 0, 4);

     label2:
        staticinvoke <android.opengl.GLES10: void glDisableClientState(int)>(32884);

        staticinvoke <android.opengl.GLES10: void glDisable(int)>(3042);

        return;

     label3:
        s0 = 7681;

        goto label1;
    }

    private static void logEglError(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        int $i0;
        java.lang.Throwable $r6;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed: error ");

        $i0 = staticinvoke <android.opengl.EGL14: int eglGetError()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.Throwable;

        specialinvoke $r6.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ElectronBeam", $r5, $r6);

        return;
    }

    private static float scurve(float, float)
    {
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = f0 - 0.5F;

        $f3 = staticinvoke <com.android.server.power.ElectronBeam: float sigmoid(float,float)>($f2, f1);

        $f4 = $f3 - 0.5F;

        $f5 = staticinvoke <com.android.server.power.ElectronBeam: float sigmoid(float,float)>(0.5F, f1);

        $f6 = $f5 - 0.5F;

        $f7 = $f4 / $f6;

        $f8 = 0.5F * $f7;

        $f9 = 0.5F + $f8;

        return $f9;
    }

    private static void setHStretchQuad(java.nio.FloatBuffer, float, float, float)
    {
        java.nio.FloatBuffer r0;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9;

        r0 := @parameter0: java.nio.FloatBuffer;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $f5 = 2.0F * f0;

        $f4 = 1.0F - f2;

        f3 = $f5 * $f4;

        $f6 = f0 - f3;

        $f9 = 0.5F * $f6;

        $f7 = f1 - 1.0F;

        $f8 = 0.5F * $f7;

        staticinvoke <com.android.server.power.ElectronBeam: void setQuad(java.nio.FloatBuffer,float,float,float,float)>(r0, $f9, $f8, f3, 1.0F);

        return;
    }

    private static void setQuad(java.nio.FloatBuffer, float, float, float, float)
    {
        java.nio.FloatBuffer r0;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7;

        r0 := @parameter0: java.nio.FloatBuffer;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(0, f0);

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(1, f1);

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(2, f0);

        $f4 = f1 + f3;

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(3, $f4);

        $f5 = f0 + f2;

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(4, $f5);

        $f6 = f1 + f3;

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(5, $f6);

        $f7 = f0 + f2;

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(6, $f7);

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(7, f1);

        return;
    }

    private static void setVStretchQuad(java.nio.FloatBuffer, float, float, float)
    {
        java.nio.FloatBuffer r0;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10;

        r0 := @parameter0: java.nio.FloatBuffer;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $f5 = f0 * f2;

        f3 = f0 + $f5;

        $f6 = f1 * f2;

        f4 = f1 - $f6;

        $f7 = f0 - f3;

        $f10 = 0.5F * $f7;

        $f8 = f1 - f4;

        $f9 = 0.5F * $f8;

        staticinvoke <com.android.server.power.ElectronBeam: void setQuad(java.nio.FloatBuffer,float,float,float,float)>(r0, $f10, $f9, f3, f4);

        return;
    }

    private boolean showSurface(float)
    {
        com.android.server.power.ElectronBeam r0;
        float f0, $f1;
        java.lang.Throwable r1, $r5;
        boolean $z0;
        android.view.SurfaceControl $r2, $r3, $r4;
        byte $b0;

        r0 := @this: com.android.server.power.ElectronBeam;

        f0 := @parameter0: float;

        $z0 = r0.<com.android.server.power.ElectronBeam: boolean mSurfaceVisible>;

        if $z0 == 0 goto label1;

        $f1 = r0.<com.android.server.power.ElectronBeam: float mSurfaceAlpha>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label4;

     label1:
        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label2:
        $r2 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r2.<android.view.SurfaceControl: void setLayer(int)>(1073741825);

        $r3 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r3.<android.view.SurfaceControl: void setAlpha(float)>(f0);

        $r4 = r0.<com.android.server.power.ElectronBeam: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r4.<android.view.SurfaceControl: void show()>();

     label3:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        r0.<com.android.server.power.ElectronBeam: boolean mSurfaceVisible> = 1;

        r0.<com.android.server.power.ElectronBeam: float mSurfaceAlpha> = f0;

     label4:
        return 1;

     label5:
        $r5 := @caughtexception;

        r1 = $r5;

        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw r1;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    private static float sigmoid(float, float)
    {
        float f0, f1, $f2, $f3, $f4, $f5, $f6;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = neg f0;

        $f3 = f1 * $f2;

        $f4 = staticinvoke <android.util.FloatMath: float exp(float)>($f3);

        $f5 = 1.0F + $f4;

        $f6 = 1.0F / $f5;

        return $f6;
    }

    private boolean tryPrepare()
    {
        com.android.server.power.ElectronBeam r0;
        boolean $z0, $z1, $z2, $z3;
        int $i0;

        r0 := @this: com.android.server.power.ElectronBeam;

        $z0 = specialinvoke r0.<com.android.server.power.ElectronBeam: boolean createSurface()>();

        if $z0 == 0 goto label4;

        $i0 = r0.<com.android.server.power.ElectronBeam: int mMode>;

        if $i0 != 2 goto label2;

     label1:
        return 1;

     label2:
        $z1 = specialinvoke r0.<com.android.server.power.ElectronBeam: boolean createEglContext()>();

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r0.<com.android.server.power.ElectronBeam: boolean createEglSurface()>();

        if $z2 == 0 goto label3;

        $z3 = specialinvoke r0.<com.android.server.power.ElectronBeam: boolean captureScreenshotTextureAndSetViewport()>();

        if $z3 != 0 goto label1;

     label3:
        return 0;

     label4:
        return 0;
    }

    public void dismiss()
    {
        com.android.server.power.ElectronBeam r0;

        r0 := @this: com.android.server.power.ElectronBeam;

        specialinvoke r0.<com.android.server.power.ElectronBeam: void destroyScreenshotTexture()>();

        specialinvoke r0.<com.android.server.power.ElectronBeam: void destroyEglSurface()>();

        specialinvoke r0.<com.android.server.power.ElectronBeam: void destroySurface()>();

        r0.<com.android.server.power.ElectronBeam: boolean mPrepared> = 0;

        return;
    }

    public boolean draw(float)
    {
        com.android.server.power.ElectronBeam r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6;
        java.lang.Throwable r1, $r4;
        boolean z0, $z1, $z2, $z4, $z5;
        int $i0;
        byte $b1;
        android.opengl.EGLSurface $r2;
        android.opengl.EGLDisplay $r3;

        r0 := @this: com.android.server.power.ElectronBeam;

        f0 := @parameter0: float;

        $z1 = r0.<com.android.server.power.ElectronBeam: boolean mPrepared>;

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $i0 = r0.<com.android.server.power.ElectronBeam: int mMode>;

        if $i0 != 2 goto label03;

        $f5 = 1.0F - f0;

        $z5 = specialinvoke r0.<com.android.server.power.ElectronBeam: boolean showSurface(float)>($f5);

        return $z5;

     label03:
        $z2 = specialinvoke r0.<com.android.server.power.ElectronBeam: boolean attachEglContext()>();

        if $z2 == 0 goto label01;

     label04:
        staticinvoke <android.opengl.GLES10: void glClearColor(float,float,float,float)>(0.0F, 0.0F, 0.0F, 1.0F);

        staticinvoke <android.opengl.GLES10: void glClear(int)>(16384);

     label05:
        $b1 = f0 cmpg 0.5F;

        if $b1 >= 0 goto label09;

     label06:
        $f4 = f0 / 0.5F;

        $f6 = 1.0F - $f4;

        specialinvoke r0.<com.android.server.power.ElectronBeam: void drawHStretch(float)>($f6);

     label07:
        z0 = staticinvoke <com.android.server.power.ElectronBeam: boolean checkGlErrors(java.lang.String)>("drawFrame");

     label08:
        if z0 == 0 goto label13;

        specialinvoke r0.<com.android.server.power.ElectronBeam: void detachEglContext()>();

        return 0;

     label09:
        $f2 = f0 - 0.5F;

        $f3 = $f2 / 0.5F;

        f1 = 1.0F - $f3;

     label10:
        specialinvoke r0.<com.android.server.power.ElectronBeam: void drawVStretch(float)>(f1);

     label11:
        goto label07;

     label12:
        $r4 := @caughtexception;

        r1 = $r4;

        specialinvoke r0.<com.android.server.power.ElectronBeam: void detachEglContext()>();

        throw r1;

     label13:
        $r3 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLDisplay mEglDisplay>;

        $r2 = r0.<com.android.server.power.ElectronBeam: android.opengl.EGLSurface mEglSurface>;

        staticinvoke <android.opengl.EGL14: boolean eglSwapBuffers(android.opengl.EGLDisplay,android.opengl.EGLSurface)>($r3, $r2);

     label14:
        specialinvoke r0.<com.android.server.power.ElectronBeam: void detachEglContext()>();

        $z4 = specialinvoke r0.<com.android.server.power.ElectronBeam: boolean showSurface(float)>(1.0F);

        return $z4;

        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.power.ElectronBeam r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r15, $r17, $r18, $r19, $r20, $r21, $r23, $r25, $r26, $r27, $r28;
        boolean $z0, $z1;
        java.lang.String $r5, $r9, $r14, $r16, $r22, $r24, $r29;
        int $i0, $i1, $i2, $i3;
        float $f0;

        r0 := @this: com.android.server.power.ElectronBeam;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Electron Beam State:");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPrepared=");

        $z0 = r0.<com.android.server.power.ElectronBeam: boolean mPrepared>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMode=");

        $i0 = r0.<com.android.server.power.ElectronBeam: int mMode>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayLayerStack=");

        $i1 = r0.<com.android.server.power.ElectronBeam: int mDisplayLayerStack>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayWidth=");

        $i2 = r0.<com.android.server.power.ElectronBeam: int mDisplayWidth>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayHeight=");

        $i3 = r0.<com.android.server.power.ElectronBeam: int mDisplayHeight>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r22);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSurfaceVisible=");

        $z1 = r0.<com.android.server.power.ElectronBeam: boolean mSurfaceVisible>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSurfaceAlpha=");

        $f0 = r0.<com.android.server.power.ElectronBeam: float mSurfaceAlpha>;

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        return;
    }

    public boolean prepare(int)
    {
        com.android.server.power.ElectronBeam r0;
        int i0, i1, $i2, $i3, $i4;
        android.view.DisplayInfo r1;
        com.android.server.display.DisplayManagerService $r2;
        boolean $z0;

        r0 := @this: com.android.server.power.ElectronBeam;

        i0 := @parameter0: int;

        r0.<com.android.server.power.ElectronBeam: int mMode> = i0;

        $r2 = r0.<com.android.server.power.ElectronBeam: com.android.server.display.DisplayManagerService mDisplayManager>;

        r1 = virtualinvoke $r2.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo getDisplayInfo(int)>(0);

        $i2 = r1.<android.view.DisplayInfo: int layerStack>;

        r0.<com.android.server.power.ElectronBeam: int mDisplayLayerStack> = $i2;

        $i3 = virtualinvoke r1.<android.view.DisplayInfo: int getNaturalWidth()>();

        r0.<com.android.server.power.ElectronBeam: int mDisplayWidth> = $i3;

        $i4 = virtualinvoke r1.<android.view.DisplayInfo: int getNaturalHeight()>();

        r0.<com.android.server.power.ElectronBeam: int mDisplayHeight> = $i4;

        $z0 = specialinvoke r0.<com.android.server.power.ElectronBeam: boolean tryPrepare()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.server.power.ElectronBeam: void dismiss()>();

        return 0;

     label1:
        r0.<com.android.server.power.ElectronBeam: boolean mPrepared> = 1;

        if i0 != 1 goto label3;

        i1 = 0;

     label2:
        if i1 >= 3 goto label3;

        virtualinvoke r0.<com.android.server.power.ElectronBeam: boolean draw(float)>(1.0F);

        i1 = i1 + 1;

        goto label2;

     label3:
        return 1;
    }

    public static void <clinit>()
    {
        <com.android.server.power.ElectronBeam: float VSTRETCH_DURATION> = 0.5F;

        <com.android.server.power.ElectronBeam: java.lang.String TAG> = "ElectronBeam";

        <com.android.server.power.ElectronBeam: int MODE_WARM_UP> = 0;

        <com.android.server.power.ElectronBeam: int MODE_FADE> = 2;

        <com.android.server.power.ElectronBeam: int MODE_COOL_DOWN> = 1;

        <com.android.server.power.ElectronBeam: float HSTRETCH_DURATION> = 0.5F;

        <com.android.server.power.ElectronBeam: int ELECTRON_BEAM_LAYER> = 1073741825;

        <com.android.server.power.ElectronBeam: int DEJANK_FRAMES> = 3;

        <com.android.server.power.ElectronBeam: boolean DEBUG> = 0;

        return;
    }
}
