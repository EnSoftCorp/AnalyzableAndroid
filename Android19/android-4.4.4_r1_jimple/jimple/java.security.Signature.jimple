public abstract class java.security.Signature extends java.security.SignatureSpi
{
    private static org.apache.harmony.security.fortress.Engine ENGINE;
    private static final java.lang.String SERVICE;
    protected static final int SIGN;
    protected static final int UNINITIALIZED;
    protected static final int VERIFY;
    private java.lang.String algorithm;
    private java.security.Provider provider;
    protected int state;

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;

        <java.security.Signature: int VERIFY> = 3;

        <java.security.Signature: int UNINITIALIZED> = 0;

        <java.security.Signature: int SIGN> = 2;

        <java.security.Signature: java.lang.String SERVICE> = "Signature";

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("Signature");

        <java.security.Signature: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        return;
    }

    protected void <init>(java.lang.String)
    {
        java.security.Signature r0;
        java.lang.String r1;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();

        r0.<java.security.Signature: int state> = 0;

        r0.<java.security.Signature: java.lang.String algorithm> = r1;

        return;
    }

    static java.security.Provider access$002(java.security.Signature, java.security.Provider)
    {
        java.security.Signature r0;
        java.security.Provider r1;

        r0 := @parameter0: java.security.Signature;

        r1 := @parameter1: java.security.Provider;

        r0.<java.security.Signature: java.security.Provider provider> = r1;

        return r1;
    }

    public static java.security.Signature getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r1;
        java.lang.Object r2;
        java.security.Provider r3;
        java.security.Signature r4;
        org.apache.harmony.security.fortress.Engine $r5;
        boolean $z0;
        java.security.Signature$SignatureImpl $r6;
        java.security.SignatureSpi $r7;
        java.lang.NullPointerException $r8;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r8;

     label1:
        $r5 = <java.security.Signature: org.apache.harmony.security.fortress.Engine ENGINE>;

        r1 = virtualinvoke $r5.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)>(r0, null);

        r2 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        r3 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        $z0 = r2 instanceof java.security.Signature;

        if $z0 == 0 goto label2;

        r4 = (java.security.Signature) r2;

        r4.<java.security.Signature: java.lang.String algorithm> = r0;

        r4.<java.security.Signature: java.security.Provider provider> = r3;

        return r4;

     label2:
        $r6 = new java.security.Signature$SignatureImpl;

        $r7 = (java.security.SignatureSpi) r2;

        specialinvoke $r6.<java.security.Signature$SignatureImpl: void <init>(java.security.SignatureSpi,java.security.Provider,java.lang.String)>($r7, r3, r0);

        return $r6;
    }

    public static java.security.Signature getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1;
        java.security.Provider r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        java.security.Signature $r4;
        java.security.NoSuchProviderException $r5;
        java.lang.NullPointerException $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r6;

     label1:
        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label3:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);

        if r2 != null goto label4;

        $r5 = new java.security.NoSuchProviderException;

        specialinvoke $r5.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label4:
        $r4 = staticinvoke <java.security.Signature: java.security.Signature getSignatureInstance(java.lang.String,java.security.Provider)>(r0, r2);

        return $r4;
    }

    public static java.security.Signature getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1;
        java.security.Signature $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r4;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r3;

     label2:
        $r2 = staticinvoke <java.security.Signature: java.security.Signature getSignatureInstance(java.lang.String,java.security.Provider)>(r0, r1);

        return $r2;
    }

    private static java.security.Signature getSignatureInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1;
        java.lang.Object r2;
        java.security.Signature r3;
        org.apache.harmony.security.fortress.Engine $r4;
        boolean $z0;
        java.security.Signature$SignatureImpl $r5;
        java.security.SignatureSpi $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        $r4 = <java.security.Signature: org.apache.harmony.security.fortress.Engine ENGINE>;

        r2 = virtualinvoke $r4.<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)>(r0, r1, null);

        $z0 = r2 instanceof java.security.Signature;

        if $z0 == 0 goto label1;

        r3 = (java.security.Signature) r2;

        r3.<java.security.Signature: java.lang.String algorithm> = r0;

        r3.<java.security.Signature: java.security.Provider provider> = r1;

        return r3;

     label1:
        $r5 = new java.security.Signature$SignatureImpl;

        $r6 = (java.security.SignatureSpi) r2;

        specialinvoke $r5.<java.security.Signature$SignatureImpl: void <init>(java.security.SignatureSpi,java.security.Provider,java.lang.String)>($r6, r1, r0);

        return $r5;
    }

    private java.lang.String stateToString(int)
    {
        java.security.Signature r0;
        int i0;

        r0 := @this: java.security.Signature;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        return "";

     label2:
        return "UNINITIALIZED";

     label3:
        return "SIGN";

     label4:
        return "VERIFY";
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.security.Signature r0;
        boolean $z0;
        java.lang.CloneNotSupportedException $r1;
        java.lang.Object $r2;

        r0 := @this: java.security.Signature;

        $z0 = r0 instanceof java.lang.Cloneable;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<java.security.SignatureSpi: java.lang.Object clone()>();

        return $r2;

     label1:
        $r1 = new java.lang.CloneNotSupportedException;

        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>()>();

        throw $r1;
    }

    public final java.lang.String getAlgorithm()
    {
        java.security.Signature r0;
        java.lang.String $r1;

        r0 := @this: java.security.Signature;

        $r1 = r0.<java.security.Signature: java.lang.String algorithm>;

        return $r1;
    }

    public final java.lang.Object getParameter(java.lang.String) throws java.security.InvalidParameterException
    {
        java.security.Signature r0;
        java.lang.String r1;
        java.lang.Object $r2;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<java.security.Signature: java.lang.Object engineGetParameter(java.lang.String)>(r1);

        return $r2;
    }

    public final java.security.AlgorithmParameters getParameters()
    {
        java.security.Signature r0;
        java.security.AlgorithmParameters $r1;

        r0 := @this: java.security.Signature;

        $r1 = virtualinvoke r0.<java.security.Signature: java.security.AlgorithmParameters engineGetParameters()>();

        return $r1;
    }

    public final java.security.Provider getProvider()
    {
        java.security.Signature r0;
        java.security.Provider $r1;

        r0 := @this: java.security.Signature;

        $r1 = r0.<java.security.Signature: java.security.Provider provider>;

        return $r1;
    }

    public final void initSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        java.security.Signature r0;
        java.security.PrivateKey r1;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: java.security.PrivateKey;

        virtualinvoke r0.<java.security.Signature: void engineInitSign(java.security.PrivateKey)>(r1);

        r0.<java.security.Signature: int state> = 2;

        return;
    }

    public final void initSign(java.security.PrivateKey, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        java.security.Signature r0;
        java.security.PrivateKey r1;
        java.security.SecureRandom r2;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: java.security.PrivateKey;

        r2 := @parameter1: java.security.SecureRandom;

        virtualinvoke r0.<java.security.Signature: void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)>(r1, r2);

        r0.<java.security.Signature: int state> = 2;

        return;
    }

    public final void initVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        java.security.Signature r0;
        java.security.PublicKey r1;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: java.security.PublicKey;

        virtualinvoke r0.<java.security.Signature: void engineInitVerify(java.security.PublicKey)>(r1);

        r0.<java.security.Signature: int state> = 3;

        return;
    }

    public final void initVerify(java.security.cert.Certificate) throws java.security.InvalidKeyException
    {
        java.security.Signature r0;
        java.security.cert.Certificate r1;
        java.util.Set r2;
        java.util.Iterator r3;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        boolean[] r4;
        java.security.PublicKey $r5;
        java.security.cert.X509Certificate $r6, $r7;
        java.security.InvalidKeyException $r8;
        java.lang.Object $r9;
        java.lang.String $r10;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: java.security.cert.Certificate;

        $z2 = r1 instanceof java.security.cert.X509Certificate;

        if $z2 == 0 goto label3;

        $r6 = (java.security.cert.X509Certificate) r1;

        r2 = virtualinvoke $r6.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();

        if r2 == null goto label3;

        $z3 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>();

        if $z3 != 0 goto label3;

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        z1 = 0;

        if z0 == 0 goto label2;

        $r10 = "2.5.29.15";

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z5 == 0 goto label1;

        z1 = 1;

     label2:
        if z1 == 0 goto label3;

        $r7 = (java.security.cert.X509Certificate) r1;

        r4 = virtualinvoke $r7.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();

        if r4 == null goto label3;

        $z4 = r4[0];

        if $z4 != 0 goto label3;

        $r8 = new java.security.InvalidKeyException;

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>("The public key in the certificate cannot be used for digital signature purposes");

        throw $r8;

     label3:
        $r5 = virtualinvoke r1.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

        virtualinvoke r0.<java.security.Signature: void engineInitVerify(java.security.PublicKey)>($r5);

        r0.<java.security.Signature: int state> = 3;

        return;
    }

    public final void setParameter(java.lang.String, java.lang.Object) throws java.security.InvalidParameterException
    {
        java.security.Signature r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<java.security.Signature: void engineSetParameter(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    public final void setParameter(java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        java.security.Signature r0;
        java.security.spec.AlgorithmParameterSpec r1;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        virtualinvoke r0.<java.security.Signature: void engineSetParameter(java.security.spec.AlgorithmParameterSpec)>(r1);

        return;
    }

    public final int sign(byte[], int, int) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r2;
        java.security.SignatureException $r3;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 == null goto label1;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        $i4 = r0.<java.security.Signature: int state>;

        if $i4 == 2 goto label3;

        $r3 = new java.security.SignatureException;

        specialinvoke $r3.<java.security.SignatureException: void <init>(java.lang.String)>("Signature object is not initialized properly");

        throw $r3;

     label3:
        $i5 = virtualinvoke r0.<java.security.Signature: int engineSign(byte[],int,int)>(r1, i0, i1);

        return $i5;
    }

    public final byte[] sign() throws java.security.SignatureException
    {
        java.security.Signature r0;
        int $i0;
        byte[] $r1;
        java.security.SignatureException $r2;

        r0 := @this: java.security.Signature;

        $i0 = r0.<java.security.Signature: int state>;

        if $i0 == 2 goto label1;

        $r2 = new java.security.SignatureException;

        specialinvoke $r2.<java.security.SignatureException: void <init>(java.lang.String)>("Signature object is not initialized properly");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<java.security.Signature: byte[] engineSign()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        java.security.Signature r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7;
        java.lang.String $r3, $r6, $r8;
        int $i0;

        r0 := @this: java.security.Signature;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIGNATURE ");

        $r3 = r0.<java.security.Signature: java.lang.String algorithm>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" state: ");

        $i0 = r0.<java.security.Signature: int state>;

        $r6 = specialinvoke r0.<java.security.Signature: java.lang.String stateToString(int)>($i0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public final void update(byte) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte b0;
        int $i1;
        java.security.SignatureException $r1;

        r0 := @this: java.security.Signature;

        b0 := @parameter0: byte;

        $i1 = r0.<java.security.Signature: int state>;

        if $i1 != 0 goto label1;

        $r1 = new java.security.SignatureException;

        specialinvoke $r1.<java.security.SignatureException: void <init>(java.lang.String)>("Signature object is not initialized properly");

        throw $r1;

     label1:
        virtualinvoke r0.<java.security.Signature: void engineUpdate(byte)>(b0);

        return;
    }

    public final void update(java.nio.ByteBuffer) throws java.security.SignatureException
    {
        java.security.Signature r0;
        java.nio.ByteBuffer r1;
        int $i0;
        java.security.SignatureException $r2;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = r0.<java.security.Signature: int state>;

        if $i0 != 0 goto label1;

        $r2 = new java.security.SignatureException;

        specialinvoke $r2.<java.security.SignatureException: void <init>(java.lang.String)>("Signature object is not initialized properly");

        throw $r2;

     label1:
        virtualinvoke r0.<java.security.Signature: void engineUpdate(java.nio.ByteBuffer)>(r1);

        return;
    }

    public final void update(byte[]) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte[] r1;
        int $i0, $i1;
        java.security.SignatureException $r2;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: byte[];

        $i0 = r0.<java.security.Signature: int state>;

        if $i0 != 0 goto label1;

        $r2 = new java.security.SignatureException;

        specialinvoke $r2.<java.security.SignatureException: void <init>(java.lang.String)>("Signature object is not initialized properly");

        throw $r2;

     label1:
        $i1 = lengthof r1;

        virtualinvoke r0.<java.security.Signature: void engineUpdate(byte[],int,int)>(r1, 0, $i1);

        return;
    }

    public final void update(byte[], int, int) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r2;
        java.security.SignatureException $r3;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r0.<java.security.Signature: int state>;

        if $i2 != 0 goto label1;

        $r3 = new java.security.SignatureException;

        specialinvoke $r3.<java.security.SignatureException: void <init>(java.lang.String)>("Signature object is not initialized properly");

        throw $r3;

     label1:
        if r1 == null goto label2;

        if i0 < 0 goto label2;

        if i1 < 0 goto label2;

        $i4 = i0 + i1;

        $i3 = lengthof r1;

        if $i4 <= $i3 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label3:
        virtualinvoke r0.<java.security.Signature: void engineUpdate(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public final boolean verify(byte[]) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte[] r1;
        int $i0;
        boolean $z0;
        java.security.SignatureException $r2;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: byte[];

        $i0 = r0.<java.security.Signature: int state>;

        if $i0 == 3 goto label1;

        $r2 = new java.security.SignatureException;

        specialinvoke $r2.<java.security.SignatureException: void <init>(java.lang.String)>("Signature object is not initialized properly");

        throw $r2;

     label1:
        $z0 = virtualinvoke r0.<java.security.Signature: boolean engineVerify(byte[])>(r1);

        return $z0;
    }

    public final boolean verify(byte[], int, int) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.security.SignatureException $r3;

        r0 := @this: java.security.Signature;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r0.<java.security.Signature: int state>;

        if $i2 == 3 goto label1;

        $r3 = new java.security.SignatureException;

        specialinvoke $r3.<java.security.SignatureException: void <init>(java.lang.String)>("Signature object is not initialized properly");

        throw $r3;

     label1:
        if r1 == null goto label2;

        if i0 < 0 goto label2;

        if i1 < 0 goto label2;

        $i4 = i0 + i1;

        $i3 = lengthof r1;

        if $i4 <= $i3 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label3:
        $z0 = virtualinvoke r0.<java.security.Signature: boolean engineVerify(byte[],int,int)>(r1, i0, i1);

        return $z0;
    }
}
