public final class libcore.util.Objects extends java.lang.Object
{

    private void <init>()
    {
        libcore.util.Objects r0;

        r0 := @this: libcore.util.Objects;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean equal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == r1 goto label1;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static int hashCode(java.lang.Object)
    {
        java.lang.Object r0;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public static java.lang.String toString(java.lang.Object)
    {
        java.lang.Object r0, r6;
        java.lang.Class r1, $r15, $r17, $r20, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33;
        java.lang.StringBuilder r2, $r7, $r8, $r18, $r19, $r22, $r25;
        java.lang.reflect.Field[] r3;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.reflect.Field r4;
        java.lang.IllegalAccessException r5, $r66, $r68;
        java.lang.String $r9, $r11, $r14, $r35, $r39, $r43, $r47, $r52, $r56, $r60, $r64, $r73;
        boolean $z0;
        java.lang.Object[] $r36, $r37;
        short[] $r40, $r41;
        long[] $r44, $r45;
        int[] $r48, $r49;
        double[] $r50, $r51;
        float[] $r54, $r55;
        byte[] $r58, $r59;
        char[] $r62, $r63;
        java.lang.AssertionError $r69;
        boolean[] $r70, $r71;

        r0 := @parameter0: java.lang.Object;

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r2 = $r7;

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r3;

        i1 = 0;

        i2 = 0;

     label01:
        if i1 >= i0 goto label33;

        r4 = r3[i1];

        $i4 = virtualinvoke r4.<java.lang.reflect.Field: int getModifiers()>();

        $i5 = 136 & $i4;

        if $i5 == 0 goto label03;

        i3 = i2;

     label02:
        i1 = i1 + 1;

        i2 = i3;

        goto label01;

     label03:
        virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label04:
        r6 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

     label05:
        i3 = i2 + 1;

        if i2 <= 0 goto label07;

     label06:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label07:
        $r14 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r15 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r15.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label27;

        $r28 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        if $r28 != class "[Z" goto label11;

        $r71 = (boolean[]) r6;

        $r70 = (boolean[]) $r71;

        $r73 = staticinvoke <java.util.Arrays: java.lang.String toString(boolean[])>($r70);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

     label08:
        goto label02;

     label09:
        $r68 := @caughtexception;

        r5 = $r68;

     label10:
        $r69 = new java.lang.AssertionError;

        specialinvoke $r69.<java.lang.AssertionError: void <init>(java.lang.Object)>(r5);

        throw $r69;

     label11:
        $r29 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        if $r29 != class "[B" goto label13;

        $r58 = (byte[]) r6;

        $r59 = (byte[]) $r58;

        $r60 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r59);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

     label12:
        goto label02;

     label13:
        $r26 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        if $r26 != class "[C" goto label15;

        $r62 = (char[]) r6;

        $r63 = (char[]) $r62;

        $r64 = staticinvoke <java.util.Arrays: java.lang.String toString(char[])>($r63);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

     label14:
        goto label02;

     label15:
        $r27 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        if $r27 != class "[D" goto label17;

        $r50 = (double[]) r6;

        $r51 = (double[]) $r50;

        $r52 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r51);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

     label16:
        goto label02;

     label17:
        $r32 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        if $r32 != class "[F" goto label19;

        $r54 = (float[]) r6;

        $r55 = (float[]) $r54;

        $r56 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>($r55);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

     label18:
        goto label02;

     label19:
        $r33 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        if $r33 != class "[I" goto label21;

        $r49 = (int[]) r6;

        $r48 = (int[]) $r49;

        $r47 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r48);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

     label20:
        goto label02;

     label21:
        $r30 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        if $r30 != class "[J" goto label23;

        $r45 = (long[]) r6;

        $r44 = (long[]) $r45;

        $r43 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>($r44);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

     label22:
        goto label02;

     label23:
        $r31 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        if $r31 != class "[S" goto label25;

        $r41 = (short[]) r6;

        $r40 = (short[]) $r41;

        $r39 = staticinvoke <java.util.Arrays: java.lang.String toString(short[])>($r40);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

     label24:
        goto label02;

     label25:
        $r37 = (java.lang.Object[]) r6;

        $r36 = (java.lang.Object[]) $r37;

        $r35 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r36);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

     label26:
        goto label02;

     label27:
        $r17 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        if $r17 != class "java/lang/Character" goto label29;

        $r25 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

     label28:
        goto label02;

     label29:
        $r20 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        if $r20 != class "java/lang/String" goto label31;

        $r18 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label30:
        goto label02;

     label31:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

     label32:
        goto label02;

     label33:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label34:
        $r66 := @caughtexception;

        r5 = $r66;

        goto label10;

        catch java.lang.IllegalAccessException from label04 to label05 with label34;
        catch java.lang.IllegalAccessException from label06 to label07 with label09;
        catch java.lang.IllegalAccessException from label07 to label08 with label09;
        catch java.lang.IllegalAccessException from label11 to label12 with label09;
        catch java.lang.IllegalAccessException from label13 to label14 with label09;
        catch java.lang.IllegalAccessException from label15 to label16 with label09;
        catch java.lang.IllegalAccessException from label17 to label18 with label09;
        catch java.lang.IllegalAccessException from label19 to label20 with label09;
        catch java.lang.IllegalAccessException from label21 to label22 with label09;
        catch java.lang.IllegalAccessException from label23 to label24 with label09;
        catch java.lang.IllegalAccessException from label25 to label26 with label09;
        catch java.lang.IllegalAccessException from label27 to label28 with label09;
        catch java.lang.IllegalAccessException from label29 to label30 with label09;
        catch java.lang.IllegalAccessException from label31 to label32 with label09;
    }
}
