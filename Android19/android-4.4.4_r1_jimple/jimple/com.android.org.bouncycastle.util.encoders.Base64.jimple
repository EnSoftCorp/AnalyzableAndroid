public class com.android.org.bouncycastle.util.encoders.Base64 extends java.lang.Object
{
    private static final com.android.org.bouncycastle.util.encoders.Encoder encoder;

    static void <clinit>()
    {
        com.android.org.bouncycastle.util.encoders.Base64Encoder $r0;

        $r0 = new com.android.org.bouncycastle.util.encoders.Base64Encoder;

        specialinvoke $r0.<com.android.org.bouncycastle.util.encoders.Base64Encoder: void <init>()>();

        <com.android.org.bouncycastle.util.encoders.Base64: com.android.org.bouncycastle.util.encoders.Encoder encoder> = $r0;

        return;
    }

    public void <init>()
    {
        com.android.org.bouncycastle.util.encoders.Base64 r0;

        r0 := @this: com.android.org.bouncycastle.util.encoders.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int decode(java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.OutputStream r1;
        com.android.org.bouncycastle.util.encoders.Encoder $r2;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = <com.android.org.bouncycastle.util.encoders.Base64: com.android.org.bouncycastle.util.encoders.Encoder encoder>;

        $i0 = interfaceinvoke $r2.<com.android.org.bouncycastle.util.encoders.Encoder: int decode(java.lang.String,java.io.OutputStream)>(r0, r1);

        return $i0;
    }

    public static byte[] decode(java.lang.String)
    {
        java.lang.String r0, $r10, $r11;
        java.io.ByteArrayOutputStream r1, $r3;
        java.lang.Exception r2, $r6;
        int $i0, $i1, $i2;
        com.android.org.bouncycastle.util.encoders.Encoder $r4;
        byte[] $r5;
        com.android.org.bouncycastle.util.encoders.DecoderException $r7;
        java.lang.StringBuilder $r8, $r9, $r12;

        r0 := @parameter0: java.lang.String;

        $r3 = new java.io.ByteArrayOutputStream;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 / 4;

        $i2 = 3 * $i1;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>(int)>($i2);

        r1 = $r3;

     label1:
        $r4 = <com.android.org.bouncycastle.util.encoders.Base64: com.android.org.bouncycastle.util.encoders.Encoder encoder>;

        interfaceinvoke $r4.<com.android.org.bouncycastle.util.encoders.Encoder: int decode(java.lang.String,java.io.OutputStream)>(r0, r1);

     label2:
        $r5 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new com.android.org.bouncycastle.util.encoders.DecoderException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to decode base64 string: ");

        $r10 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.android.org.bouncycastle.util.encoders.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>($r11, r2);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static byte[] decode(byte[])
    {
        byte[] r0, $r5;
        java.io.ByteArrayOutputStream r1, $r3;
        java.lang.Exception r2, $r6;
        int $i0, $i1, $i2, $i3;
        com.android.org.bouncycastle.util.encoders.Encoder $r4;
        com.android.org.bouncycastle.util.encoders.DecoderException $r7;
        java.lang.StringBuilder $r8, $r9, $r12;
        java.lang.String $r10, $r11;

        r0 := @parameter0: byte[];

        $r3 = new java.io.ByteArrayOutputStream;

        $i0 = lengthof r0;

        $i1 = $i0 / 4;

        $i2 = 3 * $i1;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>(int)>($i2);

        r1 = $r3;

     label1:
        $r4 = <com.android.org.bouncycastle.util.encoders.Base64: com.android.org.bouncycastle.util.encoders.Encoder encoder>;

        $i3 = lengthof r0;

        interfaceinvoke $r4.<com.android.org.bouncycastle.util.encoders.Encoder: int decode(byte[],int,int,java.io.OutputStream)>(r0, 0, $i3, r1);

     label2:
        $r5 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new com.android.org.bouncycastle.util.encoders.DecoderException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to decode base64 data: ");

        $r10 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.android.org.bouncycastle.util.encoders.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>($r11, r2);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static int encode(byte[], int, int, java.io.OutputStream) throws java.io.IOException
    {
        byte[] r0;
        int i0, i1, $i2;
        java.io.OutputStream r1;
        com.android.org.bouncycastle.util.encoders.Encoder $r2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.io.OutputStream;

        $r2 = <com.android.org.bouncycastle.util.encoders.Base64: com.android.org.bouncycastle.util.encoders.Encoder encoder>;

        $i2 = interfaceinvoke $r2.<com.android.org.bouncycastle.util.encoders.Encoder: int encode(byte[],int,int,java.io.OutputStream)>(r0, i0, i1, r1);

        return $i2;
    }

    public static int encode(byte[], java.io.OutputStream) throws java.io.IOException
    {
        byte[] r0;
        java.io.OutputStream r1;
        int $i0, $i1;
        com.android.org.bouncycastle.util.encoders.Encoder $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.OutputStream;

        $r2 = <com.android.org.bouncycastle.util.encoders.Base64: com.android.org.bouncycastle.util.encoders.Encoder encoder>;

        $i0 = lengthof r0;

        $i1 = interfaceinvoke $r2.<com.android.org.bouncycastle.util.encoders.Encoder: int encode(byte[],int,int,java.io.OutputStream)>(r0, 0, $i0, r1);

        return $i1;
    }

    public static byte[] encode(byte[])
    {
        byte[] r0, $r1;
        int $i0;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <com.android.org.bouncycastle.util.encoders.Base64: byte[] encode(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static byte[] encode(byte[], int, int)
    {
        byte[] r0, $r5;
        int i0, i1, $i2, $i3, $i4;
        java.io.ByteArrayOutputStream r1, $r3;
        java.lang.Exception r2, $r6;
        com.android.org.bouncycastle.util.encoders.Encoder $r4;
        com.android.org.bouncycastle.util.encoders.EncoderException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11, $r12;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = new java.io.ByteArrayOutputStream;

        $i2 = i1 + 2;

        $i3 = $i2 / 3;

        $i4 = 4 * $i3;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>(int)>($i4);

        r1 = $r3;

     label1:
        $r4 = <com.android.org.bouncycastle.util.encoders.Base64: com.android.org.bouncycastle.util.encoders.Encoder encoder>;

        interfaceinvoke $r4.<com.android.org.bouncycastle.util.encoders.Encoder: int encode(byte[],int,int,java.io.OutputStream)>(r0, i0, i1, r1);

     label2:
        $r5 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new com.android.org.bouncycastle.util.encoders.EncoderException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception encoding base64 string: ");

        $r11 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.android.org.bouncycastle.util.encoders.EncoderException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r2);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String toBase64String(byte[])
    {
        byte[] r0;
        int $i0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <com.android.org.bouncycastle.util.encoders.Base64: java.lang.String toBase64String(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static java.lang.String toBase64String(byte[], int, int)
    {
        byte[] r0, $r1;
        int i0, i1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <com.android.org.bouncycastle.util.encoders.Base64: byte[] encode(byte[],int,int)>(r0, i0, i1);

        $r2 = staticinvoke <com.android.org.bouncycastle.util.Strings: java.lang.String fromByteArray(byte[])>($r1);

        return $r2;
    }
}
