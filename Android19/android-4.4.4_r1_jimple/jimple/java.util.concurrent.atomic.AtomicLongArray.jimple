public class java.util.concurrent.atomic.AtomicLongArray extends java.lang.Object implements java.io.Serializable
{
    private static final int base;
    private static final long serialVersionUID;
    private static final int shift;
    private static final sun.misc.Unsafe unsafe;
    private final long[] array;

    static void <clinit>()
    {
        int i0, $i1, $i2, $i3, $i4, $i5;
        sun.misc.Unsafe $r0, $r1, $r2;
        java.lang.Error $r3;

        <java.util.concurrent.atomic.AtomicLongArray: long serialVersionUID> = -2308431214976778248L;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.atomic.AtomicLongArray: sun.misc.Unsafe unsafe> = $r0;

        $r1 = <java.util.concurrent.atomic.AtomicLongArray: sun.misc.Unsafe unsafe>;

        $i1 = virtualinvoke $r1.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[J");

        <java.util.concurrent.atomic.AtomicLongArray: int base> = $i1;

        $r2 = <java.util.concurrent.atomic.AtomicLongArray: sun.misc.Unsafe unsafe>;

        i0 = virtualinvoke $r2.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[J");

        $i2 = i0 - 1;

        $i3 = i0 & $i2;

        if $i3 == 0 goto label1;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("data type scale not a power of two");

        throw $r3;

     label1:
        $i4 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i5 = 31 - $i4;

        <java.util.concurrent.atomic.AtomicLongArray: int shift> = $i5;

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long[] $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[i0];

        r0.<java.util.concurrent.atomic.AtomicLongArray: long[] array> = $r1;

        return;
    }

    public void <init>(long[])
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        long[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        r1 := @parameter0: long[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (long[]) $r2;

        r0.<java.util.concurrent.atomic.AtomicLongArray: long[] array> = $r3;

        return;
    }

    private static long byteOffset(int)
    {
        int i0, $i1, $i3;
        long $l2, $l4, $l5, $l6;

        i0 := @parameter0: int;

        $l2 = (long) i0;

        $i1 = <java.util.concurrent.atomic.AtomicLongArray: int shift>;

        $l5 = $l2 << $i1;

        $i3 = <java.util.concurrent.atomic.AtomicLongArray: int base>;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        return $l6;
    }

    private long checkedByteOffset(int)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        long[] $r6;
        long $l2;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r6 = r0.<java.util.concurrent.atomic.AtomicLongArray: long[] array>;

        $i1 = lengthof $r6;

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $l2 = staticinvoke <java.util.concurrent.atomic.AtomicLongArray: long byteOffset(int)>(i0);

        return $l2;
    }

    private boolean compareAndSetRaw(long, long, long)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        long l0, l1, l2;
        long[] $r1;
        sun.misc.Unsafe $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r2 = <java.util.concurrent.atomic.AtomicLongArray: sun.misc.Unsafe unsafe>;

        $r1 = r0.<java.util.concurrent.atomic.AtomicLongArray: long[] array>;

        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>($r1, l0, l1, l2);

        return $z0;
    }

    private long getRaw(long)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        long l0, $l1;
        long[] $r1;
        sun.misc.Unsafe $r2;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        l0 := @parameter0: long;

        $r2 = <java.util.concurrent.atomic.AtomicLongArray: sun.misc.Unsafe unsafe>;

        $r1 = r0.<java.util.concurrent.atomic.AtomicLongArray: long[] array>;

        $l1 = virtualinvoke $r2.<sun.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>($r1, l0);

        return $l1;
    }

    public long addAndGet(int, long)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long l1, l2, l3, l4;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long checkedByteOffset(int)>(i0);

     label1:
        l3 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long getRaw(long)>(l2);

        l4 = l3 + l1;

        $z0 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSetRaw(long,long,long)>(l2, l3, l4);

        if $z0 == 0 goto label1;

        return l4;
    }

    public final boolean compareAndSet(int, long, long)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long l1, l2, $l3;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $l3 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long checkedByteOffset(int)>(i0);

        $z0 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSetRaw(long,long,long)>($l3, l1, l2);

        return $z0;
    }

    public final long decrementAndGet(int)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long $l1;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long addAndGet(int,long)>(i0, -1L);

        return $l1;
    }

    public final long get(int)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long $l1, $l2;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        $l1 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long checkedByteOffset(int)>(i0);

        $l2 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long getRaw(long)>($l1);

        return $l2;
    }

    public final long getAndAdd(int, long)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long l1, l2, l3, $l4;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long checkedByteOffset(int)>(i0);

     label1:
        l3 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long getRaw(long)>(l2);

        $l4 = l3 + l1;

        $z0 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSetRaw(long,long,long)>(l2, l3, $l4);

        if $z0 == 0 goto label1;

        return l3;
    }

    public final long getAndDecrement(int)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long $l1;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long getAndAdd(int,long)>(i0, -1L);

        return $l1;
    }

    public final long getAndIncrement(int)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long $l1;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long getAndAdd(int,long)>(i0, 1L);

        return $l1;
    }

    public final long getAndSet(int, long)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long l1, l2, l3;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long checkedByteOffset(int)>(i0);

     label1:
        l3 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long getRaw(long)>(l2);

        $z0 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSetRaw(long,long,long)>(l2, l3, l1);

        if $z0 == 0 goto label1;

        return l3;
    }

    public final long incrementAndGet(int)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long $l1;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long addAndGet(int,long)>(i0, 1L);

        return $l1;
    }

    public final void lazySet(int, long)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long l1, $l2;
        sun.misc.Unsafe $r1;
        long[] $r2;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = <java.util.concurrent.atomic.AtomicLongArray: sun.misc.Unsafe unsafe>;

        $r2 = r0.<java.util.concurrent.atomic.AtomicLongArray: long[] array>;

        $l2 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long checkedByteOffset(int)>(i0);

        virtualinvoke $r1.<sun.misc.Unsafe: void putOrderedLong(java.lang.Object,long,long)>($r2, $l2, l1);

        return;
    }

    public final int length()
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        long[] $r1;
        int $i0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        $r1 = r0.<java.util.concurrent.atomic.AtomicLongArray: long[] array>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public final void set(int, long)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long l1, $l2;
        sun.misc.Unsafe $r1;
        long[] $r2;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = <java.util.concurrent.atomic.AtomicLongArray: sun.misc.Unsafe unsafe>;

        $r2 = r0.<java.util.concurrent.atomic.AtomicLongArray: long[] array>;

        $l2 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long checkedByteOffset(int)>(i0);

        virtualinvoke $r1.<sun.misc.Unsafe: void putLongVolatile(java.lang.Object,long,long)>($r2, $l2, l1);

        return;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1, $r3, $r6, $r8;
        long[] $r2;
        long $l3, $l4;
        java.lang.String $r9;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        $r2 = r0.<java.util.concurrent.atomic.AtomicLongArray: long[] array>;

        $i2 = lengthof $r2;

        i0 = -1 + $i2;

        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i1 = 0;

     label2:
        $l3 = staticinvoke <java.util.concurrent.atomic.AtomicLongArray: long byteOffset(int)>(i1);

        $l4 = specialinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: long getRaw(long)>($l3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        if i1 != i0 goto label3;

        $r8 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label3:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i1 = i1 + 1;

        goto label2;
    }

    public final boolean weakCompareAndSet(int, long, long)
    {
        java.util.concurrent.atomic.AtomicLongArray r0;
        int i0;
        long l1, l2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSet(int,long,long)>(i0, l1, l2);

        return $z0;
    }
}
