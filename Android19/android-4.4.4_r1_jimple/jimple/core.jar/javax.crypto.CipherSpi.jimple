public abstract class javax.crypto.CipherSpi extends java.lang.Object
{

    public void <init>()
    {
        javax.crypto.CipherSpi r0;

        r0 := @this: javax.crypto.CipherSpi;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected int engineDoFinal(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.CipherSpi r0;
        java.nio.ByteBuffer r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        byte[] r3, r4, $r9;
        boolean $z0;
        javax.crypto.ShortBufferException $r8, $r13;
        java.lang.NullPointerException $r11, $r12;
        java.nio.BufferOverflowException $r14;

        r0 := @this: javax.crypto.CipherSpi;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.ByteBuffer;

        if r1 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("input == null");

        throw $r11;

     label1:
        if r2 != null goto label2;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("output == null");

        throw $r12;

     label2:
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i2 = i1 - i0;

        if $i2 > 0 goto label3;

        return 0;

     label3:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label5;

        $r9 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $i8 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i9 = i0 + $i8;

        $i10 = i1 - i0;

        r4 = virtualinvoke r0.<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)>($r9, $i9, $i10);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1);

     label4:
        $i5 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        $i6 = lengthof r4;

        if $i5 >= $i6 goto label6;

        $r8 = new javax.crypto.ShortBufferException;

        specialinvoke $r8.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("output buffer too small");

        throw $r8;

     label5:
        $i3 = i1 - i0;

        r3 = newarray (byte)[$i3];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r3);

        $i4 = i1 - i0;

        r4 = virtualinvoke r0.<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)>(r3, 0, $i4);

        goto label4;

     label6:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r4);

     label7:
        $i7 = lengthof r4;

        return $i7;

     label8:
        $r14 := @caughtexception;

        $r13 = new javax.crypto.ShortBufferException;

        specialinvoke $r13.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("output buffer too small");

        throw $r13;

        catch java.nio.BufferOverflowException from label6 to label7 with label8;
    }

    protected abstract int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;

    protected abstract byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;

    protected abstract int engineGetBlockSize();

    protected abstract byte[] engineGetIV();

    protected int engineGetKeySize(java.security.Key) throws java.security.InvalidKeyException
    {
        javax.crypto.CipherSpi r0;
        java.security.Key r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: javax.crypto.CipherSpi;

        r1 := @parameter0: java.security.Key;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    protected abstract int engineGetOutputSize(int);

    protected abstract java.security.AlgorithmParameters engineGetParameters();

    protected abstract void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;

    protected abstract void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException;

    protected abstract void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;

    protected abstract void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException;

    protected abstract void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException;

    protected java.security.Key engineUnwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    {
        javax.crypto.CipherSpi r0;
        byte[] r1;
        java.lang.String r2;
        int i0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: javax.crypto.CipherSpi;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    protected int engineUpdate(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException
    {
        javax.crypto.CipherSpi r0;
        java.nio.ByteBuffer r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        byte[] r3, r4, $r9;
        boolean $z0;
        javax.crypto.ShortBufferException $r8, $r13;
        java.lang.NullPointerException $r11, $r12;
        java.nio.BufferOverflowException $r14;

        r0 := @this: javax.crypto.CipherSpi;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.ByteBuffer;

        if r1 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("input == null");

        throw $r11;

     label1:
        if r2 != null goto label2;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("output == null");

        throw $r12;

     label2:
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i2 = i1 - i0;

        if $i2 > 0 goto label4;

     label3:
        return 0;

     label4:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label6;

        $r9 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $i8 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i9 = i0 + $i8;

        $i10 = i1 - i0;

        r4 = virtualinvoke r0.<javax.crypto.CipherSpi: byte[] engineUpdate(byte[],int,int)>($r9, $i9, $i10);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1);

     label5:
        if r4 == null goto label3;

        $i5 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        $i6 = lengthof r4;

        if $i5 >= $i6 goto label7;

        $r8 = new javax.crypto.ShortBufferException;

        specialinvoke $r8.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("output buffer too small");

        throw $r8;

     label6:
        $i3 = i1 - i0;

        r3 = newarray (byte)[$i3];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r3);

        $i4 = i1 - i0;

        r4 = virtualinvoke r0.<javax.crypto.CipherSpi: byte[] engineUpdate(byte[],int,int)>(r3, 0, $i4);

        goto label5;

     label7:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r4);

     label8:
        $i7 = lengthof r4;

        return $i7;

     label9:
        $r14 := @caughtexception;

        $r13 = new javax.crypto.ShortBufferException;

        specialinvoke $r13.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("output buffer too small");

        throw $r13;

        catch java.nio.BufferOverflowException from label7 to label8 with label9;
    }

    protected abstract int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException;

    protected abstract byte[] engineUpdate(byte[], int, int);

    protected void engineUpdateAAD(java.nio.ByteBuffer)
    {
        javax.crypto.CipherSpi r0;
        java.nio.ByteBuffer r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        byte[] r2, $r4;
        boolean $z0;
        java.lang.NullPointerException $r6;

        r0 := @this: javax.crypto.CipherSpi;

        r1 := @parameter0: java.nio.ByteBuffer;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("input == null");

        throw $r6;

     label1:
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i3 = i1 - i0;

        if $i3 > 0 goto label2;

        return;

     label2:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i6 = i0 + $i4;

        $i5 = i1 - i0;

        virtualinvoke r0.<javax.crypto.CipherSpi: void engineUpdateAAD(byte[],int,int)>($r4, $i6, $i5);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1);

        return;

     label3:
        i2 = i1 - i0;

        r2 = newarray (byte)[i2];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);

        virtualinvoke r0.<javax.crypto.CipherSpi: void engineUpdateAAD(byte[],int,int)>(r2, 0, i2);

        return;
    }

    protected void engineUpdateAAD(byte[], int, int)
    {
        javax.crypto.CipherSpi r0;
        byte[] r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: javax.crypto.CipherSpi;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This cipher does not support Authenticated Encryption with Additional Data");

        throw $r2;
    }

    protected byte[] engineWrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        javax.crypto.CipherSpi r0;
        java.security.Key r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: javax.crypto.CipherSpi;

        r1 := @parameter0: java.security.Key;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }
}
