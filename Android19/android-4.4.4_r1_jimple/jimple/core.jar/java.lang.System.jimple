public final class java.lang.System extends java.lang.Object
{
    public static final java.io.PrintStream err;
    public static final java.io.InputStream in;
    private static final java.lang.String lineSeparator;
    public static final java.io.PrintStream out;
    private static java.util.Properties systemProperties;

    static void <clinit>()
    {
        java.io.PrintStream $r0, $r3;
        java.io.FileOutputStream $r1, $r4;
        java.io.FileDescriptor $r2, $r5, $r8;
        java.io.BufferedInputStream $r6;
        java.io.FileInputStream $r7;
        java.lang.String $r9;

        $r0 = new java.io.PrintStream;

        $r1 = new java.io.FileOutputStream;

        $r2 = <java.io.FileDescriptor: java.io.FileDescriptor err>;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r2);

        specialinvoke $r0.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r1);

        <java.lang.System: java.io.PrintStream err> = $r0;

        $r3 = new java.io.PrintStream;

        $r4 = new java.io.FileOutputStream;

        $r5 = <java.io.FileDescriptor: java.io.FileDescriptor out>;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r5);

        specialinvoke $r3.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r4);

        <java.lang.System: java.io.PrintStream out> = $r3;

        $r6 = new java.io.BufferedInputStream;

        $r7 = new java.io.FileInputStream;

        $r8 = <java.io.FileDescriptor: java.io.FileDescriptor in>;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r8);

        specialinvoke $r6.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r7);

        <java.lang.System: java.io.InputStream in> = $r6;

        $r9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <java.lang.System: java.lang.String lineSeparator> = $r9;

        return;
    }

    private void <init>()
    {
        java.lang.System r0;

        r0 := @this: java.lang.System;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static native void arraycopy(java.lang.Object, int, java.lang.Object, int, int);

    private static void checkPropertyName(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r2;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name is empty");

        throw $r1;

     label2:
        return;
    }

    public static java.lang.String clearProperty(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.util.Properties $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <java.lang.System: void checkPropertyName(java.lang.String)>(r0);

        $r1 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $r2 = virtualinvoke $r1.<java.util.Properties: java.lang.Object remove(java.lang.Object)>(r0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public static java.io.Console console()
    {
        java.io.Console $r0;

        $r0 = staticinvoke <java.io.Console: java.io.Console getConsole()>();

        return $r0;
    }

    public static native long currentTimeMillis();

    public static void exit(int)
    {
        int i0;
        java.lang.Runtime $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r0.<java.lang.Runtime: void exit(int)>(i0);

        return;
    }

    public static void gc()
    {
        java.lang.Runtime $r0;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r0.<java.lang.Runtime: void gc()>();

        return;
    }

    public static java.util.Properties getProperties()
    {
        java.util.Properties $r0, $r1;

        $r0 = <java.lang.System: java.util.Properties systemProperties>;

        if $r0 != null goto label1;

        staticinvoke <java.lang.System: void initSystemProperties()>();

     label1:
        $r1 = <java.lang.System: java.util.Properties systemProperties>;

        return $r1;
    }

    public static java.lang.String getProperty(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String getProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r3;
        java.util.Properties $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.lang.System: void checkPropertyName(java.lang.String)>(r0);

        $r2 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $r3 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>(r0, r1);

        return $r3;
    }

    public static java.lang.SecurityManager getSecurityManager()
    {
        return null;
    }

    public static java.lang.String getenv(java.lang.String)
    {
        java.lang.String r0, $r2;
        libcore.io.Os $r1;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r3;

     label1:
        $r1 = <libcore.io.Libcore: libcore.io.Os os>;

        $r2 = interfaceinvoke $r1.<libcore.io.Os: java.lang.String getenv(java.lang.String)>(r0);

        return $r2;
    }

    public static java.util.Map getenv()
    {
        java.util.HashMap r0, $r3;
        java.lang.String[] r1;
        int i0, i1, i2, $i3;
        java.lang.String r2, $r6, $r7;
        libcore.io.Os $r4;
        java.lang.System$SystemEnvironment $r5;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0 = $r3;

        $r4 = <libcore.io.Libcore: libcore.io.Os os>;

        r1 = interfaceinvoke $r4.<libcore.io.Os: java.lang.String[] environ()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        i2 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(61);

        if i2 == -1 goto label2;

        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $i3 = i2 + 1;

        $r7 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = new java.lang.System$SystemEnvironment;

        specialinvoke $r5.<java.lang.System$SystemEnvironment: void <init>(java.util.Map)>(r0);

        return $r5;
    }

    public static native int identityHashCode(java.lang.Object);

    public static java.nio.channels.Channel inheritedChannel() throws java.io.IOException
    {
        java.nio.channels.spi.SelectorProvider $r0;
        java.nio.channels.Channel $r1;

        $r0 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();

        $r1 = virtualinvoke $r0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()>();

        return $r1;
    }

    private static void initSystemProperties()
    {
        dalvik.system.VMRuntime r0;
        java.util.Properties r1, $r6;
        java.lang.String r2, r3, $r8, $r9, $r32, $r37, $r42, $r43, $r45, $r50, $r51, $r52, $r59;
        libcore.io.ErrnoException r4, $r56;
        libcore.io.StructPasswd r5;
        libcore.io.StructUtsname r7;
        libcore.io.Os $r36, $r41, $r47;
        int $i0;
        java.lang.String[] $r57, $r58;
        java.lang.AssertionError $r62;

        r0 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r6 = new java.util.Properties;

        specialinvoke $r6.<java.util.Properties: void <init>()>();

        r1 = $r6;

        $r9 = virtualinvoke r0.<dalvik.system.VMRuntime: java.lang.String bootClassPath()>();

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.boot.class.path", $r9);

        $r8 = virtualinvoke r0.<dalvik.system.VMRuntime: java.lang.String classPath()>();

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.class.path", $r8);

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.class.version", "50.0");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.compiler", "");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.ext.dirs", "");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.version", "0");

        r2 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("JAVA_HOME");

        if r2 != null goto label1;

        r2 = "/system";

     label1:
        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.home", r2);

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.io.tmpdir", "/tmp");

        r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("LD_LIBRARY_PATH");

        if r3 == null goto label2;

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.library.path", r3);

     label2:
        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.specification.name", "Dalvik Core Library");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.specification.vendor", "The Android Project");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.specification.version", "0.9");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.vendor", "The Android Project");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.vendor.url", "http://www.android.com/");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.vm.name", "Dalvik");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.vm.specification.name", "Dalvik Virtual Machine Specification");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.vm.specification.vendor", "The Android Project");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.vm.specification.version", "0.9");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.vm.vendor", "The Android Project");

        $r32 = virtualinvoke r0.<dalvik.system.VMRuntime: java.lang.String vmVersion()>();

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.vm.version", $r32);

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("file.separator", "/");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("line.separator", "\n");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("path.separator", ":");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.runtime.name", "Android Runtime");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.runtime.version", "0.9");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.vm.vendor.url", "http://www.android.com/");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("file.encoding", "UTF-8");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("user.language", "en");

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("user.region", "US");

     label3:
        $r36 = <libcore.io.Libcore: libcore.io.Os os>;

        $r41 = <libcore.io.Libcore: libcore.io.Os os>;

        $i0 = interfaceinvoke $r41.<libcore.io.Os: int getuid()>();

        r5 = interfaceinvoke $r36.<libcore.io.Os: libcore.io.StructPasswd getpwuid(int)>($i0);

        $r37 = r5.<libcore.io.StructPasswd: java.lang.String pw_dir>;

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("user.home", $r37);

        $r45 = r5.<libcore.io.StructPasswd: java.lang.String pw_name>;

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("user.name", $r45);

     label4:
        $r47 = <libcore.io.Libcore: libcore.io.Os os>;

        r7 = interfaceinvoke $r47.<libcore.io.Os: libcore.io.StructUtsname uname()>();

        $r42 = r7.<libcore.io.StructUtsname: java.lang.String machine>;

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("os.arch", $r42);

        $r43 = r7.<libcore.io.StructUtsname: java.lang.String sysname>;

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("os.name", $r43);

        $r52 = r7.<libcore.io.StructUtsname: java.lang.String release>;

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("os.version", $r52);

        $r50 = staticinvoke <libcore.icu.ICU: java.lang.String getIcuVersion()>();

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("android.icu.library.version", $r50);

        $r51 = staticinvoke <libcore.icu.ICU: java.lang.String getUnicodeVersion()>();

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("android.icu.unicode.version", $r51);

        $r59 = staticinvoke <libcore.icu.ICU: java.lang.String getCldrVersion()>();

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("android.icu.cldr.version", $r59);

        $r57 = staticinvoke <java.lang.System: java.lang.String[] specialProperties()>();

        staticinvoke <java.lang.System: void parsePropertyAssignments(java.util.Properties,java.lang.String[])>(r1, $r57);

        $r58 = virtualinvoke r0.<dalvik.system.VMRuntime: java.lang.String[] properties()>();

        staticinvoke <java.lang.System: void parsePropertyAssignments(java.util.Properties,java.lang.String[])>(r1, $r58);

        <java.lang.System: java.util.Properties systemProperties> = r1;

        return;

     label5:
        $r56 := @caughtexception;

        r4 = $r56;

        $r62 = new java.lang.AssertionError;

        specialinvoke $r62.<java.lang.AssertionError: void <init>(java.lang.Object)>(r4);

        throw $r62;

        catch libcore.io.ErrnoException from label3 to label4 with label5;
    }

    public static java.lang.String lineSeparator()
    {
        java.lang.String $r0;

        $r0 = <java.lang.System: java.lang.String lineSeparator>;

        return $r0;
    }

    public static void load(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Runtime $r1;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r2 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        virtualinvoke $r1.<java.lang.Runtime: void load(java.lang.String,java.lang.ClassLoader)>(r0, $r2);

        return;
    }

    public static void loadLibrary(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Runtime $r1;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r2 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        virtualinvoke $r1.<java.lang.Runtime: void loadLibrary(java.lang.String,java.lang.ClassLoader)>(r0, $r2);

        return;
    }

    private static native void log(char, java.lang.String, java.lang.Throwable);

    public static void logE(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <java.lang.System: void log(char,java.lang.String,java.lang.Throwable)>(69, r0, null);

        return;
    }

    public static void logE(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        staticinvoke <java.lang.System: void log(char,java.lang.String,java.lang.Throwable)>(69, r0, r1);

        return;
    }

    public static void logI(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <java.lang.System: void log(char,java.lang.String,java.lang.Throwable)>(73, r0, null);

        return;
    }

    public static void logI(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        staticinvoke <java.lang.System: void log(char,java.lang.String,java.lang.Throwable)>(73, r0, r1);

        return;
    }

    public static void logW(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <java.lang.System: void log(char,java.lang.String,java.lang.Throwable)>(87, r0, null);

        return;
    }

    public static void logW(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        staticinvoke <java.lang.System: void log(char,java.lang.String,java.lang.Throwable)>(87, r0, r1);

        return;
    }

    public static native java.lang.String mapLibraryName(java.lang.String);

    public static native long nanoTime();

    private static void parsePropertyAssignments(java.util.Properties, java.lang.String[])
    {
        java.util.Properties r0;
        java.lang.String[] r1;
        int i0, i1, i2, $i3;
        java.lang.String r2, $r3, $r4;

        r0 := @parameter0: java.util.Properties;

        r1 := @parameter1: java.lang.String[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        i2 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(61);

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $i3 = i2 + 1;

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3);

        virtualinvoke r0.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void runFinalization()
    {
        java.lang.Runtime $r0;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r0.<java.lang.Runtime: void runFinalization()>();

        return;
    }

    public static void runFinalizersOnExit(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <java.lang.Runtime: void runFinalizersOnExit(boolean)>(z0);

        return;
    }

    public static void setErr(java.io.PrintStream)
    {
        java.io.PrintStream r0;

        r0 := @parameter0: java.io.PrintStream;

        staticinvoke <java.lang.System: void setFieldImpl(java.lang.String,java.lang.String,java.lang.Object)>("err", "Ljava/io/PrintStream;", r0);

        return;
    }

    private static native void setFieldImpl(java.lang.String, java.lang.String, java.lang.Object);

    public static void setIn(java.io.InputStream)
    {
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        staticinvoke <java.lang.System: void setFieldImpl(java.lang.String,java.lang.String,java.lang.Object)>("in", "Ljava/io/InputStream;", r0);

        return;
    }

    public static void setOut(java.io.PrintStream)
    {
        java.io.PrintStream r0;

        r0 := @parameter0: java.io.PrintStream;

        staticinvoke <java.lang.System: void setFieldImpl(java.lang.String,java.lang.String,java.lang.Object)>("out", "Ljava/io/PrintStream;", r0);

        return;
    }

    public static void setProperties(java.util.Properties)
    {
        java.util.Properties r0;

        r0 := @parameter0: java.util.Properties;

        <java.lang.System: java.util.Properties systemProperties> = r0;

        return;
    }

    public static java.lang.String setProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r4;
        java.util.Properties $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.lang.System: void checkPropertyName(java.lang.String)>(r0);

        $r2 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $r3 = virtualinvoke $r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r0, r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public static void setSecurityManager(java.lang.SecurityManager)
    {
        java.lang.SecurityManager r0;
        java.lang.SecurityException $r1;

        r0 := @parameter0: java.lang.SecurityManager;

        if r0 == null goto label1;

        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private static native java.lang.String[] specialProperties();
}
