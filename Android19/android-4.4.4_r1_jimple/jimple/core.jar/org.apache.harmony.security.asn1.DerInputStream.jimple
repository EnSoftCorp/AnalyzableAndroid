public final class org.apache.harmony.security.asn1.DerInputStream extends org.apache.harmony.security.asn1.BerInputStream
{
    private static final byte[] UNUSED_BITS_MASK;

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[7];

        $r0[0] = 1;

        $r0[1] = 3;

        $r0[2] = 7;

        $r0[3] = 15;

        $r0[4] = 31;

        $r0[5] = 63;

        $r0[6] = 127;

        <org.apache.harmony.security.asn1.DerInputStream: byte[] UNUSED_BITS_MASK> = $r0;

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void <init>(java.io.InputStream)>(r1);

        return;
    }

    public void <init>(byte[]) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void <init>(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void <init>(byte[], int, int) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        byte[] r1;
        int i0, i1;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void <init>(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public int next() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        int i0, $i1;
        org.apache.harmony.security.asn1.ASN1Exception $r1;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        i0 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int next()>();

        $i1 = r0.<org.apache.harmony.security.asn1.DerInputStream: int length>;

        if $i1 != -1 goto label1;

        $r1 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r1.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("DER: only definite length encoding MUST be used");

        throw $r1;

     label1:
        return i0;
    }

    public void readBitString() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i8, $i12, $i13;
        byte[] $r1, $r2, $r3, $r4;
        byte $b3, $b7, $b9, $b10, $b11;
        org.apache.harmony.security.asn1.ASN1Exception $r5, $r12;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r15;
        java.lang.String $r9, $r16;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.DerInputStream: int tag>;

        if $i0 != 35 goto label1;

        $r12 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 bitstring: constructed identifier at [");

        $i13 = r0.<org.apache.harmony.security.asn1.DerInputStream: int tagOffset>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Not valid for DER.");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readBitString()>();

        $i1 = r0.<org.apache.harmony.security.asn1.DerInputStream: int length>;

        if $i1 <= 1 goto label2;

        $r1 = r0.<org.apache.harmony.security.asn1.DerInputStream: byte[] buffer>;

        $i2 = r0.<org.apache.harmony.security.asn1.DerInputStream: int contentOffset>;

        $b3 = $r1[$i2];

        if $b3 == 0 goto label2;

        $r2 = r0.<org.apache.harmony.security.asn1.DerInputStream: byte[] buffer>;

        $i4 = r0.<org.apache.harmony.security.asn1.DerInputStream: int offset>;

        $i5 = -1 + $i4;

        $b10 = $r2[$i5];

        $r4 = <org.apache.harmony.security.asn1.DerInputStream: byte[] UNUSED_BITS_MASK>;

        $r3 = r0.<org.apache.harmony.security.asn1.DerInputStream: byte[] buffer>;

        $i6 = r0.<org.apache.harmony.security.asn1.DerInputStream: int contentOffset>;

        $b7 = $r3[$i6];

        $i8 = -1 + $b7;

        $b9 = $r4[$i8];

        $b11 = $b10 & $b9;

        if $b11 == 0 goto label2;

        $r5 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 bitstring: wrong content at [");

        $i12 = r0.<org.apache.harmony.security.asn1.DerInputStream: int contentOffset>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. DER requires zero unused bits in final octet.");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        return;
    }

    public void readBoolean() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        int $i0, $i2, $i4;
        byte[] $r1, $r2;
        byte $b1, $b3;
        org.apache.harmony.security.asn1.ASN1Exception $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readBoolean()>();

        $r1 = r0.<org.apache.harmony.security.asn1.DerInputStream: byte[] buffer>;

        $i0 = r0.<org.apache.harmony.security.asn1.DerInputStream: int contentOffset>;

        $b1 = $r1[$i0];

        if $b1 == 0 goto label1;

        $r2 = r0.<org.apache.harmony.security.asn1.DerInputStream: byte[] buffer>;

        $i2 = r0.<org.apache.harmony.security.asn1.DerInputStream: int contentOffset>;

        $b3 = $r2[$i2];

        if $b3 == -1 goto label1;

        $r3 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 boolean: wrong content at [");

        $i4 = r0.<org.apache.harmony.security.asn1.DerInputStream: int contentOffset>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. DER allows only 0x00 or 0xFF values");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        return;
    }

    public void readGeneralizedTime() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        int $i0, $i1;
        org.apache.harmony.security.asn1.ASN1Exception $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.DerInputStream: int tag>;

        if $i0 != 56 goto label1;

        $r1 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 GeneralizedTime: constructed identifier at [");

        $i1 = r0.<org.apache.harmony.security.asn1.DerInputStream: int tagOffset>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Not valid for DER.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readGeneralizedTime()>();

        return;
    }

    public void readOctetString() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        int $i0, $i1;
        org.apache.harmony.security.asn1.ASN1Exception $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.DerInputStream: int tag>;

        if $i0 != 36 goto label1;

        $r1 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 octetstring: constructed identifier at [");

        $i1 = r0.<org.apache.harmony.security.asn1.DerInputStream: int tagOffset>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Not valid for DER.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readOctetString()>();

        return;
    }

    public void readSequence(org.apache.harmony.security.asn1.ASN1Sequence) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        org.apache.harmony.security.asn1.ASN1Sequence r1;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        r1 := @parameter0: org.apache.harmony.security.asn1.ASN1Sequence;

        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readSequence(org.apache.harmony.security.asn1.ASN1Sequence)>(r1);

        return;
    }

    public void readSetOf(org.apache.harmony.security.asn1.ASN1SetOf) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        org.apache.harmony.security.asn1.ASN1SetOf r1;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        r1 := @parameter0: org.apache.harmony.security.asn1.ASN1SetOf;

        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readSetOf(org.apache.harmony.security.asn1.ASN1SetOf)>(r1);

        return;
    }

    public void readString(org.apache.harmony.security.asn1.ASN1StringType) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        org.apache.harmony.security.asn1.ASN1StringType r1;
        int $i0, $i1, $i2;
        org.apache.harmony.security.asn1.ASN1Exception $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        r1 := @parameter0: org.apache.harmony.security.asn1.ASN1StringType;

        $i1 = r0.<org.apache.harmony.security.asn1.DerInputStream: int tag>;

        $i0 = r1.<org.apache.harmony.security.asn1.ASN1StringType: int constrId>;

        if $i1 != $i0 goto label1;

        $r2 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 string: constructed identifier at [");

        $i2 = r0.<org.apache.harmony.security.asn1.DerInputStream: int tagOffset>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Not valid for DER.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readString(org.apache.harmony.security.asn1.ASN1StringType)>(r1);

        return;
    }

    public void readUTCTime() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.DerInputStream r0;
        int $i0, $i1, $i2, $i3;
        org.apache.harmony.security.asn1.ASN1Exception $r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11;
        java.lang.String $r6, $r12;

        r0 := @this: org.apache.harmony.security.asn1.DerInputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.DerInputStream: int tag>;

        if $i0 != 55 goto label1;

        $r7 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 UTCTime: constructed identifier at [");

        $i3 = r0.<org.apache.harmony.security.asn1.DerInputStream: int tagOffset>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Not valid for DER.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        $i1 = r0.<org.apache.harmony.security.asn1.DerInputStream: int length>;

        if $i1 == 13 goto label2;

        $r1 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 UTCTime: wrong format for DER, identifier at [");

        $i2 = r0.<org.apache.harmony.security.asn1.DerInputStream: int tagOffset>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readUTCTime()>();

        return;
    }
}
