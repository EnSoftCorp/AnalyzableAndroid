public abstract class java.util.concurrent.atomic.AtomicLongFieldUpdater extends java.lang.Object
{

    protected void <init>()
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater $r2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $z0 = <java.util.concurrent.atomic.AtomicLong: boolean VM_SUPPORTS_LONG_CAS>;

        if $z0 == 0 goto label1;

        $r3 = new java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void <init>(java.lang.Class,java.lang.String)>(r0, r1);

        return $r3;

     label1:
        $r2 = new java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater: void <init>(java.lang.Class,java.lang.String)>(r0, r1);

        return $r2;
    }

    public long addAndGet(java.lang.Object, long)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r0;
        java.lang.Object r1;
        long l0, l1, l2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

     label1:
        l1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r1);

        l2 = l1 + l0;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r1, l1, l2);

        if $z0 == 0 goto label1;

        return l2;
    }

    public abstract boolean compareAndSet(java.lang.Object, long, long);

    public long decrementAndGet(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r0;
        java.lang.Object r1;
        long l0, l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater;

        r1 := @parameter0: java.lang.Object;

     label1:
        l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r1);

        l1 = l0 - 1L;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r1, l0, l1);

        if $z0 == 0 goto label1;

        return l1;
    }

    public abstract long get(java.lang.Object);

    public long getAndAdd(java.lang.Object, long)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r0;
        java.lang.Object r1;
        long l0, l1, $l2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

     label1:
        l1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r1);

        $l2 = l1 + l0;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r1, l1, $l2);

        if $z0 == 0 goto label1;

        return l1;
    }

    public long getAndDecrement(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r0;
        java.lang.Object r1;
        long l0, $l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater;

        r1 := @parameter0: java.lang.Object;

     label1:
        l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r1);

        $l1 = l0 - 1L;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r1, l0, $l1);

        if $z0 == 0 goto label1;

        return l0;
    }

    public long getAndIncrement(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r0;
        java.lang.Object r1;
        long l0, $l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater;

        r1 := @parameter0: java.lang.Object;

     label1:
        l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r1);

        $l1 = l0 + 1L;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r1, l0, $l1);

        if $z0 == 0 goto label1;

        return l0;
    }

    public long getAndSet(java.lang.Object, long)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r0;
        java.lang.Object r1;
        long l0, l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

     label1:
        l1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r1, l1, l0);

        if $z0 == 0 goto label1;

        return l1;
    }

    public long incrementAndGet(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r0;
        java.lang.Object r1;
        long l0, l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater;

        r1 := @parameter0: java.lang.Object;

     label1:
        l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r1);

        l1 = l0 + 1L;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r1, l0, l1);

        if $z0 == 0 goto label1;

        return l1;
    }

    public abstract void lazySet(java.lang.Object, long);

    public abstract void set(java.lang.Object, long);

    public abstract boolean weakCompareAndSet(java.lang.Object, long, long);
}
