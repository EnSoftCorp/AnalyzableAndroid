public final class java.lang.reflect.Field extends java.lang.reflect.AccessibleObject implements java.lang.reflect.Member
{
    public static final java.util.Comparator ORDER_BY_NAME_AND_DECLARING_CLASS;
    private static final char TYPE_BOOLEAN;
    private static final char TYPE_BYTE;
    private static final char TYPE_CHAR;
    private static final char TYPE_DOUBLE;
    private static final char TYPE_FLOAT;
    private static final char TYPE_INTEGER;
    private static final char TYPE_LONG;
    private static final char TYPE_SHORT;
    private java.lang.Class declaringClass;
    private final int fieldDexIndex;
    private java.lang.reflect.Type genericType;
    private volatile boolean genericTypesAreInitialized;
    private java.lang.String name;
    private int slot;
    private java.lang.Class type;

    static void <clinit>()
    {
        java.lang.reflect.Field$1 $r0;

        <java.lang.reflect.Field: char TYPE_SHORT> = 83;

        <java.lang.reflect.Field: char TYPE_LONG> = 74;

        <java.lang.reflect.Field: char TYPE_INTEGER> = 73;

        <java.lang.reflect.Field: char TYPE_FLOAT> = 70;

        <java.lang.reflect.Field: char TYPE_DOUBLE> = 68;

        <java.lang.reflect.Field: char TYPE_CHAR> = 67;

        <java.lang.reflect.Field: char TYPE_BYTE> = 66;

        <java.lang.reflect.Field: char TYPE_BOOLEAN> = 90;

        $r0 = new java.lang.reflect.Field$1;

        specialinvoke $r0.<java.lang.reflect.Field$1: void <init>()>();

        <java.lang.reflect.Field: java.util.Comparator ORDER_BY_NAME_AND_DECLARING_CLASS> = $r0;

        return;
    }

    private void <init>(java.lang.Class, java.lang.Class, java.lang.String, int, int)
    {
        java.lang.reflect.Field r0;
        java.lang.Class r1, r2;
        java.lang.String r3;
        int i0, i1;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.reflect.AccessibleObject: void <init>()>();

        r0.<java.lang.reflect.Field: boolean genericTypesAreInitialized> = 0;

        r0.<java.lang.reflect.Field: java.lang.Class declaringClass> = r1;

        r0.<java.lang.reflect.Field: java.lang.Class type> = r2;

        r0.<java.lang.reflect.Field: java.lang.String name> = r3;

        r0.<java.lang.reflect.Field: int slot> = i0;

        r0.<java.lang.reflect.Field: int fieldDexIndex> = i1;

        return;
    }

    static java.lang.String access$000(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.String name>;

        return $r1;
    }

    private static native java.lang.annotation.Annotation getAnnotation(java.lang.Class, int, java.lang.Class);

    private native byte getBField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char) throws java.lang.IllegalAccessException;

    private native char getCField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char) throws java.lang.IllegalAccessException;

    private native double getDField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char) throws java.lang.IllegalAccessException;

    private static native java.lang.annotation.Annotation[] getDeclaredAnnotations(java.lang.Class, int);

    private native float getFField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char) throws java.lang.IllegalAccessException;

    private native java.lang.Object getField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean) throws java.lang.IllegalAccessException;

    private native int getFieldModifiers(java.lang.Class, int);

    private native int getIField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char) throws java.lang.IllegalAccessException;

    private native long getJField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char) throws java.lang.IllegalAccessException;

    private native short getSField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char) throws java.lang.IllegalAccessException;

    private java.lang.String getSignature()
    {
        java.lang.reflect.Field r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getSignature(java.lang.Class)>($r1);

        return $r2;
    }

    private native java.lang.Object[] getSignatureAnnotation(java.lang.Class, int);

    private native boolean getZField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char) throws java.lang.IllegalAccessException;

    private void initGenericType()
    {
        java.lang.reflect.Field r0;
        java.lang.Throwable r1, $r11;
        java.lang.String r2;
        libcore.reflect.GenericSignatureParser r3, $r4;
        boolean $z0;
        java.lang.Class $r5, $r7, $r10;
        java.lang.ClassLoader $r6;
        java.lang.reflect.Type $r8, $r9;

        r0 := @this: java.lang.reflect.Field;

        entermonitor r0;

     label1:
        $z0 = r0.<java.lang.reflect.Field: boolean genericTypesAreInitialized>;

        if $z0 != 0 goto label3;

        r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getSignatureAttribute()>();

        $r4 = new libcore.reflect.GenericSignatureParser;

        $r5 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r4.<libcore.reflect.GenericSignatureParser: void <init>(java.lang.ClassLoader)>($r6);

        r3 = $r4;

        $r7 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        virtualinvoke r3.<libcore.reflect.GenericSignatureParser: void parseForField(java.lang.reflect.GenericDeclaration,java.lang.String)>($r7, r2);

        $r8 = r3.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type fieldType>;

        r0.<java.lang.reflect.Field: java.lang.reflect.Type genericType> = $r8;

        $r9 = r0.<java.lang.reflect.Field: java.lang.reflect.Type genericType>;

        if $r9 != null goto label2;

        $r10 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        r0.<java.lang.reflect.Field: java.lang.reflect.Type genericType> = $r10;

     label2:
        r0.<java.lang.reflect.Field: boolean genericTypesAreInitialized> = 1;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r11 := @caughtexception;

        r1 = $r11;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private static native boolean isAnnotationPresent(java.lang.Class, int, java.lang.Class);

    private native void setBField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char, byte) throws java.lang.IllegalAccessException;

    private native void setCField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char, char) throws java.lang.IllegalAccessException;

    private native void setDField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char, double) throws java.lang.IllegalAccessException;

    private native void setFField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char, float) throws java.lang.IllegalAccessException;

    private native void setField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, java.lang.Object) throws java.lang.IllegalAccessException;

    private native void setIField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char, int) throws java.lang.IllegalAccessException;

    private native void setJField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char, long) throws java.lang.IllegalAccessException;

    private native void setSField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char, short) throws java.lang.IllegalAccessException;

    private native void setZField(java.lang.Object, java.lang.Class, java.lang.Class, int, boolean, char, boolean) throws java.lang.IllegalAccessException;

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.reflect.Field;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String toString()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object get(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1, $r4;
        boolean $z0;
        int $i0;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        $r4 = specialinvoke r0.<java.lang.reflect.Field: java.lang.Object getField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean)>(r1, $r3, $r2, $i0, $z0);

        return $r4;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.reflect.Field r0;
        java.lang.Class r1, $r2;
        int $i0;
        java.lang.annotation.Annotation $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("annotationType == null");

        throw $r4;

     label1:
        $r2 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $r3 = staticinvoke <java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class,int,java.lang.Class)>($r2, $i0, r1);

        return $r3;
    }

    public boolean getBoolean(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        $z1 = specialinvoke r0.<java.lang.reflect.Field: boolean getZField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>(r1, $r3, $r2, $i0, $z0, 90);

        return $z1;
    }

    public byte getByte(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;
        java.lang.Class $r2, $r3;
        byte $b1;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        $b1 = specialinvoke r0.<java.lang.reflect.Field: byte getBField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>(r1, $r3, $r2, $i0, $z0, 66);

        return $b1;
    }

    public char getChar(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;
        java.lang.Class $r2, $r3;
        char $c1;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        $c1 = specialinvoke r0.<java.lang.reflect.Field: char getCField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>(r1, $r3, $r2, $i0, $z0, 67);

        return $c1;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.reflect.Field r0;
        int $i0;
        java.lang.Class $r1;
        java.lang.annotation.Annotation[] $r2;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $r2 = staticinvoke <java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations(java.lang.Class,int)>($r1, $i0);

        return $r2;
    }

    public java.lang.Class getDeclaringClass()
    {
        java.lang.reflect.Field r0;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        return $r1;
    }

    public int getDexFieldIndex()
    {
        java.lang.reflect.Field r0;
        int $i0;

        r0 := @this: java.lang.reflect.Field;

        $i0 = r0.<java.lang.reflect.Field: int fieldDexIndex>;

        return $i0;
    }

    public double getDouble(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;
        java.lang.Class $r2, $r3;
        double $d0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        $d0 = specialinvoke r0.<java.lang.reflect.Field: double getDField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>(r1, $r3, $r2, $i0, $z0, 68);

        return $d0;
    }

    public float getFloat(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;
        java.lang.Class $r2, $r3;
        float $f0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        $f0 = specialinvoke r0.<java.lang.reflect.Field: float getFField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>(r1, $r3, $r2, $i0, $z0, 70);

        return $f0;
    }

    public java.lang.reflect.Type getGenericType()
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.Type $r1, $r2;

        r0 := @this: java.lang.reflect.Field;

        specialinvoke r0.<java.lang.reflect.Field: void initGenericType()>();

        $r1 = r0.<java.lang.reflect.Field: java.lang.reflect.Type genericType>;

        $r2 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type getType(java.lang.reflect.Type)>($r1);

        return $r2;
    }

    public int getInt(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        $i1 = specialinvoke r0.<java.lang.reflect.Field: int getIField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>(r1, $r3, $r2, $i0, $z0, 73);

        return $i1;
    }

    public long getLong(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;
        java.lang.Class $r2, $r3;
        long $l1;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        $l1 = specialinvoke r0.<java.lang.reflect.Field: long getJField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>(r1, $r3, $r2, $i0, $z0, 74);

        return $l1;
    }

    public int getModifiers()
    {
        java.lang.reflect.Field r0;
        int $i0, $i1;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $i1 = specialinvoke r0.<java.lang.reflect.Field: int getFieldModifiers(java.lang.Class,int)>($r1, $i0);

        return $i1;
    }

    public java.lang.String getName()
    {
        java.lang.reflect.Field r0;
        java.lang.String $r1;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.String name>;

        return $r1;
    }

    public short getShort(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;
        java.lang.Class $r2, $r3;
        short $s1;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        $s1 = specialinvoke r0.<java.lang.reflect.Field: short getSField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char)>(r1, $r3, $r2, $i0, $z0, 83);

        return $s1;
    }

    java.lang.String getSignatureAttribute()
    {
        java.lang.reflect.Field r0;
        java.lang.Object[] r1;
        int $i0;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: java.lang.reflect.Field;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        r1 = specialinvoke r0.<java.lang.reflect.Field: java.lang.Object[] getSignatureAnnotation(java.lang.Class,int)>($r2, $i0);

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.apache.harmony.kernel.vm.StringUtils: java.lang.String combineStrings(java.lang.Object[])>(r1);

        return $r3;
    }

    public java.lang.Class getType()
    {
        java.lang.reflect.Field r0;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        return $r1;
    }

    public int hashCode()
    {
        java.lang.reflect.Field r0;
        java.lang.String $r1, $r3;
        int $i0, $i1, $i2;
        java.lang.Class $r2;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $i1 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.reflect.Field r0;
        java.lang.Class r1, $r2;
        int $i0;
        boolean $z0;
        java.lang.NullPointerException $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("annotationType == null");

        throw $r3;

     label1:
        $r2 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = staticinvoke <java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class,int,java.lang.Class)>($r2, $i0, r1);

        return $z0;
    }

    public boolean isEnumConstant()
    {
        java.lang.reflect.Field r0;
        int $i0, $i1, $i2;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $i1 = specialinvoke r0.<java.lang.reflect.Field: int getFieldModifiers(java.lang.Class,int)>($r1, $i0);

        $i2 = 16384 & $i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isSynthetic()
    {
        java.lang.reflect.Field r0;
        int $i0, $i1, $i2;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $i1 = specialinvoke r0.<java.lang.reflect.Field: int getFieldModifiers(java.lang.Class,int)>($r1, $i0);

        $i2 = 4096 & $i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void set(java.lang.Object, java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1, r2;
        boolean $z0;
        int $i0;
        java.lang.Class $r3, $r4;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        specialinvoke r0.<java.lang.reflect.Field: void setField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,java.lang.Object)>(r1, $r4, $r3, $i0, $z0, r2);

        return;
    }

    public void setBoolean(java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean z0, $z1;
        int $i0;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z1 = r0.<java.lang.reflect.Field: boolean flag>;

        specialinvoke r0.<java.lang.reflect.Field: void setZField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,boolean)>(r1, $r3, $r2, $i0, $z1, 90, z0);

        return;
    }

    public void setByte(java.lang.Object, byte) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        byte b0;
        boolean $z0;
        int $i1;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        b0 := @parameter1: byte;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i1 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        specialinvoke r0.<java.lang.reflect.Field: void setBField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,byte)>(r1, $r3, $r2, $i1, $z0, 66, b0);

        return;
    }

    public void setChar(java.lang.Object, char) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        char c0;
        boolean $z0;
        int $i1;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        c0 := @parameter1: char;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i1 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        specialinvoke r0.<java.lang.reflect.Field: void setCField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,char)>(r1, $r3, $r2, $i1, $z0, 67, c0);

        return;
    }

    public void setDouble(java.lang.Object, double) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        double d0;
        boolean $z0;
        int $i0;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        d0 := @parameter1: double;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        specialinvoke r0.<java.lang.reflect.Field: void setDField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,double)>(r1, $r3, $r2, $i0, $z0, 68, d0);

        return;
    }

    public void setFloat(java.lang.Object, float) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        float f0;
        boolean $z0;
        int $i0;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        f0 := @parameter1: float;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i0 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        specialinvoke r0.<java.lang.reflect.Field: void setFField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,float)>(r1, $r3, $r2, $i0, $z0, 70, f0);

        return;
    }

    public void setInt(java.lang.Object, int) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        int i0, $i1;
        boolean $z0;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i1 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        specialinvoke r0.<java.lang.reflect.Field: void setIField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,int)>(r1, $r3, $r2, $i1, $z0, 73, i0);

        return;
    }

    public void setLong(java.lang.Object, long) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        long l0;
        boolean $z0;
        int $i1;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i1 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        specialinvoke r0.<java.lang.reflect.Field: void setJField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,long)>(r1, $r3, $r2, $i1, $z0, 74, l0);

        return;
    }

    public void setShort(java.lang.Object, short) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        short s0;
        boolean $z0;
        int $i1;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        s0 := @parameter1: short;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        $i1 = r0.<java.lang.reflect.Field: int slot>;

        $z0 = r0.<java.lang.reflect.Field: boolean flag>;

        specialinvoke r0.<java.lang.reflect.Field: void setSField(java.lang.Object,java.lang.Class,java.lang.Class,int,boolean,char,short)>(r1, $r3, $r2, $i1, $z0, 83, s0);

        return;
    }

    public java.lang.String toGenericString()
    {
        java.lang.reflect.Field r0;
        java.lang.StringBuilder r1, $r2, $r7, $r8, $r13;
        int i0;
        java.lang.reflect.Type $r3;
        java.lang.Class $r5;
        java.lang.String $r6, $r9, $r11, $r12;

        r0 := @this: java.lang.reflect.Field;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(80);

        r1 = $r2;

        i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        if i0 == 0 goto label1;

        $r12 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>(i0);

        $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label1:
        $r3 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        virtualinvoke r0.<java.lang.reflect.Field: void appendGenericType(java.lang.StringBuilder,java.lang.reflect.Type)>(r1, $r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r5 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r9 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.String toString()
    {
        java.lang.reflect.Field r0;
        java.lang.StringBuilder r1, $r2;
        int $i0, $i1;
        java.lang.String $r3, $r8, $r10;
        java.lang.Class $r4, $r6;

        r0 := @this: java.lang.reflect.Field;

        $r2 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $r3 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>($i0);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        r1 = $r2;

        $i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i1 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label1:
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class type>;

        virtualinvoke r0.<java.lang.reflect.Field: void appendTypeName(java.lang.StringBuilder,java.lang.Class)>(r1, $r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r6 = r0.<java.lang.reflect.Field: java.lang.Class declaringClass>;

        virtualinvoke r0.<java.lang.reflect.Field: void appendTypeName(java.lang.StringBuilder,java.lang.Class)>(r1, $r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r8 = r0.<java.lang.reflect.Field: java.lang.String name>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
