public final class java.lang.Character extends java.lang.Object implements java.io.Serializable, java.lang.Comparable
{
    public static final byte COMBINING_SPACING_MARK;
    public static final byte CONNECTOR_PUNCTUATION;
    public static final byte CONTROL;
    public static final byte CURRENCY_SYMBOL;
    public static final byte DASH_PUNCTUATION;
    public static final byte DECIMAL_DIGIT_NUMBER;
    private static final byte[] DIRECTIONALITY;
    public static final byte DIRECTIONALITY_ARABIC_NUMBER;
    public static final byte DIRECTIONALITY_BOUNDARY_NEUTRAL;
    public static final byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR;
    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER;
    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR;
    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR;
    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT;
    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING;
    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE;
    public static final byte DIRECTIONALITY_NONSPACING_MARK;
    public static final byte DIRECTIONALITY_OTHER_NEUTRALS;
    public static final byte DIRECTIONALITY_PARAGRAPH_SEPARATOR;
    public static final byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE;
    public static final byte DIRECTIONALITY_SEGMENT_SEPARATOR;
    public static final byte DIRECTIONALITY_UNDEFINED;
    public static final byte DIRECTIONALITY_WHITESPACE;
    public static final byte ENCLOSING_MARK;
    public static final byte END_PUNCTUATION;
    public static final byte FINAL_QUOTE_PUNCTUATION;
    public static final byte FORMAT;
    public static final byte INITIAL_QUOTE_PUNCTUATION;
    public static final byte LETTER_NUMBER;
    public static final byte LINE_SEPARATOR;
    public static final byte LOWERCASE_LETTER;
    public static final byte MATH_SYMBOL;
    public static final int MAX_CODE_POINT;
    public static final char MAX_HIGH_SURROGATE;
    public static final char MAX_LOW_SURROGATE;
    public static final int MAX_RADIX;
    public static final char MAX_SURROGATE;
    public static final char MAX_VALUE;
    public static final int MIN_CODE_POINT;
    public static final char MIN_HIGH_SURROGATE;
    public static final char MIN_LOW_SURROGATE;
    public static final int MIN_RADIX;
    public static final int MIN_SUPPLEMENTARY_CODE_POINT;
    public static final char MIN_SURROGATE;
    public static final char MIN_VALUE;
    public static final byte MODIFIER_LETTER;
    public static final byte MODIFIER_SYMBOL;
    public static final byte NON_SPACING_MARK;
    public static final byte OTHER_LETTER;
    public static final byte OTHER_NUMBER;
    public static final byte OTHER_PUNCTUATION;
    public static final byte OTHER_SYMBOL;
    public static final byte PARAGRAPH_SEPARATOR;
    public static final byte PRIVATE_USE;
    public static final int SIZE;
    private static final java.lang.Character[] SMALL_VALUES;
    public static final byte SPACE_SEPARATOR;
    public static final byte START_PUNCTUATION;
    public static final byte SURROGATE;
    public static final byte TITLECASE_LETTER;
    public static final java.lang.Class TYPE;
    public static final byte UNASSIGNED;
    public static final byte UPPERCASE_LETTER;
    private static final long serialVersionUID;
    private final char value;

    static void <clinit>()
    {
        int i0;
        java.lang.Class $r0, $r1;
        byte[] $r2;
        java.lang.Character[] $r3, $r5;
        java.lang.Character $r4;
        char $c1;

        <java.lang.Character: long serialVersionUID> = 3786198910865385080L;

        <java.lang.Character: byte UPPERCASE_LETTER> = 1;

        <java.lang.Character: byte UNASSIGNED> = 0;

        <java.lang.Character: byte TITLECASE_LETTER> = 3;

        <java.lang.Character: byte SURROGATE> = 19;

        <java.lang.Character: byte START_PUNCTUATION> = 21;

        <java.lang.Character: byte SPACE_SEPARATOR> = 12;

        <java.lang.Character: int SIZE> = 16;

        <java.lang.Character: byte PRIVATE_USE> = 18;

        <java.lang.Character: byte PARAGRAPH_SEPARATOR> = 14;

        <java.lang.Character: byte OTHER_SYMBOL> = 28;

        <java.lang.Character: byte OTHER_PUNCTUATION> = 24;

        <java.lang.Character: byte OTHER_NUMBER> = 11;

        <java.lang.Character: byte OTHER_LETTER> = 5;

        <java.lang.Character: byte NON_SPACING_MARK> = 6;

        <java.lang.Character: byte MODIFIER_SYMBOL> = 27;

        <java.lang.Character: byte MODIFIER_LETTER> = 4;

        <java.lang.Character: char MIN_VALUE> = 0;

        <java.lang.Character: char MIN_SURROGATE> = 55296;

        <java.lang.Character: int MIN_SUPPLEMENTARY_CODE_POINT> = 65536;

        <java.lang.Character: int MIN_RADIX> = 2;

        <java.lang.Character: char MIN_LOW_SURROGATE> = 56320;

        <java.lang.Character: char MIN_HIGH_SURROGATE> = 55296;

        <java.lang.Character: int MIN_CODE_POINT> = 0;

        <java.lang.Character: char MAX_VALUE> = 65535;

        <java.lang.Character: char MAX_SURROGATE> = 57343;

        <java.lang.Character: int MAX_RADIX> = 36;

        <java.lang.Character: char MAX_LOW_SURROGATE> = 57343;

        <java.lang.Character: char MAX_HIGH_SURROGATE> = 56319;

        <java.lang.Character: int MAX_CODE_POINT> = 1114111;

        <java.lang.Character: byte MATH_SYMBOL> = 25;

        <java.lang.Character: byte LOWERCASE_LETTER> = 2;

        <java.lang.Character: byte LINE_SEPARATOR> = 13;

        <java.lang.Character: byte LETTER_NUMBER> = 10;

        <java.lang.Character: byte INITIAL_QUOTE_PUNCTUATION> = 29;

        <java.lang.Character: byte FORMAT> = 16;

        <java.lang.Character: byte FINAL_QUOTE_PUNCTUATION> = 30;

        <java.lang.Character: byte END_PUNCTUATION> = 22;

        <java.lang.Character: byte ENCLOSING_MARK> = 7;

        <java.lang.Character: byte DIRECTIONALITY_WHITESPACE> = 12;

        <java.lang.Character: byte DIRECTIONALITY_UNDEFINED> = -1;

        <java.lang.Character: byte DIRECTIONALITY_SEGMENT_SEPARATOR> = 11;

        <java.lang.Character: byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE> = 17;

        <java.lang.Character: byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING> = 16;

        <java.lang.Character: byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC> = 2;

        <java.lang.Character: byte DIRECTIONALITY_RIGHT_TO_LEFT> = 1;

        <java.lang.Character: byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT> = 18;

        <java.lang.Character: byte DIRECTIONALITY_PARAGRAPH_SEPARATOR> = 10;

        <java.lang.Character: byte DIRECTIONALITY_OTHER_NEUTRALS> = 13;

        <java.lang.Character: byte DIRECTIONALITY_NONSPACING_MARK> = 8;

        <java.lang.Character: byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE> = 15;

        <java.lang.Character: byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING> = 14;

        <java.lang.Character: byte DIRECTIONALITY_LEFT_TO_RIGHT> = 0;

        <java.lang.Character: byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR> = 5;

        <java.lang.Character: byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR> = 4;

        <java.lang.Character: byte DIRECTIONALITY_EUROPEAN_NUMBER> = 3;

        <java.lang.Character: byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR> = 7;

        <java.lang.Character: byte DIRECTIONALITY_BOUNDARY_NEUTRAL> = 9;

        <java.lang.Character: byte DIRECTIONALITY_ARABIC_NUMBER> = 6;

        <java.lang.Character: byte DECIMAL_DIGIT_NUMBER> = 9;

        <java.lang.Character: byte DASH_PUNCTUATION> = 20;

        <java.lang.Character: byte CURRENCY_SYMBOL> = 26;

        <java.lang.Character: byte CONTROL> = 15;

        <java.lang.Character: byte CONNECTOR_PUNCTUATION> = 23;

        <java.lang.Character: byte COMBINING_SPACING_MARK> = 8;

        $r0 = class "[C";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getComponentType()>();

        <java.lang.Character: java.lang.Class TYPE> = $r1;

        $r2 = newarray (byte)[19];

        $r2[0] = 0;

        $r2[1] = 1;

        $r2[2] = 3;

        $r2[3] = 4;

        $r2[4] = 5;

        $r2[5] = 6;

        $r2[6] = 7;

        $r2[7] = 10;

        $r2[8] = 11;

        $r2[9] = 12;

        $r2[10] = 13;

        $r2[11] = 14;

        $r2[12] = 15;

        $r2[13] = 2;

        $r2[14] = 16;

        $r2[15] = 17;

        $r2[16] = 18;

        $r2[17] = 8;

        $r2[18] = 9;

        <java.lang.Character: byte[] DIRECTIONALITY> = $r2;

        $r3 = newarray (java.lang.Character)[128];

        <java.lang.Character: java.lang.Character[] SMALL_VALUES> = $r3;

        i0 = 0;

     label1:
        if i0 >= 128 goto label2;

        $r5 = <java.lang.Character: java.lang.Character[] SMALL_VALUES>;

        $r4 = new java.lang.Character;

        $c1 = (char) i0;

        specialinvoke $r4.<java.lang.Character: void <init>(char)>($c1);

        $r5[i0] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(char)
    {
        java.lang.Character r0;
        char c0;

        r0 := @this: java.lang.Character;

        c0 := @parameter0: char;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.Character: char value> = c0;

        return;
    }

    static int access$000(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <java.lang.Character: int forNameImpl(java.lang.String)>(r0);

        return $i0;
    }

    static void access$100(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <java.lang.Character: void checkValidCodePoint(int)>(i0);

        return;
    }

    static int access$200(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Character: int ofImpl(int)>(i0);

        return $i1;
    }

    public static int charCount(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 < 65536 goto label1;

        return 2;

     label1:
        return 1;
    }

    private static void checkValidCodePoint(int)
    {
        int i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        $z0 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(i0);

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid code point: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label1:
        return;
    }

    public static int codePointAt(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, $i5;
        char c3, c4;
        java.lang.IndexOutOfBoundsException $r1;
        boolean $z0;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("seq == null");

        throw $r2;

     label1:
        i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i0 < 0 goto label2;

        if i0 < i1 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        i2 = i0 + 1;

        c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i0);

        if i2 < i1 goto label5;

     label4:
        return c3;

     label5:
        c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isSurrogatePair(char,char)>(c3, c4);

        if $z0 == 0 goto label4;

        $i5 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c3, c4);

        return $i5;
    }

    public static int codePointAt(char[], int)
    {
        char[] r0;
        int i0, i1, i2, $i5;
        char c3, c4;
        java.lang.IndexOutOfBoundsException $r1;
        boolean $z0;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("seq == null");

        throw $r2;

     label1:
        i1 = lengthof r0;

        if i0 < 0 goto label2;

        if i0 < i1 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        i2 = i0 + 1;

        c3 = r0[i0];

        if i2 < i1 goto label5;

     label4:
        return c3;

     label5:
        c4 = r0[i2];

        $z0 = staticinvoke <java.lang.Character: boolean isSurrogatePair(char,char)>(c3, c4);

        if $z0 == 0 goto label4;

        $i5 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c3, c4);

        return $i5;
    }

    public static int codePointAt(char[], int, int)
    {
        char[] r0;
        int i0, i1, i2, $i5, $i6;
        char c3, c4;
        java.lang.IndexOutOfBoundsException $r1;
        boolean $z0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        if i0 >= i1 goto label1;

        if i1 < 0 goto label1;

        $i5 = lengthof r0;

        if i1 <= $i5 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label2:
        i2 = i0 + 1;

        c3 = r0[i0];

        if i2 < i1 goto label4;

     label3:
        return c3;

     label4:
        c4 = r0[i2];

        $z0 = staticinvoke <java.lang.Character: boolean isSurrogatePair(char,char)>(c3, c4);

        if $z0 == 0 goto label3;

        $i6 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c3, c4);

        return $i6;
    }

    public static int codePointBefore(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i4, $i6;
        char c3, c5;
        java.lang.IndexOutOfBoundsException $r1;
        boolean $z0;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("seq == null");

        throw $r2;

     label1:
        i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i0 < 1 goto label2;

        if i0 <= i1 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        i2 = i0 - 1;

        c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        i4 = i2 - 1;

        if i4 >= 0 goto label5;

     label4:
        return c3;

     label5:
        c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        $z0 = staticinvoke <java.lang.Character: boolean isSurrogatePair(char,char)>(c5, c3);

        if $z0 == 0 goto label4;

        $i6 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c5, c3);

        return $i6;
    }

    public static int codePointBefore(char[], int)
    {
        char[] r0;
        int i0, i1, i2, i4, $i6;
        char c3, c5;
        java.lang.IndexOutOfBoundsException $r1;
        boolean $z0;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("seq == null");

        throw $r2;

     label1:
        i1 = lengthof r0;

        if i0 < 1 goto label2;

        if i0 <= i1 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        i2 = i0 - 1;

        c3 = r0[i2];

        i4 = i2 - 1;

        if i4 >= 0 goto label5;

     label4:
        return c3;

     label5:
        c5 = r0[i4];

        $z0 = staticinvoke <java.lang.Character: boolean isSurrogatePair(char,char)>(c5, c3);

        if $z0 == 0 goto label4;

        $i6 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c5, c3);

        return $i6;
    }

    public static int codePointBefore(char[], int, int)
    {
        char[] r0;
        int i0, i1, i2, i3, i5, $i7;
        char c4, c6;
        java.lang.IndexOutOfBoundsException $r1;
        boolean $z0;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("seq == null");

        throw $r2;

     label1:
        i2 = lengthof r0;

        if i0 <= i1 goto label2;

        if i0 > i2 goto label2;

        if i1 < 0 goto label2;

        if i1 < i2 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        i3 = i0 - 1;

        c4 = r0[i3];

        i5 = i3 - 1;

        if i5 >= i1 goto label5;

     label4:
        return c4;

     label5:
        c6 = r0[i5];

        $z0 = staticinvoke <java.lang.Character: boolean isSurrogatePair(char,char)>(c6, c4);

        if $z0 == 0 goto label4;

        $i7 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c6, c4);

        return $i7;
    }

    public static int codePointCount(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i3, i4;
        java.lang.IndexOutOfBoundsException $r1;
        char $c5, $c6;
        boolean $z0, $z1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("seq == null");

        throw $r2;

     label1:
        i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i0 < 0 goto label2;

        if i1 > i2 goto label2;

        if i0 <= i1 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        i3 = 0;

        i4 = i0;

     label4:
        if i4 >= i1 goto label6;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c5);

        if $z0 == 0 goto label5;

        i4 = i4 + 1;

        if i4 >= i1 goto label5;

        $c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c6);

        if $z1 != 0 goto label5;

        i3 = i3 + 1;

     label5:
        i3 = i3 + 1;

        i4 = i4 + 1;

        goto label4;

     label6:
        return i3;
    }

    public static int codePointCount(char[], int, int)
    {
        char[] r0;
        int i0, i1, i2, i3, i4, $i5;
        char $c6, $c7;
        boolean $z0, $z1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i5 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i5, i0, i1);

        i2 = i0 + i1;

        i3 = 0;

        i4 = i0;

     label1:
        if i4 >= i2 goto label3;

        $c6 = r0[i4];

        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c6);

        if $z0 == 0 goto label2;

        i4 = i4 + 1;

        if i4 >= i2 goto label2;

        $c7 = r0[i4];

        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c7);

        if $z1 != 0 goto label2;

        i3 = i3 + 1;

     label2:
        i3 = i3 + 1;

        i4 = i4 + 1;

        goto label1;

     label3:
        return i3;
    }

    public static int compare(char, char)
    {
        char c0, c1;
        int $i2;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $i2 = c0 - c1;

        return $i2;
    }

    public static int digit(char, int)
    {
        char c0;
        int i1, $i2;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        $i2 = staticinvoke <java.lang.Character: int digit(int,int)>(c0, i1);

        return $i2;
    }

    public static int digit(int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < 2 goto label1;

        if i1 <= 36 goto label3;

     label1:
        i2 = -1;

     label2:
        return i2;

     label3:
        if i0 >= 128 goto label7;

        i2 = -1;

        if 48 > i0 goto label5;

        if i0 > 57 goto label5;

        i2 = i0 - 48;

     label4:
        if i2 < i1 goto label2;

        return -1;

     label5:
        if 97 > i0 goto label6;

        if i0 > 122 goto label6;

        $i5 = i0 - 97;

        i2 = 10 + $i5;

        goto label4;

     label6:
        if 65 > i0 goto label4;

        if i0 > 90 goto label4;

        $i4 = i0 - 65;

        i2 = 10 + $i4;

        goto label4;

     label7:
        $i3 = staticinvoke <java.lang.Character: int digitImpl(int,int)>(i0, i1);

        return $i3;
    }

    private static native int digitImpl(int, int);

    public static char forDigit(int, int)
    {
        int i0, i1, i2, $i3, i5;
        char $c4, c6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if 2 > i1 goto label2;

        if i1 > 36 goto label2;

        if i0 < 0 goto label2;

        if i0 >= i1 goto label2;

        if i0 >= 10 goto label1;

        i2 = i0 + 48;

        $c4 = (char) i2;

        return $c4;

     label1:
        $i3 = i0 + 97;

        i5 = -10 + $i3;

        c6 = (char) i5;

        return c6;

     label2:
        return 0;
    }

    private static native int forNameImpl(java.lang.String);

    public static byte getDirectionality(char)
    {
        char c0;
        byte $b1;

        c0 := @parameter0: char;

        $b1 = staticinvoke <java.lang.Character: byte getDirectionality(int)>(c0);

        return $b1;
    }

    public static byte getDirectionality(int)
    {
        int i0, $i2;
        byte b1, $b3;
        byte[] $r0;

        i0 := @parameter0: int;

        $i2 = staticinvoke <java.lang.Character: int getType(int)>(i0);

        if $i2 != 0 goto label2;

     label1:
        return -1;

     label2:
        b1 = staticinvoke <java.lang.Character: byte getDirectionalityImpl(int)>(i0);

        if b1 == -1 goto label1;

        $r0 = <java.lang.Character: byte[] DIRECTIONALITY>;

        $b3 = $r0[b1];

        return $b3;
    }

    private static native byte getDirectionalityImpl(int);

    public static java.lang.String getName(int)
    {
        int i0, $i1;
        java.lang.String r0, r1, $r3, $r7, $r9;
        java.lang.Character$UnicodeBlock $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;

        i0 := @parameter0: int;

        staticinvoke <java.lang.Character: void checkValidCodePoint(int)>(i0);

        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);

        if $i1 != 0 goto label2;

        r0 = null;

     label1:
        return r0;

     label2:
        r0 = staticinvoke <java.lang.Character: java.lang.String getNameImpl(int)>(i0);

        if r0 != null goto label1;

        $r2 = staticinvoke <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.Character$UnicodeBlock: java.lang.String toString()>();

        r1 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(95, 32);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = staticinvoke <java.lang.IntegralToString: java.lang.String intToHexString(int,boolean,int)>(i0, 1, 0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private static native java.lang.String getNameImpl(int);

    public static int getNumericValue(char)
    {
        char c0;
        int $i1;

        c0 := @parameter0: char;

        $i1 = staticinvoke <java.lang.Character: int getNumericValue(int)>(c0);

        return $i1;
    }

    public static int getNumericValue(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        i0 := @parameter0: int;

        if i0 >= 128 goto label4;

        if i0 < 48 goto label1;

        if i0 > 57 goto label1;

        $i6 = i0 - 48;

        return $i6;

     label1:
        if i0 < 97 goto label2;

        if i0 > 122 goto label2;

        $i5 = i0 - 87;

        return $i5;

     label2:
        if i0 < 65 goto label3;

        if i0 > 90 goto label3;

        $i4 = i0 - 55;

        return $i4;

     label3:
        return -1;

     label4:
        if i0 < 65313 goto label5;

        if i0 > 65338 goto label5;

        $i3 = i0 - 65303;

        return $i3;

     label5:
        if i0 < 65345 goto label6;

        if i0 > 65370 goto label6;

        $i2 = i0 - 65335;

        return $i2;

     label6:
        $i1 = staticinvoke <java.lang.Character: int getNumericValueImpl(int)>(i0);

        return $i1;
    }

    private static native int getNumericValueImpl(int);

    public static int getType(char)
    {
        char c0;
        int $i1;

        c0 := @parameter0: char;

        $i1 = staticinvoke <java.lang.Character: int getType(int)>(c0);

        return $i1;
    }

    public static int getType(int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 = staticinvoke <java.lang.Character: int getTypeImpl(int)>(i0);

        if i1 > 16 goto label1;

        return i1;

     label1:
        $i2 = i1 + 1;

        return $i2;
    }

    private static native int getTypeImpl(int);

    public static char highSurrogate(int)
    {
        int i0, $i1, $i2;
        char $c3;

        i0 := @parameter0: int;

        $i1 = i0 >> 10;

        $i2 = 55232 + $i1;

        $c3 = (char) $i2;

        return $c3;
    }

    public static native boolean isAlphabetic(int);

    public static boolean isBmpCodePoint(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 65535 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isDefined(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isDefinedImpl(int)>(c0);

        return $z0;
    }

    public static boolean isDefined(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <java.lang.Character: boolean isDefinedImpl(int)>(i0);

        return $z0;
    }

    private static native boolean isDefinedImpl(int);

    public static boolean isDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(int)>(c0);

        return $z0;
    }

    public static boolean isDigit(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 48 > i0 goto label1;

        if i0 > 57 goto label1;

        return 1;

     label1:
        if i0 >= 1632 goto label2;

        return 0;

     label2:
        $z0 = staticinvoke <java.lang.Character: boolean isDigitImpl(int)>(i0);

        return $z0;
    }

    private static native boolean isDigitImpl(int);

    public static boolean isHighSurrogate(char)
    {
        char c0;

        c0 := @parameter0: char;

        if 55296 > c0 goto label1;

        if 56319 < c0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isISOControl(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(int)>(c0);

        return $z0;
    }

    public static boolean isISOControl(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 31 goto label2;

     label1:
        if i0 < 127 goto label3;

        if i0 > 159 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public static boolean isIdentifierIgnorable(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isIdentifierIgnorable(int)>(c0);

        return $z0;
    }

    public static boolean isIdentifierIgnorable(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 >= 1536 goto label6;

        if i0 < 0 goto label1;

        if i0 <= 8 goto label4;

     label1:
        if i0 < 14 goto label2;

        if i0 <= 27 goto label4;

     label2:
        if i0 < 127 goto label3;

        if i0 <= 159 goto label4;

     label3:
        if i0 != 173 goto label5;

     label4:
        return 1;

     label5:
        return 0;

     label6:
        $z0 = staticinvoke <java.lang.Character: boolean isIdentifierIgnorableImpl(int)>(i0);

        return $z0;
    }

    private static native boolean isIdentifierIgnorableImpl(int);

    public static native boolean isIdeographic(int);

    public static boolean isJavaIdentifierPart(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(int)>(c0);

        return $z0;
    }

    public static boolean isJavaIdentifierPart(int)
    {
        int i0, i1, $i2;
        long $l3, $l4, $l6, $l7;
        byte $b5, $b8;

        i0 := @parameter0: int;

        if i0 >= 64 goto label3;

        $l6 = 1L << i0;

        $l7 = 287948970162897407L & $l6;

        $b8 = $l7 cmp 0L;

        if $b8 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;

     label3:
        if i0 >= 128 goto label4;

        $i2 = i0 - 64;

        $l3 = 1L << $i2;

        $l4 = -8646911290859585538L & $l3;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label1;

        return 0;

     label4:
        i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);

        if i1 < 1 goto label5;

        if i1 <= 5 goto label1;

     label5:
        if i1 == 26 goto label1;

        if i1 == 23 goto label1;

        if i1 < 9 goto label6;

        if i1 <= 10 goto label1;

     label6:
        if i1 == 8 goto label1;

        if i1 == 6 goto label1;

        if i0 < 0 goto label7;

        if i0 <= 8 goto label1;

     label7:
        if i0 < 14 goto label8;

        if i0 <= 27 goto label1;

     label8:
        if i0 < 127 goto label9;

        if i0 <= 159 goto label1;

     label9:
        if i1 == 16 goto label1;

        return 0;
    }

    public static boolean isJavaIdentifierStart(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(int)>(c0);

        return $z0;
    }

    public static boolean isJavaIdentifierStart(int)
    {
        int i0, i1, $i2;
        long $l3, $l4;
        byte $b5;

        i0 := @parameter0: int;

        if i0 >= 64 goto label3;

        if i0 != 36 goto label2;

     label1:
        return 1;

     label2:
        return 0;

     label3:
        if i0 >= 128 goto label4;

        $i2 = i0 - 64;

        $l3 = 1L << $i2;

        $l4 = 576460745995190270L & $l3;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label1;

        return 0;

     label4:
        i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);

        if i1 < 1 goto label5;

        if i1 <= 5 goto label1;

     label5:
        if i1 == 26 goto label1;

        if i1 == 23 goto label1;

        if i1 == 10 goto label1;

        return 0;
    }

    public static boolean isJavaLetter(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>(c0);

        return $z0;
    }

    public static boolean isJavaLetterOrDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(c0);

        return $z0;
    }

    public static boolean isLetter(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(int)>(c0);

        return $z0;
    }

    public static boolean isLetter(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 65 > i0 goto label1;

        if i0 <= 90 goto label2;

     label1:
        if 97 > i0 goto label3;

        if i0 > 122 goto label3;

     label2:
        return 1;

     label3:
        if i0 >= 128 goto label4;

        return 0;

     label4:
        $z0 = staticinvoke <java.lang.Character: boolean isLetterImpl(int)>(i0);

        return $z0;
    }

    private static native boolean isLetterImpl(int);

    public static boolean isLetterOrDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(int)>(c0);

        return $z0;
    }

    public static boolean isLetterOrDigit(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 65 > i0 goto label1;

        if i0 <= 90 goto label2;

     label1:
        if 97 > i0 goto label3;

        if i0 > 122 goto label3;

     label2:
        return 1;

     label3:
        if 48 > i0 goto label4;

        if i0 <= 57 goto label2;

     label4:
        if i0 >= 128 goto label5;

        return 0;

     label5:
        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigitImpl(int)>(i0);

        return $z0;
    }

    private static native boolean isLetterOrDigitImpl(int);

    public static boolean isLowSurrogate(char)
    {
        char c0;

        c0 := @parameter0: char;

        if 56320 > c0 goto label1;

        if 57343 < c0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isLowerCase(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(int)>(c0);

        return $z0;
    }

    public static boolean isLowerCase(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 97 > i0 goto label1;

        if i0 > 122 goto label1;

        return 1;

     label1:
        if i0 >= 128 goto label2;

        return 0;

     label2:
        $z0 = staticinvoke <java.lang.Character: boolean isLowerCaseImpl(int)>(i0);

        return $z0;
    }

    private static native boolean isLowerCaseImpl(int);

    public static boolean isMirrored(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isMirrored(int)>(c0);

        return $z0;
    }

    public static boolean isMirrored(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <java.lang.Character: boolean isMirroredImpl(int)>(i0);

        return $z0;
    }

    private static native boolean isMirroredImpl(int);

    public static boolean isSpace(char)
    {
        char c0;

        c0 := @parameter0: char;

        if c0 == 10 goto label1;

        if c0 == 9 goto label1;

        if c0 == 12 goto label1;

        if c0 == 13 goto label1;

        if c0 != 32 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isSpaceChar(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isSpaceChar(int)>(c0);

        return $z0;
    }

    public static boolean isSpaceChar(int)
    {
        int i0;
        boolean z0, $z1;

        i0 := @parameter0: int;

        if i0 == 32 goto label1;

        if i0 != 160 goto label3;

     label1:
        z0 = 1;

     label2:
        return z0;

     label3:
        z0 = 0;

        if i0 < 4096 goto label2;

        if i0 == 5760 goto label4;

        if i0 != 6158 goto label5;

     label4:
        return 1;

     label5:
        z0 = 0;

        if i0 < 8192 goto label2;

        if i0 > 65535 goto label7;

        if i0 <= 8202 goto label6;

        if i0 == 8232 goto label6;

        if i0 == 8233 goto label6;

        if i0 == 8239 goto label6;

        if i0 == 8287 goto label6;

        z0 = 0;

        if i0 != 12288 goto label2;

     label6:
        return 1;

     label7:
        $z1 = staticinvoke <java.lang.Character: boolean isSpaceCharImpl(int)>(i0);

        return $z1;
    }

    private static native boolean isSpaceCharImpl(int);

    public static boolean isSupplementaryCodePoint(int)
    {
        int i0;

        i0 := @parameter0: int;

        if 65536 > i0 goto label1;

        if 1114111 < i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isSurrogate(char)
    {
        char c0;

        c0 := @parameter0: char;

        if c0 < 55296 goto label1;

        if c0 > 57343 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isSurrogatePair(char, char)
    {
        char c0, c1;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isTitleCase(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isTitleCaseImpl(int)>(c0);

        return $z0;
    }

    public static boolean isTitleCase(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <java.lang.Character: boolean isTitleCaseImpl(int)>(i0);

        return $z0;
    }

    private static native boolean isTitleCaseImpl(int);

    public static boolean isUnicodeIdentifierPart(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierPartImpl(int)>(c0);

        return $z0;
    }

    public static boolean isUnicodeIdentifierPart(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierPartImpl(int)>(i0);

        return $z0;
    }

    private static native boolean isUnicodeIdentifierPartImpl(int);

    public static boolean isUnicodeIdentifierStart(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierStartImpl(int)>(c0);

        return $z0;
    }

    public static boolean isUnicodeIdentifierStart(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierStartImpl(int)>(i0);

        return $z0;
    }

    private static native boolean isUnicodeIdentifierStartImpl(int);

    public static boolean isUpperCase(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(c0);

        return $z0;
    }

    public static boolean isUpperCase(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 65 > i0 goto label1;

        if i0 > 90 goto label1;

        return 1;

     label1:
        if i0 >= 128 goto label2;

        return 0;

     label2:
        $z0 = staticinvoke <java.lang.Character: boolean isUpperCaseImpl(int)>(i0);

        return $z0;
    }

    private static native boolean isUpperCaseImpl(int);

    public static boolean isValidCodePoint(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if 1114111 < i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isWhitespace(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(c0);

        return $z0;
    }

    public static boolean isWhitespace(int)
    {
        int i0;
        boolean z0, $z1;

        i0 := @parameter0: int;

        if i0 < 28 goto label1;

        if i0 <= 32 goto label2;

     label1:
        if i0 < 9 goto label4;

        if i0 > 13 goto label4;

     label2:
        z0 = 1;

     label3:
        return z0;

     label4:
        z0 = 0;

        if i0 < 4096 goto label3;

        if i0 == 5760 goto label5;

        if i0 != 6158 goto label6;

     label5:
        return 1;

     label6:
        z0 = 0;

        if i0 < 8192 goto label3;

        z0 = 0;

        if i0 == 8199 goto label3;

        z0 = 0;

        if i0 == 8239 goto label3;

        if i0 > 65535 goto label8;

        if i0 <= 8202 goto label7;

        if i0 == 8232 goto label7;

        if i0 == 8233 goto label7;

        if i0 == 8287 goto label7;

        z0 = 0;

        if i0 != 12288 goto label3;

     label7:
        return 1;

     label8:
        $z1 = staticinvoke <java.lang.Character: boolean isWhitespaceImpl(int)>(i0);

        return $z1;
    }

    private static native boolean isWhitespaceImpl(int);

    public static char lowSurrogate(int)
    {
        int i0, $i1, $i2;
        char $c3;

        i0 := @parameter0: int;

        $i1 = i0 & 1023;

        $i2 = 56320 | $i1;

        $c3 = (char) $i2;

        return $c3;
    }

    private static native int ofImpl(int);

    public static int offsetByCodePoints(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        java.lang.IndexOutOfBoundsException $r1, $r2, $r4;
        char $c8, $c9, $c10, $c11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label01;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("seq == null");

        throw $r3;

     label01:
        i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i0 < 0 goto label02;

        if i0 <= i2 goto label03;

     label02:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label03:
        if i1 != 0 goto label05;

        i4 = i0;

     label04:
        return i4;

     label05:
        if i1 <= 0 goto label09;

        i6 = i1;

        i4 = i0;

     label06:
        if i6 <= 0 goto label04;

        i6 = i6 + -1;

        if i4 < i2 goto label07;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label07:
        $c10 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        $z2 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c10);

        if $z2 == 0 goto label08;

        i7 = i4 + 1;

        if i7 >= i2 goto label08;

        $c11 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i7);

        $z3 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c11);

        if $z3 == 0 goto label08;

        i4 = i4 + 1;

     label08:
        i4 = i4 + 1;

        goto label06;

     label09:
        i3 = neg i1;

        i4 = i0;

     label10:
        if i3 <= 0 goto label04;

        i3 = i3 + -1;

        i4 = i4 + -1;

        if i4 >= 0 goto label11;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label11:
        $c8 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        $z0 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c8);

        if $z0 == 0 goto label10;

        i5 = i4 - 1;

        if i5 < 0 goto label10;

        $c9 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

        $z1 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c9);

        if $z1 == 0 goto label10;

        i4 = i4 + -1;

        goto label10;
    }

    public static int offsetByCodePoints(char[], int, int, int, int)
    {
        char[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10;
        java.lang.IndexOutOfBoundsException $r1, $r2, $r3;
        char $c11, $c12, $c13, $c14;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $i10 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i10, i0, i1);

        i4 = i0 + i1;

        if i2 < i0 goto label01;

        if i2 <= i4 goto label02;

     label01:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label02:
        if i3 != 0 goto label04;

        i6 = i2;

     label03:
        return i6;

     label04:
        if i3 <= 0 goto label08;

        i8 = i3;

        i6 = i2;

     label05:
        if i8 <= 0 goto label03;

        i8 = i8 + -1;

        if i6 < i4 goto label06;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label06:
        $c13 = r0[i6];

        $z2 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c13);

        if $z2 == 0 goto label07;

        i9 = i6 + 1;

        if i9 >= i4 goto label07;

        $c14 = r0[i9];

        $z3 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c14);

        if $z3 == 0 goto label07;

        i6 = i6 + 1;

     label07:
        i6 = i6 + 1;

        goto label05;

     label08:
        i5 = neg i3;

        i6 = i2;

     label09:
        if i5 <= 0 goto label03;

        i5 = i5 + -1;

        i6 = i6 + -1;

        if i6 >= i0 goto label10;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label10:
        $c11 = r0[i6];

        $z0 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c11);

        if $z0 == 0 goto label09;

        i7 = i6 - 1;

        if i7 < i0 goto label09;

        $c12 = r0[i7];

        $z1 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c12);

        if $z1 == 0 goto label09;

        i6 = i6 + -1;

        goto label09;
    }

    public static char reverseBytes(char)
    {
        char c0, $c1, $c4;
        int $i2, $i3;

        c0 := @parameter0: char;

        $i2 = c0 << 8;

        $c1 = c0 >> 8;

        $i3 = $i2 | $c1;

        $c4 = (char) $i3;

        return $c4;
    }

    public static int toChars(int, char[], int)
    {
        int i0, i1, i2, i3, i4, $i5, $i7, $i8, $i9, $i10, $i11, $i13;
        char[] r0;
        java.lang.IndexOutOfBoundsException $r1, $r3;
        boolean $z0;
        char $c6, $c12, $c14;
        java.lang.NullPointerException $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: char[];

        i1 := @parameter2: int;

        staticinvoke <java.lang.Character: void checkValidCodePoint(int)>(i0);

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("dst == null");

        throw $r2;

     label1:
        if i1 < 0 goto label2;

        $i5 = lengthof r0;

        if i1 < $i5 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        $z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i0);

        if $z0 == 0 goto label5;

        $i7 = lengthof r0;

        $i8 = -1 + $i7;

        if i1 != $i8 goto label4;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label4:
        i2 = i0 - 65536;

        $i9 = i2 >> 10;

        $i10 = 1023 & $i9;

        i3 = 55296 | $i10;

        $i11 = i2 & 1023;

        i4 = 56320 | $i11;

        $c12 = (char) i3;

        r0[i1] = $c12;

        $i13 = i1 + 1;

        $c14 = (char) i4;

        r0[$i13] = $c14;

        return 2;

     label5:
        $c6 = (char) i0;

        r0[i1] = $c6;

        return 1;
    }

    public static char[] toChars(int)
    {
        int i0, i1, i2, i3, $i5, $i6, $i7;
        char[] r0, r1;
        boolean $z0;
        char $c4, $c8, $c9;

        i0 := @parameter0: int;

        staticinvoke <java.lang.Character: void checkValidCodePoint(int)>(i0);

        $z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i0);

        if $z0 == 0 goto label1;

        i1 = i0 - 65536;

        $i5 = i1 >> 10;

        $i6 = 1023 & $i5;

        i2 = 55296 | $i6;

        $i7 = i1 & 1023;

        i3 = 56320 | $i7;

        r1 = newarray (char)[2];

        $c8 = (char) i2;

        r1[0] = $c8;

        $c9 = (char) i3;

        r1[1] = $c9;

        return r1;

     label1:
        r0 = newarray (char)[1];

        $c4 = (char) i0;

        r0[0] = $c4;

        return r0;
    }

    public static int toCodePoint(char, char)
    {
        char c0, c1, $c2, $c3;
        int $i4, $i5, $i6;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $c2 = c0 & 1023;

        $i4 = $c2 << 10;

        $c3 = c1 & 1023;

        $i5 = $i4 | $c3;

        $i6 = 65536 + $i5;

        return $i6;
    }

    public static char toLowerCase(char)
    {
        char c0, $c2;
        int $i1;

        c0 := @parameter0: char;

        $i1 = staticinvoke <java.lang.Character: int toLowerCase(int)>(c0);

        $c2 = (char) $i1;

        return $c2;
    }

    public static int toLowerCase(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        if 65 > i0 goto label2;

        if i0 > 90 goto label2;

        $i2 = i0 + 32;

        i0 = (char) $i2;

     label1:
        return i0;

     label2:
        if i0 < 192 goto label1;

        $i1 = staticinvoke <java.lang.Character: int toLowerCaseImpl(int)>(i0);

        return $i1;
    }

    private static native int toLowerCaseImpl(int);

    public static java.lang.String toString(char)
    {
        char c0;
        java.lang.String $r0;

        c0 := @parameter0: char;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        return $r0;
    }

    public static char toTitleCase(char)
    {
        char c0, $c2;
        int $i1;

        c0 := @parameter0: char;

        $i1 = staticinvoke <java.lang.Character: int toTitleCaseImpl(int)>(c0);

        $c2 = (char) $i1;

        return $c2;
    }

    public static int toTitleCase(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Character: int toTitleCaseImpl(int)>(i0);

        return $i1;
    }

    private static native int toTitleCaseImpl(int);

    public static char toUpperCase(char)
    {
        char c0, $c2;
        int $i1;

        c0 := @parameter0: char;

        $i1 = staticinvoke <java.lang.Character: int toUpperCase(int)>(c0);

        $c2 = (char) $i1;

        return $c2;
    }

    public static int toUpperCase(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        if 97 > i0 goto label2;

        if i0 > 122 goto label2;

        $i2 = i0 - 32;

        i0 = (char) $i2;

     label1:
        return i0;

     label2:
        if i0 < 181 goto label1;

        $i1 = staticinvoke <java.lang.Character: int toUpperCaseImpl(int)>(i0);

        return $i1;
    }

    private static native int toUpperCaseImpl(int);

    public static java.lang.Character valueOf(char)
    {
        char c0;
        java.lang.Character $r0, $r2;
        java.lang.Character[] $r1;

        c0 := @parameter0: char;

        if c0 >= 128 goto label1;

        $r1 = <java.lang.Character: java.lang.Character[] SMALL_VALUES>;

        $r2 = $r1[c0];

        return $r2;

     label1:
        $r0 = new java.lang.Character;

        specialinvoke $r0.<java.lang.Character: void <init>(char)>(c0);

        return $r0;
    }

    public char charValue()
    {
        java.lang.Character r0;
        char $c0;

        r0 := @this: java.lang.Character;

        $c0 = r0.<java.lang.Character: char value>;

        return $c0;
    }

    public int compareTo(java.lang.Character)
    {
        java.lang.Character r0, r1;
        char $c0, $c1;
        int $i2;

        r0 := @this: java.lang.Character;

        r1 := @parameter0: java.lang.Character;

        $c1 = r0.<java.lang.Character: char value>;

        $c0 = r1.<java.lang.Character: char value>;

        $i2 = staticinvoke <java.lang.Character: int compare(char,char)>($c1, $c0);

        return $i2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Character r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Character;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Character) r1;

        $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Character r0, $r2;
        java.lang.Object r1;
        boolean $z0;
        char $c0, $c1;

        r0 := @this: java.lang.Character;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.Character;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Character) r1;

        $c1 = $r2.<java.lang.Character: char value>;

        $c0 = r0.<java.lang.Character: char value>;

        if $c1 != $c0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        java.lang.Character r0;
        char $c0;

        r0 := @this: java.lang.Character;

        $c0 = r0.<java.lang.Character: char value>;

        return $c0;
    }

    public java.lang.String toString()
    {
        java.lang.Character r0;
        char $c0;
        java.lang.String $r1;

        r0 := @this: java.lang.Character;

        $c0 = r0.<java.lang.Character: char value>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        return $r1;
    }
}
