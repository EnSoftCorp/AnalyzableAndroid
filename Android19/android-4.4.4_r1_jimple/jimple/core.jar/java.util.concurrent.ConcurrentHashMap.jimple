public class java.util.concurrent.ConcurrentHashMap extends java.util.AbstractMap implements java.util.concurrent.ConcurrentMap, java.io.Serializable
{
    static final int DEFAULT_CONCURRENCY_LEVEL;
    static final int DEFAULT_INITIAL_CAPACITY;
    static final float DEFAULT_LOAD_FACTOR;
    static final int MAXIMUM_CAPACITY;
    static final int MAX_SEGMENTS;
    static final int MIN_SEGMENT_TABLE_CAPACITY;
    static final int RETRIES_BEFORE_LOCK;
    private static final long SBASE;
    private static final int SSHIFT;
    private static final long TBASE;
    private static final int TSHIFT;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long serialVersionUID;
    transient java.util.Set entrySet;
    transient java.util.Set keySet;
    final int segmentMask;
    final int segmentShift;
    final java.util.concurrent.ConcurrentHashMap$Segment[] segments;
    transient java.util.Collection values;

    static void <clinit>()
    {
        java.lang.Exception r0, $r7;
        int i0, i1, $i2, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        sun.misc.Unsafe $r1, $r2, $r3, $r4, $r5;
        long $l3, $l5;
        java.lang.Error $r6, $r8;

        <java.util.concurrent.ConcurrentHashMap: long serialVersionUID> = 7249069246763182397L;

        <java.util.concurrent.ConcurrentHashMap: int RETRIES_BEFORE_LOCK> = 2;

        <java.util.concurrent.ConcurrentHashMap: int MIN_SEGMENT_TABLE_CAPACITY> = 2;

        <java.util.concurrent.ConcurrentHashMap: int MAX_SEGMENTS> = 65536;

        <java.util.concurrent.ConcurrentHashMap: int MAXIMUM_CAPACITY> = 1073741824;

        <java.util.concurrent.ConcurrentHashMap: float DEFAULT_LOAD_FACTOR> = 0.75F;

        <java.util.concurrent.ConcurrentHashMap: int DEFAULT_INITIAL_CAPACITY> = 16;

        <java.util.concurrent.ConcurrentHashMap: int DEFAULT_CONCURRENCY_LEVEL> = 16;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE> = $r1;

        $r2 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $i2 = virtualinvoke $r2.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Ljava/util/concurrent/ConcurrentHashMap$HashEntry;");

        $l3 = (long) $i2;

        <java.util.concurrent.ConcurrentHashMap: long TBASE> = $l3;

        $r3 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $i4 = virtualinvoke $r3.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Ljava/util/concurrent/ConcurrentHashMap$Segment;");

        $l5 = (long) $i4;

        <java.util.concurrent.ConcurrentHashMap: long SBASE> = $l5;

        $r4 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        i0 = virtualinvoke $r4.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Ljava/util/concurrent/ConcurrentHashMap$HashEntry;");

        $r5 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        i1 = virtualinvoke $r5.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Ljava/util/concurrent/ConcurrentHashMap$Segment;");

     label2:
        $i6 = i1 - 1;

        $i7 = i1 & $i6;

        if $i7 != 0 goto label3;

        $i8 = i0 - 1;

        $i9 = i0 & $i8;

        if $i9 == 0 goto label5;

     label3:
        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String)>("data type scale not a power of two");

        throw $r6;

     label4:
        $r7 := @caughtexception;

        r0 = $r7;

        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r8;

     label5:
        $i11 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i1);

        $i10 = 31 - $i11;

        <java.util.concurrent.ConcurrentHashMap: int SSHIFT> = $i10;

        $i12 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i13 = 31 - $i12;

        <java.util.concurrent.ConcurrentHashMap: int TSHIFT> = $i13;

        return;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap r0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(16, 0.75F, 16);

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(i0, 0.75F, 16);

        return;
    }

    public void <init>(int, float)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0;
        float f0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(i0, f0, 16);

        return;
    }

    public void <init>(int, float, int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i9, $i10;
        float f0, $f1, $f2;
        java.util.concurrent.ConcurrentHashMap$Segment r1, $r4;
        java.util.concurrent.ConcurrentHashMap$Segment[] r2, $r7;
        byte $b6;
        java.lang.IllegalArgumentException $r3;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] $r5, $r6;
        sun.misc.Unsafe $r8;
        long $l11;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $b6 = f0 cmpl 0.0F;

        if $b6 <= 0 goto label1;

        if i0 < 0 goto label1;

        if i1 > 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        if i1 <= 65536 goto label3;

        i1 = 65536;

     label3:
        i2 = 0;

        i3 = 1;

     label4:
        if i3 >= i1 goto label5;

        i2 = i2 + 1;

        i3 = i3 << 1;

        goto label4;

     label5:
        $i7 = 32 - i2;

        r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift> = $i7;

        $i8 = i3 - 1;

        r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask> = $i8;

        if i0 <= 1073741824 goto label6;

        i0 = 1073741824;

     label6:
        i4 = i0 / i3;

        $i9 = i4 * i3;

        if $i9 >= i0 goto label7;

        i4 = i4 + 1;

     label7:
        i5 = 2;

     label8:
        if i5 >= i4 goto label9;

        i5 = i5 << 1;

        goto label8;

     label9:
        $r4 = new java.util.concurrent.ConcurrentHashMap$Segment;

        $f2 = (float) i5;

        $f1 = f0 * $f2;

        $i10 = (int) $f1;

        $r6 = newarray (java.util.concurrent.ConcurrentHashMap$HashEntry)[i5];

        $r5 = (java.util.concurrent.ConcurrentHashMap$HashEntry[]) $r6;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap$Segment: void <init>(float,int,java.util.concurrent.ConcurrentHashMap$HashEntry[])>(f0, $i10, $r5);

        r1 = $r4;

        $r7 = newarray (java.util.concurrent.ConcurrentHashMap$Segment)[i3];

        r2 = (java.util.concurrent.ConcurrentHashMap$Segment[]) $r7;

        $r8 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $l11 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;

        virtualinvoke $r8.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r2, $l11, r1);

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments> = r2;

        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Map r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $f0 = (float) $i0;

        $f1 = $f0 / 0.75F;

        $i1 = (int) $f1;

        $i2 = 1 + $i1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 16);

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>($i3, 0.75F, 16);

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>(r1);

        return;
    }

    private java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0, i2, i3, $i4, $i5;
        java.util.concurrent.ConcurrentHashMap$Segment[] r1;
        long l1, $l6, $l7;
        java.util.concurrent.ConcurrentHashMap$Segment r2, r3, r5, $r12;
        float f0, $f1, $f2;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r4, $r8, $r11;
        sun.misc.Unsafe r6, $r7, $r10, $r15;
        java.lang.Object $r9, $r13, $r14;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        i0 := @parameter0: int;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        $i4 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;

        $i5 = i0 << $i4;

        $l7 = (long) $i5;

        $l6 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;

        l1 = $l7 + $l6;

        $r7 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $r9 = virtualinvoke $r7.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, l1);

        r2 = (java.util.concurrent.ConcurrentHashMap$Segment) $r9;

        if r2 != null goto label2;

        r3 = r1[0];

        $r8 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;

        i2 = lengthof $r8;

        f0 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: float loadFactor>;

        $f2 = (float) i2;

        $f1 = f0 * $f2;

        i3 = (int) $f1;

        $r11 = newarray (java.util.concurrent.ConcurrentHashMap$HashEntry)[i2];

        r4 = (java.util.concurrent.ConcurrentHashMap$HashEntry[]) $r11;

        $r10 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $r13 = virtualinvoke $r10.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, l1);

        r2 = (java.util.concurrent.ConcurrentHashMap$Segment) $r13;

        if r2 != null goto label2;

        $r12 = new java.util.concurrent.ConcurrentHashMap$Segment;

        specialinvoke $r12.<java.util.concurrent.ConcurrentHashMap$Segment: void <init>(float,int,java.util.concurrent.ConcurrentHashMap$HashEntry[])>(f0, i3, r4);

        r5 = $r12;

     label1:
        $r15 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $r14 = virtualinvoke $r15.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, l1);

        r2 = (java.util.concurrent.ConcurrentHashMap$Segment) $r14;

        if r2 != null goto label2;

        r6 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        r2 = r5;

        $z0 = virtualinvoke r6.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l1, null, r5);

        if $z0 == 0 goto label1;

     label2:
        return r2;
    }

    static final java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[], int)
    {
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r0;
        int i0, $i1;
        long $l2, $l3, $l4, $l5;
        sun.misc.Unsafe $r1;
        java.lang.Object $r2;
        java.util.concurrent.ConcurrentHashMap$HashEntry $r3;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$HashEntry[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $l2 = (long) i0;

        $i1 = <java.util.concurrent.ConcurrentHashMap: int TSHIFT>;

        $l4 = $l2 << $i1;

        $l3 = <java.util.concurrent.ConcurrentHashMap: long TBASE>;

        $l5 = $l4 + $l3;

        $r2 = virtualinvoke $r1.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r0, $l5);

        $r3 = (java.util.concurrent.ConcurrentHashMap$HashEntry) $r2;

        return $r3;
    }

    static final java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment, int)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        int i0, $i1, $i2, $i3, $i4;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r1;
        long $l5, $l6, $l7, $l8;
        sun.misc.Unsafe $r2;
        java.lang.Object $r3;
        java.util.concurrent.ConcurrentHashMap$HashEntry $r4;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Segment;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;

        if r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $i1 = lengthof r1;

        $i2 = -1 + $i1;

        $i3 = i0 & $i2;

        $l5 = (long) $i3;

        $i4 = <java.util.concurrent.ConcurrentHashMap: int TSHIFT>;

        $l7 = $l5 << $i4;

        $l6 = <java.util.concurrent.ConcurrentHashMap: long TBASE>;

        $l8 = $l7 + $l6;

        $r3 = virtualinvoke $r2.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, $l8);

        $r4 = (java.util.concurrent.ConcurrentHashMap$HashEntry) $r3;

        return $r4;
    }

    private static int hash(int)
    {
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        i0 := @parameter0: int;

        $i6 = i0 << 15;

        $i7 = -12931 ^ $i6;

        i1 = i0 + $i7;

        $i8 = i1 >>> 10;

        i2 = i1 ^ $i8;

        $i9 = i2 << 3;

        i3 = i2 + $i9;

        $i10 = i3 >>> 6;

        i4 = i3 ^ $i10;

        $i12 = i4 << 2;

        $i11 = i4 << 14;

        $i13 = $i12 + $i11;

        i5 = i4 + $i13;

        $i14 = i5 >>> 16;

        $i15 = i5 ^ $i14;

        return $i15;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.io.ObjectInputStream r1;
        java.util.concurrent.ConcurrentHashMap$Segment[] r2;
        int i0, $i1, $i2;
        java.lang.Object r3, r4;
        java.util.concurrent.ConcurrentHashMap$Segment r5;
        float $f0, $f1, $f2;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] $r7, $r8;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        r2 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        i0 = 0;

     label1:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label4;

        r5 = r2[i0];

        if r5 == null goto label2;

        $f1 = (float) 2;

        $f0 = r5.<java.util.concurrent.ConcurrentHashMap$Segment: float loadFactor>;

        $f2 = $f1 * $f0;

        $i2 = (int) $f2;

        r5.<java.util.concurrent.ConcurrentHashMap$Segment: int threshold> = $i2;

        $r8 = newarray (java.util.concurrent.ConcurrentHashMap$HashEntry)[2];

        $r7 = (java.util.concurrent.ConcurrentHashMap$HashEntry[]) $r8;

        r5.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table> = $r7;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

     label4:
        r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if r3 != null goto label3;

        return;
    }

    static final java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[], int)
    {
        java.util.concurrent.ConcurrentHashMap$Segment[] r0;
        int i0, $i2, $i3;
        long l1, $l4, $l5;
        sun.misc.Unsafe $r1;
        java.lang.Object $r2;
        java.util.concurrent.ConcurrentHashMap$Segment $r3;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Segment[];

        i0 := @parameter1: int;

        $i2 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;

        $i3 = i0 << $i2;

        $l5 = (long) $i3;

        $l4 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;

        l1 = $l5 + $l4;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $r2 = virtualinvoke $r1.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r0, l1);

        $r3 = (java.util.concurrent.ConcurrentHashMap$Segment) $r2;

        return $r3;
    }

    private java.util.concurrent.ConcurrentHashMap$Segment segmentForHash(int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7;
        long l1, $l8, $l9;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r1;
        sun.misc.Unsafe $r2;
        java.lang.Object $r3;
        java.util.concurrent.ConcurrentHashMap$Segment $r4;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        i0 := @parameter0: int;

        $i2 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift>;

        $i4 = i0 >>> $i2;

        $i3 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask>;

        $i6 = $i4 & $i3;

        $i5 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;

        $i7 = $i6 << $i5;

        $l9 = (long) $i7;

        $l8 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;

        l1 = $l9 + $l8;

        $r2 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        $r3 = virtualinvoke $r2.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>($r1, l1);

        $r4 = (java.util.concurrent.ConcurrentHashMap$Segment) $r3;

        return $r4;
    }

    static final void setEntryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[], int, java.util.concurrent.ConcurrentHashMap$HashEntry)
    {
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r0;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$HashEntry r1;
        long $l2, $l3, $l4, $l5;
        sun.misc.Unsafe $r2;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$HashEntry[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.concurrent.ConcurrentHashMap$HashEntry;

        $r2 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $l2 = (long) i0;

        $i1 = <java.util.concurrent.ConcurrentHashMap: int TSHIFT>;

        $l4 = $l2 << $i1;

        $l3 = <java.util.concurrent.ConcurrentHashMap: long TBASE>;

        $l5 = $l4 + $l3;

        virtualinvoke $r2.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r0, $l5, r1);

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.io.ObjectOutputStream r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.util.concurrent.ConcurrentHashMap$Segment[] r2, $r7;
        java.util.concurrent.ConcurrentHashMap$Segment r3;
        java.lang.Throwable r4, $r10;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r5;
        java.util.concurrent.ConcurrentHashMap$HashEntry r6;
        java.lang.Object $r8, $r9;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        i0 = 0;

     label01:
        $r7 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        $i3 = lengthof $r7;

        if i0 >= $i3 goto label02;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)>(i0);

        i0 = i0 + 1;

        goto label01;

     label02:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        r2 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        i1 = 0;

     label03:
        $i4 = lengthof r2;

        if i1 >= $i4 goto label13;

        r3 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r2, i1);

        virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();

     label04:
        r5 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;

     label05:
        i2 = 0;

     label06:
        $i5 = lengthof r5;

        if i2 >= $i5 goto label12;

        r6 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int)>(r5, i2);

     label07:
        if r6 == null goto label10;

     label08:
        $r9 = r6.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r9);

        $r8 = r6.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

        r6 = r6.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

     label09:
        goto label07;

     label10:
        i2 = i2 + 1;

        goto label06;

     label11:
        $r10 := @caughtexception;

        r4 = $r10;

        virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        throw r4;

     label12:
        virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        i1 = i1 + 1;

        goto label03;

     label13:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        return;

        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$Segment[] r1;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$Segment r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r1, i0);

        if r2 == null goto label2;

        virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Segment: void clear()>();

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r5, $r7, $r9;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, $i12, $i13, $i14, $i19;
        long l1, $l8, $l10, $l15, $l16, $l17, $l18;
        java.util.concurrent.ConcurrentHashMap$Segment r2;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r3;
        java.util.concurrent.ConcurrentHashMap$HashEntry r4;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r6;
        sun.misc.Unsafe $r8, $r10;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        $i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int hash(int)>($i2);

        $i3 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift>;

        $i5 = i0 >>> $i3;

        $i4 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask>;

        $i7 = $i5 & $i4;

        $i6 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;

        $i9 = $i7 << $i6;

        $l10 = (long) $i9;

        $l8 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;

        l1 = $l10 + $l8;

        $r8 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $r6 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        $r7 = virtualinvoke $r8.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>($r6, l1);

        r2 = (java.util.concurrent.ConcurrentHashMap$Segment) $r7;

        if r2 == null goto label4;

        r3 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;

        if r3 == null goto label4;

        $r10 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $i12 = lengthof r3;

        $i11 = -1 + $i12;

        $i14 = i0 & $i11;

        $l16 = (long) $i14;

        $i13 = <java.util.concurrent.ConcurrentHashMap: int TSHIFT>;

        $l18 = $l16 << $i13;

        $l15 = <java.util.concurrent.ConcurrentHashMap: long TBASE>;

        $l17 = $l18 + $l15;

        $r9 = virtualinvoke $r10.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r3, $l17);

        r4 = (java.util.concurrent.ConcurrentHashMap$HashEntry) $r9;

     label1:
        if r4 == null goto label4;

        r5 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;

        if r5 == r1 goto label2;

        $i19 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;

        if $i19 != i0 goto label3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        r4 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

        goto label1;

     label4:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r6;
        java.util.concurrent.ConcurrentHashMap$Segment[] r2;
        long l0, l3, $l12;
        int i1, i2, i4, i5, i6, i7, i8, i9, $i10, $i13;
        java.lang.Throwable r3, $r12;
        java.util.concurrent.ConcurrentHashMap$Segment r4, $r8, $r9, $r10;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r5;
        java.util.concurrent.ConcurrentHashMap$HashEntry r7;
        boolean z0, z1;
        byte $b11;
        java.lang.NullPointerException $r11;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>()>();

        throw $r11;

     label01:
        r2 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        l0 = 0L;

        i1 = 0;

        i2 = -1;

     label02:
        l3 = 0L;

        i4 = 0;

     label03:
        $i10 = lengthof r2;

        if i4 >= $i10 goto label22;

     label04:
        if i2 != 2 goto label16;

     label05:
        r4 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)>(i4);

        virtualinvoke r4.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();

     label06:
        i1 = i1 + 1;

     label07:
        r5 = r4.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;

     label08:
        if r5 == null goto label31;

        i6 = 0;

     label09:
        $i13 = lengthof r5;

        if i6 >= $i13 goto label20;

        r7 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int)>(r5, i6);

     label10:
        if r7 == null goto label32;

     label11:
        r6 = r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;

     label12:
        if r6 == null goto label18;

     label13:
        z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

     label14:
        if z1 == 0 goto label18;

        z0 = 1;

        i9 = 0;

     label15:
        if i9 >= i1 goto label28;

        $r9 = r2[i9];

        virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        i9 = i9 + 1;

        goto label15;

     label16:
        r4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r2, i4);

     label17:
        if r4 != null goto label07;

        goto label31;

     label18:
        r7 = r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

     label19:
        goto label10;

     label20:
        i7 = r4.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;

     label21:
        $l12 = (long) i7;

        l3 = l3 + $l12;

        goto label31;

     label22:
        if i2 < 0 goto label23;

        $b11 = l3 cmp l0;

        if $b11 == 0 goto label24;

     label23:
        if i1 <= 0 goto label26;

     label24:
        i8 = 0;

     label25:
        z0 = 0;

        if i8 >= i1 goto label28;

        $r8 = r2[i8];

        virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        i8 = i8 + 1;

        goto label25;

     label26:
        l0 = l3;

        i2 = i2 + 1;

        goto label02;

     label27:
        throw r3;

     label28:
        return z0;

     label29:
        $r12 := @caughtexception;

        r3 = $r12;

        i5 = 0;

     label30:
        if i5 >= i1 goto label27;

        $r10 = r2[i5];

        virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        i5 = i5 + 1;

        goto label30;

     label31:
        i4 = i4 + 1;

        goto label03;

     label32:
        i6 = i6 + 1;

        goto label09;

        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch java.lang.Throwable from label07 to label08 with label29;
        catch java.lang.Throwable from label09 to label10 with label29;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label16 to label17 with label29;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch java.lang.Throwable from label20 to label21 with label29;
    }

    public java.util.Enumeration elements()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$ValueIterator $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        $r1 = new java.util.concurrent.ConcurrentHashMap$ValueIterator;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap$ValueIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);

        return $r1;
    }

    public java.util.Set entrySet()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Set r1;
        java.util.concurrent.ConcurrentHashMap$EntrySet r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentHashMap$EntrySet;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap$EntrySet: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet> = r2;

        return r2;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r5, $r7, $r9, $r11;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, $i12, $i13, $i14, $i19;
        long l1, $l8, $l10, $l15, $l16, $l17, $l18;
        java.util.concurrent.ConcurrentHashMap$Segment r2;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r3;
        java.util.concurrent.ConcurrentHashMap$HashEntry r4;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r6;
        sun.misc.Unsafe $r8, $r10;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        $i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int hash(int)>($i2);

        $i3 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift>;

        $i5 = i0 >>> $i3;

        $i4 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask>;

        $i7 = $i5 & $i4;

        $i6 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;

        $i9 = $i7 << $i6;

        $l10 = (long) $i9;

        $l8 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;

        l1 = $l10 + $l8;

        $r8 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $r6 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        $r7 = virtualinvoke $r8.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>($r6, l1);

        r2 = (java.util.concurrent.ConcurrentHashMap$Segment) $r7;

        if r2 == null goto label4;

        r3 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;

        if r3 == null goto label4;

        $r10 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $i12 = lengthof r3;

        $i11 = -1 + $i12;

        $i14 = i0 & $i11;

        $l16 = (long) $i14;

        $i13 = <java.util.concurrent.ConcurrentHashMap: int TSHIFT>;

        $l18 = $l16 << $i13;

        $l15 = <java.util.concurrent.ConcurrentHashMap: long TBASE>;

        $l17 = $l18 + $l15;

        $r9 = virtualinvoke $r10.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r3, $l17);

        r4 = (java.util.concurrent.ConcurrentHashMap$HashEntry) $r9;

     label1:
        if r4 == null goto label4;

        r5 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;

        if r5 == r1 goto label2;

        $i19 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;

        if $i19 != i0 goto label3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label3;

     label2:
        $r11 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;

        return $r11;

     label3:
        r4 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

        goto label1;

     label4:
        return null;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        long l0, $l9, $l11;
        java.util.concurrent.ConcurrentHashMap$Segment[] r1;
        int i1, i2, $i3, $i5, $i7, $i8, $i10, $i12;
        java.util.concurrent.ConcurrentHashMap$Segment r2, r3;
        byte $b4, $b6;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        l0 = 0L;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        i1 = 0;

     label1:
        $i3 = lengthof r1;

        if i1 >= $i3 goto label5;

        r3 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r1, i1);

        if r3 == null goto label4;

        $i10 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: int count>;

        if $i10 == 0 goto label3;

     label2:
        return 0;

     label3:
        $i12 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;

        $l11 = (long) $i12;

        l0 = l0 + $l11;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        $b4 = l0 cmp 0L;

        if $b4 == 0 goto label9;

        i2 = 0;

     label6:
        $i5 = lengthof r1;

        if i2 >= $i5 goto label8;

        r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r1, i2);

        if r2 == null goto label7;

        $i7 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: int count>;

        if $i7 != 0 goto label2;

        $i8 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;

        $l9 = (long) $i8;

        l0 = l0 - $l9;

     label7:
        i2 = i2 + 1;

        goto label6;

     label8:
        $b6 = l0 cmp 0L;

        if $b6 != 0 goto label2;

     label9:
        return 1;
    }

    public java.util.Set keySet()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Set r1;
        java.util.concurrent.ConcurrentHashMap$KeySet r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentHashMap$KeySet;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap$KeySet: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet> = r2;

        return r2;
    }

    public java.util.Enumeration keys()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$KeyIterator $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        $r1 = new java.util.concurrent.ConcurrentHashMap$KeyIterator;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap$KeyIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);

        return $r1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r6, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.concurrent.ConcurrentHashMap$Segment r3;
        long $l8, $l9, $l10;
        sun.misc.Unsafe $r4;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r5;
        java.lang.NullPointerException $r8;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r2 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();

        throw $r8;

     label1:
        $i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int hash(int)>($i2);

        $i3 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift>;

        $i5 = i0 >>> $i3;

        $i4 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask>;

        i1 = $i5 & $i4;

        $r4 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $r5 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        $i6 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;

        $i7 = i1 << $i6;

        $l9 = (long) $i7;

        $l8 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;

        $l10 = $l9 + $l8;

        $r7 = virtualinvoke $r4.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>($r5, $l10);

        r3 = (java.util.concurrent.ConcurrentHashMap$Segment) $r7;

        if r3 != null goto label2;

        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)>(i1);

     label2:
        $r6 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>(r1, i0, r2, 0);

        return $r6;
    }

    public void putAll(java.util.Map)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.util.Map;

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r6, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.concurrent.ConcurrentHashMap$Segment r3;
        long $l8, $l9, $l10;
        sun.misc.Unsafe $r4;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r5;
        java.lang.NullPointerException $r8;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r2 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();

        throw $r8;

     label1:
        $i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int hash(int)>($i2);

        $i3 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift>;

        $i5 = i0 >>> $i3;

        $i4 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask>;

        i1 = $i5 & $i4;

        $r4 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;

        $r5 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        $i6 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;

        $i7 = i1 << $i6;

        $l9 = (long) $i7;

        $l8 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;

        $l10 = $l9 + $l8;

        $r7 = virtualinvoke $r4.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>($r5, $l10);

        r3 = (java.util.concurrent.ConcurrentHashMap$Segment) $r7;

        if r3 != null goto label2;

        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)>(i1);

     label2:
        $r6 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>(r1, i0, r2, 1);

        return $r6;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, $r3;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$Segment r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int hash(int)>($i1);

        r2 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentForHash(int)>(i0);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object)>(r1, i0, null);

        return $r3;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r4;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$Segment r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int hash(int)>($i1);

        if r2 == null goto label1;

        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentForHash(int)>(i0);

        if r3 == null goto label1;

        $r4 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object)>(r1, i0, r2);

        if $r4 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r4;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$Segment r3;
        java.lang.NullPointerException $r5;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int hash(int)>($i1);

        if r2 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label1:
        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentForHash(int)>(i0);

        if r3 != null goto label2;

        return null;

     label2:
        $r4 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object replace(java.lang.Object,int,java.lang.Object)>(r1, i0, r2);

        return $r4;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, r3;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$Segment r4;
        java.lang.NullPointerException $r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int hash(int)>($i1);

        if r2 == null goto label1;

        if r3 != null goto label2;

     label1:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label2:
        r4 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentForHash(int)>(i0);

        if r4 == null goto label3;

        $z0 = virtualinvoke r4.<java.util.concurrent.ConcurrentHashMap$Segment: boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)>(r1, i0, r2, r3);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$Segment[] r1;
        int i0, i2, i4, i5, i8, $i10, $i13, $i16, $i18, $i19;
        long l1, l3, l6, l7, $l9, $l12, $l14, $l20, $l21;
        java.util.concurrent.ConcurrentHashMap$Segment r2, r3, $r4;
        byte $b11, $b15, $b17;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        i0 = lengthof r1;

        l1 = 0L;

        i2 = -1;

     label01:
        if i2 >= 2 goto label07;

        l6 = 0L;

        l7 = 0L;

        i8 = 0;

     label02:
        if i8 >= i0 goto label04;

        r3 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r1, i8);

        if r3 == null goto label03;

        $i18 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;

        $l20 = (long) $i18;

        l6 = l6 + $l20;

        $i19 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: int count>;

        $l21 = (long) $i19;

        l7 = l7 + $l21;

     label03:
        i8 = i8 + 1;

        goto label02;

     label04:
        $b15 = l6 cmp l1;

        if $b15 != 0 goto label06;

        $l14 = l7 >>> 31;

        $b17 = $l14 cmp 0L;

        if $b17 != 0 goto label05;

        $i16 = (int) l7;

        return $i16;

     label05:
        return 2147483647;

     label06:
        l1 = l6;

        i2 = i2 + 1;

        goto label01;

     label07:
        l3 = 0L;

        i4 = 0;

     label08:
        if i4 >= i0 goto label09;

        r2 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)>(i4);

        virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();

        $i13 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: int count>;

        $l12 = (long) $i13;

        l3 = l3 + $l12;

        i4 = i4 + 1;

        goto label08;

     label09:
        i5 = 0;

     label10:
        if i5 >= i0 goto label11;

        $r4 = r1[i5];

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        i5 = i5 + 1;

        goto label10;

     label11:
        $l9 = l3 >>> 31;

        $b11 = $l9 cmp 0L;

        if $b11 != 0 goto label12;

        $i10 = (int) l3;

        return $i10;

     label12:
        return 2147483647;
    }

    public java.util.Collection values()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Collection r1;
        java.util.concurrent.ConcurrentHashMap$Values r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentHashMap$Values;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap$Values: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values> = r2;

        return r2;
    }
}
