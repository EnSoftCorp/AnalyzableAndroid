final class java.util.TreeMap$BoundedMap extends java.util.AbstractMap implements java.util.NavigableMap, java.io.Serializable
{
    private final transient boolean ascending;
    private transient java.util.TreeMap$BoundedMap$BoundedEntrySet entrySet;
    private final transient java.lang.Object 'from';
    private final transient java.util.TreeMap$Bound fromBound;
    private transient java.util.TreeMap$BoundedMap$BoundedKeySet keySet;
    final java.util.TreeMap this$0;
    private final transient java.lang.Object 'to';
    private final transient java.util.TreeMap$Bound toBound;

    void <init>(java.util.TreeMap, boolean, java.lang.Object, java.util.TreeMap$Bound, java.lang.Object, java.util.TreeMap$Bound)
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap r1;
        boolean z0;
        java.lang.Object r2, r4;
        java.util.TreeMap$Bound r3, r5, $r6, $r7, $r8, $r11;
        java.util.Comparator $r9, $r10, $r12;
        java.lang.IllegalArgumentException $r13;
        int $i2;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;
        java.lang.String $r18;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.util.TreeMap;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.TreeMap$Bound;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.util.TreeMap$Bound;

        r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0> = r1;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r6 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        if r3 == $r6 goto label1;

        $r11 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        if r5 == $r11 goto label1;

        $r12 = r1.<java.util.TreeMap: java.util.Comparator comparator>;

        $i2 = interfaceinvoke $r12.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, r4);

        if $i2 <= 0 goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label1:
        $r7 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        if r3 == $r7 goto label3;

        $r10 = r1.<java.util.TreeMap: java.util.Comparator comparator>;

        interfaceinvoke $r10.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, r2);

     label2:
        r0.<java.util.TreeMap$BoundedMap: boolean ascending> = z0;

        r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'> = r2;

        r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound> = r3;

        r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'> = r4;

        r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound> = r5;

        return;

     label3:
        $r8 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        if r5 == $r8 goto label2;

        $r9 = r1.<java.util.TreeMap: java.util.Comparator comparator>;

        interfaceinvoke $r9.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r4, r4);

        goto label2;
    }

    static java.lang.Object access$1000(java.util.TreeMap$BoundedMap)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.util.TreeMap$BoundedMap;

        $r1 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        return $r1;
    }

    static java.lang.Object access$1100(java.util.TreeMap$BoundedMap)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.util.TreeMap$BoundedMap;

        $r1 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        return $r1;
    }

    static java.util.TreeMap$Bound access$400(java.util.TreeMap$BoundedMap)
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap$Bound $r1;

        r0 := @parameter0: java.util.TreeMap$BoundedMap;

        $r1 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        return $r1;
    }

    static boolean access$500(java.util.TreeMap$BoundedMap, java.lang.Object, java.util.TreeMap$Bound, java.util.TreeMap$Bound)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Bound r2, r3;
        boolean $z0;

        r0 := @parameter0: java.util.TreeMap$BoundedMap;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.TreeMap$Bound;

        r3 := @parameter3: java.util.TreeMap$Bound;

        $z0 = specialinvoke r0.<java.util.TreeMap$BoundedMap: boolean isInBounds(java.lang.Object,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>(r1, r2, r3);

        return $z0;
    }

    static java.util.TreeMap$Bound access$600(java.util.TreeMap$BoundedMap)
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap$Bound $r1;

        r0 := @parameter0: java.util.TreeMap$BoundedMap;

        $r1 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        return $r1;
    }

    static java.util.TreeMap$Node access$700(java.util.TreeMap$BoundedMap, boolean)
    {
        java.util.TreeMap$BoundedMap r0;
        boolean z0;
        java.util.TreeMap$Node $r1;

        r0 := @parameter0: java.util.TreeMap$BoundedMap;

        z0 := @parameter1: boolean;

        $r1 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Node endpoint(boolean)>(z0);

        return $r1;
    }

    static boolean access$800(java.util.TreeMap$BoundedMap)
    {
        java.util.TreeMap$BoundedMap r0;
        boolean $z0;

        r0 := @parameter0: java.util.TreeMap$BoundedMap;

        $z0 = r0.<java.util.TreeMap$BoundedMap: boolean ascending>;

        return $z0;
    }

    static boolean access$900(java.util.TreeMap$BoundedMap, java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.util.TreeMap$BoundedMap;

        r1 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.TreeMap$BoundedMap: boolean isInBounds(java.lang.Object)>(r1);

        return $z0;
    }

    private java.util.TreeMap$Node bound(java.util.TreeMap$Node, java.util.TreeMap$Bound, java.util.TreeMap$Bound)
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap$Node r1;
        java.util.TreeMap$Bound r2, r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.util.TreeMap$Node;

        r2 := @parameter1: java.util.TreeMap$Bound;

        r3 := @parameter2: java.util.TreeMap$Bound;

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<java.util.TreeMap$Node: java.lang.Object getKey()>();

        $z0 = specialinvoke r0.<java.util.TreeMap$BoundedMap: boolean isInBounds(java.lang.Object,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>($r4, r2, r3);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        return null;
    }

    private java.util.TreeMap$Node endpoint(boolean)
    {
        java.util.TreeMap$BoundedMap r0;
        boolean z0, $z1;
        java.util.TreeMap$Node r1, r2, r3, r4, $r14, $r18, $r26, $r34;
        java.util.TreeMap$Bound $r5, $r11, $r12, $r20, $r28, $r29;
        int[] $r6, $r21;
        int $i0, $i1, $i2, $i3;
        java.lang.AssertionError $r7, $r22;
        java.util.TreeMap$Relation $r8, $r13, $r24, $r27;
        java.lang.Object $r9, $r16, $r25, $r31;
        java.util.TreeMap $r10, $r15, $r17, $r19, $r23, $r30, $r32, $r33;

        r0 := @this: java.util.TreeMap$BoundedMap;

        z0 := @parameter0: boolean;

        $z1 = r0.<java.util.TreeMap$BoundedMap: boolean ascending>;

        if $z1 != z0 goto label07;

        $r21 = <java.util.TreeMap$2: int[] $SwitchMap$java$util$TreeMap$Bound>;

        $r20 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $i2 = virtualinvoke $r20.<java.util.TreeMap$Bound: int ordinal()>();

        $i3 = $r21[$i2];

        tableswitch($i3)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label06;
            default: goto label01;
        };

     label01:
        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label02:
        $r30 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        r4 = $r30.<java.util.TreeMap: java.util.TreeMap$Node root>;

        r3 = null;

        if r4 != null goto label04;

     label03:
        $r29 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r28 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        $r26 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Node bound(java.util.TreeMap$Node,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>(r3, $r29, $r28);

        return $r26;

     label04:
        $r33 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r34 = $r33.<java.util.TreeMap: java.util.TreeMap$Node root>;

        r3 = virtualinvoke $r34.<java.util.TreeMap$Node: java.util.TreeMap$Node first()>();

        goto label03;

     label05:
        $r32 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r31 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        $r27 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CEILING>;

        r3 = virtualinvoke $r32.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>($r31, $r27);

        goto label03;

     label06:
        $r23 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r25 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        $r24 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation HIGHER>;

        r3 = virtualinvoke $r23.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>($r25, $r24);

        goto label03;

     label07:
        $r6 = <java.util.TreeMap$2: int[] $SwitchMap$java$util$TreeMap$Bound>;

        $r5 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        $i0 = virtualinvoke $r5.<java.util.TreeMap$Bound: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 1: goto label09;
            case 2: goto label12;
            case 3: goto label13;
            default: goto label08;
        };

     label08:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label09:
        $r17 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        r2 = $r17.<java.util.TreeMap: java.util.TreeMap$Node root>;

        r1 = null;

        if r2 != null goto label11;

     label10:
        $r11 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $r12 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r14 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Node bound(java.util.TreeMap$Node,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>(r1, $r11, $r12);

        return $r14;

     label11:
        $r19 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r18 = $r19.<java.util.TreeMap: java.util.TreeMap$Node root>;

        r1 = virtualinvoke $r18.<java.util.TreeMap$Node: java.util.TreeMap$Node last()>();

        goto label10;

     label12:
        $r15 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r16 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        $r13 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation FLOOR>;

        r1 = virtualinvoke $r15.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>($r16, $r13);

        goto label10;

     label13:
        $r10 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r9 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        $r8 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation LOWER>;

        r1 = virtualinvoke $r10.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>($r9, $r8);

        goto label10;
    }

    private java.util.Map$Entry findBounded(java.lang.Object, java.util.TreeMap$Relation)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, $r14, $r21;
        java.util.TreeMap$Relation r2, r3, $r12, $r19, $r20, $r26;
        java.util.TreeMap$Bound r4, r5, $r6, $r7, $r8, $r9, $r17, $r18, $r24, $r25;
        int i0, i1;
        boolean $z0;
        java.util.TreeMap $r10, $r15, $r22;
        java.util.TreeMap$Node $r11, $r13;
        java.util.Comparator $r16, $r23;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.TreeMap$Relation;

        $z0 = r0.<java.util.TreeMap$BoundedMap: boolean ascending>;

        r3 = virtualinvoke r2.<java.util.TreeMap$Relation: java.util.TreeMap$Relation forOrder(boolean)>($z0);

        r4 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        r5 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        $r7 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        $r6 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        if $r7 == $r6 goto label3;

        $r19 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation LOWER>;

        if r3 == $r19 goto label1;

        $r26 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation FLOOR>;

        if r3 != $r26 goto label3;

     label1:
        $r22 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r23 = $r22.<java.util.TreeMap: java.util.Comparator comparator>;

        $r21 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        i1 = interfaceinvoke $r23.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r21, r1);

        if i1 > 0 goto label2;

        r1 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        $r24 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        $r25 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        if $r24 != $r25 goto label7;

        r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation LOWER>;

     label2:
        r5 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

     label3:
        $r9 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $r8 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        if $r9 == $r8 goto label6;

        $r12 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CEILING>;

        if r3 == $r12 goto label4;

        $r20 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation HIGHER>;

        if r3 != $r20 goto label6;

     label4:
        $r15 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r16 = $r15.<java.util.TreeMap: java.util.Comparator comparator>;

        $r14 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        i0 = interfaceinvoke $r16.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r14, r1);

        if i0 < 0 goto label5;

        r1 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        $r17 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $r18 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        if $r17 != $r18 goto label8;

        r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation HIGHER>;

     label5:
        r4 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

     label6:
        $r10 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r11 = virtualinvoke $r10.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>(r1, r3);

        $r13 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Node bound(java.util.TreeMap$Node,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>($r11, r4, r5);

        return $r13;

     label7:
        if i1 >= 0 goto label2;

        r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation FLOOR>;

        goto label2;

     label8:
        if i0 <= 0 goto label5;

        r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CEILING>;

        goto label5;
    }

    private boolean isInBounds(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Bound $r2, $r3;
        boolean $z0;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $r2 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        $z0 = specialinvoke r0.<java.util.TreeMap$BoundedMap: boolean isInBounds(java.lang.Object,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>(r1, $r3, $r2);

        return $z0;
    }

    private boolean isInBounds(java.lang.Object, java.util.TreeMap$Bound, java.util.TreeMap$Bound)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, $r9, $r12, $r14, $r17;
        java.util.TreeMap$Bound r2, r3, $r4, $r5, $r6, $r7;
        java.util.TreeMap $r8, $r11, $r15, $r18;
        java.util.Comparator $r10, $r13, $r16, $r19;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.TreeMap$Bound;

        r3 := @parameter2: java.util.TreeMap$Bound;

        $r4 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

        if r2 != $r4 goto label2;

        $r18 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r19 = $r18.<java.util.TreeMap: java.util.Comparator comparator>;

        $r17 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        $i3 = interfaceinvoke $r19.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, $r17);

        if $i3 >= 0 goto label3;

     label1:
        return 0;

     label2:
        $r5 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        if r2 != $r5 goto label3;

        $r15 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r16 = $r15.<java.util.TreeMap: java.util.Comparator comparator>;

        $r14 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        $i2 = interfaceinvoke $r16.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, $r14);

        if $i2 <= 0 goto label1;

     label3:
        $r6 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

        if r3 != $r6 goto label5;

        $r11 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r13 = $r11.<java.util.TreeMap: java.util.Comparator comparator>;

        $r12 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        $i1 = interfaceinvoke $r13.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, $r12);

        if $i1 > 0 goto label1;

     label4:
        return 1;

     label5:
        $r7 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        if r3 != $r7 goto label4;

        $r8 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r10 = $r8.<java.util.TreeMap: java.util.Comparator comparator>;

        $r9 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        $i0 = interfaceinvoke $r10.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, $r9);

        if $i0 < 0 goto label4;

        return 0;
    }

    private java.lang.IllegalArgumentException outOfBounds(java.lang.Object, java.util.TreeMap$Bound, java.util.TreeMap$Bound)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, $r8, $r12;
        java.util.TreeMap$Bound r2, r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r14;
        java.lang.String $r9, $r13, $r15;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.TreeMap$Bound;

        r3 := @parameter2: java.util.TreeMap$Bound;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not in range ");

        $r8 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        $r9 = virtualinvoke r2.<java.util.TreeMap$Bound: java.lang.String leftCap(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $r12 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        $r13 = virtualinvoke r3.<java.util.TreeMap$Bound: java.lang.String rightCap(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        return $r4;
    }

    private java.util.NavigableMap subMap(java.lang.Object, java.util.TreeMap$Bound, java.lang.Object, java.util.TreeMap$Bound)
    {
        java.util.TreeMap$BoundedMap r0, $r15;
        java.lang.Object r1, r3, r7;
        java.util.TreeMap$Bound r2, r4, r5, r6, r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.util.TreeMap $r17;
        java.lang.IllegalArgumentException $r19, $r20;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.TreeMap$Bound;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.util.TreeMap$Bound;

        $z0 = r0.<java.util.TreeMap$BoundedMap: boolean ascending>;

        if $z0 != 0 goto label1;

        r7 = r1;

        r8 = r2;

        r1 = r3;

        r2 = r4;

        r3 = r7;

        r4 = r8;

     label1:
        $r9 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        if r2 != $r9 goto label4;

        r1 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        r2 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

     label2:
        $r12 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        if r4 != $r12 goto label7;

        r3 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        r4 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

     label3:
        $r15 = new java.util.TreeMap$BoundedMap;

        $r17 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $z3 = r0.<java.util.TreeMap$BoundedMap: boolean ascending>;

        specialinvoke $r15.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>($r17, $z3, r1, r2, r3, r4);

        return $r15;

     label4:
        $r10 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        if r2 != $r10 goto label6;

        r5 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

     label5:
        $r11 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        $z1 = specialinvoke r0.<java.util.TreeMap$BoundedMap: boolean isInBounds(java.lang.Object,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>(r1, r5, $r11);

        if $z1 != 0 goto label2;

        $r18 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        $r20 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.lang.IllegalArgumentException outOfBounds(java.lang.Object,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>(r3, r5, $r18);

        throw $r20;

     label6:
        r5 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        goto label5;

     label7:
        $r13 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        if r4 != $r13 goto label9;

        r6 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

     label8:
        $r14 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $z2 = specialinvoke r0.<java.util.TreeMap$BoundedMap: boolean isInBounds(java.lang.Object,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>(r3, $r14, r6);

        if $z2 != 0 goto label3;

        $r16 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $r19 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.lang.IllegalArgumentException outOfBounds(java.lang.Object,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>(r3, $r16, r6);

        throw $r19;

     label9:
        r6 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        goto label8;
    }

    public java.util.Map$Entry ceilingEntry(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Relation $r2;
        java.util.TreeMap $r3;
        java.util.Map$Entry $r4;
        java.util.AbstractMap$SimpleImmutableEntry $r5;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r2 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CEILING>;

        $r4 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.Map$Entry findBounded(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r2);

        $r5 = staticinvoke <java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry access$300(java.util.TreeMap,java.util.Map$Entry)>($r3, $r4);

        return $r5;
    }

    public java.lang.Object ceilingKey(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, $r4;
        java.util.Map$Entry r2;
        java.util.TreeMap$Relation $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CEILING>;

        r2 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.Map$Entry findBounded(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r3);

        if r2 == null goto label1;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r4;

     label1:
        return null;
    }

    public java.util.Comparator comparator()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.Comparator r1, $r3;
        java.util.TreeMap $r2;
        boolean $z0;

        r0 := @this: java.util.TreeMap$BoundedMap;

        $r2 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        r1 = virtualinvoke $r2.<java.util.TreeMap: java.util.Comparator comparator()>();

        $z0 = r0.<java.util.TreeMap$BoundedMap: boolean ascending>;

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)>(r1);

        return $r3;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.TreeMap$BoundedMap: boolean isInBounds(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $z1 = virtualinvoke $r2.<java.util.TreeMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.NavigableSet descendingKeySet()
    {
        java.util.TreeMap$BoundedMap r0, $r2;
        java.util.TreeMap r1;
        boolean z0, $z1;
        java.util.TreeMap$Bound $r3, $r5;
        java.lang.Object $r4, $r6;
        java.util.NavigableSet $r7;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $z1 = r0.<java.util.TreeMap$BoundedMap: boolean ascending>;

        if $z1 != 0 goto label2;

        z0 = 1;

     label1:
        $r2 = new java.util.TreeMap$BoundedMap;

        $r6 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        $r5 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $r4 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        $r3 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        specialinvoke $r2.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r1, z0, $r6, $r5, $r4, $r3);

        $r7 = virtualinvoke $r2.<java.util.TreeMap$BoundedMap: java.util.NavigableSet navigableKeySet()>();

        return $r7;

     label2:
        z0 = 0;

        goto label1;
    }

    public java.util.NavigableMap descendingMap()
    {
        java.util.TreeMap$BoundedMap r0, $r2;
        java.util.TreeMap r1;
        boolean z0, $z1;
        java.util.TreeMap$Bound $r3, $r5;
        java.lang.Object $r4, $r6;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $z1 = r0.<java.util.TreeMap$BoundedMap: boolean ascending>;

        if $z1 != 0 goto label2;

        z0 = 1;

     label1:
        $r2 = new java.util.TreeMap$BoundedMap;

        $r6 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        $r5 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $r4 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        $r3 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        specialinvoke $r2.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r1, z0, $r6, $r5, $r4, $r3);

        return $r2;

     label2:
        z0 = 0;

        goto label1;
    }

    public java.util.Set entrySet()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap$BoundedMap$BoundedEntrySet r1, r2, $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$BoundedMap$BoundedEntrySet entrySet>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.TreeMap$BoundedMap$BoundedEntrySet;

        specialinvoke $r3.<java.util.TreeMap$BoundedMap$BoundedEntrySet: void <init>(java.util.TreeMap$BoundedMap)>(r0);

        r2 = $r3;

        r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$BoundedMap$BoundedEntrySet entrySet> = r2;

        return r2;
    }

    public java.util.Map$Entry firstEntry()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap $r1;
        java.util.TreeMap$Node $r2;
        java.util.AbstractMap$SimpleImmutableEntry $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        $r1 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r2 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Node endpoint(boolean)>(1);

        $r3 = staticinvoke <java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry access$300(java.util.TreeMap,java.util.Map$Entry)>($r1, $r2);

        return $r3;
    }

    public java.lang.Object firstKey()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap$Node r1;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Node endpoint(boolean)>(1);

        if r1 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r2;
    }

    public java.util.Map$Entry floorEntry(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Relation $r2;
        java.util.TreeMap $r3;
        java.util.Map$Entry $r4;
        java.util.AbstractMap$SimpleImmutableEntry $r5;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r2 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation FLOOR>;

        $r4 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.Map$Entry findBounded(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r2);

        $r5 = staticinvoke <java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry access$300(java.util.TreeMap,java.util.Map$Entry)>($r3, $r4);

        return $r5;
    }

    public java.lang.Object floorKey(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, $r4;
        java.util.Map$Entry r2;
        java.util.TreeMap$Relation $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation FLOOR>;

        r2 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.Map$Entry findBounded(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r3);

        if r2 == null goto label1;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r4;

     label1:
        return null;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, $r3;
        boolean $z0;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.TreeMap$BoundedMap: boolean isInBounds(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;

     label1:
        return null;
    }

    public java.util.NavigableMap headMap(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Bound $r2, $r3;
        java.util.NavigableMap $r4;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r2 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        $r4 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.NavigableMap subMap(java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(null, $r3, r1, $r2);

        return $r4;
    }

    public java.util.NavigableMap headMap(java.lang.Object, boolean)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        boolean z0;
        java.util.TreeMap$Bound r2, $r3;
        java.util.NavigableMap $r4;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label2;

        r2 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

     label1:
        $r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r4 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.NavigableMap subMap(java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(null, $r3, r1, r2);

        return $r4;

     label2:
        r2 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        goto label1;
    }

    public volatile java.util.SortedMap headMap(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.TreeMap$BoundedMap: java.util.NavigableMap headMap(java.lang.Object)>(r1);

        return $r2;
    }

    public java.util.Map$Entry higherEntry(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Relation $r2;
        java.util.TreeMap $r3;
        java.util.Map$Entry $r4;
        java.util.AbstractMap$SimpleImmutableEntry $r5;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r2 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation HIGHER>;

        $r4 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.Map$Entry findBounded(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r2);

        $r5 = staticinvoke <java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry access$300(java.util.TreeMap,java.util.Map$Entry)>($r3, $r4);

        return $r5;
    }

    public java.lang.Object higherKey(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, $r4;
        java.util.Map$Entry r2;
        java.util.TreeMap$Relation $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation HIGHER>;

        r2 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.Map$Entry findBounded(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r3);

        if r2 == null goto label1;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r4;

     label1:
        return null;
    }

    public boolean isEmpty()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap$Node $r1;

        r0 := @this: java.util.TreeMap$BoundedMap;

        $r1 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Node endpoint(boolean)>(1);

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Set keySet()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.NavigableSet $r1;

        r0 := @this: java.util.TreeMap$BoundedMap;

        $r1 = virtualinvoke r0.<java.util.TreeMap$BoundedMap: java.util.NavigableSet navigableKeySet()>();

        return $r1;
    }

    public java.util.Map$Entry lastEntry()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap $r1;
        java.util.TreeMap$Node $r2;
        java.util.AbstractMap$SimpleImmutableEntry $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        $r1 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r2 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Node endpoint(boolean)>(0);

        $r3 = staticinvoke <java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry access$300(java.util.TreeMap,java.util.Map$Entry)>($r1, $r2);

        return $r3;
    }

    public java.lang.Object lastKey()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap$Node r1;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Node endpoint(boolean)>(0);

        if r1 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r2;
    }

    public java.util.Map$Entry lowerEntry(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Relation $r2;
        java.util.TreeMap $r3;
        java.util.Map$Entry $r4;
        java.util.AbstractMap$SimpleImmutableEntry $r5;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r2 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation LOWER>;

        $r4 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.Map$Entry findBounded(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r2);

        $r5 = staticinvoke <java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry access$300(java.util.TreeMap,java.util.Map$Entry)>($r3, $r4);

        return $r5;
    }

    public java.lang.Object lowerKey(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, $r4;
        java.util.Map$Entry r2;
        java.util.TreeMap$Relation $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation LOWER>;

        r2 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.Map$Entry findBounded(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r3);

        if r2 == null goto label1;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r4;

     label1:
        return null;
    }

    public java.util.NavigableSet navigableKeySet()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap$BoundedMap$BoundedKeySet r1, r2, $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$BoundedMap$BoundedKeySet keySet>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.TreeMap$BoundedMap$BoundedKeySet;

        specialinvoke $r3.<java.util.TreeMap$BoundedMap$BoundedKeySet: void <init>(java.util.TreeMap$BoundedMap)>(r0);

        r2 = $r3;

        r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$BoundedMap$BoundedKeySet keySet> = r2;

        return r2;
    }

    public java.util.Map$Entry pollFirstEntry()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap$Node r1;
        java.util.TreeMap $r2, $r4;
        java.util.AbstractMap$SimpleImmutableEntry $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Node endpoint(boolean)>(1);

        if r1 == null goto label1;

        $r4 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        virtualinvoke $r4.<java.util.TreeMap: void removeInternal(java.util.TreeMap$Node)>(r1);

     label1:
        $r2 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r3 = staticinvoke <java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry access$300(java.util.TreeMap,java.util.Map$Entry)>($r2, r1);

        return $r3;
    }

    public java.util.Map$Entry pollLastEntry()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.TreeMap$Node r1;
        java.util.TreeMap $r2, $r4;
        java.util.AbstractMap$SimpleImmutableEntry $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Node endpoint(boolean)>(0);

        if r1 == null goto label1;

        $r4 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        virtualinvoke $r4.<java.util.TreeMap: void removeInternal(java.util.TreeMap$Node)>(r1);

     label1:
        $r2 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r3 = staticinvoke <java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry access$300(java.util.TreeMap,java.util.Map$Entry)>($r2, r1);

        return $r3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, r2, $r4;
        boolean $z0;
        java.util.TreeMap $r3;
        java.util.TreeMap$Bound $r5, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.TreeMap$BoundedMap: boolean isInBounds(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r6 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $r5 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        $r7 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.lang.IllegalArgumentException outOfBounds(java.lang.Object,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>(r1, $r6, $r5);

        throw $r7;

     label1:
        $r3 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r4 = virtualinvoke $r3.<java.util.TreeMap: java.lang.Object putInternal(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, $r3;
        boolean $z0;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.TreeMap$BoundedMap: boolean isInBounds(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;

     label1:
        return null;
    }

    public int size()
    {
        java.util.TreeMap$BoundedMap r0;
        java.util.Set $r1;
        java.util.Iterator $r2;
        int $i0;

        r0 := @this: java.util.TreeMap$BoundedMap;

        $r1 = virtualinvoke r0.<java.util.TreeMap$BoundedMap: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        $i0 = staticinvoke <java.util.TreeMap: int count(java.util.Iterator)>($r2);

        return $i0;
    }

    public java.util.NavigableMap subMap(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, r2;
        java.util.TreeMap$Bound $r3, $r4;
        java.util.NavigableMap $r5;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

        $r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        $r5 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.NavigableMap subMap(java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r1, $r4, r2, $r3);

        return $r5;
    }

    public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.util.TreeMap$Bound r3, r4;
        java.util.NavigableMap $r5;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        if z0 == 0 goto label3;

        r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

     label1:
        if z1 == 0 goto label4;

        r4 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

     label2:
        $r5 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.NavigableMap subMap(java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r1, r3, r2, r4);

        return $r5;

     label3:
        r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        goto label1;

     label4:
        r4 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        goto label2;
    }

    public volatile java.util.SortedMap subMap(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1, r2;
        java.util.NavigableMap $r3;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.TreeMap$BoundedMap: java.util.NavigableMap subMap(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public java.util.NavigableMap tailMap(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Bound $r2, $r3;
        java.util.NavigableMap $r4;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

        $r2 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r4 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.NavigableMap subMap(java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r1, $r3, null, $r2);

        return $r4;
    }

    public java.util.NavigableMap tailMap(java.lang.Object, boolean)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        boolean z0;
        java.util.TreeMap$Bound r2, $r3;
        java.util.NavigableMap $r4;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label2;

        r2 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

     label1:
        $r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r4 = specialinvoke r0.<java.util.TreeMap$BoundedMap: java.util.NavigableMap subMap(java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r1, r2, null, $r3);

        return $r4;

     label2:
        r2 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        goto label1;
    }

    public volatile java.util.SortedMap tailMap(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap r0;
        java.lang.Object r1;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeMap$BoundedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.TreeMap$BoundedMap: java.util.NavigableMap tailMap(java.lang.Object)>(r1);

        return $r2;
    }

    java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        java.util.TreeMap$BoundedMap r0;
        boolean $z0;
        java.util.TreeMap$DescendingSubMap $r1;
        java.util.TreeMap$Bound $r2, $r4, $r8, $r10;
        java.lang.Object $r3, $r5, $r9, $r11;
        java.util.TreeMap $r6, $r12;
        java.util.TreeMap$AscendingSubMap $r7;

        r0 := @this: java.util.TreeMap$BoundedMap;

        $z0 = r0.<java.util.TreeMap$BoundedMap: boolean ascending>;

        if $z0 == 0 goto label1;

        $r7 = new java.util.TreeMap$AscendingSubMap;

        $r12 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r11 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        $r10 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $r9 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        $r8 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        specialinvoke $r7.<java.util.TreeMap$AscendingSubMap: void <init>(java.util.TreeMap,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>($r12, $r11, $r10, $r9, $r8);

        return $r7;

     label1:
        $r1 = new java.util.TreeMap$DescendingSubMap;

        $r6 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r5 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'from'>;

        $r4 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound fromBound>;

        $r3 = r0.<java.util.TreeMap$BoundedMap: java.lang.Object 'to'>;

        $r2 = r0.<java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound toBound>;

        specialinvoke $r1.<java.util.TreeMap$DescendingSubMap: void <init>(java.util.TreeMap,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>($r6, $r5, $r4, $r3, $r2);

        return $r1;
    }
}
