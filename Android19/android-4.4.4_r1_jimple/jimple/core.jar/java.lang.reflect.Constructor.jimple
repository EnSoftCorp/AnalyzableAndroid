public final class java.lang.reflect.Constructor extends java.lang.reflect.AccessibleObject implements java.lang.reflect.GenericDeclaration, java.lang.reflect.Member
{
    java.lang.Class declaringClass;
    java.lang.Class[] exceptionTypes;
    java.lang.reflect.TypeVariable[] formalTypeParameters;
    libcore.reflect.ListOfTypes genericExceptionTypes;
    libcore.reflect.ListOfTypes genericParameterTypes;
    private volatile boolean genericTypesAreInitialized;
    private int methodDexIndex;
    java.lang.Class[] parameterTypes;
    int slot;

    private void <init>()
    {
        java.lang.reflect.Constructor r0;

        r0 := @this: java.lang.reflect.Constructor;

        specialinvoke r0.<java.lang.reflect.AccessibleObject: void <init>()>();

        r0.<java.lang.reflect.Constructor: boolean genericTypesAreInitialized> = 0;

        return;
    }

    private void <init>(java.lang.Class, java.lang.Class[], java.lang.Class[], int, int)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class r1;
        java.lang.Class[] r2, r3;
        int i0, i1;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class[];

        r3 := @parameter2: java.lang.Class[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.reflect.AccessibleObject: void <init>()>();

        r0.<java.lang.reflect.Constructor: boolean genericTypesAreInitialized> = 0;

        r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass> = r1;

        r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes> = r2;

        r0.<java.lang.reflect.Constructor: java.lang.Class[] exceptionTypes> = r3;

        r0.<java.lang.reflect.Constructor: int slot> = i0;

        r0.<java.lang.reflect.Constructor: int methodDexIndex> = i1;

        return;
    }

    private native java.lang.Object constructNative(java.lang.Object[], java.lang.Class, java.lang.Class[], int, boolean) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException;

    private java.lang.String getSignature()
    {
        java.lang.reflect.Constructor r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1;
        java.lang.Class[] $r4, $r7;
        java.lang.String $r6, $r9;
        java.lang.Class $r8;

        r0 := @this: java.lang.reflect.Constructor;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        i0 = 0;

     label1:
        $r4 = r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label2;

        $r7 = r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;

        $r8 = $r7[i0];

        $r9 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.String getSignature(java.lang.Class)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        i0 = i0 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")V");

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void initGenericTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Throwable r1, $r11;
        java.lang.String r2;
        libcore.reflect.GenericSignatureParser r3, $r4;
        boolean $z0;
        java.lang.Class $r5;
        java.lang.ClassLoader $r6;
        java.lang.Class[] $r7;
        java.lang.reflect.TypeVariable[] $r8;
        libcore.reflect.ListOfTypes $r9, $r10;

        r0 := @this: java.lang.reflect.Constructor;

        entermonitor r0;

     label1:
        $z0 = r0.<java.lang.reflect.Constructor: boolean genericTypesAreInitialized>;

        if $z0 != 0 goto label2;

        r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.String getSignatureAttribute()>();

        $r4 = new libcore.reflect.GenericSignatureParser;

        $r5 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r4.<libcore.reflect.GenericSignatureParser: void <init>(java.lang.ClassLoader)>($r6);

        r3 = $r4;

        $r7 = r0.<java.lang.reflect.Constructor: java.lang.Class[] exceptionTypes>;

        virtualinvoke r3.<libcore.reflect.GenericSignatureParser: void parseForConstructor(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.Class[])>(r0, r2, $r7);

        $r8 = r3.<libcore.reflect.GenericSignatureParser: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        r0.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] formalTypeParameters> = $r8;

        $r9 = r3.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes parameterTypes>;

        r0.<java.lang.reflect.Constructor: libcore.reflect.ListOfTypes genericParameterTypes> = $r9;

        $r10 = r3.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes exceptionTypes>;

        r0.<java.lang.reflect.Constructor: libcore.reflect.ListOfTypes genericExceptionTypes> = $r10;

        r0.<java.lang.reflect.Constructor: boolean genericTypesAreInitialized> = 1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r11 := @caughtexception;

        r1 = $r11;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r3;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.reflect.Constructor;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.String toString()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class r1, $r2;
        int $i0;
        java.lang.annotation.Annotation $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("annotationType == null");

        throw $r4;

     label1:
        $r2 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Constructor: int slot>;

        $r3 = staticinvoke <java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class,int,java.lang.Class)>($r2, $i0, r1);

        return $r3;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.reflect.Constructor r0;
        int $i0;
        java.lang.Class $r1;
        java.lang.annotation.Annotation[] $r2;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Constructor: int slot>;

        $r2 = staticinvoke <java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations(java.lang.Class,int)>($r1, $i0);

        return $r2;
    }

    public java.lang.Class getDeclaringClass()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        return $r1;
    }

    public int getDexMethodIndex()
    {
        java.lang.reflect.Constructor r0;
        int $i0;

        r0 := @this: java.lang.reflect.Constructor;

        $i0 = r0.<java.lang.reflect.Constructor: int methodDexIndex>;

        return $i0;
    }

    public java.lang.Class[] getExceptionTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class[] $r1, $r2, $r4, $r5;
        java.lang.Object $r3;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class[] exceptionTypes>;

        if $r1 != null goto label1;

        $r5 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

        return $r5;

     label1:
        $r2 = r0.<java.lang.reflect.Constructor: java.lang.Class[] exceptionTypes>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.Class[]) $r3;

        return $r4;
    }

    public java.lang.reflect.Type[] getGenericExceptionTypes()
    {
        java.lang.reflect.Constructor r0;
        libcore.reflect.ListOfTypes $r1;
        java.lang.reflect.Type[] $r2;

        r0 := @this: java.lang.reflect.Constructor;

        specialinvoke r0.<java.lang.reflect.Constructor: void initGenericTypes()>();

        $r1 = r0.<java.lang.reflect.Constructor: libcore.reflect.ListOfTypes genericExceptionTypes>;

        $r2 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type[] getTypeArray(libcore.reflect.ListOfTypes,boolean)>($r1, 1);

        return $r2;
    }

    public java.lang.reflect.Type[] getGenericParameterTypes()
    {
        java.lang.reflect.Constructor r0;
        libcore.reflect.ListOfTypes $r1;
        java.lang.reflect.Type[] $r2;

        r0 := @this: java.lang.reflect.Constructor;

        specialinvoke r0.<java.lang.reflect.Constructor: void initGenericTypes()>();

        $r1 = r0.<java.lang.reflect.Constructor: libcore.reflect.ListOfTypes genericParameterTypes>;

        $r2 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type[] getTypeArray(libcore.reflect.ListOfTypes,boolean)>($r1, 1);

        return $r2;
    }

    public int getModifiers()
    {
        java.lang.reflect.Constructor r0;
        int $i0, $i1;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Constructor: int slot>;

        $i1 = staticinvoke <java.lang.reflect.Method: int getMethodModifiers(java.lang.Class,int)>($r1, $i0);

        return $i1;
    }

    public java.lang.String getName()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.annotation.Annotation[][] getParameterAnnotations()
    {
        java.lang.reflect.Constructor r0;
        java.lang.annotation.Annotation[][] r1;
        int $i0, $i1, $i2;
        java.lang.Class $r2;
        java.lang.Class[] $r3;

        r0 := @this: java.lang.reflect.Constructor;

        $r2 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Constructor: int slot>;

        r1 = staticinvoke <java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations(java.lang.Class,int)>($r2, $i0);

        $i1 = lengthof r1;

        if $i1 != 0 goto label1;

        $r3 = r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;

        $i2 = lengthof $r3;

        r1 = staticinvoke <java.lang.reflect.Method: java.lang.annotation.Annotation[][] noAnnotations(int)>($i2);

     label1:
        return r1;
    }

    public java.lang.Class[] getParameterTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.Class[]) $r2;

        return $r3;
    }

    java.lang.String getSignatureAttribute()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Object[] r1;
        int $i0;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: java.lang.reflect.Constructor;

        $r2 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Constructor: int slot>;

        r1 = staticinvoke <java.lang.reflect.Method: java.lang.Object[] getSignatureAnnotation(java.lang.Class,int)>($r2, $i0);

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.apache.harmony.kernel.vm.StringUtils: java.lang.String combineStrings(java.lang.Object[])>(r1);

        return $r3;
    }

    public java.lang.reflect.TypeVariable[] getTypeParameters()
    {
        java.lang.reflect.Constructor r0;
        java.lang.reflect.TypeVariable[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.lang.reflect.Constructor;

        specialinvoke r0.<java.lang.reflect.Constructor: void initGenericTypes()>();

        $r1 = r0.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.reflect.TypeVariable[]) $r2;

        return $r3;
    }

    public int hashCode()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class r1, $r2;
        int $i0;
        boolean $z0;
        java.lang.NullPointerException $r3;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("annotationType == null");

        throw $r3;

     label1:
        $r2 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Constructor: int slot>;

        $z0 = staticinvoke <java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class,int,java.lang.Class)>($r2, $i0, r1);

        return $z0;
    }

    public boolean isSynthetic()
    {
        java.lang.reflect.Constructor r0;
        int $i0, $i1, $i2;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Constructor: int slot>;

        $i1 = staticinvoke <java.lang.reflect.Method: int getMethodModifiers(java.lang.Class,int)>($r1, $i0);

        $i2 = 4096 & $i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isVarArgs()
    {
        java.lang.reflect.Constructor r0;
        int $i0, $i1, $i2;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Constructor;

        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.Constructor: int slot>;

        $i1 = staticinvoke <java.lang.reflect.Method: int getMethodModifiers(java.lang.Class,int)>($r1, $i0);

        $i2 = 128 & $i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public transient java.lang.Object newInstance(java.lang.Object[]) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    {
        java.lang.reflect.Constructor r0;
        java.lang.Object[] r1;
        boolean $z0;
        int $i0;
        java.lang.Class[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;

        r0 := @this: java.lang.reflect.Constructor;

        r1 := @parameter0: java.lang.Object[];

        $r3 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $r2 = r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;

        $i0 = r0.<java.lang.reflect.Constructor: int slot>;

        $z0 = r0.<java.lang.reflect.Constructor: boolean flag>;

        $r4 = specialinvoke r0.<java.lang.reflect.Constructor: java.lang.Object constructNative(java.lang.Object[],java.lang.Class,java.lang.Class[],int,boolean)>(r1, $r3, $r2, $i0, $z0);

        return $r4;
    }

    public java.lang.String toGenericString()
    {
        java.lang.reflect.Constructor r0;
        java.lang.StringBuilder r1, $r3, $r22;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.reflect.Type[] r2, $r8;
        java.lang.reflect.TypeVariable[] $r4, $r13, $r14, $r18, $r19;
        java.lang.Class $r5;
        libcore.reflect.ListOfTypes $r7, $r9;
        java.lang.String $r12, $r20;
        java.lang.reflect.TypeVariable $r17;

        r0 := @this: java.lang.reflect.Constructor;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(80);

        r1 = $r3;

        specialinvoke r0.<java.lang.reflect.Constructor: void initGenericTypes()>();

        i0 = virtualinvoke r0.<java.lang.reflect.Constructor: int getModifiers()>();

        if i0 == 0 goto label1;

        $i6 = i0 & -129;

        $r20 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>($i6);

        $r22 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label1:
        $r4 = r0.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        if $r4 == null goto label5;

        $r13 = r0.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        $i3 = lengthof $r13;

        if $i3 <= 0 goto label5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        i1 = 0;

     label2:
        $r14 = r0.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        $i4 = lengthof $r14;

        if i1 >= $i4 goto label4;

        $r18 = r0.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        $r17 = $r18[i1];

        virtualinvoke r0.<java.lang.reflect.Constructor: void appendGenericType(java.lang.StringBuilder,java.lang.reflect.Type)>(r1, $r17);

        $r19 = r0.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        $i5 = lengthof $r19;

        $i7 = -1 + $i5;

        if i1 >= $i7 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> ");

     label5:
        $r5 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        virtualinvoke r0.<java.lang.reflect.Constructor: void appendTypeName(java.lang.StringBuilder,java.lang.Class)>(r1, $r5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r7 = r0.<java.lang.reflect.Constructor: libcore.reflect.ListOfTypes genericParameterTypes>;

        $r8 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type[] getTypeArray(libcore.reflect.ListOfTypes,boolean)>($r7, 0);

        virtualinvoke r0.<java.lang.reflect.Constructor: void appendArrayGenericType(java.lang.StringBuilder,java.lang.reflect.Type[])>(r1, $r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r9 = r0.<java.lang.reflect.Constructor: libcore.reflect.ListOfTypes genericExceptionTypes>;

        r2 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type[] getTypeArray(libcore.reflect.ListOfTypes,boolean)>($r9, 0);

        $i2 = lengthof r2;

        if $i2 <= 0 goto label6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" throws ");

        virtualinvoke r0.<java.lang.reflect.Constructor: void appendArrayGenericType(java.lang.StringBuilder,java.lang.reflect.Type[])>(r1, r2);

     label6:
        $r12 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public java.lang.String toString()
    {
        java.lang.reflect.Constructor r0;
        java.lang.StringBuilder r1, $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r5, $r9, $r13, $r18;
        java.lang.Class $r4;
        java.lang.Class[] $r8, $r12, $r14, $r15;

        r0 := @this: java.lang.reflect.Constructor;

        $r2 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<java.lang.reflect.Constructor: int getModifiers()>();

        $r3 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>($i0);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        r1 = $r2;

        $i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i1 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label1:
        $r4 = r0.<java.lang.reflect.Constructor: java.lang.Class declaringClass>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r8 = r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;

        $r9 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.String toString(java.lang.Class[])>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = r0.<java.lang.reflect.Constructor: java.lang.Class[] exceptionTypes>;

        if $r12 == null goto label2;

        $r14 = r0.<java.lang.reflect.Constructor: java.lang.Class[] exceptionTypes>;

        $i2 = lengthof $r14;

        if $i2 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" throws ");

        $r15 = r0.<java.lang.reflect.Constructor: java.lang.Class[] exceptionTypes>;

        $r18 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.String toString(java.lang.Class[])>($r15);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

     label2:
        $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }
}
