public class java.util.logging.XMLFormatter extends java.util.logging.Formatter
{
    private static final java.lang.String indent;

    public void <init>()
    {
        java.util.logging.XMLFormatter r0;

        r0 := @this: java.util.logging.XMLFormatter;

        specialinvoke r0.<java.util.logging.Formatter: void <init>()>();

        return;
    }

    private static void append(java.lang.StringBuilder, int, java.lang.String, java.lang.Object)
    {
        java.lang.StringBuilder r0, $r3, $r4, $r7, $r8;
        int i0, i1;
        java.lang.String r1, $r10;
        java.lang.Object r2;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r10 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        return;
    }

    private void formatMessages(java.util.logging.LogRecord, java.lang.StringBuilder)
    {
        java.util.logging.XMLFormatter r0;
        java.util.logging.LogRecord r1;
        java.lang.StringBuilder r2, $r8;
        java.util.ResourceBundle r3;
        java.lang.String r4, r6, r7, $r11;
        java.lang.Exception $r10;

        r0 := @this: java.util.logging.XMLFormatter;

        r1 := @parameter0: java.util.logging.LogRecord;

        r2 := @parameter1: java.lang.StringBuilder;

        r3 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>();

        r4 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getMessage()>();

        if r3 == null goto label6;

        if r4 == null goto label6;

     label1:
        r7 = virtualinvoke r3.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r4);

     label2:
        r6 = r7;

     label3:
        if r6 != null goto label5;

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r2, 1, "message", r4);

        return;

     label4:
        $r10 := @caughtexception;

        r6 = null;

        goto label3;

     label5:
        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r2, 1, "message", r6);

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r2, 1, "key", r4);

        $r11 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getResourceBundleName()>();

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r2, 1, "catalog", $r11);

        return;

     label6:
        if r4 == null goto label7;

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r2, 1, "message", r4);

        return;

     label7:
        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<message/>");

        return;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    private void formatThrowable(java.util.logging.LogRecord, java.lang.StringBuilder)
    {
        java.util.logging.XMLFormatter r0;
        java.util.logging.LogRecord r1;
        java.lang.StringBuilder r2, $r7, $r8, $r11, $r12, $r13, $r15, $r16, $r20, $r21, $r23;
        java.lang.Throwable r3;
        java.lang.String r4, $r10, $r18, $r19;
        java.lang.StackTraceElement[] r5;
        int i0, i1, $i2;
        java.lang.StackTraceElement r6;
        java.lang.Integer $r22;

        r0 := @this: java.util.logging.XMLFormatter;

        r1 := @parameter0: java.util.logging.LogRecord;

        r2 := @parameter1: java.lang.StringBuilder;

        r3 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.Throwable getThrown()>();

        if r3 == null goto label3;

        r4 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<exception>");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r10 = virtualinvoke r3.<java.lang.Throwable: java.lang.String toString()>();

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r2, 2, "message", $r10);

        r5 = virtualinvoke r3.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = lengthof r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r6 = r5[i1];

        $r13 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<frame>");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r18 = virtualinvoke r6.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r2, 3, "class", $r18);

        $r19 = virtualinvoke r6.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r2, 3, "method", $r19);

        $i2 = virtualinvoke r6.<java.lang.StackTraceElement: int getLineNumber()>();

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r2, 3, "line", $r22);

        $r23 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</frame>");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</exception>");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

     label3:
        return;
    }

    public java.lang.String format(java.util.logging.LogRecord)
    {
        java.util.logging.XMLFormatter r0;
        java.util.logging.LogRecord r1;
        long l0, $l3;
        java.lang.Object[] r2, r6;
        java.lang.String r3, r4, $r13, $r15, $r16, $r17, $r19, $r23, $r24, $r25;
        java.lang.StringBuilder r5, $r8, $r9, $r21;
        int i1, i2, $i4;
        java.util.Date $r7;
        java.lang.Long $r11, $r12;
        java.util.logging.Level $r14;
        java.lang.Integer $r18;
        java.lang.Object $r20;

        r0 := @this: java.util.logging.XMLFormatter;

        r1 := @parameter0: java.util.logging.LogRecord;

        l0 = virtualinvoke r1.<java.util.logging.LogRecord: long getMillis()>();

        r2 = newarray (java.lang.Object)[1];

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>(long)>(l0);

        r2[0] = $r7;

        r3 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("{0, date} {0, time}", r2);

        r4 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r5 = $r9;

        $r8 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<record>");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r5, 1, "date", r3);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r5, 1, "millis", $r11);

        $l3 = virtualinvoke r1.<java.util.logging.LogRecord: long getSequenceNumber()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r5, 1, "sequence", $r12);

        $r13 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getLoggerName()>();

        if $r13 == null goto label1;

        $r25 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getLoggerName()>();

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r5, 1, "logger", $r25);

     label1:
        $r14 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();

        $r16 = virtualinvoke $r14.<java.util.logging.Level: java.lang.String getName()>();

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r5, 1, "level", $r16);

        $r17 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getSourceClassName()>();

        if $r17 == null goto label2;

        $r24 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getSourceClassName()>();

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r5, 1, "class", $r24);

     label2:
        $r15 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getSourceMethodName()>();

        if $r15 == null goto label3;

        $r23 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getSourceMethodName()>();

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r5, 1, "method", $r23);

     label3:
        $i4 = virtualinvoke r1.<java.util.logging.LogRecord: int getThreadID()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r5, 1, "thread", $r18);

        specialinvoke r0.<java.util.logging.XMLFormatter: void formatMessages(java.util.logging.LogRecord,java.lang.StringBuilder)>(r1, r5);

        r6 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.Object[] getParameters()>();

        if r6 == null goto label5;

        i1 = lengthof r6;

        i2 = 0;

     label4:
        if i2 >= i1 goto label5;

        $r20 = r6[i2];

        staticinvoke <java.util.logging.XMLFormatter: void append(java.lang.StringBuilder,int,java.lang.String,java.lang.Object)>(r5, 1, "param", $r20);

        i2 = i2 + 1;

        goto label4;

     label5:
        specialinvoke r0.<java.util.logging.XMLFormatter: void formatThrowable(java.util.logging.LogRecord,java.lang.StringBuilder)>(r1, r5);

        $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</record>");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r19 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;
    }

    public java.lang.String getHead(java.util.logging.Handler)
    {
        java.util.logging.XMLFormatter r0;
        java.util.logging.Handler r1;
        java.lang.String r2, $r8, $r11, $r14;
        java.lang.StringBuilder r3, $r4, $r5, $r6;

        r0 := @this: java.util.logging.XMLFormatter;

        r1 := @parameter0: java.util.logging.Handler;

        r2 = null;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<java.util.logging.Handler: java.lang.String getEncoding()>();

     label1:
        if r2 != null goto label2;

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("file.encoding");

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r3 = $r4;

        $r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<?xml version=\"1.0\" encoding=\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" standalone=\"no\"?>");

        $r8 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<!DOCTYPE log SYSTEM \"logger.dtd\">");

        $r11 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<log>");

        $r14 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public java.lang.String getTail(java.util.logging.Handler)
    {
        java.util.logging.XMLFormatter r0;
        java.util.logging.Handler r1;

        r0 := @this: java.util.logging.XMLFormatter;

        r1 := @parameter0: java.util.logging.Handler;

        return "</log>";
    }

    public static void <clinit>()
    {
        <java.util.logging.XMLFormatter: java.lang.String indent> = "    ";

        return;
    }
}
