final class java.util.concurrent.locks.ReentrantLock$NonfairSync extends java.util.concurrent.locks.ReentrantLock$Sync
{
    private static final long serialVersionUID;

    void <init>()
    {
        java.util.concurrent.locks.ReentrantLock$NonfairSync r0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock$NonfairSync;

        specialinvoke r0.<java.util.concurrent.locks.ReentrantLock$Sync: void <init>()>();

        return;
    }

    final void lock()
    {
        java.util.concurrent.locks.ReentrantLock$NonfairSync r0;
        boolean $z0;
        java.lang.Thread $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantLock$NonfairSync;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock$NonfairSync: boolean compareAndSetState(int,int)>(0, 1);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock$NonfairSync: void setExclusiveOwnerThread(java.lang.Thread)>($r1);

        return;

     label1:
        virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock$NonfairSync: void acquire(int)>(1);

        return;
    }

    protected final boolean tryAcquire(int)
    {
        java.util.concurrent.locks.ReentrantLock$NonfairSync r0;
        int i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock$NonfairSync;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock$NonfairSync: boolean nonfairTryAcquire(int)>(i0);

        return $z0;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.locks.ReentrantLock$NonfairSync: long serialVersionUID> = 7316153563782823691L;

        return;
    }
}
