final class java.util.concurrent.ConcurrentSkipListMap$SubMap extends java.util.AbstractMap implements java.util.concurrent.ConcurrentNavigableMap, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.util.Set entrySetView;
    private final java.lang.Object hi;
    private final boolean hiInclusive;
    private final boolean isDescending;
    private transient java.util.concurrent.ConcurrentSkipListMap$KeySet keySetView;
    private final java.lang.Object lo;
    private final boolean loInclusive;
    private final java.util.concurrent.ConcurrentSkipListMap m;
    private transient java.util.Collection valuesView;

    void <init>(java.util.concurrent.ConcurrentSkipListMap, java.lang.Object, boolean, java.lang.Object, boolean, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap r1;
        java.lang.Object r2, r3;
        boolean z0, z1, z2;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap;

        r2 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.Object;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        if r2 == null goto label1;

        if r3 == null goto label1;

        $i0 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap: int compare(java.lang.Object,java.lang.Object)>(r2, r3);

        if $i0 <= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inconsistent range");

        throw $r4;

     label1:
        r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m> = r1;

        r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lo> = r2;

        r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi> = r3;

        r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean loInclusive> = z0;

        r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean hiInclusive> = z1;

        r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending> = z2;

        return;
    }

    static boolean access$100(java.util.concurrent.ConcurrentSkipListMap$SubMap)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        return $z0;
    }

    static java.util.concurrent.ConcurrentSkipListMap$Node access$200(java.util.concurrent.ConcurrentSkipListMap$SubMap)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node $r1;

        r0 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node hiNode()>();

        return $r1;
    }

    static java.util.concurrent.ConcurrentSkipListMap$Node access$300(java.util.concurrent.ConcurrentSkipListMap$SubMap)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node $r1;

        r0 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node loNode()>();

        return $r1;
    }

    static boolean access$400(java.util.concurrent.ConcurrentSkipListMap$SubMap, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>(r1);

        return $z0;
    }

    static boolean access$500(java.util.concurrent.ConcurrentSkipListMap$SubMap, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooHigh(java.lang.Object)>(r1);

        return $z0;
    }

    static java.util.concurrent.ConcurrentSkipListMap access$600(java.util.concurrent.ConcurrentSkipListMap$SubMap)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap $r1;

        r0 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        return $r1;
    }

    static boolean access$700(java.util.concurrent.ConcurrentSkipListMap$SubMap, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooLow(java.lang.Object)>(r1);

        return $z0;
    }

    private void checkKeyBounds(java.lang.Object) throws java.lang.IllegalArgumentException
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key out of range");

        throw $r2;

     label2:
        return;
    }

    private java.util.Map$Entry getNearEntry(java.lang.Object, int)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, r3, r4, $r6;
        int i0, $i1, $i2, $i3;
        java.util.concurrent.ConcurrentSkipListMap$Node r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.ConcurrentSkipListMap $r5;
        java.util.AbstractMap$SimpleImmutableEntry $r7;
        java.util.Map$Entry $r8, $r9;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        if $z0 == 0 goto label1;

        $i3 = i0 & 2;

        if $i3 != 0 goto label3;

        i0 = i0 | 2;

     label1:
        $z1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooLow(java.lang.Object)>(r1);

        if $z1 == 0 goto label5;

        $i2 = i0 & 2;

        if $i2 == 0 goto label4;

     label2:
        return null;

     label3:
        i0 = i0 & -3;

        goto label1;

     label4:
        $r9 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry lowestEntry()>();

        return $r9;

     label5:
        $z2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooHigh(java.lang.Object)>(r1);

        if $z2 == 0 goto label6;

        $i1 = i0 & 2;

        if $i1 == 0 goto label2;

        $r8 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry highestEntry()>();

        return $r8;

     label6:
        $r5 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        r2 = virtualinvoke $r5.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object,int)>(r1, i0);

        if r2 == null goto label2;

        $r6 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        $z3 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>($r6);

        if $z3 == 0 goto label2;

        r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        r4 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object getValidValue()>();

        if r4 == null goto label6;

        $r7 = new java.util.AbstractMap$SimpleImmutableEntry;

        specialinvoke $r7.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(r3, r4);

        return $r7;
    }

    private java.lang.Object getNearKey(java.lang.Object, int)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, r3, r5, $r8, $r9;
        int i0, $i1, $i2, $i3;
        java.util.concurrent.ConcurrentSkipListMap$Node r2, r4, r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.concurrent.ConcurrentSkipListMap $r7;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        if $z0 == 0 goto label1;

        $i3 = i0 & 2;

        if $i3 != 0 goto label3;

        i0 = i0 | 2;

     label1:
        $z1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooLow(java.lang.Object)>(r1);

        if $z1 == 0 goto label5;

        $i2 = i0 & 2;

        if $i2 != 0 goto label4;

        r6 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node loNode()>();

        $z5 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isBeforeEnd(java.util.concurrent.ConcurrentSkipListMap$Node)>(r6);

        if $z5 == 0 goto label4;

        r5 = r6.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

     label2:
        return r5;

     label3:
        i0 = i0 & -3;

        goto label1;

     label4:
        return null;

     label5:
        $z2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooHigh(java.lang.Object)>(r1);

        if $z2 == 0 goto label7;

        $i1 = i0 & 2;

        if $i1 == 0 goto label6;

        r4 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node hiNode()>();

        if r4 == null goto label6;

        r5 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        $z4 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>(r5);

        if $z4 != 0 goto label2;

     label6:
        return null;

     label7:
        $r7 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        r2 = virtualinvoke $r7.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object,int)>(r1, i0);

        if r2 == null goto label8;

        $r8 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        $z3 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>($r8);

        if $z3 != 0 goto label9;

     label8:
        return null;

     label9:
        r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        $r9 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object getValidValue()>();

        if $r9 == null goto label7;

        return r3;
    }

    private java.util.concurrent.ConcurrentSkipListMap$Node hiNode()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object $r1, $r2, $r5;
        boolean $z0;
        java.util.concurrent.ConcurrentSkipListMap $r3, $r6, $r8;
        java.util.concurrent.ConcurrentSkipListMap$Node $r4, $r7, $r9;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi>;

        if $r1 != null goto label1;

        $r8 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findLast()>();

        return $r9;

     label1:
        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean hiInclusive>;

        if $z0 == 0 goto label2;

        $r6 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r5 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object,int)>($r5, 3);

        return $r7;

     label2:
        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object,int)>($r2, 2);

        return $r4;
    }

    private java.util.Map$Entry highestEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.util.AbstractMap$SimpleImmutableEntry r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

     label1:
        r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node hiNode()>();

        if r1 == null goto label2;

        $r3 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

     label2:
        return null;

     label3:
        r2 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.AbstractMap$SimpleImmutableEntry createSnapshot()>();

        if r2 == null goto label1;

        return r2;
    }

    private java.lang.Object highestKey()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.lang.Object r2;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node hiNode()>();

        if r1 == null goto label1;

        r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;
    }

    private boolean inBounds(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooLow(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean tooHigh(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isBeforeEnd(java.util.concurrent.ConcurrentSkipListMap$Node)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.lang.Object r2, $r3, $r4;
        int i0;
        java.util.concurrent.ConcurrentSkipListMap $r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Node;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi>;

        if $r3 != null goto label3;

        return 1;

     label3:
        r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        if r2 != null goto label4;

        return 1;

     label4:
        $r5 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r4 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi>;

        i0 = virtualinvoke $r5.<java.util.concurrent.ConcurrentSkipListMap: int compare(java.lang.Object,java.lang.Object)>(r2, $r4);

        if i0 > 0 goto label1;

        if i0 != 0 goto label5;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean hiInclusive>;

        if $z0 == 0 goto label1;

     label5:
        return 1;
    }

    private java.util.concurrent.ConcurrentSkipListMap$Node loNode()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object $r1, $r2, $r5;
        boolean $z0;
        java.util.concurrent.ConcurrentSkipListMap $r3, $r6, $r8;
        java.util.concurrent.ConcurrentSkipListMap$Node $r4, $r7, $r9;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lo>;

        if $r1 != null goto label1;

        $r8 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>();

        return $r9;

     label1:
        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean loInclusive>;

        if $z0 == 0 goto label2;

        $r6 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r5 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lo>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object,int)>($r5, 1);

        return $r7;

     label2:
        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lo>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object,int)>($r2, 0);

        return $r4;
    }

    private java.util.Map$Entry lowestEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.util.AbstractMap$SimpleImmutableEntry r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

     label1:
        r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node loNode()>();

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isBeforeEnd(java.util.concurrent.ConcurrentSkipListMap$Node)>(r1);

        if $z0 != 0 goto label2;

        return null;

     label2:
        r2 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.AbstractMap$SimpleImmutableEntry createSnapshot()>();

        if r2 == null goto label1;

        return r2;
    }

    private java.lang.Object lowestKey()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        boolean $z0;
        java.util.NoSuchElementException $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node loNode()>();

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isBeforeEnd(java.util.concurrent.ConcurrentSkipListMap$Node)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        return $r3;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }

    private java.util.concurrent.ConcurrentSkipListMap$SubMap newSubMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r7;
        java.lang.Object r1, r2, r4, $r5, $r6, $r8, $r12;
        boolean z0, z1, z2, z3, $z4, $z5, $z6;
        java.util.concurrent.ConcurrentSkipListMap r3, $r9, $r11;
        int i0, i1;
        java.lang.IllegalArgumentException $r10, $r13;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $z4 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        if $z4 == 0 goto label1;

        r4 = r1;

        r1 = r2;

        r2 = r4;

        z3 = z0;

        z0 = z1;

        z1 = z3;

     label1:
        $r5 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lo>;

        if $r5 == null goto label2;

        if r1 != null goto label4;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lo>;

        z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean loInclusive>;

     label2:
        $r6 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi>;

        if $r6 == null goto label3;

        if r2 != null goto label6;

        r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi>;

        z1 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean hiInclusive>;

     label3:
        r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        z2 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        $r7 = new java.util.concurrent.ConcurrentSkipListMap$SubMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>(r3, r1, z0, r2, z1, z2);

        return $r7;

     label4:
        $r11 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r12 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lo>;

        i1 = virtualinvoke $r11.<java.util.concurrent.ConcurrentSkipListMap: int compare(java.lang.Object,java.lang.Object)>(r1, $r12);

        if i1 < 0 goto label5;

        if i1 != 0 goto label2;

        $z6 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean loInclusive>;

        if $z6 != 0 goto label2;

        if z0 == 0 goto label2;

     label5:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key out of range");

        throw $r13;

     label6:
        $r9 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r8 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi>;

        i0 = virtualinvoke $r9.<java.util.concurrent.ConcurrentSkipListMap: int compare(java.lang.Object,java.lang.Object)>(r2, $r8);

        if i0 > 0 goto label7;

        if i0 != 0 goto label3;

        $z5 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean hiInclusive>;

        if $z5 != 0 goto label3;

        if z1 == 0 goto label3;

     label7:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key out of range");

        throw $r10;
    }

    private java.util.Map$Entry removeHighest()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.lang.Object r2, r3;
        boolean $z0;
        java.util.concurrent.ConcurrentSkipListMap $r4;
        java.util.AbstractMap$SimpleImmutableEntry $r5;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

     label1:
        r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node hiNode()>();

        if r1 != null goto label3;

     label2:
        return null;

     label3:
        r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r4 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        r3 = virtualinvoke $r4.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object doRemove(java.lang.Object,java.lang.Object)>(r2, null);

        if r3 == null goto label1;

        $r5 = new java.util.AbstractMap$SimpleImmutableEntry;

        specialinvoke $r5.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(r2, r3);

        return $r5;
    }

    private java.util.Map$Entry removeLowest()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.lang.Object r2, r3;
        boolean $z0;
        java.util.concurrent.ConcurrentSkipListMap $r4;
        java.util.AbstractMap$SimpleImmutableEntry $r5;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

     label1:
        r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node loNode()>();

        if r1 != null goto label3;

     label2:
        return null;

     label3:
        r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r4 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        r3 = virtualinvoke $r4.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object doRemove(java.lang.Object,java.lang.Object)>(r2, null);

        if r3 == null goto label1;

        $r5 = new java.util.AbstractMap$SimpleImmutableEntry;

        specialinvoke $r5.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(r2, r3);

        return $r5;
    }

    private boolean tooHigh(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, $r2, $r3;
        int i0;
        java.util.concurrent.ConcurrentSkipListMap $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi>;

        if $r2 == null goto label2;

        $r4 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi>;

        i0 = virtualinvoke $r4.<java.util.concurrent.ConcurrentSkipListMap: int compare(java.lang.Object,java.lang.Object)>(r1, $r3);

        if i0 > 0 goto label1;

        if i0 != 0 goto label2;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean hiInclusive>;

        if $z0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean tooLow(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, $r2, $r3;
        int i0;
        java.util.concurrent.ConcurrentSkipListMap $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lo>;

        if $r2 == null goto label2;

        $r4 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lo>;

        i0 = virtualinvoke $r4.<java.util.concurrent.ConcurrentSkipListMap: int compare(java.lang.Object,java.lang.Object)>(r1, $r3);

        if i0 < 0 goto label1;

        if i0 != 0 goto label2;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean loInclusive>;

        if $z0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public java.util.Map$Entry ceilingEntry(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1;
        java.util.Map$Entry $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry getNearEntry(java.lang.Object,int)>(r1, 1);

        return $r2;
    }

    public java.lang.Object ceilingKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object getNearKey(java.lang.Object,int)>(r1, 1);

        return $r2;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        boolean $z0;
        java.lang.Object $r2, $r3;
        java.util.concurrent.ConcurrentSkipListMap $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node loNode()>();

     label1:
        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isBeforeEnd(java.util.concurrent.ConcurrentSkipListMap$Node)>(r1);

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object getValidValue()>();

        if $r2 == null goto label2;

        $r4 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r3 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object remove(java.lang.Object)>($r3);

     label2:
        r1 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        goto label1;

     label3:
        return;
    }

    public java.util.Comparator comparator()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.Comparator r1;
        java.util.concurrent.ConcurrentSkipListMap $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        r1 = virtualinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap: java.util.Comparator comparator()>();

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        if $z0 == 0 goto label1;

        r1 = staticinvoke <java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)>(r1);

     label1:
        return r1;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentSkipListMap $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $z1 = virtualinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r2;
        boolean $z0, $z1;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node loNode()>();

     label2:
        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isBeforeEnd(java.util.concurrent.ConcurrentSkipListMap$Node)>(r2);

        if $z0 == 0 goto label4;

        r3 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object getValidValue()>();

        if r3 == null goto label3;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        r2 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        goto label2;

     label4:
        return 0;
    }

    public java.util.NavigableSet descendingKeySet()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap descendingMap()>();

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.NavigableSet navigableKeySet()>();

        return $r2;
    }

    public volatile java.util.NavigableMap descendingMap()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap descendingMap()>();

        return $r1;
    }

    public volatile java.util.concurrent.ConcurrentNavigableMap descendingMap()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap descendingMap()>();

        return $r1;
    }

    public java.util.concurrent.ConcurrentSkipListMap$SubMap descendingMap()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r4;
        java.util.concurrent.ConcurrentSkipListMap r1;
        java.lang.Object r2, r3;
        boolean z0, z1, z2, $z3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lo>;

        z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean loInclusive>;

        r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object hi>;

        z1 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean hiInclusive>;

        $z3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        if $z3 != 0 goto label2;

        z2 = 1;

     label1:
        $r4 = new java.util.concurrent.ConcurrentSkipListMap$SubMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>(r1, r2, z0, r3, z1, z2);

        return $r4;

     label2:
        z2 = 0;

        goto label1;
    }

    java.util.Iterator entryIterator()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = new java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator;

        specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>(r0);

        return $r1;
    }

    public java.util.Set entrySet()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.Set r1;
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Set entrySetView>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>(r0);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Set entrySetView> = r2;

        return r2;
    }

    public java.util.Map$Entry firstEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        boolean $z0;
        java.util.Map$Entry $r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry highestEntry()>();

        return $r2;

     label1:
        $r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry lowestEntry()>();

        return $r1;
    }

    public java.lang.Object firstKey()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        boolean $z0;
        java.lang.Object $r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object highestKey()>();

        return $r2;

     label1:
        $r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lowestKey()>();

        return $r1;
    }

    public java.util.Map$Entry floorEntry(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1;
        java.util.Map$Entry $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry getNearEntry(java.lang.Object,int)>(r1, 3);

        return $r2;
    }

    public java.lang.Object floorKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object getNearKey(java.lang.Object,int)>(r1, 3);

        return $r2;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, $r3;
        boolean $z0;
        java.util.concurrent.ConcurrentSkipListMap $r2;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public volatile java.util.NavigableMap headMap(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap headMap(java.lang.Object,boolean)>(r1, z0);

        return $r2;
    }

    public volatile java.util.SortedMap headMap(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap headMap(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap headMap(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap headMap(java.lang.Object,boolean)>(r1, z0);

        return $r2;
    }

    public java.util.concurrent.ConcurrentSkipListMap$SubMap headMap(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap headMap(java.lang.Object,boolean)>(r1, 0);

        return $r2;
    }

    public java.util.concurrent.ConcurrentSkipListMap$SubMap headMap(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;
        boolean z0;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap newSubMap(java.lang.Object,boolean,java.lang.Object,boolean)>(null, 0, r1, z0);

        return $r2;
    }

    public java.util.Map$Entry higherEntry(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1;
        java.util.Map$Entry $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry getNearEntry(java.lang.Object,int)>(r1, 0);

        return $r2;
    }

    public java.lang.Object higherKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object getNearKey(java.lang.Object,int)>(r1, 0);

        return $r2;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node loNode()>();

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isBeforeEnd(java.util.concurrent.ConcurrentSkipListMap$Node)>($r1);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    java.util.Iterator keyIterator()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = new java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator;

        specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>(r0);

        return $r1;
    }

    public java.util.NavigableSet keySet()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$KeySet r1, r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$KeySet keySetView>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentSkipListMap$KeySet;

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$KeySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>(r0);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$KeySet keySetView> = r2;

        return r2;
    }

    public volatile java.util.Set keySet()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.NavigableSet $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.NavigableSet keySet()>();

        return $r1;
    }

    public java.util.Map$Entry lastEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        boolean $z0;
        java.util.Map$Entry $r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry lowestEntry()>();

        return $r2;

     label1:
        $r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry highestEntry()>();

        return $r1;
    }

    public java.lang.Object lastKey()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        boolean $z0;
        java.lang.Object $r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object lowestKey()>();

        return $r2;

     label1:
        $r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object highestKey()>();

        return $r1;
    }

    public java.util.Map$Entry lowerEntry(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1;
        java.util.Map$Entry $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry getNearEntry(java.lang.Object,int)>(r1, 2);

        return $r2;
    }

    public java.lang.Object lowerKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object getNearKey(java.lang.Object,int)>(r1, 2);

        return $r2;
    }

    public java.util.NavigableSet navigableKeySet()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$KeySet r1, r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$KeySet keySetView>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentSkipListMap$KeySet;

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$KeySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>(r0);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$KeySet keySetView> = r2;

        return r2;
    }

    public java.util.Map$Entry pollFirstEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        boolean $z0;
        java.util.Map$Entry $r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry removeHighest()>();

        return $r2;

     label1:
        $r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry removeLowest()>();

        return $r1;
    }

    public java.util.Map$Entry pollLastEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        boolean $z0;
        java.util.Map$Entry $r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $z0 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isDescending>;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry removeLowest()>();

        return $r2;

     label1:
        $r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Map$Entry removeHighest()>();

        return $r1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, r2, $r4;
        java.util.concurrent.ConcurrentSkipListMap $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: void checkKeyBounds(java.lang.Object)>(r1);

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, r2, $r4;
        java.util.concurrent.ConcurrentSkipListMap $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: void checkKeyBounds(java.lang.Object)>(r1);

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, $r3;
        boolean $z0;
        java.util.concurrent.ConcurrentSkipListMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentSkipListMap $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean inBounds(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $z1 = virtualinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, r2, $r4;
        java.util.concurrent.ConcurrentSkipListMap $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: void checkKeyBounds(java.lang.Object)>(r1);

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.lang.Object r1, r2, r3;
        java.util.concurrent.ConcurrentSkipListMap $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: void checkKeyBounds(java.lang.Object)>(r1);

        $r4 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap m>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.ConcurrentSkipListMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return $z0;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        long l0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        boolean $z0;
        byte $b1;
        int $i2;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        l0 = 0L;

        r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$Node loNode()>();

     label1:
        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean isBeforeEnd(java.util.concurrent.ConcurrentSkipListMap$Node)>(r1);

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object getValidValue()>();

        if $r2 == null goto label2;

        l0 = l0 + 1L;

     label2:
        r1 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        goto label1;

     label3:
        $b1 = l0 cmp 2147483647L;

        if $b1 < 0 goto label4;

        return 2147483647;

     label4:
        $i2 = (int) l0;

        return $i2;
    }

    public volatile java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r3;
        java.lang.Object r1, r2;
        boolean z0, z1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, z0, r2, z1);

        return $r3;
    }

    public volatile java.util.SortedMap subMap(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r3;
        java.lang.Object r1, r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap subMap(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public volatile java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r3;
        java.lang.Object r1, r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap subMap(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public volatile java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r3;
        java.lang.Object r1, r2;
        boolean z0, z1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, z0, r2, z1);

        return $r3;
    }

    public java.util.concurrent.ConcurrentSkipListMap$SubMap subMap(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r3;
        java.lang.Object r1, r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, 1, r2, 0);

        return $r3;
    }

    public java.util.concurrent.ConcurrentSkipListMap$SubMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r4;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label2:
        $r4 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap newSubMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, z0, r2, z1);

        return $r4;
    }

    public volatile java.util.NavigableMap tailMap(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap tailMap(java.lang.Object,boolean)>(r1, z0);

        return $r2;
    }

    public volatile java.util.SortedMap tailMap(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap tailMap(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap tailMap(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap tailMap(java.lang.Object,boolean)>(r1, z0);

        return $r2;
    }

    public java.util.concurrent.ConcurrentSkipListMap$SubMap tailMap(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap tailMap(java.lang.Object,boolean)>(r1, 1);

        return $r2;
    }

    public java.util.concurrent.ConcurrentSkipListMap$SubMap tailMap(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0, $r2;
        java.lang.Object r1;
        boolean z0;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.concurrent.ConcurrentSkipListMap$SubMap newSubMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, z0, null, 0);

        return $r2;
    }

    java.util.Iterator valueIterator()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        $r1 = new java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator;

        specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>(r0);

        return $r1;
    }

    public java.util.Collection values()
    {
        java.util.concurrent.ConcurrentSkipListMap$SubMap r0;
        java.util.Collection r1;
        java.util.concurrent.ConcurrentSkipListMap$Values r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$SubMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Collection valuesView>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentSkipListMap$Values;

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$Values: void <init>(java.util.concurrent.ConcurrentNavigableMap)>(r0);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Collection valuesView> = r2;

        return r2;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ConcurrentSkipListMap$SubMap: long serialVersionUID> = -7647078645895051609L;

        return;
    }
}
