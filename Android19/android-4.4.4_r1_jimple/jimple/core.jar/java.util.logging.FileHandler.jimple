public class java.util.logging.FileHandler extends java.util.logging.StreamHandler
{
    private static final boolean DEFAULT_APPEND;
    private static final int DEFAULT_COUNT;
    private static final int DEFAULT_LIMIT;
    private static final java.lang.String DEFAULT_PATTERN;
    private static final java.lang.String LCK_EXT;
    private static final java.util.Hashtable allLocks;
    private boolean append;
    private int count;
    java.lang.String fileName;
    private java.io.File[] files;
    private int limit;
    java.nio.channels.FileLock lock;
    private java.util.logging.LogManager manager;
    private java.util.logging.FileHandler$MeasureOutputStream output;
    private java.lang.String pattern;
    int uniqueID;

    static void <clinit>()
    {
        java.util.Hashtable $r0;

        <java.util.logging.FileHandler: java.lang.String LCK_EXT> = ".lck";

        <java.util.logging.FileHandler: java.lang.String DEFAULT_PATTERN> = "%h/java%u.log";

        <java.util.logging.FileHandler: int DEFAULT_LIMIT> = 0;

        <java.util.logging.FileHandler: int DEFAULT_COUNT> = 1;

        <java.util.logging.FileHandler: boolean DEFAULT_APPEND> = 0;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <java.util.logging.FileHandler: java.util.Hashtable allLocks> = $r0;

        return;
    }

    public void <init>() throws java.io.IOException
    {
        java.util.logging.FileHandler r0;

        r0 := @this: java.util.logging.FileHandler;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = null;

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = null;

        r0.<java.util.logging.FileHandler: int uniqueID> = -1;

        specialinvoke r0.<java.util.logging.FileHandler: void init(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(null, null, null, null);

        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.Integer $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = null;

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = null;

        r0.<java.util.logging.FileHandler: int uniqueID> = -1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern cannot be empty");

        throw $r4;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke r0.<java.util.logging.FileHandler: void init(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(r1, null, $r2, $r3);

        return;
    }

    public void <init>(java.lang.String, int, int) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        int i0, i1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2, $r5;
        java.lang.Integer $r3, $r4;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = null;

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = null;

        r0.<java.util.logging.FileHandler: int uniqueID> = -1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern cannot be empty");

        throw $r5;

     label1:
        if i0 < 0 goto label2;

        if i1 >= 1 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("limit < 0 || count < 1");

        throw $r2;

     label3:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke r0.<java.util.logging.FileHandler: void init(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(r1, null, $r3, $r4);

        return;
    }

    public void <init>(java.lang.String, int, int, boolean) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        int i0, i1;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r2, $r6;
        java.lang.Boolean $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = null;

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = null;

        r0.<java.util.logging.FileHandler: int uniqueID> = -1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern cannot be empty");

        throw $r6;

     label1:
        if i0 < 0 goto label2;

        if i1 >= 1 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("limit < 0 || count < 1");

        throw $r2;

     label3:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke r0.<java.util.logging.FileHandler: void init(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(r1, $r3, $r4, $r5);

        return;
    }

    public void <init>(java.lang.String, boolean) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.lang.Boolean $r2;
        java.lang.Integer $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = null;

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = null;

        r0.<java.util.logging.FileHandler: int uniqueID> = -1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern cannot be empty");

        throw $r5;

     label1:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke r0.<java.util.logging.FileHandler: void init(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(r1, $r2, $r3, $r4);

        return;
    }

    private boolean getBooleanProperty(java.lang.String, boolean)
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1, r2, $r4, $r5;
        boolean z0, z1, $z2, $z3;
        java.util.logging.LogManager $r3;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r3 = r0.<java.util.logging.FileHandler: java.util.logging.LogManager manager>;

        r2 = virtualinvoke $r3.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);

        if r2 != null goto label1;

        return z0;

     label1:
        z1 = z0;

        $r4 = "true";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z2 == 0 goto label3;

        z1 = 1;

     label2:
        return z1;

     label3:
        $r5 = "false";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z3 == 0 goto label2;

        z1 = 0;

        goto label2;
    }

    private int getIntProperty(java.lang.String, int)
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1, r2;
        int i0, i1, i2;
        java.util.logging.LogManager $r4;
        java.lang.Exception $r5;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r4 = r0.<java.util.logging.FileHandler: java.util.logging.LogManager manager>;

        r2 = virtualinvoke $r4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);

        i1 = i0;

        if r2 == null goto label3;

     label1:
        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label2:
        i1 = i2;

     label3:
        return i1;

     label4:
        $r5 := @caughtexception;

        return i1;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    private java.lang.String getStringProperty(java.lang.String, java.lang.String)
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1, r2, r3;
        java.util.logging.LogManager $r4;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<java.util.logging.FileHandler: java.util.logging.LogManager manager>;

        r3 = virtualinvoke $r4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);

        if r3 != null goto label1;

        return r2;

     label1:
        return r3;
    }

    private void init(java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.Integer) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        java.lang.Boolean r2;
        java.lang.Integer r3, r4;
        java.util.logging.LogManager $r5, $r6;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Boolean;

        r3 := @parameter2: java.lang.Integer;

        r4 := @parameter3: java.lang.Integer;

        $r5 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        r0.<java.util.logging.FileHandler: java.util.logging.LogManager manager> = $r5;

        $r6 = r0.<java.util.logging.FileHandler: java.util.logging.LogManager manager>;

        virtualinvoke $r6.<java.util.logging.LogManager: void checkAccess()>();

        specialinvoke r0.<java.util.logging.FileHandler: void initProperties(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(r1, r2, r3, r4);

        specialinvoke r0.<java.util.logging.FileHandler: void initOutputFiles()>();

        return;
    }

    private void initOutputFiles() throws java.io.FileNotFoundException, java.io.IOException
    {
        java.util.logging.FileHandler r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i10;
        java.util.Hashtable r1, $r8, $r22;
        java.lang.Throwable r2, $r42;
        java.io.FileOutputStream r3, $r13, $r29;
        java.io.File[] $r4, $r9, $r28, $r32, $r34, $r35, $r36, $r40, $r44;
        java.io.File $r5, $r11, $r31, $r33, $r37, $r38, $r39, $r41, $r43;
        java.lang.String $r6, $r7, $r15, $r16, $r23, $r27, $r45;
        java.lang.Object $r10;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r12, $r14, $r17;
        java.nio.channels.FileLock $r18, $r20, $r21;
        java.nio.channels.FileChannel $r19;
        java.util.logging.FileHandler$MeasureOutputStream $r24, $r30;
        java.io.BufferedOutputStream $r25;
        long $l5, $l9, $l11;
        byte $b8;

        r0 := @this: java.util.logging.FileHandler;

     label01:
        $i2 = r0.<java.util.logging.FileHandler: int uniqueID>;

        $i3 = 1 + $i2;

        r0.<java.util.logging.FileHandler: int uniqueID> = $i3;

        i0 = 0;

     label02:
        $i4 = r0.<java.util.logging.FileHandler: int count>;

        if i0 >= $i4 goto label03;

        $r44 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r43 = new java.io.File;

        $r45 = specialinvoke r0.<java.util.logging.FileHandler: java.lang.String parseFileName(int)>(i0);

        specialinvoke $r43.<java.io.File: void <init>(java.lang.String)>($r45);

        $r44[i0] = $r43;

        i0 = i0 + 1;

        goto label02;

     label03:
        $r4 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r5 = $r4[0];

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = $r6;

        r1 = <java.util.logging.FileHandler: java.util.Hashtable allLocks>;

        entermonitor r1;

     label04:
        $r8 = <java.util.logging.FileHandler: java.util.Hashtable allLocks>;

        $r7 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        $r10 = virtualinvoke $r8.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r7);

        if $r10 == null goto label09;

        exitmonitor r1;

     label05:
        goto label01;

     label06:
        $r42 := @caughtexception;

        r2 = $r42;

     label07:
        exitmonitor r1;

     label08:
        throw r2;

     label09:
        $r9 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r11 = $r9[0];

        $z0 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label15;

        $z2 = r0.<java.util.logging.FileHandler: boolean append>;

        if $z2 == 0 goto label10;

        $r40 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r39 = $r40[0];

        $l11 = virtualinvoke $r39.<java.io.File: long length()>();

        $i10 = r0.<java.util.logging.FileHandler: int limit>;

        $l9 = (long) $i10;

        $b8 = $l11 cmp $l9;

        if $b8 < 0 goto label15;

     label10:
        $i6 = r0.<java.util.logging.FileHandler: int count>;

        i1 = -1 + $i6;

     label11:
        if i1 <= 0 goto label15;

     label12:
        $r32 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r33 = $r32[i1];

        $z3 = virtualinvoke $r33.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label13;

        $r36 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r41 = $r36[i1];

        virtualinvoke $r41.<java.io.File: boolean delete()>();

     label13:
        $r35 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $i7 = i1 - 1;

        $r37 = $r35[$i7];

        $r34 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r38 = $r34[i1];

        virtualinvoke $r37.<java.io.File: boolean renameTo(java.io.File)>($r38);

     label14:
        i1 = i1 + -1;

        goto label11;

     label15:
        $r13 = new java.io.FileOutputStream;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lck");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.FileOutputStream: void <init>(java.lang.String)>($r16);

        r3 = $r13;

        $r19 = virtualinvoke r3.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $r18 = virtualinvoke $r19.<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = $r18;

        $r21 = r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock>;

        if $r21 != null goto label17;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        exitmonitor r1;

     label16:
        goto label01;

     label17:
        $r22 = <java.util.logging.FileHandler: java.util.Hashtable allLocks>;

        $r23 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        $r20 = r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock>;

        virtualinvoke $r22.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r20);

        exitmonitor r1;

     label18:
        $r24 = new java.util.logging.FileHandler$MeasureOutputStream;

        $r25 = new java.io.BufferedOutputStream;

        $r29 = new java.io.FileOutputStream;

        $r27 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        $z1 = r0.<java.util.logging.FileHandler: boolean append>;

        specialinvoke $r29.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>($r27, $z1);

        specialinvoke $r25.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r29);

        $r28 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r31 = $r28[0];

        $l5 = virtualinvoke $r31.<java.io.File: long length()>();

        specialinvoke $r24.<java.util.logging.FileHandler$MeasureOutputStream: void <init>(java.io.OutputStream,long)>($r25, $l5);

        r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeasureOutputStream output> = $r24;

        $r30 = r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeasureOutputStream output>;

        virtualinvoke r0.<java.util.logging.FileHandler: void setOutputStream(java.io.OutputStream)>($r30);

        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label10 to label11 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch java.lang.Throwable from label13 to label14 with label06;
        catch java.lang.Throwable from label15 to label16 with label06;
        catch java.lang.Throwable from label17 to label18 with label06;
    }

    private void initProperties(java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.Integer)
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1, r5, $r7, $r8, $r13, $r16, $r23, $r25;
        java.lang.Boolean r2;
        java.lang.Integer r3, r4;
        boolean z0, $z1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.lang.Class $r6;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20, $r24, $r26, $r27;
        java.io.File[] $r10;
        java.lang.NullPointerException $r21, $r22;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Boolean;

        r3 := @parameter2: java.lang.Integer;

        r4 := @parameter3: java.lang.Integer;

        specialinvoke r0.<java.util.logging.StreamHandler: void initProperties(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("ALL", null, "java.util.logging.XMLFormatter", null);

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r5 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        if r1 != null goto label01;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".pattern");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = specialinvoke r0.<java.util.logging.FileHandler: java.lang.String getStringProperty(java.lang.String,java.lang.String)>($r25, "%h/java%u.log");

     label01:
        r0.<java.util.logging.FileHandler: java.lang.String pattern> = r1;

        $r7 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        if $r7 != null goto label02;

        $r22 = new java.lang.NullPointerException;

        specialinvoke $r22.<java.lang.NullPointerException: void <init>(java.lang.String)>("pattern == null");

        throw $r22;

     label02:
        $r8 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        $r21 = new java.lang.NullPointerException;

        specialinvoke $r21.<java.lang.NullPointerException: void <init>(java.lang.String)>("pattern.isEmpty()");

        throw $r21;

     label03:
        if r2 != null goto label09;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".append");

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = specialinvoke r0.<java.util.logging.FileHandler: boolean getBooleanProperty(java.lang.String,boolean)>($r23, 0);

     label04:
        r0.<java.util.logging.FileHandler: boolean append> = z0;

        if r4 != null goto label10;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".count");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = specialinvoke r0.<java.util.logging.FileHandler: int getIntProperty(java.lang.String,int)>($r16, 1);

     label05:
        r0.<java.util.logging.FileHandler: int count> = i0;

        if r3 != null goto label11;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".limit");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = specialinvoke r0.<java.util.logging.FileHandler: int getIntProperty(java.lang.String,int)>($r13, 0);

     label06:
        r0.<java.util.logging.FileHandler: int limit> = i1;

        $i4 = r0.<java.util.logging.FileHandler: int count>;

        if $i4 >= 1 goto label12;

        i2 = 1;

     label07:
        r0.<java.util.logging.FileHandler: int count> = i2;

        $i6 = r0.<java.util.logging.FileHandler: int limit>;

        if $i6 >= 0 goto label13;

        i3 = 0;

     label08:
        r0.<java.util.logging.FileHandler: int limit> = i3;

        $i5 = r0.<java.util.logging.FileHandler: int count>;

        $r10 = newarray (java.io.File)[$i5];

        r0.<java.util.logging.FileHandler: java.io.File[] files> = $r10;

        return;

     label09:
        z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        goto label04;

     label10:
        i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        goto label05;

     label11:
        i1 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        goto label06;

     label12:
        i2 = r0.<java.util.logging.FileHandler: int count>;

        goto label07;

     label13:
        i3 = r0.<java.util.logging.FileHandler: int limit>;

        goto label08;
    }

    private java.lang.String parseFileName(int)
    {
        java.util.logging.FileHandler r0;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        boolean z0, z1, z2, z3;
        java.lang.String r1, r2, $r5, $r6, $r8, $r9, $r10, $r11, $r14, $r18, $r23, $r25;
        java.lang.StringBuilder r3, $r7, $r12, $r15, $r19, $r20, $r27, $r28, $r33;
        char[] r4;
        char $c4, $c11;

        r0 := @this: java.util.logging.FileHandler;

        i0 := @parameter0: int;

        i1 = 0;

        z0 = 0;

        z1 = 0;

        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        if r1 != null goto label06;

        z2 = 0;

     label01:
        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        if r2 != null goto label07;

        z3 = 0;

     label02:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r3 = $r7;

        $r9 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        $c4 = <java.io.File: char separatorChar>;

        $r8 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(char,char)>(47, $c4);

        r0.<java.util.logging.FileHandler: java.lang.String pattern> = $r8;

        $r10 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        r4 = virtualinvoke $r10.<java.lang.String: char[] toCharArray()>();

     label03:
        $r11 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        i2 = virtualinvoke $r11.<java.lang.String: int indexOf(int,int)>(37, i1);

        if i2 < 0 goto label13;

        i3 = i2 + 1;

        $r18 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        $i10 = virtualinvoke $r18.<java.lang.String: int length()>();

        if i3 >= $i10 goto label03;

        $c11 = r4[i3];

        lookupswitch($c11)
        {
            case 37: goto label12;
            case 103: goto label08;
            case 104: goto label11;
            case 116: goto label10;
            case 117: goto label09;
            default: goto label04;
        };

     label04:
        $i21 = i3 - i1;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i21);

     label05:
        i1 = i3 + 1;

        goto label03;

     label06:
        $r5 = <java.io.File: java.lang.String separator>;

        z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r5);

        goto label01;

     label07:
        $r6 = <java.io.File: java.lang.String separator>;

        z3 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>($r6);

        goto label02;

     label08:
        $i20 = i3 - i1;

        $i19 = -1 + $i20;

        $r28 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i19);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        z1 = 1;

        goto label05;

     label09:
        $i13 = i3 - i1;

        $i14 = -1 + $i13;

        $r19 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i14);

        $i12 = r0.<java.util.logging.FileHandler: int uniqueID>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        z0 = 1;

        goto label05;

     label10:
        $i16 = i3 - i1;

        $i15 = -1 + $i16;

        $r20 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i15);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        if z2 != 0 goto label05;

        $r23 = <java.io.File: java.lang.String separator>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        goto label05;

     label11:
        $i17 = i3 - i1;

        $i18 = -1 + $i17;

        $r27 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i18);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        if z3 != 0 goto label05;

        $r25 = <java.io.File: java.lang.String separator>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        goto label05;

     label12:
        $i22 = i3 - i1;

        $i23 = -1 + $i22;

        $r33 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i23);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(37);

        goto label05;

     label13:
        $i6 = lengthof r4;

        $i5 = $i6 - i1;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i5);

        if z1 != 0 goto label14;

        $i8 = r0.<java.util.logging.FileHandler: int count>;

        if $i8 <= 1 goto label14;

        $r15 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

     label14:
        if z0 != 0 goto label15;

        $i7 = r0.<java.util.logging.FileHandler: int uniqueID>;

        if $i7 <= 0 goto label15;

        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $i9 = r0.<java.util.logging.FileHandler: int uniqueID>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

     label15:
        $r14 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public void close()
    {
        java.util.logging.FileHandler r0;
        java.nio.channels.FileChannel r2;
        java.lang.String $r3, $r10, $r13;
        java.util.Hashtable $r4;
        java.nio.channels.FileLock $r6, $r7;
        java.io.File $r8;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.io.IOException $r14;

        r0 := @this: java.util.logging.FileHandler;

        specialinvoke r0.<java.util.logging.StreamHandler: void close()>();

        $r4 = <java.util.logging.FileHandler: java.util.Hashtable allLocks>;

        $r3 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r3);

     label1:
        $r6 = r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock>;

        r2 = virtualinvoke $r6.<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()>();

        $r7 = r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock>;

        virtualinvoke $r7.<java.nio.channels.FileLock: void release()>();

        virtualinvoke r2.<java.nio.channels.FileChannel: void close()>();

        $r8 = new java.io.File;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lck");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r13);

        virtualinvoke $r8.<java.io.File: boolean delete()>();

     label2:
        return;

     label3:
        $r14 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void findNextGeneration()
    {
        java.util.logging.FileHandler r0;
        int i0, $i1, $i2;
        java.io.FileNotFoundException r1, $r17;
        java.util.logging.FileHandler$MeasureOutputStream $r2, $r7;
        java.io.BufferedOutputStream $r3;
        java.io.FileOutputStream $r4;
        java.io.File[] $r5, $r8, $r10, $r11, $r14;
        java.io.File $r6, $r9, $r12, $r13, $r15;
        boolean $z0;
        java.util.logging.ErrorManager $r16;

        r0 := @this: java.util.logging.FileHandler;

        specialinvoke r0.<java.util.logging.StreamHandler: void close()>();

        $i1 = r0.<java.util.logging.FileHandler: int count>;

        i0 = -1 + $i1;

     label1:
        if i0 <= 0 goto label3;

        $r8 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r9 = $r8[i0];

        $z0 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r14 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r15 = $r14[i0];

        virtualinvoke $r15.<java.io.File: boolean delete()>();

     label2:
        $r10 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $i2 = i0 - 1;

        $r12 = $r10[$i2];

        $r11 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r13 = $r11[i0];

        virtualinvoke $r12.<java.io.File: boolean renameTo(java.io.File)>($r13);

        i0 = i0 + -1;

        goto label1;

     label3:
        $r2 = new java.util.logging.FileHandler$MeasureOutputStream;

        $r3 = new java.io.BufferedOutputStream;

        $r4 = new java.io.FileOutputStream;

        $r5 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r6 = $r5[0];

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        specialinvoke $r3.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r4);

        specialinvoke $r2.<java.util.logging.FileHandler$MeasureOutputStream: void <init>(java.io.OutputStream)>($r3);

        r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeasureOutputStream output> = $r2;

     label4:
        $r7 = r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeasureOutputStream output>;

        virtualinvoke r0.<java.util.logging.FileHandler: void setOutputStream(java.io.OutputStream)>($r7);

        return;

     label5:
        $r17 := @caughtexception;

        r1 = $r17;

        $r16 = virtualinvoke r0.<java.util.logging.FileHandler: java.util.logging.ErrorManager getErrorManager()>();

        virtualinvoke $r16.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Error opening log file", r1, 4);

        goto label4;

        catch java.io.FileNotFoundException from label3 to label4 with label5;
    }

    public void publish(java.util.logging.LogRecord)
    {
        java.util.logging.FileHandler r0;
        java.util.logging.LogRecord r1;
        java.lang.Throwable r2, $r4;
        int $i0, $i2;
        java.util.logging.FileHandler$MeasureOutputStream $r3;
        long $l1, $l3;
        byte $b4;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.util.logging.LogRecord;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.util.logging.StreamHandler: void publish(java.util.logging.LogRecord)>(r1);

        virtualinvoke r0.<java.util.logging.FileHandler: void flush()>();

        $i0 = r0.<java.util.logging.FileHandler: int limit>;

        if $i0 <= 0 goto label2;

        $r3 = r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeasureOutputStream output>;

        $l1 = virtualinvoke $r3.<java.util.logging.FileHandler$MeasureOutputStream: long getLength()>();

        $i2 = r0.<java.util.logging.FileHandler: int limit>;

        $l3 = (long) $i2;

        $b4 = $l1 cmp $l3;

        if $b4 < 0 goto label2;

        virtualinvoke r0.<java.util.logging.FileHandler: void findNextGeneration()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
