public abstract class java.util.TimerTask extends java.lang.Object implements java.lang.Runnable
{
    boolean cancelled;
    boolean fixedRate;
    final java.lang.Object lock;
    long period;
    private long scheduledTime;
    long when;

    protected void <init>()
    {
        java.util.TimerTask r0;
        java.lang.Object $r1;

        r0 := @this: java.util.TimerTask;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<java.util.TimerTask: java.lang.Object lock> = $r1;

        return;
    }

    public boolean cancel()
    {
        java.util.TimerTask r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        long $l0;
        byte $b1;

        r0 := @this: java.util.TimerTask;

        z0 = 1;

        r1 = r0.<java.util.TimerTask: java.lang.Object lock>;

        entermonitor r1;

     label1:
        $z1 = r0.<java.util.TimerTask: boolean cancelled>;

        if $z1 != 0 goto label7;

        $l0 = r0.<java.util.TimerTask: long when>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label7;

     label2:
        r0.<java.util.TimerTask: boolean cancelled> = 1;

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        z0 = 0;

        goto label2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    long getWhen()
    {
        java.util.TimerTask r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        long l0;

        r0 := @this: java.util.TimerTask;

        r1 = r0.<java.util.TimerTask: java.lang.Object lock>;

        entermonitor r1;

     label1:
        l0 = r0.<java.util.TimerTask: long when>;

        exitmonitor r1;

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isScheduled()
    {
        java.util.TimerTask r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean z0;
        long $l0, $l2;
        byte $b1, $b3;

        r0 := @this: java.util.TimerTask;

        r1 = r0.<java.util.TimerTask: java.lang.Object lock>;

        entermonitor r1;

     label1:
        $l0 = r0.<java.util.TimerTask: long when>;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label8;

        $l2 = r0.<java.util.TimerTask: long scheduledTime>;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label9;

     label2:
        goto label8;

     label3:
        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        z0 = 1;

        goto label3;

     label9:
        z0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public abstract void run();

    public long scheduledExecutionTime()
    {
        java.util.TimerTask r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        long l0;

        r0 := @this: java.util.TimerTask;

        r1 = r0.<java.util.TimerTask: java.lang.Object lock>;

        entermonitor r1;

     label1:
        l0 = r0.<java.util.TimerTask: long scheduledTime>;

        exitmonitor r1;

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setScheduledTime(long)
    {
        java.util.TimerTask r0;
        long l0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.TimerTask;

        l0 := @parameter0: long;

        r1 = r0.<java.util.TimerTask: java.lang.Object lock>;

        entermonitor r1;

     label1:
        r0.<java.util.TimerTask: long scheduledTime> = l0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
