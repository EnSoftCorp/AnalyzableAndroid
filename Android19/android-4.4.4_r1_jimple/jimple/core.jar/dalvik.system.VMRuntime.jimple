public final class dalvik.system.VMRuntime extends java.lang.Object
{
    private static final dalvik.system.VMRuntime THE_ONE;

    static void <clinit>()
    {
        dalvik.system.VMRuntime $r0;

        $r0 = new dalvik.system.VMRuntime;

        specialinvoke $r0.<dalvik.system.VMRuntime: void <init>()>();

        <dalvik.system.VMRuntime: dalvik.system.VMRuntime THE_ONE> = $r0;

        return;
    }

    private void <init>()
    {
        dalvik.system.VMRuntime r0;

        r0 := @this: dalvik.system.VMRuntime;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static dalvik.system.VMRuntime getRuntime()
    {
        dalvik.system.VMRuntime $r0;

        $r0 = <dalvik.system.VMRuntime: dalvik.system.VMRuntime THE_ONE>;

        return $r0;
    }

    private native void nativeSetTargetHeapUtilization(float);

    public native long addressOf(java.lang.Object);

    public native java.lang.String bootClassPath();

    public native java.lang.String classPath();

    public native void clearGrowthLimit();

    public native void disableJitCompilation();

    public void gcSoftReferences()
    {
        dalvik.system.VMRuntime r0;

        r0 := @this: dalvik.system.VMRuntime;

        return;
    }

    public long getExternalBytesAllocated()
    {
        dalvik.system.VMRuntime r0;

        r0 := @this: dalvik.system.VMRuntime;

        return 0L;
    }

    public long getMinimumHeapSize()
    {
        dalvik.system.VMRuntime r0;

        r0 := @this: dalvik.system.VMRuntime;

        return 0L;
    }

    public native float getTargetHeapUtilization();

    public native boolean isDebuggerActive();

    public native java.lang.Object newNonMovableArray(java.lang.Class, int);

    public native void preloadDexCaches();

    public native java.lang.String[] properties();

    public native void registerNativeAllocation(int);

    public native void registerNativeFree(int);

    public void runFinalizationSync()
    {
        dalvik.system.VMRuntime r0;

        r0 := @this: dalvik.system.VMRuntime;

        staticinvoke <java.lang.System: void runFinalization()>();

        return;
    }

    public long setMinimumHeapSize(long)
    {
        dalvik.system.VMRuntime r0;
        long l0;

        r0 := @this: dalvik.system.VMRuntime;

        l0 := @parameter0: long;

        return 0L;
    }

    public float setTargetHeapUtilization(float)
    {
        dalvik.system.VMRuntime r0;
        float f0, f1;
        java.lang.Throwable r1, $r7;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: dalvik.system.VMRuntime;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 <= 0 goto label1;

        $b1 = f0 cmpl 1.0F;

        if $b1 < 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range (0,1)");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        entermonitor r0;

     label3:
        f1 = virtualinvoke r0.<dalvik.system.VMRuntime: float getTargetHeapUtilization()>();

        specialinvoke r0.<dalvik.system.VMRuntime: void nativeSetTargetHeapUtilization(float)>(f0);

        exitmonitor r0;

     label4:
        return f1;

     label5:
        $r7 := @caughtexception;

        r1 = $r7;

     label6:
        exitmonitor r0;

     label7:
        throw r1;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public native void setTargetSdkVersion(int);

    public native void startJitCompilation();

    public boolean trackExternalAllocation(long)
    {
        dalvik.system.VMRuntime r0;
        long l0;

        r0 := @this: dalvik.system.VMRuntime;

        l0 := @parameter0: long;

        return 1;
    }

    public void trackExternalFree(long)
    {
        dalvik.system.VMRuntime r0;
        long l0;

        r0 := @this: dalvik.system.VMRuntime;

        l0 := @parameter0: long;

        return;
    }

    public native java.lang.String vmLibrary();

    public native java.lang.String vmVersion();
}
