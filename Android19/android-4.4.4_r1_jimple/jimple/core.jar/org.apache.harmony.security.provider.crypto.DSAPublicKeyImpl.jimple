public class org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl extends org.apache.harmony.security.PublicKeyImpl implements java.security.interfaces.DSAPublicKey
{
    private static final long serialVersionUID;
    private java.math.BigInteger g;
    private java.math.BigInteger p;
    private transient java.security.interfaces.DSAParams params;
    private java.math.BigInteger q;
    private java.math.BigInteger y;

    public void <init>(java.security.spec.DSAPublicKeySpec)
    {
        org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl r0;
        java.security.spec.DSAPublicKeySpec r1;
        org.apache.harmony.security.provider.crypto.ThreeIntegerSequence r2, $r7;
        org.apache.harmony.security.x509.AlgorithmIdentifier r3, $r14;
        java.math.BigInteger $r4, $r5, $r6, $r8, $r10, $r12, $r16, $r21, $r24, $r26, $r27;
        byte[] $r9, $r11, $r13, $r17, $r20, $r22, $r23;
        java.lang.String $r15;
        org.apache.harmony.security.asn1.ASN1Integer $r18;
        org.apache.harmony.security.x509.SubjectPublicKeyInfo $r19;
        java.security.spec.DSAParameterSpec $r25;

        r0 := @this: org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl;

        r1 := @parameter0: java.security.spec.DSAPublicKeySpec;

        specialinvoke r0.<org.apache.harmony.security.PublicKeyImpl: void <init>(java.lang.String)>("DSA");

        $r4 = virtualinvoke r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getP()>();

        r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger p> = $r4;

        $r5 = virtualinvoke r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getQ()>();

        r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger q> = $r5;

        $r6 = virtualinvoke r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getG()>();

        r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger g> = $r6;

        $r7 = new org.apache.harmony.security.provider.crypto.ThreeIntegerSequence;

        $r8 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger p>;

        $r9 = virtualinvoke $r8.<java.math.BigInteger: byte[] toByteArray()>();

        $r10 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger q>;

        $r11 = virtualinvoke $r10.<java.math.BigInteger: byte[] toByteArray()>();

        $r12 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger g>;

        $r13 = virtualinvoke $r12.<java.math.BigInteger: byte[] toByteArray()>();

        specialinvoke $r7.<org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: void <init>(byte[],byte[],byte[])>($r9, $r11, $r13);

        r2 = $r7;

        $r14 = new org.apache.harmony.security.x509.AlgorithmIdentifier;

        $r15 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2OID(java.lang.String)>("DSA");

        $r17 = virtualinvoke r2.<org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: byte[] getEncoded()>();

        specialinvoke $r14.<org.apache.harmony.security.x509.AlgorithmIdentifier: void <init>(java.lang.String,byte[])>($r15, $r17);

        r3 = $r14;

        $r16 = virtualinvoke r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getY()>();

        r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger y> = $r16;

        $r19 = new org.apache.harmony.security.x509.SubjectPublicKeyInfo;

        $r18 = staticinvoke <org.apache.harmony.security.asn1.ASN1Integer: org.apache.harmony.security.asn1.ASN1Integer getInstance()>();

        $r21 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger y>;

        $r20 = virtualinvoke $r21.<java.math.BigInteger: byte[] toByteArray()>();

        $r23 = virtualinvoke $r18.<org.apache.harmony.security.asn1.ASN1Integer: byte[] encode(java.lang.Object)>($r20);

        specialinvoke $r19.<org.apache.harmony.security.x509.SubjectPublicKeyInfo: void <init>(org.apache.harmony.security.x509.AlgorithmIdentifier,byte[])>(r3, $r23);

        $r22 = virtualinvoke $r19.<org.apache.harmony.security.x509.SubjectPublicKeyInfo: byte[] getEncoded()>();

        virtualinvoke r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: void setEncoding(byte[])>($r22);

        $r25 = new java.security.spec.DSAParameterSpec;

        $r26 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger p>;

        $r27 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger q>;

        $r24 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger g>;

        specialinvoke $r25.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r26, $r27, $r24);

        r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.security.interfaces.DSAParams params> = $r25;

        return;
    }

    public void <init>(java.security.spec.X509EncodedKeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl r0;
        java.security.spec.X509EncodedKeySpec r1;
        byte[] r2, $r16, $r17, $r18, $r21, $r22, $r24, $r26;
        java.io.IOException r3, r5, r7, $r34, $r36, $r47;
        org.apache.harmony.security.x509.SubjectPublicKeyInfo r4;
        org.apache.harmony.security.x509.AlgorithmIdentifier r6;
        org.apache.harmony.security.provider.crypto.ThreeIntegerSequence r8;
        java.lang.String r9, r10, $r39, $r41, $r48;
        org.apache.harmony.security.asn1.ASN1Sequence $r11, $r19;
        java.lang.Object $r12, $r15, $r20;
        java.math.BigInteger $r13, $r23, $r25, $r27, $r28, $r30, $r31;
        org.apache.harmony.security.asn1.ASN1Integer $r14;
        java.security.spec.DSAParameterSpec $r29;
        java.lang.StringBuilder $r32, $r33, $r38, $r40, $r42, $r43, $r44, $r45, $r49;
        java.security.spec.InvalidKeySpecException $r35, $r37, $r46;

        r0 := @this: org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl;

        r1 := @parameter0: java.security.spec.X509EncodedKeySpec;

        specialinvoke r0.<org.apache.harmony.security.PublicKeyImpl: void <init>(java.lang.String)>("DSA");

        r2 = virtualinvoke r1.<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()>();

     label01:
        $r11 = <org.apache.harmony.security.x509.SubjectPublicKeyInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r12 = virtualinvoke $r11.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(byte[])>(r2);

        r4 = (org.apache.harmony.security.x509.SubjectPublicKeyInfo) $r12;

     label02:
        $r13 = new java.math.BigInteger;

        $r14 = staticinvoke <org.apache.harmony.security.asn1.ASN1Integer: org.apache.harmony.security.asn1.ASN1Integer getInstance()>();

        $r16 = virtualinvoke r4.<org.apache.harmony.security.x509.SubjectPublicKeyInfo: byte[] getSubjectPublicKey()>();

        $r15 = virtualinvoke $r14.<org.apache.harmony.security.asn1.ASN1Integer: java.lang.Object decode(byte[])>($r16);

        $r18 = (byte[]) $r15;

        $r17 = (byte[]) $r18;

        specialinvoke $r13.<java.math.BigInteger: void <init>(byte[])>($r17);

        r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger y> = $r13;

     label03:
        r6 = virtualinvoke r4.<org.apache.harmony.security.x509.SubjectPublicKeyInfo: org.apache.harmony.security.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

     label04:
        $r19 = <org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r21 = virtualinvoke r6.<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getParameters()>();

        $r20 = virtualinvoke $r19.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(byte[])>($r21);

        r8 = (org.apache.harmony.security.provider.crypto.ThreeIntegerSequence) $r20;

     label05:
        $r23 = new java.math.BigInteger;

        $r22 = r8.<org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: byte[] p>;

        specialinvoke $r23.<java.math.BigInteger: void <init>(byte[])>($r22);

        r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger p> = $r23;

        $r25 = new java.math.BigInteger;

        $r24 = r8.<org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: byte[] q>;

        specialinvoke $r25.<java.math.BigInteger: void <init>(byte[])>($r24);

        r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger q> = $r25;

        $r27 = new java.math.BigInteger;

        $r26 = r8.<org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: byte[] g>;

        specialinvoke $r27.<java.math.BigInteger: void <init>(byte[])>($r26);

        r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger g> = $r27;

        $r29 = new java.security.spec.DSAParameterSpec;

        $r31 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger p>;

        $r30 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger q>;

        $r28 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger g>;

        specialinvoke $r29.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r31, $r30, $r28);

        r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.security.interfaces.DSAParams params> = $r29;

        virtualinvoke r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: void setEncoding(byte[])>(r2);

        r9 = virtualinvoke r6.<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()>();

        r10 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>(r9);

        if r10 != null goto label10;

     label06:
        virtualinvoke r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: void setAlgorithm(java.lang.String)>(r9);

        return;

     label07:
        $r34 := @caughtexception;

        r3 = $r34;

        $r35 = new java.security.spec.InvalidKeySpecException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode keySpec encoding: ");

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r39);

        throw $r35;

     label08:
        $r36 := @caughtexception;

        r5 = $r36;

        $r37 = new java.security.spec.InvalidKeySpecException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode parameters: ");

        $r40 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r41);

        throw $r37;

     label09:
        $r47 := @caughtexception;

        r7 = $r47;

        $r46 = new java.security.spec.InvalidKeySpecException;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode parameters: ");

        $r49 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r46.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r48);

        throw $r46;

     label10:
        r9 = r10;

        goto label06;

        catch java.io.IOException from label01 to label02 with label07;
        catch java.io.IOException from label02 to label03 with label08;
        catch java.io.IOException from label04 to label05 with label09;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.NotActiveException, java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl r0;
        java.io.ObjectInputStream r1;
        java.security.spec.DSAParameterSpec $r2;
        java.math.BigInteger $r3, $r4, $r5;

        r0 := @this: org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new java.security.spec.DSAParameterSpec;

        $r5 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger p>;

        $r4 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger q>;

        $r3 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger g>;

        specialinvoke $r2.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r4, $r3);

        r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.security.interfaces.DSAParams params> = $r2;

        return;
    }

    public java.security.interfaces.DSAParams getParams()
    {
        org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl r0;
        java.security.interfaces.DSAParams $r1;

        r0 := @this: org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl;

        $r1 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.security.interfaces.DSAParams params>;

        return $r1;
    }

    public java.math.BigInteger getY()
    {
        org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl r0;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl;

        $r1 = r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger y>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: long serialVersionUID> = -2279672131310978336L;

        return;
    }
}
