final class java.util.HashMap$EntrySet extends java.util.AbstractSet
{
    final java.util.HashMap this$0;

    private void <init>(java.util.HashMap)
    {
        java.util.HashMap$EntrySet r0;
        java.util.HashMap r1;

        r0 := @this: java.util.HashMap$EntrySet;

        r1 := @parameter0: java.util.HashMap;

        r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    void <init>(java.util.HashMap, java.util.HashMap$1)
    {
        java.util.HashMap$EntrySet r0;
        java.util.HashMap r1;
        java.util.HashMap$1 r2;

        r0 := @this: java.util.HashMap$EntrySet;

        r1 := @parameter0: java.util.HashMap;

        r2 := @parameter1: java.util.HashMap$1;

        specialinvoke r0.<java.util.HashMap$EntrySet: void <init>(java.util.HashMap)>(r1);

        return;
    }

    public void clear()
    {
        java.util.HashMap$EntrySet r0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashMap$EntrySet;

        $r1 = r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.HashMap$EntrySet r0;
        java.lang.Object r1, $r4, $r5;
        java.util.Map$Entry r2;
        boolean $z0, $z1;
        java.util.HashMap $r3;

        r0 := @this: java.util.HashMap$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Map$Entry) r1;

        $r3 = r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0>;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = staticinvoke <java.util.HashMap: boolean access$600(java.util.HashMap,java.lang.Object,java.lang.Object)>($r3, $r4, $r5);

        return $z1;
    }

    public boolean isEmpty()
    {
        java.util.HashMap$EntrySet r0;
        java.util.HashMap $r1;
        int $i0;

        r0 := @this: java.util.HashMap$EntrySet;

        $r1 = r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0>;

        $i0 = $r1.<java.util.HashMap: int size>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        java.util.HashMap$EntrySet r0;
        java.util.HashMap $r1;
        java.util.Iterator $r2;

        r0 := @this: java.util.HashMap$EntrySet;

        $r1 = r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Iterator newEntryIterator()>();

        return $r2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.HashMap$EntrySet r0;
        java.lang.Object r1, $r4, $r5;
        java.util.Map$Entry r2;
        boolean $z0, $z1;
        java.util.HashMap $r3;

        r0 := @this: java.util.HashMap$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Map$Entry) r1;

        $r3 = r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0>;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = staticinvoke <java.util.HashMap: boolean access$700(java.util.HashMap,java.lang.Object,java.lang.Object)>($r3, $r4, $r5);

        return $z1;
    }

    public int size()
    {
        java.util.HashMap$EntrySet r0;
        java.util.HashMap $r1;
        int $i0;

        r0 := @this: java.util.HashMap$EntrySet;

        $r1 = r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0>;

        $i0 = $r1.<java.util.HashMap: int size>;

        return $i0;
    }
}
