public class java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject extends java.lang.Object implements java.util.concurrent.locks.Condition, java.io.Serializable
{
    private static final int REINTERRUPT;
    private static final int THROW_IE;
    private static final long serialVersionUID;
    private transient java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter;
    private transient java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter;
    final java.util.concurrent.locks.AbstractQueuedSynchronizer this$0;

    public void <init>(java.util.concurrent.locks.AbstractQueuedSynchronizer)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, r2, $r3;
        java.lang.Thread $r4;
        int $i0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter>;

        if r1 == null goto label1;

        $i0 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if $i0 == -2 goto label1;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>();

        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter>;

     label1:
        $r3 = new java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        specialinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: void <init>(java.lang.Thread,int)>($r4, -2);

        r2 = $r3;

        if r1 != null goto label3;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter> = r2;

     label2:
        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter> = r2;

        return r2;

     label3:
        r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = r2;

        goto label2;
    }

    private int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        boolean $z0, $z1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z1 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

        if $z1 == 0 goto label1;

        return -1;

     label1:
        return 1;

     label2:
        return 0;
    }

    private void doSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, r2;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

     label1:
        r2 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter> = r2;

        if r2 != null goto label2;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter> = null;

     label2:
        r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = null;

        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

        if $z0 != 0 goto label3;

        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

        if r1 != null goto label1;

     label3:
        return;
    }

    private void doSignalAll(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, r2;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter> = null;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter> = null;

     label1:
        r2 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = null;

        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

        r1 = r2;

        if r1 != null goto label1;

        return;
    }

    private void reportInterruptAfterWait(int) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        int i0;
        java.lang.InterruptedException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        $r1 = new java.lang.InterruptedException;

        specialinvoke $r1.<java.lang.InterruptedException: void <init>()>();

        throw $r1;

     label1:
        if i0 != 1 goto label2;

        staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: void selfInterrupt()>();

     label2:
        return;
    }

    private void unlinkCancelledWaiters()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, r2, r3;
        int $i0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

        r2 = null;

     label1:
        if r1 == null goto label6;

        r3 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        $i0 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if $i0 == -2 goto label5;

        r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = null;

        if r2 != null goto label4;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter> = r3;

     label2:
        if r3 != null goto label3;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter> = r2;

     label3:
        r1 = r3;

        goto label1;

     label4:
        r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = r3;

        goto label2;

     label5:
        r2 = r1;

        goto label3;

     label6:
        return;
    }

    public final void await() throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, $r5;
        int i0, i1;
        boolean $z0, $z1, $z2;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2, $r3, $r4;
        java.lang.InterruptedException $r6;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label1;

        $r6 = new java.lang.InterruptedException;

        specialinvoke $r6.<java.lang.InterruptedException: void <init>()>();

        throw $r6;

     label1:
        r1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>();

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        i0 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

        i1 = 0;

     label2:
        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z1 = virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

        if $z1 != 0 goto label3;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        i1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

        if i1 == 0 goto label2;

     label3:
        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z2 = virtualinvoke $r4.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>(r1, i0);

        if $z2 == 0 goto label4;

        if i1 == -1 goto label4;

        i1 = 1;

     label4:
        $r5 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        if $r5 == null goto label5;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>();

     label5:
        if i1 == 0 goto label6;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void reportInterruptAfterWait(int)>(i1);

     label6:
        return;
    }

    public final boolean await(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        long l0, l1, l3, $l5, $l8;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r2, $r6;
        int i2, i4;
        boolean z0, z1, $z2, $z3;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r3, $r4, $r5, $r7;
        byte $b6, $b7;
        java.lang.InterruptedException $r8;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $z2 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z2 == 0 goto label1;

        $r8 = new java.lang.InterruptedException;

        specialinvoke $r8.<java.lang.InterruptedException: void <init>()>();

        throw $r8;

     label1:
        r2 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>();

        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        i2 = virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);

        $l5 = staticinvoke <java.lang.System: long nanoTime()>();

        l3 = l1 + $l5;

        i4 = 0;

     label2:
        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        z0 = virtualinvoke $r4.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);

        z1 = 0;

        if z0 != 0 goto label3;

        $b7 = l1 cmp 0L;

        if $b7 > 0 goto label7;

        $r7 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        z1 = virtualinvoke $r7.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);

     label3:
        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z3 = virtualinvoke $r5.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>(r2, i2);

        if $z3 == 0 goto label4;

        if i4 == -1 goto label4;

        i4 = 1;

     label4:
        $r6 = r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        if $r6 == null goto label5;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>();

     label5:
        if i4 == 0 goto label6;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void reportInterruptAfterWait(int)>(i4);

     label6:
        if z1 != 0 goto label9;

        return 1;

     label7:
        $b6 = l1 cmp 1000L;

        if $b6 < 0 goto label8;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l1);

     label8:
        i4 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);

        z1 = 0;

        if i4 != 0 goto label3;

        $l8 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = l3 - $l8;

        goto label2;

     label9:
        return 0;
    }

    public final long awaitNanos(long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        long l0, l2, $l4, $l5, $l6, $l9;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, $r5;
        int i1, i3;
        boolean $z0, $z1, $z2;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2, $r3, $r4, $r6;
        byte $b7, $b8;
        java.lang.InterruptedException $r7;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        l0 := @parameter0: long;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label1;

        $r7 = new java.lang.InterruptedException;

        specialinvoke $r7.<java.lang.InterruptedException: void <init>()>();

        throw $r7;

     label1:
        r1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>();

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        i1 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = l0 + $l4;

        i3 = 0;

     label2:
        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z1 = virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

        if $z1 != 0 goto label3;

        $b8 = l0 cmp 0L;

        if $b8 > 0 goto label7;

        $r6 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        virtualinvoke $r6.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

     label3:
        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z2 = virtualinvoke $r4.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>(r1, i1);

        if $z2 == 0 goto label4;

        if i3 == -1 goto label4;

        i3 = 1;

     label4:
        $r5 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        if $r5 == null goto label5;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>();

     label5:
        if i3 == 0 goto label6;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void reportInterruptAfterWait(int)>(i3);

     label6:
        $l6 = staticinvoke <java.lang.System: long nanoTime()>();

        $l5 = l2 - $l6;

        return $l5;

     label7:
        $b7 = l0 cmp 1000L;

        if $b7 < 0 goto label8;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l0);

     label8:
        i3 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

        if i3 != 0 goto label3;

        $l9 = staticinvoke <java.lang.System: long nanoTime()>();

        l0 = l2 - $l9;

        goto label2;
    }

    public final void awaitUninterruptibly()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        int i0;
        boolean z0, $z1, $z2, $z3;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2, $r3, $r4;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        r1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>();

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        i0 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

        z0 = 0;

     label1:
        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z1 = virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

        if $z1 != 0 goto label2;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        $z3 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z3 == 0 goto label1;

        z0 = 1;

        goto label1;

     label2:
        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z2 = virtualinvoke $r4.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>(r1, i0);

        if $z2 != 0 goto label3;

        if z0 == 0 goto label4;

     label3:
        staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: void selfInterrupt()>();

     label4:
        return;
    }

    public final boolean awaitUntil(java.util.Date) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.Date r1;
        long l0, $l3;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r2, $r6;
        int i1, i2;
        boolean z0, z1, $z2, $z3;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r3, $r4, $r5, $r7;
        byte $b4;
        java.lang.InterruptedException $r8;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        r1 := @parameter0: java.util.Date;

        l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $z2 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z2 == 0 goto label1;

        $r8 = new java.lang.InterruptedException;

        specialinvoke $r8.<java.lang.InterruptedException: void <init>()>();

        throw $r8;

     label1:
        r2 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>();

        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        i1 = virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);

        i2 = 0;

     label2:
        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        z0 = virtualinvoke $r4.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);

        z1 = 0;

        if z0 != 0 goto label3;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b4 = $l3 cmp l0;

        if $b4 <= 0 goto label7;

        $r7 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        z1 = virtualinvoke $r7.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);

     label3:
        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z3 = virtualinvoke $r5.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>(r2, i1);

        if $z3 == 0 goto label4;

        if i2 == -1 goto label4;

        i2 = 1;

     label4:
        $r6 = r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        if $r6 == null goto label5;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>();

     label5:
        if i2 == 0 goto label6;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void reportInterruptAfterWait(int)>(i2);

     label6:
        if z1 != 0 goto label8;

        return 1;

     label7:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkUntil(java.lang.Object,long)>(r0, l0);

        i2 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);

        if i2 == 0 goto label2;

        z1 = 0;

        goto label3;

     label8:
        return 0;
    }

    protected final int getWaitQueueLength()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        int i0, $i1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r3.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r3;

     label1:
        i0 = 0;

        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

     label2:
        if r1 == null goto label4;

        $i1 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if $i1 != -2 goto label3;

        i0 = i0 + 1;

     label3:
        r1 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        goto label2;

     label4:
        return i0;
    }

    protected final java.util.Collection getWaitingThreads()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.ArrayList r1, $r5;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r2;
        java.lang.Thread r3;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r4;
        boolean $z0;
        int $i0;
        java.lang.IllegalMonitorStateException $r6;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r6.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r6;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r1 = $r5;

        r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

     label2:
        if r2 == null goto label4;

        $i0 = r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if $i0 != -2 goto label3;

        r3 = r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.lang.Thread thread>;

        if r3 == null goto label3;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label3:
        r2 = r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        goto label2;

     label4:
        return r1;
    }

    protected final boolean hasWaiters()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2;
        boolean $z0;
        int $i0;
        java.lang.IllegalMonitorStateException $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r3.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r3;

     label1:
        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

     label2:
        if r1 == null goto label4;

        $i0 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if $i0 != -2 goto label3;

        return 1;

     label3:
        r1 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        goto label2;

     label4:
        return 0;
    }

    final boolean isOwnedBy(java.util.concurrent.locks.AbstractQueuedSynchronizer)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer r1, $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        if r1 != $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final void signal()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r3.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r3;

     label1:
        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

        if r1 == null goto label2;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void doSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

     label2:
        return;
    }

    public final void signalAll()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r3.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r3;

     label1:
        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

        if r1 == null goto label2;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void doSignalAll(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

     label2:
        return;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: long serialVersionUID> = 1173984872572414699L;

        <java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int THROW_IE> = -1;

        <java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int REINTERRUPT> = 1;

        return;
    }
}
