class java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue
{
    private static final int INITIAL_CAPACITY;
    private final java.util.concurrent.locks.Condition available;
    private java.lang.Thread leader;
    private final java.util.concurrent.locks.ReentrantLock lock;
    private java.util.concurrent.RunnableScheduledFuture[] queue;
    private int size;

    void <init>()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture[] $r1;
        java.util.concurrent.locks.ReentrantLock $r2, $r3;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        $r1 = newarray (java.util.concurrent.RunnableScheduledFuture)[16];

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue> = $r1;

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock> = $r2;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size> = 0;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;

        $r3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available> = $r4;

        return;
    }

    private java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture r1, r2;
        int i0, $i1;
        java.util.concurrent.RunnableScheduledFuture[] $r3, $r4;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.util.concurrent.RunnableScheduledFuture;

        $i1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        i0 = -1 + $i1;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size> = i0;

        $r3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r2 = $r3[i0];

        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r4[i0] = null;

        if i0 == 0 goto label1;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void siftDown(int,java.util.concurrent.RunnableScheduledFuture)>(0, r2);

     label1:
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r1, -1);

        return r1;
    }

    private void grow()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        int i0, i1, $i2;
        java.util.concurrent.RunnableScheduledFuture[] $r1, $r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        $r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        i0 = lengthof $r1;

        $i2 = i0 >> 1;

        i1 = i0 + $i2;

        if i1 >= 0 goto label1;

        i1 = 2147483647;

     label1:
        $r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, i1);

        $r4 = (java.util.concurrent.RunnableScheduledFuture[]) $r3;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue> = $r4;

        return;
    }

    private int indexOf(java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        java.util.concurrent.RunnableScheduledFuture[] $r2, $r5;
        java.util.concurrent.RunnableScheduledFuture $r3, $r6;
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask $r4;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label4;

        $z0 = r1 instanceof java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        if $z0 == 0 goto label2;

        $r4 = (java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask) r1;

        i0 = $r4.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int heapIndex>;

        if i0 < 0 goto label4;

        $i2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        if i0 >= $i2 goto label4;

        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r6 = $r5[i0];

        if $r6 != r1 goto label4;

     label1:
        return i0;

     label2:
        i0 = 0;

     label3:
        $i1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        if i0 >= $i1 goto label4;

        $r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r3 = $r2[i0];

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label1;

        i0 = i0 + 1;

        goto label3;

     label4:
        return -1;
    }

    private java.util.concurrent.RunnableScheduledFuture peekExpired()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture r1;
        java.util.concurrent.RunnableScheduledFuture[] $r2;
        java.util.concurrent.TimeUnit $r3;
        long $l0;
        byte $b1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        $r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r1 = $r2[0];

        if r1 == null goto label1;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l0 = interfaceinvoke r1.<java.util.concurrent.RunnableScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>($r3);

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    private void setIndex(java.util.concurrent.RunnableScheduledFuture, int)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture r1;
        int i0;
        boolean $z0;
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask $r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.util.concurrent.RunnableScheduledFuture;

        i0 := @parameter1: int;

        $z0 = r1 instanceof java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        if $z0 == 0 goto label1;

        $r2 = (java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask) r1;

        $r2.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int heapIndex> = i0;

     label1:
        return;
    }

    private void siftDown(int, java.util.concurrent.RunnableScheduledFuture)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        java.util.concurrent.RunnableScheduledFuture r1, r2, $r8;
        java.util.concurrent.RunnableScheduledFuture[] r3, $r4, $r5, $r6, $r7;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.RunnableScheduledFuture;

        $i4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        i1 = $i4 >>> 1;

     label1:
        if i0 >= i1 goto label3;

        $i5 = i0 << 1;

        i2 = 1 + $i5;

        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r2 = $r5[i2];

        i3 = i2 + 1;

        $i6 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        if i3 >= $i6 goto label2;

        $r7 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r8 = $r7[i3];

        $i8 = interfaceinvoke r2.<java.util.concurrent.RunnableScheduledFuture: int compareTo(java.lang.Object)>($r8);

        if $i8 <= 0 goto label2;

        r3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        i2 = i3;

        r2 = r3[i3];

     label2:
        $i7 = interfaceinvoke r1.<java.util.concurrent.RunnableScheduledFuture: int compareTo(java.lang.Object)>(r2);

        if $i7 > 0 goto label4;

     label3:
        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r4[i0] = r1;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r1, i0);

        return;

     label4:
        $r6 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r6[i0] = r2;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r2, i0);

        i0 = i2;

        goto label1;
    }

    private void siftUp(int, java.util.concurrent.RunnableScheduledFuture)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        int i0, i1, $i2, $i3;
        java.util.concurrent.RunnableScheduledFuture r1, r2;
        java.util.concurrent.RunnableScheduledFuture[] $r3, $r4, $r5;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.RunnableScheduledFuture;

     label1:
        if i0 <= 0 goto label2;

        $i2 = i0 - 1;

        i1 = $i2 >>> 1;

        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r2 = $r4[i1];

        $i3 = interfaceinvoke r1.<java.util.concurrent.RunnableScheduledFuture: int compareTo(java.lang.Object)>(r2);

        if $i3 < 0 goto label3;

     label2:
        $r3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r3[i0] = r1;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r1, i0);

        return;

     label3:
        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r5[i0] = r2;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r2, i0);

        i0 = i1;

        goto label1;
    }

    public volatile boolean add(java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        java.lang.Runnable $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Runnable) r1;

        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean add(java.lang.Runnable)>($r2);

        return $z0;
    }

    public boolean add(java.lang.Runnable)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Runnable r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Runnable;

        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean offer(java.lang.Runnable)>(r1);

        return $z0;
    }

    public void clear()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0, $i1;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.RunnableScheduledFuture r3;
        java.util.concurrent.RunnableScheduledFuture[] $r4, $r5;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        i0 = 0;

     label1:
        $i1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        if i0 >= $i1 goto label5;

        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r3 = $r4[i0];

     label2:
        if r3 == null goto label8;

     label3:
        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r5[i0] = null;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r3, -1);

     label4:
        goto label8;

     label5:
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size> = 0;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label7:
        $r6 := @caughtexception;

        r2 = $r6;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label8:
        i0 = i0 + 1;

        goto label1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r4;
        int i0;
        boolean z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int indexOf(java.lang.Object)>(r1);

     label2:
        if i0 == -1 goto label4;

        z0 = 1;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $r4 := @caughtexception;

        r3 = $r4;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public int drainTo(java.util.Collection)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.Collection r1;
        java.util.concurrent.locks.ReentrantLock r2;
        int i0;
        java.lang.Throwable r3, $r8;
        java.util.concurrent.RunnableScheduledFuture r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.util.Collection;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();

        throw $r7;

     label1:
        if r1 != r0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label2:
        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        i0 = 0;

     label3:
        r4 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture peekExpired()>();

     label4:
        if r4 == null goto label8;

     label5:
        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)>(r4);

     label6:
        i0 = i0 + 1;

        goto label3;

     label7:
        $r8 := @caughtexception;

        r3 = $r8;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label8:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i0;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public int drainTo(java.util.Collection, int)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.Collection r1;
        int i0, i1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r8;
        java.util.concurrent.RunnableScheduledFuture r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        if r1 != null goto label01;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();

        throw $r7;

     label01:
        if r1 != r0 goto label02;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label02:
        if i0 > 0 goto label03;

        return 0;

     label03:
        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        i1 = 0;

     label04:
        if i1 >= i0 goto label10;

     label05:
        r4 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture peekExpired()>();

     label06:
        if r4 == null goto label10;

     label07:
        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)>(r4);

     label08:
        i1 = i1 + 1;

        goto label04;

     label09:
        $r8 := @caughtexception;

        r3 = $r8;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label10:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i1;

        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        int $i0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        $i0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr $r1;
        int $i0;
        java.util.concurrent.RunnableScheduledFuture[] $r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        $r1 = new java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr;

        $r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $i0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r4 = (java.util.concurrent.RunnableScheduledFuture[]) $r3;

        specialinvoke $r1.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: void <init>(java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue,java.util.concurrent.RunnableScheduledFuture[])>(r0, $r4);

        return $r1;
    }

    public volatile boolean offer(java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        java.lang.Runnable $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Runnable) r1;

        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean offer(java.lang.Runnable)>($r2);

        return $z0;
    }

    public volatile boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        java.lang.Runnable $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = (java.lang.Runnable) r1;

        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean offer(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r3, l0, r2);

        return $z0;
    }

    public boolean offer(java.lang.Runnable)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Runnable r1;
        java.util.concurrent.RunnableScheduledFuture r2, $r7;
        java.util.concurrent.locks.ReentrantLock r3;
        java.lang.Throwable r4, $r11;
        int i0, $i1, $i2;
        java.util.concurrent.RunnableScheduledFuture[] $r5, $r6, $r9;
        java.util.concurrent.locks.Condition $r8;
        java.lang.NullPointerException $r10;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Runnable;

        if r1 != null goto label01;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>()>();

        throw $r10;

     label01:
        r2 = (java.util.concurrent.RunnableScheduledFuture) r1;

        r3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label02:
        i0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $i1 = lengthof $r5;

        if i0 < $i1 goto label03;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void grow()>();

     label03:
        $i2 = i0 + 1;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size> = $i2;

     label04:
        if i0 != 0 goto label08;

     label05:
        $r9 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r9[0] = r2;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r2, 0);

     label06:
        $r6 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r7 = $r6[0];

        if $r7 != r2 goto label07;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;

        $r8 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Condition: void signal()>();

     label07:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label08:
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void siftUp(int,java.util.concurrent.RunnableScheduledFuture)>(i0, r2);

     label09:
        goto label06;

     label10:
        $r11 := @caughtexception;

        r4 = $r11;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public boolean offer(java.lang.Runnable, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Runnable r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean offer(java.lang.Runnable)>(r1);

        return $z0;
    }

    public volatile java.lang.Object peek()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture $r1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        $r1 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture peek()>();

        return $r1;
    }

    public java.util.concurrent.RunnableScheduledFuture peek()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r5;
        java.util.concurrent.RunnableScheduledFuture r3;
        java.util.concurrent.RunnableScheduledFuture[] $r4;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r3 = $r4[0];

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public volatile java.lang.Object poll()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture $r1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        $r1 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture poll()>();

        return $r1;
    }

    public volatile java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.RunnableScheduledFuture $r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture poll(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return $r2;
    }

    public java.util.concurrent.RunnableScheduledFuture poll()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r8;
        java.util.concurrent.RunnableScheduledFuture r3, r4, r5;
        long l0;
        java.util.concurrent.RunnableScheduledFuture[] $r6;
        java.util.concurrent.TimeUnit $r7;
        byte $b1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r6 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r3 = $r6[0];

     label2:
        if r3 == null goto label5;

     label3:
        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l0 = interfaceinvoke r3.<java.util.concurrent.RunnableScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>($r7);

     label4:
        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label7;

     label5:
        r5 = null;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r5;

     label7:
        r4 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)>(r3);

     label8:
        r5 = r4;

        goto label6;

     label9:
        $r8 := @caughtexception;

        r2 = $r8;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public java.util.concurrent.RunnableScheduledFuture poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        long l0, l1, l2, l3, $l7;
        java.util.concurrent.TimeUnit r1, $r13;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, r8, $r29, $r31;
        java.util.concurrent.RunnableScheduledFuture r4, r5, r6, r11, r12, $r24, $r33;
        java.lang.Thread r7, r9, r10, $r16, $r17, $r19, $r28, $r30;
        java.util.concurrent.RunnableScheduledFuture[] $r14, $r20, $r23, $r25, $r34;
        byte $b4, $b5, $b6, $b8;
        java.util.concurrent.locks.Condition $r15, $r18, $r21, $r22, $r26, $r27, $r32;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label01:
        $r14 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r4 = $r14[0];

     label02:
        if r4 != null goto label06;

        $b8 = l1 cmp 0L;

        if $b8 > 0 goto label04;

        r10 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        r6 = null;

        if r10 != null goto label03;

        $r25 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r12 = $r25[0];

        r6 = null;

        if r12 == null goto label03;

        $r26 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r26.<java.util.concurrent.locks.Condition: void signal()>();

     label03:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r6;

     label04:
        $r27 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        l1 = interfaceinvoke $r27.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

     label05:
        goto label01;

     label06:
        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l2 = interfaceinvoke r4.<java.util.concurrent.RunnableScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>($r13);

     label07:
        $b4 = l2 cmp 0L;

        if $b4 > 0 goto label10;

     label08:
        r5 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)>(r4);

     label09:
        r6 = r5;

        $r19 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        if $r19 != null goto label03;

        $r23 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r24 = $r23[0];

        if $r24 == null goto label03;

        $r22 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r22.<java.util.concurrent.locks.Condition: void signal()>();

        goto label03;

     label10:
        $b6 = l1 cmp 0L;

        if $b6 > 0 goto label11;

        r9 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        r6 = null;

        if r9 != null goto label03;

        $r20 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r11 = $r20[0];

        r6 = null;

        if r11 == null goto label03;

        $r21 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r21.<java.util.concurrent.locks.Condition: void signal()>();

        r6 = null;

        goto label03;

     label11:
        $b5 = l1 cmp l2;

        if $b5 < 0 goto label13;

     label12:
        $r16 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        if $r16 == null goto label15;

     label13:
        $r15 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        l1 = interfaceinvoke $r15.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

     label14:
        goto label01;

     label15:
        r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = r7;

     label16:
        $r18 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        l3 = interfaceinvoke $r18.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l2);

     label17:
        $l7 = l2 - l3;

        l1 = l1 - $l7;

     label18:
        $r17 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        if $r17 != r7 goto label01;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;

     label19:
        goto label01;

     label20:
        $r29 := @caughtexception;

        r3 = $r29;

        $r28 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        if $r28 != null goto label21;

        $r34 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r33 = $r34[0];

        if $r33 == null goto label21;

        $r32 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r32.<java.util.concurrent.locks.Condition: void signal()>();

     label21:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label22:
        $r31 := @caughtexception;

        r8 = $r31;

     label23:
        $r30 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        if $r30 != r7 goto label24;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;

     label24:
        throw r8;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label23 to label24 with label20;
    }

    public volatile void put(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        java.lang.Runnable $r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Runnable) r1;

        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void put(java.lang.Runnable)>($r2);

        return;
    }

    public void put(java.lang.Runnable)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Runnable r1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Runnable;

        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean offer(java.lang.Runnable)>(r1);

        return;
    }

    public int remainingCapacity()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        return 2147483647;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r11;
        int i0, i1, $i2;
        java.util.concurrent.RunnableScheduledFuture r4, $r6, $r10;
        boolean z0;
        java.util.concurrent.RunnableScheduledFuture[] $r5, $r7, $r8, $r9;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int indexOf(java.lang.Object)>(r1);

     label2:
        if i0 >= 0 goto label4;

        z0 = 0;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label4:
        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r6 = $r5[i0];

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>($r6, -1);

        $i2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        i1 = -1 + $i2;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size> = i1;

        $r7 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r4 = $r7[i1];

        $r8 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r8[i1] = null;

     label5:
        if i1 == i0 goto label7;

     label6:
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void siftDown(int,java.util.concurrent.RunnableScheduledFuture)>(i0, r4);

        $r9 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r10 = $r9[i0];

        if $r10 != r4 goto label7;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void siftUp(int,java.util.concurrent.RunnableScheduledFuture)>(i0, r4);

     label7:
        z0 = 1;

        goto label3;

     label8:
        $r11 := @caughtexception;

        r3 = $r11;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public int size()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r3;
        int i0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public volatile java.lang.Object take() throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture $r1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        $r1 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture take()>();

        return $r1;
    }

    public java.util.concurrent.RunnableScheduledFuture take() throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, r6, $r17, $r19;
        java.util.concurrent.RunnableScheduledFuture r3, r4, $r16, $r24;
        long l0;
        java.lang.Thread r5, $r9, $r11, $r14, $r20, $r22;
        java.util.concurrent.RunnableScheduledFuture[] $r7, $r13, $r21;
        java.util.concurrent.TimeUnit $r8;
        byte $b1;
        java.util.concurrent.locks.Condition $r10, $r12, $r15, $r18, $r23;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label01:
        $r7 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        r3 = $r7[0];

     label02:
        if r3 != null goto label07;

     label03:
        $r18 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r18.<java.util.concurrent.locks.Condition: void await()>();

     label04:
        goto label01;

     label05:
        $r19 := @caughtexception;

        r2 = $r19;

        $r22 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        if $r22 != null goto label06;

        $r21 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r24 = $r21[0];

        if $r24 == null goto label06;

        $r23 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r23.<java.util.concurrent.locks.Condition: void signal()>();

     label06:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label07:
        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l0 = interfaceinvoke r3.<java.util.concurrent.RunnableScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>($r8);

     label08:
        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label12;

     label09:
        r4 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)>(r3);

     label10:
        $r14 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        if $r14 != null goto label11;

        $r13 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $r16 = $r13[0];

        if $r16 == null goto label11;

        $r15 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r15.<java.util.concurrent.locks.Condition: void signal()>();

     label11:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r4;

     label12:
        $r9 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        if $r9 == null goto label14;

        $r12 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r12.<java.util.concurrent.locks.Condition: void await()>();

     label13:
        goto label01;

     label14:
        r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = r5;

     label15:
        $r10 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r10.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l0);

     label16:
        $r11 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        if $r11 != r5 goto label01;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;

     label17:
        goto label01;

     label18:
        $r17 := @caughtexception;

        r6 = $r17;

     label19:
        $r20 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;

        if $r20 != r5 goto label20;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;

     label20:
        throw r6;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label12 to label13 with label05;
        catch java.lang.Throwable from label14 to label15 with label05;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label05;
        catch java.lang.Throwable from label19 to label20 with label05;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r5;
        java.lang.Object[] r3;
        int $i0;
        java.util.concurrent.RunnableScheduledFuture[] $r4;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $i0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>($r4, $i0, class "[Ljava/lang/Object;");

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object[] r1, r4, $r8;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.concurrent.RunnableScheduledFuture[] $r5, $r6;
        java.lang.Class $r7;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;

        r1 := @parameter0: java.lang.Object[];

        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $i1 = lengthof r1;

        $i0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        if $i1 >= $i0 goto label3;

        $r6 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $i6 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>($r6, $i6, $r7);

        r4 = (java.lang.Object[]) $r8;

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r4;

     label3:
        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;

        $i2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i2);

        $i4 = lengthof r1;

        $i3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        if $i4 <= $i3 goto label4;

        $i5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

        r1[$i5] = null;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r1;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int INITIAL_CAPACITY> = 16;

        return;
    }
}
