class java.net.InetAddress$1 extends java.lang.Thread
{
    final java.net.InetAddress this$0;
    final java.net.InetAddress val$destinationAddress;
    final java.util.concurrent.atomic.AtomicBoolean val$isReachable;
    final java.util.concurrent.CountDownLatch val$latch;
    final java.net.InetAddress val$sourceAddress;
    final int val$timeout;

    void <init>(java.net.InetAddress, java.net.InetAddress, java.net.InetAddress, int, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.CountDownLatch)
    {
        java.net.InetAddress$1 r0;
        java.net.InetAddress r1, r2, r3;
        int i0;
        java.util.concurrent.atomic.AtomicBoolean r4;
        java.util.concurrent.CountDownLatch r5;

        r0 := @this: java.net.InetAddress$1;

        r1 := @parameter0: java.net.InetAddress;

        r2 := @parameter1: java.net.InetAddress;

        r3 := @parameter2: java.net.InetAddress;

        i0 := @parameter3: int;

        r4 := @parameter4: java.util.concurrent.atomic.AtomicBoolean;

        r5 := @parameter5: java.util.concurrent.CountDownLatch;

        r0.<java.net.InetAddress$1: java.net.InetAddress this$0> = r1;

        r0.<java.net.InetAddress$1: java.net.InetAddress val$destinationAddress> = r2;

        r0.<java.net.InetAddress$1: java.net.InetAddress val$sourceAddress> = r3;

        r0.<java.net.InetAddress$1: int val$timeout> = i0;

        r0.<java.net.InetAddress$1: java.util.concurrent.atomic.AtomicBoolean val$isReachable> = r4;

        r0.<java.net.InetAddress$1: java.util.concurrent.CountDownLatch val$latch> = r5;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        return;
    }

    public void run()
    {
        java.net.InetAddress$1 r0;
        int $i0;
        java.net.InetAddress $r2, $r3, $r4;
        boolean $z0;
        java.util.concurrent.CountDownLatch $r5, $r7, $r8;
        java.util.concurrent.atomic.AtomicBoolean $r6;
        long $l1;
        byte $b2;
        java.io.IOException $r9;

        r0 := @this: java.net.InetAddress$1;

     label1:
        $r4 = r0.<java.net.InetAddress$1: java.net.InetAddress this$0>;

        $r3 = r0.<java.net.InetAddress$1: java.net.InetAddress val$destinationAddress>;

        $r2 = r0.<java.net.InetAddress$1: java.net.InetAddress val$sourceAddress>;

        $i0 = r0.<java.net.InetAddress$1: int val$timeout>;

        $z0 = staticinvoke <java.net.InetAddress: boolean access$000(java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,int)>($r4, $r3, $r2, $i0);

        if $z0 == 0 goto label5;

        $r6 = r0.<java.net.InetAddress$1: java.util.concurrent.atomic.AtomicBoolean val$isReachable>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label2:
        $r7 = r0.<java.net.InetAddress$1: java.util.concurrent.CountDownLatch val$latch>;

        $l1 = virtualinvoke $r7.<java.util.concurrent.CountDownLatch: long getCount()>();

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label5;

        $r8 = r0.<java.net.InetAddress$1: java.util.concurrent.CountDownLatch val$latch>;

        virtualinvoke $r8.<java.util.concurrent.CountDownLatch: void countDown()>();

     label3:
        goto label2;

     label4:
        $r9 := @caughtexception;

     label5:
        $r5 = r0.<java.net.InetAddress$1: java.util.concurrent.CountDownLatch val$latch>;

        virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }
}
