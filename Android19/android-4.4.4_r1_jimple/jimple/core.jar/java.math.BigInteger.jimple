public class java.math.BigInteger extends java.lang.Number implements java.lang.Comparable, java.io.Serializable
{
    static final java.math.BigInteger MINUS_ONE;
    public static final java.math.BigInteger ONE;
    static final java.math.BigInteger[] SMALL_VALUES;
    public static final java.math.BigInteger TEN;
    public static final java.math.BigInteger ZERO;
    private static final long serialVersionUID;
    private transient java.math.BigInt bigInt;
    transient int[] digits;
    private transient int firstNonzeroDigit;
    private transient int hashCode;
    private transient boolean javaIsValid;
    private byte[] magnitude;
    private transient boolean nativeIsValid;
    transient int numberLength;
    transient int sign;
    private int signum;

    static void <clinit>()
    {
        java.math.BigInteger[] r0;
        java.math.BigInteger $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        <java.math.BigInteger: long serialVersionUID> = -8287574255936472291L;

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,long)>(0, 0L);

        <java.math.BigInteger: java.math.BigInteger ZERO> = $r1;

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,long)>(1, 1L);

        <java.math.BigInteger: java.math.BigInteger ONE> = $r2;

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,long)>(1, 10L);

        <java.math.BigInteger: java.math.BigInteger TEN> = $r3;

        $r4 = new java.math.BigInteger;

        specialinvoke $r4.<java.math.BigInteger: void <init>(int,long)>(-1, 1L);

        <java.math.BigInteger: java.math.BigInteger MINUS_ONE> = $r4;

        r0 = newarray (java.math.BigInteger)[11];

        $r5 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        r0[0] = $r5;

        $r6 = <java.math.BigInteger: java.math.BigInteger ONE>;

        r0[1] = $r6;

        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,long)>(1, 2L);

        r0[2] = $r7;

        $r8 = new java.math.BigInteger;

        specialinvoke $r8.<java.math.BigInteger: void <init>(int,long)>(1, 3L);

        r0[3] = $r8;

        $r9 = new java.math.BigInteger;

        specialinvoke $r9.<java.math.BigInteger: void <init>(int,long)>(1, 4L);

        r0[4] = $r9;

        $r10 = new java.math.BigInteger;

        specialinvoke $r10.<java.math.BigInteger: void <init>(int,long)>(1, 5L);

        r0[5] = $r10;

        $r11 = new java.math.BigInteger;

        specialinvoke $r11.<java.math.BigInteger: void <init>(int,long)>(1, 6L);

        r0[6] = $r11;

        $r12 = new java.math.BigInteger;

        specialinvoke $r12.<java.math.BigInteger: void <init>(int,long)>(1, 7L);

        r0[7] = $r12;

        $r13 = new java.math.BigInteger;

        specialinvoke $r13.<java.math.BigInteger: void <init>(int,long)>(1, 8L);

        r0[8] = $r13;

        $r14 = new java.math.BigInteger;

        specialinvoke $r14.<java.math.BigInteger: void <init>(int,long)>(1, 9L);

        r0[9] = $r14;

        $r15 = <java.math.BigInteger: java.math.BigInteger TEN>;

        r0[10] = $r15;

        <java.math.BigInteger: java.math.BigInteger[] SMALL_VALUES> = r0;

        return;
    }

    public void <init>(int, int, java.util.Random)
    {
        java.math.BigInteger r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.Random r1;
        java.math.BigInt r2, $r3, $r4;
        boolean $z0;
        java.lang.ArithmeticException $r5;
        long $l10;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.Random;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigInteger: boolean nativeIsValid> = 0;

        r0.<java.math.BigInteger: boolean javaIsValid> = 0;

        r0.<java.math.BigInteger: int firstNonzeroDigit> = -2;

        r0.<java.math.BigInteger: int hashCode> = 0;

        if i0 >= 2 goto label1;

        $r5 = new java.lang.ArithmeticException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitLength < 2: ");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label1:
        if i0 >= 16 goto label4;

     label2:
        $i4 = virtualinvoke r1.<java.util.Random: int nextInt()>();

        $i5 = 1 << i0;

        $i6 = -1 + $i5;

        $i9 = $i4 & $i6;

        $i7 = i0 - 1;

        $i8 = 1 << $i7;

        i2 = $i9 | $i8;

        if i0 <= 2 goto label3;

        i2 = i2 | 1;

     label3:
        $z0 = staticinvoke <java.math.BigInteger: boolean isSmallPrime(int)>(i2);

        if $z0 == 0 goto label2;

        $r4 = new java.math.BigInt;

        specialinvoke $r4.<java.math.BigInt: void <init>()>();

        r2 = $r4;

        $l10 = (long) i2;

        virtualinvoke r2.<java.math.BigInt: void putULongInt(long,boolean)>($l10, 0);

        specialinvoke r0.<java.math.BigInteger: void setBigInt(java.math.BigInt)>(r2);

        return;

     label4:
        $r3 = staticinvoke <java.math.BigInt: java.math.BigInt generatePrimeDefault(int)>(i0);

        specialinvoke r0.<java.math.BigInteger: void setBigInt(java.math.BigInt)>($r3);

        $i3 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        if $i3 != i0 goto label4;

        return;
    }

    void <init>(int, int, int[])
    {
        java.math.BigInteger r0;
        int i0, i1;
        int[] r1;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigInteger: boolean nativeIsValid> = 0;

        r0.<java.math.BigInteger: boolean javaIsValid> = 0;

        r0.<java.math.BigInteger: int firstNonzeroDigit> = -2;

        r0.<java.math.BigInteger: int hashCode> = 0;

        specialinvoke r0.<java.math.BigInteger: void setJavaRepresentation(int,int,int[])>(i0, i1, r1);

        return;
    }

    void <init>(int, long)
    {
        java.math.BigInteger r0;
        int i0;
        long l1;
        java.math.BigInt r1, $r2;
        boolean z0;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigInteger: boolean nativeIsValid> = 0;

        r0.<java.math.BigInteger: boolean javaIsValid> = 0;

        r0.<java.math.BigInteger: int firstNonzeroDigit> = -2;

        r0.<java.math.BigInteger: int hashCode> = 0;

        $r2 = new java.math.BigInt;

        specialinvoke $r2.<java.math.BigInt: void <init>()>();

        r1 = $r2;

        z0 = 0;

        if i0 >= 0 goto label1;

        z0 = 1;

     label1:
        virtualinvoke r1.<java.math.BigInt: void putULongInt(long,boolean)>(l1, z0);

        specialinvoke r0.<java.math.BigInteger: void setBigInt(java.math.BigInt)>(r1);

        return;
    }

    public void <init>(int, java.util.Random)
    {
        java.math.BigInteger r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.Random r1;
        int[] r2, $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Random;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigInteger: boolean nativeIsValid> = 0;

        r0.<java.math.BigInteger: boolean javaIsValid> = 0;

        r0.<java.math.BigInteger: int firstNonzeroDigit> = -2;

        r0.<java.math.BigInteger: int hashCode> = 0;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("numBits < 0: ");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        if i0 != 0 goto label3;

        $r3 = newarray (int)[1];

        $r3[0] = 0;

        specialinvoke r0.<java.math.BigInteger: void setJavaRepresentation(int,int,int[])>(0, 1, $r3);

     label2:
        r0.<java.math.BigInteger: boolean javaIsValid> = 1;

        return;

     label3:
        $i4 = i0 + 31;

        i1 = $i4 >> 5;

        r2 = newarray (int)[i1];

        i2 = 0;

     label4:
        if i2 >= i1 goto label5;

        $i9 = virtualinvoke r1.<java.util.Random: int nextInt()>();

        r2[i2] = $i9;

        i2 = i2 + 1;

        goto label4;

     label5:
        i3 = i1 - 1;

        $i7 = r2[i3];

        $i5 = neg i0;

        $i6 = 31 & $i5;

        $i8 = $i7 >>> $i6;

        r2[i3] = $i8;

        specialinvoke r0.<java.math.BigInteger: void setJavaRepresentation(int,int,int[])>(1, i1, r2);

        goto label2;
    }

    public void <init>(int, byte[])
    {
        java.math.BigInteger r0;
        int i0, i1, i2, i4;
        byte[] r1;
        boolean z0;
        java.math.BigInt r2, $r8;
        java.lang.NumberFormatException $r3, $r9;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        byte $b3;
        java.lang.NullPointerException $r10;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        z0 = 1;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigInteger: boolean nativeIsValid> = 0;

        r0.<java.math.BigInteger: boolean javaIsValid> = 0;

        r0.<java.math.BigInteger: int firstNonzeroDigit> = -2;

        r0.<java.math.BigInteger: int hashCode> = 0;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("magnitude == null");

        throw $r10;

     label1:
        if i0 < -1 goto label2;

        i4 = (int) 1;

        if i0 <= i4 goto label3;

     label2:
        $r3 = new java.lang.NumberFormatException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid signum: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label3:
        if i0 != 0 goto label6;

        i1 = lengthof r1;

        i2 = 0;

     label4:
        if i2 >= i1 goto label6;

        $b3 = r1[i2];

        if $b3 == 0 goto label5;

        $r9 = new java.lang.NumberFormatException;

        specialinvoke $r9.<java.lang.NumberFormatException: void <init>(java.lang.String)>("signum-magnitude mismatch");

        throw $r9;

     label5:
        i2 = i2 + 1;

        goto label4;

     label6:
        $r8 = new java.math.BigInt;

        specialinvoke $r8.<java.math.BigInt: void <init>()>();

        r2 = $r8;

        if i0 >= 0 goto label8;

     label7:
        virtualinvoke r2.<java.math.BigInt: void putBigEndian(byte[],boolean)>(r1, z0);

        specialinvoke r0.<java.math.BigInteger: void setBigInt(java.math.BigInt)>(r2);

        return;

     label8:
        z0 = 0;

        goto label7;
    }

    public void <init>(java.lang.String)
    {
        java.math.BigInteger r0;
        java.lang.String r1;
        java.math.BigInt r2, $r3;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigInteger: boolean nativeIsValid> = 0;

        r0.<java.math.BigInteger: boolean javaIsValid> = 0;

        r0.<java.math.BigInteger: int firstNonzeroDigit> = -2;

        r0.<java.math.BigInteger: int hashCode> = 0;

        $r3 = new java.math.BigInt;

        specialinvoke $r3.<java.math.BigInt: void <init>()>();

        r2 = $r3;

        virtualinvoke r2.<java.math.BigInt: void putDecString(java.lang.String)>(r1);

        specialinvoke r0.<java.math.BigInteger: void setBigInt(java.math.BigInt)>(r2);

        return;
    }

    public void <init>(java.lang.String, int)
    {
        java.math.BigInteger r0;
        java.lang.String r1, $r8;
        int i0;
        java.math.BigInt r2, r3, $r10, $r11;
        java.lang.NumberFormatException $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7;
        boolean $z0;
        java.lang.NullPointerException $r12;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigInteger: boolean nativeIsValid> = 0;

        r0.<java.math.BigInteger: boolean javaIsValid> = 0;

        r0.<java.math.BigInteger: int firstNonzeroDigit> = -2;

        r0.<java.math.BigInteger: int hashCode> = 0;

        if r1 != null goto label1;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("value == null");

        throw $r12;

     label1:
        if i0 != 10 goto label2;

        $r11 = new java.math.BigInt;

        specialinvoke $r11.<java.math.BigInt: void <init>()>();

        r2 = $r11;

        virtualinvoke r2.<java.math.BigInt: void putDecString(java.lang.String)>(r1);

        specialinvoke r0.<java.math.BigInteger: void setBigInt(java.math.BigInt)>(r2);

        return;

     label2:
        if i0 != 16 goto label3;

        $r10 = new java.math.BigInt;

        specialinvoke $r10.<java.math.BigInt: void <init>()>();

        r3 = $r10;

        virtualinvoke r3.<java.math.BigInt: void putHexString(java.lang.String)>(r1);

        specialinvoke r0.<java.math.BigInteger: void setBigInt(java.math.BigInt)>(r3);

        return;

     label3:
        if i0 < 2 goto label4;

        if i0 <= 36 goto label5;

     label4:
        $r4 = new java.lang.NumberFormatException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid radix: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label5:
        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label6;

        $r9 = new java.lang.NumberFormatException;

        specialinvoke $r9.<java.lang.NumberFormatException: void <init>(java.lang.String)>("value.isEmpty()");

        throw $r9;

     label6:
        staticinvoke <java.math.BigInteger: void parseFromString(java.math.BigInteger,java.lang.String,int)>(r0, r1, i0);

        return;
    }

    void <init>(java.math.BigInt)
    {
        java.math.BigInteger r0;
        java.math.BigInt r1;
        java.lang.AssertionError $r2;
        long $l0;
        byte $b1;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInt;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigInteger: boolean nativeIsValid> = 0;

        r0.<java.math.BigInteger: boolean javaIsValid> = 0;

        r0.<java.math.BigInteger: int firstNonzeroDigit> = -2;

        r0.<java.math.BigInteger: int hashCode> = 0;

        if r1 == null goto label1;

        $l0 = virtualinvoke r1.<java.math.BigInt: long getNativeBIGNUM()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        specialinvoke r0.<java.math.BigInteger: void setBigInt(java.math.BigInt)>(r1);

        return;
    }

    public void <init>(byte[])
    {
        java.math.BigInteger r0;
        byte[] r1;
        java.math.BigInt r2, $r3;
        int $i0;
        java.lang.NumberFormatException $r4;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigInteger: boolean nativeIsValid> = 0;

        r0.<java.math.BigInteger: boolean javaIsValid> = 0;

        r0.<java.math.BigInteger: int firstNonzeroDigit> = -2;

        r0.<java.math.BigInteger: int hashCode> = 0;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $r4 = new java.lang.NumberFormatException;

        specialinvoke $r4.<java.lang.NumberFormatException: void <init>(java.lang.String)>("value.length == 0");

        throw $r4;

     label1:
        $r3 = new java.math.BigInt;

        specialinvoke $r3.<java.math.BigInt: void <init>()>();

        r2 = $r3;

        virtualinvoke r2.<java.math.BigInt: void putBigEndianTwosComplement(byte[])>(r1);

        specialinvoke r0.<java.math.BigInteger: void setBigInt(java.math.BigInt)>(r2);

        return;
    }

    static int inplaceAdd(int[], int, int)
    {
        int[] r0;
        int i0, i1, i3, $i7, $i8, $i11;
        long l2, l4, $l5, $l9, $l10;
        byte $b6;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l5 = (long) i1;

        l2 = 4294967295L & $l5;

        i3 = 0;

     label1:
        $b6 = l2 cmp 0L;

        if $b6 == 0 goto label2;

        if i3 >= i0 goto label2;

        $i8 = r0[i3];

        $l9 = (long) $i8;

        $l10 = 4294967295L & $l9;

        l4 = l2 + $l10;

        $i11 = (int) l4;

        r0[i3] = $i11;

        l2 = l4 >> 32;

        i3 = i3 + 1;

        goto label1;

     label2:
        $i7 = (int) l2;

        return $i7;
    }

    private static boolean isSmallPrime(int)
    {
        int i0, i1, i2, $i3, $i4;
        double $d0, $d1;

        i0 := @parameter0: int;

        if i0 != 2 goto label2;

     label1:
        return 1;

     label2:
        $i3 = i0 % 2;

        if $i3 != 0 goto label3;

        return 0;

     label3:
        $d0 = (double) i0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        i1 = (int) $d1;

        i2 = 3;

     label4:
        if i2 > i1 goto label1;

        $i4 = i0 % i2;

        if $i4 != 0 goto label5;

        return 0;

     label5:
        i2 = i2 + 2;

        goto label4;
    }

    static int multiplyByInt(int[], int[], int, int)
    {
        int[] r0, r1;
        int i0, i1, i3, $i5, $i6, $i12;
        long l2, l4, $l7, $l8, $l9, $l10, $l11;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l2 = 0L;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $i6 = r1[i3];

        $l7 = (long) $i6;

        $l10 = 4294967295L & $l7;

        $l8 = (long) i1;

        $l9 = 4294967295L & $l8;

        $l11 = $l10 * $l9;

        l4 = l2 + $l11;

        $i12 = (int) l4;

        r0[i3] = $i12;

        l2 = l4 >>> 32;

        i3 = i3 + 1;

        goto label1;

     label2:
        $i5 = (int) l2;

        return $i5;
    }

    private static void parseFromString(java.math.BigInteger, java.lang.String, int)
    {
        java.math.BigInteger r0;
        java.lang.String r1, $r4;
        int i0, i1, i2, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, $i16, $i17, $i18;
        byte b3, b4;
        int[] r2, $r3, $r5;
        char $c15;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = i1;

        $c15 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c15 != 45 goto label5;

        b3 = -1;

        b4 = 1;

        i1 = i1 + -1;

     label1:
        $r3 = <java.math.Conversion: int[] digitFitInInt>;

        i5 = $r3[i0];

        i6 = i1 / i5;

        i7 = i1 % i5;

        if i7 == 0 goto label2;

        i6 = i6 + 1;

     label2:
        r2 = newarray (int)[i6];

        $r5 = <java.math.Conversion: int[] bigRadices>;

        $i16 = i0 - 2;

        i8 = $r5[$i16];

        if i7 != 0 goto label3;

        i7 = i5;

     label3:
        i9 = b4 + i7;

        i10 = b4;

        i11 = 0;

     label4:
        if i10 >= i2 goto label6;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i10, i9);

        i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r4, i0);

        $i17 = staticinvoke <java.math.BigInteger: int multiplyByInt(int[],int[],int,int)>(r2, r2, i11, i8);

        $i18 = staticinvoke <java.math.BigInteger: int inplaceAdd(int[],int,int)>(r2, i11, i12);

        i14 = $i17 + $i18;

        i13 = i11 + 1;

        r2[i11] = i14;

        i10 = i9;

        i9 = i10 + i5;

        i11 = i13;

        goto label4;

     label5:
        b3 = 1;

        b4 = 0;

        goto label1;

     label6:
        specialinvoke r0.<java.math.BigInteger: void setJavaRepresentation(int,int,int[])>(b3, i11, r2);

        return;
    }

    public static java.math.BigInteger probablePrime(int, java.util.Random)
    {
        int i0;
        java.util.Random r0;
        java.math.BigInteger $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.Random;

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,int,java.util.Random)>(i0, 100, r0);

        return $r1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.math.BigInteger r0;
        java.io.ObjectInputStream r1;
        java.math.BigInt r2, $r4;
        byte[] r3;
        boolean z0;
        int $i0;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r4 = new java.math.BigInt;

        specialinvoke $r4.<java.math.BigInt: void <init>()>();

        r2 = $r4;

        r3 = r0.<java.math.BigInteger: byte[] magnitude>;

        $i0 = r0.<java.math.BigInteger: int signum>;

        if $i0 >= 0 goto label2;

        z0 = 1;

     label1:
        virtualinvoke r2.<java.math.BigInt: void putBigEndian(byte[],boolean)>(r3, z0);

        specialinvoke r0.<java.math.BigInteger: void setBigInt(java.math.BigInt)>(r2);

        return;

     label2:
        z0 = 0;

        goto label1;
    }

    private void setBigInt(java.math.BigInt)
    {
        java.math.BigInteger r0;
        java.math.BigInt r1;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInt;

        r0.<java.math.BigInteger: java.math.BigInt bigInt> = r1;

        r0.<java.math.BigInteger: boolean nativeIsValid> = 1;

        return;
    }

    private void setJavaRepresentation(int, int, int[])
    {
        java.math.BigInteger r0;
        int i0, i1, i2, $i3, $i4;
        int[] r1;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

     label1:
        if i1 <= 0 goto label2;

        i1 = i1 + -1;

        $i4 = r1[i1];

        if $i4 == 0 goto label1;

     label2:
        i2 = i1 + 1;

        $i3 = r1[i1];

        if $i3 != 0 goto label3;

        i0 = 0;

     label3:
        r0.<java.math.BigInteger: int sign> = i0;

        r0.<java.math.BigInteger: int[] digits> = r1;

        r0.<java.math.BigInteger: int numberLength> = i2;

        r0.<java.math.BigInteger: boolean javaIsValid> = 1;

        return;
    }

    private byte[] twosComplement()
    {
        java.math.BigInteger r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i30, $i31;
        byte[] r1;
        byte b17, $b25, $b29, $b32;
        int[] $r2, $r3, $r4;

        r0 := @this: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $i16 = r0.<java.math.BigInteger: int sign>;

        if $i16 != 0 goto label02;

        r1 = newarray (byte)[1];

        r1[0] = 0;

     label01:
        return r1;

     label02:
        i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i19 = i0 >> 3;

        i2 = 1 + $i19;

        r1 = newarray (byte)[i2];

        i3 = 4;

        $i18 = r0.<java.math.BigInteger: int numberLength>;

        $i21 = $i18 << 2;

        $i20 = i2 - $i21;

        if $i20 != 1 goto label08;

        $i30 = r0.<java.math.BigInteger: int sign>;

        if $i30 >= 0 goto label07;

        b17 = -1;

     label03:
        r1[0] = b17;

        i5 = 4;

        i6 = 1;

     label04:
        i7 = i1;

        $i23 = i1 << 2;

        i8 = i2 - $i23;

        $i22 = r0.<java.math.BigInteger: int sign>;

        if $i22 >= 0 goto label14;

        $r3 = r0.<java.math.BigInteger: int[] digits>;

        $i27 = $r3[i7];

        i11 = neg $i27;

        i12 = i7 + 1;

        $i28 = r0.<java.math.BigInteger: int numberLength>;

        if i12 != $i28 goto label05;

        i3 = i5;

     label05:
        i13 = 0;

     label06:
        if i13 >= i3 goto label11;

        i8 = i8 + -1;

        $b29 = (byte) i11;

        r1[i8] = $b29;

        i13 = i13 + 1;

        i11 = i11 >> 8;

        goto label06;

     label07:
        b17 = 0;

        goto label03;

     label08:
        i4 = i2 & 3;

        if i4 != 0 goto label10;

        i5 = 4;

     label09:
        i6 = 0;

        goto label04;

     label10:
        i5 = i4;

        goto label09;

     label11:
        if i8 <= i6 goto label01;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i26 = $r4[i12];

        i15 = -1 ^ $i26;

        i12 = i12 + 1;

        $i31 = r0.<java.math.BigInteger: int numberLength>;

        if i12 != $i31 goto label12;

        i3 = i5;

     label12:
        i14 = 0;

     label13:
        if i14 >= i3 goto label11;

        i8 = i8 + -1;

        $b32 = (byte) i15;

        r1[i8] = $b32;

        i14 = i14 + 1;

        i15 = i15 >> 8;

        goto label13;

     label14:
        if i8 <= i6 goto label01;

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        i9 = $r2[i7];

        i7 = i7 + 1;

        $i24 = r0.<java.math.BigInteger: int numberLength>;

        if i7 != $i24 goto label15;

        i3 = i5;

     label15:
        i10 = 0;

     label16:
        if i10 >= i3 goto label14;

        i8 = i8 + -1;

        $b25 = (byte) i9;

        r1[i8] = $b25;

        i10 = i10 + 1;

        i9 = i9 >> 8;

        goto label16;
    }

    public static java.math.BigInteger valueOf(long)
    {
        long l0, $l3, $l7;
        byte $b1, $b4, $b6;
        java.math.BigInteger[] $r0, $r2;
        int $i2, $i5;
        java.math.BigInteger $r1, $r3, $r4, $r5;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $b6 = l0 cmp -1L;

        if $b6 == 0 goto label1;

        $r5 = new java.math.BigInteger;

        $l7 = neg l0;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,long)>(-1, $l7);

        return $r5;

     label1:
        $r4 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        return $r4;

     label2:
        $r0 = <java.math.BigInteger: java.math.BigInteger[] SMALL_VALUES>;

        $i2 = lengthof $r0;

        $l3 = (long) $i2;

        $b4 = l0 cmp $l3;

        if $b4 >= 0 goto label3;

        $r2 = <java.math.BigInteger: java.math.BigInteger[] SMALL_VALUES>;

        $i5 = (int) l0;

        $r3 = $r2[$i5];

        return $r3;

     label3:
        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,long)>(1, l0);

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.math.BigInteger r0;
        java.io.ObjectOutputStream r1;
        java.math.BigInt r2;
        int $i0;
        byte[] $r3;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $i0 = virtualinvoke r2.<java.math.BigInt: int sign()>();

        r0.<java.math.BigInteger: int signum> = $i0;

        $r3 = virtualinvoke r2.<java.math.BigInt: byte[] bigEndianMagnitude()>();

        r0.<java.math.BigInteger: byte[] magnitude> = $r3;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    public java.math.BigInteger abs()
    {
        java.math.BigInteger r0, $r3;
        java.math.BigInt r1, r2;
        int $i0;

        r0 := @this: java.math.BigInteger;

        r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $i0 = virtualinvoke r1.<java.math.BigInt: int sign()>();

        if $i0 < 0 goto label1;

        return r0;

     label1:
        r2 = virtualinvoke r1.<java.math.BigInt: java.math.BigInt copy()>();

        virtualinvoke r2.<java.math.BigInt: void setSign(int)>(1);

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(java.math.BigInt)>(r2);

        return $r3;
    }

    public java.math.BigInteger add(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r4;
        java.math.BigInt r2, r3, $r5;
        int $i0, $i1;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $i0 = virtualinvoke r3.<java.math.BigInt: int sign()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r2.<java.math.BigInt: int sign()>();

        if $i1 != 0 goto label2;

        return r1;

     label2:
        $r4 = new java.math.BigInteger;

        $r5 = staticinvoke <java.math.BigInt: java.math.BigInt addition(java.math.BigInt,java.math.BigInt)>(r2, r3);

        specialinvoke $r4.<java.math.BigInteger: void <init>(java.math.BigInt)>($r5);

        return $r4;
    }

    public java.math.BigInteger and(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        virtualinvoke r1.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $r2 = staticinvoke <java.math.Logical: java.math.BigInteger and(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r2;
    }

    public java.math.BigInteger andNot(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        virtualinvoke r1.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $r2 = staticinvoke <java.math.Logical: java.math.BigInteger andNot(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r2;
    }

    public int bitCount()
    {
        java.math.BigInteger r0;
        int $i0;

        r0 := @this: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $i0 = staticinvoke <java.math.BitLevel: int bitCount(java.math.BigInteger)>(r0);

        return $i0;
    }

    public int bitLength()
    {
        java.math.BigInteger r0;
        boolean $z0, $z1;
        java.math.BigInt $r1;
        int $i0, $i1;

        r0 := @this: java.math.BigInteger;

        $z0 = r0.<java.math.BigInteger: boolean nativeIsValid>;

        if $z0 != 0 goto label1;

        $z1 = r0.<java.math.BigInteger: boolean javaIsValid>;

        if $z1 == 0 goto label1;

        $i1 = staticinvoke <java.math.BitLevel: int bitLength(java.math.BigInteger)>(r0);

        return $i1;

     label1:
        $r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $i0 = virtualinvoke $r1.<java.math.BigInt: int bitLength()>();

        return $i0;
    }

    public java.math.BigInteger clearBit(int)
    {
        java.math.BigInteger r0;
        int i0;
        boolean $z0;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean testBit(int)>(i0);

        if $z0 == 0 goto label1;

        r0 = staticinvoke <java.math.BitLevel: java.math.BigInteger flipBit(java.math.BigInteger,int)>(r0, i0);

     label1:
        return r0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.math.BigInteger r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.math.BigInteger) r1;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        return $i0;
    }

    public int compareTo(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1;
        java.math.BigInt $r2, $r3;
        int $i0;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $i0 = staticinvoke <java.math.BigInt: int 'cmp'(java.math.BigInt,java.math.BigInt)>($r2, $r3);

        return $i0;
    }

    java.math.BigInteger copy()
    {
        java.math.BigInteger r0, $r3;
        int[] r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $i0 = r0.<java.math.BigInteger: int numberLength>;

        r1 = newarray (int)[$i0];

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        $i1 = r0.<java.math.BigInteger: int numberLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        $r3 = new java.math.BigInteger;

        $i3 = r0.<java.math.BigInteger: int sign>;

        $i2 = r0.<java.math.BigInteger: int numberLength>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>($i3, $i2, r1);

        return $r3;
    }

    public java.math.BigInteger divide(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r6;
        java.math.BigInt r2, $r3, $r4, $r5;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        $r3 = new java.math.BigInt;

        specialinvoke $r3.<java.math.BigInt: void <init>()>();

        r2 = $r3;

        $r4 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r5 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        staticinvoke <java.math.BigInt: void division(java.math.BigInt,java.math.BigInt,java.math.BigInt,java.math.BigInt)>($r4, $r5, r2, null);

        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(java.math.BigInt)>(r2);

        return $r6;
    }

    public java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r9, $r10;
        java.math.BigInt r2, r3, r4, $r6, $r7, $r8;
        java.math.BigInteger[] r5;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        r2 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r6 = new java.math.BigInt;

        specialinvoke $r6.<java.math.BigInt: void <init>()>();

        r3 = $r6;

        $r7 = new java.math.BigInt;

        specialinvoke $r7.<java.math.BigInt: void <init>()>();

        r4 = $r7;

        $r8 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        staticinvoke <java.math.BigInt: void division(java.math.BigInt,java.math.BigInt,java.math.BigInt,java.math.BigInt)>($r8, r2, r3, r4);

        r5 = newarray (java.math.BigInteger)[2];

        $r9 = new java.math.BigInteger;

        specialinvoke $r9.<java.math.BigInteger: void <init>(java.math.BigInt)>(r3);

        r5[0] = $r9;

        $r10 = new java.math.BigInteger;

        specialinvoke $r10.<java.math.BigInteger: void <init>(java.math.BigInt)>(r4);

        r5[1] = $r10;

        return r5;
    }

    public double doubleValue()
    {
        java.math.BigInteger r0;
        double $d0;

        r0 := @this: java.math.BigInteger;

        $d0 = staticinvoke <java.math.Conversion: double bigInteger2Double(java.math.BigInteger)>(r0);

        return $d0;
    }

    public boolean equals(java.lang.Object)
    {
        java.math.BigInteger r0, $r2;
        java.lang.Object r1;
        boolean $z0;
        int $i0;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof java.math.BigInteger;

        if $z0 == 0 goto label3;

        $r2 = (java.math.BigInteger) r1;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 == 0 goto label1;

        return 0;

     label3:
        return 0;
    }

    public java.math.BigInteger flipBit(int)
    {
        java.math.BigInteger r0, $r1;
        int i0;
        java.lang.ArithmeticException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n < 0: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $r1 = staticinvoke <java.math.BitLevel: java.math.BigInteger flipBit(java.math.BigInteger,int)>(r0, i0);

        return $r1;
    }

    public float floatValue()
    {
        java.math.BigInteger r0;
        double $d0;
        float $f0;

        r0 := @this: java.math.BigInteger;

        $d0 = virtualinvoke r0.<java.math.BigInteger: double doubleValue()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public java.math.BigInteger gcd(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2;
        java.math.BigInt $r3, $r4, $r5;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        $r2 = new java.math.BigInteger;

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r4 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r5 = staticinvoke <java.math.BigInt: java.math.BigInt gcd(java.math.BigInt,java.math.BigInt)>($r3, $r4);

        specialinvoke $r2.<java.math.BigInteger: void <init>(java.math.BigInt)>($r5);

        return $r2;
    }

    java.math.BigInt getBigInt()
    {
        java.math.BigInteger r0;
        java.lang.Throwable r1, $r7;
        java.math.BigInt r2, r4, $r5, $r6;
        int[] r3;
        boolean z0, $z1, $z2;
        int $i0;

        r0 := @this: java.math.BigInteger;

        $z1 = r0.<java.math.BigInteger: boolean nativeIsValid>;

        if $z1 == 0 goto label01;

        $r6 = r0.<java.math.BigInteger: java.math.BigInt bigInt>;

        return $r6;

     label01:
        entermonitor r0;

     label02:
        $z2 = r0.<java.math.BigInteger: boolean nativeIsValid>;

        if $z2 == 0 goto label07;

        r4 = r0.<java.math.BigInteger: java.math.BigInt bigInt>;

        exitmonitor r0;

     label03:
        return r4;

     label04:
        $r7 := @caughtexception;

        r1 = $r7;

     label05:
        exitmonitor r0;

     label06:
        throw r1;

     label07:
        $r5 = new java.math.BigInt;

        specialinvoke $r5.<java.math.BigInt: void <init>()>();

        r2 = $r5;

        r3 = r0.<java.math.BigInteger: int[] digits>;

        $i0 = r0.<java.math.BigInteger: int sign>;

        if $i0 >= 0 goto label11;

     label08:
        z0 = 1;

     label09:
        virtualinvoke r2.<java.math.BigInt: void putLittleEndianInts(int[],boolean)>(r3, z0);

        specialinvoke r0.<java.math.BigInteger: void setBigInt(java.math.BigInt)>(r2);

        exitmonitor r0;

     label10:
        return r2;

     label11:
        z0 = 0;

        goto label09;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
    }

    int getFirstNonzeroDigit()
    {
        java.math.BigInteger r0;
        int i0, $i1, $i2, $i3, $i4;
        int[] $r1;

        r0 := @this: java.math.BigInteger;

        $i1 = r0.<java.math.BigInteger: int firstNonzeroDigit>;

        if $i1 != -2 goto label2;

        $i3 = r0.<java.math.BigInteger: int sign>;

        if $i3 != 0 goto label3;

        i0 = -1;

     label1:
        r0.<java.math.BigInteger: int firstNonzeroDigit> = i0;

     label2:
        $i2 = r0.<java.math.BigInteger: int firstNonzeroDigit>;

        return $i2;

     label3:
        i0 = 0;

     label4:
        $r1 = r0.<java.math.BigInteger: int[] digits>;

        $i4 = $r1[i0];

        if $i4 != 0 goto label1;

        i0 = i0 + 1;

        goto label4;
    }

    public int getLowestSetBit()
    {
        java.math.BigInteger r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1;

        r0 := @this: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $i1 = r0.<java.math.BigInteger: int sign>;

        if $i1 != 0 goto label1;

        return -1;

     label1:
        i0 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i3 = i0 << 5;

        $r1 = r0.<java.math.BigInteger: int[] digits>;

        $i2 = $r1[i0];

        $i4 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>($i2);

        $i5 = $i3 + $i4;

        return $i5;
    }

    public int hashCode()
    {
        java.math.BigInteger r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        int[] $r1;

        r0 := @this: java.math.BigInteger;

        $i1 = r0.<java.math.BigInteger: int hashCode>;

        if $i1 == 0 goto label1;

        $i11 = r0.<java.math.BigInteger: int hashCode>;

        return $i11;

     label1:
        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        i0 = 0;

     label2:
        $i2 = r0.<java.math.BigInteger: int numberLength>;

        if i0 >= $i2 goto label3;

        $i7 = r0.<java.math.BigInteger: int hashCode>;

        $i9 = 33 * $i7;

        $r1 = r0.<java.math.BigInteger: int[] digits>;

        $i8 = $r1[i0];

        $i10 = $i9 + $i8;

        r0.<java.math.BigInteger: int hashCode> = $i10;

        i0 = i0 + 1;

        goto label2;

     label3:
        $i4 = r0.<java.math.BigInteger: int hashCode>;

        $i3 = r0.<java.math.BigInteger: int sign>;

        $i5 = $i4 * $i3;

        r0.<java.math.BigInteger: int hashCode> = $i5;

        $i6 = r0.<java.math.BigInteger: int hashCode>;

        return $i6;
    }

    public int intValue()
    {
        java.math.BigInteger r0;
        boolean $z0, $z1;
        int[] $r1;
        int $i0, $i1, $i2, $i4;
        java.math.BigInt $r2, $r3;
        long $l3;

        r0 := @this: java.math.BigInteger;

        $z0 = r0.<java.math.BigInteger: boolean nativeIsValid>;

        if $z0 == 0 goto label1;

        $r2 = r0.<java.math.BigInteger: java.math.BigInt bigInt>;

        $z1 = virtualinvoke $r2.<java.math.BigInt: boolean twosCompFitsIntoBytes(int)>(4);

        if $z1 == 0 goto label1;

        $r3 = r0.<java.math.BigInteger: java.math.BigInt bigInt>;

        $l3 = virtualinvoke $r3.<java.math.BigInt: long longInt()>();

        $i4 = (int) $l3;

        return $i4;

     label1:
        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $i1 = r0.<java.math.BigInteger: int sign>;

        $r1 = r0.<java.math.BigInteger: int[] digits>;

        $i0 = $r1[0];

        $i2 = $i1 * $i0;

        return $i2;
    }

    public boolean isProbablePrime(int)
    {
        java.math.BigInteger r0;
        int i0;
        java.math.BigInt $r1;
        boolean $z0;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $z0 = virtualinvoke $r1.<java.math.BigInt: boolean isPrime(int)>(i0);

        return $z0;
    }

    public long longValue()
    {
        java.math.BigInteger r0;
        long l0, $l3, $l5, $l6, $l8, $l10, $l11, $l12, $l13;
        boolean $z0, $z1;
        int $i1, $i2, $i4, $i7, $i9;
        int[] $r1, $r2, $r3;
        java.math.BigInt $r4, $r5;

        r0 := @this: java.math.BigInteger;

        $z0 = r0.<java.math.BigInteger: boolean nativeIsValid>;

        if $z0 == 0 goto label1;

        $r4 = r0.<java.math.BigInteger: java.math.BigInt bigInt>;

        $z1 = virtualinvoke $r4.<java.math.BigInt: boolean twosCompFitsIntoBytes(int)>(8);

        if $z1 == 0 goto label1;

        $r5 = r0.<java.math.BigInteger: java.math.BigInt bigInt>;

        $l13 = virtualinvoke $r5.<java.math.BigInt: long longInt()>();

        return $l13;

     label1:
        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $i1 = r0.<java.math.BigInteger: int numberLength>;

        if $i1 <= 1 goto label3;

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        $i7 = $r2[1];

        $l8 = (long) $i7;

        $l12 = $l8 << 32;

        $r3 = r0.<java.math.BigInteger: int[] digits>;

        $i9 = $r3[0];

        $l11 = (long) $i9;

        $l10 = 4294967295L & $l11;

        l0 = $l12 | $l10;

     label2:
        $i4 = r0.<java.math.BigInteger: int sign>;

        $l5 = (long) $i4;

        $l6 = l0 * $l5;

        return $l6;

     label3:
        $r1 = r0.<java.math.BigInteger: int[] digits>;

        $i2 = $r1[0];

        $l3 = (long) $i2;

        l0 = 4294967295L & $l3;

        goto label2;
    }

    public java.math.BigInteger max(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1;
        int $i0;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r1);

        if $i0 != 1 goto label1;

        return r0;

     label1:
        return r1;
    }

    public java.math.BigInteger min(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1;
        int $i0;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r1);

        if $i0 != -1 goto label1;

        return r0;

     label1:
        return r1;
    }

    public java.math.BigInteger mod(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2;
        int $i0;
        java.math.BigInt $r3, $r4, $r5;
        java.lang.ArithmeticException $r6;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke r1.<java.math.BigInteger: int signum()>();

        if $i0 > 0 goto label1;

        $r6 = new java.lang.ArithmeticException;

        specialinvoke $r6.<java.lang.ArithmeticException: void <init>(java.lang.String)>("m.signum() <= 0");

        throw $r6;

     label1:
        $r2 = new java.math.BigInteger;

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r4 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r5 = staticinvoke <java.math.BigInt: java.math.BigInt modulus(java.math.BigInt,java.math.BigInt)>($r3, $r4);

        specialinvoke $r2.<java.math.BigInteger: void <init>(java.math.BigInt)>($r5);

        return $r2;
    }

    public java.math.BigInteger modInverse(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2;
        int $i0;
        java.math.BigInt $r3, $r4, $r5;
        java.lang.ArithmeticException $r6;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke r1.<java.math.BigInteger: int signum()>();

        if $i0 > 0 goto label1;

        $r6 = new java.lang.ArithmeticException;

        specialinvoke $r6.<java.lang.ArithmeticException: void <init>(java.lang.String)>("modulus not positive");

        throw $r6;

     label1:
        $r2 = new java.math.BigInteger;

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r4 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r5 = staticinvoke <java.math.BigInt: java.math.BigInt modInverse(java.math.BigInt,java.math.BigInt)>($r3, $r4);

        specialinvoke $r2.<java.math.BigInteger: void <init>(java.math.BigInt)>($r5);

        return $r2;
    }

    public java.math.BigInteger modPow(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, r3, $r4, $r9, $r10;
        int i0, $i1;
        java.math.BigInt $r5, $r6, $r7, $r8;
        java.lang.ArithmeticException $r11;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: java.math.BigInteger;

        $i1 = virtualinvoke r2.<java.math.BigInteger: int signum()>();

        if $i1 > 0 goto label1;

        $r11 = new java.lang.ArithmeticException;

        specialinvoke $r11.<java.lang.ArithmeticException: void <init>(java.lang.String)>("modulus.signum() <= 0");

        throw $r11;

     label1:
        i0 = virtualinvoke r1.<java.math.BigInteger: int signum()>();

        if i0 != 0 goto label2;

        $r9 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r10 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        return $r10;

     label2:
        if i0 >= 0 goto label4;

        r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>(r2);

     label3:
        $r4 = new java.math.BigInteger;

        $r5 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r6 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r7 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r8 = staticinvoke <java.math.BigInt: java.math.BigInt modExp(java.math.BigInt,java.math.BigInt,java.math.BigInt)>($r5, $r6, $r7);

        specialinvoke $r4.<java.math.BigInteger: void <init>(java.math.BigInt)>($r8);

        return $r4;

     label4:
        r3 = r0;

        goto label3;
    }

    public java.math.BigInteger multiply(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2;
        java.math.BigInt $r3, $r4, $r5;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        $r2 = new java.math.BigInteger;

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r4 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r5 = staticinvoke <java.math.BigInt: java.math.BigInt product(java.math.BigInt,java.math.BigInt)>($r3, $r4);

        specialinvoke $r2.<java.math.BigInteger: void <init>(java.math.BigInt)>($r5);

        return $r2;
    }

    public java.math.BigInteger negate()
    {
        java.math.BigInteger r0, $r3;
        java.math.BigInt r1, r2;
        int i0, $i1;

        r0 := @this: java.math.BigInteger;

        r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        i0 = virtualinvoke r1.<java.math.BigInt: int sign()>();

        if i0 != 0 goto label1;

        return r0;

     label1:
        r2 = virtualinvoke r1.<java.math.BigInt: java.math.BigInt copy()>();

        $i1 = neg i0;

        virtualinvoke r2.<java.math.BigInt: void setSign(int)>($i1);

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(java.math.BigInt)>(r2);

        return $r3;
    }

    public java.math.BigInteger nextProbablePrime()
    {
        java.math.BigInteger r0, $r1;
        int $i0;
        java.lang.ArithmeticException $r2;

        r0 := @this: java.math.BigInteger;

        $i0 = r0.<java.math.BigInteger: int sign>;

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("sign < 0");

        throw $r2;

     label1:
        $r1 = staticinvoke <java.math.Primality: java.math.BigInteger nextProbablePrime(java.math.BigInteger)>(r0);

        return $r1;
    }

    public java.math.BigInteger not()
    {
        java.math.BigInteger r0, $r1;

        r0 := @this: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $r1 = staticinvoke <java.math.Logical: java.math.BigInteger not(java.math.BigInteger)>(r0);

        return $r1;
    }

    public java.math.BigInteger or(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        virtualinvoke r1.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $r2 = staticinvoke <java.math.Logical: java.math.BigInteger or(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r2;
    }

    public java.math.BigInteger pow(int)
    {
        java.math.BigInteger r0, $r1;
        int i0;
        java.math.BigInt $r2, $r3;
        java.lang.ArithmeticException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.ArithmeticException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exp < 0: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r1 = new java.math.BigInteger;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r3 = staticinvoke <java.math.BigInt: java.math.BigInt exp(java.math.BigInt,int)>($r2, i0);

        specialinvoke $r1.<java.math.BigInteger: void <init>(java.math.BigInt)>($r3);

        return $r1;
    }

    void prepareJavaRepresentation()
    {
        java.math.BigInteger r0;
        java.lang.Throwable r1, $r6;
        int i0, $i1;
        int[] r2, $r4;
        boolean $z0, $z1;
        java.math.BigInt $r3, $r5;

        r0 := @this: java.math.BigInteger;

        $z0 = r0.<java.math.BigInteger: boolean javaIsValid>;

        if $z0 == 0 goto label01;

        return;

     label01:
        entermonitor r0;

     label02:
        $z1 = r0.<java.math.BigInteger: boolean javaIsValid>;

        if $z1 == 0 goto label07;

        exitmonitor r0;

     label03:
        return;

     label04:
        $r6 := @caughtexception;

        r1 = $r6;

     label05:
        exitmonitor r0;

     label06:
        throw r1;

     label07:
        $r3 = r0.<java.math.BigInteger: java.math.BigInt bigInt>;

        i0 = virtualinvoke $r3.<java.math.BigInt: int sign()>();

     label08:
        if i0 == 0 goto label12;

     label09:
        $r5 = r0.<java.math.BigInteger: java.math.BigInt bigInt>;

        r2 = virtualinvoke $r5.<java.math.BigInt: int[] littleEndianIntsMagnitude()>();

     label10:
        $i1 = lengthof r2;

        specialinvoke r0.<java.math.BigInteger: void setJavaRepresentation(int,int,int[])>(i0, $i1, r2);

        exitmonitor r0;

     label11:
        return;

     label12:
        $r4 = newarray (int)[1];

        $r4[0] = 0;

        r2 = $r4;

     label13:
        goto label10;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
    }

    public java.math.BigInteger remainder(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r6;
        java.math.BigInt r2, $r3, $r4, $r5;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        $r3 = new java.math.BigInt;

        specialinvoke $r3.<java.math.BigInt: void <init>()>();

        r2 = $r3;

        $r4 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r5 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        staticinvoke <java.math.BigInt: void division(java.math.BigInt,java.math.BigInt,java.math.BigInt,java.math.BigInt)>($r4, $r5, null, r2);

        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(java.math.BigInt)>(r2);

        return $r6;
    }

    public java.math.BigInteger setBit(int)
    {
        java.math.BigInteger r0;
        int i0;
        boolean $z0;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean testBit(int)>(i0);

        if $z0 != 0 goto label1;

        r0 = staticinvoke <java.math.BitLevel: java.math.BigInteger flipBit(java.math.BigInteger,int)>(r0, i0);

     label1:
        return r0;
    }

    public java.math.BigInteger shiftLeft(int)
    {
        java.math.BigInteger r0, $r1, $r4;
        int i0, i1, $i2;
        java.math.BigInt $r2, $r3;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        if i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        i1 = virtualinvoke r0.<java.math.BigInteger: int signum()>();

        if i1 == 0 goto label1;

        if i1 > 0 goto label3;

        if i0 < 0 goto label4;

     label3:
        $r1 = new java.math.BigInteger;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r3 = staticinvoke <java.math.BigInt: java.math.BigInt shift(java.math.BigInt,int)>($r2, i0);

        specialinvoke $r1.<java.math.BigInteger: void <init>(java.math.BigInt)>($r3);

        return $r1;

     label4:
        $i2 = neg i0;

        $r4 = staticinvoke <java.math.BitLevel: java.math.BigInteger shiftRight(java.math.BigInteger,int)>(r0, $i2);

        return $r4;
    }

    java.math.BigInteger shiftLeftOneBit()
    {
        java.math.BigInteger r0, $r1;
        int $i0;

        r0 := @this: java.math.BigInteger;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int signum()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = staticinvoke <java.math.BitLevel: java.math.BigInteger shiftLeftOneBit(java.math.BigInteger)>(r0);

        return $r1;
    }

    public java.math.BigInteger shiftRight(int)
    {
        java.math.BigInteger r0, $r1;
        int i0, $i1;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        $i1 = neg i0;

        $r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i1);

        return $r1;
    }

    public int signum()
    {
        java.math.BigInteger r0;
        boolean $z0;
        java.math.BigInt $r1;
        int $i0, $i1;

        r0 := @this: java.math.BigInteger;

        $z0 = r0.<java.math.BigInteger: boolean javaIsValid>;

        if $z0 == 0 goto label1;

        $i1 = r0.<java.math.BigInteger: int sign>;

        return $i1;

     label1:
        $r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $i0 = virtualinvoke $r1.<java.math.BigInt: int sign()>();

        return $i0;
    }

    public java.math.BigInteger subtract(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r4;
        java.math.BigInt r2, r3, $r5;
        int $i0;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $i0 = virtualinvoke r3.<java.math.BigInt: int sign()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r4 = new java.math.BigInteger;

        $r5 = staticinvoke <java.math.BigInt: java.math.BigInt subtraction(java.math.BigInt,java.math.BigInt)>(r2, r3);

        specialinvoke $r4.<java.math.BigInteger: void <init>(java.math.BigInt)>($r5);

        return $r4;
    }

    public boolean testBit(int)
    {
        java.math.BigInteger r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, i11;
        boolean z0, $z1, $z2;
        int[] $r1, $r2;
        java.math.BigInt $r3;
        java.lang.ArithmeticException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        z0 = 1;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.ArithmeticException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n < 0: ");

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label1:
        i1 = virtualinvoke r0.<java.math.BigInteger: int signum()>();

        if i1 <= 0 goto label3;

        $z1 = r0.<java.math.BigInteger: boolean nativeIsValid>;

        if $z1 == 0 goto label3;

        $z2 = r0.<java.math.BigInteger: boolean javaIsValid>;

        if $z2 != 0 goto label3;

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        z0 = virtualinvoke $r3.<java.math.BigInt: boolean isBitSet(int)>(i0);

     label2:
        return z0;

     label3:
        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        if i0 != 0 goto label4;

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        $i9 = $r2[0];

        $i10 = 1 & $i9;

        if $i10 != 0 goto label2;

        return 0;

     label4:
        i2 = i0 >> 5;

        $i6 = r0.<java.math.BigInteger: int numberLength>;

        if i2 < $i6 goto label5;

        if i1 < 0 goto label2;

        return 0;

     label5:
        $r1 = r0.<java.math.BigInteger: int[] digits>;

        i3 = $r1[i2];

        $i7 = i0 & 31;

        i11 = (int) 1;

        i4 = i11 << $i7;

        if i1 >= 0 goto label7;

        i5 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        if i2 >= i5 goto label6;

        return 0;

     label6:
        if i5 != i2 goto label8;

        i3 = neg i3;

     label7:
        $i8 = i3 & i4;

        if $i8 != 0 goto label2;

        return 0;

     label8:
        i3 = i3 ^ -1;

        goto label7;
    }

    public byte[] toByteArray()
    {
        java.math.BigInteger r0;
        byte[] $r1;

        r0 := @this: java.math.BigInteger;

        $r1 = specialinvoke r0.<java.math.BigInteger: byte[] twosComplement()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        java.math.BigInteger r0;
        java.math.BigInt $r1;
        java.lang.String $r2;

        r0 := @this: java.math.BigInteger;

        $r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r2 = virtualinvoke $r1.<java.math.BigInt: java.lang.String decString()>();

        return $r2;
    }

    public java.lang.String toString(int)
    {
        java.math.BigInteger r0;
        int i0;
        java.lang.String $r1, $r3;
        java.math.BigInt $r2;

        r0 := @this: java.math.BigInteger;

        i0 := @parameter0: int;

        if i0 != 10 goto label1;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r3 = virtualinvoke $r2.<java.math.BigInt: java.lang.String decString()>();

        return $r3;

     label1:
        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $r1 = staticinvoke <java.math.Conversion: java.lang.String bigInteger2String(java.math.BigInteger,int)>(r0, i0);

        return $r1;
    }

    public java.math.BigInteger xor(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2;

        r0 := @this: java.math.BigInteger;

        r1 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        virtualinvoke r1.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $r2 = staticinvoke <java.math.Logical: java.math.BigInteger xor(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r2;
    }
}
