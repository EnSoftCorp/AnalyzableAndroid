public class java.util.concurrent.LinkedBlockingQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue, java.io.Serializable
{
    private static final long serialVersionUID;
    private final int capacity;
    private final java.util.concurrent.atomic.AtomicInteger count;
    transient java.util.concurrent.LinkedBlockingQueue$Node head;
    private transient java.util.concurrent.LinkedBlockingQueue$Node last;
    private final java.util.concurrent.locks.Condition notEmpty;
    private final java.util.concurrent.locks.Condition notFull;
    private final java.util.concurrent.locks.ReentrantLock putLock;
    private final java.util.concurrent.locks.ReentrantLock takeLock;

    public void <init>()
    {
        java.util.concurrent.LinkedBlockingQueue r0;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(2147483647);

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        int i0;
        java.util.concurrent.LinkedBlockingQueue$Node r1, $r9;
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.util.concurrent.locks.ReentrantLock $r3, $r4, $r6, $r7;
        java.util.concurrent.locks.Condition $r5, $r8;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count> = $r2;

        $r3 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock> = $r3;

        $r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notEmpty> = $r5;

        $r6 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock> = $r6;

        $r7 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull> = $r8;

        if i0 > 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r10;

     label1:
        r0.<java.util.concurrent.LinkedBlockingQueue: int capacity> = i0;

        $r9 = new java.util.concurrent.LinkedBlockingQueue$Node;

        specialinvoke $r9.<java.util.concurrent.LinkedBlockingQueue$Node: void <init>(java.lang.Object)>(null);

        r1 = $r9;

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head> = r1;

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last> = r1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.Collection r1;
        java.util.concurrent.locks.ReentrantLock r2;
        int i0, $i1;
        java.lang.Throwable r3, $r10;
        java.util.Iterator r4;
        java.lang.Object r5;
        boolean $z0;
        java.util.concurrent.atomic.AtomicInteger $r6;
        java.util.concurrent.LinkedBlockingQueue$Node $r7;
        java.lang.IllegalStateException $r8;
        java.lang.NullPointerException $r9;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(2147483647);

        r2 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        i0 = 0;

     label01:
        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

     label03:
        if r5 != null goto label06;

     label04:
        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();

        throw $r9;

     label05:
        $r10 := @caughtexception;

        r3 = $r10;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label06:
        $i1 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if i0 != $i1 goto label07;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Queue full");

        throw $r8;

     label07:
        $r7 = new java.util.concurrent.LinkedBlockingQueue$Node;

        specialinvoke $r7.<java.util.concurrent.LinkedBlockingQueue$Node: void <init>(java.lang.Object)>(r5);

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void enqueue(java.util.concurrent.LinkedBlockingQueue$Node)>($r7);

     label08:
        i0 = i0 + 1;

        goto label02;

     label09:
        $r6 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(i0);

     label10:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label04 to label05 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
    }

    private java.lang.Object dequeue()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.LinkedBlockingQueue$Node r1, r2;
        java.lang.Object r3;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head>;

        r2 = r1.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

        r1.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next> = r1;

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head> = r2;

        r3 = r2.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;

        r2.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item> = null;

        return r3;
    }

    private void enqueue(java.util.concurrent.LinkedBlockingQueue$Node)
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.LinkedBlockingQueue$Node r1, $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.util.concurrent.LinkedBlockingQueue$Node;

        $r2 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last>;

        $r2.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next> = r1;

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last> = r1;

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.io.ObjectInputStream r1;
        java.util.concurrent.LinkedBlockingQueue$Node r2, $r5;
        java.lang.Object r3;
        java.util.concurrent.atomic.AtomicInteger $r4;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);

        $r5 = new java.util.concurrent.LinkedBlockingQueue$Node;

        specialinvoke $r5.<java.util.concurrent.LinkedBlockingQueue$Node: void <init>(java.lang.Object)>(null);

        r2 = $r5;

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head> = r2;

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last> = r2;

     label1:
        r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if r3 != null goto label2;

        return;

     label2:
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: boolean add(java.lang.Object)>(r3);

        goto label1;
    }

    private void signalNotEmpty()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r4;
        java.util.concurrent.locks.Condition $r3;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r3 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Condition: void signal()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void signalNotFull()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r4;
        java.util.concurrent.locks.Condition $r3;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r3 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Condition: void signal()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.io.ObjectOutputStream r1;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.LinkedBlockingQueue$Node r3, $r4;
        java.lang.Object $r5;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>();

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head>;

        r3 = $r4.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label2:
        if r3 == null goto label5;

     label3:
        $r5 = r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        r3 = r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label4:
        goto label2;

     label5:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

     label6:
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        return;

     label7:
        $r6 := @caughtexception;

        r2 = $r6;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void clear()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.lang.Throwable r1, $r7;
        java.util.concurrent.LinkedBlockingQueue$Node r2, r3, $r4;
        java.util.concurrent.atomic.AtomicInteger $r5;
        int $i0, $i1;
        java.util.concurrent.locks.Condition $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>();

     label1:
        r2 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head>;

     label2:
        r3 = r2.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label3:
        if r3 == null goto label6;

     label4:
        r2.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next> = r2;

        r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item> = null;

     label5:
        r2 = r3;

        goto label2;

     label6:
        $r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last>;

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head> = $r4;

        $r5 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(0);

        $i1 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i0 != $i1 goto label7;

        $r6 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>();

     label7:
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        return;

     label8:
        $r7 := @caughtexception;

        r1 = $r7;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.LinkedBlockingQueue$Node r3, $r4;
        boolean z0, z1;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>();

     label2:
        $r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head>;

        r3 = $r4.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label3:
        z0 = 0;

        if r3 == null goto label6;

     label4:
        $r5 = r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;

        z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

     label5:
        if z1 == 0 goto label7;

        z0 = 1;

     label6:
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        return z0;

     label7:
        r3 = r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label8:
        goto label3;

     label9:
        $r6 := @caughtexception;

        r2 = $r6;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public int drainTo(java.util.Collection)
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.Collection r1;
        int $i0;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.util.Collection;

        $i0 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection,int)>(r1, 2147483647);

        return $i0;
    }

    public int drainTo(java.util.Collection, int)
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.Collection r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        boolean z0;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, r5, $r11, $r14;
        java.util.concurrent.LinkedBlockingQueue$Node r4, r6;
        java.util.concurrent.atomic.AtomicInteger $r7, $r8, $r13;
        java.lang.Object $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.NullPointerException $r12;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        if r1 != null goto label01;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>()>();

        throw $r12;

     label01:
        if r1 != r0 goto label02;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r10;

     label02:
        if i0 > 0 goto label04;

        i1 = 0;

     label03:
        return i1;

     label04:
        z0 = 0;

        r2 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label05:
        $r7 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i5 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i5);

        r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head>;

     label06:
        i2 = 0;

     label07:
        if i2 >= i1 goto label17;

     label08:
        r6 = r4.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

        $r9 = r6.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        r6.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item> = null;

        r4.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next> = r4;

     label09:
        r4 = r6;

        i2 = i2 + 1;

        goto label07;

     label10:
        $r11 := @caughtexception;

        r5 = $r11;

        z0 = 0;

        if i2 <= 0 goto label13;

     label11:
        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head> = r4;

        $r13 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i7 = neg i2;

        $i9 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>($i7);

        $i8 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i9 != $i8 goto label16;

     label12:
        z0 = 1;

     label13:
        throw r5;

     label14:
        $r14 := @caughtexception;

        r3 = $r14;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        if z0 == 0 goto label15;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void signalNotFull()>();

     label15:
        throw r3;

     label16:
        z0 = 0;

        goto label13;

     label17:
        z0 = 0;

        if i2 <= 0 goto label20;

     label18:
        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head> = r4;

        $r8 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i6 = neg i2;

        i3 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>($i6);

        i4 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

     label19:
        if i3 != i4 goto label21;

        z0 = 1;

     label20:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        if z0 == 0 goto label03;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void signalNotFull()>();

        return i1;

     label21:
        z0 = 0;

        goto label20;

        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label18 to label19 with label14;
    }

    void fullyLock()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock $r1, $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        $r1 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        $r2 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        return;
    }

    void fullyUnlock()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock $r1, $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        $r1 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r2 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.LinkedBlockingQueue$Itr $r1;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        $r1 = new java.util.concurrent.LinkedBlockingQueue$Itr;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingQueue$Itr: void <init>(java.util.concurrent.LinkedBlockingQueue)>(r0);

        return $r1;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.lang.Object r1;
        java.util.concurrent.atomic.AtomicInteger r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.concurrent.LinkedBlockingQueue$Node r3, $r6;
        java.util.concurrent.locks.ReentrantLock r4;
        java.lang.Throwable r5, $r8;
        java.util.concurrent.locks.Condition $r7;
        java.lang.NullPointerException $r9;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();

        throw $r9;

     label1:
        r2 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i2 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i1 != $i2 goto label3;

     label2:
        return 0;

     label3:
        i0 = -1;

        $r6 = new java.util.concurrent.LinkedBlockingQueue$Node;

        specialinvoke $r6.<java.util.concurrent.LinkedBlockingQueue$Node: void <init>(java.lang.Object)>(r1);

        r3 = $r6;

        r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label4:
        $i3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i4 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i3 >= $i4 goto label5;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void enqueue(java.util.concurrent.LinkedBlockingQueue$Node)>(r3);

        i0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $i6 = i0 + 1;

        $i5 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i6 >= $i5 goto label5;

        $r7 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Condition: void signal()>();

     label5:
        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        if i0 != 0 goto label6;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void signalNotEmpty()>();

     label6:
        if i0 < 0 goto label2;

        return 1;

     label7:
        $r8 := @caughtexception;

        r5 = $r8;

        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r5;

        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.lang.Object r1;
        long l0, l1;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.locks.ReentrantLock r3;
        java.util.concurrent.atomic.AtomicInteger r4;
        java.lang.Throwable r5, $r10;
        int i2, i3, i4, $i5, $i6;
        java.util.concurrent.LinkedBlockingQueue$Node $r6;
        java.util.concurrent.locks.Condition $r7, $r8;
        byte $b7;
        java.lang.NullPointerException $r9;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        if r1 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();

        throw $r9;

     label1:
        l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r3 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label2:
        i2 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i3 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

     label3:
        if i2 != i3 goto label6;

        $b7 = l1 cmp 0L;

        if $b7 > 0 goto label4;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label4:
        $r8 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        l1 = interfaceinvoke $r8.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

     label5:
        goto label2;

     label6:
        $r6 = new java.util.concurrent.LinkedBlockingQueue$Node;

        specialinvoke $r6.<java.util.concurrent.LinkedBlockingQueue$Node: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void enqueue(java.util.concurrent.LinkedBlockingQueue$Node)>($r6);

        i4 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $i6 = i4 + 1;

        $i5 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i6 >= $i5 goto label7;

        $r7 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Condition: void signal()>();

     label7:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        if i4 != 0 goto label8;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void signalNotEmpty()>();

     label8:
        return 1;

     label9:
        $r10 := @caughtexception;

        r5 = $r10;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r5;

        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public java.lang.Object peek()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r7;
        java.util.concurrent.LinkedBlockingQueue$Node r3, $r6;
        java.lang.Object r4;
        java.util.concurrent.atomic.AtomicInteger $r5;
        int $i0;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        $r5 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        r1 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        $r6 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head>;

        r3 = $r6.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label3:
        r4 = null;

        if r3 != null goto label5;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r4;

     label5:
        r4 = r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;

     label6:
        goto label4;

     label7:
        $r7 := @caughtexception;

        r2 = $r7;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public java.lang.Object poll()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.atomic.AtomicInteger r1;
        int i0, i1, $i2, $i3;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r6;
        java.lang.Object r4;
        java.util.concurrent.locks.Condition $r5;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i2 != 0 goto label2;

        r4 = null;

     label1:
        return r4;

     label2:
        i0 = -1;

        r2 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label3:
        i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label4:
        r4 = null;

        if i1 <= 0 goto label8;

     label5:
        r4 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object dequeue()>();

        i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>();

     label6:
        if i0 <= 1 goto label8;

     label7:
        $r5 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void signal()>();

     label8:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $i3 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if i0 != $i3 goto label1;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void signalNotFull()>();

        return r4;

     label9:
        $r6 := @caughtexception;

        r3 = $r6;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        long l0, l1;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.atomic.AtomicInteger r2;
        java.util.concurrent.locks.ReentrantLock r3;
        java.lang.Throwable r4, $r8;
        int i2, i3, $i4;
        java.lang.Object r5;
        java.util.concurrent.locks.Condition $r6, $r7;
        byte $b5;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r2 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        r3 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label01:
        i2 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label02:
        if i2 != 0 goto label06;

        $b5 = l1 cmp 0L;

        if $b5 > 0 goto label04;

        r5 = null;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label03:
        return r5;

     label04:
        $r7 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        l1 = interfaceinvoke $r7.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

     label05:
        goto label01;

     label06:
        r5 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object dequeue()>();

        i3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>();

     label07:
        if i3 <= 1 goto label09;

     label08:
        $r6 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>();

     label09:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $i4 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if i3 != $i4 goto label03;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void signalNotFull()>();

        return r5;

     label10:
        $r8 := @caughtexception;

        r4 = $r8;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void put(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.lang.Object r1;
        java.util.concurrent.LinkedBlockingQueue$Node r2, $r6;
        java.util.concurrent.locks.ReentrantLock r3;
        java.util.concurrent.atomic.AtomicInteger r4;
        java.lang.Throwable r5, $r10;
        int i0, $i1, $i2, $i3, $i4;
        java.util.concurrent.locks.Condition $r7, $r8;
        java.lang.NullPointerException $r9;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();

        throw $r9;

     label1:
        $r6 = new java.util.concurrent.LinkedBlockingQueue$Node;

        specialinvoke $r6.<java.util.concurrent.LinkedBlockingQueue$Node: void <init>(java.lang.Object)>(r1);

        r2 = $r6;

        r3 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label2:
        $i1 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i2 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i1 != $i2 goto label5;

        $r8 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Condition: void await()>();

     label3:
        goto label2;

     label4:
        $r10 := @caughtexception;

        r5 = $r10;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r5;

     label5:
        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void enqueue(java.util.concurrent.LinkedBlockingQueue$Node)>(r2);

        i0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $i4 = i0 + 1;

        $i3 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i4 >= $i3 goto label6;

        $r7 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Condition: void signal()>();

     label6:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        if i0 != 0 goto label7;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void signalNotEmpty()>();

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int remainingCapacity()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0, $i1, $i2;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        $i0 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        $r1 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.LinkedBlockingQueue$Node r3, r4;
        boolean z0, $z1;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        return 0;

     label01:
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>();

     label02:
        r3 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head>;

        r4 = r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label03:
        z0 = 0;

        if r4 == null goto label06;

     label04:
        $r5 = r4.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label07;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void unlink(java.util.concurrent.LinkedBlockingQueue$Node,java.util.concurrent.LinkedBlockingQueue$Node)>(r4, r3);

     label05:
        z0 = 1;

     label06:
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        return z0;

     label07:
        r3 = r4;

     label08:
        r4 = r4.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label09:
        goto label03;

     label10:
        $r6 := @caughtexception;

        r2 = $r6;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        throw r2;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public int size()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        $r1 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public java.lang.Object take() throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.atomic.AtomicInteger r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r7;
        java.lang.Object r4;
        int i0, $i1, $i2;
        java.util.concurrent.locks.Condition $r5, $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        r2 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label1:
        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i1 != 0 goto label4;

        $r6 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void await()>();

     label2:
        goto label1;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label4:
        r4 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object dequeue()>();

        i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>();

     label5:
        if i0 <= 1 goto label7;

     label6:
        $r5 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void signal()>();

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $i2 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if i0 != $i2 goto label8;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void signalNotFull()>();

     label8:
        return r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.lang.Throwable r1, $r7;
        java.lang.Object[] r2;
        java.util.concurrent.LinkedBlockingQueue$Node r3, $r5;
        int i0, i1, $i2;
        java.util.concurrent.atomic.AtomicInteger $r4;
        java.lang.Object $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>();

     label1:
        $r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        r2 = newarray (java.lang.Object)[$i2];

        $r5 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head>;

        r3 = $r5.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label2:
        i0 = 0;

     label3:
        if r3 == null goto label7;

        i1 = i0 + 1;

     label4:
        $r6 = r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;

        r2[i0] = $r6;

        r3 = r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label5:
        i0 = i1;

        goto label3;

     label6:
        $r7 := @caughtexception;

        r1 = $r7;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        throw r1;

     label7:
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        return r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.lang.Object[] r1, $r11;
        java.lang.Throwable r2, $r10;
        int i0, i1, i2, $i3, $i4;
        java.util.concurrent.LinkedBlockingQueue$Node r3, $r5;
        java.util.concurrent.atomic.AtomicInteger $r4;
        java.lang.Object $r6, $r9;
        java.lang.Class $r7, $r8;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.lang.Object[];

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>();

     label1:
        $r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i3 = lengthof r1;

        if $i3 >= i0 goto label2;

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Class getComponentType()>();

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r8, i0);

        $r11 = (java.lang.Object[]) $r9;

        r1 = (java.lang.Object[]) $r11;

     label2:
        $r5 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head>;

        r3 = $r5.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label3:
        i1 = 0;

     label4:
        if r3 == null goto label7;

        i2 = i1 + 1;

     label5:
        $r6 = r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;

        r1[i1] = $r6;

        r3 = r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label6:
        i1 = i2;

        goto label4;

     label7:
        $i4 = lengthof r1;

        if $i4 <= i1 goto label8;

        r1[i1] = null;

     label8:
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        return r1;

     label9:
        $r10 := @caughtexception;

        r2 = $r10;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.lang.Throwable r1, $r13;
        java.util.concurrent.LinkedBlockingQueue$Node r2, $r6;
        java.lang.StringBuilder r3, $r7, $r10, $r12;
        java.lang.Object r4;
        java.lang.String r5;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>();

     label01:
        $r6 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head>;

        r2 = $r6.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label02:
        if r2 != null goto label04;

        r5 = "[]";

     label03:
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        return r5;

     label04:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r3 = $r7;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

     label05:
        r4 = r2.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;

     label06:
        if r4 != r0 goto label07;

        r4 = "(this Collection)";

     label07:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        r2 = r2.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label08:
        if r2 != null goto label11;

     label09:
        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        goto label03;

     label11:
        $r10 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label12:
        goto label05;

     label13:
        $r13 := @caughtexception;

        r1 = $r13;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        throw r1;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    void unlink(java.util.concurrent.LinkedBlockingQueue$Node, java.util.concurrent.LinkedBlockingQueue$Node)
    {
        java.util.concurrent.LinkedBlockingQueue r0;
        java.util.concurrent.LinkedBlockingQueue$Node r1, r2, $r3, $r4;
        java.util.concurrent.atomic.AtomicInteger $r5;
        int $i0, $i1;
        java.util.concurrent.locks.Condition $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue;

        r1 := @parameter0: java.util.concurrent.LinkedBlockingQueue$Node;

        r2 := @parameter1: java.util.concurrent.LinkedBlockingQueue$Node;

        r1.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item> = null;

        $r3 = r1.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

        r2.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next> = $r3;

        $r4 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last>;

        if $r4 != r1 goto label1;

        r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last> = r2;

     label1:
        $r5 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>();

        $i1 = r0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i0 != $i1 goto label2;

        $r6 = r0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>();

     label2:
        return;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.LinkedBlockingQueue: long serialVersionUID> = -6903933977591709194L;

        return;
    }
}
