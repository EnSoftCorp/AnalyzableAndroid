public final class java.util.Scanner extends java.lang.Object implements java.io.Closeable, java.util.Iterator
{
    private static final java.util.regex.Pattern ANY_PATTERN;
    private static final java.util.regex.Pattern BOOLEAN_PATTERN;
    private static final java.util.regex.Pattern DEFAULT_DELIMITER;
    private static final int DEFAULT_RADIX;
    private static final java.util.regex.Pattern LINE_PATTERN;
    private static final java.util.regex.Pattern LINE_TERMINATOR;
    private static final java.util.regex.Pattern MULTI_LINE_TERMINATOR;
    private static final java.lang.String NL;
    private java.nio.CharBuffer buffer;
    private int bufferLength;
    private java.util.regex.Pattern cachedFloatPattern;
    private java.util.regex.Pattern cachedIntegerPattern;
    private int cachedIntegerPatternRadix;
    private int cachedNextIndex;
    private java.lang.Object cachedNextValue;
    private boolean closed;
    private int currentRadix;
    private java.text.DecimalFormat decimalFormat;
    private java.util.regex.Pattern delimiter;
    private int findStartIndex;
    private java.lang.Readable input;
    private boolean inputExhausted;
    private java.io.IOException lastIOException;
    private java.util.Locale locale;
    private boolean matchSuccessful;
    private java.util.regex.Matcher matcher;
    private int preStartIndex;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1, $r2, $r3, $r4, $r5;

        <java.util.Scanner: java.lang.String NL> = "\n|\r\n|\r|\u0085|\u2028|\u2029";

        <java.util.Scanner: int DEFAULT_RADIX> = 10;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\p{javaWhitespace}+");

        <java.util.Scanner: java.util.regex.Pattern DEFAULT_DELIMITER> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("true|false", 2);

        <java.util.Scanner: java.util.regex.Pattern BOOLEAN_PATTERN> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\n|\r\n|\r|\u0085|\u2028|\u2029");

        <java.util.Scanner: java.util.regex.Pattern LINE_TERMINATOR> = $r2;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\n|\r\n|\r|\u0085|\u2028|\u2029)+");

        <java.util.Scanner: java.util.regex.Pattern MULTI_LINE_TERMINATOR> = $r3;

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".*(\n|\r\n|\r|\u0085|\u2028|\u2029)|.+$");

        <java.util.Scanner: java.util.regex.Pattern LINE_PATTERN> = $r4;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?s).*");

        <java.util.Scanner: java.util.regex.Pattern ANY_PATTERN> = $r5;

        return;
    }

    public void <init>(java.io.File) throws java.io.FileNotFoundException
    {
        java.util.Scanner r0;
        java.io.File r1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.io.File;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke r0.<java.util.Scanner: void <init>(java.io.File,java.lang.String)>(r1, $r3);

        return;
    }

    public void <init>(java.io.File, java.lang.String) throws java.io.FileNotFoundException
    {
        java.util.Scanner r0;
        java.io.File r1;
        java.lang.String r2, $r14;
        java.io.FileInputStream r3, $r8;
        java.io.UnsupportedEncodingException r4, $r12;
        java.nio.CharBuffer $r5;
        java.util.regex.Pattern $r6;
        java.util.Locale $r7;
        int $i0;
        java.io.InputStreamReader $r9;
        java.lang.IllegalArgumentException $r10, $r13;
        java.lang.NullPointerException $r11;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(1024);

        r0.<java.util.Scanner: java.nio.CharBuffer buffer> = $r5;

        $r6 = <java.util.Scanner: java.util.regex.Pattern DEFAULT_DELIMITER>;

        r0.<java.util.Scanner: java.util.regex.Pattern delimiter> = $r6;

        r0.<java.util.Scanner: int currentRadix> = 10;

        $r7 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<java.util.Scanner: java.util.Locale locale> = $r7;

        r0.<java.util.Scanner: int findStartIndex> = 0;

        $i0 = r0.<java.util.Scanner: int findStartIndex>;

        r0.<java.util.Scanner: int preStartIndex> = $i0;

        r0.<java.util.Scanner: int bufferLength> = 0;

        r0.<java.util.Scanner: boolean closed> = 0;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        r0.<java.util.Scanner: boolean inputExhausted> = 0;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        r0.<java.util.Scanner: int cachedNextIndex> = -1;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedFloatPattern> = null;

        r0.<java.util.Scanner: int cachedIntegerPatternRadix> = -1;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedIntegerPattern> = null;

        if r1 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("src == null");

        throw $r11;

     label1:
        $r8 = new java.io.FileInputStream;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        r3 = $r8;

        if r2 != null goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("charsetName == null");

        throw $r10;

     label2:
        $r9 = new java.io.InputStreamReader;

        specialinvoke $r9.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r3, r2);

        specialinvoke r0.<java.util.Scanner: void setInput(java.lang.Readable)>($r9);

     label3:
        return;

     label4:
        $r12 := @caughtexception;

        r4 = $r12;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke r4.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    public void <init>(java.io.InputStream)
    {
        java.util.Scanner r0;
        java.io.InputStream r1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.io.InputStream;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke r0.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>(r1, $r3);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String)
    {
        java.util.Scanner r0;
        java.io.InputStream r1;
        java.lang.String r2, $r11;
        java.io.UnsupportedEncodingException r3, $r9;
        java.nio.CharBuffer $r4;
        java.util.regex.Pattern $r5;
        java.util.Locale $r6;
        int $i0;
        java.io.InputStreamReader $r7;
        java.lang.NullPointerException $r8;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(1024);

        r0.<java.util.Scanner: java.nio.CharBuffer buffer> = $r4;

        $r5 = <java.util.Scanner: java.util.regex.Pattern DEFAULT_DELIMITER>;

        r0.<java.util.Scanner: java.util.regex.Pattern delimiter> = $r5;

        r0.<java.util.Scanner: int currentRadix> = 10;

        $r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<java.util.Scanner: java.util.Locale locale> = $r6;

        r0.<java.util.Scanner: int findStartIndex> = 0;

        $i0 = r0.<java.util.Scanner: int findStartIndex>;

        r0.<java.util.Scanner: int preStartIndex> = $i0;

        r0.<java.util.Scanner: int bufferLength> = 0;

        r0.<java.util.Scanner: boolean closed> = 0;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        r0.<java.util.Scanner: boolean inputExhausted> = 0;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        r0.<java.util.Scanner: int cachedNextIndex> = -1;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedFloatPattern> = null;

        r0.<java.util.Scanner: int cachedIntegerPatternRadix> = -1;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedIntegerPattern> = null;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("src == null");

        throw $r8;

     label1:
        $r7 = new java.io.InputStreamReader;

        specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, r2);

        specialinvoke r0.<java.util.Scanner: void setInput(java.lang.Readable)>($r7);

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        r3 = $r9;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke r3.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void <init>(java.lang.Readable)
    {
        java.util.Scanner r0;
        java.lang.Readable r1;
        java.nio.CharBuffer $r2;
        java.util.regex.Pattern $r3;
        java.util.Locale $r4;
        int $i0;
        java.lang.NullPointerException $r5;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.Readable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(1024);

        r0.<java.util.Scanner: java.nio.CharBuffer buffer> = $r2;

        $r3 = <java.util.Scanner: java.util.regex.Pattern DEFAULT_DELIMITER>;

        r0.<java.util.Scanner: java.util.regex.Pattern delimiter> = $r3;

        r0.<java.util.Scanner: int currentRadix> = 10;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<java.util.Scanner: java.util.Locale locale> = $r4;

        r0.<java.util.Scanner: int findStartIndex> = 0;

        $i0 = r0.<java.util.Scanner: int findStartIndex>;

        r0.<java.util.Scanner: int preStartIndex> = $i0;

        r0.<java.util.Scanner: int bufferLength> = 0;

        r0.<java.util.Scanner: boolean closed> = 0;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        r0.<java.util.Scanner: boolean inputExhausted> = 0;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        r0.<java.util.Scanner: int cachedNextIndex> = -1;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedFloatPattern> = null;

        r0.<java.util.Scanner: int cachedIntegerPatternRadix> = -1;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedIntegerPattern> = null;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("src == null");

        throw $r5;

     label1:
        specialinvoke r0.<java.util.Scanner: void setInput(java.lang.Readable)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.util.Scanner r0;
        java.lang.String r1;
        java.nio.CharBuffer $r2;
        java.util.regex.Pattern $r3;
        java.util.Locale $r4;
        int $i0;
        java.io.StringReader $r5;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(1024);

        r0.<java.util.Scanner: java.nio.CharBuffer buffer> = $r2;

        $r3 = <java.util.Scanner: java.util.regex.Pattern DEFAULT_DELIMITER>;

        r0.<java.util.Scanner: java.util.regex.Pattern delimiter> = $r3;

        r0.<java.util.Scanner: int currentRadix> = 10;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<java.util.Scanner: java.util.Locale locale> = $r4;

        r0.<java.util.Scanner: int findStartIndex> = 0;

        $i0 = r0.<java.util.Scanner: int findStartIndex>;

        r0.<java.util.Scanner: int preStartIndex> = $i0;

        r0.<java.util.Scanner: int bufferLength> = 0;

        r0.<java.util.Scanner: boolean closed> = 0;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        r0.<java.util.Scanner: boolean inputExhausted> = 0;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        r0.<java.util.Scanner: int cachedNextIndex> = -1;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedFloatPattern> = null;

        r0.<java.util.Scanner: int cachedIntegerPatternRadix> = -1;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedIntegerPattern> = null;

        $r5 = new java.io.StringReader;

        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<java.util.Scanner: void setInput(java.lang.Readable)>($r5);

        return;
    }

    public void <init>(java.nio.channels.ReadableByteChannel)
    {
        java.util.Scanner r0;
        java.nio.channels.ReadableByteChannel r1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.nio.channels.ReadableByteChannel;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke r0.<java.util.Scanner: void <init>(java.nio.channels.ReadableByteChannel,java.lang.String)>(r1, $r3);

        return;
    }

    public void <init>(java.nio.channels.ReadableByteChannel, java.lang.String)
    {
        java.util.Scanner r0;
        java.nio.channels.ReadableByteChannel r1;
        java.lang.String r2;
        java.nio.CharBuffer $r3;
        java.util.regex.Pattern $r4;
        java.util.Locale $r5;
        int $i0;
        java.io.Reader $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.nio.channels.ReadableByteChannel;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(1024);

        r0.<java.util.Scanner: java.nio.CharBuffer buffer> = $r3;

        $r4 = <java.util.Scanner: java.util.regex.Pattern DEFAULT_DELIMITER>;

        r0.<java.util.Scanner: java.util.regex.Pattern delimiter> = $r4;

        r0.<java.util.Scanner: int currentRadix> = 10;

        $r5 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<java.util.Scanner: java.util.Locale locale> = $r5;

        r0.<java.util.Scanner: int findStartIndex> = 0;

        $i0 = r0.<java.util.Scanner: int findStartIndex>;

        r0.<java.util.Scanner: int preStartIndex> = $i0;

        r0.<java.util.Scanner: int bufferLength> = 0;

        r0.<java.util.Scanner: boolean closed> = 0;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        r0.<java.util.Scanner: boolean inputExhausted> = 0;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        r0.<java.util.Scanner: int cachedNextIndex> = -1;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedFloatPattern> = null;

        r0.<java.util.Scanner: int cachedIntegerPatternRadix> = -1;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedIntegerPattern> = null;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("src == null");

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("charsetName == null");

        throw $r7;

     label2:
        $r6 = staticinvoke <java.nio.channels.Channels: java.io.Reader newReader(java.nio.channels.ReadableByteChannel,java.lang.String)>(r1, r2);

        specialinvoke r0.<java.util.Scanner: void setInput(java.lang.Readable)>($r6);

        return;
    }

    private java.lang.String addNegativeSign(java.lang.String)
    {
        java.util.Scanner r0;
        java.lang.String r1, r2, r3, $r5, $r7, $r12, $r17, $r21;
        java.text.DecimalFormat $r4, $r6, $r14, $r22;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13, $r15, $r16, $r18, $r19, $r20, $r23, $r24;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        r2 = "";

        r3 = "";

        $r4 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        $r5 = virtualinvoke $r4.<java.text.DecimalFormat: java.lang.String getNegativePrefix()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\Q");

        $r22 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        $r21 = virtualinvoke $r22.<java.text.DecimalFormat: java.lang.String getNegativePrefix()>();

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\E");

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r6 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        $r7 = virtualinvoke $r6.<java.text.DecimalFormat: java.lang.String getNegativeSuffix()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\Q");

        $r14 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        $r17 = virtualinvoke $r14.<java.text.DecimalFormat: java.lang.String getNegativeSuffix()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\E");

        r3 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private java.lang.String addPositiveSign(java.lang.String)
    {
        java.util.Scanner r0;
        java.lang.String r1, r2, r3, $r5, $r7, $r12, $r17, $r21;
        java.text.DecimalFormat $r4, $r6, $r14, $r22;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13, $r15, $r16, $r18, $r19, $r20, $r23, $r24;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        r2 = "";

        r3 = "";

        $r4 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        $r5 = virtualinvoke $r4.<java.text.DecimalFormat: java.lang.String getPositivePrefix()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\Q");

        $r22 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        $r21 = virtualinvoke $r22.<java.text.DecimalFormat: java.lang.String getPositivePrefix()>();

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\E");

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r6 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        $r7 = virtualinvoke $r6.<java.text.DecimalFormat: java.lang.String getPositiveSuffix()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\Q");

        $r14 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        $r17 = virtualinvoke $r14.<java.text.DecimalFormat: java.lang.String getPositiveSuffix()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\E");

        r3 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private void checkNotNull(java.util.regex.Pattern)
    {
        java.util.Scanner r0;
        java.util.regex.Pattern r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.util.regex.Pattern;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("pattern == null");

        throw $r2;

     label1:
        return;
    }

    private void checkOpen()
    {
        java.util.Scanner r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: java.util.Scanner;

        $z0 = r0.<java.util.Scanner: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void checkRadix(int)
    {
        java.util.Scanner r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        if i0 < 2 goto label1;

        if i0 <= 36 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid radix: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    private void expandBuffer()
    {
        java.util.Scanner r0;
        int i0, i1, i2, i3;
        char[] r1, $r6;
        java.nio.CharBuffer $r2, $r3, $r4, $r5, $r7, $r8, $r9;

        r0 := @this: java.util.Scanner;

        $r2 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        i0 = virtualinvoke $r2.<java.nio.CharBuffer: int position()>();

        $r3 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        i1 = virtualinvoke $r3.<java.nio.CharBuffer: int capacity()>();

        $r4 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        i2 = virtualinvoke $r4.<java.nio.CharBuffer: int limit()>();

        i3 = i1 * 2;

        r1 = newarray (char)[i3];

        $r5 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        $r6 = virtualinvoke $r5.<java.nio.CharBuffer: char[] array()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r1, 0, i2);

        $r7 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(r1, 0, i3);

        r0.<java.util.Scanner: java.nio.CharBuffer buffer> = $r7;

        $r8 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        virtualinvoke $r8.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);

        $r9 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        virtualinvoke $r9.<java.nio.CharBuffer: java.nio.Buffer limit(int)>(i2);

        return;
    }

    private int findDelimiterAfter()
    {
        java.util.Scanner r0;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.regex.Matcher $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: java.util.Scanner;

        z0 = 0;

     label1:
        if z0 != 0 goto label4;

        $r3 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $z1 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label2;

        z0 = 1;

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i2 = virtualinvoke $r4.<java.util.regex.Matcher: int start()>();

        $i3 = r0.<java.util.Scanner: int findStartIndex>;

        if $i2 != $i3 goto label1;

        $r5 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i4 = virtualinvoke $r5.<java.util.regex.Matcher: int start()>();

        $r6 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i5 = virtualinvoke $r6.<java.util.regex.Matcher: int end()>();

        if $i4 != $i5 goto label1;

        z0 = 0;

        goto label1;

     label2:
        $z2 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z2 != 0 goto label3;

        specialinvoke r0.<java.util.Scanner: void readMore()>();

        specialinvoke r0.<java.util.Scanner: void resetMatcher()>();

        goto label1;

     label3:
        return -1;

     label4:
        $r1 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        i0 = virtualinvoke $r1.<java.util.regex.Matcher: int start()>();

        $r2 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i1 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        r0.<java.util.Scanner: int findStartIndex> = $i1;

        return i0;
    }

    private int findPreDelimiter()
    {
        java.util.Scanner r0;
        boolean z0, $z1, $z2, $z3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.regex.Matcher $r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.util.Scanner;

        z0 = 0;

     label1:
        if z0 != 0 goto label4;

        $r3 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $z1 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label2;

        z0 = 1;

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i2 = virtualinvoke $r4.<java.util.regex.Matcher: int start()>();

        $i3 = r0.<java.util.Scanner: int findStartIndex>;

        if $i2 != $i3 goto label1;

        $r5 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i4 = virtualinvoke $r5.<java.util.regex.Matcher: int end()>();

        $i5 = r0.<java.util.Scanner: int bufferLength>;

        if $i4 != $i5 goto label1;

        $z3 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z3 != 0 goto label1;

        specialinvoke r0.<java.util.Scanner: void readMore()>();

        specialinvoke r0.<java.util.Scanner: void resetMatcher()>();

        z0 = 0;

        goto label1;

     label2:
        $z2 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z2 != 0 goto label3;

        specialinvoke r0.<java.util.Scanner: void readMore()>();

        specialinvoke r0.<java.util.Scanner: void resetMatcher()>();

        goto label1;

     label3:
        return -1;

     label4:
        $r1 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        i0 = virtualinvoke $r1.<java.util.regex.Matcher: int end()>();

        $r2 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i1 = virtualinvoke $r2.<java.util.regex.Matcher: int end()>();

        r0.<java.util.Scanner: int findStartIndex> = $i1;

        return i0;
    }

    private java.util.regex.Pattern getFloatPattern()
    {
        java.util.Scanner r0;
        java.text.DecimalFormatSymbols r1;
        java.lang.String r2, r3, r4, r5, r6, r7, r8, r9, r10, $r38, $r48, $r64, $r68, $r81;
        java.text.DecimalFormat $r11, $r13, $r79;
        java.util.regex.Pattern $r12, $r80, $r82, $r83;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r65, $r66, $r67, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76;
        char $c0;
        java.text.NumberFormat $r77;
        java.util.Locale $r78;

        r0 := @this: java.util.Scanner;

        $r11 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        if $r11 != null goto label1;

        $r78 = r0.<java.util.Scanner: java.util.Locale locale>;

        $r77 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>($r78);

        $r79 = (java.text.DecimalFormat) $r77;

        r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat> = $r79;

     label1:
        $r12 = r0.<java.util.Scanner: java.util.regex.Pattern cachedFloatPattern>;

        if $r12 == null goto label2;

        $r82 = r0.<java.util.Scanner: java.util.regex.Pattern cachedFloatPattern>;

        return $r82;

     label2:
        $r13 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        r1 = virtualinvoke $r13.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();

        r2 = specialinvoke r0.<java.util.Scanner: java.lang.String getNumeral(java.lang.String,java.lang.String)>("([0-9]|(\\p{javaDigit}))", "[\\p{javaDigit}&&[^0]]");

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $c0 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getDecimalSeparator()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        r3 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("([0-9]|(\\p{javaDigit}))");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*+|");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("([0-9]|(\\p{javaDigit}))");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("++)");

        r4 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("([eE][+-]?");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("([0-9]|(\\p{javaDigit}))");

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+)?");

        r5 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(([-+]?");

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r34 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?)");

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")|");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r38 = specialinvoke r0.<java.util.Scanner: java.lang.String addPositiveSign(java.lang.String)>(r4);

        $r39 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?)");

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")|");

        $r49 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r48 = specialinvoke r0.<java.util.Scanner: java.lang.String addNegativeSign(java.lang.String)>(r4);

        $r47 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r52 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?)");

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("))");

        r6 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        r7 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getNaN()>();

        r8 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getInfinity()>();

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(NaN|\\Q");

        $r58 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\E|Infinity|\\Q");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\E)");

        r9 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("((([-+]?(");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r66 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")))|");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r68 = specialinvoke r0.<java.util.Scanner: java.lang.String addPositiveSign(java.lang.String)>(r9);

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r62 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")|");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r64 = specialinvoke r0.<java.util.Scanner: java.lang.String addNegativeSign(java.lang.String)>(r9);

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r74 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("))");

        r10 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r71 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("([-+]?0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][-+]?[0-9]+)?)");

        $r73 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r81 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        $r80 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r81);

        r0.<java.util.Scanner: java.util.regex.Pattern cachedFloatPattern> = $r80;

        $r83 = r0.<java.util.Scanner: java.util.regex.Pattern cachedFloatPattern>;

        return $r83;
    }

    private java.util.regex.Pattern getIntegerPattern(int)
    {
        java.util.Scanner r0;
        int i0, $i1;
        java.lang.String r1, r2, r3, r4, $r6, $r7, $r13, $r16, $r24, $r28;
        java.text.DecimalFormat $r5, $r35;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r29;
        java.util.regex.Pattern $r30, $r32, $r33;
        java.util.Locale $r31;
        java.text.NumberFormat $r34;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.Scanner: void checkRadix(int)>(i0);

        $r5 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        if $r5 != null goto label1;

        $r31 = r0.<java.util.Scanner: java.util.Locale locale>;

        $r34 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>($r31);

        $r35 = (java.text.DecimalFormat) $r34;

        r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat> = $r35;

     label1:
        $i1 = r0.<java.util.Scanner: int cachedIntegerPatternRadix>;

        if $i1 != i0 goto label2;

        $r30 = r0.<java.util.Scanner: java.util.regex.Pattern cachedIntegerPattern>;

        return $r30;

     label2:
        $r6 = "0123456789abcdefghijklmnopqrstuvwxyz";

        r1 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r7 = "0123456789abcdefghijklmnopqrstuvwxyz";

        r2 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(1, i0);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("((?i)[");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]|\\p{javaDigit})");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("((?i)[");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]|([\\p{javaDigit}&&[^0]]))");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = specialinvoke r0.<java.util.Scanner: java.lang.String getNumeral(java.lang.String,java.lang.String)>($r13, $r16);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(([-+]?(");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")))|");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r24 = specialinvoke r0.<java.util.Scanner: java.lang.String addPositiveSign(java.lang.String)>(r3);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")|");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r28 = specialinvoke r0.<java.util.Scanner: java.lang.String addNegativeSign(java.lang.String)>(r3);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r4 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<java.util.Scanner: int cachedIntegerPatternRadix> = i0;

        $r32 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r4);

        r0.<java.util.Scanner: java.util.regex.Pattern cachedIntegerPattern> = $r32;

        $r33 = r0.<java.util.Scanner: java.util.regex.Pattern cachedIntegerPattern>;

        return $r33;
    }

    private java.lang.String getNumeral(java.lang.String, java.lang.String)
    {
        java.util.Scanner r0;
        java.lang.String r1, r2, r3, r4, $r29;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        java.text.DecimalFormat $r7;
        java.text.DecimalFormatSymbols $r8;
        char $c0;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $r7 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        $r8 = virtualinvoke $r7.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();

        $c0 = virtualinvoke $r8.<java.text.DecimalFormatSymbols: char getGroupingSeparator()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")+)");

        r4 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("((");

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("++)|");

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r29;
    }

    private void readMore()
    {
        java.util.Scanner r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.io.IOException r1, $r16;
        java.nio.CharBuffer $r2, $r3, $r4, $r5, $r6, $r8, $r12, $r14, $r15;
        java.lang.Readable $r10;

        r0 := @this: java.util.Scanner;

        $r2 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        i0 = virtualinvoke $r2.<java.nio.CharBuffer: int position()>();

        i1 = r0.<java.util.Scanner: int bufferLength>;

        $i4 = r0.<java.util.Scanner: int bufferLength>;

        $r3 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        $i5 = virtualinvoke $r3.<java.nio.CharBuffer: int capacity()>();

        if $i4 < $i5 goto label1;

        specialinvoke r0.<java.util.Scanner: void expandBuffer()>();

     label1:
        $r5 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        $r4 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        $i6 = virtualinvoke $r4.<java.nio.CharBuffer: int capacity()>();

        virtualinvoke $r5.<java.nio.CharBuffer: java.nio.Buffer limit(int)>($i6);

        $r6 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        virtualinvoke $r6.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i1);

     label2:
        $r10 = r0.<java.util.Scanner: java.lang.Readable input>;

        $r8 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        i3 = interfaceinvoke $r10.<java.lang.Readable: int read(java.nio.CharBuffer)>($r8);

     label3:
        i2 = i3;

        if i2 == 0 goto label2;

     label4:
        $r12 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        virtualinvoke $r12.<java.nio.CharBuffer: java.nio.Buffer flip()>();

        $r14 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        virtualinvoke $r14.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);

        if i2 != -1 goto label6;

        r0.<java.util.Scanner: boolean inputExhausted> = 1;

        return;

     label5:
        $r16 := @caughtexception;

        r1 = $r16;

        $r15 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        $i9 = virtualinvoke $r15.<java.nio.CharBuffer: int position()>();

        r0.<java.util.Scanner: int bufferLength> = $i9;

        i2 = -1;

        r0.<java.util.Scanner: java.io.IOException lastIOException> = r1;

        goto label4;

     label6:
        $i8 = r0.<java.util.Scanner: int bufferLength>;

        $i7 = i2 + $i8;

        r0.<java.util.Scanner: int bufferLength> = $i7;

        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label2 to label3 with label5;
    }

    private void recoverPreviousStatus()
    {
        java.util.Scanner r0;
        int $i0;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int preStartIndex>;

        r0.<java.util.Scanner: int findStartIndex> = $i0;

        return;
    }

    private java.lang.String removeLocaleInfo(java.lang.String, java.lang.Class)
    {
        java.util.Scanner r0;
        java.lang.String r1, r5, $r9, $r15, $r16, $r19, $r20, $r21, $r22;
        java.lang.Class r2, $r11, $r12;
        java.text.DecimalFormatSymbols r3;
        java.lang.StringBuilder r4, r6, $r8, $r10, $r13, $r17, $r18;
        boolean z0, $z1, $z2;
        int i0, i1, i2, i3, $i6, $i7, $i9, $i10, $i12, $i14, $i15;
        java.text.DecimalFormat $r7;
        char $c4, $c5, $c8, $c11, $c13, $c16;
        java.lang.AssertionError $r14;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r7 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        r3 = virtualinvoke $r7.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        r4 = $r8;

        z0 = specialinvoke r0.<java.util.Scanner: boolean removeLocaleSign(java.lang.StringBuilder)>(r4);

        $c4 = virtualinvoke r3.<java.text.DecimalFormatSymbols: char getGroupingSeparator()>();

        r5 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c4);

     label01:
        i0 = virtualinvoke r4.<java.lang.StringBuilder: int indexOf(java.lang.String)>(r5);

        if i0 == -1 goto label02;

        $i15 = i0 + 1;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i0, $i15);

        goto label01;

     label02:
        $c5 = virtualinvoke r3.<java.text.DecimalFormatSymbols: char getDecimalSeparator()>();

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c5);

        i1 = virtualinvoke r4.<java.lang.StringBuilder: int indexOf(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("");

        r6 = $r10;

        $r12 = <java.lang.Integer: java.lang.Class TYPE>;

        if r2 != $r12 goto label05;

        i3 = 0;

     label03:
        $i14 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();

        if i3 >= $i14 goto label06;

        $c13 = virtualinvoke r4.<java.lang.StringBuilder: char charAt(int)>(i3);

        $i12 = staticinvoke <java.lang.Character: int digit(char,int)>($c13, 36);

        if $i12 == -1 goto label04;

        $c16 = virtualinvoke r4.<java.lang.StringBuilder: char charAt(int)>(i3);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c16);

     label04:
        i3 = i3 + 1;

        goto label03;

     label05:
        $r11 = <java.lang.Float: java.lang.Class TYPE>;

        if r2 != $r11 goto label14;

        $r16 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = virtualinvoke r3.<java.text.DecimalFormatSymbols: java.lang.String getNaN()>();

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z1 == 0 goto label10;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NaN");

     label06:
        $i6 = virtualinvoke r6.<java.lang.StringBuilder: int length()>();

        if $i6 != 0 goto label07;

        r6 = r4;

     label07:
        if i1 == -1 goto label08;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i1, ".");

     label08:
        if z0 == 0 goto label09;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 45);

     label09:
        $r22 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;

     label10:
        $r19 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke r3.<java.text.DecimalFormatSymbols: java.lang.String getInfinity()>();

        $z2 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z2 == 0 goto label11;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Infinity");

        goto label06;

     label11:
        i2 = 0;

     label12:
        $i7 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();

        if i2 >= $i7 goto label06;

        $c8 = virtualinvoke r4.<java.lang.StringBuilder: char charAt(int)>(i2);

        $i9 = staticinvoke <java.lang.Character: int digit(char,int)>($c8, 10);

        if $i9 == -1 goto label13;

        $c11 = virtualinvoke r4.<java.lang.StringBuilder: char charAt(int)>(i2);

        $i10 = staticinvoke <java.lang.Character: int digit(char,int)>($c11, 10);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

     label13:
        i2 = i2 + 1;

        goto label12;

     label14:
        $r14 = new java.lang.AssertionError;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported type: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r15);

        throw $r14;
    }

    private java.lang.String removeLocaleInfoFromFloat(java.lang.String)
    {
        java.util.Scanner r0;
        java.lang.String r1, r2, r3, r4, $r9, $r12;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Class $r5, $r11;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(120);

        if $i1 != -1 goto label1;

        $i2 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(88);

        if $i2 == -1 goto label2;

     label1:
        return r1;

     label2:
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(101);

        if i0 != -1 goto label3;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(69);

        if i0 == -1 goto label4;

     label3:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i3 = i0 + 1;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4);

        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        r4 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>(r2, $r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("e");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label4:
        $r11 = <java.lang.Float: java.lang.Class TYPE>;

        $r12 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>(r1, $r11);

        return $r12;
    }

    private boolean removeLocaleSign(java.lang.StringBuilder)
    {
        java.util.Scanner r0;
        java.lang.StringBuilder r1;
        java.lang.String r2, r3, r4, r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean z0, $z1, $z2, $z3, $z4;
        java.text.DecimalFormat $r6, $r7, $r8, $r9;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.StringBuilder;

        $r6 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        r2 = virtualinvoke $r6.<java.text.DecimalFormat: java.lang.String getPositivePrefix()>();

        $r7 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        r3 = virtualinvoke $r7.<java.text.DecimalFormat: java.lang.String getPositiveSuffix()>();

        $r8 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        r4 = virtualinvoke $r8.<java.text.DecimalFormat: java.lang.String getNegativePrefix()>();

        $r9 = r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat>;

        r5 = virtualinvoke $r9.<java.text.DecimalFormat: java.lang.String getNegativeSuffix()>();

        $i1 = virtualinvoke r1.<java.lang.StringBuilder: int indexOf(java.lang.String)>("+");

        if $i1 != 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, 1);

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $i12 = virtualinvoke r1.<java.lang.StringBuilder: int indexOf(java.lang.String)>(r2);

        if $i12 != 0 goto label2;

        $i15 = virtualinvoke r2.<java.lang.String: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $i15);

     label2:
        $z2 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $i11 = virtualinvoke r1.<java.lang.StringBuilder: int indexOf(java.lang.String)>(r3);

        if $i11 == -1 goto label3;

        $i9 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i10 = virtualinvoke r3.<java.lang.String: int length()>();

        $i13 = $i9 - $i10;

        $i14 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i13, $i14);

     label3:
        i0 = virtualinvoke r1.<java.lang.StringBuilder: int indexOf(java.lang.String)>("-");

        z0 = 0;

        if i0 != 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, 1);

        z0 = 1;

     label4:
        $z4 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label5;

        $i7 = virtualinvoke r1.<java.lang.StringBuilder: int indexOf(java.lang.String)>(r4);

        if $i7 != 0 goto label5;

        $i8 = virtualinvoke r4.<java.lang.String: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $i8);

        z0 = 1;

     label5:
        $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label6;

        $i3 = virtualinvoke r1.<java.lang.StringBuilder: int indexOf(java.lang.String)>(r5);

        if $i3 == -1 goto label6;

        $i2 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i5 = virtualinvoke r5.<java.lang.String: int length()>();

        $i4 = $i2 - $i5;

        $i6 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i4, $i6);

        z0 = 1;

     label6:
        return z0;
    }

    private void resetMatcher()
    {
        java.util.Scanner r0;
        java.util.regex.Matcher $r1, $r3, $r5, $r7, $r9, $r13;
        java.nio.CharBuffer $r2, $r11;
        int $i0, $i1;
        java.util.regex.Pattern $r12;

        r0 := @this: java.util.Scanner;

        $r1 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        if $r1 != null goto label2;

        $r12 = r0.<java.util.Scanner: java.util.regex.Pattern delimiter>;

        $r11 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        $r13 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r11);

        r0.<java.util.Scanner: java.util.regex.Matcher matcher> = $r13;

     label1:
        $r5 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        virtualinvoke $r5.<java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)>(1);

        $r7 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        virtualinvoke $r7.<java.util.regex.Matcher: java.util.regex.Matcher useAnchoringBounds(boolean)>(0);

        $r9 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i1 = r0.<java.util.Scanner: int findStartIndex>;

        $i0 = r0.<java.util.Scanner: int bufferLength>;

        virtualinvoke $r9.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i1, $i0);

        return;

     label2:
        $r3 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r2 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>($r2);

        goto label1;
    }

    private void saveCurrentStatus()
    {
        java.util.Scanner r0;
        int $i0;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int findStartIndex>;

        r0.<java.util.Scanner: int preStartIndex> = $i0;

        return;
    }

    private boolean setHeadTokenRegion(int)
    {
        java.util.Scanner r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10;
        boolean z0;
        java.util.regex.Matcher $r1, $r2, $r3, $r4, $r7;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        z0 = 0;

        if i0 != -1 goto label1;

        i3 = r0.<java.util.Scanner: int preStartIndex>;

        i4 = r0.<java.util.Scanner: int bufferLength>;

        z0 = 0;

        if i3 == i4 goto label1;

        i5 = r0.<java.util.Scanner: int preStartIndex>;

        i6 = r0.<java.util.Scanner: int bufferLength>;

        $i10 = r0.<java.util.Scanner: int bufferLength>;

        r0.<java.util.Scanner: int findStartIndex> = $i10;

        $r7 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        virtualinvoke $r7.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>(i5, i6);

        z0 = 1;

     label1:
        if -1 == i0 goto label2;

        $i7 = r0.<java.util.Scanner: int preStartIndex>;

        $r1 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i8 = virtualinvoke $r1.<java.util.regex.Matcher: int start()>();

        if $i7 == $i8 goto label2;

        i1 = r0.<java.util.Scanner: int preStartIndex>;

        $r2 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        i2 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        $r3 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i9 = virtualinvoke $r3.<java.util.regex.Matcher: int start()>();

        r0.<java.util.Scanner: int findStartIndex> = $i9;

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        virtualinvoke $r4.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>(i1, i2);

        z0 = 1;

     label2:
        return z0;
    }

    private void setInput(java.lang.Readable)
    {
        java.util.Scanner r0;
        java.lang.Readable r1;
        java.nio.CharBuffer $r2, $r4;
        java.util.regex.Pattern $r5;
        java.util.regex.Matcher $r6;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.Readable;

        r0.<java.util.Scanner: java.lang.Readable input> = r1;

        $r2 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.Buffer limit(int)>(0);

        $r5 = r0.<java.util.Scanner: java.util.regex.Pattern delimiter>;

        $r4 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        r0.<java.util.Scanner: java.util.regex.Matcher matcher> = $r6;

        return;
    }

    private void setLocale(java.util.Locale)
    {
        java.util.Scanner r0;
        java.util.Locale r1;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.util.Locale;

        r0.<java.util.Scanner: java.util.Locale locale> = r1;

        r0.<java.util.Scanner: java.text.DecimalFormat decimalFormat> = null;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedFloatPattern> = null;

        r0.<java.util.Scanner: int cachedIntegerPatternRadix> = -1;

        r0.<java.util.Scanner: java.util.regex.Pattern cachedIntegerPattern> = null;

        return;
    }

    private boolean setTokenRegion()
    {
        java.util.Scanner r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2, $r4, $r6;
        boolean $z0;

        r0 := @this: java.util.Scanner;

        $r2 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r1 = r0.<java.util.Scanner: java.util.regex.Pattern delimiter>;

        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>($r1);

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i3 = r0.<java.util.Scanner: int findStartIndex>;

        $i2 = r0.<java.util.Scanner: int bufferLength>;

        virtualinvoke $r4.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i3, $i2);

        i0 = specialinvoke r0.<java.util.Scanner: int findPreDelimiter()>();

        $z0 = specialinvoke r0.<java.util.Scanner: boolean setHeadTokenRegion(int)>(i0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        i1 = specialinvoke r0.<java.util.Scanner: int findDelimiterAfter()>();

        if i1 != -1 goto label3;

        $i6 = r0.<java.util.Scanner: int findStartIndex>;

        $i4 = r0.<java.util.Scanner: int bufferLength>;

        if $i6 != $i4 goto label2;

        return 0;

     label2:
        i1 = r0.<java.util.Scanner: int bufferLength>;

        $i5 = r0.<java.util.Scanner: int bufferLength>;

        r0.<java.util.Scanner: int findStartIndex> = $i5;

     label3:
        $r6 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        virtualinvoke $r6.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>(i0, i1);

        return 1;
    }

    public void close()
    {
        java.util.Scanner r0;
        java.io.IOException r1, $r5;
        boolean $z0, $z1;
        java.lang.Readable $r2, $r3;
        java.io.Closeable $r4;

        r0 := @this: java.util.Scanner;

        $z0 = r0.<java.util.Scanner: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<java.util.Scanner: java.lang.Readable input>;

        $z1 = $r2 instanceof java.io.Closeable;

        if $z1 == 0 goto label3;

     label2:
        $r3 = r0.<java.util.Scanner: java.lang.Readable input>;

        $r4 = (java.io.Closeable) $r3;

        interfaceinvoke $r4.<java.io.Closeable: void close()>();

     label3:
        r0.<java.util.Scanner: boolean closed> = 1;

        return;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        r0.<java.util.Scanner: java.io.IOException lastIOException> = r1;

        goto label3;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public java.util.regex.Pattern delimiter()
    {
        java.util.Scanner r0;
        java.util.regex.Pattern $r1;

        r0 := @this: java.util.Scanner;

        $r1 = r0.<java.util.Scanner: java.util.regex.Pattern delimiter>;

        return $r1;
    }

    public java.lang.String findInLine(java.lang.String)
    {
        java.util.Scanner r0;
        java.lang.String r1, $r3;
        java.util.regex.Pattern $r2;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<java.util.Scanner: java.lang.String findInLine(java.util.regex.Pattern)>($r2);

        return $r3;
    }

    public java.lang.String findInLine(java.util.regex.Pattern)
    {
        java.util.Scanner r0;
        java.util.regex.Pattern r1, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        boolean z0, $z1, $z2, $z3;
        java.util.regex.Matcher $r3, $r5, $r8, $r12, $r13, $r16, $r18, $r19, $r24, $r25, $r27, $r28, $r29;
        java.nio.CharBuffer $r9, $r10, $r15, $r21, $r23;
        java.lang.String $r20;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.util.regex.Pattern;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        specialinvoke r0.<java.util.Scanner: void checkNotNull(java.util.regex.Pattern)>(r1);

        i0 = 0;

        $r3 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r2 = <java.util.Scanner: java.util.regex.Pattern MULTI_LINE_TERMINATOR>;

        virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>($r2);

        $r5 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i4 = r0.<java.util.Scanner: int findStartIndex>;

        $i3 = r0.<java.util.Scanner: int bufferLength>;

        virtualinvoke $r5.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i4, $i3);

        z0 = 0;

        i1 = 0;

     label1:
        if z0 != 0 goto label4;

        $r25 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $z3 = virtualinvoke $r25.<java.util.regex.Matcher: boolean find()>();

        if $z3 == 0 goto label2;

        $r27 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        i0 = virtualinvoke $r27.<java.util.regex.Matcher: int start()>();

        $r29 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i16 = virtualinvoke $r29.<java.util.regex.Matcher: int end()>();

        $r28 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i15 = virtualinvoke $r28.<java.util.regex.Matcher: int start()>();

        i1 = $i16 - $i15;

        z0 = 1;

        goto label1;

     label2:
        $z2 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z2 != 0 goto label3;

        specialinvoke r0.<java.util.Scanner: void readMore()>();

        specialinvoke r0.<java.util.Scanner: void resetMatcher()>();

        goto label1;

     label3:
        i0 = r0.<java.util.Scanner: int bufferLength>;

        z0 = 1;

        goto label1;

     label4:
        $r8 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        virtualinvoke $r8.<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>(r1);

        $r9 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        i2 = virtualinvoke $r9.<java.nio.CharBuffer: int limit()>();

        $r10 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        $i5 = i0 + i1;

        virtualinvoke $r10.<java.nio.CharBuffer: java.nio.Buffer limit(int)>($i5);

        $r12 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i7 = r0.<java.util.Scanner: int findStartIndex>;

        $i6 = i0 + i1;

        virtualinvoke $r12.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i7, $i6);

        $r13 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $z1 = virtualinvoke $r13.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label7;

        $r16 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i10 = virtualinvoke $r16.<java.util.regex.Matcher: int end()>();

        r0.<java.util.Scanner: int findStartIndex> = $i10;

        $r18 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i8 = virtualinvoke $r18.<java.util.regex.Matcher: int end()>();

        if i0 != $i8 goto label5;

        $i14 = r0.<java.util.Scanner: int findStartIndex>;

        $i13 = i1 + $i14;

        r0.<java.util.Scanner: int findStartIndex> = $i13;

     label5:
        $i9 = r0.<java.util.Scanner: int bufferLength>;

        if i0 == $i9 goto label6;

        $i12 = i0 + i1;

        $r24 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i11 = virtualinvoke $r24.<java.util.regex.Matcher: int end()>();

        if $i12 != $i11 goto label6;

        $r23 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        virtualinvoke $r23.<java.nio.CharBuffer: java.nio.Buffer limit(int)>(i2);

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        return null;

     label6:
        r0.<java.util.Scanner: boolean matchSuccessful> = 1;

        $r21 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        virtualinvoke $r21.<java.nio.CharBuffer: java.nio.Buffer limit(int)>(i2);

        $r19 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r20 = virtualinvoke $r19.<java.util.regex.Matcher: java.lang.String group()>();

        return $r20;

     label7:
        $r15 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        virtualinvoke $r15.<java.nio.CharBuffer: java.nio.Buffer limit(int)>(i2);

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        return null;
    }

    public java.lang.String findWithinHorizon(java.lang.String, int)
    {
        java.util.Scanner r0;
        java.lang.String r1, $r3;
        int i0;
        java.util.regex.Pattern $r2;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<java.util.Scanner: java.lang.String findWithinHorizon(java.util.regex.Pattern,int)>($r2, i0);

        return $r3;
    }

    public java.lang.String findWithinHorizon(java.util.regex.Pattern, int)
    {
        java.util.Scanner r0;
        java.util.regex.Pattern r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.lang.String r2;
        java.util.regex.Matcher $r3, $r5, $r6, $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.util.regex.Pattern;

        i0 := @parameter1: int;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        specialinvoke r0.<java.util.Scanner: void checkNotNull(java.util.regex.Pattern)>(r1);

        if i0 >= 0 goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("horizon < 0");

        throw $r11;

     label01:
        $r3 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>(r1);

        if i0 != 0 goto label07;

        i1 = 2147483647;

     label02:
        $i4 = r0.<java.util.Scanner: int bufferLength>;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i4);

        $i5 = r0.<java.util.Scanner: int bufferLength>;

        if i1 > $i5 goto label08;

        z0 = 1;

     label03:
        $r5 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i6 = r0.<java.util.Scanner: int findStartIndex>;

        virtualinvoke $r5.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i6, i2);

        $r6 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $z2 = virtualinvoke $r6.<java.util.regex.Matcher: boolean find()>();

        if $z2 == 0 goto label09;

        if i0 != 0 goto label04;

        $r10 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $z5 = virtualinvoke $r10.<java.util.regex.Matcher: boolean hitEnd()>();

        if $z5 == 0 goto label05;

     label04:
        if z0 != 0 goto label05;

        $z4 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z4 == 0 goto label10;

     label05:
        $r9 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        r2 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group()>();

     label06:
        if r2 == null goto label11;

        $r8 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i7 = virtualinvoke $r8.<java.util.regex.Matcher: int end()>();

        r0.<java.util.Scanner: int findStartIndex> = $i7;

        r0.<java.util.Scanner: boolean matchSuccessful> = 1;

        return r2;

     label07:
        $i3 = r0.<java.util.Scanner: int findStartIndex>;

        i1 = i0 + $i3;

        goto label02;

     label08:
        z0 = 0;

        goto label03;

     label09:
        r2 = null;

        if z0 != 0 goto label06;

        z1 = r0.<java.util.Scanner: boolean inputExhausted>;

        r2 = null;

        if z1 != 0 goto label06;

     label10:
        $z3 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z3 != 0 goto label02;

        specialinvoke r0.<java.util.Scanner: void readMore()>();

        specialinvoke r0.<java.util.Scanner: void resetMatcher()>();

        goto label02;

     label11:
        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        return r2;
    }

    public boolean hasNext()
    {
        java.util.Scanner r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r0 := @this: java.util.Scanner;

        $r1 = <java.util.Scanner: java.util.regex.Pattern ANY_PATTERN>;

        $z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>($r1);

        return $z0;
    }

    public boolean hasNext(java.lang.String)
    {
        java.util.Scanner r0;
        java.lang.String r1;
        java.util.regex.Pattern $r2;
        boolean $z0;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        $z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>($r2);

        return $z0;
    }

    public boolean hasNext(java.util.regex.Pattern)
    {
        java.util.Scanner r0;
        java.util.regex.Pattern r1;
        boolean z0, z1, $z2;
        java.util.regex.Matcher $r2, $r4;
        int $i0;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.util.regex.Pattern;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        specialinvoke r0.<java.util.Scanner: void checkNotNull(java.util.regex.Pattern)>(r1);

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        specialinvoke r0.<java.util.Scanner: void saveCurrentStatus()>();

        $z2 = specialinvoke r0.<java.util.Scanner: boolean setTokenRegion()>();

        if $z2 != 0 goto label1;

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        return 0;

     label1:
        $r2 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>(r1);

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        z1 = 0;

        if z0 == 0 goto label2;

        $i0 = r0.<java.util.Scanner: int findStartIndex>;

        r0.<java.util.Scanner: int cachedNextIndex> = $i0;

        r0.<java.util.Scanner: boolean matchSuccessful> = 1;

        z1 = 1;

     label2:
        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        return z1;
    }

    public boolean hasNextBigDecimal()
    {
        java.util.Scanner r0;
        boolean z0, z1;
        java.lang.String r1, $r5;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        java.math.BigDecimal $r6;
        java.lang.NumberFormatException $r7;

        r0 := @this: java.util.Scanner;

        $r3 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getFloatPattern()>();

        z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>($r3);

        z1 = 0;

        if z0 == 0 goto label3;

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group()>();

        r1 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfoFromFloat(java.lang.String)>($r5);

     label1:
        $r6 = new java.math.BigDecimal;

        specialinvoke $r6.<java.math.BigDecimal: void <init>(java.lang.String)>(r1);

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = $r6;

     label2:
        z1 = 1;

     label3:
        return z1;

     label4:
        $r7 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public boolean hasNextBigInteger()
    {
        java.util.Scanner r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int currentRadix>;

        $z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNextBigInteger(int)>($i0);

        return $z0;
    }

    public boolean hasNextBigInteger(int)
    {
        java.util.Scanner r0;
        int i0;
        boolean z0, z1;
        java.lang.String r1, $r5;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        java.lang.Class $r6;
        java.math.BigInteger $r7;
        java.lang.NumberFormatException $r8;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        $r3 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getIntegerPattern(int)>(i0);

        z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>($r3);

        z1 = 0;

        if z0 == 0 goto label3;

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group()>();

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        r1 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>($r5, $r6);

     label1:
        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(java.lang.String,int)>(r1, i0);

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = $r7;

     label2:
        z1 = 1;

     label3:
        return z1;

     label4:
        $r8 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public boolean hasNextBoolean()
    {
        java.util.Scanner r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r0 := @this: java.util.Scanner;

        $r1 = <java.util.Scanner: java.util.regex.Pattern BOOLEAN_PATTERN>;

        $z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>($r1);

        return $z0;
    }

    public boolean hasNextByte()
    {
        java.util.Scanner r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int currentRadix>;

        $z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNextByte(int)>($i0);

        return $z0;
    }

    public boolean hasNextByte(int)
    {
        java.util.Scanner r0;
        int i0;
        boolean z0, z1;
        java.lang.String r1, $r5;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        java.lang.Class $r6;
        java.lang.Byte $r7;
        java.lang.NumberFormatException $r8;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        $r3 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getIntegerPattern(int)>(i0);

        z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>($r3);

        z1 = 0;

        if z0 == 0 goto label3;

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group()>();

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        r1 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>($r5, $r6);

     label1:
        $r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)>(r1, i0);

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = $r7;

     label2:
        z1 = 1;

     label3:
        return z1;

     label4:
        $r8 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public boolean hasNextDouble()
    {
        java.util.Scanner r0;
        boolean z0, z1;
        java.lang.String r1, $r5;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        java.lang.Double $r6;
        java.lang.NumberFormatException $r7;

        r0 := @this: java.util.Scanner;

        $r3 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getFloatPattern()>();

        z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>($r3);

        z1 = 0;

        if z0 == 0 goto label3;

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group()>();

        r1 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfoFromFloat(java.lang.String)>($r5);

     label1:
        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r1);

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = $r6;

     label2:
        z1 = 1;

     label3:
        return z1;

     label4:
        $r7 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public boolean hasNextFloat()
    {
        java.util.Scanner r0;
        boolean z0, z1;
        java.lang.String r1, $r5;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        java.lang.Float $r6;
        java.lang.NumberFormatException $r7;

        r0 := @this: java.util.Scanner;

        $r3 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getFloatPattern()>();

        z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>($r3);

        z1 = 0;

        if z0 == 0 goto label3;

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group()>();

        r1 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfoFromFloat(java.lang.String)>($r5);

     label1:
        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(r1);

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = $r6;

     label2:
        z1 = 1;

     label3:
        return z1;

     label4:
        $r7 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public boolean hasNextInt()
    {
        java.util.Scanner r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int currentRadix>;

        $z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNextInt(int)>($i0);

        return $z0;
    }

    public boolean hasNextInt(int)
    {
        java.util.Scanner r0;
        int i0;
        boolean z0, z1;
        java.lang.String r1, $r5;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        java.lang.Class $r6;
        java.lang.Integer $r7;
        java.lang.NumberFormatException $r8;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        $r3 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getIntegerPattern(int)>(i0);

        z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>($r3);

        z1 = 0;

        if z0 == 0 goto label3;

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group()>();

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        r1 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>($r5, $r6);

     label1:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>(r1, i0);

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = $r7;

     label2:
        z1 = 1;

     label3:
        return z1;

     label4:
        $r8 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public boolean hasNextLine()
    {
        java.util.Scanner r0;
        java.lang.String r1;
        boolean z0;
        java.util.regex.Pattern $r2;

        r0 := @this: java.util.Scanner;

        specialinvoke r0.<java.util.Scanner: void saveCurrentStatus()>();

        $r2 = <java.util.Scanner: java.util.regex.Pattern LINE_PATTERN>;

        r1 = virtualinvoke r0.<java.util.Scanner: java.lang.String findWithinHorizon(java.util.regex.Pattern,int)>($r2, 0);

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        z0 = 0;

        if r1 == null goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean hasNextLong()
    {
        java.util.Scanner r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int currentRadix>;

        $z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNextLong(int)>($i0);

        return $z0;
    }

    public boolean hasNextLong(int)
    {
        java.util.Scanner r0;
        int i0;
        boolean z0, z1;
        java.lang.String r1, $r5;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        java.lang.Class $r6;
        java.lang.Long $r7;
        java.lang.NumberFormatException $r8;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        $r3 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getIntegerPattern(int)>(i0);

        z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>($r3);

        z1 = 0;

        if z0 == 0 goto label3;

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group()>();

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        r1 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>($r5, $r6);

     label1:
        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>(r1, i0);

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = $r7;

     label2:
        z1 = 1;

     label3:
        return z1;

     label4:
        $r8 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public boolean hasNextShort()
    {
        java.util.Scanner r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int currentRadix>;

        $z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNextShort(int)>($i0);

        return $z0;
    }

    public boolean hasNextShort(int)
    {
        java.util.Scanner r0;
        int i0;
        boolean z0, z1;
        java.lang.String r1, $r5;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        java.lang.Class $r6;
        java.lang.Short $r7;
        java.lang.NumberFormatException $r8;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        $r3 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getIntegerPattern(int)>(i0);

        z0 = virtualinvoke r0.<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>($r3);

        z1 = 0;

        if z0 == 0 goto label3;

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group()>();

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        r1 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>($r5, $r6);

     label1:
        $r7 = staticinvoke <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)>(r1, i0);

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = $r7;

     label2:
        z1 = 1;

     label3:
        return z1;

     label4:
        $r8 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public java.io.IOException ioException()
    {
        java.util.Scanner r0;
        java.io.IOException $r1;

        r0 := @this: java.util.Scanner;

        $r1 = r0.<java.util.Scanner: java.io.IOException lastIOException>;

        return $r1;
    }

    public java.util.Locale locale()
    {
        java.util.Scanner r0;
        java.util.Locale $r1;

        r0 := @this: java.util.Scanner;

        $r1 = r0.<java.util.Scanner: java.util.Locale locale>;

        return $r1;
    }

    public java.util.regex.MatchResult match()
    {
        java.util.Scanner r0;
        boolean $z0;
        java.util.regex.Matcher $r1;
        java.util.regex.MatchResult $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: java.util.Scanner;

        $z0 = r0.<java.util.Scanner: boolean matchSuccessful>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r2 = virtualinvoke $r1.<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>();

        return $r2;
    }

    public volatile java.lang.Object next()
    {
        java.util.Scanner r0;
        java.lang.String $r1;

        r0 := @this: java.util.Scanner;

        $r1 = virtualinvoke r0.<java.util.Scanner: java.lang.String next()>();

        return $r1;
    }

    public java.lang.String next()
    {
        java.util.Scanner r0;
        java.util.regex.Pattern $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Scanner;

        $r1 = <java.util.Scanner: java.util.regex.Pattern ANY_PATTERN>;

        $r2 = virtualinvoke r0.<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>($r1);

        return $r2;
    }

    public java.lang.String next(java.lang.String)
    {
        java.util.Scanner r0;
        java.lang.String r1, $r3;
        java.util.regex.Pattern $r2;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>($r2);

        return $r3;
    }

    public java.lang.String next(java.util.regex.Pattern)
    {
        java.util.Scanner r0;
        java.util.regex.Pattern r1;
        boolean $z0, $z1;
        java.util.regex.Matcher $r2, $r4, $r5;
        java.lang.String $r6;
        java.util.InputMismatchException $r7;
        java.util.NoSuchElementException $r8;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.util.regex.Pattern;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        specialinvoke r0.<java.util.Scanner: void checkNotNull(java.util.regex.Pattern)>(r1);

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        specialinvoke r0.<java.util.Scanner: void saveCurrentStatus()>();

        $z0 = specialinvoke r0.<java.util.Scanner: boolean setTokenRegion()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        throw $r8;

     label1:
        $r2 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>(r1);

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $z1 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        if $z1 != 0 goto label2;

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        $r7 = new java.util.InputMismatchException;

        specialinvoke $r7.<java.util.InputMismatchException: void <init>()>();

        throw $r7;

     label2:
        r0.<java.util.Scanner: boolean matchSuccessful> = 1;

        $r5 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r6 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group()>();

        return $r6;
    }

    public java.math.BigDecimal nextBigDecimal()
    {
        java.util.Scanner r0;
        java.lang.Object r1;
        java.lang.String r2, $r6;
        java.math.BigDecimal r3, $r7, $r8;
        boolean $z0;
        java.util.regex.Pattern $r5;
        int $i0;
        java.lang.NumberFormatException $r9;
        java.util.InputMismatchException $r10;

        r0 := @this: java.util.Scanner;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        r1 = r0.<java.util.Scanner: java.lang.Object cachedNextValue>;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        $z0 = r1 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label1;

        $i0 = r0.<java.util.Scanner: int cachedNextIndex>;

        r0.<java.util.Scanner: int findStartIndex> = $i0;

        $r8 = (java.math.BigDecimal) r1;

        return $r8;

     label1:
        $r5 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getFloatPattern()>();

        $r6 = virtualinvoke r0.<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>($r5);

        r2 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfoFromFloat(java.lang.String)>($r6);

     label2:
        $r7 = new java.math.BigDecimal;

        specialinvoke $r7.<java.math.BigDecimal: void <init>(java.lang.String)>(r2);

        r3 = $r7;

     label3:
        return r3;

     label4:
        $r9 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        $r10 = new java.util.InputMismatchException;

        specialinvoke $r10.<java.util.InputMismatchException: void <init>()>();

        throw $r10;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public java.math.BigInteger nextBigInteger()
    {
        java.util.Scanner r0;
        int $i0;
        java.math.BigInteger $r1;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int currentRadix>;

        $r1 = virtualinvoke r0.<java.util.Scanner: java.math.BigInteger nextBigInteger(int)>($i0);

        return $r1;
    }

    public java.math.BigInteger nextBigInteger(int)
    {
        java.util.Scanner r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.String r2, $r6;
        java.math.BigInteger r3, $r8, $r9;
        boolean $z0;
        java.util.regex.Pattern $r5;
        java.lang.Class $r7;
        java.lang.NumberFormatException $r10;
        java.util.InputMismatchException $r11;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        r1 = r0.<java.util.Scanner: java.lang.Object cachedNextValue>;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        $z0 = r1 instanceof java.math.BigInteger;

        if $z0 == 0 goto label1;

        $i1 = r0.<java.util.Scanner: int cachedNextIndex>;

        r0.<java.util.Scanner: int findStartIndex> = $i1;

        $r9 = (java.math.BigInteger) r1;

        return $r9;

     label1:
        $r5 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getIntegerPattern(int)>(i0);

        $r6 = virtualinvoke r0.<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>($r5);

        $r7 = <java.lang.Integer: java.lang.Class TYPE>;

        r2 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>($r6, $r7);

     label2:
        $r8 = new java.math.BigInteger;

        specialinvoke $r8.<java.math.BigInteger: void <init>(java.lang.String,int)>(r2, i0);

        r3 = $r8;

     label3:
        return r3;

     label4:
        $r10 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        $r11 = new java.util.InputMismatchException;

        specialinvoke $r11.<java.util.InputMismatchException: void <init>()>();

        throw $r11;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public boolean nextBoolean()
    {
        java.util.Scanner r0;
        java.util.regex.Pattern $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: java.util.Scanner;

        $r1 = <java.util.Scanner: java.util.regex.Pattern BOOLEAN_PATTERN>;

        $r2 = virtualinvoke r0.<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>($r1);

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2);

        return $z0;
    }

    public byte nextByte()
    {
        java.util.Scanner r0;
        int $i0;
        byte $b1;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int currentRadix>;

        $b1 = virtualinvoke r0.<java.util.Scanner: byte nextByte(int)>($i0);

        return $b1;
    }

    public byte nextByte(int)
    {
        java.util.Scanner r0;
        int i0, $i2;
        java.lang.Object r1;
        java.lang.String r2, $r5;
        byte b1, $b3;
        boolean $z0;
        java.util.regex.Pattern $r4;
        java.lang.Class $r6;
        java.lang.Byte $r7;
        java.lang.NumberFormatException $r8;
        java.util.InputMismatchException $r9;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        r1 = r0.<java.util.Scanner: java.lang.Object cachedNextValue>;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        $z0 = r1 instanceof java.lang.Byte;

        if $z0 == 0 goto label1;

        $i2 = r0.<java.util.Scanner: int cachedNextIndex>;

        r0.<java.util.Scanner: int findStartIndex> = $i2;

        $r7 = (java.lang.Byte) r1;

        $b3 = virtualinvoke $r7.<java.lang.Byte: byte byteValue()>();

        return $b3;

     label1:
        $r4 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getIntegerPattern(int)>(i0);

        $r5 = virtualinvoke r0.<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>($r4);

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        r2 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>($r5, $r6);

     label2:
        b1 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String,int)>(r2, i0);

     label3:
        return b1;

     label4:
        $r8 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        $r9 = new java.util.InputMismatchException;

        specialinvoke $r9.<java.util.InputMismatchException: void <init>()>();

        throw $r9;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public double nextDouble()
    {
        java.util.Scanner r0;
        java.lang.Object r1;
        java.lang.String r2, $r5;
        double d0, $d1;
        boolean $z0;
        java.util.regex.Pattern $r4;
        int $i0;
        java.lang.Double $r6;
        java.lang.NumberFormatException $r7;
        java.util.InputMismatchException $r8;

        r0 := @this: java.util.Scanner;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        r1 = r0.<java.util.Scanner: java.lang.Object cachedNextValue>;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        $z0 = r1 instanceof java.lang.Double;

        if $z0 == 0 goto label1;

        $i0 = r0.<java.util.Scanner: int cachedNextIndex>;

        r0.<java.util.Scanner: int findStartIndex> = $i0;

        $r6 = (java.lang.Double) r1;

        $d1 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        return $d1;

     label1:
        $r4 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getFloatPattern()>();

        $r5 = virtualinvoke r0.<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>($r4);

        r2 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfoFromFloat(java.lang.String)>($r5);

     label2:
        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);

     label3:
        return d0;

     label4:
        $r7 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        $r8 = new java.util.InputMismatchException;

        specialinvoke $r8.<java.util.InputMismatchException: void <init>()>();

        throw $r8;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public float nextFloat()
    {
        java.util.Scanner r0;
        java.lang.Object r1;
        java.lang.String r2, $r5;
        float f0, $f1;
        boolean $z0;
        java.util.regex.Pattern $r4;
        int $i0;
        java.lang.Float $r6;
        java.lang.NumberFormatException $r7;
        java.util.InputMismatchException $r8;

        r0 := @this: java.util.Scanner;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        r1 = r0.<java.util.Scanner: java.lang.Object cachedNextValue>;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        $z0 = r1 instanceof java.lang.Float;

        if $z0 == 0 goto label1;

        $i0 = r0.<java.util.Scanner: int cachedNextIndex>;

        r0.<java.util.Scanner: int findStartIndex> = $i0;

        $r6 = (java.lang.Float) r1;

        $f1 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        return $f1;

     label1:
        $r4 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getFloatPattern()>();

        $r5 = virtualinvoke r0.<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>($r4);

        r2 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfoFromFloat(java.lang.String)>($r5);

     label2:
        f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);

     label3:
        return f0;

     label4:
        $r7 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        $r8 = new java.util.InputMismatchException;

        specialinvoke $r8.<java.util.InputMismatchException: void <init>()>();

        throw $r8;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public int nextInt()
    {
        java.util.Scanner r0;
        int $i0, $i1;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int currentRadix>;

        $i1 = virtualinvoke r0.<java.util.Scanner: int nextInt(int)>($i0);

        return $i1;
    }

    public int nextInt(int)
    {
        java.util.Scanner r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1;
        java.lang.String r2, $r5;
        boolean $z0;
        java.util.regex.Pattern $r4;
        java.lang.Class $r6;
        java.lang.Integer $r7;
        java.lang.NumberFormatException $r8;
        java.util.InputMismatchException $r9;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        r1 = r0.<java.util.Scanner: java.lang.Object cachedNextValue>;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $i2 = r0.<java.util.Scanner: int cachedNextIndex>;

        r0.<java.util.Scanner: int findStartIndex> = $i2;

        $r7 = (java.lang.Integer) r1;

        $i3 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        return $i3;

     label1:
        $r4 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getIntegerPattern(int)>(i0);

        $r5 = virtualinvoke r0.<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>($r4);

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        r2 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>($r5, $r6);

     label2:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r2, i0);

     label3:
        return i1;

     label4:
        $r8 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        $r9 = new java.util.InputMismatchException;

        specialinvoke $r9.<java.util.InputMismatchException: void <init>()>();

        throw $r9;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public java.lang.String nextLine()
    {
        java.util.Scanner r0;
        java.lang.String r1;
        java.util.regex.Matcher r2, $r4, $r6, $r8, $r10, $r11, $r13;
        java.util.regex.Pattern $r3, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.NoSuchElementException $r9;
        java.nio.CharBuffer $r14;

        r0 := @this: java.util.Scanner;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $r3 = <java.util.Scanner: java.util.regex.Pattern LINE_PATTERN>;

        virtualinvoke $r4.<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>($r3);

        $r6 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i1 = r0.<java.util.Scanner: int findStartIndex>;

        $i0 = r0.<java.util.Scanner: int bufferLength>;

        virtualinvoke $r6.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i1, $i0);

     label1:
        $r8 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $z0 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label4;

        $z3 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z3 != 0 goto label2;

        $r13 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i4 = virtualinvoke $r13.<java.util.regex.Matcher: int end()>();

        $i5 = r0.<java.util.Scanner: int bufferLength>;

        if $i4 != $i5 goto label2;

        $i6 = r0.<java.util.Scanner: int bufferLength>;

        $r14 = r0.<java.util.Scanner: java.nio.CharBuffer buffer>;

        $i7 = virtualinvoke $r14.<java.nio.CharBuffer: int capacity()>();

        if $i6 >= $i7 goto label5;

     label2:
        r0.<java.util.Scanner: boolean matchSuccessful> = 1;

        $r10 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i2 = virtualinvoke $r10.<java.util.regex.Matcher: int end()>();

        r0.<java.util.Scanner: int findStartIndex> = $i2;

        $r11 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        r1 = virtualinvoke $r11.<java.util.regex.Matcher: java.lang.String group()>();

        if r1 == null goto label3;

        $r12 = <java.util.Scanner: java.util.regex.Pattern LINE_TERMINATOR>;

        r2 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z4 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z4 == 0 goto label3;

        $i3 = virtualinvoke r2.<java.util.regex.Matcher: int start()>();

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label3:
        return r1;

     label4:
        $z1 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z1 == 0 goto label5;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        $r9 = new java.util.NoSuchElementException;

        specialinvoke $r9.<java.util.NoSuchElementException: void <init>()>();

        throw $r9;

     label5:
        $z2 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z2 != 0 goto label1;

        specialinvoke r0.<java.util.Scanner: void readMore()>();

        specialinvoke r0.<java.util.Scanner: void resetMatcher()>();

        goto label1;
    }

    public long nextLong()
    {
        java.util.Scanner r0;
        int $i0;
        long $l1;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int currentRadix>;

        $l1 = virtualinvoke r0.<java.util.Scanner: long nextLong(int)>($i0);

        return $l1;
    }

    public long nextLong(int)
    {
        java.util.Scanner r0;
        int i0, $i2;
        java.lang.Object r1;
        java.lang.String r2, $r5;
        long l1, $l3;
        boolean $z0;
        java.util.regex.Pattern $r4;
        java.lang.Class $r6;
        java.lang.Long $r7;
        java.util.InputMismatchException $r8;
        java.lang.NumberFormatException $r9;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        r1 = r0.<java.util.Scanner: java.lang.Object cachedNextValue>;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        $z0 = r1 instanceof java.lang.Long;

        if $z0 == 0 goto label1;

        $i2 = r0.<java.util.Scanner: int cachedNextIndex>;

        r0.<java.util.Scanner: int findStartIndex> = $i2;

        $r7 = (java.lang.Long) r1;

        $l3 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        return $l3;

     label1:
        $r4 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getIntegerPattern(int)>(i0);

        $r5 = virtualinvoke r0.<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>($r4);

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        r2 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>($r5, $r6);

     label2:
        l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r2, i0);

     label3:
        return l1;

     label4:
        $r9 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        $r8 = new java.util.InputMismatchException;

        specialinvoke $r8.<java.util.InputMismatchException: void <init>()>();

        throw $r8;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public short nextShort()
    {
        java.util.Scanner r0;
        int $i0;
        short $s1;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int currentRadix>;

        $s1 = virtualinvoke r0.<java.util.Scanner: short nextShort(int)>($i0);

        return $s1;
    }

    public short nextShort(int)
    {
        java.util.Scanner r0;
        int i0, $i2;
        java.lang.Object r1;
        java.lang.String r2, $r5;
        short s1, $s3;
        boolean $z0;
        java.util.regex.Pattern $r4;
        java.lang.Class $r6;
        java.lang.Short $r7;
        java.lang.NumberFormatException $r8;
        java.util.InputMismatchException $r9;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        r1 = r0.<java.util.Scanner: java.lang.Object cachedNextValue>;

        r0.<java.util.Scanner: java.lang.Object cachedNextValue> = null;

        $z0 = r1 instanceof java.lang.Short;

        if $z0 == 0 goto label1;

        $i2 = r0.<java.util.Scanner: int cachedNextIndex>;

        r0.<java.util.Scanner: int findStartIndex> = $i2;

        $r7 = (java.lang.Short) r1;

        $s3 = virtualinvoke $r7.<java.lang.Short: short shortValue()>();

        return $s3;

     label1:
        $r4 = specialinvoke r0.<java.util.Scanner: java.util.regex.Pattern getIntegerPattern(int)>(i0);

        $r5 = virtualinvoke r0.<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>($r4);

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        r2 = specialinvoke r0.<java.util.Scanner: java.lang.String removeLocaleInfo(java.lang.String,java.lang.Class)>($r5, $r6);

     label2:
        s1 = staticinvoke <java.lang.Short: short parseShort(java.lang.String,int)>(r2, i0);

     label3:
        return s1;

     label4:
        $r8 := @caughtexception;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        specialinvoke r0.<java.util.Scanner: void recoverPreviousStatus()>();

        $r9 = new java.util.InputMismatchException;

        specialinvoke $r9.<java.util.InputMismatchException: void <init>()>();

        throw $r9;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public int radix()
    {
        java.util.Scanner r0;
        int $i0;

        r0 := @this: java.util.Scanner;

        $i0 = r0.<java.util.Scanner: int currentRadix>;

        return $i0;
    }

    public void remove()
    {
        java.util.Scanner r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.Scanner;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.Scanner reset()
    {
        java.util.Scanner r0;
        java.util.regex.Pattern $r1;
        java.util.Locale $r2;

        r0 := @this: java.util.Scanner;

        $r1 = <java.util.Scanner: java.util.regex.Pattern DEFAULT_DELIMITER>;

        r0.<java.util.Scanner: java.util.regex.Pattern delimiter> = $r1;

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<java.util.Scanner: void setLocale(java.util.Locale)>($r2);

        r0.<java.util.Scanner: int currentRadix> = 10;

        return r0;
    }

    public java.util.Scanner skip(java.lang.String)
    {
        java.util.Scanner r0, $r3;
        java.lang.String r1;
        java.util.regex.Pattern $r2;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<java.util.Scanner: java.util.Scanner skip(java.util.regex.Pattern)>($r2);

        return $r3;
    }

    public java.util.Scanner skip(java.util.regex.Pattern)
    {
        java.util.Scanner r0;
        java.util.regex.Pattern r1;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.regex.Matcher $r2, $r4, $r6, $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.NoSuchElementException $r7;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.util.regex.Pattern;

        specialinvoke r0.<java.util.Scanner: void checkOpen()>();

        specialinvoke r0.<java.util.Scanner: void checkNotNull(java.util.regex.Pattern)>(r1);

        $r2 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>(r1);

        $r4 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i1 = r0.<java.util.Scanner: int findStartIndex>;

        $i0 = r0.<java.util.Scanner: int bufferLength>;

        virtualinvoke $r4.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i1, $i0);

     label1:
        $r6 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $z1 = virtualinvoke $r6.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z1 == 0 goto label5;

        $r8 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i2 = virtualinvoke $r8.<java.util.regex.Matcher: int end()>();

        $i3 = r0.<java.util.Scanner: int bufferLength>;

        if $i2 < $i3 goto label2;

        $r10 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i6 = virtualinvoke $r10.<java.util.regex.Matcher: int end()>();

        $i5 = r0.<java.util.Scanner: int bufferLength>;

        if $i6 != $i5 goto label4;

        $z4 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z4 == 0 goto label4;

     label2:
        z0 = 1;

     label3:
        if z0 == 0 goto label6;

        r0.<java.util.Scanner: boolean matchSuccessful> = 1;

        $r9 = r0.<java.util.Scanner: java.util.regex.Matcher matcher>;

        $i4 = virtualinvoke $r9.<java.util.regex.Matcher: int end()>();

        r0.<java.util.Scanner: int findStartIndex> = $i4;

        return r0;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $z2 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z2 == 0 goto label6;

        r0.<java.util.Scanner: boolean matchSuccessful> = 0;

        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        throw $r7;

     label6:
        $z3 = r0.<java.util.Scanner: boolean inputExhausted>;

        if $z3 != 0 goto label1;

        specialinvoke r0.<java.util.Scanner: void readMore()>();

        specialinvoke r0.<java.util.Scanner: void resetMatcher()>();

        goto label1;
    }

    public java.lang.String toString()
    {
        java.util.Scanner r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.Class $r2;
        java.lang.String $r3, $r15;
        java.util.regex.Pattern $r6;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: java.util.Scanner;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[delimiter=");

        $r6 = r0.<java.util.Scanner: java.util.regex.Pattern delimiter>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",findStartIndex=");

        $i0 = r0.<java.util.Scanner: int findStartIndex>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",matchSuccessful=");

        $z0 = r0.<java.util.Scanner: boolean matchSuccessful>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",closed=");

        $z1 = r0.<java.util.Scanner: boolean closed>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public java.util.Scanner useDelimiter(java.lang.String)
    {
        java.util.Scanner r0, $r3;
        java.lang.String r1;
        java.util.regex.Pattern $r2;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<java.util.Scanner: java.util.Scanner useDelimiter(java.util.regex.Pattern)>($r2);

        return $r3;
    }

    public java.util.Scanner useDelimiter(java.util.regex.Pattern)
    {
        java.util.Scanner r0;
        java.util.regex.Pattern r1;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.util.regex.Pattern;

        r0.<java.util.Scanner: java.util.regex.Pattern delimiter> = r1;

        return r0;
    }

    public java.util.Scanner useLocale(java.util.Locale)
    {
        java.util.Scanner r0;
        java.util.Locale r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.Scanner;

        r1 := @parameter0: java.util.Locale;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("l == null");

        throw $r2;

     label1:
        specialinvoke r0.<java.util.Scanner: void setLocale(java.util.Locale)>(r1);

        return r0;
    }

    public java.util.Scanner useRadix(int)
    {
        java.util.Scanner r0;
        int i0;

        r0 := @this: java.util.Scanner;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.Scanner: void checkRadix(int)>(i0);

        r0.<java.util.Scanner: int currentRadix> = i0;

        return r0;
    }
}
