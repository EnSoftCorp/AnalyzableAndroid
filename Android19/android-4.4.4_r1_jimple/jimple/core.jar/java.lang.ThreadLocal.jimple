public class java.lang.ThreadLocal extends java.lang.Object
{
    private static java.util.concurrent.atomic.AtomicInteger hashCounter;
    private final int hash;
    private final java.lang.ref.Reference reference;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <java.lang.ThreadLocal: java.util.concurrent.atomic.AtomicInteger hashCounter> = $r0;

        return;
    }

    public void <init>()
    {
        java.lang.ThreadLocal r0;
        java.lang.ref.WeakReference $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0;

        r0 := @this: java.lang.ThreadLocal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.ref.WeakReference;

        specialinvoke $r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        r0.<java.lang.ThreadLocal: java.lang.ref.Reference reference> = $r1;

        $r2 = <java.lang.ThreadLocal: java.util.concurrent.atomic.AtomicInteger hashCounter>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>(-1013904242);

        r0.<java.lang.ThreadLocal: int hash> = $i0;

        return;
    }

    static int access$200(java.lang.ThreadLocal)
    {
        java.lang.ThreadLocal r0;
        int $i0;

        r0 := @parameter0: java.lang.ThreadLocal;

        $i0 = r0.<java.lang.ThreadLocal: int hash>;

        return $i0;
    }

    static java.lang.ref.Reference access$300(java.lang.ThreadLocal)
    {
        java.lang.ThreadLocal r0;
        java.lang.ref.Reference $r1;

        r0 := @parameter0: java.lang.ThreadLocal;

        $r1 = r0.<java.lang.ThreadLocal: java.lang.ref.Reference reference>;

        return $r1;
    }

    public java.lang.Object get()
    {
        java.lang.ThreadLocal r0;
        java.lang.Thread r1;
        java.lang.ThreadLocal$Values r2;
        java.lang.Object[] r3;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r4, $r5, $r7;
        java.lang.ref.Reference $r6;

        r0 := @this: java.lang.ThreadLocal;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r2 = virtualinvoke r0.<java.lang.ThreadLocal: java.lang.ThreadLocal$Values values(java.lang.Thread)>(r1);

        if r2 == null goto label1;

        r3 = staticinvoke <java.lang.ThreadLocal$Values: java.lang.Object[] access$000(java.lang.ThreadLocal$Values)>(r2);

        $i1 = r0.<java.lang.ThreadLocal: int hash>;

        $i2 = staticinvoke <java.lang.ThreadLocal$Values: int access$100(java.lang.ThreadLocal$Values)>(r2);

        i0 = $i1 & $i2;

        $r6 = r0.<java.lang.ThreadLocal: java.lang.ref.Reference reference>;

        $r5 = r3[i0];

        if $r6 != $r5 goto label2;

        $i3 = i0 + 1;

        $r7 = r3[$i3];

        return $r7;

     label1:
        r2 = virtualinvoke r0.<java.lang.ThreadLocal: java.lang.ThreadLocal$Values initializeValues(java.lang.Thread)>(r1);

     label2:
        $r4 = virtualinvoke r2.<java.lang.ThreadLocal$Values: java.lang.Object getAfterMiss(java.lang.ThreadLocal)>(r0);

        return $r4;
    }

    protected java.lang.Object initialValue()
    {
        java.lang.ThreadLocal r0;

        r0 := @this: java.lang.ThreadLocal;

        return null;
    }

    java.lang.ThreadLocal$Values initializeValues(java.lang.Thread)
    {
        java.lang.ThreadLocal r0;
        java.lang.Thread r1;
        java.lang.ThreadLocal$Values r2, $r3;

        r0 := @this: java.lang.ThreadLocal;

        r1 := @parameter0: java.lang.Thread;

        $r3 = new java.lang.ThreadLocal$Values;

        specialinvoke $r3.<java.lang.ThreadLocal$Values: void <init>()>();

        r2 = $r3;

        r1.<java.lang.Thread: java.lang.ThreadLocal$Values localValues> = r2;

        return r2;
    }

    public void remove()
    {
        java.lang.ThreadLocal r0;
        java.lang.ThreadLocal$Values r1;
        java.lang.Thread $r2;

        r0 := @this: java.lang.ThreadLocal;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke r0.<java.lang.ThreadLocal: java.lang.ThreadLocal$Values values(java.lang.Thread)>($r2);

        if r1 == null goto label1;

        virtualinvoke r1.<java.lang.ThreadLocal$Values: void remove(java.lang.ThreadLocal)>(r0);

     label1:
        return;
    }

    public void set(java.lang.Object)
    {
        java.lang.ThreadLocal r0;
        java.lang.Object r1;
        java.lang.Thread r2;
        java.lang.ThreadLocal$Values r3;

        r0 := @this: java.lang.ThreadLocal;

        r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r3 = virtualinvoke r0.<java.lang.ThreadLocal: java.lang.ThreadLocal$Values values(java.lang.Thread)>(r2);

        if r3 != null goto label1;

        r3 = virtualinvoke r0.<java.lang.ThreadLocal: java.lang.ThreadLocal$Values initializeValues(java.lang.Thread)>(r2);

     label1:
        virtualinvoke r3.<java.lang.ThreadLocal$Values: void put(java.lang.ThreadLocal,java.lang.Object)>(r0, r1);

        return;
    }

    java.lang.ThreadLocal$Values values(java.lang.Thread)
    {
        java.lang.ThreadLocal r0;
        java.lang.Thread r1;
        java.lang.ThreadLocal$Values $r2;

        r0 := @this: java.lang.ThreadLocal;

        r1 := @parameter0: java.lang.Thread;

        $r2 = r1.<java.lang.Thread: java.lang.ThreadLocal$Values localValues>;

        return $r2;
    }
}
