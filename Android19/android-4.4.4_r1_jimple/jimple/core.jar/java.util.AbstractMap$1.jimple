class java.util.AbstractMap$1 extends java.util.AbstractSet
{
    final java.util.AbstractMap this$0;

    void <init>(java.util.AbstractMap)
    {
        java.util.AbstractMap$1 r0;
        java.util.AbstractMap r1;

        r0 := @this: java.util.AbstractMap$1;

        r1 := @parameter0: java.util.AbstractMap;

        r0.<java.util.AbstractMap$1: java.util.AbstractMap this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.AbstractMap$1 r0;
        java.lang.Object r1;
        java.util.AbstractMap $r2;
        boolean $z0;

        r0 := @this: java.util.AbstractMap$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.AbstractMap$1: java.util.AbstractMap this$0>;

        $z0 = virtualinvoke $r2.<java.util.AbstractMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.AbstractMap$1 r0;
        java.util.AbstractMap$1$1 $r1;

        r0 := @this: java.util.AbstractMap$1;

        $r1 = new java.util.AbstractMap$1$1;

        specialinvoke $r1.<java.util.AbstractMap$1$1: void <init>(java.util.AbstractMap$1)>(r0);

        return $r1;
    }

    public int size()
    {
        java.util.AbstractMap$1 r0;
        java.util.AbstractMap $r1;
        int $i0;

        r0 := @this: java.util.AbstractMap$1;

        $r1 = r0.<java.util.AbstractMap$1: java.util.AbstractMap this$0>;

        $i0 = virtualinvoke $r1.<java.util.AbstractMap: int size()>();

        return $i0;
    }
}
