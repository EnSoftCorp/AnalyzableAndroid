public abstract class java.net.SocketImpl extends java.lang.Object implements java.net.SocketOptions
{
    protected java.net.InetAddress address;
    protected java.io.FileDescriptor fd;
    protected int localport;
    protected int port;

    public void <init>()
    {
        java.net.SocketImpl r0;

        r0 := @this: java.net.SocketImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract void accept(java.net.SocketImpl) throws java.io.IOException;

    protected abstract int available() throws java.io.IOException;

    protected abstract void bind(java.net.InetAddress, int) throws java.io.IOException;

    protected abstract void close() throws java.io.IOException;

    protected abstract void connect(java.lang.String, int) throws java.io.IOException;

    protected abstract void connect(java.net.InetAddress, int) throws java.io.IOException;

    protected abstract void connect(java.net.SocketAddress, int) throws java.io.IOException;

    protected abstract void create(boolean) throws java.io.IOException;

    public java.io.FileDescriptor getFD$()
    {
        java.net.SocketImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.net.SocketImpl;

        $r1 = r0.<java.net.SocketImpl: java.io.FileDescriptor fd>;

        return $r1;
    }

    protected java.io.FileDescriptor getFileDescriptor()
    {
        java.net.SocketImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.net.SocketImpl;

        $r1 = r0.<java.net.SocketImpl: java.io.FileDescriptor fd>;

        return $r1;
    }

    protected java.net.InetAddress getInetAddress()
    {
        java.net.SocketImpl r0;
        java.net.InetAddress $r1;

        r0 := @this: java.net.SocketImpl;

        $r1 = r0.<java.net.SocketImpl: java.net.InetAddress address>;

        return $r1;
    }

    protected abstract java.io.InputStream getInputStream() throws java.io.IOException;

    protected int getLocalPort()
    {
        java.net.SocketImpl r0;
        int $i0;

        r0 := @this: java.net.SocketImpl;

        $i0 = r0.<java.net.SocketImpl: int localport>;

        return $i0;
    }

    protected abstract java.io.OutputStream getOutputStream() throws java.io.IOException;

    protected int getPort()
    {
        java.net.SocketImpl r0;
        int $i0;

        r0 := @this: java.net.SocketImpl;

        $i0 = r0.<java.net.SocketImpl: int port>;

        return $i0;
    }

    protected abstract void listen(int) throws java.io.IOException;

    protected abstract void sendUrgentData(int) throws java.io.IOException;

    protected void setPerformancePreferences(int, int, int)
    {
        java.net.SocketImpl r0;
        int i0, i1, i2;

        r0 := @this: java.net.SocketImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }

    protected void shutdownInput() throws java.io.IOException
    {
        java.net.SocketImpl r0;
        java.io.IOException $r1;

        r0 := @this: java.net.SocketImpl;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Method has not been implemented");

        throw $r1;
    }

    protected void shutdownOutput() throws java.io.IOException
    {
        java.net.SocketImpl r0;
        java.io.IOException $r1;

        r0 := @this: java.net.SocketImpl;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Method has not been implemented");

        throw $r1;
    }

    protected boolean supportsUrgentData()
    {
        java.net.SocketImpl r0;

        r0 := @this: java.net.SocketImpl;

        return 0;
    }

    public java.lang.String toString()
    {
        java.net.SocketImpl r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        java.net.InetAddress $r3;
        int $i0, $i1;
        java.lang.String $r10;

        r0 := @this: java.net.SocketImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Socket[address=");

        $r3 = virtualinvoke r0.<java.net.SocketImpl: java.net.InetAddress getInetAddress()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",port=");

        $i0 = r0.<java.net.SocketImpl: int port>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",localPort=");

        $i1 = virtualinvoke r0.<java.net.SocketImpl: int getLocalPort()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
