public class java.text.DecimalFormat extends java.text.NumberFormat
{
    private static final java.lang.Double NEGATIVE_ZERO_DOUBLE;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static final long serialVersionUID;
    private transient libcore.icu.NativeDecimalFormat ndf;
    private transient java.math.RoundingMode roundingMode;
    private transient java.text.DecimalFormatSymbols symbols;

    static void <clinit>()
    {
        java.io.ObjectStreamField[] r0;
        java.lang.Double $r1;
        java.io.ObjectStreamField $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r15, $r16, $r19, $r20, $r21, $r23, $r24, $r25, $r27, $r31, $r32, $r34;
        java.lang.Class $r10, $r13, $r14, $r17, $r18, $r22, $r26, $r28, $r29, $r30, $r33, $r35;

        <java.text.DecimalFormat: long serialVersionUID> = 864413376551465018L;

        $r1 = new java.lang.Double;

        specialinvoke $r1.<java.lang.Double: void <init>(double)>(0.0);

        <java.text.DecimalFormat: java.lang.Double NEGATIVE_ZERO_DOUBLE> = $r1;

        r0 = newarray (java.io.ObjectStreamField)[22];

        $r2 = new java.io.ObjectStreamField;

        specialinvoke $r2.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("positivePrefix", class "java/lang/String");

        r0[0] = $r2;

        $r3 = new java.io.ObjectStreamField;

        specialinvoke $r3.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("positiveSuffix", class "java/lang/String");

        r0[1] = $r3;

        $r4 = new java.io.ObjectStreamField;

        specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("negativePrefix", class "java/lang/String");

        r0[2] = $r4;

        $r5 = new java.io.ObjectStreamField;

        specialinvoke $r5.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("negativeSuffix", class "java/lang/String");

        r0[3] = $r5;

        $r6 = new java.io.ObjectStreamField;

        specialinvoke $r6.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("posPrefixPattern", class "java/lang/String");

        r0[4] = $r6;

        $r7 = new java.io.ObjectStreamField;

        specialinvoke $r7.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("posSuffixPattern", class "java/lang/String");

        r0[5] = $r7;

        $r8 = new java.io.ObjectStreamField;

        specialinvoke $r8.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("negPrefixPattern", class "java/lang/String");

        r0[6] = $r8;

        $r9 = new java.io.ObjectStreamField;

        specialinvoke $r9.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("negSuffixPattern", class "java/lang/String");

        r0[7] = $r9;

        $r11 = new java.io.ObjectStreamField;

        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r11.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("multiplier", $r10);

        r0[8] = $r11;

        $r12 = new java.io.ObjectStreamField;

        $r13 = <java.lang.Byte: java.lang.Class TYPE>;

        specialinvoke $r12.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("groupingSize", $r13);

        r0[9] = $r12;

        $r15 = new java.io.ObjectStreamField;

        $r14 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r15.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("groupingUsed", $r14);

        r0[10] = $r15;

        $r16 = new java.io.ObjectStreamField;

        $r17 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r16.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("decimalSeparatorAlwaysShown", $r17);

        r0[11] = $r16;

        $r19 = new java.io.ObjectStreamField;

        $r18 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r19.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("parseBigDecimal", $r18);

        r0[12] = $r19;

        $r21 = new java.io.ObjectStreamField;

        specialinvoke $r21.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("roundingMode", class "java/math/RoundingMode");

        r0[13] = $r21;

        $r20 = new java.io.ObjectStreamField;

        specialinvoke $r20.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("symbols", class "java/text/DecimalFormatSymbols");

        r0[14] = $r20;

        $r23 = new java.io.ObjectStreamField;

        $r22 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r23.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("useExponentialNotation", $r22);

        r0[15] = $r23;

        $r25 = new java.io.ObjectStreamField;

        $r26 = <java.lang.Byte: java.lang.Class TYPE>;

        specialinvoke $r25.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("minExponentDigits", $r26);

        r0[16] = $r25;

        $r24 = new java.io.ObjectStreamField;

        $r29 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r24.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("maximumIntegerDigits", $r29);

        r0[17] = $r24;

        $r27 = new java.io.ObjectStreamField;

        $r28 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r27.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("minimumIntegerDigits", $r28);

        r0[18] = $r27;

        $r31 = new java.io.ObjectStreamField;

        $r30 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r31.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("maximumFractionDigits", $r30);

        r0[19] = $r31;

        $r34 = new java.io.ObjectStreamField;

        $r33 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r34.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("minimumFractionDigits", $r33);

        r0[20] = $r34;

        $r32 = new java.io.ObjectStreamField;

        $r35 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r32.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("serialVersionOnStream", $r35);

        r0[21] = $r32;

        <java.text.DecimalFormat: java.io.ObjectStreamField[] serialPersistentFields> = r0;

        return;
    }

    public void <init>()
    {
        java.text.DecimalFormat r0;
        java.util.Locale r1;
        java.math.RoundingMode $r2;
        java.text.DecimalFormatSymbols $r3;
        libcore.icu.LocaleData $r4;
        java.lang.String $r5;

        r0 := @this: java.text.DecimalFormat;

        specialinvoke r0.<java.text.NumberFormat: void <init>()>();

        $r2 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        r0.<java.text.DecimalFormat: java.math.RoundingMode roundingMode> = $r2;

        r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r3 = new java.text.DecimalFormatSymbols;

        specialinvoke $r3.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>(r1);

        r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols> = $r3;

        $r4 = staticinvoke <libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)>(r1);

        $r5 = $r4.<libcore.icu.LocaleData: java.lang.String numberPattern>;

        specialinvoke r0.<java.text.DecimalFormat: void initNative(java.lang.String)>($r5);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.text.DecimalFormat r0;
        java.lang.String r1;
        java.util.Locale $r2;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<java.text.DecimalFormat: void <init>(java.lang.String,java.util.Locale)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.String, java.text.DecimalFormatSymbols)
    {
        java.text.DecimalFormat r0;
        java.lang.String r1;
        java.text.DecimalFormatSymbols r2, $r5;
        java.math.RoundingMode $r3;
        java.lang.Object $r4;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.DecimalFormatSymbols;

        specialinvoke r0.<java.text.NumberFormat: void <init>()>();

        $r3 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        r0.<java.text.DecimalFormat: java.math.RoundingMode roundingMode> = $r3;

        $r4 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.Object clone()>();

        $r5 = (java.text.DecimalFormatSymbols) $r4;

        r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols> = $r5;

        specialinvoke r0.<java.text.DecimalFormat: void initNative(java.lang.String)>(r1);

        return;
    }

    void <init>(java.lang.String, java.util.Locale)
    {
        java.text.DecimalFormatSymbols $r0;
        java.text.DecimalFormat r1;
        java.lang.String r2;
        java.util.Locale r3;
        java.math.RoundingMode $r4;

        r1 := @this: java.text.DecimalFormat;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Locale;

        specialinvoke r1.<java.text.NumberFormat: void <init>()>();

        $r4 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        r1.<java.text.DecimalFormat: java.math.RoundingMode roundingMode> = $r4;

        $r0 = new java.text.DecimalFormatSymbols;

        specialinvoke $r0.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>(r3);

        r1.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols> = $r0;

        specialinvoke r1.<java.text.DecimalFormat: void initNative(java.lang.String)>(r2);

        return;
    }

    private void checkBufferAndFieldPosition(java.lang.StringBuffer, java.text.FieldPosition)
    {
        java.text.DecimalFormat r0;
        java.lang.StringBuffer r1;
        java.text.FieldPosition r2;
        java.lang.NullPointerException $r3, $r4;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.text.FieldPosition;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("buffer == null");

        throw $r4;

     label1:
        if r2 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("position == null");

        throw $r3;

     label2:
        return;
    }

    private void initNative(java.lang.String)
    {
        java.text.DecimalFormat r0;
        java.lang.String r1;
        libcore.icu.NativeDecimalFormat $r3, $r5, $r6, $r7, $r8;
        java.text.DecimalFormatSymbols $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r9, $r10;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = new libcore.icu.NativeDecimalFormat;

        $r4 = r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols>;

        specialinvoke $r3.<libcore.icu.NativeDecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>(r1, $r4);

        r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf> = $r3;

     label2:
        $r5 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i0 = virtualinvoke $r5.<libcore.icu.NativeDecimalFormat: int getMaximumFractionDigits()>();

        specialinvoke r0.<java.text.NumberFormat: void setMaximumFractionDigits(int)>($i0);

        $r6 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i1 = virtualinvoke $r6.<libcore.icu.NativeDecimalFormat: int getMaximumIntegerDigits()>();

        specialinvoke r0.<java.text.NumberFormat: void setMaximumIntegerDigits(int)>($i1);

        $r7 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i2 = virtualinvoke $r7.<libcore.icu.NativeDecimalFormat: int getMinimumFractionDigits()>();

        specialinvoke r0.<java.text.NumberFormat: void setMinimumFractionDigits(int)>($i2);

        $r8 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i3 = virtualinvoke $r8.<libcore.icu.NativeDecimalFormat: int getMinimumIntegerDigits()>();

        specialinvoke r0.<java.text.NumberFormat: void setMinimumIntegerDigits(int)>($i3);

        return;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r10;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.text.DecimalFormat r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        int i0, i1, i2, i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Object $r3, $r6, $r9, $r11, $r16, $r21;
        java.text.DecimalFormatSymbols $r4;
        libcore.icu.NativeDecimalFormat $r5, $r8, $r12, $r13, $r17, $r18, $r19, $r20, $r24, $r25;
        java.lang.String $r7, $r10, $r14, $r15;
        byte $b5;
        boolean $z0, $z1, $z2;
        java.math.RoundingMode $r22, $r23;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.io.ObjectInputStream;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();

        $r3 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("symbols", null);

        $r4 = (java.text.DecimalFormatSymbols) $r3;

        r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols> = $r4;

        specialinvoke r0.<java.text.DecimalFormat: void initNative(java.lang.String)>("");

        $r5 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r6 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("positivePrefix", "");

        $r7 = (java.lang.String) $r6;

        virtualinvoke $r5.<libcore.icu.NativeDecimalFormat: void setPositivePrefix(java.lang.String)>($r7);

        $r8 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r9 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("positiveSuffix", "");

        $r10 = (java.lang.String) $r9;

        virtualinvoke $r8.<libcore.icu.NativeDecimalFormat: void setPositiveSuffix(java.lang.String)>($r10);

        $r12 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r11 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("negativePrefix", "-");

        $r14 = (java.lang.String) $r11;

        virtualinvoke $r12.<libcore.icu.NativeDecimalFormat: void setNegativePrefix(java.lang.String)>($r14);

        $r13 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r16 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("negativeSuffix", "");

        $r15 = (java.lang.String) $r16;

        virtualinvoke $r13.<libcore.icu.NativeDecimalFormat: void setNegativeSuffix(java.lang.String)>($r15);

        $r17 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i4 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("multiplier", 1);

        virtualinvoke $r17.<libcore.icu.NativeDecimalFormat: void setMultiplier(int)>($i4);

        $r18 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $b5 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: byte get(java.lang.String,byte)>("groupingSize", 3);

        virtualinvoke $r18.<libcore.icu.NativeDecimalFormat: void setGroupingSize(int)>($b5);

        $r19 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $z0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: boolean get(java.lang.String,boolean)>("groupingUsed", 1);

        virtualinvoke $r19.<libcore.icu.NativeDecimalFormat: void setGroupingUsed(boolean)>($z0);

        $r20 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $z1 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: boolean get(java.lang.String,boolean)>("decimalSeparatorAlwaysShown", 0);

        virtualinvoke $r20.<libcore.icu.NativeDecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>($z1);

        $r22 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        $r21 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("roundingMode", $r22);

        $r23 = (java.math.RoundingMode) $r21;

        virtualinvoke r0.<java.text.DecimalFormat: void setRoundingMode(java.math.RoundingMode)>($r23);

        i0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("maximumIntegerDigits", 309);

        i1 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("minimumIntegerDigits", 309);

        i2 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("maximumFractionDigits", 340);

        i3 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("minimumFractionDigits", 340);

        $r25 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r25.<libcore.icu.NativeDecimalFormat: void setMaximumIntegerDigits(int)>(i0);

        $r24 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i6 = virtualinvoke $r24.<libcore.icu.NativeDecimalFormat: int getMaximumIntegerDigits()>();

        specialinvoke r0.<java.text.NumberFormat: void setMaximumIntegerDigits(int)>($i6);

        virtualinvoke r0.<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>(i1);

        virtualinvoke r0.<java.text.DecimalFormat: void setMinimumFractionDigits(int)>(i3);

        virtualinvoke r0.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>(i2);

        $z2 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: boolean get(java.lang.String,boolean)>("parseBigDecimal", 0);

        virtualinvoke r0.<java.text.DecimalFormat: void setParseBigDecimal(boolean)>($z2);

        $i9 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("serialVersionOnStream", 0);

        if $i9 >= 3 goto label1;

        $i7 = specialinvoke r0.<java.text.NumberFormat: int getMaximumIntegerDigits()>();

        virtualinvoke r0.<java.text.DecimalFormat: void setMaximumIntegerDigits(int)>($i7);

        $i8 = specialinvoke r0.<java.text.NumberFormat: int getMinimumIntegerDigits()>();

        virtualinvoke r0.<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>($i8);

        $i10 = specialinvoke r0.<java.text.NumberFormat: int getMaximumFractionDigits()>();

        virtualinvoke r0.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>($i10);

        $i11 = specialinvoke r0.<java.text.NumberFormat: int getMinimumFractionDigits()>();

        virtualinvoke r0.<java.text.DecimalFormat: void setMinimumFractionDigits(int)>($i11);

     label1:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.text.DecimalFormat r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        libcore.icu.NativeDecimalFormat $r3, $r5, $r7, $r9, $r15, $r16, $r17, $r18, $r19, $r20, $r23, $r24, $r25;
        java.lang.String $r4, $r6, $r8, $r10, $r11, $r12, $r13, $r14;
        int $i0, $i1, $i3, $i4, $i5, $i6;
        byte $b2;
        boolean $z0, $z1, $z2;
        java.math.RoundingMode $r21;
        java.text.DecimalFormatSymbols $r22;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        $r3 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r4 = virtualinvoke $r3.<libcore.icu.NativeDecimalFormat: java.lang.String getPositivePrefix()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("positivePrefix", $r4);

        $r5 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r6 = virtualinvoke $r5.<libcore.icu.NativeDecimalFormat: java.lang.String getPositiveSuffix()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("positiveSuffix", $r6);

        $r7 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r8 = virtualinvoke $r7.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativePrefix()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("negativePrefix", $r8);

        $r9 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r10 = virtualinvoke $r9.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativeSuffix()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("negativeSuffix", $r10);

        $r12 = (java.lang.String) null;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("posPrefixPattern", $r12);

        $r11 = (java.lang.String) null;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("posSuffixPattern", $r11);

        $r14 = (java.lang.String) null;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("negPrefixPattern", $r14);

        $r13 = (java.lang.String) null;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("negSuffixPattern", $r13);

        $r15 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i0 = virtualinvoke $r15.<libcore.icu.NativeDecimalFormat: int getMultiplier()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("multiplier", $i0);

        $r16 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i1 = virtualinvoke $r16.<libcore.icu.NativeDecimalFormat: int getGroupingSize()>();

        $b2 = (byte) $i1;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,byte)>("groupingSize", $b2);

        $r17 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $z0 = virtualinvoke $r17.<libcore.icu.NativeDecimalFormat: boolean isGroupingUsed()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("groupingUsed", $z0);

        $r18 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $z2 = virtualinvoke $r18.<libcore.icu.NativeDecimalFormat: boolean isDecimalSeparatorAlwaysShown()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("decimalSeparatorAlwaysShown", $z2);

        $r19 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $z1 = virtualinvoke $r19.<libcore.icu.NativeDecimalFormat: boolean isParseBigDecimal()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("parseBigDecimal", $z1);

        $r21 = r0.<java.text.DecimalFormat: java.math.RoundingMode roundingMode>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("roundingMode", $r21);

        $r22 = r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("symbols", $r22);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("useExponentialNotation", 0);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,byte)>("minExponentDigits", 0);

        $r20 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i4 = virtualinvoke $r20.<libcore.icu.NativeDecimalFormat: int getMaximumIntegerDigits()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("maximumIntegerDigits", $i4);

        $r23 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i3 = virtualinvoke $r23.<libcore.icu.NativeDecimalFormat: int getMinimumIntegerDigits()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("minimumIntegerDigits", $i3);

        $r25 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i5 = virtualinvoke $r25.<libcore.icu.NativeDecimalFormat: int getMaximumFractionDigits()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("maximumFractionDigits", $i5);

        $r24 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i6 = virtualinvoke $r24.<libcore.icu.NativeDecimalFormat: int getMinimumFractionDigits()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("minimumFractionDigits", $i6);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("serialVersionOnStream", 4);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        return;
    }

    public void applyLocalizedPattern(java.lang.String)
    {
        java.text.DecimalFormat r0;
        java.lang.String r1;
        libcore.icu.NativeDecimalFormat $r2;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r2.<libcore.icu.NativeDecimalFormat: void applyLocalizedPattern(java.lang.String)>(r1);

        return;
    }

    public void applyPattern(java.lang.String)
    {
        java.text.DecimalFormat r0;
        java.lang.String r1;
        libcore.icu.NativeDecimalFormat $r2;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r2.<libcore.icu.NativeDecimalFormat: void applyPattern(java.lang.String)>(r1);

        return;
    }

    public java.lang.Object clone()
    {
        java.text.DecimalFormat r0, r1;
        java.lang.Object $r2, $r4, $r7;
        libcore.icu.NativeDecimalFormat $r3, $r5;
        java.text.DecimalFormatSymbols $r6, $r8;

        r0 := @this: java.text.DecimalFormat;

        $r2 = specialinvoke r0.<java.text.NumberFormat: java.lang.Object clone()>();

        r1 = (java.text.DecimalFormat) $r2;

        $r3 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r4 = virtualinvoke $r3.<libcore.icu.NativeDecimalFormat: java.lang.Object clone()>();

        $r5 = (libcore.icu.NativeDecimalFormat) $r4;

        r1.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf> = $r5;

        $r6 = r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols>;

        $r7 = virtualinvoke $r6.<java.text.DecimalFormatSymbols: java.lang.Object clone()>();

        $r8 = (java.text.DecimalFormatSymbols) $r7;

        r1.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols> = $r8;

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.DecimalFormat r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        libcore.icu.NativeDecimalFormat $r3, $r4, $r5, $r8;
        java.text.DecimalFormatSymbols $r6, $r7;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof java.text.DecimalFormat;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (java.text.DecimalFormat) r1;

        $r3 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        if $r3 != null goto label6;

        $r8 = r2.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        if $r8 != null goto label5;

     label4:
        $r6 = virtualinvoke r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();

        $r7 = virtualinvoke r2.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();

        $z2 = virtualinvoke $r6.<java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>($r7);

        if $z2 != 0 goto label1;

     label5:
        return 0;

     label6:
        $r5 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r4 = r2.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $z1 = virtualinvoke $r5.<libcore.icu.NativeDecimalFormat: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label5;

        goto label4;
    }

    public java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition)
    {
        java.text.DecimalFormat r0;
        double d0;
        java.lang.StringBuffer r1, $r11, $r13, $r14, $r16;
        java.text.FieldPosition r2, $r12, $r17;
        java.lang.Throwable r3, $r22;
        java.lang.String r4, $r18;
        java.math.RoundingMode $r5, $r6, $r10, $r15, $r20, $r21;
        libcore.icu.NativeDecimalFormat $r7;
        char[] $r8;
        boolean $z0;
        java.lang.ArithmeticException $r19;

        r0 := @this: java.text.DecimalFormat;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.StringBuffer;

        r2 := @parameter2: java.text.FieldPosition;

        specialinvoke r0.<java.text.DecimalFormat: void checkBufferAndFieldPosition(java.lang.StringBuffer,java.text.FieldPosition)>(r1, r2);

        $r6 = r0.<java.text.DecimalFormat: java.math.RoundingMode roundingMode>;

        $r5 = <java.math.RoundingMode: java.math.RoundingMode UNNECESSARY>;

        if $r6 != $r5 goto label4;

     label1:
        $r10 = <java.math.RoundingMode: java.math.RoundingMode UP>;

        virtualinvoke r0.<java.text.DecimalFormat: void setRoundingMode(java.math.RoundingMode)>($r10);

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = new java.text.FieldPosition;

        specialinvoke $r12.<java.text.FieldPosition: void <init>(int)>(0);

        $r13 = virtualinvoke r0.<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(d0, $r11, $r12);

        r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = <java.math.RoundingMode: java.math.RoundingMode DOWN>;

        virtualinvoke r0.<java.text.DecimalFormat: void setRoundingMode(java.math.RoundingMode)>($r15);

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r17 = new java.text.FieldPosition;

        specialinvoke $r17.<java.text.FieldPosition: void <init>(int)>(0);

        $r16 = virtualinvoke r0.<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(d0, $r14, $r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z0 != 0 goto label3;

        $r19 = new java.lang.ArithmeticException;

        specialinvoke $r19.<java.lang.ArithmeticException: void <init>(java.lang.String)>("rounding mode UNNECESSARY but rounding required");

        throw $r19;

     label2:
        $r22 := @caughtexception;

        r3 = $r22;

        $r21 = <java.math.RoundingMode: java.math.RoundingMode UNNECESSARY>;

        virtualinvoke r0.<java.text.DecimalFormat: void setRoundingMode(java.math.RoundingMode)>($r21);

        throw r3;

     label3:
        $r20 = <java.math.RoundingMode: java.math.RoundingMode UNNECESSARY>;

        virtualinvoke r0.<java.text.DecimalFormat: void setRoundingMode(java.math.RoundingMode)>($r20);

     label4:
        $r7 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r8 = virtualinvoke $r7.<libcore.icu.NativeDecimalFormat: char[] formatDouble(double,java.text.FieldPosition)>(d0, r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r8);

        return r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition)
    {
        java.text.DecimalFormat r0;
        long l0;
        java.lang.StringBuffer r1;
        java.text.FieldPosition r2;
        libcore.icu.NativeDecimalFormat $r3;
        char[] $r4;

        r0 := @this: java.text.DecimalFormat;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.StringBuffer;

        r2 := @parameter2: java.text.FieldPosition;

        specialinvoke r0.<java.text.DecimalFormat: void checkBufferAndFieldPosition(java.lang.StringBuffer,java.text.FieldPosition)>(r1, r2);

        $r3 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r4 = virtualinvoke $r3.<libcore.icu.NativeDecimalFormat: char[] formatLong(long,java.text.FieldPosition)>(l0, r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r4);

        return r1;
    }

    public final java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)
    {
        java.text.DecimalFormat r0;
        java.lang.Object r1;
        java.lang.StringBuffer r2, $r6;
        java.text.FieldPosition r3;
        java.math.BigInteger r4;
        char[] r5, $r9;
        boolean $z0, $z1;
        java.math.BigDecimal $r7;
        libcore.icu.NativeDecimalFormat $r8, $r11, $r13;
        int $i0;
        long $l1;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.StringBuffer;

        r3 := @parameter2: java.text.FieldPosition;

        specialinvoke r0.<java.text.DecimalFormat: void checkBufferAndFieldPosition(java.lang.StringBuffer,java.text.FieldPosition)>(r2, r3);

        $z0 = r1 instanceof java.math.BigInteger;

        if $z0 == 0 goto label3;

        r4 = (java.math.BigInteger) r1;

        $i0 = virtualinvoke r4.<java.math.BigInteger: int bitLength()>();

        if $i0 >= 64 goto label2;

        $r13 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $l1 = virtualinvoke r4.<java.math.BigInteger: long longValue()>();

        r5 = virtualinvoke $r13.<libcore.icu.NativeDecimalFormat: char[] formatLong(long,java.text.FieldPosition)>($l1, r3);

     label1:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>(r5);

        return r2;

     label2:
        $r11 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        r5 = virtualinvoke $r11.<libcore.icu.NativeDecimalFormat: char[] formatBigInteger(java.math.BigInteger,java.text.FieldPosition)>(r4, r3);

        goto label1;

     label3:
        $z1 = r1 instanceof java.math.BigDecimal;

        if $z1 == 0 goto label4;

        $r8 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r7 = (java.math.BigDecimal) r1;

        $r9 = virtualinvoke $r8.<libcore.icu.NativeDecimalFormat: char[] formatBigDecimal(java.math.BigDecimal,java.text.FieldPosition)>($r7, r3);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r9);

        return r2;

     label4:
        $r6 = specialinvoke r0.<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>(r1, r2, r3);

        return $r6;
    }

    public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)
    {
        java.text.DecimalFormat r0;
        java.lang.Object r1;
        libcore.icu.NativeDecimalFormat $r2;
        java.text.AttributedCharacterIterator $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("object == null");

        throw $r4;

     label1:
        $r2 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r3 = virtualinvoke $r2.<libcore.icu.NativeDecimalFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>(r1);

        return $r3;
    }

    public java.util.Currency getCurrency()
    {
        java.text.DecimalFormat r0;
        java.text.DecimalFormatSymbols $r1;
        java.util.Currency $r2;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols>;

        $r2 = virtualinvoke $r1.<java.text.DecimalFormatSymbols: java.util.Currency getCurrency()>();

        return $r2;
    }

    public java.text.DecimalFormatSymbols getDecimalFormatSymbols()
    {
        java.text.DecimalFormat r0;
        java.text.DecimalFormatSymbols $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols>;

        $r2 = virtualinvoke $r1.<java.text.DecimalFormatSymbols: java.lang.Object clone()>();

        $r3 = (java.text.DecimalFormatSymbols) $r2;

        return $r3;
    }

    public int getGroupingSize()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        int $i0;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i0 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: int getGroupingSize()>();

        return $i0;
    }

    public int getMultiplier()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        int $i0;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i0 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: int getMultiplier()>();

        return $i0;
    }

    public java.lang.String getNegativePrefix()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        java.lang.String $r2;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r2 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativePrefix()>();

        return $r2;
    }

    public java.lang.String getNegativeSuffix()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        java.lang.String $r2;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r2 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativeSuffix()>();

        return $r2;
    }

    public java.lang.String getPositivePrefix()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        java.lang.String $r2;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r2 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: java.lang.String getPositivePrefix()>();

        return $r2;
    }

    public java.lang.String getPositiveSuffix()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        java.lang.String $r2;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r2 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: java.lang.String getPositiveSuffix()>();

        return $r2;
    }

    public java.math.RoundingMode getRoundingMode()
    {
        java.text.DecimalFormat r0;
        java.math.RoundingMode $r1;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: java.math.RoundingMode roundingMode>;

        return $r1;
    }

    public int hashCode()
    {
        java.text.DecimalFormat r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: java.text.DecimalFormat;

        $r1 = virtualinvoke r0.<java.text.DecimalFormat: java.lang.String getPositivePrefix()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean isDecimalSeparatorAlwaysShown()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        boolean $z0;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $z0 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: boolean isDecimalSeparatorAlwaysShown()>();

        return $z0;
    }

    public boolean isGroupingUsed()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        boolean $z0;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $z0 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: boolean isGroupingUsed()>();

        return $z0;
    }

    public boolean isParseBigDecimal()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        boolean $z0;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $z0 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: boolean isParseBigDecimal()>();

        return $z0;
    }

    public boolean isParseIntegerOnly()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        boolean $z0;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $z0 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: boolean isParseIntegerOnly()>();

        return $z0;
    }

    public java.lang.Number parse(java.lang.String, java.text.ParsePosition)
    {
        java.text.DecimalFormat r0;
        java.lang.String r1, $r8, $r12;
        java.text.ParsePosition r2;
        java.lang.Number r3;
        libcore.icu.NativeDecimalFormat $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Double $r5, $r6, $r10, $r11;
        double $d0;
        java.lang.Long $r7;
        java.math.BigDecimal $r9, $r13, $r14;
        long $l0;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        $r4 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        r3 = virtualinvoke $r4.<libcore.icu.NativeDecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r1, r2);

        if r3 != null goto label2;

        r3 = null;

     label1:
        return r3;

     label2:
        $z0 = virtualinvoke r0.<java.text.DecimalFormat: boolean isParseBigDecimal()>();

        if $z0 == 0 goto label5;

        $z5 = r3 instanceof java.lang.Long;

        if $z5 == 0 goto label3;

        $r14 = new java.math.BigDecimal;

        $l0 = virtualinvoke r3.<java.lang.Number: long longValue()>();

        specialinvoke $r14.<java.math.BigDecimal: void <init>(long)>($l0);

        return $r14;

     label3:
        $z7 = r3 instanceof java.lang.Double;

        if $z7 == 0 goto label4;

        $r10 = (java.lang.Double) r3;

        $z8 = virtualinvoke $r10.<java.lang.Double: boolean isInfinite()>();

        if $z8 != 0 goto label4;

        $r11 = (java.lang.Double) r3;

        $z9 = virtualinvoke $r11.<java.lang.Double: boolean isNaN()>();

        if $z9 != 0 goto label4;

        $r13 = new java.math.BigDecimal;

        $r12 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.math.BigDecimal: void <init>(java.lang.String)>($r12);

        return $r13;

     label4:
        $z6 = r3 instanceof java.math.BigInteger;

        if $z6 == 0 goto label1;

        $r9 = new java.math.BigDecimal;

        $r8 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.math.BigDecimal: void <init>(java.lang.String)>($r8);

        return $r9;

     label5:
        $z1 = r3 instanceof java.math.BigDecimal;

        if $z1 != 0 goto label6;

        $z2 = r3 instanceof java.math.BigInteger;

        if $z2 == 0 goto label7;

     label6:
        $r5 = new java.lang.Double;

        $d0 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

        specialinvoke $r5.<java.lang.Double: void <init>(double)>($d0);

        return $r5;

     label7:
        $z3 = virtualinvoke r0.<java.text.DecimalFormat: boolean isParseIntegerOnly()>();

        if $z3 == 0 goto label1;

        $r6 = <java.text.DecimalFormat: java.lang.Double NEGATIVE_ZERO_DOUBLE>;

        $z4 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z4 == 0 goto label1;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        return $r7;
    }

    public void setCurrency(java.util.Currency)
    {
        java.text.DecimalFormat r0;
        java.util.Currency r1, $r4;
        libcore.icu.NativeDecimalFormat $r2;
        java.lang.String $r3;
        java.text.DecimalFormatSymbols $r5;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.util.Currency;

        $r2 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r3 = virtualinvoke r1.<java.util.Currency: java.lang.String getCurrencyCode()>();

        $r4 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String)>($r3);

        virtualinvoke $r2.<libcore.icu.NativeDecimalFormat: void setCurrency(java.util.Currency)>($r4);

        $r5 = r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols>;

        virtualinvoke $r5.<java.text.DecimalFormatSymbols: void setCurrency(java.util.Currency)>(r1);

        return;
    }

    public void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)
    {
        java.text.DecimalFormat r0;
        java.text.DecimalFormatSymbols r1, $r3, $r4;
        java.lang.Object $r2;
        libcore.icu.NativeDecimalFormat $r5;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.text.DecimalFormatSymbols;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.Object clone()>();

        $r3 = (java.text.DecimalFormatSymbols) $r2;

        r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols> = $r3;

        $r5 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r4 = r0.<java.text.DecimalFormat: java.text.DecimalFormatSymbols symbols>;

        virtualinvoke $r5.<libcore.icu.NativeDecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>($r4);

     label1:
        return;
    }

    public void setDecimalSeparatorAlwaysShown(boolean)
    {
        java.text.DecimalFormat r0;
        boolean z0;
        libcore.icu.NativeDecimalFormat $r1;

        r0 := @this: java.text.DecimalFormat;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(z0);

        return;
    }

    public void setGroupingSize(int)
    {
        java.text.DecimalFormat r0;
        int i0;
        libcore.icu.NativeDecimalFormat $r1;

        r0 := @this: java.text.DecimalFormat;

        i0 := @parameter0: int;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: void setGroupingSize(int)>(i0);

        return;
    }

    public void setGroupingUsed(boolean)
    {
        java.text.DecimalFormat r0;
        boolean z0;
        libcore.icu.NativeDecimalFormat $r1;

        r0 := @this: java.text.DecimalFormat;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: void setGroupingUsed(boolean)>(z0);

        return;
    }

    public void setMaximumFractionDigits(int)
    {
        java.text.DecimalFormat r0;
        int i0, $i1;
        libcore.icu.NativeDecimalFormat $r1;
        java.math.RoundingMode $r2;

        r0 := @this: java.text.DecimalFormat;

        i0 := @parameter0: int;

        specialinvoke r0.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(i0);

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i1 = virtualinvoke r0.<java.text.DecimalFormat: int getMaximumFractionDigits()>();

        virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: void setMaximumFractionDigits(int)>($i1);

        $r2 = r0.<java.text.DecimalFormat: java.math.RoundingMode roundingMode>;

        virtualinvoke r0.<java.text.DecimalFormat: void setRoundingMode(java.math.RoundingMode)>($r2);

        return;
    }

    public void setMaximumIntegerDigits(int)
    {
        java.text.DecimalFormat r0;
        int i0, $i1;
        libcore.icu.NativeDecimalFormat $r1;

        r0 := @this: java.text.DecimalFormat;

        i0 := @parameter0: int;

        specialinvoke r0.<java.text.NumberFormat: void setMaximumIntegerDigits(int)>(i0);

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i1 = virtualinvoke r0.<java.text.DecimalFormat: int getMaximumIntegerDigits()>();

        virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: void setMaximumIntegerDigits(int)>($i1);

        return;
    }

    public void setMinimumFractionDigits(int)
    {
        java.text.DecimalFormat r0;
        int i0, $i1;
        libcore.icu.NativeDecimalFormat $r1;

        r0 := @this: java.text.DecimalFormat;

        i0 := @parameter0: int;

        specialinvoke r0.<java.text.NumberFormat: void setMinimumFractionDigits(int)>(i0);

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i1 = virtualinvoke r0.<java.text.DecimalFormat: int getMinimumFractionDigits()>();

        virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: void setMinimumFractionDigits(int)>($i1);

        return;
    }

    public void setMinimumIntegerDigits(int)
    {
        java.text.DecimalFormat r0;
        int i0, $i1;
        libcore.icu.NativeDecimalFormat $r1;

        r0 := @this: java.text.DecimalFormat;

        i0 := @parameter0: int;

        specialinvoke r0.<java.text.NumberFormat: void setMinimumIntegerDigits(int)>(i0);

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $i1 = virtualinvoke r0.<java.text.DecimalFormat: int getMinimumIntegerDigits()>();

        virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: void setMinimumIntegerDigits(int)>($i1);

        return;
    }

    public void setMultiplier(int)
    {
        java.text.DecimalFormat r0;
        int i0;
        libcore.icu.NativeDecimalFormat $r1;

        r0 := @this: java.text.DecimalFormat;

        i0 := @parameter0: int;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: void setMultiplier(int)>(i0);

        return;
    }

    public void setNegativePrefix(java.lang.String)
    {
        java.text.DecimalFormat r0;
        java.lang.String r1;
        libcore.icu.NativeDecimalFormat $r2;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r2.<libcore.icu.NativeDecimalFormat: void setNegativePrefix(java.lang.String)>(r1);

        return;
    }

    public void setNegativeSuffix(java.lang.String)
    {
        java.text.DecimalFormat r0;
        java.lang.String r1;
        libcore.icu.NativeDecimalFormat $r2;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r2.<libcore.icu.NativeDecimalFormat: void setNegativeSuffix(java.lang.String)>(r1);

        return;
    }

    public void setParseBigDecimal(boolean)
    {
        java.text.DecimalFormat r0;
        boolean z0;
        libcore.icu.NativeDecimalFormat $r1;

        r0 := @this: java.text.DecimalFormat;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: void setParseBigDecimal(boolean)>(z0);

        return;
    }

    public void setParseIntegerOnly(boolean)
    {
        java.text.DecimalFormat r0;
        boolean z0;
        libcore.icu.NativeDecimalFormat $r1;

        r0 := @this: java.text.DecimalFormat;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: void setParseIntegerOnly(boolean)>(z0);

        return;
    }

    public void setPositivePrefix(java.lang.String)
    {
        java.text.DecimalFormat r0;
        java.lang.String r1;
        libcore.icu.NativeDecimalFormat $r2;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r2.<libcore.icu.NativeDecimalFormat: void setPositivePrefix(java.lang.String)>(r1);

        return;
    }

    public void setPositiveSuffix(java.lang.String)
    {
        java.text.DecimalFormat r0;
        java.lang.String r1;
        libcore.icu.NativeDecimalFormat $r2;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r2.<libcore.icu.NativeDecimalFormat: void setPositiveSuffix(java.lang.String)>(r1);

        return;
    }

    public void setRoundingMode(java.math.RoundingMode)
    {
        java.text.DecimalFormat r0;
        java.math.RoundingMode r1, $r2;
        double d0, $d1, $d2;
        int $i0, $i1;
        libcore.icu.NativeDecimalFormat $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.text.DecimalFormat;

        r1 := @parameter0: java.math.RoundingMode;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("roundingMode == null");

        throw $r4;

     label1:
        r0.<java.text.DecimalFormat: java.math.RoundingMode roundingMode> = r1;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode UNNECESSARY>;

        if r1 == $r2 goto label2;

        $i0 = virtualinvoke r0.<java.text.DecimalFormat: int getMaximumFractionDigits()>();

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i0);

        $d1 = (double) $i1;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d1);

        d0 = 1.0 / $d2;

        $r3 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        virtualinvoke $r3.<libcore.icu.NativeDecimalFormat: void setRoundingMode(java.math.RoundingMode,double)>(r1, d0);

     label2:
        return;
    }

    public java.lang.String toLocalizedPattern()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        java.lang.String $r2;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r2 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: java.lang.String toLocalizedPattern()>();

        return $r2;
    }

    public java.lang.String toPattern()
    {
        java.text.DecimalFormat r0;
        libcore.icu.NativeDecimalFormat $r1;
        java.lang.String $r2;

        r0 := @this: java.text.DecimalFormat;

        $r1 = r0.<java.text.DecimalFormat: libcore.icu.NativeDecimalFormat ndf>;

        $r2 = virtualinvoke $r1.<libcore.icu.NativeDecimalFormat: java.lang.String toPattern()>();

        return $r2;
    }
}
