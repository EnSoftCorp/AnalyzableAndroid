public final class dalvik.system.profiler.BinaryHprofReader extends java.lang.Object
{
    private static final boolean TRACE;
    private final dalvik.system.profiler.HprofData hprofData;
    private final java.util.Map idToClassName;
    private final java.util.Map idToStackFrame;
    private final java.util.Map idToStackTrace;
    private final java.util.Map idToString;
    private final java.io.DataInputStream in;
    private final java.util.Map stackTraces;
    private boolean strict;
    private java.lang.String version;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        java.io.InputStream r1;
        java.util.HashMap $r2, $r5, $r6, $r7, $r8;
        dalvik.system.profiler.HprofData $r3;
        java.util.Map $r4;
        java.io.DataInputStream $r9;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<dalvik.system.profiler.BinaryHprofReader: boolean strict> = 1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map stackTraces> = $r2;

        $r3 = new dalvik.system.profiler.HprofData;

        $r4 = r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map stackTraces>;

        specialinvoke $r3.<dalvik.system.profiler.HprofData: void <init>(java.util.Map)>($r4);

        r0.<dalvik.system.profiler.BinaryHprofReader: dalvik.system.profiler.HprofData hprofData> = $r3;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToString> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToClassName> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToStackFrame> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToStackTrace> = $r8;

        $r9 = new java.io.DataInputStream;

        specialinvoke $r9.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in> = $r9;

        return;
    }

    private void checkRead()
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        java.lang.String $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        $r1 = r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String version>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("data access before read()");

        throw $r2;

     label1:
        return;
    }

    private void parseControlSettings() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        int i0;
        short s1;
        java.io.DataInputStream $r1, $r2;
        dalvik.system.profiler.HprofData $r3, $r4;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        $r1 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i0 = virtualinvoke $r1.<java.io.DataInputStream: int readInt()>();

        $r2 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        s1 = virtualinvoke $r2.<java.io.DataInputStream: short readShort()>();

        $r3 = r0.<dalvik.system.profiler.BinaryHprofReader: dalvik.system.profiler.HprofData hprofData>;

        virtualinvoke $r3.<dalvik.system.profiler.HprofData: void setFlags(int)>(i0);

        $r4 = r0.<dalvik.system.profiler.BinaryHprofReader: dalvik.system.profiler.HprofData hprofData>;

        virtualinvoke $r4.<dalvik.system.profiler.HprofData: void setDepth(int)>(s1);

        return;
    }

    private void parseCpuSamples(int) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11;
        dalvik.system.profiler.HprofData$StackTrace r1;
        int[] r2;
        java.io.DataInputStream $r3, $r4, $r12, $r13;
        dalvik.system.profiler.MalformedHprofException $r5, $r21, $r26, $r30, $r41;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r19, $r20, $r22, $r23, $r24, $r25, $r27, $r28, $r32, $r33, $r35, $r36, $r37, $r38, $r39, $r40, $r43, $r44, $r45;
        java.lang.String $r10, $r29, $r31, $r34, $r42;
        java.lang.Integer $r14;
        java.util.Map $r15, $r16;
        java.lang.Object $r17, $r18;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        i0 := @parameter0: int;

        $r3 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i1 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        $r4 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i2 = virtualinvoke $r4.<java.io.DataInputStream: int readInt()>();

        $i8 = i2 * 8;

        i3 = 8 + $i8;

        if i0 == i3 goto label1;

        $r41 = new dalvik.system.profiler.MalformedHprofException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected CPU samples record of size ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r45 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" based on number of samples but header ");

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("specified a length of  ");

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r42);

        throw $r41;

     label1:
        i4 = 0;

        i5 = 0;

     label2:
        if i5 >= i2 goto label7;

        $r12 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i6 = virtualinvoke $r12.<java.io.DataInputStream: int readInt()>();

        $r13 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i7 = virtualinvoke $r13.<java.io.DataInputStream: int readInt()>();

        $r15 = r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToStackTrace>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        $r17 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        r1 = (dalvik.system.profiler.HprofData$StackTrace) $r17;

        if r1 != null goto label3;

        $r30 = new dalvik.system.profiler.MalformedHprofException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown stack trace id ");

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r34);

        throw $r30;

     label3:
        if i6 != 0 goto label4;

        $r26 = new dalvik.system.profiler.MalformedHprofException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Zero sample count for stack trace ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r31);

        throw $r26;

     label4:
        $r16 = r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map stackTraces>;

        $r18 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (int[]) $r18;

        $z1 = r0.<dalvik.system.profiler.BinaryHprofReader: boolean strict>;

        if $z1 == 0 goto label5;

        $i10 = r2[0];

        if $i10 == 0 goto label6;

        $r21 = new dalvik.system.profiler.MalformedHprofException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting sample count of stack trace ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found it was already initialized to ");

        $i11 = r2[0];

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r29);

        throw $r21;

     label5:
        $i9 = r2[0];

        i6 = i6 + $i9;

     label6:
        r2[0] = i6;

        i4 = i4 + i6;

        i5 = i5 + 1;

        goto label2;

     label7:
        $z0 = r0.<dalvik.system.profiler.BinaryHprofReader: boolean strict>;

        if $z0 == 0 goto label8;

        if i1 == i4 goto label8;

        $r5 = new dalvik.system.profiler.MalformedHprofException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a total of ");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" samples but saw ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label8:
        return;
    }

    private void parseEndThread() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        dalvik.system.profiler.HprofData$ThreadEvent r1;
        java.io.DataInputStream $r2;
        int $i0;
        dalvik.system.profiler.HprofData $r3;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        $r2 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        $i0 = virtualinvoke $r2.<java.io.DataInputStream: int readInt()>();

        r1 = staticinvoke <dalvik.system.profiler.HprofData$ThreadEvent: dalvik.system.profiler.HprofData$ThreadEvent end(int)>($i0);

        $r3 = r0.<dalvik.system.profiler.BinaryHprofReader: dalvik.system.profiler.HprofData hprofData>;

        virtualinvoke $r3.<dalvik.system.profiler.HprofData: void addThreadEvent(dalvik.system.profiler.HprofData$ThreadEvent)>(r1);

        return;
    }

    private void parseHeader() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseVersion()>();

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseIdSize()>();

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseTime()>();

        return;
    }

    private void parseIdSize() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        int i0;
        java.io.DataInputStream $r1;
        dalvik.system.profiler.MalformedHprofException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        $r1 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i0 = virtualinvoke $r1.<java.io.DataInputStream: int readInt()>();

        if i0 == 4 goto label1;

        $r2 = new dalvik.system.profiler.MalformedHprofException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported identifier size: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        return;
    }

    private void parseLoadClass() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        int i0;
        java.lang.String r1, $r7, $r11;
        java.io.DataInputStream $r2, $r3;
        java.util.Map $r4;
        java.lang.Integer $r5;
        java.lang.Object $r6;
        dalvik.system.profiler.MalformedHprofException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        $r2 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i0 = virtualinvoke $r2.<java.io.DataInputStream: int readInt()>();

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: int readId()>();

        $r3 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        r1 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String readString()>();

        $r4 = r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToClassName>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1);

        $r7 = (java.lang.String) $r6;

        if $r7 == null goto label1;

        $r8 = new dalvik.system.profiler.MalformedHprofException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate class id: ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label1:
        return;
    }

    private boolean parseRecord() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        int i0, i2, $i4, $i5;
        byte b1;
        dalvik.system.profiler.BinaryHprof$Tag r1;
        java.lang.String r2;
        java.io.DataInputStream $r3, $r4, $r5;
        int[] $r6;
        dalvik.system.profiler.MalformedHprofException $r7;
        long $l6, $l7;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        $r3 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i0 = virtualinvoke $r3.<java.io.DataInputStream: int read()>();

        if i0 != -1 goto label01;

        return 0;

     label01:
        b1 = (byte) i0;

        $r4 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        virtualinvoke $r4.<java.io.DataInputStream: int readInt()>();

        $r5 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i2 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

        r1 = staticinvoke <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag get(byte)>(b1);

        if r1 != null goto label02;

        $l7 = (long) i2;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void skipRecord(dalvik.system.profiler.BinaryHprof$Tag,long)>(r1, $l7);

        return 1;

     label02:
        r2 = virtualinvoke r1.<dalvik.system.profiler.BinaryHprof$Tag: java.lang.String checkSize(int)>(i2);

        if r2 == null goto label03;

        $r7 = new dalvik.system.profiler.MalformedHprofException;

        specialinvoke $r7.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>(r2);

        throw $r7;

     label03:
        $r6 = <dalvik.system.profiler.BinaryHprofReader$1: int[] $SwitchMap$dalvik$system$profiler$BinaryHprof$Tag>;

        $i5 = virtualinvoke r1.<dalvik.system.profiler.BinaryHprof$Tag: int ordinal()>();

        $i4 = $r6[$i5];

        tableswitch($i4)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label09;
            case 6: goto label10;
            case 7: goto label11;
            case 8: goto label12;
            default: goto label04;
        };

     label04:
        $l6 = (long) i2;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void skipRecord(dalvik.system.profiler.BinaryHprof$Tag,long)>(r1, $l6);

        return 1;

     label05:
        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseControlSettings()>();

        return 1;

     label06:
        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseStringInUtf8(int)>(i2);

        return 1;

     label07:
        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseStartThread()>();

        return 1;

     label08:
        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseEndThread()>();

        return 1;

     label09:
        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseLoadClass()>();

        return 1;

     label10:
        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseStackFrame()>();

        return 1;

     label11:
        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseStackTrace(int)>(i2);

        return 1;

     label12:
        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseCpuSamples(int)>(i2);

        return 1;
    }

    private void parseRecords() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        boolean $z0;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

     label1:
        $z0 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: boolean parseRecord()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void parseStackFrame() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        int i0, $i1;
        java.lang.String r1, r2, $r6, $r16;
        java.lang.StackTraceElement r3, $r5, $r10;
        java.io.DataInputStream $r7;
        java.util.Map $r8;
        java.lang.Integer $r9;
        java.lang.Object $r11;
        java.lang.StringBuilder $r12, $r14, $r15;
        dalvik.system.profiler.MalformedHprofException $r13;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        i0 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: int readId()>();

        r1 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String readString()>();

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String readString()>();

        r2 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String readString()>();

        $r5 = new java.lang.StackTraceElement;

        $r6 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String readClass()>();

        $r7 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        $i1 = virtualinvoke $r7.<java.io.DataInputStream: int readInt()>();

        specialinvoke $r5.<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>($r6, r1, r2, $i1);

        r3 = $r5;

        $r8 = r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToStackFrame>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11 = interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r3);

        $r10 = (java.lang.StackTraceElement) $r11;

        if $r10 == null goto label1;

        $r13 = new dalvik.system.profiler.MalformedHprofException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate stack frame id: ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label1:
        return;
    }

    private void parseStackTrace(int) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7;
        java.lang.StackTraceElement[] r1;
        dalvik.system.profiler.HprofData$StackTrace r2, $r7, $r15;
        java.lang.StackTraceElement r3;
        java.io.DataInputStream $r4, $r5, $r6;
        boolean $z0;
        java.lang.Object $r8, $r12, $r25;
        java.util.Map $r9, $r10, $r26;
        int[] $r11, $r20, $r22;
        java.lang.Integer $r13, $r24;
        dalvik.system.profiler.MalformedHprofException $r14, $r29, $r34;
        java.lang.StringBuilder $r16, $r17, $r19, $r27, $r28, $r30, $r31, $r32, $r35, $r36, $r37, $r38;
        java.lang.String $r18, $r33, $r39;
        dalvik.system.profiler.HprofData $r21, $r23;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        i0 := @parameter0: int;

        $r4 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i1 = virtualinvoke $r4.<java.io.DataInputStream: int readInt()>();

        $r5 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i2 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

        $r6 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i3 = virtualinvoke $r6.<java.io.DataInputStream: int readInt()>();

        $i7 = i3 * 4;

        i4 = 12 + $i7;

        if i0 == i4 goto label1;

        $r34 = new dalvik.system.profiler.MalformedHprofException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected stack trace record of size ");

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" based on number of frames but header ");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("specified a length of  ");

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r39);

        throw $r34;

     label1:
        r1 = newarray (java.lang.StackTraceElement)[i3];

        i5 = 0;

     label2:
        if i5 >= i3 goto label4;

        i6 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: int readId()>();

        $r26 = r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToStackFrame>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r25 = interfaceinvoke $r26.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        r3 = (java.lang.StackTraceElement) $r25;

        if r3 != null goto label3;

        $r29 = new dalvik.system.profiler.MalformedHprofException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown stack frame id ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r33);

        throw $r29;

     label3:
        r1[i5] = r3;

        i5 = i5 + 1;

        goto label2;

     label4:
        $r7 = new dalvik.system.profiler.HprofData$StackTrace;

        specialinvoke $r7.<dalvik.system.profiler.HprofData$StackTrace: void <init>(int,int,java.lang.StackTraceElement[])>(i1, i2, r1);

        r2 = $r7;

        $z0 = r0.<dalvik.system.profiler.BinaryHprofReader: boolean strict>;

        if $z0 == 0 goto label6;

        $r21 = r0.<dalvik.system.profiler.BinaryHprofReader: dalvik.system.profiler.HprofData hprofData>;

        $r20 = newarray (int)[1];

        virtualinvoke $r21.<dalvik.system.profiler.HprofData: void addStackTrace(dalvik.system.profiler.HprofData$StackTrace,int[])>(r2, $r20);

     label5:
        $r10 = r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToStackTrace>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r2);

        $r15 = (dalvik.system.profiler.HprofData$StackTrace) $r12;

        if $r15 == null goto label7;

        $r14 = new dalvik.system.profiler.MalformedHprofException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate stack trace id: ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label6:
        $r9 = r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map stackTraces>;

        $r8 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r11 = (int[]) $r8;

        if $r11 != null goto label5;

        $r23 = r0.<dalvik.system.profiler.BinaryHprofReader: dalvik.system.profiler.HprofData hprofData>;

        $r22 = newarray (int)[1];

        virtualinvoke $r23.<dalvik.system.profiler.HprofData: void addStackTrace(dalvik.system.profiler.HprofData$StackTrace,int[])>(r2, $r22);

        goto label5;

     label7:
        return;
    }

    private void parseStartThread() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        int i0, i1;
        dalvik.system.profiler.HprofData$ThreadEvent r1;
        java.io.DataInputStream $r2, $r3;
        java.lang.String $r4, $r5, $r6;
        dalvik.system.profiler.HprofData $r7;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        $r2 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i0 = virtualinvoke $r2.<java.io.DataInputStream: int readInt()>();

        i1 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: int readId()>();

        $r3 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        $r4 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String readString()>();

        $r5 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String readString()>();

        $r6 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String readString()>();

        r1 = staticinvoke <dalvik.system.profiler.HprofData$ThreadEvent: dalvik.system.profiler.HprofData$ThreadEvent start(int,int,java.lang.String,java.lang.String,java.lang.String)>(i1, i0, $r4, $r5, $r6);

        $r7 = r0.<dalvik.system.profiler.BinaryHprofReader: dalvik.system.profiler.HprofData hprofData>;

        virtualinvoke $r7.<dalvik.system.profiler.HprofData: void addThreadEvent(dalvik.system.profiler.HprofData$ThreadEvent)>(r1);

        return;
    }

    private void parseStringInUtf8(int) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        int i0, i1, $i2;
        byte[] r1;
        java.lang.String r2, $r5, $r9, $r14;
        java.io.DataInputStream $r3, $r4;
        java.util.Map $r6;
        java.lang.Integer $r7;
        java.lang.Object $r8;
        dalvik.system.profiler.MalformedHprofException $r10;
        java.lang.StringBuilder $r11, $r12, $r13;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        i0 := @parameter0: int;

        $r3 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        i1 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        $i2 = i0 - 4;

        r1 = newarray (byte)[$i2];

        $r4 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        staticinvoke <dalvik.system.profiler.BinaryHprofReader: void readFully(java.io.InputStream,byte[])>($r4, r1);

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, "UTF-8");

        r2 = $r5;

        $r6 = r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToString>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r2);

        $r9 = (java.lang.String) $r8;

        if $r9 == null goto label1;

        $r10 = new dalvik.system.profiler.MalformedHprofException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate string id: ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        return;
    }

    private void parseTime() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        long l0;
        java.io.DataInputStream $r1;
        dalvik.system.profiler.HprofData $r2;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        $r1 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        l0 = virtualinvoke $r1.<java.io.DataInputStream: long readLong()>();

        $r2 = r0.<dalvik.system.profiler.BinaryHprofReader: dalvik.system.profiler.HprofData hprofData>;

        virtualinvoke $r2.<dalvik.system.profiler.HprofData: void setStartMillis(long)>(l0);

        return;
    }

    private void parseVersion() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        java.lang.String r1;
        java.io.DataInputStream $r2;
        dalvik.system.profiler.MalformedHprofException $r3;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        $r2 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        r1 = staticinvoke <dalvik.system.profiler.BinaryHprof: java.lang.String readMagic(java.io.DataInputStream)>($r2);

        if r1 != null goto label1;

        $r3 = new dalvik.system.profiler.MalformedHprofException;

        specialinvoke $r3.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>("Could not find HPROF version");

        throw $r3;

     label1:
        r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String version> = r1;

        return;
    }

    private java.lang.String readClass() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        int i0;
        java.lang.String r1, $r9;
        java.util.Map $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        dalvik.system.profiler.MalformedHprofException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        i0 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: int readId()>();

        $r2 = r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToClassName>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (java.lang.String) $r4;

        if r1 != null goto label1;

        $r5 = new dalvik.system.profiler.MalformedHprofException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown class id ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        return r1;
    }

    private static void readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2;
        java.io.EOFException $r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 = 0;

        i1 = lengthof r1;

     label1:
        if i1 <= 0 goto label3;

        i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if i2 >= 0 goto label2;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label2:
        i0 = i0 + i2;

        i1 = i1 - i2;

        goto label1;

     label3:
        return;
    }

    private int readId() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        java.io.DataInputStream $r1;
        int $i0;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        $r1 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        $i0 = virtualinvoke $r1.<java.io.DataInputStream: int readInt()>();

        return $i0;
    }

    private java.lang.String readString() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        int i0;
        java.lang.String r1, $r9;
        java.util.Map $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        dalvik.system.profiler.MalformedHprofException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        i0 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: int readId()>();

        if i0 != 0 goto label2;

        r1 = null;

     label1:
        return r1;

     label2:
        $r2 = r0.<dalvik.system.profiler.BinaryHprofReader: java.util.Map idToString>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (java.lang.String) $r4;

        if r1 != null goto label1;

        $r5 = new dalvik.system.profiler.MalformedHprofException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown string id ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<dalvik.system.profiler.MalformedHprofException: void <init>(java.lang.String)>($r9);

        throw $r5;
    }

    private void skipRecord(dalvik.system.profiler.BinaryHprof$Tag, long) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        dalvik.system.profiler.BinaryHprof$Tag r1;
        long l0, l1;
        java.io.DataInputStream $r2;
        byte $b2;
        java.io.EOFException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        r1 := @parameter0: dalvik.system.profiler.BinaryHprof$Tag;

        l0 := @parameter1: long;

        $r2 = r0.<dalvik.system.profiler.BinaryHprofReader: java.io.DataInputStream in>;

        l1 = virtualinvoke $r2.<java.io.DataInputStream: long skip(long)>(l0);

        $b2 = l1 cmp l0;

        if $b2 == 0 goto label1;

        $r3 = new java.io.EOFException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected to skip ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes but only skipped ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.EOFException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label1:
        return;
    }

    public dalvik.system.profiler.HprofData getHprofData()
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        dalvik.system.profiler.HprofData $r1;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void checkRead()>();

        $r1 = r0.<dalvik.system.profiler.BinaryHprofReader: dalvik.system.profiler.HprofData hprofData>;

        return $r1;
    }

    public boolean getStrict()
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        boolean $z0;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        $z0 = r0.<dalvik.system.profiler.BinaryHprofReader: boolean strict>;

        return $z0;
    }

    public java.lang.String getVersion()
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        java.lang.String $r1;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void checkRead()>();

        $r1 = r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String version>;

        return $r1;
    }

    public void read() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofReader r0;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseHeader()>();

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofReader: void parseRecords()>();

        return;
    }

    public void setStrict(boolean)
    {
        dalvik.system.profiler.BinaryHprofReader r0;
        boolean z0;
        java.lang.String $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: dalvik.system.profiler.BinaryHprofReader;

        z0 := @parameter0: boolean;

        $r1 = r0.<dalvik.system.profiler.BinaryHprofReader: java.lang.String version>;

        if $r1 == null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot set strict after read()");

        throw $r2;

     label1:
        r0.<dalvik.system.profiler.BinaryHprofReader: boolean strict> = z0;

        return;
    }
}
