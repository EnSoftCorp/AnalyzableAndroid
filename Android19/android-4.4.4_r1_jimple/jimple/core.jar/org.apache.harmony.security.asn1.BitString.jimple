public final class org.apache.harmony.security.asn1.BitString extends java.lang.Object
{
    private static final byte[] RESET_MASK;
    private static final byte[] SET_MASK;
    public final byte[] bytes;
    public final int unusedBits;

    static void <clinit>()
    {
        byte[] $r0, $r1;

        $r0 = newarray (byte)[8];

        $r0[0] = -128;

        $r0[1] = 64;

        $r0[2] = 32;

        $r0[3] = 16;

        $r0[4] = 8;

        $r0[5] = 4;

        $r0[6] = 2;

        $r0[7] = 1;

        <org.apache.harmony.security.asn1.BitString: byte[] SET_MASK> = $r0;

        $r1 = newarray (byte)[8];

        $r1[0] = 127;

        $r1[1] = -65;

        $r1[2] = -33;

        $r1[3] = -17;

        $r1[4] = -9;

        $r1[5] = -5;

        $r1[6] = -3;

        $r1[7] = -2;

        <org.apache.harmony.security.asn1.BitString: byte[] RESET_MASK> = $r1;

        return;
    }

    public void <init>(byte[], int)
    {
        org.apache.harmony.security.asn1.BitString r0;
        byte[] r1;
        int i0, $i1;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @this: org.apache.harmony.security.asn1.BitString;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 < 0 goto label1;

        if i0 <= 7 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of unused bits MUST be in range 0-7");

        throw $r2;

     label2:
        $i1 = lengthof r1;

        if $i1 != 0 goto label3;

        if i0 == 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("For empty bit string unused bits MUST be 0");

        throw $r3;

     label3:
        r0.<org.apache.harmony.security.asn1.BitString: byte[] bytes> = r1;

        r0.<org.apache.harmony.security.asn1.BitString: int unusedBits> = i0;

        return;
    }

    public void <init>(boolean[])
    {
        org.apache.harmony.security.asn1.BitString r0;
        boolean[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r2;
        boolean $z0;

        r0 := @this: org.apache.harmony.security.asn1.BitString;

        r1 := @parameter0: boolean[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = lengthof r1;

        $i3 = $i2 % 8;

        r0.<org.apache.harmony.security.asn1.BitString: int unusedBits> = $i3;

        $i4 = lengthof r1;

        i0 = $i4 / 8;

        $i5 = r0.<org.apache.harmony.security.asn1.BitString: int unusedBits>;

        if $i5 == 0 goto label1;

        i0 = i0 + 1;

     label1:
        $r2 = newarray (byte)[i0];

        r0.<org.apache.harmony.security.asn1.BitString: byte[] bytes> = $r2;

        i1 = 0;

     label2:
        $i6 = lengthof r1;

        if i1 >= $i6 goto label3;

        $z0 = r1[i1];

        virtualinvoke r0.<org.apache.harmony.security.asn1.BitString: void setBit(int,boolean)>(i1, $z0);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public boolean getBit(int)
    {
        org.apache.harmony.security.asn1.BitString r0;
        int i0, i1, i2;
        byte[] $r1, $r2;
        byte $b3, $b4, $b5;

        r0 := @this: org.apache.harmony.security.asn1.BitString;

        i0 := @parameter0: int;

        i1 = i0 % 8;

        i2 = i0 / 8;

        $r1 = r0.<org.apache.harmony.security.asn1.BitString: byte[] bytes>;

        $b4 = $r1[i2];

        $r2 = <org.apache.harmony.security.asn1.BitString: byte[] SET_MASK>;

        $b3 = $r2[i1];

        $b5 = $b4 & $b3;

        if $b5 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void setBit(int, boolean)
    {
        org.apache.harmony.security.asn1.BitString r0;
        int i0, i1, i2;
        boolean z0;
        byte[] r1, r2, $r3, $r4;
        byte $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10;

        r0 := @this: org.apache.harmony.security.asn1.BitString;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 = i0 % 8;

        i2 = i0 / 8;

        if z0 == 0 goto label1;

        r2 = r0.<org.apache.harmony.security.asn1.BitString: byte[] bytes>;

        $b8 = r2[i2];

        $r4 = <org.apache.harmony.security.asn1.BitString: byte[] SET_MASK>;

        $b7 = $r4[i1];

        $b9 = $b8 | $b7;

        $b10 = (byte) $b9;

        r2[i2] = $b10;

        return;

     label1:
        r1 = r0.<org.apache.harmony.security.asn1.BitString: byte[] bytes>;

        $b4 = r1[i2];

        $r3 = <org.apache.harmony.security.asn1.BitString: byte[] RESET_MASK>;

        $b3 = $r3[i1];

        $b5 = $b4 & $b3;

        $b6 = (byte) $b5;

        r1[i2] = $b6;

        return;
    }

    public boolean[] toBooleanArray()
    {
        org.apache.harmony.security.asn1.BitString r0;
        boolean[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        byte[] $r2;
        boolean $z0;

        r0 := @this: org.apache.harmony.security.asn1.BitString;

        $r2 = r0.<org.apache.harmony.security.asn1.BitString: byte[] bytes>;

        $i1 = lengthof $r2;

        $i3 = 8 * $i1;

        $i2 = r0.<org.apache.harmony.security.asn1.BitString: int unusedBits>;

        $i4 = $i3 - $i2;

        r1 = newarray (boolean)[$i4];

        i0 = 0;

     label1:
        $i5 = lengthof r1;

        if i0 >= $i5 goto label2;

        $z0 = virtualinvoke r0.<org.apache.harmony.security.asn1.BitString: boolean getBit(int)>(i0);

        r1[i0] = $z0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }
}
