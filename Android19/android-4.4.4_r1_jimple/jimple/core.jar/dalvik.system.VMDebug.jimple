public final class dalvik.system.VMDebug extends java.lang.Object
{
    private static final int KIND_ALLOCATED_BYTES;
    private static final int KIND_ALLOCATED_OBJECTS;
    public static final int KIND_ALL_COUNTS;
    private static final int KIND_CLASS_INIT_COUNT;
    private static final int KIND_CLASS_INIT_TIME;
    private static final int KIND_EXT_ALLOCATED_BYTES;
    private static final int KIND_EXT_ALLOCATED_OBJECTS;
    private static final int KIND_EXT_FREED_BYTES;
    private static final int KIND_EXT_FREED_OBJECTS;
    private static final int KIND_FREED_BYTES;
    private static final int KIND_FREED_OBJECTS;
    private static final int KIND_GC_INVOCATIONS;
    public static final int KIND_GLOBAL_ALLOCATED_BYTES;
    public static final int KIND_GLOBAL_ALLOCATED_OBJECTS;
    public static final int KIND_GLOBAL_CLASS_INIT_COUNT;
    public static final int KIND_GLOBAL_CLASS_INIT_TIME;
    public static final int KIND_GLOBAL_EXT_ALLOCATED_BYTES;
    public static final int KIND_GLOBAL_EXT_ALLOCATED_OBJECTS;
    public static final int KIND_GLOBAL_EXT_FREED_BYTES;
    public static final int KIND_GLOBAL_EXT_FREED_OBJECTS;
    public static final int KIND_GLOBAL_FREED_BYTES;
    public static final int KIND_GLOBAL_FREED_OBJECTS;
    public static final int KIND_GLOBAL_GC_INVOCATIONS;
    public static final int KIND_THREAD_ALLOCATED_BYTES;
    public static final int KIND_THREAD_ALLOCATED_OBJECTS;
    public static final int KIND_THREAD_CLASS_INIT_COUNT;
    public static final int KIND_THREAD_CLASS_INIT_TIME;
    public static final int KIND_THREAD_EXT_ALLOCATED_BYTES;
    public static final int KIND_THREAD_EXT_ALLOCATED_OBJECTS;
    public static final int KIND_THREAD_EXT_FREED_BYTES;
    public static final int KIND_THREAD_EXT_FREED_OBJECTS;
    public static final int KIND_THREAD_FREED_BYTES;
    public static final int KIND_THREAD_FREED_OBJECTS;
    public static final int KIND_THREAD_GC_INVOCATIONS;
    public static final int TRACE_COUNT_ALLOCS;

    private void <init>()
    {
        dalvik.system.VMDebug r0;

        r0 := @this: dalvik.system.VMDebug;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static native boolean cacheRegisterMap(java.lang.String);

    private static int checkBufferSize(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        i0 = 8388608;

     label1:
        if i0 >= 1024 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buffer size < 1024: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        return i0;
    }

    public static native long countInstancesOfClass(java.lang.Class, boolean);

    public static native void crash();

    public static void dumpHprofData(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("filename == null");

        throw $r1;

     label1:
        staticinvoke <dalvik.system.VMDebug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)>(r0, null);

        return;
    }

    public static native void dumpHprofData(java.lang.String, java.io.FileDescriptor) throws java.io.IOException;

    public static native void dumpHprofDataDdms();

    public static native void dumpReferenceTables();

    public static native int getAllocCount(int);

    public static native void getHeapSpaceStats(long[]);

    public static native void getInstructionCount(int[]);

    public static native int getLoadedClassCount();

    public static native int getMethodTracingMode();

    public static native java.lang.String[] getVmFeatureList();

    public static native void infopoint(int);

    public static native boolean isDebuggerConnected();

    public static native boolean isDebuggingEnabled();

    public static native long lastDebuggerActivity();

    public static native void printLoadedClasses(int);

    public static native void resetAllocCount(int);

    public static native void resetInstructionCount();

    public static int setAllocationLimit(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1;
    }

    public static int setGlobalAllocationLimit(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1;
    }

    public static native void startAllocCounting();

    private static void startClassPrep()
    {
        return;
    }

    public static native void startEmulatorTracing();

    private static void startGC()
    {
        return;
    }

    public static native void startInstructionCounting();

    public static void startMethodTracing()
    {
        java.lang.UnsupportedOperationException $r0;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public static void startMethodTracing(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1, $i2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <dalvik.system.VMDebug: int checkBufferSize(int)>(i0);

        staticinvoke <dalvik.system.VMDebug: void startMethodTracingFilename(java.lang.String,int,int)>(r0, $i2, i1);

        return;
    }

    public static void startMethodTracing(java.lang.String, java.io.FileDescriptor, int, int)
    {
        java.lang.String r0;
        java.io.FileDescriptor r1;
        int i0, i1, $i2;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.FileDescriptor;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("fd == null");

        throw $r2;

     label1:
        $i2 = staticinvoke <dalvik.system.VMDebug: int checkBufferSize(int)>(i0);

        staticinvoke <dalvik.system.VMDebug: void startMethodTracingFd(java.lang.String,java.io.FileDescriptor,int,int)>(r0, r1, $i2, i1);

        return;
    }

    public static void startMethodTracingDdms(int, int, boolean, int)
    {
        int i0, i1, i2, $i3;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        i2 := @parameter3: int;

        $i3 = staticinvoke <dalvik.system.VMDebug: int checkBufferSize(int)>(i0);

        staticinvoke <dalvik.system.VMDebug: void startMethodTracingDdmsImpl(int,int,boolean,int)>($i3, i1, z0, i2);

        return;
    }

    private static native void startMethodTracingDdmsImpl(int, int, boolean, int);

    private static native void startMethodTracingFd(java.lang.String, java.io.FileDescriptor, int, int);

    private static native void startMethodTracingFilename(java.lang.String, int, int);

    public static native void stopAllocCounting();

    public static native void stopEmulatorTracing();

    public static native void stopInstructionCounting();

    public static native void stopMethodTracing();

    public static native long threadCpuTimeNanos();

    public static void <clinit>()
    {
        <dalvik.system.VMDebug: int TRACE_COUNT_ALLOCS> = 1;

        <dalvik.system.VMDebug: int KIND_THREAD_GC_INVOCATIONS> = 1048576;

        <dalvik.system.VMDebug: int KIND_THREAD_FREED_OBJECTS> = 262144;

        <dalvik.system.VMDebug: int KIND_THREAD_FREED_BYTES> = 524288;

        <dalvik.system.VMDebug: int KIND_THREAD_EXT_FREED_OBJECTS> = 1073741824;

        <dalvik.system.VMDebug: int KIND_THREAD_EXT_FREED_BYTES> = -2147483648;

        <dalvik.system.VMDebug: int KIND_THREAD_EXT_ALLOCATED_OBJECTS> = 268435456;

        <dalvik.system.VMDebug: int KIND_THREAD_EXT_ALLOCATED_BYTES> = 536870912;

        <dalvik.system.VMDebug: int KIND_THREAD_CLASS_INIT_TIME> = 4194304;

        <dalvik.system.VMDebug: int KIND_THREAD_CLASS_INIT_COUNT> = 2097152;

        <dalvik.system.VMDebug: int KIND_THREAD_ALLOCATED_OBJECTS> = 65536;

        <dalvik.system.VMDebug: int KIND_THREAD_ALLOCATED_BYTES> = 131072;

        <dalvik.system.VMDebug: int KIND_GLOBAL_GC_INVOCATIONS> = 16;

        <dalvik.system.VMDebug: int KIND_GLOBAL_FREED_OBJECTS> = 4;

        <dalvik.system.VMDebug: int KIND_GLOBAL_FREED_BYTES> = 8;

        <dalvik.system.VMDebug: int KIND_GLOBAL_EXT_FREED_OBJECTS> = 16384;

        <dalvik.system.VMDebug: int KIND_GLOBAL_EXT_FREED_BYTES> = 32768;

        <dalvik.system.VMDebug: int KIND_GLOBAL_EXT_ALLOCATED_OBJECTS> = 4096;

        <dalvik.system.VMDebug: int KIND_GLOBAL_EXT_ALLOCATED_BYTES> = 8192;

        <dalvik.system.VMDebug: int KIND_GLOBAL_CLASS_INIT_TIME> = 64;

        <dalvik.system.VMDebug: int KIND_GLOBAL_CLASS_INIT_COUNT> = 32;

        <dalvik.system.VMDebug: int KIND_GLOBAL_ALLOCATED_OBJECTS> = 1;

        <dalvik.system.VMDebug: int KIND_GLOBAL_ALLOCATED_BYTES> = 2;

        <dalvik.system.VMDebug: int KIND_GC_INVOCATIONS> = 16;

        <dalvik.system.VMDebug: int KIND_FREED_OBJECTS> = 4;

        <dalvik.system.VMDebug: int KIND_FREED_BYTES> = 8;

        <dalvik.system.VMDebug: int KIND_EXT_FREED_OBJECTS> = 16384;

        <dalvik.system.VMDebug: int KIND_EXT_FREED_BYTES> = 32768;

        <dalvik.system.VMDebug: int KIND_EXT_ALLOCATED_OBJECTS> = 4096;

        <dalvik.system.VMDebug: int KIND_EXT_ALLOCATED_BYTES> = 8192;

        <dalvik.system.VMDebug: int KIND_CLASS_INIT_TIME> = 64;

        <dalvik.system.VMDebug: int KIND_CLASS_INIT_COUNT> = 32;

        <dalvik.system.VMDebug: int KIND_ALL_COUNTS> = -1;

        <dalvik.system.VMDebug: int KIND_ALLOCATED_OBJECTS> = 1;

        <dalvik.system.VMDebug: int KIND_ALLOCATED_BYTES> = 2;

        return;
    }
}
