class java.util.Collections$CheckedCollection extends java.lang.Object implements java.util.Collection, java.io.Serializable
{
    private static final long serialVersionUID;
    final java.util.Collection c;
    final java.lang.Class type;

    public void <init>(java.util.Collection, java.lang.Class)
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection r1;
        java.lang.Class r2;
        java.lang.NullPointerException $r3, $r4;

        r0 := @this: java.util.Collections$CheckedCollection;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("c == null");

        throw $r4;

     label1:
        if r2 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("type == null");

        throw $r3;

     label2:
        r0.<java.util.Collections$CheckedCollection: java.util.Collection c> = r1;

        r0.<java.util.Collections$CheckedCollection: java.lang.Class type> = r2;

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.Collections$CheckedCollection r0;
        java.lang.Object r1, $r4;
        java.lang.Class $r2;
        java.util.Collection $r3;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $r2 = r0.<java.util.Collections$CheckedCollection: java.lang.Class type>;

        $r4 = staticinvoke <java.util.Collections: java.lang.Object checkType(java.lang.Object,java.lang.Class)>(r1, $r2);

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection r1, $r3;
        java.lang.Object[] r2;
        int i0, i1;
        java.util.List $r4;
        boolean $z0;
        java.lang.Class $r5;
        java.lang.Object $r6;

        r0 := @this: java.util.Collections$CheckedCollection;

        r1 := @parameter0: java.util.Collection;

        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = r2[i1];

        $r5 = r0.<java.util.Collections$CheckedCollection: java.lang.Class type>;

        staticinvoke <java.util.Collections: java.lang.Object checkType(java.lang.Object,java.lang.Class)>($r6, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean addAll(java.util.Collection)>($r4);

        return $z0;
    }

    public void clear()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection $r1;

        r0 := @this: java.util.Collections$CheckedCollection;

        $r1 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Collections$CheckedCollection r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection r1, $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean isEmpty()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection $r1;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;

        $r1 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Iterator r1;
        java.util.Collection $r2;
        boolean $z0;
        java.util.Collections$CheckedListIterator $r3;
        java.lang.Class $r4;
        java.util.ListIterator $r5;

        r0 := @this: java.util.Collections$CheckedCollection;

        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = r1 instanceof java.util.ListIterator;

        if $z0 == 0 goto label1;

        $r3 = new java.util.Collections$CheckedListIterator;

        $r5 = (java.util.ListIterator) r1;

        $r4 = r0.<java.util.Collections$CheckedCollection: java.lang.Class type>;

        specialinvoke $r3.<java.util.Collections$CheckedListIterator: void <init>(java.util.ListIterator,java.lang.Class)>($r5, $r4);

        r1 = $r3;

     label1:
        return r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Collections$CheckedCollection r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection r1, $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection r1, $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public int size()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: java.util.Collections$CheckedCollection;

        $r1 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.Collections$CheckedCollection;

        $r1 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.Collections$CheckedCollection r0;
        java.lang.Object[] r1, $r3;
        java.util.Collection $r2;

        r0 := @this: java.util.Collections$CheckedCollection;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }

    public java.lang.String toString()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Collections$CheckedCollection;

        $r1 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <java.util.Collections$CheckedCollection: long serialVersionUID> = 1578914078182001775L;

        return;
    }
}
