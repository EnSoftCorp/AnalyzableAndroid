public abstract class java.util.concurrent.locks.AbstractQueuedLongSynchronizer extends java.util.concurrent.locks.AbstractOwnableSynchronizer implements java.io.Serializable
{
    private static final long headOffset;
    private static final long nextOffset;
    private static final long serialVersionUID;
    static final long spinForTimeoutThreshold;
    private static final long stateOffset;
    private static final long tailOffset;
    private static final sun.misc.Unsafe unsafe;
    private static final long waitStatusOffset;
    private transient volatile java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head;
    private volatile long state;
    private transient volatile java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail;

    static void <clinit>()
    {
        java.lang.Exception r0, $r18;
        sun.misc.Unsafe $r1, $r3, $r6, $r9, $r12, $r14;
        java.lang.Class $r2, $r5, $r8, $r11, $r15;
        java.lang.reflect.Field $r4, $r7, $r10, $r13, $r16;
        long $l0, $l1, $l2, $l3, $l4;
        java.lang.Error $r17;

        <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long spinForTimeoutThreshold> = 1000L;

        <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long serialVersionUID> = 7373984972572414692L;

        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: sun.misc.Unsafe unsafe> = $r1;

     label1:
        $r3 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: sun.misc.Unsafe unsafe>;

        $r2 = class "java/util/concurrent/locks/AbstractQueuedLongSynchronizer";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("state");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long stateOffset> = $l0;

        $r6 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: sun.misc.Unsafe unsafe>;

        $r5 = class "java/util/concurrent/locks/AbstractQueuedLongSynchronizer";

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("head");

        $l1 = virtualinvoke $r6.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r7);

        <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long headOffset> = $l1;

        $r9 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: sun.misc.Unsafe unsafe>;

        $r8 = class "java/util/concurrent/locks/AbstractQueuedLongSynchronizer";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("tail");

        $l2 = virtualinvoke $r9.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r10);

        <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long tailOffset> = $l2;

        $r12 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: sun.misc.Unsafe unsafe>;

        $r11 = class "java/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node";

        $r13 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("waitStatus");

        $l3 = virtualinvoke $r12.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r13);

        <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long waitStatusOffset> = $l3;

        $r14 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: sun.misc.Unsafe unsafe>;

        $r15 = class "java/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node";

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("next");

        $l4 = virtualinvoke $r14.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r16);

        <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long nextOffset> = $l4;

     label2:
        return;

     label3:
        $r18 := @caughtexception;

        r0 = $r18;

        $r17 = new java.lang.Error;

        specialinvoke $r17.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r17;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void <init>()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        specialinvoke r0.<java.util.concurrent.locks.AbstractOwnableSynchronizer: void <init>()>();

        return;
    }

    private java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node addWaiter(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r2, r3, $r4;
        java.lang.Thread $r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        $r4 = new java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        specialinvoke $r4.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: void <init>(java.lang.Thread,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>($r5, r1);

        r2 = $r4;

        r3 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

        if r3 == null goto label1;

        r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev> = r3;

        $z0 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetTail(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r3, r2);

        if $z0 == 0 goto label1;

        r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next> = r2;

        return r2;

     label1:
        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node enq(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r2);

        return r2;
    }

    private void cancelAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r2, r3, r4, $r5, $r6;
        int i0, $i1, $i2;
        java.lang.Thread $r7;
        boolean $z1, $z2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        if r1 != null goto label1;

        return;

     label1:
        r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread> = null;

        r2 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

     label2:
        $i1 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if $i1 <= 0 goto label3;

        r2 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev> = r2;

        goto label2;

     label3:
        r3 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next>;

        r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus> = 1;

        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

        if r1 != $r5 goto label4;

        $z2 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetTail(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1, r2);

        if $z2 == 0 goto label4;

        staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetNext(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r2, r3, null);

        return;

     label4:
        $r6 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r2 == $r6 goto label7;

        i0 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if i0 == -1 goto label5;

        if i0 > 0 goto label7;

        $z1 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,int,int)>(r2, i0, -1);

        if $z1 == 0 goto label7;

     label5:
        $r7 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        if $r7 == null goto label7;

        r4 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next>;

        if r4 == null goto label6;

        $i2 = r4.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if $i2 > 0 goto label6;

        staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetNext(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r2, r3, r4);

     label6:
        r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next> = r1;

        return;

     label7:
        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void unparkSuccessor(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        goto label6;
    }

    private final boolean compareAndSetHead(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1;
        long $l0;
        sun.misc.Unsafe $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        $r2 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long headOffset>;

        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, null, r1);

        return $z0;
    }

    private static final boolean compareAndSetNext(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node, java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node, java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r0, r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        r1 := @parameter1: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        r2 := @parameter2: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        $r3 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long nextOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    private final boolean compareAndSetTail(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node, java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        r2 := @parameter1: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        $r3 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long tailOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    private static final boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node, int, int)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r0;
        int i0, i1;
        long $l2;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: sun.misc.Unsafe unsafe>;

        $l2 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long waitStatusOffset>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l2, i0, i1);

        return $z0;
    }

    private void doAcquireInterruptibly(long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r3, $r4, $r5;
        java.lang.Throwable r2, $r7;
        boolean $z0, $z1, $z2;
        java.lang.InterruptedException $r6;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $r4 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node EXCLUSIVE>;

        r1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node addWaiter(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>($r4);

     label1:
        r3 = virtualinvoke r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node predecessor()>();

        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r3 != $r5 goto label4;

        $z2 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryAcquire(long)>(l0);

        if $z2 == 0 goto label4;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void setHead(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next> = null;

     label2:
        goto label3;

     label3:
        return;

     label4:
        $z0 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r3, r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean parkAndCheckInterrupt()>();

        if $z1 == 0 goto label1;

        $r6 = new java.lang.InterruptedException;

        specialinvoke $r6.<java.lang.InterruptedException: void <init>()>();

        throw $r6;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    private boolean doAcquireNanos(long, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0, l1, l3, l4, $l5, $l6;
        byte b2, $b7, $b8;
        boolean z0, $z1, $z2, $z3;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r3, $r4, $r5;
        java.lang.Throwable r2, $r7;
        java.lang.InterruptedException $r6;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        b2 = l1 cmp 0L;

        z0 = 0;

        if b2 > 0 goto label02;

     label01:
        return z0;

     label02:
        $l5 = staticinvoke <java.lang.System: long nanoTime()>();

        l3 = l1 + $l5;

        $r4 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node EXCLUSIVE>;

        r1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node addWaiter(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>($r4);

     label03:
        r3 = virtualinvoke r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node predecessor()>();

        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r3 != $r5 goto label06;

        $z3 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryAcquire(long)>(l0);

        if $z3 == 0 goto label06;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void setHead(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next> = null;

     label04:
        z0 = 1;

        goto label01;

     label05:
        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        return z0;

     label06:
        $l6 = staticinvoke <java.lang.System: long nanoTime()>();

        l4 = l3 - $l6;

     label07:
        $b7 = l4 cmp 0L;

        if $b7 > 0 goto label08;

        z0 = 0;

        goto label05;

     label08:
        $z1 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r3, r1);

        if $z1 == 0 goto label11;

     label09:
        $b8 = l4 cmp 1000L;

        if $b8 <= 0 goto label11;

     label10:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l4);

     label11:
        $z2 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z2 == 0 goto label03;

        $r6 = new java.lang.InterruptedException;

        specialinvoke $r6.<java.lang.InterruptedException: void <init>()>();

        throw $r6;

     label12:
        $r7 := @caughtexception;

        r2 = $r7;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        throw r2;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    private void doAcquireShared(long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0, l1;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r3, $r4, $r5;
        boolean z0, z1, $z2;
        java.lang.Throwable r2, $r6;
        byte $b2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $r4 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node SHARED>;

        r1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node addWaiter(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>($r4);

        z0 = 0;

     label01:
        r3 = virtualinvoke r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node predecessor()>();

        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r3 != $r5 goto label08;

        l1 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long tryAcquireShared(long)>(l0);

     label02:
        $b2 = l1 cmp 0L;

        if $b2 < 0 goto label08;

     label03:
        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void setHeadAndPropagate(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,long)>(r1, l1);

        r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next> = null;

     label04:
        if z0 == 0 goto label06;

     label05:
        staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void selfInterrupt()>();

     label06:
        goto label07;

     label07:
        return;

     label08:
        $z2 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r3, r1);

        if $z2 == 0 goto label01;

        z1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean parkAndCheckInterrupt()>();

     label09:
        if z1 == 0 goto label01;

        z0 = 1;

        goto label01;

     label10:
        $r6 := @caughtexception;

        r2 = $r6;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        throw r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    private void doAcquireSharedInterruptibly(long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0, l1;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r3, $r4, $r5;
        java.lang.Throwable r2, $r7;
        boolean $z0, $z1;
        java.lang.InterruptedException $r6;
        byte $b2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $r4 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node SHARED>;

        r1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node addWaiter(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>($r4);

     label1:
        r3 = virtualinvoke r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node predecessor()>();

        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r3 != $r5 goto label6;

        l1 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long tryAcquireShared(long)>(l0);

     label2:
        $b2 = l1 cmp 0L;

        if $b2 < 0 goto label6;

     label3:
        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void setHeadAndPropagate(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,long)>(r1, l1);

        r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next> = null;

     label4:
        goto label5;

     label5:
        return;

     label6:
        $z0 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r3, r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean parkAndCheckInterrupt()>();

        if $z1 == 0 goto label1;

        $r6 = new java.lang.InterruptedException;

        specialinvoke $r6.<java.lang.InterruptedException: void <init>()>();

        throw $r6;

     label7:
        $r7 := @caughtexception;

        r2 = $r7;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    private boolean doAcquireSharedNanos(long, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0, l1, l2, l3, l4, $l6, $l7;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r3, $r4, $r5;
        java.lang.Throwable r2, $r7;
        boolean z0, $z1, $z2;
        byte $b5, $b8, $b9, $b10;
        java.lang.InterruptedException $r6;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b5 = l1 cmp 0L;

        if $b5 > 0 goto label02;

        z0 = 0;

     label01:
        return z0;

     label02:
        $l6 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = l1 + $l6;

        $r4 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node SHARED>;

        r1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node addWaiter(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>($r4);

     label03:
        r3 = virtualinvoke r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node predecessor()>();

        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r3 != $r5 goto label08;

        l4 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long tryAcquireShared(long)>(l0);

     label04:
        $b10 = l4 cmp 0L;

        if $b10 < 0 goto label08;

     label05:
        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void setHeadAndPropagate(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,long)>(r1, l4);

        r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next> = null;

     label06:
        z0 = 1;

        goto label01;

     label07:
        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        return z0;

     label08:
        $l7 = staticinvoke <java.lang.System: long nanoTime()>();

        l3 = l2 - $l7;

     label09:
        $b8 = l3 cmp 0L;

        if $b8 > 0 goto label10;

        z0 = 0;

        goto label07;

     label10:
        $z1 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r3, r1);

        if $z1 == 0 goto label13;

     label11:
        $b9 = l3 cmp 1000L;

        if $b9 <= 0 goto label13;

     label12:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l3);

     label13:
        $z2 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z2 == 0 goto label03;

        $r6 = new java.lang.InterruptedException;

        specialinvoke $r6.<java.lang.InterruptedException: void <init>()>();

        throw $r6;

     label14:
        $r7 := @caughtexception;

        r2 = $r7;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        throw r2;

        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    private void doReleaseShared()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, $r2, $r3;
        int i0;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

     label1:
        r1 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r1 == null goto label2;

        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

        if r1 == $r3 goto label2;

        i0 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if i0 != -1 goto label3;

        $z1 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,int,int)>(r1, -1, 0);

        if $z1 == 0 goto label1;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void unparkSuccessor(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

     label2:
        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r1 != $r2 goto label1;

        return;

     label3:
        if i0 != 0 goto label2;

        $z0 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,int,int)>(r1, 0, -3);

        if $z0 != 0 goto label2;

        goto label1;
    }

    private java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node enq(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

     label1:
        r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

        if r2 != null goto label2;

        $r3 = new java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        specialinvoke $r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: void <init>()>();

        $z1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetHead(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>($r3);

        if $z1 == 0 goto label1;

        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail> = $r4;

        goto label1;

     label2:
        r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev> = r2;

        $z0 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetTail(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r2, r1);

        if $z0 == 0 goto label1;

        r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next> = r1;

        return r2;
    }

    private boolean findNodeFromTail(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

     label1:
        if r2 != r1 goto label2;

        return 1;

     label2:
        if r2 != null goto label3;

        return 0;

     label3:
        r2 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        goto label1;
    }

    private java.lang.Thread fullGetFirstQueuedThread()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r2, r3, r6, r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.Thread r4, r5, r7;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r1 == null goto label1;

        r8 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next>;

        if r8 == null goto label1;

        $r13 = r8.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        $r12 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if $r13 != $r12 goto label1;

        r7 = r8.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        if r7 != null goto label2;

     label1:
        r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r2 == null goto label4;

        r6 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next>;

        if r6 == null goto label4;

        $r11 = r6.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        $r10 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if $r11 != $r10 goto label4;

        r7 = r6.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        if r7 == null goto label4;

     label2:
        r4 = r7;

     label3:
        return r4;

     label4:
        r3 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

        r4 = null;

     label5:
        if r3 == null goto label3;

        $r9 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r3 == $r9 goto label3;

        r5 = r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        if r5 == null goto label6;

        r4 = r5;

     label6:
        r3 = r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        goto label5;
    }

    private final boolean parkAndCheckInterrupt()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        return $z0;
    }

    static void selfInterrupt()
    {
        java.lang.Thread $r0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r0.<java.lang.Thread: void interrupt()>();

        return;
    }

    private void setHead(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head> = r1;

        r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread> = null;

        r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev> = null;

        return;
    }

    private void setHeadAndPropagate(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node, long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r2, r3;
        long l0;
        byte $b1;
        boolean $z0;
        int $i2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        l0 := @parameter1: long;

        r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void setHead(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label1;

        if r2 == null goto label1;

        $i2 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if $i2 >= 0 goto label3;

     label1:
        r3 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next>;

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: boolean isShared()>();

        if $z0 == 0 goto label3;

     label2:
        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void doReleaseShared()>();

     label3:
        return;
    }

    private static boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node, java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r0, r1;
        int i0, $i1;

        r0 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        r1 := @parameter1: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        i0 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if i0 != -1 goto label1;

        return 1;

     label1:
        if i0 <= 0 goto label4;

     label2:
        r0 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev> = r0;

        $i1 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if $i1 > 0 goto label2;

        r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next> = r1;

     label3:
        return 0;

     label4:
        staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,int,int)>(r0, i0, -1);

        goto label3;
    }

    private void unparkSuccessor(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r2, r3;
        int i0, $i1, $i2;
        java.lang.Thread $r4;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        i0 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if i0 >= 0 goto label1;

        staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,int,int)>(r1, i0, 0);

     label1:
        r2 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next>;

        if r2 == null goto label2;

        $i2 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if $i2 <= 0 goto label5;

     label2:
        r2 = null;

        r3 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

     label3:
        if r3 == null goto label5;

        if r3 == r1 goto label5;

        $i1 = r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if $i1 > 0 goto label4;

        r2 = r3;

     label4:
        r3 = r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        goto label3;

     label5:
        if r2 == null goto label6;

        $r4 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r4);

     label6:
        return;
    }

    public final void acquire(long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0;
        boolean $z0, $z1;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node $r1, $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryAcquire(long)>(l0);

        if $z0 != 0 goto label1;

        $r1 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node EXCLUSIVE>;

        $r2 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node addWaiter(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>($r1);

        $z1 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,long)>($r2, l0);

        if $z1 == 0 goto label1;

        staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void selfInterrupt()>();

     label1:
        return;
    }

    public final void acquireInterruptibly(long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0;
        boolean $z0, $z1;
        java.lang.InterruptedException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.InterruptedException;

        specialinvoke $r1.<java.lang.InterruptedException: void <init>()>();

        throw $r1;

     label1:
        $z1 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryAcquire(long)>(l0);

        if $z1 != 0 goto label2;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void doAcquireInterruptibly(long)>(l0);

     label2:
        return;
    }

    final boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node, long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r3, $r4;
        long l0;
        boolean z0, z1, $z2, $z3;
        java.lang.Throwable r2, $r5;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        l0 := @parameter1: long;

        z0 = 0;

     label1:
        r3 = virtualinvoke r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node predecessor()>();

        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r3 != $r4 goto label4;

        $z3 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryAcquire(long)>(l0);

        if $z3 == 0 goto label4;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void setHead(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next> = null;

     label2:
        goto label3;

     label3:
        return z0;

     label4:
        $z2 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r3, r1);

        if $z2 == 0 goto label1;

        z1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean parkAndCheckInterrupt()>();

     label5:
        if z1 == 0 goto label1;

        z0 = 1;

        goto label1;

     label6:
        $r5 := @caughtexception;

        r2 = $r5;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public final void acquireShared(long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0, $l1;
        byte $b2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long tryAcquireShared(long)>(l0);

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label1;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void doAcquireShared(long)>(l0);

     label1:
        return;
    }

    public final void acquireSharedInterruptibly(long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0, $l1;
        boolean $z0;
        byte $b2;
        java.lang.InterruptedException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.InterruptedException;

        specialinvoke $r1.<java.lang.InterruptedException: void <init>()>();

        throw $r1;

     label1:
        $l1 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long tryAcquireShared(long)>(l0);

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label2;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void doAcquireSharedInterruptibly(long)>(l0);

     label2:
        return;
    }

    final boolean apparentlyFirstQueuedIsExclusive()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r2;
        boolean $z0;
        java.lang.Thread $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r1 == null goto label1;

        r2 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: boolean isShared()>();

        if $z0 != 0 goto label1;

        $r3 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    protected final boolean compareAndSetState(long, long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0, l1, $l2;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: sun.misc.Unsafe unsafe>;

        $l2 = <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long stateOffset>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l2, l0, l1);

        return $z0;
    }

    final long fullyRelease(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1;
        java.lang.Throwable r2, $r4;
        long l0;
        boolean z0;
        java.lang.IllegalMonitorStateException $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

     label1:
        l0 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long getState()>();

        z0 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean release(long)>(l0);

     label2:
        if z0 == 0 goto label4;

        goto label3;

     label3:
        return l0;

     label4:
        $r3 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r3.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r3;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus> = 1;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public final java.util.Collection getExclusiveQueuedThreads()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.ArrayList r1, $r4;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r2;
        java.lang.Thread r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

     label1:
        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: boolean isShared()>();

        if $z0 != 0 goto label2;

        r3 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        if r3 == null goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        r2 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        goto label1;

     label3:
        return r1;
    }

    public final java.lang.Thread getFirstQueuedThread()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node $r1, $r2;
        java.lang.Thread $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        $r1 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

        if $r2 != $r1 goto label1;

        return null;

     label1:
        $r3 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.lang.Thread fullGetFirstQueuedThread()>();

        return $r3;
    }

    public final int getQueueLength()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        int i0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1;
        java.lang.Thread $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        i0 = 0;

        r1 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

     label1:
        if r1 == null goto label3;

        $r2 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        if $r2 == null goto label2;

        i0 = i0 + 1;

     label2:
        r1 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        goto label1;

     label3:
        return i0;
    }

    public final java.util.Collection getQueuedThreads()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.ArrayList r1, $r4;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r2;
        java.lang.Thread r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

     label1:
        if r2 == null goto label3;

        r3 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        if r3 == null goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        r2 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        goto label1;

     label3:
        return r1;
    }

    public final java.util.Collection getSharedQueuedThreads()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.ArrayList r1, $r4;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r2;
        java.lang.Thread r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

     label1:
        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: boolean isShared()>();

        if $z0 == 0 goto label2;

        r3 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        if r3 == null goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        r2 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        goto label1;

     label3:
        return r1;
    }

    protected final long getState()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long $l0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        $l0 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long state>;

        return $l0;
    }

    public final int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject r1;
        boolean $z0;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not owner");

        throw $r2;

     label1:
        $i0 = virtualinvoke r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject: int getWaitQueueLength()>();

        return $i0;
    }

    public final java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject r1;
        boolean $z0;
        java.util.Collection $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject)>(r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not owner");

        throw $r3;

     label1:
        $r2 = virtualinvoke r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject: java.util.Collection getWaitingThreads()>();

        return $r2;
    }

    public final boolean hasContended()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        $r1 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean hasQueuedPredecessors()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r2, r3;
        java.lang.Thread $r4, $r5;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

        r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r2 == r1 goto label2;

        r3 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next>;

        if r3 == null goto label1;

        $r4 = r3.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r4 == $r5 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public final boolean hasQueuedThreads()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node $r1, $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        $r1 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

        if $r2 == $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not owner");

        throw $r2;

     label1:
        $z1 = virtualinvoke r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject: boolean hasWaiters()>();

        return $z1;
    }

    protected boolean isHeldExclusively()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    final boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, $r2, $r3;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        $i0 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if $i0 == -2 goto label1;

        $r2 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        if $r2 != null goto label2;

     label1:
        return 0;

     label2:
        $r3 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node next>;

        if $r3 == null goto label3;

        return 1;

     label3:
        $z0 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean findNodeFromTail(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        return $z0;
    }

    public final boolean isQueued(java.lang.Thread)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.lang.Thread r1, $r3;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r2;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.lang.Thread;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        r2 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node tail>;

     label2:
        if r2 == null goto label4;

        $r3 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        if $r3 != r1 goto label3;

        return 1;

     label3:
        r2 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node prev>;

        goto label2;

     label4:
        return 0;
    }

    public final boolean owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject;

        $z0 = virtualinvoke r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject: boolean isOwnedBy(java.util.concurrent.locks.AbstractQueuedLongSynchronizer)>(r0);

        return $z0;
    }

    public final boolean release(long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1;
        boolean $z0;
        int $i1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryRelease(long)>(l0);

        if $z0 == 0 goto label2;

        r1 = r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node head>;

        if r1 == null goto label1;

        $i1 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if $i1 == 0 goto label1;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void unparkSuccessor(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

     label1:
        return 1;

     label2:
        return 0;
    }

    public final boolean releaseShared(long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryReleaseShared(long)>(l0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void doReleaseShared()>();

        return 1;

     label1:
        return 0;
    }

    protected final void setState(long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long state> = l0;

        return;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0;
        java.lang.String r1, $r3, $r10;
        boolean $z0;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long getState()>();

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean hasQueuedThreads()>();

        if $z0 == 0 goto label2;

        r1 = "non";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[State = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("empty queue]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label2:
        r1 = "";

        goto label1;
    }

    final boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1;
        boolean z0, z1, $z2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        $z2 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,int,int)>(r1, -2, 0);

        if $z2 == 0 goto label2;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node enq(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        z1 = 1;

     label1:
        return z1;

     label2:
        z0 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        z1 = 0;

        if z0 != 0 goto label1;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label2;
    }

    final boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node r1, r2;
        int i0;
        boolean $z0, $z1;
        java.lang.Thread $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node;

        $z0 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,int,int)>(r1, -2, 0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node enq(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)>(r1);

        i0 = r2.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: int waitStatus>;

        if i0 > 0 goto label2;

        $z1 = staticinvoke <java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node,int,int)>(r2, i0, -1);

        if $z1 != 0 goto label3;

     label2:
        $r3 = r1.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node: java.lang.Thread thread>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r3);

     label3:
        return 1;
    }

    protected boolean tryAcquire(long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public final boolean tryAcquireNanos(long, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0, l1;
        boolean $z0, $z1, $z2;
        java.lang.InterruptedException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.InterruptedException;

        specialinvoke $r1.<java.lang.InterruptedException: void <init>()>();

        throw $r1;

     label1:
        $z1 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryAcquire(long)>(l0);

        if $z1 != 0 goto label2;

        $z2 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean doAcquireNanos(long,long)>(l0, l1);

        if $z2 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    protected long tryAcquireShared(long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public final boolean tryAcquireSharedNanos(long, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0, l1, $l2;
        boolean $z0, $z1;
        byte $b3;
        java.lang.InterruptedException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.InterruptedException;

        specialinvoke $r1.<java.lang.InterruptedException: void <init>()>();

        throw $r1;

     label1:
        $l2 = virtualinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long tryAcquireShared(long)>(l0);

        $b3 = $l2 cmp 0L;

        if $b3 >= 0 goto label2;

        $z1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean doAcquireSharedNanos(long,long)>(l0, l1);

        if $z1 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    protected boolean tryRelease(long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    protected boolean tryReleaseShared(long)
    {
        java.util.concurrent.locks.AbstractQueuedLongSynchronizer r0;
        long l0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedLongSynchronizer;

        l0 := @parameter0: long;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }
}
