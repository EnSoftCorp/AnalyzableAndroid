final class java.math.BigInt extends java.lang.Object
{
    transient long bignum;

    void <init>()
    {
        java.math.BigInt r0;

        r0 := @this: java.math.BigInt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.math.BigInt: long bignum> = 0L;

        return;
    }

    static java.math.BigInt addition(java.math.BigInt, java.math.BigInt)
    {
        java.math.BigInt r0, r1, r2;
        long $l0, $l1, $l2;

        r0 := @parameter0: java.math.BigInt;

        r1 := @parameter1: java.math.BigInt;

        r2 = staticinvoke <java.math.BigInt: java.math.BigInt newBigInt()>();

        $l2 = r2.<java.math.BigInt: long bignum>;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $l0 = r1.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_add(long,long,long)>($l2, $l1, $l0);

        return r2;
    }

    static java.math.BigInt bigExp(java.math.BigInt, java.math.BigInt)
    {
        java.math.BigInt r0, r1, r2;
        long $l0, $l1, $l2;

        r0 := @parameter0: java.math.BigInt;

        r1 := @parameter1: java.math.BigInt;

        r2 = staticinvoke <java.math.BigInt: java.math.BigInt newBigInt()>();

        $l2 = r2.<java.math.BigInt: long bignum>;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $l0 = r1.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_exp(long,long,long)>($l2, $l1, $l0);

        return r2;
    }

    static int 'cmp'(java.math.BigInt, java.math.BigInt)
    {
        java.math.BigInt r0, r1;
        long $l0, $l1;
        int $i2;

        r0 := @parameter0: java.math.BigInt;

        r1 := @parameter1: java.math.BigInt;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $l0 = r1.<java.math.BigInt: long bignum>;

        $i2 = staticinvoke <java.math.NativeBN: int BN_cmp(long,long)>($l1, $l0);

        return $i2;
    }

    static void division(java.math.BigInt, java.math.BigInt, java.math.BigInt, java.math.BigInt)
    {
        java.math.BigInt r0, r1, r2, r3;
        long l0, l1, $l2, $l3;

        r0 := @parameter0: java.math.BigInt;

        r1 := @parameter1: java.math.BigInt;

        r2 := @parameter2: java.math.BigInt;

        r3 := @parameter3: java.math.BigInt;

        if r2 == null goto label3;

        specialinvoke r2.<java.math.BigInt: void makeValid()>();

        l0 = r2.<java.math.BigInt: long bignum>;

     label1:
        if r3 == null goto label4;

        specialinvoke r3.<java.math.BigInt: void makeValid()>();

        l1 = r3.<java.math.BigInt: long bignum>;

     label2:
        $l3 = r0.<java.math.BigInt: long bignum>;

        $l2 = r1.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_div(long,long,long,long)>(l0, l1, $l3, $l2);

        return;

     label3:
        l0 = 0L;

        goto label1;

     label4:
        l1 = 0L;

        goto label2;
    }

    static java.math.BigInt exp(java.math.BigInt, int)
    {
        java.math.BigInt r0, r1, $r2, $r3;
        int i0;
        long $l1;

        r0 := @parameter0: java.math.BigInt;

        i0 := @parameter1: int;

        $r2 = new java.math.BigInt;

        specialinvoke $r2.<java.math.BigInt: void <init>()>();

        r1 = $r2;

        $l1 = (long) i0;

        virtualinvoke r1.<java.math.BigInt: void putLongInt(long)>($l1);

        $r3 = staticinvoke <java.math.BigInt: java.math.BigInt bigExp(java.math.BigInt,java.math.BigInt)>(r0, r1);

        return $r3;
    }

    static java.math.BigInt gcd(java.math.BigInt, java.math.BigInt)
    {
        java.math.BigInt r0, r1, r2;
        long $l0, $l1, $l2;

        r0 := @parameter0: java.math.BigInt;

        r1 := @parameter1: java.math.BigInt;

        r2 = staticinvoke <java.math.BigInt: java.math.BigInt newBigInt()>();

        $l2 = r2.<java.math.BigInt: long bignum>;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $l0 = r1.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_gcd(long,long,long)>($l2, $l1, $l0);

        return r2;
    }

    static java.math.BigInt generatePrimeDefault(int)
    {
        int i0;
        java.math.BigInt r0;
        long $l1;

        i0 := @parameter0: int;

        r0 = staticinvoke <java.math.BigInt: java.math.BigInt newBigInt()>();

        $l1 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_generate_prime_ex(long,int,boolean,long,long,long)>($l1, i0, 0, 0L, 0L, 0L);

        return r0;
    }

    private java.lang.NumberFormatException invalidBigInteger(java.lang.String)
    {
        java.math.BigInt r0;
        java.lang.String r1, $r6;
        java.lang.NumberFormatException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: java.math.BigInt;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.NumberFormatException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid BigInteger: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    private void makeValid()
    {
        java.math.BigInt r0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: java.math.BigInt;

        $l0 = r0.<java.math.BigInt: long bignum>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l2 = staticinvoke <java.math.NativeBN: long BN_new()>();

        r0.<java.math.BigInt: long bignum> = $l2;

     label1:
        return;
    }

    static java.math.BigInt modExp(java.math.BigInt, java.math.BigInt, java.math.BigInt)
    {
        java.math.BigInt r0, r1, r2, r3;
        long $l0, $l1, $l2, $l3;

        r0 := @parameter0: java.math.BigInt;

        r1 := @parameter1: java.math.BigInt;

        r2 := @parameter2: java.math.BigInt;

        r3 = staticinvoke <java.math.BigInt: java.math.BigInt newBigInt()>();

        $l3 = r3.<java.math.BigInt: long bignum>;

        $l2 = r0.<java.math.BigInt: long bignum>;

        $l1 = r1.<java.math.BigInt: long bignum>;

        $l0 = r2.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_mod_exp(long,long,long,long)>($l3, $l2, $l1, $l0);

        return r3;
    }

    static java.math.BigInt modInverse(java.math.BigInt, java.math.BigInt)
    {
        java.math.BigInt r0, r1, r2;
        long $l0, $l1, $l2;

        r0 := @parameter0: java.math.BigInt;

        r1 := @parameter1: java.math.BigInt;

        r2 = staticinvoke <java.math.BigInt: java.math.BigInt newBigInt()>();

        $l2 = r2.<java.math.BigInt: long bignum>;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $l0 = r1.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_mod_inverse(long,long,long)>($l2, $l1, $l0);

        return r2;
    }

    static java.math.BigInt modulus(java.math.BigInt, java.math.BigInt)
    {
        java.math.BigInt r0, r1, r2;
        long $l0, $l1, $l2;

        r0 := @parameter0: java.math.BigInt;

        r1 := @parameter1: java.math.BigInt;

        r2 = staticinvoke <java.math.BigInt: java.math.BigInt newBigInt()>();

        $l2 = r2.<java.math.BigInt: long bignum>;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $l0 = r1.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_nnmod(long,long,long)>($l2, $l1, $l0);

        return r2;
    }

    private static java.math.BigInt newBigInt()
    {
        java.math.BigInt r0, $r1;
        long $l0;

        $r1 = new java.math.BigInt;

        specialinvoke $r1.<java.math.BigInt: void <init>()>();

        r0 = $r1;

        $l0 = staticinvoke <java.math.NativeBN: long BN_new()>();

        r0.<java.math.BigInt: long bignum> = $l0;

        return r0;
    }

    static java.math.BigInt product(java.math.BigInt, java.math.BigInt)
    {
        java.math.BigInt r0, r1, r2;
        long $l0, $l1, $l2;

        r0 := @parameter0: java.math.BigInt;

        r1 := @parameter1: java.math.BigInt;

        r2 = staticinvoke <java.math.BigInt: java.math.BigInt newBigInt()>();

        $l2 = r2.<java.math.BigInt: long bignum>;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $l0 = r1.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_mul(long,long,long)>($l2, $l1, $l0);

        return r2;
    }

    static int remainderByPositiveInt(java.math.BigInt, int)
    {
        java.math.BigInt r0;
        int i0, $i2;
        long $l1;

        r0 := @parameter0: java.math.BigInt;

        i0 := @parameter1: int;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $i2 = staticinvoke <java.math.NativeBN: int BN_mod_word(long,int)>($l1, i0);

        return $i2;
    }

    static java.math.BigInt shift(java.math.BigInt, int)
    {
        java.math.BigInt r0, r1;
        int i0;
        long $l1, $l2;

        r0 := @parameter0: java.math.BigInt;

        i0 := @parameter1: int;

        r1 = staticinvoke <java.math.BigInt: java.math.BigInt newBigInt()>();

        $l2 = r1.<java.math.BigInt: long bignum>;

        $l1 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_shift(long,long,int)>($l2, $l1, i0);

        return r1;
    }

    static java.math.BigInt subtraction(java.math.BigInt, java.math.BigInt)
    {
        java.math.BigInt r0, r1, r2;
        long $l0, $l1, $l2;

        r0 := @parameter0: java.math.BigInt;

        r1 := @parameter1: java.math.BigInt;

        r2 = staticinvoke <java.math.BigInt: java.math.BigInt newBigInt()>();

        $l2 = r2.<java.math.BigInt: long bignum>;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $l0 = r1.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_sub(long,long,long)>($l2, $l1, $l0);

        return r2;
    }

    private static java.lang.String toAscii(java.lang.String, int)
    {
        java.lang.String r0, $r3;
        int i0, i1, i2, i4, $i5;
        java.lang.StringBuilder r1, $r2;
        char c3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(i1);

        r1 = $r2;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        i4 = staticinvoke <java.lang.Character: int digit(char,int)>(c3, i0);

        if i4 < 0 goto label2;

        if i4 > 9 goto label2;

        $i5 = i4 + 48;

        c3 = (char) $i5;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    void add(java.math.BigInt)
    {
        java.math.BigInt r0, r1;
        long $l0, $l1, $l2;

        r0 := @this: java.math.BigInt;

        r1 := @parameter0: java.math.BigInt;

        $l2 = r0.<java.math.BigInt: long bignum>;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $l0 = r1.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_add(long,long,long)>($l2, $l1, $l0);

        return;
    }

    void addPositiveInt(int)
    {
        java.math.BigInt r0;
        int i0;
        long $l1;

        r0 := @this: java.math.BigInt;

        i0 := @parameter0: int;

        $l1 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_add_word(long,int)>($l1, i0);

        return;
    }

    byte[] bigEndianMagnitude()
    {
        java.math.BigInt r0;
        long $l0;
        byte[] $r1;

        r0 := @this: java.math.BigInt;

        $l0 = r0.<java.math.BigInt: long bignum>;

        $r1 = staticinvoke <java.math.NativeBN: byte[] BN_bn2bin(long)>($l0);

        return $r1;
    }

    int bitLength()
    {
        java.math.BigInt r0;
        long $l0;
        int $i1;

        r0 := @this: java.math.BigInt;

        $l0 = r0.<java.math.BigInt: long bignum>;

        $i1 = staticinvoke <java.math.NativeBN: int bitLength(long)>($l0);

        return $i1;
    }

    java.lang.String checkString(java.lang.String, int)
    {
        java.math.BigInt r0;
        java.lang.String r1;
        int i0, i1, i2, $i5, $i6;
        boolean z0;
        char c3, c4;
        java.lang.NumberFormatException $r2, $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.math.BigInt;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("s == null");

        throw $r4;

     label1:
        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = 0;

        if i1 <= 0 goto label2;

        c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if c4 != 43 goto label3;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        i1 = i1 + -1;

     label2:
        $i5 = i1 - i2;

        if $i5 != 0 goto label4;

        $r3 = specialinvoke r0.<java.math.BigInt: java.lang.NumberFormatException invalidBigInteger(java.lang.String)>(r1);

        throw $r3;

     label3:
        i2 = 0;

        if c4 != 45 goto label2;

        i2 = 1;

        goto label2;

     label4:
        z0 = 0;

     label5:
        if i2 >= i1 goto label8;

        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i6 = staticinvoke <java.lang.Character: int digit(char,int)>(c3, i0);

        if $i6 != -1 goto label6;

        $r2 = specialinvoke r0.<java.math.BigInt: java.lang.NumberFormatException invalidBigInteger(java.lang.String)>(r1);

        throw $r2;

     label6:
        if c3 <= 128 goto label7;

        z0 = 1;

     label7:
        i2 = i2 + 1;

        goto label5;

     label8:
        if z0 == 0 goto label9;

        r1 = staticinvoke <java.math.BigInt: java.lang.String toAscii(java.lang.String,int)>(r1, i0);

     label9:
        return r1;
    }

    java.math.BigInt copy()
    {
        java.math.BigInt r0, r1, $r2;

        r0 := @this: java.math.BigInt;

        $r2 = new java.math.BigInt;

        specialinvoke $r2.<java.math.BigInt: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<java.math.BigInt: void putCopy(java.math.BigInt)>(r0);

        return r1;
    }

    java.lang.String decString()
    {
        java.math.BigInt r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: java.math.BigInt;

        $l0 = r0.<java.math.BigInt: long bignum>;

        $r1 = staticinvoke <java.math.NativeBN: java.lang.String BN_bn2dec(long)>($l0);

        return $r1;
    }

    protected void finalize() throws java.lang.Throwable
    {
        java.math.BigInt r0;
        java.lang.Throwable r1, $r2;
        long $l0, $l2;
        byte $b1;

        r0 := @this: java.math.BigInt;

     label1:
        $l0 = r0.<java.math.BigInt: long bignum>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_free(long)>($l2);

        r0.<java.math.BigInt: long bignum> = 0L;

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    long getNativeBIGNUM()
    {
        java.math.BigInt r0;
        long $l0;

        r0 := @this: java.math.BigInt;

        $l0 = r0.<java.math.BigInt: long bignum>;

        return $l0;
    }

    java.lang.String hexString()
    {
        java.math.BigInt r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: java.math.BigInt;

        $l0 = r0.<java.math.BigInt: long bignum>;

        $r1 = staticinvoke <java.math.NativeBN: java.lang.String BN_bn2hex(long)>($l0);

        return $r1;
    }

    boolean isBitSet(int)
    {
        java.math.BigInt r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: java.math.BigInt;

        i0 := @parameter0: int;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $z0 = staticinvoke <java.math.NativeBN: boolean BN_is_bit_set(long,int)>($l1, i0);

        return $z0;
    }

    boolean isPrime(int)
    {
        java.math.BigInt r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: java.math.BigInt;

        i0 := @parameter0: int;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $z0 = staticinvoke <java.math.NativeBN: boolean BN_is_prime_ex(long,int,long)>($l1, i0, 0L);

        return $z0;
    }

    int[] littleEndianIntsMagnitude()
    {
        java.math.BigInt r0;
        long $l0;
        int[] $r1;

        r0 := @this: java.math.BigInt;

        $l0 = r0.<java.math.BigInt: long bignum>;

        $r1 = staticinvoke <java.math.NativeBN: int[] bn2litEndInts(long)>($l0);

        return $r1;
    }

    long longInt()
    {
        java.math.BigInt r0;
        long $l0, $l1;

        r0 := @this: java.math.BigInt;

        $l0 = r0.<java.math.BigInt: long bignum>;

        $l1 = staticinvoke <java.math.NativeBN: long longInt(long)>($l0);

        return $l1;
    }

    void multiplyByPositiveInt(int)
    {
        java.math.BigInt r0;
        int i0;
        long $l1;

        r0 := @this: java.math.BigInt;

        i0 := @parameter0: int;

        $l1 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_mul_word(long,int)>($l1, i0);

        return;
    }

    void putBigEndian(byte[], boolean)
    {
        java.math.BigInt r0;
        byte[] r1;
        boolean z0;
        long $l0;
        int $i1;

        r0 := @this: java.math.BigInt;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.math.BigInt: void makeValid()>();

        $i1 = lengthof r1;

        $l0 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_bin2bn(byte[],int,boolean,long)>(r1, $i1, z0, $l0);

        return;
    }

    void putBigEndianTwosComplement(byte[])
    {
        java.math.BigInt r0;
        byte[] r1;
        long $l0;
        int $i1;

        r0 := @this: java.math.BigInt;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.math.BigInt: void makeValid()>();

        $i1 = lengthof r1;

        $l0 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void twosComp2bn(byte[],int,long)>(r1, $i1, $l0);

        return;
    }

    void putCopy(java.math.BigInt)
    {
        java.math.BigInt r0, r1;
        long $l0, $l1;

        r0 := @this: java.math.BigInt;

        r1 := @parameter0: java.math.BigInt;

        specialinvoke r0.<java.math.BigInt: void makeValid()>();

        $l1 = r0.<java.math.BigInt: long bignum>;

        $l0 = r1.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_copy(long,long)>($l1, $l0);

        return;
    }

    void putDecString(java.lang.String)
    {
        java.math.BigInt r0;
        java.lang.String r1, r2;
        long $l0;
        int $i1, $i2;
        java.lang.NumberFormatException $r3;

        r0 := @this: java.math.BigInt;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<java.math.BigInt: java.lang.String checkString(java.lang.String,int)>(r1, 10);

        specialinvoke r0.<java.math.BigInt: void makeValid()>();

        $l0 = r0.<java.math.BigInt: long bignum>;

        $i1 = staticinvoke <java.math.NativeBN: int BN_dec2bn(long,java.lang.String)>($l0, r2);

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label1;

        $r3 = specialinvoke r0.<java.math.BigInt: java.lang.NumberFormatException invalidBigInteger(java.lang.String)>(r1);

        throw $r3;

     label1:
        return;
    }

    void putHexString(java.lang.String)
    {
        java.math.BigInt r0;
        java.lang.String r1, r2;
        long $l0;
        int $i1, $i2;
        java.lang.NumberFormatException $r3;

        r0 := @this: java.math.BigInt;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<java.math.BigInt: java.lang.String checkString(java.lang.String,int)>(r1, 16);

        specialinvoke r0.<java.math.BigInt: void makeValid()>();

        $l0 = r0.<java.math.BigInt: long bignum>;

        $i1 = staticinvoke <java.math.NativeBN: int BN_hex2bn(long,java.lang.String)>($l0, r2);

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label1;

        $r3 = specialinvoke r0.<java.math.BigInt: java.lang.NumberFormatException invalidBigInteger(java.lang.String)>(r1);

        throw $r3;

     label1:
        return;
    }

    void putLittleEndianInts(int[], boolean)
    {
        java.math.BigInt r0;
        int[] r1;
        boolean z0;
        long $l0;
        int $i1;

        r0 := @this: java.math.BigInt;

        r1 := @parameter0: int[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.math.BigInt: void makeValid()>();

        $i1 = lengthof r1;

        $l0 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void litEndInts2bn(int[],int,boolean,long)>(r1, $i1, z0, $l0);

        return;
    }

    void putLongInt(long)
    {
        java.math.BigInt r0;
        long l0, $l1;

        r0 := @this: java.math.BigInt;

        l0 := @parameter0: long;

        specialinvoke r0.<java.math.BigInt: void makeValid()>();

        $l1 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void putLongInt(long,long)>($l1, l0);

        return;
    }

    void putULongInt(long, boolean)
    {
        java.math.BigInt r0;
        long l0, $l1;
        boolean z0;

        r0 := @this: java.math.BigInt;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.math.BigInt: void makeValid()>();

        $l1 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void putULongInt(long,long,boolean)>($l1, l0, z0);

        return;
    }

    void setSign(int)
    {
        java.math.BigInt r0;
        int i0;
        long $l1, $l2;

        r0 := @this: java.math.BigInt;

        i0 := @parameter0: int;

        if i0 <= 0 goto label2;

        $l2 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_set_negative(long,int)>($l2, 0);

     label1:
        return;

     label2:
        if i0 >= 0 goto label1;

        $l1 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_set_negative(long,int)>($l1, 1);

        return;
    }

    void shift(int)
    {
        java.math.BigInt r0;
        int i0;
        long $l1, $l2;

        r0 := @this: java.math.BigInt;

        i0 := @parameter0: int;

        $l2 = r0.<java.math.BigInt: long bignum>;

        $l1 = r0.<java.math.BigInt: long bignum>;

        staticinvoke <java.math.NativeBN: void BN_shift(long,long,int)>($l2, $l1, i0);

        return;
    }

    int sign()
    {
        java.math.BigInt r0;
        long $l0;
        int $i1;

        r0 := @this: java.math.BigInt;

        $l0 = r0.<java.math.BigInt: long bignum>;

        $i1 = staticinvoke <java.math.NativeBN: int sign(long)>($l0);

        return $i1;
    }

    public java.lang.String toString()
    {
        java.math.BigInt r0;
        java.lang.String $r1;

        r0 := @this: java.math.BigInt;

        $r1 = virtualinvoke r0.<java.math.BigInt: java.lang.String decString()>();

        return $r1;
    }

    boolean twosCompFitsIntoBytes(int)
    {
        java.math.BigInt r0;
        int i0, $i2, $i3, $i4;
        long $l1;

        r0 := @this: java.math.BigInt;

        i0 := @parameter0: int;

        $l1 = r0.<java.math.BigInt: long bignum>;

        $i2 = staticinvoke <java.math.NativeBN: int bitLength(long)>($l1);

        $i3 = 7 + $i2;

        $i4 = $i3 / 8;

        if $i4 > i0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
