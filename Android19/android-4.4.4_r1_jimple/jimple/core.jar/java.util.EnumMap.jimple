public class java.util.EnumMap extends java.util.AbstractMap implements java.io.Serializable, java.lang.Cloneable, java.util.Map
{
    private static final long serialVersionUID;
    private transient java.util.EnumMap$EnumMapEntrySet entrySet;
    transient int enumSize;
    transient boolean[] hasMapping;
    private java.lang.Class keyType;
    transient java.lang.Enum[] keys;
    private transient int mappingsCount;
    transient java.lang.Object[] values;

    public void <init>(java.lang.Class)
    {
        java.util.EnumMap r0;
        java.lang.Class r1;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<java.util.EnumMap: java.util.EnumMap$EnumMapEntrySet entrySet> = null;

        specialinvoke r0.<java.util.EnumMap: void initialization(java.lang.Class)>(r1);

        return;
    }

    public void <init>(java.util.EnumMap)
    {
        java.util.EnumMap r0, r1;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.util.EnumMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<java.util.EnumMap: java.util.EnumMap$EnumMapEntrySet entrySet> = null;

        specialinvoke r0.<java.util.EnumMap: void initialization(java.util.EnumMap)>(r1);

        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.EnumMap r0, $r9;
        java.util.Map r1;
        java.lang.Class r2, $r7;
        boolean $z0, $z1, $z2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.lang.Enum $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<java.util.EnumMap: java.util.EnumMap$EnumMapEntrySet entrySet> = null;

        $z0 = r1 instanceof java.util.EnumMap;

        if $z0 == 0 goto label1;

        $r9 = (java.util.EnumMap) r1;

        specialinvoke r0.<java.util.EnumMap: void initialization(java.util.EnumMap)>($r9);

        return;

     label1:
        $z1 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("map is empty");

        throw $r8;

     label2:
        $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Enum) $r5;

        r2 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke r2.<java.lang.Class: boolean isEnum()>();

        if $z2 == 0 goto label4;

        specialinvoke r0.<java.util.EnumMap: void initialization(java.lang.Class)>(r2);

     label3:
        specialinvoke r0.<java.util.EnumMap: void putAllImpl(java.util.Map)>(r1);

        return;

     label4:
        $r7 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        specialinvoke r0.<java.util.EnumMap: void initialization(java.lang.Class)>($r7);

        goto label3;
    }

    private void initialization(java.lang.Class)
    {
        java.util.EnumMap r0;
        java.lang.Class r1, $r2;
        java.lang.Enum[] $r3, $r4;
        int $i0, $i1, $i2;
        java.lang.Object[] $r5;
        boolean[] $r6;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.lang.Class;

        r0.<java.util.EnumMap: java.lang.Class keyType> = r1;

        $r2 = r0.<java.util.EnumMap: java.lang.Class keyType>;

        $r3 = staticinvoke <java.lang.Enum: java.lang.Enum[] getSharedConstants(java.lang.Class)>($r2);

        r0.<java.util.EnumMap: java.lang.Enum[] keys> = $r3;

        $r4 = r0.<java.util.EnumMap: java.lang.Enum[] keys>;

        $i0 = lengthof $r4;

        r0.<java.util.EnumMap: int enumSize> = $i0;

        $i1 = r0.<java.util.EnumMap: int enumSize>;

        $r5 = newarray (java.lang.Object)[$i1];

        r0.<java.util.EnumMap: java.lang.Object[] values> = $r5;

        $i2 = r0.<java.util.EnumMap: int enumSize>;

        $r6 = newarray (boolean)[$i2];

        r0.<java.util.EnumMap: boolean[] hasMapping> = $r6;

        return;
    }

    private void initialization(java.util.EnumMap)
    {
        java.util.EnumMap r0, r1;
        java.lang.Class $r2;
        java.lang.Enum[] $r3;
        int $i0, $i1;
        java.lang.Object[] $r4, $r6;
        java.lang.Object $r5, $r8;
        boolean[] $r7, $r9;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.util.EnumMap;

        $r2 = r1.<java.util.EnumMap: java.lang.Class keyType>;

        r0.<java.util.EnumMap: java.lang.Class keyType> = $r2;

        $r3 = r1.<java.util.EnumMap: java.lang.Enum[] keys>;

        r0.<java.util.EnumMap: java.lang.Enum[] keys> = $r3;

        $i0 = r1.<java.util.EnumMap: int enumSize>;

        r0.<java.util.EnumMap: int enumSize> = $i0;

        $r4 = r1.<java.util.EnumMap: java.lang.Object[] values>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (java.lang.Object[]) $r5;

        r0.<java.util.EnumMap: java.lang.Object[] values> = $r6;

        $r7 = r1.<java.util.EnumMap: boolean[] hasMapping>;

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (boolean[]) $r8;

        r0.<java.util.EnumMap: boolean[] hasMapping> = $r9;

        $i1 = r1.<java.util.EnumMap: int mappingsCount>;

        r0.<java.util.EnumMap: int mappingsCount> = $i1;

        return;
    }

    private boolean isValidKeyType(java.lang.Object)
    {
        java.util.EnumMap r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = r0.<java.util.EnumMap: java.lang.Class keyType>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void putAllImpl(java.util.Map)
    {
        java.util.EnumMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r8;
        java.lang.Enum $r7;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.util.Map;

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.Enum) $r6;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        specialinvoke r0.<java.util.EnumMap: java.lang.Object putImpl(java.lang.Enum,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        return;
    }

    private java.lang.Object putImpl(java.lang.Enum, java.lang.Object)
    {
        java.util.EnumMap r0;
        java.lang.Enum r1;
        java.lang.Object r2, r3;
        int i0, $i1, $i2;
        java.lang.Class $r4;
        boolean[] $r6, $r9;
        boolean $z0;
        java.lang.Object[] $r7, $r8;
        java.lang.NullPointerException $r10;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.lang.Enum;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r10;

     label1:
        $r4 = r0.<java.util.EnumMap: java.lang.Class keyType>;

        virtualinvoke $r4.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r1);

        i0 = virtualinvoke r1.<java.lang.Enum: int ordinal()>();

        $r6 = r0.<java.util.EnumMap: boolean[] hasMapping>;

        $z0 = $r6[i0];

        if $z0 != 0 goto label2;

        $r9 = r0.<java.util.EnumMap: boolean[] hasMapping>;

        $r9[i0] = 1;

        $i1 = r0.<java.util.EnumMap: int mappingsCount>;

        $i2 = 1 + $i1;

        r0.<java.util.EnumMap: int mappingsCount> = $i2;

     label2:
        $r7 = r0.<java.util.EnumMap: java.lang.Object[] values>;

        r3 = $r7[i0];

        $r8 = r0.<java.util.EnumMap: java.lang.Object[] values>;

        $r8[i0] = r2;

        return r3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.EnumMap r0;
        java.io.ObjectInputStream r1;
        int i0;
        java.lang.Class $r2;
        java.lang.Object $r3, $r5;
        java.lang.Enum $r4;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = r0.<java.util.EnumMap: java.lang.Class keyType>;

        specialinvoke r0.<java.util.EnumMap: void initialization(java.lang.Class)>($r2);

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

     label1:
        if i0 <= 0 goto label2;

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = (java.lang.Enum) $r3;

        $r5 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        specialinvoke r0.<java.util.EnumMap: java.lang.Object putImpl(java.lang.Enum,java.lang.Object)>($r4, $r5);

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.EnumMap r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        int $i0;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $i0 = r0.<java.util.EnumMap: int mappingsCount>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r4 = virtualinvoke r0.<java.util.EnumMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        goto label1;

     label2:
        return;
    }

    public void clear()
    {
        java.util.EnumMap r0;
        java.lang.Object[] $r1;
        boolean[] $r2;

        r0 := @this: java.util.EnumMap;

        $r1 = r0.<java.util.EnumMap: java.lang.Object[] values>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null);

        $r2 = r0.<java.util.EnumMap: boolean[] hasMapping>;

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>($r2, 0);

        r0.<java.util.EnumMap: int mappingsCount> = 0;

        return;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.util.EnumMap r0, $r1;

        r0 := @this: java.util.EnumMap;

        $r1 = virtualinvoke r0.<java.util.EnumMap: java.util.EnumMap clone()>();

        return $r1;
    }

    public java.util.EnumMap clone()
    {
        java.util.EnumMap r0, r2;
        java.lang.CloneNotSupportedException r1, $r4;
        java.lang.Object $r3;
        java.lang.AssertionError $r5;

        r0 := @this: java.util.EnumMap;

     label1:
        $r3 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();

        r2 = (java.util.EnumMap) $r3;

        specialinvoke r2.<java.util.EnumMap: void initialization(java.util.EnumMap)>(r0);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r5;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.EnumMap r0;
        java.lang.Object r1;
        int i0;
        boolean $z0, $z1;
        java.lang.Enum $r2;
        boolean[] $r3;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.EnumMap: boolean isValidKeyType(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Enum) r1;

        i0 = virtualinvoke $r2.<java.lang.Enum: int ordinal()>();

        $r3 = r0.<java.util.EnumMap: boolean[] hasMapping>;

        $z1 = $r3[i0];

        return $z1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.EnumMap r0;
        java.lang.Object r1, $r4, $r7;
        int i0, i1, $i2, $i3;
        boolean[] $r2, $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r3, $r6;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label4;

        i1 = 0;

     label1:
        $i3 = r0.<java.util.EnumMap: int enumSize>;

        if i1 >= $i3 goto label7;

        $r5 = r0.<java.util.EnumMap: boolean[] hasMapping>;

        $z2 = $r5[i1];

        if $z2 == 0 goto label3;

        $r6 = r0.<java.util.EnumMap: java.lang.Object[] values>;

        $r7 = $r6[i1];

        if $r7 != null goto label3;

     label2:
        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        i0 = 0;

     label5:
        $i2 = r0.<java.util.EnumMap: int enumSize>;

        if i0 >= $i2 goto label7;

        $r2 = r0.<java.util.EnumMap: boolean[] hasMapping>;

        $z0 = $r2[i0];

        if $z0 == 0 goto label6;

        $r3 = r0.<java.util.EnumMap: java.lang.Object[] values>;

        $r4 = $r3[i0];

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label2;

     label6:
        i0 = i0 + 1;

        goto label5;

     label7:
        return 0;
    }

    public java.util.Set entrySet()
    {
        java.util.EnumMap r0;
        java.util.EnumMap$EnumMapEntrySet $r1, $r2, $r3;

        r0 := @this: java.util.EnumMap;

        $r1 = r0.<java.util.EnumMap: java.util.EnumMap$EnumMapEntrySet entrySet>;

        if $r1 != null goto label1;

        $r3 = new java.util.EnumMap$EnumMapEntrySet;

        specialinvoke $r3.<java.util.EnumMap$EnumMapEntrySet: void <init>(java.util.EnumMap)>(r0);

        r0.<java.util.EnumMap: java.util.EnumMap$EnumMapEntrySet entrySet> = $r3;

     label1:
        $r2 = r0.<java.util.EnumMap: java.util.EnumMap$EnumMapEntrySet entrySet>;

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.EnumMap r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r3, $r4;
        int $i0, $i1;
        boolean[] $r5, $r6;
        java.lang.Object[] $r7, $r8;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof java.util.EnumMap;

        if $z0 != 0 goto label3;

        $z3 = specialinvoke r0.<java.util.AbstractMap: boolean equals(java.lang.Object)>(r1);

        return $z3;

     label3:
        r2 = (java.util.EnumMap) r1;

        $r4 = r0.<java.util.EnumMap: java.lang.Class keyType>;

        $r3 = r2.<java.util.EnumMap: java.lang.Class keyType>;

        if $r4 != $r3 goto label4;

        $i0 = virtualinvoke r0.<java.util.EnumMap: int size()>();

        $i1 = virtualinvoke r2.<java.util.EnumMap: int size()>();

        if $i0 == $i1 goto label5;

     label4:
        return 0;

     label5:
        $r6 = r0.<java.util.EnumMap: boolean[] hasMapping>;

        $r5 = r2.<java.util.EnumMap: boolean[] hasMapping>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r6, $r5);

        if $z1 == 0 goto label6;

        $r8 = r0.<java.util.EnumMap: java.lang.Object[] values>;

        $r7 = r2.<java.util.EnumMap: java.lang.Object[] values>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r7);

        if $z2 != 0 goto label1;

     label6:
        return 0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.EnumMap r0;
        java.lang.Object r1, $r4;
        int i0;
        boolean $z0;
        java.lang.Enum $r2;
        java.lang.Object[] $r3;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.EnumMap: boolean isValidKeyType(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = (java.lang.Enum) r1;

        i0 = virtualinvoke $r2.<java.lang.Enum: int ordinal()>();

        $r3 = r0.<java.util.EnumMap: java.lang.Object[] values>;

        $r4 = $r3[i0];

        return $r4;
    }

    public java.util.Set keySet()
    {
        java.util.EnumMap r0;
        java.util.Set $r1, $r2;
        java.util.EnumMap$EnumMapKeySet $r3;

        r0 := @this: java.util.EnumMap;

        $r1 = r0.<java.util.EnumMap: java.util.Set keySet>;

        if $r1 != null goto label1;

        $r3 = new java.util.EnumMap$EnumMapKeySet;

        specialinvoke $r3.<java.util.EnumMap$EnumMapKeySet: void <init>(java.util.EnumMap)>(r0);

        r0.<java.util.EnumMap: java.util.Set keySet> = $r3;

     label1:
        $r2 = r0.<java.util.EnumMap: java.util.Set keySet>;

        return $r2;
    }

    public java.lang.Object put(java.lang.Enum, java.lang.Object)
    {
        java.util.EnumMap r0;
        java.lang.Enum r1;
        java.lang.Object r2, $r3;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.lang.Enum;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<java.util.EnumMap: java.lang.Object putImpl(java.lang.Enum,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.EnumMap r0;
        java.lang.Object r1, r2, $r4;
        java.lang.Enum $r3;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Enum) r1;

        $r4 = virtualinvoke r0.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>($r3, r2);

        return $r4;
    }

    public void putAll(java.util.Map)
    {
        java.util.EnumMap r0;
        java.util.Map r1;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.EnumMap: void putAllImpl(java.util.Map)>(r1);

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.EnumMap r0;
        java.lang.Object r1, r2;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.Enum $r3;
        boolean[] $r4, $r7;
        java.lang.Object[] $r5, $r6;

        r0 := @this: java.util.EnumMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.EnumMap: boolean isValidKeyType(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = (java.lang.Enum) r1;

        i0 = virtualinvoke $r3.<java.lang.Enum: int ordinal()>();

        $r4 = r0.<java.util.EnumMap: boolean[] hasMapping>;

        $z1 = $r4[i0];

        if $z1 == 0 goto label2;

        $r7 = r0.<java.util.EnumMap: boolean[] hasMapping>;

        $r7[i0] = 0;

        $i1 = r0.<java.util.EnumMap: int mappingsCount>;

        $i2 = -1 + $i1;

        r0.<java.util.EnumMap: int mappingsCount> = $i2;

     label2:
        $r5 = r0.<java.util.EnumMap: java.lang.Object[] values>;

        r2 = $r5[i0];

        $r6 = r0.<java.util.EnumMap: java.lang.Object[] values>;

        $r6[i0] = null;

        return r2;
    }

    public int size()
    {
        java.util.EnumMap r0;
        int $i0;

        r0 := @this: java.util.EnumMap;

        $i0 = r0.<java.util.EnumMap: int mappingsCount>;

        return $i0;
    }

    public java.util.Collection values()
    {
        java.util.EnumMap r0;
        java.util.Collection $r1, $r2;
        java.util.EnumMap$EnumMapValueCollection $r3;

        r0 := @this: java.util.EnumMap;

        $r1 = r0.<java.util.EnumMap: java.util.Collection valuesCollection>;

        if $r1 != null goto label1;

        $r3 = new java.util.EnumMap$EnumMapValueCollection;

        specialinvoke $r3.<java.util.EnumMap$EnumMapValueCollection: void <init>(java.util.EnumMap)>(r0);

        r0.<java.util.EnumMap: java.util.Collection valuesCollection> = $r3;

     label1:
        $r2 = r0.<java.util.EnumMap: java.util.Collection valuesCollection>;

        return $r2;
    }

    public static void <clinit>()
    {
        <java.util.EnumMap: long serialVersionUID> = 458661240069192865L;

        return;
    }
}
