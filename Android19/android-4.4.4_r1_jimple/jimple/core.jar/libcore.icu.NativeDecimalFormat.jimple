public final class libcore.icu.NativeDecimalFormat extends java.lang.Object implements java.lang.Cloneable
{
    private static final int UNUM_CURRENCY_CODE;
    private static final int UNUM_CURRENCY_SYMBOL;
    private static final int UNUM_DECIMAL_ALWAYS_SHOWN;
    private static final int UNUM_DECIMAL_SEPARATOR_SYMBOL;
    private static final int UNUM_DEFAULT_RULESET;
    private static final int UNUM_DIGIT_SYMBOL;
    private static final int UNUM_EXPONENTIAL_SYMBOL;
    private static final int UNUM_FORMAT_SYMBOL_COUNT;
    private static final int UNUM_FORMAT_WIDTH;
    private static final int UNUM_FRACTION_DIGITS;
    private static final int UNUM_GROUPING_SEPARATOR_SYMBOL;
    private static final int UNUM_GROUPING_SIZE;
    private static final int UNUM_GROUPING_USED;
    private static final int UNUM_INFINITY_SYMBOL;
    private static final int UNUM_INTEGER_DIGITS;
    private static final int UNUM_INTL_CURRENCY_SYMBOL;
    private static final int UNUM_LENIENT_PARSE;
    private static final int UNUM_MAX_FRACTION_DIGITS;
    private static final int UNUM_MAX_INTEGER_DIGITS;
    private static final int UNUM_MAX_SIGNIFICANT_DIGITS;
    private static final int UNUM_MINUS_SIGN_SYMBOL;
    private static final int UNUM_MIN_FRACTION_DIGITS;
    private static final int UNUM_MIN_INTEGER_DIGITS;
    private static final int UNUM_MIN_SIGNIFICANT_DIGITS;
    private static final int UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL;
    private static final int UNUM_MONETARY_SEPARATOR_SYMBOL;
    private static final int UNUM_MULTIPLIER;
    private static final int UNUM_NAN_SYMBOL;
    private static final int UNUM_NEGATIVE_PREFIX;
    private static final int UNUM_NEGATIVE_SUFFIX;
    private static final int UNUM_PADDING_CHARACTER;
    private static final int UNUM_PADDING_POSITION;
    private static final int UNUM_PAD_ESCAPE_SYMBOL;
    private static final int UNUM_PARSE_INT_ONLY;
    private static final int UNUM_PATTERN_SEPARATOR_SYMBOL;
    private static final int UNUM_PERCENT_SYMBOL;
    private static final int UNUM_PERMILL_SYMBOL;
    private static final int UNUM_PLUS_SIGN_SYMBOL;
    private static final int UNUM_POSITIVE_PREFIX;
    private static final int UNUM_POSITIVE_SUFFIX;
    private static final int UNUM_PUBLIC_RULESETS;
    private static final int UNUM_ROUNDING_INCREMENT;
    private static final int UNUM_ROUNDING_MODE;
    private static final int UNUM_SECONDARY_GROUPING_SIZE;
    private static final int UNUM_SIGNIFICANT_DIGITS_USED;
    private static final int UNUM_SIGNIFICANT_DIGIT_SYMBOL;
    private static final int UNUM_ZERO_DIGIT_SYMBOL;
    private long address;
    private java.lang.String lastPattern;
    private java.math.BigDecimal multiplierBigDecimal;
    private boolean negPrefNull;
    private boolean negSuffNull;
    private transient boolean parseBigDecimal;
    private boolean posPrefNull;
    private boolean posSuffNull;

    public void <init>(java.lang.String, java.text.DecimalFormatSymbols)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1, $r5, $r6, $r7, $r8, $r9, $r15, $r19;
        java.text.DecimalFormatSymbols r2;
        java.lang.RuntimeException r3, $r11;
        java.lang.NullPointerException r4, $r18;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c9;
        long $l8;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r12, $r13, $r14, $r16, $r17;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.DecimalFormatSymbols;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<libcore.icu.NativeDecimalFormat: java.math.BigDecimal multiplierBigDecimal> = null;

     label1:
        $r5 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>();

        $c0 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getDecimalSeparator()>();

        $c1 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getDigit()>();

        $r6 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()>();

        $c2 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getGroupingSeparator()>();

        $r7 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.String getInfinity()>();

        $r8 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>();

        $c3 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getMinusSign()>();

        $c4 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()>();

        $r9 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.String getNaN()>();

        $c5 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getPatternSeparator()>();

        $c7 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getPercent()>();

        $c6 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getPerMill()>();

        $c9 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getZeroDigit()>();

        $l8 = staticinvoke <libcore.icu.NativeDecimalFormat: long open(java.lang.String,java.lang.String,char,char,java.lang.String,char,java.lang.String,java.lang.String,char,char,java.lang.String,char,char,char,char)>(r1, $r5, $c0, $c1, $r6, $c2, $r7, $r8, $c3, $c4, $r9, $c5, $c7, $c6, $c9);

        r0.<libcore.icu.NativeDecimalFormat: long address> = $l8;

        r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern> = r1;

     label2:
        return;

     label3:
        $r18 := @caughtexception;

        r4 = $r18;

        throw r4;

     label4:
        $r11 := @caughtexception;

        r3 = $r11;

        $r10 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("syntax error: ");

        $r15 = virtualinvoke r3.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r10;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
    }

    public void <init>(java.lang.String, libcore.icu.LocaleData)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1, $r3, $r4, $r5, $r6, $r7;
        libcore.icu.LocaleData r2;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7;
        long $l8;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: libcore.icu.LocaleData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<libcore.icu.NativeDecimalFormat: java.math.BigDecimal multiplierBigDecimal> = null;

        $r7 = r2.<libcore.icu.LocaleData: java.lang.String currencySymbol>;

        $c7 = r2.<libcore.icu.LocaleData: char decimalSeparator>;

        $r6 = r2.<libcore.icu.LocaleData: java.lang.String exponentSeparator>;

        $c6 = r2.<libcore.icu.LocaleData: char groupingSeparator>;

        $r5 = r2.<libcore.icu.LocaleData: java.lang.String infinity>;

        $r4 = r2.<libcore.icu.LocaleData: java.lang.String internationalCurrencySymbol>;

        $c5 = r2.<libcore.icu.LocaleData: char minusSign>;

        $c4 = r2.<libcore.icu.LocaleData: char monetarySeparator>;

        $r3 = r2.<libcore.icu.LocaleData: java.lang.String NaN>;

        $c3 = r2.<libcore.icu.LocaleData: char patternSeparator>;

        $c2 = r2.<libcore.icu.LocaleData: char percent>;

        $c1 = r2.<libcore.icu.LocaleData: char perMill>;

        $c0 = r2.<libcore.icu.LocaleData: char zeroDigit>;

        $l8 = staticinvoke <libcore.icu.NativeDecimalFormat: long open(java.lang.String,java.lang.String,char,char,java.lang.String,char,java.lang.String,java.lang.String,char,char,java.lang.String,char,char,char,char)>(r1, $r7, $c7, 35, $r6, $c6, $r5, $r4, $c5, $c4, $r3, $c3, $c2, $c1, $c0);

        r0.<libcore.icu.NativeDecimalFormat: long address> = $l8;

        r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern> = r1;

        return;
    }

    private static void applyPattern(long, boolean, java.lang.String)
    {
        long l0;
        boolean z0;
        java.lang.String r0, $r8, $r12;
        java.lang.RuntimeException r1, $r4;
        java.lang.NullPointerException r2, $r3;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.lang.String;

     label1:
        staticinvoke <libcore.icu.NativeDecimalFormat: void applyPatternImpl(long,boolean,java.lang.String)>(l0, z0, r0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        throw r2;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("syntax error: ");

        $r8 = virtualinvoke r1.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r5;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
    }

    private static native void applyPatternImpl(long, boolean, java.lang.String);

    private static native long cloneImpl(long);

    private static native void close(long);

    private static native char[] formatDigitList(long, java.lang.String, libcore.icu.NativeDecimalFormat$FieldPositionIterator);

    private static native char[] formatDouble(long, double, libcore.icu.NativeDecimalFormat$FieldPositionIterator);

    private static native char[] formatLong(long, long, libcore.icu.NativeDecimalFormat$FieldPositionIterator);

    private static native int getAttribute(long, int);

    private static native java.lang.String getTextAttribute(long, int);

    private int makeScalePositive(int, java.lang.StringBuilder)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0, i1;
        java.lang.StringBuilder r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuilder;

        if i0 >= 0 goto label3;

        i1 = neg i0;

     label1:
        if i1 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        i1 = i1 + -1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        return i0;
    }

    private static native long open(java.lang.String, java.lang.String, char, char, java.lang.String, char, java.lang.String, java.lang.String, char, char, java.lang.String, char, char, char, char);

    private static native java.lang.Number parse(long, java.lang.String, java.text.ParsePosition, boolean);

    private static native void setAttribute(long, int, int);

    private static native void setDecimalFormatSymbols(long, java.lang.String, char, char, java.lang.String, char, java.lang.String, java.lang.String, char, char, java.lang.String, char, char, char, char);

    private static native void setRoundingMode(long, int, double);

    private static native void setSymbol(long, int, java.lang.String);

    private static native void setTextAttribute(long, int, java.lang.String);

    private static native java.lang.String toPatternImpl(long, boolean);

    public void applyLocalizedPattern(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void applyPattern(long,boolean,java.lang.String)>($l0, 1, r1);

        r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern> = null;

        return;
    }

    public void applyPattern(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1, $r2, $r3;
        long $l0;
        boolean $z0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern>;

        if $r2 == null goto label1;

        $r3 = r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void applyPattern(long,boolean,java.lang.String)>($l0, 0, r1);

        r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern> = r1;

        return;
    }

    public java.lang.Object clone()
    {
        libcore.icu.NativeDecimalFormat r0, r2;
        java.lang.CloneNotSupportedException r1, $r5;
        java.lang.Object $r3;
        long $l0, $l1;
        java.lang.String $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r6;

        r0 := @this: libcore.icu.NativeDecimalFormat;

     label1:
        $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (libcore.icu.NativeDecimalFormat) $r3;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $l1 = staticinvoke <libcore.icu.NativeDecimalFormat: long cloneImpl(long)>($l0);

        r2.<libcore.icu.NativeDecimalFormat: long address> = $l1;

        $r4 = r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern>;

        r2.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern> = $r4;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean negPrefNull>;

        r2.<libcore.icu.NativeDecimalFormat: boolean negPrefNull> = $z0;

        $z1 = r0.<libcore.icu.NativeDecimalFormat: boolean negSuffNull>;

        r2.<libcore.icu.NativeDecimalFormat: boolean negSuffNull> = $z1;

        $z2 = r0.<libcore.icu.NativeDecimalFormat: boolean posPrefNull>;

        r2.<libcore.icu.NativeDecimalFormat: boolean posPrefNull> = $z2;

        $z3 = r0.<libcore.icu.NativeDecimalFormat: boolean posSuffNull>;

        r2.<libcore.icu.NativeDecimalFormat: boolean posSuffNull> = $z3;

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r6;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public void close()
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.Throwable r1, $r2;
        long $l0, $l2;
        byte $b1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        entermonitor r0;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void close(long)>($l2);

        r0.<libcore.icu.NativeDecimalFormat: long address> = 0L;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        libcore.icu.NativeDecimalFormat r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        long $l0, $l1;
        byte $b2;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof libcore.icu.NativeDecimalFormat;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (libcore.icu.NativeDecimalFormat) r1;

        $l1 = r2.<libcore.icu.NativeDecimalFormat: long address>;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label1;

        $r3 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: java.lang.String toPattern()>();

        $r4 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String toPattern()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: boolean isDecimalSeparatorAlwaysShown()>();

        $z3 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: boolean isDecimalSeparatorAlwaysShown()>();

        if $z2 != $z3 goto label4;

        $i3 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getGroupingSize()>();

        $i4 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getGroupingSize()>();

        if $i3 != $i4 goto label4;

        $i5 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getMultiplier()>();

        $i6 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMultiplier()>();

        if $i5 != $i6 goto label4;

        $r6 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativePrefix()>();

        $r5 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativePrefix()>();

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z4 == 0 goto label4;

        $r7 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativeSuffix()>();

        $r8 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativeSuffix()>();

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z5 == 0 goto label4;

        $r10 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: java.lang.String getPositivePrefix()>();

        $r9 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getPositivePrefix()>();

        $z6 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z6 == 0 goto label4;

        $r11 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: java.lang.String getPositiveSuffix()>();

        $r12 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getPositiveSuffix()>();

        $z7 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z7 == 0 goto label4;

        $i8 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getMaximumIntegerDigits()>();

        $i7 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMaximumIntegerDigits()>();

        if $i8 != $i7 goto label4;

        $i10 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getMaximumFractionDigits()>();

        $i9 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMaximumFractionDigits()>();

        if $i10 != $i9 goto label4;

        $i13 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getMinimumIntegerDigits()>();

        $i14 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMinimumIntegerDigits()>();

        if $i13 != $i14 goto label4;

        $i11 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getMinimumFractionDigits()>();

        $i12 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMinimumFractionDigits()>();

        if $i11 != $i12 goto label4;

        $z8 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: boolean isGroupingUsed()>();

        $z9 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: boolean isGroupingUsed()>();

        if $z8 == $z9 goto label1;

     label4:
        return 0;
    }

    protected void finalize() throws java.lang.Throwable
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: libcore.icu.NativeDecimalFormat;

     label1:
        virtualinvoke r0.<libcore.icu.NativeDecimalFormat: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public char[] formatBigDecimal(java.math.BigDecimal, java.text.FieldPosition)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.math.BigDecimal r1;
        java.text.FieldPosition r2;
        libcore.icu.NativeDecimalFormat$FieldPositionIterator r3;
        char[] r4;
        long $l0;
        java.lang.String $r5;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.text.FieldPosition;

        r3 = staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: libcore.icu.NativeDecimalFormat$FieldPositionIterator forFieldPosition(java.text.FieldPosition)>(r2);

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r5 = virtualinvoke r1.<java.math.BigDecimal: java.lang.String toString()>();

        r4 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatDigitList(long,java.lang.String,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l0, $r5, r3);

        if r3 == null goto label1;

        staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: void access$000(libcore.icu.NativeDecimalFormat$FieldPositionIterator,java.text.FieldPosition)>(r3, r2);

     label1:
        return r4;
    }

    public char[] formatBigInteger(java.math.BigInteger, java.text.FieldPosition)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.math.BigInteger r1;
        java.text.FieldPosition r2;
        libcore.icu.NativeDecimalFormat$FieldPositionIterator r3;
        char[] r4;
        long $l0;
        java.lang.String $r5;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: java.text.FieldPosition;

        r3 = staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: libcore.icu.NativeDecimalFormat$FieldPositionIterator forFieldPosition(java.text.FieldPosition)>(r2);

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r5 = virtualinvoke r1.<java.math.BigInteger: java.lang.String toString(int)>(10);

        r4 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatDigitList(long,java.lang.String,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l0, $r5, r3);

        if r3 == null goto label1;

        staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: void access$000(libcore.icu.NativeDecimalFormat$FieldPositionIterator,java.text.FieldPosition)>(r3, r2);

     label1:
        return r4;
    }

    public char[] formatDouble(double, java.text.FieldPosition)
    {
        libcore.icu.NativeDecimalFormat r0;
        double d0;
        java.text.FieldPosition r1;
        libcore.icu.NativeDecimalFormat$FieldPositionIterator r2;
        char[] r3;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        d0 := @parameter0: double;

        r1 := @parameter1: java.text.FieldPosition;

        r2 = staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: libcore.icu.NativeDecimalFormat$FieldPositionIterator forFieldPosition(java.text.FieldPosition)>(r1);

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        r3 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatDouble(long,double,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l0, d0, r2);

        if r2 == null goto label1;

        staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: void access$000(libcore.icu.NativeDecimalFormat$FieldPositionIterator,java.text.FieldPosition)>(r2, r1);

     label1:
        return r3;
    }

    public char[] formatLong(long, java.text.FieldPosition)
    {
        libcore.icu.NativeDecimalFormat r0;
        long l0, $l1;
        java.text.FieldPosition r1;
        libcore.icu.NativeDecimalFormat$FieldPositionIterator r2;
        char[] r3;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        l0 := @parameter0: long;

        r1 := @parameter1: java.text.FieldPosition;

        r2 = staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: libcore.icu.NativeDecimalFormat$FieldPositionIterator forFieldPosition(java.text.FieldPosition)>(r1);

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        r3 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatLong(long,long,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l1, l0, r2);

        if r2 == null goto label1;

        staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: void access$000(libcore.icu.NativeDecimalFormat$FieldPositionIterator,java.text.FieldPosition)>(r2, r1);

     label1:
        return r3;
    }

    public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.Object r1;
        java.lang.Number r2;
        libcore.icu.NativeDecimalFormat$FieldPositionIterator r3, $r7;
        java.lang.String r4, $r8, $r10, $r13, $r17, $r22;
        java.text.AttributedString r5, $r11;
        java.text.Format$Field r6;
        double d0;
        long l0, $l1, $l4, $l5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        char[] $r9, $r14, $r15;
        java.text.AttributedCharacterIterator $r12;
        int $i2, $i3;
        java.lang.IllegalArgumentException $r16;
        java.lang.Class $r18;
        java.lang.StringBuilder $r19, $r20, $r21;
        java.lang.NullPointerException $r23;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r23 = new java.lang.NullPointerException;

        specialinvoke $r23.<java.lang.NullPointerException: void <init>(java.lang.String)>("object == null");

        throw $r23;

     label1:
        $z0 = r1 instanceof java.lang.Number;

        if $z0 != 0 goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("object not a Number: ");

        $r18 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r16;

     label2:
        r2 = (java.lang.Number) r1;

        $r7 = new libcore.icu.NativeDecimalFormat$FieldPositionIterator;

        specialinvoke $r7.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: void <init>(libcore.icu.NativeDecimalFormat$1)>(null);

        r3 = $r7;

        $z1 = r2 instanceof java.math.BigInteger;

        if $z1 != 0 goto label3;

        $z4 = r2 instanceof java.math.BigDecimal;

        if $z4 == 0 goto label6;

     label3:
        $r8 = new java.lang.String;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r10 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r9 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatDigitList(long,java.lang.String,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l1, $r10, r3);

        specialinvoke $r8.<java.lang.String: void <init>(char[])>($r9);

        r4 = $r8;

     label4:
        $r11 = new java.text.AttributedString;

        specialinvoke $r11.<java.text.AttributedString: void <init>(java.lang.String)>(r4);

        r5 = $r11;

     label5:
        $z2 = virtualinvoke r3.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: boolean next()>();

        if $z2 == 0 goto label9;

        r6 = virtualinvoke r3.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: java.text.Format$Field field()>();

        $i3 = virtualinvoke r3.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: int start()>();

        $i2 = virtualinvoke r3.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: int limit()>();

        virtualinvoke r5.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>(r6, r6, $i3, $i2);

        goto label5;

     label6:
        $z3 = r2 instanceof java.lang.Double;

        if $z3 != 0 goto label7;

        $z5 = r2 instanceof java.lang.Float;

        if $z5 == 0 goto label8;

     label7:
        d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>();

        $r13 = new java.lang.String;

        $l4 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r14 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatDouble(long,double,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l4, d0, r3);

        specialinvoke $r13.<java.lang.String: void <init>(char[])>($r14);

        r4 = $r13;

        goto label4;

     label8:
        l0 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $r17 = new java.lang.String;

        $l5 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r15 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatLong(long,long,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l5, l0, r3);

        specialinvoke $r17.<java.lang.String: void <init>(char[])>($r15);

        r4 = $r17;

        goto label4;

     label9:
        $r12 = virtualinvoke r5.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        return $r12;
    }

    public int getGroupingSize()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 10);

        return $i1;
    }

    public int getMaximumFractionDigits()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 6);

        return $i1;
    }

    public int getMaximumIntegerDigits()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 3);

        return $i1;
    }

    public int getMinimumFractionDigits()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 7);

        return $i1;
    }

    public int getMinimumIntegerDigits()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 4);

        return $i1;
    }

    public int getMultiplier()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 9);

        return $i1;
    }

    public java.lang.String getNegativePrefix()
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean $z0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean negPrefNull>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String getTextAttribute(long,int)>($l0, 2);

        return $r1;
    }

    public java.lang.String getNegativeSuffix()
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean $z0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean negSuffNull>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String getTextAttribute(long,int)>($l0, 3);

        return $r1;
    }

    public java.lang.String getPositivePrefix()
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean $z0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean posPrefNull>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String getTextAttribute(long,int)>($l0, 0);

        return $r1;
    }

    public java.lang.String getPositiveSuffix()
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean $z0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean posSuffNull>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String getTextAttribute(long,int)>($l0, 1);

        return $r1;
    }

    public boolean isDecimalSeparatorAlwaysShown()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 2);

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isGroupingUsed()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 1);

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isParseBigDecimal()
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean $z0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean parseBigDecimal>;

        return $z0;
    }

    public boolean isParseIntegerOnly()
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        boolean z0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        i0 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l1, 0);

        z0 = 0;

        if i0 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public java.lang.Number parse(java.lang.String, java.text.ParsePosition)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;
        boolean $z0;
        long $l0;
        java.lang.Number $r3;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean parseBigDecimal>;

        $r3 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.Number parse(long,java.lang.String,java.text.ParsePosition,boolean)>($l0, r1, r2, $z0);

        return $r3;
    }

    public void setCurrency(java.util.Currency)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.util.Currency r1;
        long $l0, $l1;
        java.lang.String $r2, $r3;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.util.Currency;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r2 = virtualinvoke r1.<java.util.Currency: java.lang.String getSymbol()>();

        staticinvoke <libcore.icu.NativeDecimalFormat: void setSymbol(long,int,java.lang.String)>($l0, 8, $r2);

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r3 = virtualinvoke r1.<java.util.Currency: java.lang.String getCurrencyCode()>();

        staticinvoke <libcore.icu.NativeDecimalFormat: void setSymbol(long,int,java.lang.String)>($l1, 9, $r3);

        return;
    }

    public void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.text.DecimalFormatSymbols r1;
        long $l0;
        java.lang.String $r2, $r3, $r4, $r5, $r6;
        char $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.text.DecimalFormatSymbols;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r2 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>();

        $c1 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getDecimalSeparator()>();

        $c2 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getDigit()>();

        $r3 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()>();

        $c3 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getGroupingSeparator()>();

        $r4 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getInfinity()>();

        $r5 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>();

        $c4 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getMinusSign()>();

        $c5 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()>();

        $r6 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getNaN()>();

        $c6 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getPatternSeparator()>();

        $c7 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getPercent()>();

        $c8 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getPerMill()>();

        $c9 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getZeroDigit()>();

        staticinvoke <libcore.icu.NativeDecimalFormat: void setDecimalFormatSymbols(long,java.lang.String,char,char,java.lang.String,char,java.lang.String,java.lang.String,char,char,java.lang.String,char,char,char,char)>($l0, $r2, $c1, $c2, $r3, $c3, $r4, $r5, $c4, $c5, $r6, $c6, $c7, $c8, $c9);

        return;
    }

    public void setDecimalFormatSymbols(libcore.icu.LocaleData)
    {
        libcore.icu.NativeDecimalFormat r0;
        libcore.icu.LocaleData r1;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7;
        java.lang.String $r2, $r3, $r4, $r5, $r6;
        long $l8;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: libcore.icu.LocaleData;

        $l8 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r6 = r1.<libcore.icu.LocaleData: java.lang.String currencySymbol>;

        $c7 = r1.<libcore.icu.LocaleData: char decimalSeparator>;

        $r5 = r1.<libcore.icu.LocaleData: java.lang.String exponentSeparator>;

        $c6 = r1.<libcore.icu.LocaleData: char groupingSeparator>;

        $r4 = r1.<libcore.icu.LocaleData: java.lang.String infinity>;

        $r3 = r1.<libcore.icu.LocaleData: java.lang.String internationalCurrencySymbol>;

        $c5 = r1.<libcore.icu.LocaleData: char minusSign>;

        $c4 = r1.<libcore.icu.LocaleData: char monetarySeparator>;

        $r2 = r1.<libcore.icu.LocaleData: java.lang.String NaN>;

        $c3 = r1.<libcore.icu.LocaleData: char patternSeparator>;

        $c2 = r1.<libcore.icu.LocaleData: char percent>;

        $c1 = r1.<libcore.icu.LocaleData: char perMill>;

        $c0 = r1.<libcore.icu.LocaleData: char zeroDigit>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setDecimalFormatSymbols(long,java.lang.String,char,char,java.lang.String,char,java.lang.String,java.lang.String,char,char,java.lang.String,char,char,char,char)>($l8, $r6, $c7, 35, $r5, $c6, $r4, $r3, $c5, $c4, $r2, $c3, $c2, $c1, $c0);

        return;
    }

    public void setDecimalSeparatorAlwaysShown(boolean)
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean z0;
        byte b0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        b0 = -1;

     label1:
        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 2, b0);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public void setGroupingSize(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 10, i0);

        return;
    }

    public void setGroupingUsed(boolean)
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean z0;
        byte b0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        b0 = -1;

     label1:
        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 1, b0);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public void setMaximumFractionDigits(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 6, i0);

        return;
    }

    public void setMaximumIntegerDigits(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 3, i0);

        return;
    }

    public void setMinimumFractionDigits(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 7, i0);

        return;
    }

    public void setMinimumIntegerDigits(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 4, i0);

        return;
    }

    public void setMultiplier(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1, $l2;
        java.math.BigDecimal $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 9, i0);

        $l2 = (long) i0;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l2);

        r0.<libcore.icu.NativeDecimalFormat: java.math.BigDecimal multiplierBigDecimal> = $r1;

        return;
    }

    public void setNegativePrefix(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        boolean z0, $z1;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label3;

        z0 = 1;

     label1:
        r0.<libcore.icu.NativeDecimalFormat: boolean negPrefNull> = z0;

        $z1 = r0.<libcore.icu.NativeDecimalFormat: boolean negPrefNull>;

        if $z1 != 0 goto label2;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setTextAttribute(long,int,java.lang.String)>($l0, 2, r1);

     label2:
        return;

     label3:
        z0 = 0;

        goto label1;
    }

    public void setNegativeSuffix(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        boolean z0, $z1;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label3;

        z0 = 1;

     label1:
        r0.<libcore.icu.NativeDecimalFormat: boolean negSuffNull> = z0;

        $z1 = r0.<libcore.icu.NativeDecimalFormat: boolean negSuffNull>;

        if $z1 != 0 goto label2;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setTextAttribute(long,int,java.lang.String)>($l0, 3, r1);

     label2:
        return;

     label3:
        z0 = 0;

        goto label1;
    }

    public void setParseBigDecimal(boolean)
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean z0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        z0 := @parameter0: boolean;

        r0.<libcore.icu.NativeDecimalFormat: boolean parseBigDecimal> = z0;

        return;
    }

    public void setParseIntegerOnly(boolean)
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean z0;
        byte b0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        b0 = -1;

     label1:
        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 0, b0);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public void setPositivePrefix(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        boolean z0, $z1;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label3;

        z0 = 1;

     label1:
        r0.<libcore.icu.NativeDecimalFormat: boolean posPrefNull> = z0;

        $z1 = r0.<libcore.icu.NativeDecimalFormat: boolean posPrefNull>;

        if $z1 != 0 goto label2;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setTextAttribute(long,int,java.lang.String)>($l0, 0, r1);

     label2:
        return;

     label3:
        z0 = 0;

        goto label1;
    }

    public void setPositiveSuffix(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        boolean z0, $z1;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label3;

        z0 = 1;

     label1:
        r0.<libcore.icu.NativeDecimalFormat: boolean posSuffNull> = z0;

        $z1 = r0.<libcore.icu.NativeDecimalFormat: boolean posSuffNull>;

        if $z1 != 0 goto label2;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setTextAttribute(long,int,java.lang.String)>($l0, 1, r1);

     label2:
        return;

     label3:
        z0 = 0;

        goto label1;
    }

    public void setRoundingMode(java.math.RoundingMode, double)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.math.RoundingMode r1;
        double d0;
        byte b0;
        int[] $r2;
        int $i1, $i2;
        java.lang.AssertionError $r3;
        long $l3;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.math.RoundingMode;

        d0 := @parameter1: double;

        $r2 = <libcore.icu.NativeDecimalFormat$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i1 = virtualinvoke r1.<java.math.RoundingMode: int ordinal()>();

        $i2 = $r2[$i1];

        tableswitch($i2)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            case 6: goto label8;
            case 7: goto label9;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        b0 = 0;

     label3:
        $l3 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setRoundingMode(long,int,double)>($l3, b0, d0);

        return;

     label4:
        b0 = 1;

        goto label3;

     label5:
        b0 = 2;

        goto label3;

     label6:
        b0 = 3;

        goto label3;

     label7:
        b0 = 4;

        goto label3;

     label8:
        b0 = 5;

        goto label3;

     label9:
        b0 = 6;

        goto label3;
    }

    public java.lang.String toLocalizedPattern()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String toPatternImpl(long,boolean)>($l0, 1);

        return $r1;
    }

    public java.lang.String toPattern()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String toPatternImpl(long,boolean)>($l0, 0);

        return $r1;
    }

    public static void <clinit>()
    {
        <libcore.icu.NativeDecimalFormat: int UNUM_ZERO_DIGIT_SYMBOL> = 4;

        <libcore.icu.NativeDecimalFormat: int UNUM_SIGNIFICANT_DIGIT_SYMBOL> = 16;

        <libcore.icu.NativeDecimalFormat: int UNUM_SIGNIFICANT_DIGITS_USED> = 16;

        <libcore.icu.NativeDecimalFormat: int UNUM_SECONDARY_GROUPING_SIZE> = 15;

        <libcore.icu.NativeDecimalFormat: int UNUM_ROUNDING_MODE> = 11;

        <libcore.icu.NativeDecimalFormat: int UNUM_ROUNDING_INCREMENT> = 12;

        <libcore.icu.NativeDecimalFormat: int UNUM_PUBLIC_RULESETS> = 7;

        <libcore.icu.NativeDecimalFormat: int UNUM_POSITIVE_SUFFIX> = 1;

        <libcore.icu.NativeDecimalFormat: int UNUM_POSITIVE_PREFIX> = 0;

        <libcore.icu.NativeDecimalFormat: int UNUM_PLUS_SIGN_SYMBOL> = 7;

        <libcore.icu.NativeDecimalFormat: int UNUM_PERMILL_SYMBOL> = 12;

        <libcore.icu.NativeDecimalFormat: int UNUM_PERCENT_SYMBOL> = 3;

        <libcore.icu.NativeDecimalFormat: int UNUM_PATTERN_SEPARATOR_SYMBOL> = 2;

        <libcore.icu.NativeDecimalFormat: int UNUM_PARSE_INT_ONLY> = 0;

        <libcore.icu.NativeDecimalFormat: int UNUM_PAD_ESCAPE_SYMBOL> = 13;

        <libcore.icu.NativeDecimalFormat: int UNUM_PADDING_POSITION> = 14;

        <libcore.icu.NativeDecimalFormat: int UNUM_PADDING_CHARACTER> = 4;

        <libcore.icu.NativeDecimalFormat: int UNUM_NEGATIVE_SUFFIX> = 3;

        <libcore.icu.NativeDecimalFormat: int UNUM_NEGATIVE_PREFIX> = 2;

        <libcore.icu.NativeDecimalFormat: int UNUM_NAN_SYMBOL> = 15;

        <libcore.icu.NativeDecimalFormat: int UNUM_MULTIPLIER> = 9;

        <libcore.icu.NativeDecimalFormat: int UNUM_MONETARY_SEPARATOR_SYMBOL> = 10;

        <libcore.icu.NativeDecimalFormat: int UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL> = 17;

        <libcore.icu.NativeDecimalFormat: int UNUM_MIN_SIGNIFICANT_DIGITS> = 17;

        <libcore.icu.NativeDecimalFormat: int UNUM_MIN_INTEGER_DIGITS> = 4;

        <libcore.icu.NativeDecimalFormat: int UNUM_MIN_FRACTION_DIGITS> = 7;

        <libcore.icu.NativeDecimalFormat: int UNUM_MINUS_SIGN_SYMBOL> = 6;

        <libcore.icu.NativeDecimalFormat: int UNUM_MAX_SIGNIFICANT_DIGITS> = 18;

        <libcore.icu.NativeDecimalFormat: int UNUM_MAX_INTEGER_DIGITS> = 3;

        <libcore.icu.NativeDecimalFormat: int UNUM_MAX_FRACTION_DIGITS> = 6;

        <libcore.icu.NativeDecimalFormat: int UNUM_LENIENT_PARSE> = 19;

        <libcore.icu.NativeDecimalFormat: int UNUM_INTL_CURRENCY_SYMBOL> = 9;

        <libcore.icu.NativeDecimalFormat: int UNUM_INTEGER_DIGITS> = 5;

        <libcore.icu.NativeDecimalFormat: int UNUM_INFINITY_SYMBOL> = 14;

        <libcore.icu.NativeDecimalFormat: int UNUM_GROUPING_USED> = 1;

        <libcore.icu.NativeDecimalFormat: int UNUM_GROUPING_SIZE> = 10;

        <libcore.icu.NativeDecimalFormat: int UNUM_GROUPING_SEPARATOR_SYMBOL> = 1;

        <libcore.icu.NativeDecimalFormat: int UNUM_FRACTION_DIGITS> = 8;

        <libcore.icu.NativeDecimalFormat: int UNUM_FORMAT_WIDTH> = 13;

        <libcore.icu.NativeDecimalFormat: int UNUM_FORMAT_SYMBOL_COUNT> = 18;

        <libcore.icu.NativeDecimalFormat: int UNUM_EXPONENTIAL_SYMBOL> = 11;

        <libcore.icu.NativeDecimalFormat: int UNUM_DIGIT_SYMBOL> = 5;

        <libcore.icu.NativeDecimalFormat: int UNUM_DEFAULT_RULESET> = 6;

        <libcore.icu.NativeDecimalFormat: int UNUM_DECIMAL_SEPARATOR_SYMBOL> = 0;

        <libcore.icu.NativeDecimalFormat: int UNUM_DECIMAL_ALWAYS_SHOWN> = 2;

        <libcore.icu.NativeDecimalFormat: int UNUM_CURRENCY_SYMBOL> = 8;

        <libcore.icu.NativeDecimalFormat: int UNUM_CURRENCY_CODE> = 5;

        return;
    }
}
