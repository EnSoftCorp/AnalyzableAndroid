public class java.util.concurrent.CopyOnWriteArrayList extends java.lang.Object implements java.util.List, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private transient volatile java.lang.Object[] elements;

    public void <init>()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <libcore.util.EmptyArray: java.lang.Object[] OBJECT>;

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = $r1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] $r2, $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        $r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $r3 = (java.lang.Object[]) $r2;

        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.lang.Object[])>($r3);

        return;
    }

    public void <init>(java.lang.Object[])
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1, $r2;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(r1, $i0, class "[Ljava/lang/Object;");

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = $r2;

        return;
    }

    static java.lang.Object[] access$300(java.util.concurrent.CopyOnWriteArrayList)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        return $r1;
    }

    static void access$500(java.util.concurrent.CopyOnWriteArrayList, int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1;

        r0 := @parameter0: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void removeRange(int,int)>(i0, i1);

        return;
    }

    static int access$600(java.util.concurrent.CopyOnWriteArrayList, java.util.Collection, boolean, int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        boolean z0;
        int i0, i1, $i2;

        r0 := @parameter0: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter1: java.util.Collection;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $i2 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int removeOrRetain(java.util.Collection,boolean,int,int)>(r1, z0, i0, i1);

        return $i2;
    }

    static boolean containsAll(java.util.Collection, java.lang.Object[], int, int)
    {
        java.util.Collection r0;
        java.lang.Object[] r1;
        int i0, i1, $i2;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $i2 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>($r3, r1, i0, i1);

        if $i2 != -1 goto label1;

        return 0;

     label2:
        return 1;
    }

    static int indexOf(java.lang.Object, java.lang.Object[], int, int)
    {
        java.lang.Object r0, $r2, $r3;
        java.lang.Object[] r1;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 != null goto label3;

        i3 = i0;

     label1:
        if i3 >= i1 goto label6;

        $r3 = r1[i3];

        if $r3 != null goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        i2 = i0;

     label4:
        if i2 >= i1 goto label6;

        $r2 = r1[i2];

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        return i2;

     label5:
        i2 = i2 + 1;

        goto label4;

     label6:
        return -1;
    }

    static int lastIndexOf(java.lang.Object, java.lang.Object[], int, int)
    {
        java.lang.Object r0, $r2, $r3;
        java.lang.Object[] r1;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 != null goto label3;

        i3 = i1 - 1;

     label1:
        if i3 < i0 goto label6;

        $r3 = r1[i3];

        if $r3 != null goto label2;

        return i3;

     label2:
        i3 = i3 + -1;

        goto label1;

     label3:
        i2 = i1 - 1;

     label4:
        if i2 < i0 goto label6;

        $r2 = r1[i2];

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        return i2;

     label5:
        i2 = i2 + -1;

        goto label4;

     label6:
        return -1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.io.ObjectInputStream r1;
        java.lang.Throwable r2, $r5;
        java.lang.Object[] r3;
        int i0, $i1, $i2;
        java.lang.Object $r4;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.io.ObjectInputStream;

        entermonitor r0;

     label1:
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        r3 = newarray (java.lang.Object)[$i1];

     label2:
        i0 = 0;

     label3:
        $i2 = lengthof r3;

        if i0 >= $i2 goto label5;

        $r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r3[i0] = $r4;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r3;

     label6:
        exitmonitor r0;

        return;

     label7:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private int removeOrRetain(java.util.Collection, boolean, int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.Object[] r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Object $r4, $r13, $r14;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = i0;

     label1:
        i3 = 0;

        if i2 >= i1 goto label7;

        $r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r4 = $r3[i2];

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r4);

        if $z1 != z0 goto label2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r5 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i9 = lengthof $r5;

        $i10 = -1 + $i9;

        r2 = newarray (java.lang.Object)[$i10];

        $r6 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, i2);

        i4 = i2;

        i5 = i2 + 1;

        i6 = i4;

     label3:
        if i5 >= i1 goto label5;

        $r12 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r13 = $r12[i5];

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r13);

        if $z2 != z0 goto label8;

        i8 = i6 + 1;

        $r11 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r14 = $r11[i5];

        r2[i6] = $r14;

     label4:
        i5 = i5 + 1;

        i6 = i8;

        goto label3;

     label5:
        $r8 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r7 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i11 = lengthof $r7;

        $i12 = $i11 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, i1, r2, i6, $i12);

        $r9 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i13 = lengthof $r9;

        $i15 = $i13 - i1;

        i7 = i6 + $i15;

        $i14 = lengthof r2;

        if i7 >= $i14 goto label6;

        r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(r2, 0, i7);

     label6:
        $r10 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i17 = lengthof $r10;

        $i16 = lengthof r2;

        i3 = $i17 - $i16;

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r2;

     label7:
        return i3;

     label8:
        i8 = i6;

        goto label4;
    }

    private void removeRange(int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i3 = lengthof $r2;

        $i2 = i1 - i0;

        $i4 = $i3 - $i2;

        r1 = newarray (java.lang.Object)[$i4];

        $r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, i0);

        $r5 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r4 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i5 = lengthof $r4;

        $i6 = $i5 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i1, r1, i0, $i6);

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r1;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.io.ObjectOutputStream r1;
        java.lang.Object[] r2;
        int i0, i1, $i2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $i2 = lengthof r2;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i2);

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r2[i1];

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void add(int, java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1;
        java.lang.Throwable r2, $r8;
        java.lang.Object[] r3, $r4, $r5, $r6, $r7;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        entermonitor r0;

     label1:
        $r4 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i1 = lengthof $r4;

        $i2 = 1 + $i1;

        r3 = newarray (java.lang.Object)[$i2];

        $r5 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, i0);

        r3[i0] = r1;

        $r7 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i5 = i0 + 1;

        $r6 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i3 = lengthof $r6;

        $i4 = $i3 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, i0, r3, $i5, $i4);

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r3;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r8;
        java.lang.Object[] r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        $r4 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof $r4;

        $i1 = 1 + $i0;

        r3 = newarray (java.lang.Object)[$i1];

        $r6 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r5 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i2 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r3, 0, $i2);

        $r7 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i3 = lengthof $r7;

        r3[$i3] = r1;

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r3;

     label2:
        exitmonitor r0;

        return 1;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.Collection r1;
        java.lang.Throwable r2, $r9;
        java.lang.Object[] r3, r4, $r5, $r6, $r7, $r8;
        boolean z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        entermonitor r0;

     label1:
        r3 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $r5 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i3 = lengthof $r5;

        $i2 = lengthof r3;

        $i4 = $i3 + $i2;

        r4 = newarray (java.lang.Object)[$i4];

        $r6 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r4, 0, i0);

        $i5 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, i0, $i5);

        $r8 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i6 = lengthof r3;

        $i9 = i0 + $i6;

        $r7 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i8 = lengthof $r7;

        $i7 = $i8 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, i0, r4, $i9, $i7);

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r4;

        i1 = lengthof r3;

     label2:
        z0 = 0;

        if i1 <= 0 goto label3;

        z0 = 1;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Throwable r2, $r4;
        boolean z0;
        java.lang.Object[] $r3;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        entermonitor r0;

     label1:
        $r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof $r3;

        z0 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(int,java.util.Collection)>($i0, r1);

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int addAllAbsent(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Throwable r2, $r12;
        java.lang.Object[] r3, r4, $r6, $r7, $r8, $r9, $r10, $r11;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.Object r5;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        entermonitor r0;

     label01:
        r3 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $r6 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i6 = lengthof $r6;

        $i5 = lengthof r3;

        $i7 = $i6 + $i5;

        r4 = newarray (java.lang.Object)[$i7];

        $r8 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r7 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i8 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r4, 0, $i8);

        i0 = lengthof r3;

     label02:
        i1 = 0;

        i2 = 0;

     label03:
        if i1 >= i0 goto label08;

     label04:
        r5 = r3[i1];

        $r10 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i12 = lengthof $r10;

        $i14 = i2 + $i12;

        $i13 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r5, r4, 0, $i14);

        if $i13 != -1 goto label12;

        $r11 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        i4 = lengthof $r11;

     label05:
        i3 = i2 + 1;

     label06:
        $i15 = i4 + i2;

        r4[$i15] = r5;

     label07:
        goto label13;

     label08:
        $i9 = lengthof r3;

        if i2 >= $i9 goto label09;

        $r9 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i10 = lengthof $r9;

        $i11 = i2 + $i10;

        r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(r4, 0, $i11);

     label09:
        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r4;

     label10:
        exitmonitor r0;

        return i2;

     label11:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r0;

        throw r2;

     label12:
        i3 = i2;

     label13:
        i1 = i1 + 1;

        i2 = i3;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public boolean addIfAbsent(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean z0, z1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        z0 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>(r1);

     label2:
        if z0 == 0 goto label4;

        z1 = 0;

     label3:
        exitmonitor r0;

        return z1;

     label4:
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

     label5:
        z1 = 1;

        goto label3;

     label6:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void clear()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Throwable r1, $r3;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        entermonitor r0;

     label1:
        $r2 = <libcore.util.EmptyArray: java.lang.Object[] OBJECT>;

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = $r2;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object clone()
    {
        java.util.concurrent.CopyOnWriteArrayList r0, r2;
        java.lang.CloneNotSupportedException r1, $r7;
        java.lang.Object $r3, $r5;
        java.lang.Object[] $r4, $r6;
        java.lang.AssertionError $r8;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

     label1:
        $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (java.util.concurrent.CopyOnWriteArrayList) $r3;

        $r4 = r2.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (java.lang.Object[]) $r5;

        r2.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = $r6;

     label2:
        return r2;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r8;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object)>(r1);

        if $i0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] r2;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof r2;

        $z0 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection,java.lang.Object[],int,int)>(r1, r2, 0, $i0);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0, $r8;
        java.lang.Object r1, r4, $r6;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7;
        java.lang.Object[] r2, $r7, $r9;
        java.util.Iterator r3;
        int i0, i1;
        java.util.List $r5;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        z0 = 1;

        $z6 = r1 instanceof java.util.concurrent.CopyOnWriteArrayList;

        if $z6 == 0 goto label3;

        if r0 == r1 goto label1;

        $r9 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r8 = (java.util.concurrent.CopyOnWriteArrayList) r1;

        $r7 = $r8.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        z5 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r7);

        z2 = 0;

        if z5 == 0 goto label2;

     label1:
        z2 = 1;

     label2:
        return z2;

     label3:
        z1 = r1 instanceof java.util.List;

        z2 = 0;

        if z1 == 0 goto label2;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r5 = (java.util.List) r1;

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        i0 = lengthof r2;

        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        r4 = r2[i1];

        z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        z2 = 0;

        if z3 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        z4 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r4, $r6);

        z2 = 0;

        if z4 == 0 goto label2;

        i1 = i1 + 1;

        goto label4;

     label5:
        $z7 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label7;

     label6:
        return z0;

     label7:
        z0 = 0;

        goto label6;
    }

    public java.lang.Object get(int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r2 = $r1[i0];

        return $r2;
    }

    final java.lang.Object[] getArray()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        return $r1;
    }

    public int hashCode()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        return $i0;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof r2;

        $i1 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r1, r2, 0, $i0);

        return $i1;
    }

    public int indexOf(java.lang.Object, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        java.lang.Object[] r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i1 = lengthof r2;

        $i2 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r1, r2, i0, $i1);

        return $i2;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1;
        java.util.concurrent.CopyOnWriteArrayList$CowIterator $r2;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r2 = new java.util.concurrent.CopyOnWriteArrayList$CowIterator;

        $i0 = lengthof r1;

        specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList$CowIterator: void <init>(java.lang.Object[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public int lastIndexOf(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof r2;

        $i1 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object,java.lang.Object[],int,int)>(r1, r2, 0, $i0);

        return $i1;
    }

    public int lastIndexOf(java.lang.Object, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        int i0, $i1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i1 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object,java.lang.Object[],int,int)>(r1, $r2, 0, i0);

        return $i1;
    }

    public java.util.ListIterator listIterator()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1;
        java.util.concurrent.CopyOnWriteArrayList$CowIterator $r2;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r2 = new java.util.concurrent.CopyOnWriteArrayList$CowIterator;

        $i0 = lengthof r1;

        specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList$CowIterator: void <init>(java.lang.Object[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] r1;
        java.util.concurrent.CopyOnWriteArrayList$CowIterator r2, $r10;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        if i0 < 0 goto label1;

        $i2 = lengthof r1;

        if i0 <= $i2 goto label2;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $i1 = lengthof r1;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        $r10 = new java.util.concurrent.CopyOnWriteArrayList$CowIterator;

        $i3 = lengthof r1;

        specialinvoke $r10.<java.util.concurrent.CopyOnWriteArrayList$CowIterator: void <init>(java.lang.Object[],int,int)>(r1, 0, $i3);

        r2 = $r10;

        staticinvoke <java.util.concurrent.CopyOnWriteArrayList$CowIterator: int access$002(java.util.concurrent.CopyOnWriteArrayList$CowIterator,int)>(r2, i0);

        return r2;
    }

    public java.lang.Object remove(int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, $i1;
        java.lang.Throwable r1, $r4;
        java.lang.Object r2;
        java.lang.Object[] $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        r2 = $r3[i0];

        $i1 = i0 + 1;

        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void removeRange(int,int)>(i0, $i1);

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        int i0;
        boolean z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        i0 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object)>(r1);

     label2:
        if i0 != -1 goto label4;

        z0 = 0;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>(i0);

     label5:
        z0 = 1;

        goto label3;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Throwable r2, $r4;
        int i0, $i1;
        boolean z0;
        java.lang.Object[] $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        entermonitor r0;

     label1:
        $r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i1 = lengthof $r3;

        i0 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int removeOrRetain(java.util.Collection,boolean,int,int)>(r1, 0, 0, $i1);

     label2:
        z0 = 0;

        if i0 == 0 goto label3;

        z0 = 1;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        boolean z0;
        java.lang.Throwable r2, $r4;
        int i0, $i1;
        java.lang.Object[] $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        z0 = 1;

        entermonitor r0;

     label1:
        $r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i1 = lengthof $r3;

        i0 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int removeOrRetain(java.util.Collection,boolean,int,int)>(r1, 1, 0, $i1);

     label2:
        if i0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0;
        java.lang.Object r1, r4, $r6;
        java.lang.Throwable r2, $r7;
        java.lang.Object[] r3, $r5;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        entermonitor r0;

     label1:
        $r5 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        r3 = (java.lang.Object[]) $r6;

        r4 = r3[i0];

        r3[i0] = r1;

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r3;

     label2:
        exitmonitor r0;

        return r4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int size()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public java.util.List subList(int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1, $i2, $i3;
        java.lang.Object[] r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        java.util.concurrent.CopyOnWriteArrayList$CowSubList $r11;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        if i0 < 0 goto label1;

        if i0 > i1 goto label1;

        $i3 = lengthof r1;

        if i1 <= $i3 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("from=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", to=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", list size=");

        $i2 = lengthof r1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label2:
        $r11 = new java.util.concurrent.CopyOnWriteArrayList$CowSubList;

        specialinvoke $r11.<java.util.concurrent.CopyOnWriteArrayList$CowSubList: void <init>(java.util.concurrent.CopyOnWriteArrayList,java.lang.Object[],int,int)>(r0, r1, i0, i1);

        return $r11;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.Object[]) $r2;

        return $r3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1, r2, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Class $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object[];

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i1 = lengthof r2;

        $i0 = lengthof r1;

        if $i1 <= $i0 goto label1;

        $i6 = lengthof r2;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(r2, $i6, $r3);

        $r5 = (java.lang.Object[]) $r4;

        return $r5;

     label1:
        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 0, $i2);

        $i4 = lengthof r2;

        $i3 = lengthof r1;

        if $i4 >= $i3 goto label2;

        $i5 = lengthof r2;

        r1[$i5] = null;

     label2:
        return r1;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.CopyOnWriteArrayList: long serialVersionUID> = 8673264195747942595L;

        return;
    }
}
