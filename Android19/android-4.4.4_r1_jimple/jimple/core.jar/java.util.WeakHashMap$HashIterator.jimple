class java.util.WeakHashMap$HashIterator extends java.lang.Object implements java.util.Iterator
{
    private java.util.WeakHashMap$Entry currentEntry;
    private int expectedModCount;
    private java.util.WeakHashMap$Entry nextEntry;
    private java.lang.Object nextKey;
    private int position;
    final java.util.WeakHashMap this$0;
    final java.util.WeakHashMap$Entry$Type type;

    void <init>(java.util.WeakHashMap, java.util.WeakHashMap$Entry$Type)
    {
        java.util.WeakHashMap$HashIterator r0;
        java.util.WeakHashMap r1;
        java.util.WeakHashMap$Entry$Type r2;
        int $i0;

        r0 := @this: java.util.WeakHashMap$HashIterator;

        r1 := @parameter0: java.util.WeakHashMap;

        r2 := @parameter1: java.util.WeakHashMap$Entry$Type;

        r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.WeakHashMap$HashIterator: int position> = 0;

        r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry$Type type> = r2;

        $i0 = r1.<java.util.WeakHashMap: int modCount>;

        r0.<java.util.WeakHashMap$HashIterator: int expectedModCount> = $i0;

        return;
    }

    public boolean hasNext()
    {
        java.util.WeakHashMap$HashIterator r0;
        java.util.WeakHashMap$Entry[] r1, $r12;
        int i0, $i1, $i2, $i3;
        java.util.WeakHashMap$Entry r2, $r3, $r4, $r5, $r8, $r9, $r10, $r13, $r15;
        java.lang.Object $r6, $r7, $r16;
        boolean $z0, $z1;
        java.util.WeakHashMap $r11, $r14;

        r0 := @this: java.util.WeakHashMap$HashIterator;

        $r3 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry>;

        if $r3 == null goto label3;

        $r16 = r0.<java.util.WeakHashMap$HashIterator: java.lang.Object nextKey>;

        if $r16 != null goto label1;

        $r15 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry>;

        $z1 = $r15.<java.util.WeakHashMap$Entry: boolean isNull>;

        if $z1 == 0 goto label3;

     label1:
        return 1;

     label2:
        $r9 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry>;

        $r10 = $r9.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry> = $r10;

     label3:
        $r4 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry>;

        if $r4 != null goto label6;

     label4:
        $i2 = r0.<java.util.WeakHashMap$HashIterator: int position>;

        $r11 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap this$0>;

        $r12 = $r11.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $i1 = lengthof $r12;

        if $i2 >= $i1 goto label5;

        $r14 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap this$0>;

        r1 = $r14.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        i0 = r0.<java.util.WeakHashMap$HashIterator: int position>;

        $i3 = i0 + 1;

        r0.<java.util.WeakHashMap$HashIterator: int position> = $i3;

        r2 = r1[i0];

        r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry> = r2;

        if r2 == null goto label4;

     label5:
        $r13 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry>;

        if $r13 != null goto label6;

        return 0;

     label6:
        $r5 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry>;

        $r6 = virtualinvoke $r5.<java.util.WeakHashMap$Entry: java.lang.Object get()>();

        r0.<java.util.WeakHashMap$HashIterator: java.lang.Object nextKey> = $r6;

        $r7 = r0.<java.util.WeakHashMap$HashIterator: java.lang.Object nextKey>;

        if $r7 != null goto label1;

        $r8 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry>;

        $z0 = $r8.<java.util.WeakHashMap$Entry: boolean isNull>;

        if $z0 == 0 goto label2;

        return 1;
    }

    public java.lang.Object next()
    {
        java.util.WeakHashMap$HashIterator r0;
        java.lang.Object r1;
        java.util.WeakHashMap $r2;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r3;
        boolean $z0;
        java.util.NoSuchElementException $r4;
        java.util.WeakHashMap$Entry $r5, $r6, $r7, $r8;
        java.util.WeakHashMap$Entry$Type $r9;

        r0 := @this: java.util.WeakHashMap$HashIterator;

        $i1 = r0.<java.util.WeakHashMap$HashIterator: int expectedModCount>;

        $r2 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap this$0>;

        $i0 = $r2.<java.util.WeakHashMap: int modCount>;

        if $i1 != $i0 goto label2;

        $z0 = virtualinvoke r0.<java.util.WeakHashMap$HashIterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry>;

        r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry currentEntry> = $r5;

        $r6 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry currentEntry>;

        $r7 = $r6.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry> = $r7;

        $r9 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry$Type type>;

        $r8 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry currentEntry>;

        r1 = interfaceinvoke $r9.<java.util.WeakHashMap$Entry$Type: java.lang.Object get(java.util.Map$Entry)>($r8);

        r0.<java.util.WeakHashMap$HashIterator: java.lang.Object nextKey> = null;

        return r1;

     label1:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;

     label2:
        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;
    }

    public void remove()
    {
        java.util.WeakHashMap$HashIterator r0;
        java.util.WeakHashMap $r1, $r6;
        int $i0, $i1, $i2, $i3;
        java.util.ConcurrentModificationException $r2;
        java.util.WeakHashMap$Entry $r3, $r5;
        java.lang.IllegalStateException $r4;

        r0 := @this: java.util.WeakHashMap$HashIterator;

        $i1 = r0.<java.util.WeakHashMap$HashIterator: int expectedModCount>;

        $r1 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap this$0>;

        $i0 = $r1.<java.util.WeakHashMap: int modCount>;

        if $i1 != $i0 goto label2;

        $r3 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry currentEntry>;

        if $r3 == null goto label1;

        $r6 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap this$0>;

        $r5 = r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry currentEntry>;

        virtualinvoke $r6.<java.util.WeakHashMap: void removeEntry(java.util.WeakHashMap$Entry)>($r5);

        r0.<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry currentEntry> = null;

        $i2 = r0.<java.util.WeakHashMap$HashIterator: int expectedModCount>;

        $i3 = 1 + $i2;

        r0.<java.util.WeakHashMap$HashIterator: int expectedModCount> = $i3;

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label2:
        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r2;
    }
}
