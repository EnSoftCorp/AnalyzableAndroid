class java.lang.VMClassLoader extends java.lang.Object
{

    void <init>()
    {
        java.lang.VMClassLoader r0;

        r0 := @this: java.lang.VMClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static native java.lang.Class findLoadedClass(java.lang.ClassLoader, java.lang.String);

    private static native java.lang.String getBootClassPathResource(java.lang.String, int);

    private static native int getBootClassPathSize();

    static native java.lang.Class getPrimitiveClass(char);

    static java.net.URL getResource(java.lang.String)
    {
        java.lang.String r0, r1;
        int i0, i1;
        java.net.URL r2, $r4;
        java.net.MalformedURLException r3, $r5;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <java.lang.VMClassLoader: int getBootClassPathSize()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r1 = staticinvoke <java.lang.VMClassLoader: java.lang.String getBootClassPathResource(java.lang.String,int)>(r0, i1);

        if r1 == null goto label5;

     label2:
        $r4 = new java.net.URL;

        specialinvoke $r4.<java.net.URL: void <init>(java.lang.String)>(r1);

        r2 = $r4;

     label3:
        return r2;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

        virtualinvoke r3.<java.net.MalformedURLException: void printStackTrace()>();

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return null;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }

    static java.util.List getResources(java.lang.String)
    {
        java.lang.String r0, r2;
        java.util.ArrayList r1, $r4;
        int i0, i1;
        java.net.MalformedURLException r3, $r6;
        java.net.URL $r5;

        r0 := @parameter0: java.lang.String;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        i0 = staticinvoke <java.lang.VMClassLoader: int getBootClassPathSize()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r2 = staticinvoke <java.lang.VMClassLoader: java.lang.String getBootClassPathResource(java.lang.String,int)>(r0, i1);

        if r2 == null goto label3;

     label2:
        $r5 = new java.net.URL;

        specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>(r2);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        virtualinvoke r3.<java.net.MalformedURLException: void printStackTrace()>();

        goto label3;

     label5:
        return r1;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }

    static native java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException;
}
