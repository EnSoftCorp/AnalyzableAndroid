final class java.util.AbstractList$SubAbstractList$SubAbstractListIterator extends java.lang.Object implements java.util.ListIterator
{
    private int end;
    private final java.util.ListIterator iterator;
    private int start;
    private final java.util.AbstractList$SubAbstractList subList;

    void <init>(java.util.ListIterator, java.util.AbstractList$SubAbstractList, int, int)
    {
        java.util.AbstractList$SubAbstractList$SubAbstractListIterator r0;
        java.util.ListIterator r1;
        java.util.AbstractList$SubAbstractList r2;
        int i0, i1, $i2, $i3;

        r0 := @this: java.util.AbstractList$SubAbstractList$SubAbstractListIterator;

        r1 := @parameter0: java.util.ListIterator;

        r2 := @parameter1: java.util.AbstractList$SubAbstractList;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator> = r1;

        r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.AbstractList$SubAbstractList subList> = r2;

        r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int start> = i0;

        $i2 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int start>;

        $i3 = i1 + $i2;

        r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int end> = $i3;

        return;
    }

    public void add(java.lang.Object)
    {
        java.util.AbstractList$SubAbstractList$SubAbstractListIterator r0;
        java.lang.Object r1;
        java.util.ListIterator $r2;
        java.util.AbstractList$SubAbstractList $r3;
        int $i0, $i1;

        r0 := @this: java.util.AbstractList$SubAbstractList$SubAbstractListIterator;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator>;

        interfaceinvoke $r2.<java.util.ListIterator: void add(java.lang.Object)>(r1);

        $r3 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.AbstractList$SubAbstractList subList>;

        virtualinvoke $r3.<java.util.AbstractList$SubAbstractList: void sizeChanged(boolean)>(1);

        $i0 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int end>;

        $i1 = 1 + $i0;

        r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int end> = $i1;

        return;
    }

    public boolean hasNext()
    {
        java.util.AbstractList$SubAbstractList$SubAbstractListIterator r0;
        java.util.ListIterator $r1;
        int $i0, $i1;

        r0 := @this: java.util.AbstractList$SubAbstractList$SubAbstractListIterator;

        $r1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator>;

        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int nextIndex()>();

        $i1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int end>;

        if $i0 >= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasPrevious()
    {
        java.util.AbstractList$SubAbstractList$SubAbstractListIterator r0;
        java.util.ListIterator $r1;
        int $i0, $i1;

        r0 := @this: java.util.AbstractList$SubAbstractList$SubAbstractListIterator;

        $r1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator>;

        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int previousIndex()>();

        $i1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int start>;

        if $i0 < $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        java.util.AbstractList$SubAbstractList$SubAbstractListIterator r0;
        java.util.ListIterator $r1, $r3;
        int $i0, $i1;
        java.util.NoSuchElementException $r2;
        java.lang.Object $r4;

        r0 := @this: java.util.AbstractList$SubAbstractList$SubAbstractListIterator;

        $r1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator>;

        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int nextIndex()>();

        $i1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int end>;

        if $i0 >= $i1 goto label1;

        $r3 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator>;

        $r4 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        return $r4;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }

    public int nextIndex()
    {
        java.util.AbstractList$SubAbstractList$SubAbstractListIterator r0;
        java.util.ListIterator $r1;
        int $i0, $i1, $i2;

        r0 := @this: java.util.AbstractList$SubAbstractList$SubAbstractListIterator;

        $r1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator>;

        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int nextIndex()>();

        $i1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int start>;

        $i2 = $i0 - $i1;

        return $i2;
    }

    public java.lang.Object previous()
    {
        java.util.AbstractList$SubAbstractList$SubAbstractListIterator r0;
        java.util.ListIterator $r1, $r3;
        int $i0, $i1;
        java.util.NoSuchElementException $r2;
        java.lang.Object $r4;

        r0 := @this: java.util.AbstractList$SubAbstractList$SubAbstractListIterator;

        $r1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator>;

        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int previousIndex()>();

        $i1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int start>;

        if $i0 < $i1 goto label1;

        $r3 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator>;

        $r4 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object previous()>();

        return $r4;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }

    public int previousIndex()
    {
        java.util.AbstractList$SubAbstractList$SubAbstractListIterator r0;
        int i0, $i1, $i2, $i3;
        java.util.ListIterator $r1;

        r0 := @this: java.util.AbstractList$SubAbstractList$SubAbstractListIterator;

        $r1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator>;

        i0 = interfaceinvoke $r1.<java.util.ListIterator: int previousIndex()>();

        $i1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int start>;

        if i0 < $i1 goto label1;

        $i2 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int start>;

        $i3 = i0 - $i2;

        return $i3;

     label1:
        return -1;
    }

    public void remove()
    {
        java.util.AbstractList$SubAbstractList$SubAbstractListIterator r0;
        java.util.ListIterator $r1;
        java.util.AbstractList$SubAbstractList $r2;
        int $i0, $i1;

        r0 := @this: java.util.AbstractList$SubAbstractList$SubAbstractListIterator;

        $r1 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator>;

        interfaceinvoke $r1.<java.util.ListIterator: void remove()>();

        $r2 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.AbstractList$SubAbstractList subList>;

        virtualinvoke $r2.<java.util.AbstractList$SubAbstractList: void sizeChanged(boolean)>(0);

        $i0 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int end>;

        $i1 = -1 + $i0;

        r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int end> = $i1;

        return;
    }

    public void set(java.lang.Object)
    {
        java.util.AbstractList$SubAbstractList$SubAbstractListIterator r0;
        java.lang.Object r1;
        java.util.ListIterator $r2;

        r0 := @this: java.util.AbstractList$SubAbstractList$SubAbstractListIterator;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.util.ListIterator iterator>;

        interfaceinvoke $r2.<java.util.ListIterator: void set(java.lang.Object)>(r1);

        return;
    }
}
