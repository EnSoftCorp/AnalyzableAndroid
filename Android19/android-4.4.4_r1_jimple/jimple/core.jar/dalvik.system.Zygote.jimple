public class dalvik.system.Zygote extends java.lang.Object
{
    public static final int DEBUG_ENABLE_ASSERT;
    public static final int DEBUG_ENABLE_CHECKJNI;
    public static final int DEBUG_ENABLE_DEBUGGER;
    public static final int DEBUG_ENABLE_JNI_LOGGING;
    public static final int DEBUG_ENABLE_SAFEMODE;
    public static final int MOUNT_EXTERNAL_MULTIUSER;
    public static final int MOUNT_EXTERNAL_MULTIUSER_ALL;
    public static final int MOUNT_EXTERNAL_NONE;
    public static final int MOUNT_EXTERNAL_SINGLEUSER;
    public static boolean systemInSafeMode;

    static void <clinit>()
    {
        <dalvik.system.Zygote: int MOUNT_EXTERNAL_SINGLEUSER> = 1;

        <dalvik.system.Zygote: int MOUNT_EXTERNAL_NONE> = 0;

        <dalvik.system.Zygote: int MOUNT_EXTERNAL_MULTIUSER_ALL> = 3;

        <dalvik.system.Zygote: int MOUNT_EXTERNAL_MULTIUSER> = 2;

        <dalvik.system.Zygote: int DEBUG_ENABLE_SAFEMODE> = 8;

        <dalvik.system.Zygote: int DEBUG_ENABLE_JNI_LOGGING> = 16;

        <dalvik.system.Zygote: int DEBUG_ENABLE_DEBUGGER> = 1;

        <dalvik.system.Zygote: int DEBUG_ENABLE_CHECKJNI> = 2;

        <dalvik.system.Zygote: int DEBUG_ENABLE_ASSERT> = 4;

        <dalvik.system.Zygote: boolean systemInSafeMode> = 0;

        return;
    }

    private void <init>()
    {
        dalvik.system.Zygote r0;

        r0 := @this: dalvik.system.Zygote;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void appendQuotedShellArgs(java.lang.StringBuilder, java.lang.String[])
    {
        java.lang.StringBuilder r0, $r3, $r5;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r2, $r4;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        $r3 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'");

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\'", "\'\\\'\'");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void execShell(java.lang.String)
    {
        java.lang.String r0, $r4;
        java.lang.String[] r1, $r3;
        libcore.io.ErrnoException r2, $r6;
        libcore.io.Os $r5;
        java.lang.RuntimeException $r7;

        r0 := @parameter0: java.lang.String;

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "/system/bin/sh";

        $r3[1] = "-c";

        $r3[2] = r0;

        r1 = $r3;

     label1:
        $r5 = <libcore.io.Libcore: libcore.io.Os os>;

        $r4 = r1[0];

        interfaceinvoke $r5.<libcore.io.Os: void execv(java.lang.String,java.lang.String[])>($r4, r1);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch libcore.io.ErrnoException from label1 to label2 with label3;
    }

    public static int fork()
    {
        int i0;

        staticinvoke <dalvik.system.Zygote: void preFork()>();

        i0 = staticinvoke <dalvik.system.Zygote: int nativeFork()>();

        staticinvoke <dalvik.system.Zygote: void postFork()>();

        return i0;
    }

    public static int forkAndSpecialize(int, int, int[], int, int[][], int, java.lang.String, java.lang.String)
    {
        int i0, i1, i2, i3, i4;
        int[] r0;
        int[][] r1;
        java.lang.String r2, r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: int[];

        i2 := @parameter3: int;

        r1 := @parameter4: int[][];

        i3 := @parameter5: int;

        r2 := @parameter6: java.lang.String;

        r3 := @parameter7: java.lang.String;

        staticinvoke <dalvik.system.Zygote: void preFork()>();

        i4 = staticinvoke <dalvik.system.Zygote: int nativeForkAndSpecialize(int,int,int[],int,int[][],int,java.lang.String,java.lang.String)>(i0, i1, r0, i2, r1, i3, r2, r3);

        staticinvoke <dalvik.system.Zygote: void postFork()>();

        return i4;
    }

    public static int forkSystemServer(int, int, int[], int, int[][], long, long)
    {
        int i0, i1, i2, i5;
        int[] r0;
        int[][] r1;
        long l3, l4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: int[];

        i2 := @parameter3: int;

        r1 := @parameter4: int[][];

        l3 := @parameter5: long;

        l4 := @parameter6: long;

        staticinvoke <dalvik.system.Zygote: void preFork()>();

        i5 = staticinvoke <dalvik.system.Zygote: int nativeForkSystemServer(int,int,int[],int,int[][],long,long)>(i0, i1, r0, i2, r1, l3, l4);

        staticinvoke <dalvik.system.Zygote: void postFork()>();

        return i5;
    }

    public static native int nativeFork();

    public static native int nativeForkAndSpecialize(int, int, int[], int, int[][], int, java.lang.String, java.lang.String);

    public static native int nativeForkSystemServer(int, int, int[], int, int[][], long, long);

    private static void postFork()
    {
        staticinvoke <java.lang.Daemons: void start()>();

        return;
    }

    private static void preFork()
    {
        staticinvoke <java.lang.Daemons: void stop()>();

        staticinvoke <dalvik.system.Zygote: void waitUntilAllThreadsStopped()>();

        return;
    }

    private static void waitUntilAllThreadsStopped()
    {
        java.io.File r0, $r2;
        java.lang.String[] $r3;
        int $i0;
        java.lang.InterruptedException $r4;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("/proc/self/task");

        r0 = $r2;

     label1:
        $r3 = virtualinvoke r0.<java.io.File: java.lang.String[] list()>();

        $i0 = lengthof $r3;

        if $i0 <= 1 goto label5;

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(10L);

     label3:
        goto label1;

     label4:
        $r4 := @caughtexception;

        goto label1;

     label5:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }
}
