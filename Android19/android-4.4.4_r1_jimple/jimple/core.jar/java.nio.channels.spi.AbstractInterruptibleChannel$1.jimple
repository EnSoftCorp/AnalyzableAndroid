class java.nio.channels.spi.AbstractInterruptibleChannel$1 extends java.lang.Object implements java.lang.Runnable
{
    final java.nio.channels.spi.AbstractInterruptibleChannel this$0;

    void <init>(java.nio.channels.spi.AbstractInterruptibleChannel)
    {
        java.nio.channels.spi.AbstractInterruptibleChannel$1 r0;
        java.nio.channels.spi.AbstractInterruptibleChannel r1;

        r0 := @this: java.nio.channels.spi.AbstractInterruptibleChannel$1;

        r1 := @parameter0: java.nio.channels.spi.AbstractInterruptibleChannel;

        r0.<java.nio.channels.spi.AbstractInterruptibleChannel$1: java.nio.channels.spi.AbstractInterruptibleChannel this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        java.nio.channels.spi.AbstractInterruptibleChannel$1 r0;
        java.nio.channels.spi.AbstractInterruptibleChannel $r2, $r3;
        java.io.IOException $r4;

        r0 := @this: java.nio.channels.spi.AbstractInterruptibleChannel$1;

     label1:
        $r2 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel$1: java.nio.channels.spi.AbstractInterruptibleChannel this$0>;

        $r2.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean interrupted> = 1;

        $r3 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel$1: java.nio.channels.spi.AbstractInterruptibleChannel this$0>;

        virtualinvoke $r3.<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>();

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
