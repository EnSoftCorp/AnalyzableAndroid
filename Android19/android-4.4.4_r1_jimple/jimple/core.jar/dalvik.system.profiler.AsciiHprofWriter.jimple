public final class dalvik.system.profiler.AsciiHprofWriter extends java.lang.Object
{
    private static final java.util.Comparator SAMPLE_COMPARATOR;
    private final dalvik.system.profiler.HprofData data;
    private final java.io.PrintWriter out;

    static void <clinit>()
    {
        dalvik.system.profiler.AsciiHprofWriter$1 $r0;

        $r0 = new dalvik.system.profiler.AsciiHprofWriter$1;

        specialinvoke $r0.<dalvik.system.profiler.AsciiHprofWriter$1: void <init>()>();

        <dalvik.system.profiler.AsciiHprofWriter: java.util.Comparator SAMPLE_COMPARATOR> = $r0;

        return;
    }

    private void <init>(dalvik.system.profiler.HprofData, java.io.OutputStream)
    {
        dalvik.system.profiler.AsciiHprofWriter r0;
        dalvik.system.profiler.HprofData r1;
        java.io.OutputStream r2;
        java.io.PrintWriter $r3;

        r0 := @this: dalvik.system.profiler.AsciiHprofWriter;

        r1 := @parameter0: dalvik.system.profiler.HprofData;

        r2 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<dalvik.system.profiler.AsciiHprofWriter: dalvik.system.profiler.HprofData data> = r1;

        $r3 = new java.io.PrintWriter;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(r2);

        r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out> = $r3;

        return;
    }

    private void write() throws java.io.IOException
    {
        dalvik.system.profiler.AsciiHprofWriter r0;
        java.util.Iterator r1, r3, r7;
        java.util.ArrayList r2, $r21;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9;
        java.util.Date r4, $r25;
        java.io.PrintWriter r5, r11, r13, $r27, $r34, $r36, $r53, $r57;
        java.lang.Object[] r6, r10, r15, $r28, $r31, $r50;
        double d0, d1, $d2, $d3, $d4, $d5;
        dalvik.system.profiler.HprofData$Sample r8, r12;
        dalvik.system.profiler.HprofData$StackTrace r9, r14;
        java.lang.StackTraceElement[] r16, $r43, $r45;
        java.lang.StackTraceElement r17, $r41, $r47;
        dalvik.system.profiler.HprofData $r18, $r22, $r26;
        java.util.List $r19;
        dalvik.system.profiler.HprofData$ThreadEvent r20;
        boolean $z0, $z1, $z2;
        java.util.Set $r23;
        java.util.Comparator $r24;
        long $l5;
        java.lang.Integer $r30, $r37, $r39, $r44, $r54, $r55;
        java.lang.Object $r33, $r46, $r56;
        java.lang.Double $r38, $r40;
        java.lang.String $r42, $r49;

        r0 := @this: dalvik.system.profiler.AsciiHprofWriter;

        $r18 = r0.<dalvik.system.profiler.AsciiHprofWriter: dalvik.system.profiler.HprofData data>;

        $r19 = virtualinvoke $r18.<dalvik.system.profiler.HprofData: java.util.List getThreadHistory()>();

        r1 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r56 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r20 = (dalvik.system.profiler.HprofData$ThreadEvent) $r56;

        $r57 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        virtualinvoke $r57.<java.io.PrintWriter: void println(java.lang.Object)>(r20);

        goto label1;

     label2:
        $r21 = new java.util.ArrayList;

        $r22 = r0.<dalvik.system.profiler.AsciiHprofWriter: dalvik.system.profiler.HprofData data>;

        $r23 = virtualinvoke $r22.<dalvik.system.profiler.HprofData: java.util.Set getSamples()>();

        specialinvoke $r21.<java.util.ArrayList: void <init>(java.util.Collection)>($r23);

        r2 = $r21;

        $r24 = <dalvik.system.profiler.AsciiHprofWriter: java.util.Comparator SAMPLE_COMPARATOR>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r2, $r24);

        i0 = 0;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r46 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r12 = (dalvik.system.profiler.HprofData$Sample) $r46;

        r14 = r12.<dalvik.system.profiler.HprofData$Sample: dalvik.system.profiler.HprofData$StackTrace stackTrace>;

        $i7 = r12.<dalvik.system.profiler.HprofData$Sample: int count>;

        i0 = i0 + $i7;

        r13 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        r15 = newarray (java.lang.Object)[2];

        $i8 = r14.<dalvik.system.profiler.HprofData$StackTrace: int stackTraceId>;

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        r15[0] = $r54;

        $i9 = r14.<dalvik.system.profiler.HprofData$StackTrace: int threadId>;

        $r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        r15[1] = $r55;

        virtualinvoke r13.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("TRACE %d: (thread=%d)\n", r15);

        r16 = r14.<dalvik.system.profiler.HprofData$StackTrace: java.lang.StackTraceElement[] stackFrames>;

        i3 = lengthof r16;

        i4 = 0;

     label4:
        if i4 >= i3 goto label3;

        r17 = r16[i4];

        $r53 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        $r50 = newarray (java.lang.Object)[1];

        $r50[0] = r17;

        virtualinvoke $r53.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("\t%s\n", $r50);

        i4 = i4 + 1;

        goto label4;

     label5:
        $r25 = new java.util.Date;

        $r26 = r0.<dalvik.system.profiler.AsciiHprofWriter: dalvik.system.profiler.HprofData data>;

        $l5 = virtualinvoke $r26.<dalvik.system.profiler.HprofData: long getStartMillis()>();

        specialinvoke $r25.<java.util.Date: void <init>(long)>($l5);

        r4 = $r25;

        r5 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        r6 = newarray (java.lang.Object)[6];

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r6[0] = $r30;

        r6[1] = r4;

        r6[2] = r4;

        r6[3] = r4;

        r6[4] = r4;

        r6[5] = r4;

        virtualinvoke r5.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("CPU SAMPLES BEGIN (total = %d) %ta %tb %td %tT %tY\n", r6);

        $r27 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        $r28 = newarray (java.lang.Object)[0];

        virtualinvoke $r27.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("rank   self  accum   count trace method\n", $r28);

        i1 = 0;

        d0 = 0.0;

        r7 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r33 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (dalvik.system.profiler.HprofData$Sample) $r33;

        i1 = i1 + 1;

        r9 = r8.<dalvik.system.profiler.HprofData$Sample: dalvik.system.profiler.HprofData$StackTrace stackTrace>;

        i2 = r8.<dalvik.system.profiler.HprofData$Sample: int count>;

        $d2 = (double) i2;

        $d3 = (double) i0;

        d1 = $d2 / $d3;

        d0 = d0 + d1;

        r11 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        r10 = newarray (java.lang.Object)[7];

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r10[0] = $r37;

        $d4 = 100.0 * d1;

        $r40 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        r10[1] = $r40;

        $d5 = 100.0 * d0;

        $r38 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        r10[2] = $r38;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        r10[3] = $r39;

        $i6 = r9.<dalvik.system.profiler.HprofData$StackTrace: int stackTraceId>;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        r10[4] = $r44;

        $r45 = r9.<dalvik.system.profiler.HprofData$StackTrace: java.lang.StackTraceElement[] stackFrames>;

        $r41 = $r45[0];

        $r42 = virtualinvoke $r41.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        r10[5] = $r42;

        $r43 = r9.<dalvik.system.profiler.HprofData$StackTrace: java.lang.StackTraceElement[] stackFrames>;

        $r47 = $r43[0];

        $r49 = virtualinvoke $r47.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        r10[6] = $r49;

        virtualinvoke r11.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("% 4d% 6.2f%%% 6.2f%% % 7d % 5d %s.%s\n", r10);

        goto label6;

     label7:
        $r36 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        $r31 = newarray (java.lang.Object)[0];

        virtualinvoke $r36.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("CPU SAMPLES END\n", $r31);

        $r34 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        virtualinvoke $r34.<java.io.PrintWriter: void flush()>();

        return;
    }

    public static void write(dalvik.system.profiler.HprofData, java.io.OutputStream) throws java.io.IOException
    {
        dalvik.system.profiler.HprofData r0;
        java.io.OutputStream r1;
        dalvik.system.profiler.AsciiHprofWriter $r2;

        r0 := @parameter0: dalvik.system.profiler.HprofData;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = new dalvik.system.profiler.AsciiHprofWriter;

        specialinvoke $r2.<dalvik.system.profiler.AsciiHprofWriter: void <init>(dalvik.system.profiler.HprofData,java.io.OutputStream)>(r0, r1);

        specialinvoke $r2.<dalvik.system.profiler.AsciiHprofWriter: void write()>();

        return;
    }
}
