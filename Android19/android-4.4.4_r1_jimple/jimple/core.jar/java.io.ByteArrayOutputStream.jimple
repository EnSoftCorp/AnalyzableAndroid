public class java.io.ByteArrayOutputStream extends java.io.OutputStream
{
    protected byte[] buf;
    protected int count;

    public void <init>()
    {
        java.io.ByteArrayOutputStream r0;
        byte[] $r1;

        r0 := @this: java.io.ByteArrayOutputStream;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r1 = newarray (byte)[32];

        r0.<java.io.ByteArrayOutputStream: byte[] buf> = $r1;

        return;
    }

    public void <init>(int)
    {
        java.io.ByteArrayOutputStream r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        byte[] $r2;

        r0 := @this: java.io.ByteArrayOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        if i0 < 0 goto label1;

        $r2 = newarray (byte)[i0];

        r0.<java.io.ByteArrayOutputStream: byte[] buf> = $r2;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size < 0");

        throw $r1;
    }

    private void expand(int)
    {
        java.io.ByteArrayOutputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        byte[] r1, $r2, $r3;

        r0 := @this: java.io.ByteArrayOutputStream;

        i0 := @parameter0: int;

        $i1 = r0.<java.io.ByteArrayOutputStream: int count>;

        $i3 = i0 + $i1;

        $r2 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $i2 = lengthof $r2;

        if $i3 > $i2 goto label1;

        return;

     label1:
        $i4 = r0.<java.io.ByteArrayOutputStream: int count>;

        $i5 = i0 + $i4;

        $i6 = 2 * $i5;

        r1 = newarray (byte)[$i6];

        $r3 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $i7 = r0.<java.io.ByteArrayOutputStream: int count>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i7);

        r0.<java.io.ByteArrayOutputStream: byte[] buf> = r1;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.ByteArrayOutputStream r0;

        r0 := @this: java.io.ByteArrayOutputStream;

        specialinvoke r0.<java.io.OutputStream: void close()>();

        return;
    }

    public void reset()
    {
        java.io.ByteArrayOutputStream r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: java.io.ByteArrayOutputStream;

        entermonitor r0;

     label1:
        r0.<java.io.ByteArrayOutputStream: int count> = 0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int size()
    {
        java.io.ByteArrayOutputStream r0;
        int $i0;

        r0 := @this: java.io.ByteArrayOutputStream;

        $i0 = r0.<java.io.ByteArrayOutputStream: int count>;

        return $i0;
    }

    public byte[] toByteArray()
    {
        java.io.ByteArrayOutputStream r0;
        java.lang.Throwable r1, $r4;
        byte[] r2, $r3;
        int $i0, $i1;

        r0 := @this: java.io.ByteArrayOutputStream;

        entermonitor r0;

     label1:
        $i0 = r0.<java.io.ByteArrayOutputStream: int count>;

        r2 = newarray (byte)[$i0];

        $r3 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $i1 = r0.<java.io.ByteArrayOutputStream: int count>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i1);

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        java.io.ByteArrayOutputStream r0;
        java.lang.String $r1;
        int $i0;
        byte[] $r2;

        r0 := @this: java.io.ByteArrayOutputStream;

        $r1 = new java.lang.String;

        $r2 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $i0 = r0.<java.io.ByteArrayOutputStream: int count>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int)>($r2, 0, $i0);

        return $r1;
    }

    public java.lang.String toString(int)
    {
        java.io.ByteArrayOutputStream r0;
        int i0, i1, $i2, $i3, $i4, $i7, $i8;
        char[] r1;
        java.lang.String $r2;
        byte[] $r3;
        byte $b5;
        short $s6;
        char $c9;

        r0 := @this: java.io.ByteArrayOutputStream;

        i0 := @parameter0: int;

        $i2 = virtualinvoke r0.<java.io.ByteArrayOutputStream: int size()>();

        r1 = newarray (char)[$i2];

        i1 = 0;

     label1:
        $i3 = lengthof r1;

        if i1 >= $i3 goto label2;

        $i4 = i0 & 255;

        $i7 = $i4 << 8;

        $r3 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $b5 = $r3[i1];

        $s6 = 255 & $b5;

        $i8 = $i7 | $s6;

        $c9 = (char) $i8;

        r1[i1] = $c9;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public java.lang.String toString(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.ByteArrayOutputStream r0;
        java.lang.String r1, $r2;
        int $i0;
        byte[] $r3;

        r0 := @this: java.io.ByteArrayOutputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.String;

        $r3 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $i0 = r0.<java.io.ByteArrayOutputStream: int count>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r3, 0, $i0, r1);

        return $r2;
    }

    public void write(int)
    {
        java.io.ByteArrayOutputStream r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Throwable r1, $r4;
        byte[] r2, $r3;
        byte $b5;

        r0 := @this: java.io.ByteArrayOutputStream;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $i3 = r0.<java.io.ByteArrayOutputStream: int count>;

        $r3 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $i2 = lengthof $r3;

        if $i3 != $i2 goto label2;

        specialinvoke r0.<java.io.ByteArrayOutputStream: void expand(int)>(1);

     label2:
        r2 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;

        i1 = r0.<java.io.ByteArrayOutputStream: int count>;

        $i4 = i1 + 1;

        r0.<java.io.ByteArrayOutputStream: int count> = $i4;

        $b5 = (byte) i0;

        r2[i1] = $b5;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void write(byte[], int, int)
    {
        java.io.ByteArrayOutputStream r0;
        byte[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Throwable r2, $r4;

        r0 := @this: java.io.ByteArrayOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

     label2:
        if i1 != 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        specialinvoke r0.<java.io.ByteArrayOutputStream: void expand(int)>(i1);

        $r3 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $i3 = r0.<java.io.ByteArrayOutputStream: int count>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, $i3, i1);

        $i4 = r0.<java.io.ByteArrayOutputStream: int count>;

        $i5 = i1 + $i4;

        r0.<java.io.ByteArrayOutputStream: int count> = $i5;

     label5:
        goto label3;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.ByteArrayOutputStream r0;
        java.io.OutputStream r1;
        java.lang.Throwable r2, $r4;
        int $i0;
        byte[] $r3;

        r0 := @this: java.io.ByteArrayOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        entermonitor r0;

     label1:
        $r3 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $i0 = r0.<java.io.ByteArrayOutputStream: int count>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
