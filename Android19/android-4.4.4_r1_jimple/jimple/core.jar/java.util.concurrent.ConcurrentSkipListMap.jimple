public class java.util.concurrent.ConcurrentSkipListMap extends java.util.AbstractMap implements java.util.concurrent.ConcurrentNavigableMap, java.lang.Cloneable, java.io.Serializable
{
    private static final java.lang.Object BASE_HEADER;
    private static final int EQ;
    private static final int GT;
    private static final int LT;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long headOffset;
    private static final java.util.Random seedGenerator;
    private static final long serialVersionUID;
    private final java.util.Comparator comparator;
    private transient java.util.concurrent.ConcurrentNavigableMap descendingMap;
    private transient java.util.concurrent.ConcurrentSkipListMap$EntrySet entrySet;
    private transient volatile java.util.concurrent.ConcurrentSkipListMap$HeadIndex head;
    private transient java.util.concurrent.ConcurrentSkipListMap$KeySet keySet;
    private transient int randomSeed;
    private transient java.util.concurrent.ConcurrentSkipListMap$Values values;

    static void <clinit>()
    {
        java.lang.Exception r0, $r7;
        java.util.Random $r1;
        java.lang.Object $r2;
        sun.misc.Unsafe $r3, $r5;
        java.lang.Class $r4;
        java.lang.reflect.Field $r6;
        long $l0;
        java.lang.Error $r8;

        <java.util.concurrent.ConcurrentSkipListMap: long serialVersionUID> = -8627078645895051609L;

        <java.util.concurrent.ConcurrentSkipListMap: int LT> = 2;

        <java.util.concurrent.ConcurrentSkipListMap: int GT> = 0;

        <java.util.concurrent.ConcurrentSkipListMap: int EQ> = 1;

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        <java.util.concurrent.ConcurrentSkipListMap: java.util.Random seedGenerator> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <java.util.concurrent.ConcurrentSkipListMap: java.lang.Object BASE_HEADER> = $r2;

     label1:
        $r3 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentSkipListMap: sun.misc.Unsafe UNSAFE> = $r3;

        $r5 = <java.util.concurrent.ConcurrentSkipListMap: sun.misc.Unsafe UNSAFE>;

        $r4 = class "java/util/concurrent/ConcurrentSkipListMap";

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("head");

        $l0 = virtualinvoke $r5.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r6);

        <java.util.concurrent.ConcurrentSkipListMap: long headOffset> = $l0;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        r0 = $r7;

        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r8;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.Comparator comparator> = null;

        virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void initialize()>();

        return;
    }

    public void <init>(java.util.Comparator)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.Comparator r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.Comparator comparator> = r1;

        virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void initialize()>();

        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.Map r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.Comparator comparator> = null;

        virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void initialize()>();

        virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void putAll(java.util.Map)>(r1);

        return;
    }

    public void <init>(java.util.SortedMap)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.SortedMap r1;
        java.util.Comparator $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.util.SortedMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.SortedMap: java.util.Comparator comparator()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.Comparator comparator> = $r2;

        virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void initialize()>();

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void buildFromSorted(java.util.SortedMap)>(r1);

        return;
    }

    static java.lang.Object access$000()
    {
        java.lang.Object $r0;

        $r0 = <java.util.concurrent.ConcurrentSkipListMap: java.lang.Object BASE_HEADER>;

        return $r0;
    }

    private void addIndex(java.util.concurrent.ConcurrentSkipListMap$Index, java.util.concurrent.ConcurrentSkipListMap$HeadIndex, int)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Index r1, r4, r5, r6;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex r2;
        int i0, i1, i2, i3;
        java.lang.Comparable r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r7, $r8;
        java.lang.Object $r9, $r12, $r13;
        boolean $z0, $z1, $z2, $z3;
        java.lang.NullPointerException $r14;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Index;

        r2 := @parameter1: java.util.concurrent.ConcurrentSkipListMap$HeadIndex;

        i0 := @parameter2: int;

        i1 = i0;

        $r8 = r1.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        $r9 = $r8.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Comparable comparable(java.lang.Object)>($r9);

        if r3 != null goto label1;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>()>();

        throw $r14;

     label1:
        i2 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        r4 = r2;

        r5 = r4.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        r6 = r1;

     label2:
        if r5 == null goto label4;

        r7 = r5.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        $r12 = r7.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        i3 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r12);

        $r13 = r7.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r13 != null goto label3;

        $z3 = virtualinvoke r4.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean unlink(java.util.concurrent.ConcurrentSkipListMap$Index)>(r5);

        if $z3 == 0 goto label1;

        r5 = r4.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        goto label2;

     label3:
        if i3 <= 0 goto label4;

        r4 = r5;

        r5 = r5.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        goto label2;

     label4:
        if i2 != i1 goto label7;

        $z0 = virtualinvoke r6.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean indexesDeletedNode()>();

        if $z0 == 0 goto label6;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNode(java.lang.Comparable)>(r3);

     label5:
        return;

     label6:
        $z2 = virtualinvoke r4.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean link(java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index)>(r5, r6);

        if $z2 == 0 goto label1;

        i1 = i1 + -1;

        if i1 != 0 goto label7;

        $z1 = virtualinvoke r6.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean indexesDeletedNode()>();

        if $z1 == 0 goto label5;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNode(java.lang.Comparable)>(r3);

        return;

     label7:
        i2 = i2 + -1;

        if i2 < i1 goto label8;

        if i2 >= i0 goto label8;

        r6 = r6.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index down>;

     label8:
        r4 = r4.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index down>;

        r5 = r4.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        goto label2;
    }

    private void buildFromSorted(java.util.SortedMap)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.SortedMap r1;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex r2, r13, r15, $r22;
        java.util.concurrent.ConcurrentSkipListMap$Node r3, r10, $r20, $r23;
        java.util.ArrayList r4, $r14;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        java.util.concurrent.ConcurrentSkipListMap$Index r5, r11, r12, $r19, $r24;
        java.util.Iterator r6;
        java.util.Map$Entry r7;
        java.lang.Object r8, r9, $r17, $r21;
        java.util.Set $r16;
        boolean $z0;
        java.lang.NullPointerException $r18, $r26;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.util.SortedMap;

        if r1 != null goto label01;

        $r26 = new java.lang.NullPointerException;

        specialinvoke $r26.<java.lang.NullPointerException: void <init>()>();

        throw $r26;

     label01:
        r2 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r4 = $r14;

        i0 = 0;

     label02:
        $i4 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        if i0 > $i4 goto label03;

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        i0 = i0 + 1;

        goto label02;

     label03:
        r5 = r2;

        i1 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

     label04:
        if i1 <= 0 goto label05;

        virtualinvoke r4.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i1, r5);

        r5 = r5.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index down>;

        i1 = i1 + -1;

        goto label04;

     label05:
        $r16 = interfaceinvoke r1.<java.util.SortedMap: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r17 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r17;

        i2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: int randomLevel()>();

        $i5 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        if i2 <= $i5 goto label07;

        $i8 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        i2 = 1 + $i8;

     label07:
        r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        if r8 == null goto label08;

        if r9 != null goto label09;

     label08:
        $r18 = new java.lang.NullPointerException;

        specialinvoke $r18.<java.lang.NullPointerException: void <init>()>();

        throw $r18;

     label09:
        $r20 = new java.util.concurrent.ConcurrentSkipListMap$Node;

        specialinvoke $r20.<java.util.concurrent.ConcurrentSkipListMap$Node: void <init>(java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentSkipListMap$Node)>(r8, r9, null);

        r10 = $r20;

        r3.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next> = r10;

        r3 = r10;

        if i2 <= 0 goto label06;

        i3 = 1;

        r11 = null;

        r13 = r2;

     label10:
        if i3 > i2 goto label16;

        $r19 = new java.util.concurrent.ConcurrentSkipListMap$Index;

        specialinvoke $r19.<java.util.concurrent.ConcurrentSkipListMap$Index: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index)>(r10, r11, null);

        r12 = $r19;

        $i6 = r13.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        if i3 <= $i6 goto label15;

        $r22 = new java.util.concurrent.ConcurrentSkipListMap$HeadIndex;

        $r23 = r13.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        specialinvoke $r22.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index,int)>($r23, r13, r12, i3);

        r15 = $r22;

     label11:
        $i7 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        if i3 >= $i7 goto label13;

        $r21 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r24 = (java.util.concurrent.ConcurrentSkipListMap$Index) $r21;

        $r24.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right> = r12;

        virtualinvoke r4.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i3, r12);

     label12:
        i3 = i3 + 1;

        r11 = r12;

        r13 = r15;

        goto label10;

     label13:
        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r12);

        goto label12;

     label14:
        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head> = r2;

        return;

     label15:
        r15 = r13;

        goto label11;

     label16:
        r2 = r13;

        goto label06;
    }

    private boolean casHead(java.util.concurrent.ConcurrentSkipListMap$HeadIndex, java.util.concurrent.ConcurrentSkipListMap$HeadIndex)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$HeadIndex;

        r2 := @parameter1: java.util.concurrent.ConcurrentSkipListMap$HeadIndex;

        $r3 = <java.util.concurrent.ConcurrentSkipListMap: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentSkipListMap: long headOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    private void clearIndexToFirst()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Index r1, r2, $r4;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex $r3;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

     label1:
        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

     label2:
        r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean indexesDeletedNode()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean unlink(java.util.concurrent.ConcurrentSkipListMap$Index)>(r2);

        if $z1 == 0 goto label1;

     label3:
        r1 = r1.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index down>;

        if r1 != null goto label2;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        $r4 = $r3.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        if $r4 != null goto label4;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void tryReduceLevel()>();

     label4:
        return;
    }

    private java.lang.Comparable comparable(java.lang.Object) throws java.lang.ClassCastException
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        java.util.Comparator $r2, $r5;
        java.lang.Comparable $r3;
        java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator $r4;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label1:
        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.Comparator comparator>;

        if $r2 == null goto label2;

        $r4 = new java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator;

        $r5 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.Comparator comparator>;

        specialinvoke $r4.<java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator: void <init>(java.lang.Object,java.util.Comparator)>(r1, $r5);

        return $r4;

     label2:
        $r3 = (java.lang.Comparable) r1;

        return $r3;
    }

    private java.lang.Object doGet(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r4;
        java.lang.Comparable r2;
        java.util.concurrent.ConcurrentSkipListMap$Node r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Comparable comparable(java.lang.Object)>(r1);

     label1:
        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNode(java.lang.Comparable)>(r2);

        if r3 != null goto label2;

        return null;

     label2:
        r4 = r3.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r4 == null goto label1;

        return r4;
    }

    private java.lang.Object doPut(java.lang.Object, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2, r8, $r11, $r12;
        boolean z0, $z1, $z2;
        java.lang.Comparable r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r4, r5, r6, r7, $r9, $r10;
        int i0, i1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Comparable comparable(java.lang.Object)>(r1);

     label1:
        r4 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findPredecessor(java.lang.Comparable)>(r3);

        r5 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

     label2:
        if r5 == null goto label6;

        r7 = r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        $r10 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r5 != $r10 goto label1;

        r8 = r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r8 != null goto label3;

        virtualinvoke r5.<java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r4, r7);

        goto label1;

     label3:
        if r8 == r5 goto label1;

        $r12 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r12 == null goto label1;

        $r11 = r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        i1 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r11);

        if i1 <= 0 goto label4;

        r4 = r5;

        r5 = r7;

        goto label2;

     label4:
        if i1 != 0 goto label6;

        if z0 != 0 goto label5;

        $z2 = virtualinvoke r5.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casValue(java.lang.Object,java.lang.Object)>(r8, r2);

        if $z2 == 0 goto label1;

     label5:
        return r8;

     label6:
        $r9 = new java.util.concurrent.ConcurrentSkipListMap$Node;

        specialinvoke $r9.<java.util.concurrent.ConcurrentSkipListMap$Node: void <init>(java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentSkipListMap$Node)>(r1, r2, r5);

        r6 = $r9;

        $z1 = virtualinvoke r4.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casNext(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r5, r6);

        if $z1 == 0 goto label1;

        i0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: int randomLevel()>();

        if i0 <= 0 goto label7;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void insertIndex(java.util.concurrent.ConcurrentSkipListMap$Node,int)>(r6, i0);

     label7:
        return null;
    }

    private java.util.concurrent.ConcurrentSkipListMap$Node findNode(java.lang.Comparable)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Comparable r1;
        java.util.concurrent.ConcurrentSkipListMap$Node r2, r3, r4, $r6;
        java.lang.Object r5, $r7, $r8;
        int i0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Comparable;

     label1:
        r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findPredecessor(java.lang.Comparable)>(r1);

        r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

     label2:
        if r3 != null goto label4;

        r3 = null;

     label3:
        return r3;

     label4:
        r4 = r3.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        $r6 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r3 != $r6 goto label1;

        r5 = r3.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r5 != null goto label5;

        virtualinvoke r3.<java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r2, r4);

        goto label1;

     label5:
        if r5 == r3 goto label1;

        $r7 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r7 == null goto label1;

        $r8 = r3.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        i0 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r8);

        if i0 == 0 goto label3;

        if i0 >= 0 goto label6;

        return null;

     label6:
        r2 = r3;

        r3 = r4;

        goto label2;
    }

    private java.util.concurrent.ConcurrentSkipListMap$Node findPredecessor(java.lang.Comparable)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Comparable r1;
        java.util.concurrent.ConcurrentSkipListMap$Index r2, r3, r4;
        java.util.concurrent.ConcurrentSkipListMap$Node r5, $r7;
        java.lang.Object r6, $r8;
        int $i0;
        boolean $z0;
        java.lang.NullPointerException $r9;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Comparable;

        if r1 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();

        throw $r9;

     label1:
        r2 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

     label2:
        if r3 == null goto label4;

        r5 = r3.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        r6 = r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        $r8 = r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r8 != null goto label3;

        $z0 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean unlink(java.util.concurrent.ConcurrentSkipListMap$Index)>(r3);

        if $z0 == 0 goto label1;

        r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        goto label2;

     label3:
        $i0 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>(r6);

        if $i0 <= 0 goto label4;

        r2 = r3;

        r3 = r3.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        goto label2;

     label4:
        r4 = r2.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index down>;

        if r4 == null goto label5;

        r2 = r4;

        r3 = r4.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        goto label2;

     label5:
        $r7 = r2.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        return $r7;
    }

    private java.util.concurrent.ConcurrentSkipListMap$Node findPredecessorOfLast()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Index r1, r2, r3;
        java.util.concurrent.ConcurrentSkipListMap$Node $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

     label1:
        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

     label2:
        r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        if r2 == null goto label4;

        $z0 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean indexesDeletedNode()>();

        if $z0 == 0 goto label3;

        virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean unlink(java.util.concurrent.ConcurrentSkipListMap$Index)>(r2);

        goto label1;

     label3:
        $r5 = r2.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        $r6 = $r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if $r6 == null goto label4;

        r1 = r2;

        goto label2;

     label4:
        r3 = r1.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index down>;

        if r3 == null goto label5;

        r1 = r3;

        goto label2;

     label5:
        $r4 = r1.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        return $r4;
    }

    private void insertIndex(java.util.concurrent.ConcurrentSkipListMap$Node, int)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1, r7;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex r2, r6, r8, r9, $r15;
        java.util.concurrent.ConcurrentSkipListMap$Index[] r3, $r12;
        java.util.concurrent.ConcurrentSkipListMap$Index r4, r5, r10, r11, $r13, $r14, $r16, $r17;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Node;

        i0 := @parameter1: int;

        r2 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        i1 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        if i0 > i1 goto label3;

        i6 = 1;

        r11 = null;

     label1:
        if i6 > i0 goto label2;

        $r16 = new java.util.concurrent.ConcurrentSkipListMap$Index;

        specialinvoke $r16.<java.util.concurrent.ConcurrentSkipListMap$Index: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index)>(r1, r11, null);

        r10 = $r16;

        i6 = i6 + 1;

        r11 = r10;

        goto label1;

     label2:
        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void addIndex(java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$HeadIndex,int)>(r11, r2, i0);

        return;

     label3:
        i2 = i1 + 1;

        $i8 = i2 + 1;

        $r12 = newarray (java.util.concurrent.ConcurrentSkipListMap$Index)[$i8];

        r3 = (java.util.concurrent.ConcurrentSkipListMap$Index[]) $r12;

        i3 = 1;

        r4 = null;

     label4:
        if i3 > i2 goto label5;

        $r17 = new java.util.concurrent.ConcurrentSkipListMap$Index;

        specialinvoke $r17.<java.util.concurrent.ConcurrentSkipListMap$Index: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index)>(r1, r4, null);

        r5 = $r17;

        r3[i3] = r5;

        i3 = i3 + 1;

        r4 = r5;

        goto label4;

     label5:
        r6 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        i4 = r6.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        if i2 > i4 goto label7;

        i7 = i2;

     label6:
        $r13 = r3[i7];

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void addIndex(java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$HeadIndex,int)>($r13, r6, i7);

        return;

     label7:
        r7 = r6.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        i5 = i4 + 1;

        r8 = r6;

     label8:
        if i5 > i2 goto label9;

        $r15 = new java.util.concurrent.ConcurrentSkipListMap$HeadIndex;

        $r14 = r3[i5];

        specialinvoke $r15.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index,int)>(r7, r8, $r14, i5);

        r9 = $r15;

        i5 = i5 + 1;

        r8 = r9;

        goto label8;

     label9:
        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: boolean casHead(java.util.concurrent.ConcurrentSkipListMap$HeadIndex,java.util.concurrent.ConcurrentSkipListMap$HeadIndex)>(r6, r8);

        if $z0 == 0 goto label5;

        i7 = i4;

        goto label6;
    }

    private int randomLevel()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        i0 = r0.<java.util.concurrent.ConcurrentSkipListMap: int randomSeed>;

        $i5 = i0 << 13;

        i1 = i0 ^ $i5;

        $i6 = i1 >>> 17;

        i2 = i1 ^ $i6;

        $i7 = i2 << 5;

        i3 = i2 ^ $i7;

        r0.<java.util.concurrent.ConcurrentSkipListMap: int randomSeed> = i3;

        $i8 = -2147483647 & i3;

        if $i8 == 0 goto label2;

        i4 = 0;

     label1:
        return i4;

     label2:
        i4 = 1;

     label3:
        i3 = i3 >>> 1;

        $i9 = i3 & 1;

        if $i9 == 0 goto label1;

        i4 = i4 + 1;

        goto label3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.io.ObjectInputStream r1;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex r2, r10, r13, $r18;
        java.util.concurrent.ConcurrentSkipListMap$Node r3, r8, $r14, $r22;
        java.util.ArrayList r4, $r12;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        java.util.concurrent.ConcurrentSkipListMap$Index r5, r9, r11, $r15, $r16;
        java.lang.Object r6, r7, $r17;
        java.lang.NullPointerException $r20;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void initialize()>();

        r2 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r4 = $r12;

        i0 = 0;

     label01:
        $i4 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        if i0 > $i4 goto label02;

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        i0 = i0 + 1;

        goto label01;

     label02:
        r5 = r2;

        i1 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

     label03:
        if i1 <= 0 goto label05;

        virtualinvoke r4.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i1, r5);

        r5 = r5.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index down>;

        i1 = i1 + -1;

        goto label03;

     label04:
        r2 = r10;

     label05:
        r6 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if r6 != null goto label06;

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head> = r2;

        return;

     label06:
        r7 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if r7 != null goto label07;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>()>();

        throw $r20;

     label07:
        i2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: int randomLevel()>();

        $i5 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        if i2 <= $i5 goto label08;

        $i8 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        i2 = 1 + $i8;

     label08:
        $r14 = new java.util.concurrent.ConcurrentSkipListMap$Node;

        specialinvoke $r14.<java.util.concurrent.ConcurrentSkipListMap$Node: void <init>(java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentSkipListMap$Node)>(r6, r7, null);

        r8 = $r14;

        r3.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next> = r8;

        r3 = r8;

        if i2 <= 0 goto label05;

        i3 = 1;

        r9 = null;

        r10 = r2;

     label09:
        if i3 > i2 goto label04;

        $r15 = new java.util.concurrent.ConcurrentSkipListMap$Index;

        specialinvoke $r15.<java.util.concurrent.ConcurrentSkipListMap$Index: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index)>(r8, r9, null);

        r11 = $r15;

        $i6 = r10.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        if i3 <= $i6 goto label13;

        $r18 = new java.util.concurrent.ConcurrentSkipListMap$HeadIndex;

        $r22 = r10.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        specialinvoke $r18.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index,int)>($r22, r10, r11, i3);

        r13 = $r18;

     label10:
        $i7 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        if i3 >= $i7 goto label12;

        $r17 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r16 = (java.util.concurrent.ConcurrentSkipListMap$Index) $r17;

        $r16.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right> = r11;

        virtualinvoke r4.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i3, r11);

     label11:
        i3 = i3 + 1;

        r9 = r11;

        r10 = r13;

        goto label09;

     label12:
        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r11);

        goto label11;

     label13:
        r13 = r10;

        goto label10;
    }

    static final java.util.List toList(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.ArrayList r1, $r3;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @parameter0: java.util.Collection;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return r1;
    }

    private void tryReduceLevel()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex r1, r2, r3;
        int $i0;
        java.util.concurrent.ConcurrentSkipListMap$Index $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        $i0 = r1.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level>;

        if $i0 <= 3 goto label1;

        $r4 = r1.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Index down>;

        r2 = (java.util.concurrent.ConcurrentSkipListMap$HeadIndex) $r4;

        if r2 == null goto label1;

        $r5 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Index down>;

        r3 = (java.util.concurrent.ConcurrentSkipListMap$HeadIndex) $r5;

        if r3 == null goto label1;

        $r6 = r3.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        if $r6 != null goto label1;

        $r7 = r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        if $r7 != null goto label1;

        $r8 = r1.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        if $r8 != null goto label1;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: boolean casHead(java.util.concurrent.ConcurrentSkipListMap$HeadIndex,java.util.concurrent.ConcurrentSkipListMap$HeadIndex)>(r1, r2);

        if $z0 == 0 goto label1;

        $r9 = r1.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        if $r9 == null goto label1;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: boolean casHead(java.util.concurrent.ConcurrentSkipListMap$HeadIndex,java.util.concurrent.ConcurrentSkipListMap$HeadIndex)>(r2, r1);

     label1:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.io.ObjectOutputStream r1;
        java.util.concurrent.ConcurrentSkipListMap$Node r2;
        java.lang.Object r3, $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>();

     label1:
        if r2 == null goto label3;

        r3 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object getValidValue()>();

        if r3 == null goto label2;

        $r4 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r3);

     label2:
        r2 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        goto label1;

     label3:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        return;
    }

    public java.util.Map$Entry ceilingEntry(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        java.util.AbstractMap$SimpleImmutableEntry $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.AbstractMap$SimpleImmutableEntry getNear(java.lang.Object,int)>(r1, 1);

        return $r2;
    }

    public java.lang.Object ceilingKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object,int)>(r1, 1);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        return $r3;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void initialize()>();

        return;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.util.concurrent.ConcurrentSkipListMap r0, $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>();

        return $r1;
    }

    public java.util.concurrent.ConcurrentSkipListMap clone()
    {
        java.util.concurrent.ConcurrentSkipListMap r0, r2;
        java.lang.Object $r3;
        java.lang.CloneNotSupportedException $r4;
        java.lang.InternalError $r5;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

     label1:
        $r3 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();

        r2 = (java.util.concurrent.ConcurrentSkipListMap) $r3;

        virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap: void initialize()>();

        specialinvoke r2.<java.util.concurrent.ConcurrentSkipListMap: void buildFromSorted(java.util.SortedMap)>(r0);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.InternalError;

        specialinvoke $r5.<java.lang.InternalError: void <init>()>();

        throw $r5;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public java.util.Comparator comparator()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.Comparator $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.Comparator comparator>;

        return $r1;
    }

    int compare(java.lang.Object, java.lang.Object) throws java.lang.ClassCastException
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2;
        java.util.Comparator r3;
        java.lang.Comparable $r4;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.Comparator comparator>;

        if r3 == null goto label1;

        $i1 = interfaceinvoke r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        return $i1;

     label1:
        $r4 = (java.lang.Comparable) r1;

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

        return $i0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object doGet(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r2;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>();

     label2:
        if r2 == null goto label4;

        r3 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object getValidValue()>();

        if r3 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        r2 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        goto label2;

     label4:
        return 0;
    }

    public java.util.NavigableSet descendingKeySet()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap descendingMap()>();

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r2;
    }

    public volatile java.util.NavigableMap descendingMap()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap descendingMap()>();

        return $r1;
    }

    public java.util.concurrent.ConcurrentNavigableMap descendingMap()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentNavigableMap r1;
        java.util.concurrent.ConcurrentSkipListMap$SubMap r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap descendingMap>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentSkipListMap$SubMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>(r0, null, 0, null, 0, 1);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap descendingMap> = r2;

        return r2;
    }

    final java.lang.Object doRemove(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2, r7, $r9, $r10;
        java.lang.Comparable r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r4, r5, r6, $r8;
        int i0;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.ConcurrentSkipListMap$Index $r13;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex $r14;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Comparable comparable(java.lang.Object)>(r1);

     label01:
        r4 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findPredecessor(java.lang.Comparable)>(r3);

        r5 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

     label02:
        if r5 != null goto label04;

        r7 = null;

     label03:
        return r7;

     label04:
        r6 = r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        $r8 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r5 != $r8 goto label01;

        r7 = r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r7 != null goto label05;

        virtualinvoke r5.<java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r4, r6);

        goto label01;

     label05:
        if r7 == r5 goto label01;

        $r9 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r9 == null goto label01;

        $r10 = r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        i0 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r10);

        if i0 >= 0 goto label06;

        return null;

     label06:
        if i0 <= 0 goto label07;

        r4 = r5;

        r5 = r6;

        goto label02;

     label07:
        if r2 == null goto label08;

        $z3 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z3 != 0 goto label08;

        return null;

     label08:
        $z0 = virtualinvoke r5.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casValue(java.lang.Object,java.lang.Object)>(r7, null);

        if $z0 == 0 goto label01;

        $z1 = virtualinvoke r5.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean appendMarker(java.util.concurrent.ConcurrentSkipListMap$Node)>(r6);

        if $z1 == 0 goto label09;

        $z2 = virtualinvoke r4.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casNext(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r5, r6);

        if $z2 != 0 goto label10;

     label09:
        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNode(java.lang.Comparable)>(r3);

        return r7;

     label10:
        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findPredecessor(java.lang.Comparable)>(r3);

        $r14 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        $r13 = $r14.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        if $r13 != null goto label03;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void tryReduceLevel()>();

        return r7;
    }

    java.util.Map$Entry doRemoveFirstEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1, r2, r3, $r6;
        java.lang.Object r4, $r9;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex $r5;
        boolean $z0, $z1, $z2;
        java.util.AbstractMap$SimpleImmutableEntry $r8;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

     label1:
        $r5 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        r1 = $r5.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r2 != null goto label2;

        return null;

     label2:
        r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        $r6 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r2 != $r6 goto label1;

        r4 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r4 != null goto label3;

        virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r1, r3);

        goto label1;

     label3:
        $z0 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casValue(java.lang.Object,java.lang.Object)>(r4, null);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean appendMarker(java.util.concurrent.ConcurrentSkipListMap$Node)>(r3);

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casNext(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r2, r3);

        if $z2 != 0 goto label5;

     label4:
        virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>();

     label5:
        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void clearIndexToFirst()>();

        $r8 = new java.util.AbstractMap$SimpleImmutableEntry;

        $r9 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        specialinvoke $r8.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r9, r4);

        return $r8;
    }

    java.util.Map$Entry doRemoveLastEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1, r2, r3, $r7;
        java.lang.Object r4, r5, $r8;
        java.lang.Comparable r6;
        boolean $z0, $z1, $z2, $z3;
        java.util.AbstractMap$SimpleImmutableEntry $r10;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex $r11;
        java.util.concurrent.ConcurrentSkipListMap$Index $r13;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

     label1:
        r1 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findPredecessorOfLast()>();

        r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r2 != null goto label3;

        $z3 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean isBaseHeader()>();

        if $z3 == 0 goto label1;

        return null;

     label2:
        if r3 == null goto label5;

        r1 = r2;

        r2 = r3;

     label3:
        r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        $r7 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r2 != $r7 goto label1;

        r4 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r4 != null goto label4;

        virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r1, r3);

        goto label1;

     label4:
        if r4 == r2 goto label1;

        $r8 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r8 != null goto label2;

        goto label1;

     label5:
        $z0 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casValue(java.lang.Object,java.lang.Object)>(r4, null);

        if $z0 == 0 goto label1;

        r5 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        r6 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Comparable comparable(java.lang.Object)>(r5);

        $z1 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean appendMarker(java.util.concurrent.ConcurrentSkipListMap$Node)>(r3);

        if $z1 == 0 goto label6;

        $z2 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casNext(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r2, r3);

        if $z2 != 0 goto label8;

     label6:
        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNode(java.lang.Comparable)>(r6);

     label7:
        $r10 = new java.util.AbstractMap$SimpleImmutableEntry;

        specialinvoke $r10.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(r5, r4);

        return $r10;

     label8:
        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findPredecessor(java.lang.Comparable)>(r6);

        $r11 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        $r13 = $r11.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        if $r13 != null goto label7;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: void tryReduceLevel()>();

        goto label7;
    }

    java.util.Iterator entryIterator()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$EntryIterator $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        $r1 = new java.util.concurrent.ConcurrentSkipListMap$EntryIterator;

        specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: void <init>(java.util.concurrent.ConcurrentSkipListMap)>(r0);

        return $r1;
    }

    public java.util.Set entrySet()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r1, r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$EntrySet entrySet>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>(r0);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$EntrySet entrySet> = r2;

        return r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r8, r9, $r13, $r14, $r15, $r16, $r17, $r18;
        java.util.Map r2;
        java.util.Iterator r5, r6;
        java.util.Map$Entry r7, r10;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.Set $r11, $r12;
        java.lang.NullPointerException $r19;
        java.lang.ClassCastException $r20;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label02;

     label01:
        return 1;

     label02:
        $z1 = r1 instanceof java.util.Map;

        if $z1 != 0 goto label03;

        return 0;

     label03:
        r2 = (java.util.Map) r1;

     label04:
        $r11 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r16 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r16;

        $r15 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        $z4 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>($r17);

        if $z4 != 0 goto label05;

     label06:
        return 0;

     label07:
        $r12 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label01;

        $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r13;

        r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

     label09:
        if r8 == null goto label12;

        if r9 == null goto label12;

     label10:
        $r14 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object get(java.lang.Object)>(r8);

        z0 = virtualinvoke r9.<java.lang.Object: boolean equals(java.lang.Object)>($r14);

     label11:
        if z0 != 0 goto label08;

     label12:
        return 0;

     label13:
        $r20 := @caughtexception;

        return 0;

     label14:
        $r19 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label04 to label05 with label13;
        catch java.lang.NullPointerException from label04 to label05 with label14;
        catch java.lang.ClassCastException from label05 to label06 with label13;
        catch java.lang.NullPointerException from label05 to label06 with label14;
        catch java.lang.ClassCastException from label07 to label08 with label13;
        catch java.lang.NullPointerException from label07 to label08 with label14;
        catch java.lang.ClassCastException from label08 to label09 with label13;
        catch java.lang.NullPointerException from label08 to label09 with label14;
        catch java.lang.ClassCastException from label10 to label11 with label13;
        catch java.lang.NullPointerException from label10 to label11 with label14;
    }

    java.util.concurrent.ConcurrentSkipListMap$Node findFirst()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1, r2, $r5;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex $r3;
        java.lang.Object $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

     label1:
        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        r1 = $r3.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r2 != null goto label3;

        r2 = null;

     label2:
        return r2;

     label3:
        $r4 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r4 != null goto label2;

        $r5 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r1, $r5);

        goto label1;
    }

    java.util.concurrent.ConcurrentSkipListMap$Node findLast()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Index r1, r2, r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r4, r5, r6, $r8;
        java.lang.Object r7, $r9;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

     label01:
        r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        if r2 == null goto label03;

        $z1 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean indexesDeletedNode()>();

        if $z1 == 0 goto label02;

        virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean unlink(java.util.concurrent.ConcurrentSkipListMap$Index)>(r2);

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        goto label01;

     label02:
        r1 = r2;

        goto label01;

     label03:
        r3 = r1.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index down>;

        if r3 == null goto label04;

        r1 = r3;

        goto label01;

     label04:
        r4 = r1.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        r5 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

     label05:
        if r5 != null goto label07;

        $z0 = virtualinvoke r4.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean isBaseHeader()>();

        if $z0 == 0 goto label06;

        r4 = null;

     label06:
        return r4;

     label07:
        r6 = r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        $r8 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r5 == $r8 goto label09;

     label08:
        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;

        goto label01;

     label09:
        r7 = r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r7 != null goto label10;

        virtualinvoke r5.<java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r4, r6);

        goto label08;

     label10:
        if r7 == r5 goto label08;

        $r9 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r9 == null goto label08;

        r4 = r5;

        r5 = r6;

        goto label05;
    }

    java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object, int)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r6, $r9, $r10;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Comparable r2;
        java.util.concurrent.ConcurrentSkipListMap$Node r3, r4, r5, r7, $r8;
        boolean z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Comparable comparable(java.lang.Object)>(r1);

     label01:
        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findPredecessor(java.lang.Comparable)>(r2);

        r4 = r3.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

     label02:
        if r4 != null goto label05;

        $i4 = i0 & 2;

        if $i4 == 0 goto label03;

        $z1 = virtualinvoke r3.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean isBaseHeader()>();

        if $z1 == 0 goto label04;

     label03:
        r3 = null;

     label04:
        return r3;

     label05:
        r5 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        $r8 = r3.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r4 != $r8 goto label01;

        r6 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r6 != null goto label06;

        virtualinvoke r4.<java.util.concurrent.ConcurrentSkipListMap$Node: void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r3, r5);

        goto label01;

     label06:
        if r6 == r4 goto label01;

        $r9 = r3.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r9 == null goto label01;

        $r10 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        i1 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r10);

        if i1 != 0 goto label07;

        $i5 = i0 & 1;

        if $i5 != 0 goto label08;

     label07:
        if i1 >= 0 goto label09;

        $i3 = i0 & 2;

        if $i3 != 0 goto label09;

     label08:
        return r4;

     label09:
        if i1 > 0 goto label12;

        $i2 = i0 & 2;

        if $i2 == 0 goto label12;

        z0 = virtualinvoke r3.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean isBaseHeader()>();

        r7 = null;

        if z0 == 0 goto label11;

     label10:
        return r7;

     label11:
        r7 = r3;

        goto label10;

     label12:
        r3 = r4;

        r4 = r5;

        goto label02;
    }

    public java.util.Map$Entry firstEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.util.AbstractMap$SimpleImmutableEntry r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

     label1:
        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>();

        if r1 != null goto label2;

        return null;

     label2:
        r2 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.AbstractMap$SimpleImmutableEntry createSnapshot()>();

        if r2 == null goto label1;

        return r2;
    }

    public java.lang.Object firstKey()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>();

        if r1 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        return $r2;
    }

    public java.util.Map$Entry floorEntry(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        java.util.AbstractMap$SimpleImmutableEntry $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.AbstractMap$SimpleImmutableEntry getNear(java.lang.Object,int)>(r1, 3);

        return $r2;
    }

    public java.lang.Object floorKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object,int)>(r1, 3);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        return $r3;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object doGet(java.lang.Object)>(r1);

        return $r2;
    }

    java.util.AbstractMap$SimpleImmutableEntry getNear(java.lang.Object, int)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        int i0;
        java.util.concurrent.ConcurrentSkipListMap$Node r2;
        java.util.AbstractMap$SimpleImmutableEntry r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

     label1:
        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object,int)>(r1, i0);

        if r2 != null goto label2;

        return null;

     label2:
        r3 = virtualinvoke r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.AbstractMap$SimpleImmutableEntry createSnapshot()>();

        if r3 == null goto label1;

        return r3;
    }

    public volatile java.util.NavigableMap headMap(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        boolean z0;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object,boolean)>(r1, z0);

        return $r2;
    }

    public volatile java.util.SortedMap headMap(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object)>(r1);

        return $r2;
    }

    public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object,boolean)>(r1, 0);

        return $r2;
    }

    public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        boolean z0;
        java.util.concurrent.ConcurrentSkipListMap$SubMap $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r2 = new java.util.concurrent.ConcurrentSkipListMap$SubMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>(r0, null, 0, r1, z0, 0);

        return $r2;
    }

    public java.util.Map$Entry higherEntry(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        java.util.AbstractMap$SimpleImmutableEntry $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.AbstractMap$SimpleImmutableEntry getNear(java.lang.Object,int)>(r1, 0);

        return $r2;
    }

    public java.lang.Object higherKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object,int)>(r1, 0);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        return $r3;
    }

    boolean inHalfOpenRange(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2, r3;
        int $i0, $i1;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        if r2 == null goto label2;

        $i1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        if $i1 < 0 goto label4;

     label2:
        if r3 == null goto label3;

        $i0 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: int compare(java.lang.Object,java.lang.Object)>(r1, r3);

        if $i0 >= 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    boolean inOpenRange(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2, r3;
        int $i0, $i1;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        if r2 == null goto label2;

        $i1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        if $i1 < 0 goto label4;

     label2:
        if r3 == null goto label3;

        $i0 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: int compare(java.lang.Object,java.lang.Object)>(r1, r3);

        if $i0 > 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    final void initialize()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.Random $r1;
        int $i0, $i1;
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex $r2;
        java.util.concurrent.ConcurrentSkipListMap$Node $r3;
        java.lang.Object $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$KeySet keySet> = null;

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$EntrySet entrySet> = null;

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Values values> = null;

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap descendingMap> = null;

        $r1 = <java.util.concurrent.ConcurrentSkipListMap: java.util.Random seedGenerator>;

        $i0 = virtualinvoke $r1.<java.util.Random: int nextInt()>();

        $i1 = 256 | $i0;

        r0.<java.util.concurrent.ConcurrentSkipListMap: int randomSeed> = $i1;

        $r2 = new java.util.concurrent.ConcurrentSkipListMap$HeadIndex;

        $r3 = new java.util.concurrent.ConcurrentSkipListMap$Node;

        $r4 = <java.util.concurrent.ConcurrentSkipListMap: java.lang.Object BASE_HEADER>;

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$Node: void <init>(java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentSkipListMap$Node)>(null, $r4, null);

        specialinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index,int)>($r3, null, null, 1);

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head> = $r2;

        return;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>();

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    java.util.Iterator keyIterator()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$KeyIterator $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        $r1 = new java.util.concurrent.ConcurrentSkipListMap$KeyIterator;

        specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: void <init>(java.util.concurrent.ConcurrentSkipListMap)>(r0);

        return $r1;
    }

    public java.util.NavigableSet keySet()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$KeySet r1, r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$KeySet keySet>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentSkipListMap$KeySet;

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$KeySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>(r0);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$KeySet keySet> = r2;

        return r2;
    }

    public volatile java.util.Set keySet()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.NavigableSet $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.NavigableSet keySet()>();

        return $r1;
    }

    public java.util.Map$Entry lastEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.util.AbstractMap$SimpleImmutableEntry r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

     label1:
        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findLast()>();

        if r1 != null goto label2;

        return null;

     label2:
        r2 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.AbstractMap$SimpleImmutableEntry createSnapshot()>();

        if r2 == null goto label1;

        return r2;
    }

    public java.lang.Object lastKey()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findLast()>();

        if r1 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        return $r2;
    }

    public java.util.Map$Entry lowerEntry(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        java.util.AbstractMap$SimpleImmutableEntry $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.AbstractMap$SimpleImmutableEntry getNear(java.lang.Object,int)>(r1, 2);

        return $r2;
    }

    public java.lang.Object lowerKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNear(java.lang.Object,int)>(r1, 2);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        return $r3;
    }

    public java.util.NavigableSet navigableKeySet()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$KeySet r1, r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$KeySet keySet>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentSkipListMap$KeySet;

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$KeySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>(r0);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$KeySet keySet> = r2;

        return r2;
    }

    public java.util.Map$Entry pollFirstEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.Map$Entry $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.Map$Entry doRemoveFirstEntry()>();

        return $r1;
    }

    public java.util.Map$Entry pollLastEntry()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.Map$Entry $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.Map$Entry doRemoveLastEntry()>();

        return $r1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2, $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r2 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $r3 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object doPut(java.lang.Object,java.lang.Object,boolean)>(r1, r2, 0);

        return $r3;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2, $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r2 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $r3 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object doPut(java.lang.Object,java.lang.Object,boolean)>(r1, r2, 1);

        return $r3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object doRemove(java.lang.Object,java.lang.Object)>(r1, null);

        return $r2;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2, $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        if r2 != null goto label3;

     label2:
        return 0;

     label3:
        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object doRemove(java.lang.Object,java.lang.Object)>(r1, r2);

        if $r3 == null goto label2;

        return 1;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2, r5;
        java.lang.Comparable r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r4;
        boolean $z0;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r2 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label1:
        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Comparable comparable(java.lang.Object)>(r1);

     label2:
        r4 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNode(java.lang.Comparable)>(r3);

        if r4 != null goto label3;

        return null;

     label3:
        r5 = r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r5 == null goto label2;

        $z0 = virtualinvoke r4.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casValue(java.lang.Object,java.lang.Object)>(r5, r2);

        if $z0 == 0 goto label2;

        return r5;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2, r3, r6;
        java.lang.Comparable r4;
        java.util.concurrent.ConcurrentSkipListMap$Node r5;
        java.lang.NullPointerException $r7;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        if r2 == null goto label1;

        if r3 != null goto label2;

     label1:
        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();

        throw $r7;

     label2:
        r4 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Comparable comparable(java.lang.Object)>(r1);

     label3:
        r5 = specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findNode(java.lang.Comparable)>(r4);

        if r5 != null goto label5;

     label4:
        return 0;

     label5:
        r6 = r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r6 == null goto label3;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r5.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casValue(java.lang.Object,java.lang.Object)>(r6, r3);

        if $z1 == 0 goto label3;

        return 1;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        long l0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        byte $b1;
        int $i2;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        l0 = 0L;

        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>();

     label1:
        if r1 == null goto label3;

        $r2 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object getValidValue()>();

        if $r2 == null goto label2;

        l0 = l0 + 1L;

     label2:
        r1 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        goto label1;

     label3:
        $b1 = l0 cmp 2147483647L;

        if $b1 < 0 goto label4;

        return 2147483647;

     label4:
        $i2 = (int) l0;

        return $i2;
    }

    public volatile java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.util.concurrent.ConcurrentNavigableMap $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, z0, r2, z1);

        return $r3;
    }

    public volatile java.util.SortedMap subMap(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2;
        java.util.concurrent.ConcurrentNavigableMap $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2;
        java.util.concurrent.ConcurrentNavigableMap $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, 1, r2, 0);

        return $r3;
    }

    public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.lang.NullPointerException $r3;
        java.util.concurrent.ConcurrentSkipListMap$SubMap $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label2:
        $r4 = new java.util.concurrent.ConcurrentSkipListMap$SubMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>(r0, r1, z0, r2, z1, 0);

        return $r4;
    }

    public volatile java.util.NavigableMap tailMap(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        boolean z0;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object,boolean)>(r1, z0);

        return $r2;
    }

    public volatile java.util.SortedMap tailMap(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object)>(r1);

        return $r2;
    }

    public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object,boolean)>(r1, 1);

        return $r2;
    }

    public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.lang.Object r1;
        boolean z0;
        java.util.concurrent.ConcurrentSkipListMap$SubMap $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r2 = new java.util.concurrent.ConcurrentSkipListMap$SubMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap$SubMap: void <init>(java.util.concurrent.ConcurrentSkipListMap,java.lang.Object,boolean,java.lang.Object,boolean,boolean)>(r0, r1, z0, null, 0, 0);

        return $r2;
    }

    java.util.Iterator valueIterator()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$ValueIterator $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        $r1 = new java.util.concurrent.ConcurrentSkipListMap$ValueIterator;

        specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: void <init>(java.util.concurrent.ConcurrentSkipListMap)>(r0);

        return $r1;
    }

    public java.util.Collection values()
    {
        java.util.concurrent.ConcurrentSkipListMap r0;
        java.util.concurrent.ConcurrentSkipListMap$Values r1, r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Values values>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.util.concurrent.ConcurrentSkipListMap$Values;

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$Values: void <init>(java.util.concurrent.ConcurrentNavigableMap)>(r0);

        r2 = $r3;

        r0.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Values values> = r2;

        return r2;
    }
}
