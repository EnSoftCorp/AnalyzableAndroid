class java.util.logging.FileHandler$MeasureOutputStream extends java.io.OutputStream
{
    long length;
    java.io.OutputStream wrapped;

    public void <init>(java.io.OutputStream)
    {
        java.util.logging.FileHandler$MeasureOutputStream r0;
        java.io.OutputStream r1;

        r0 := @this: java.util.logging.FileHandler$MeasureOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.util.logging.FileHandler$MeasureOutputStream: void <init>(java.io.OutputStream,long)>(r1, 0L);

        return;
    }

    public void <init>(java.io.OutputStream, long)
    {
        java.util.logging.FileHandler$MeasureOutputStream r0;
        java.io.OutputStream r1;
        long l0;

        r0 := @this: java.util.logging.FileHandler$MeasureOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        l0 := @parameter1: long;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<java.util.logging.FileHandler$MeasureOutputStream: java.io.OutputStream wrapped> = r1;

        r0.<java.util.logging.FileHandler$MeasureOutputStream: long length> = l0;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.util.logging.FileHandler$MeasureOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: java.util.logging.FileHandler$MeasureOutputStream;

        $r1 = r0.<java.util.logging.FileHandler$MeasureOutputStream: java.io.OutputStream wrapped>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.util.logging.FileHandler$MeasureOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: java.util.logging.FileHandler$MeasureOutputStream;

        $r1 = r0.<java.util.logging.FileHandler$MeasureOutputStream: java.io.OutputStream wrapped>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public long getLength()
    {
        java.util.logging.FileHandler$MeasureOutputStream r0;
        long $l0;

        r0 := @this: java.util.logging.FileHandler$MeasureOutputStream;

        $l0 = r0.<java.util.logging.FileHandler$MeasureOutputStream: long length>;

        return $l0;
    }

    public void setLength(long)
    {
        java.util.logging.FileHandler$MeasureOutputStream r0;
        long l0;

        r0 := @this: java.util.logging.FileHandler$MeasureOutputStream;

        l0 := @parameter0: long;

        r0.<java.util.logging.FileHandler$MeasureOutputStream: long length> = l0;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.util.logging.FileHandler$MeasureOutputStream r0;
        int i0;
        java.io.OutputStream $r1;
        long $l1, $l2;

        r0 := @this: java.util.logging.FileHandler$MeasureOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.logging.FileHandler$MeasureOutputStream: java.io.OutputStream wrapped>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        $l1 = r0.<java.util.logging.FileHandler$MeasureOutputStream: long length>;

        $l2 = 1L + $l1;

        r0.<java.util.logging.FileHandler$MeasureOutputStream: long length> = $l2;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.util.logging.FileHandler$MeasureOutputStream r0;
        byte[] r1;
        int i0, i1;
        java.io.OutputStream $r2;
        long $l2, $l3, $l4;

        r0 := @this: java.util.logging.FileHandler$MeasureOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.util.logging.FileHandler$MeasureOutputStream: java.io.OutputStream wrapped>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        $l3 = r0.<java.util.logging.FileHandler$MeasureOutputStream: long length>;

        $l2 = (long) i1;

        $l4 = $l3 + $l2;

        r0.<java.util.logging.FileHandler$MeasureOutputStream: long length> = $l4;

        return;
    }
}
