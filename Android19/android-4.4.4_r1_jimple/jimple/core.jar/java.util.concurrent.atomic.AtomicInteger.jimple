public class java.util.concurrent.atomic.AtomicInteger extends java.lang.Number implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final sun.misc.Unsafe unsafe;
    private static final long valueOffset;
    private volatile int value;

    static void <clinit>()
    {
        java.lang.Exception r0, $r5;
        sun.misc.Unsafe $r1, $r3;
        java.lang.Class $r2;
        java.lang.reflect.Field $r4;
        long $l0;
        java.lang.Error $r6;

        <java.util.concurrent.atomic.AtomicInteger: long serialVersionUID> = 6214790243416807050L;

        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.atomic.AtomicInteger: sun.misc.Unsafe unsafe> = $r1;

     label1:
        $r3 = <java.util.concurrent.atomic.AtomicInteger: sun.misc.Unsafe unsafe>;

        $r2 = class "java/util/concurrent/atomic/AtomicInteger";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("value");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.atomic.AtomicInteger: long valueOffset> = $l0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r0 = $r5;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicInteger r0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.util.concurrent.atomic.AtomicInteger: int value> = i0;

        return;
    }

    public final int addAndGet(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

     label1:
        i1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i2 = i1 + i0;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i1, i2);

        if $z0 == 0 goto label1;

        return i2;
    }

    public final boolean compareAndSet(int, int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, i1;
        long $l2;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = <java.util.concurrent.atomic.AtomicInteger: sun.misc.Unsafe unsafe>;

        $l2 = <java.util.concurrent.atomic.AtomicInteger: long valueOffset>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l2, i0, i1);

        return $z0;
    }

    public final int decrementAndGet()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

     label1:
        i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i1 = i0 - 1;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, i1);

        if $z0 == 0 goto label1;

        return i1;
    }

    public double doubleValue()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int $i0;
        double $d0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $d0 = (double) $i0;

        return $d0;
    }

    public float floatValue()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int $i0;
        float $f0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $f0 = (float) $i0;

        return $f0;
    }

    public final int get()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int $i0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $i0 = r0.<java.util.concurrent.atomic.AtomicInteger: int value>;

        return $i0;
    }

    public final int getAndAdd(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

     label1:
        i1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i2 = i1 + i0;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i1, $i2);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndDecrement()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

     label1:
        i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i1 = i0 - 1;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, $i1);

        if $z0 == 0 goto label1;

        return i0;
    }

    public final int getAndIncrement()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

     label1:
        i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i1 = i0 + 1;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, $i1);

        if $z0 == 0 goto label1;

        return i0;
    }

    public final int getAndSet(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

     label1:
        i1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i1, i0);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int incrementAndGet()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

     label1:
        i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i1 = i0 + 1;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, i1);

        if $z0 == 0 goto label1;

        return i1;
    }

    public int intValue()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int $i0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public final void lazySet(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0;
        long $l1;
        sun.misc.Unsafe $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        $r1 = <java.util.concurrent.atomic.AtomicInteger: sun.misc.Unsafe unsafe>;

        $l1 = <java.util.concurrent.atomic.AtomicInteger: long valueOffset>;

        virtualinvoke $r1.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l1, i0);

        return;
    }

    public long longValue()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int $i0;
        long $l1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l1 = (long) $i0;

        return $l1;
    }

    public final void set(int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        r0.<java.util.concurrent.atomic.AtomicInteger: int value> = i0;

        return;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        $i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r1;
    }

    public final boolean weakCompareAndSet(int, int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, i1;
        long $l2;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = <java.util.concurrent.atomic.AtomicInteger: sun.misc.Unsafe unsafe>;

        $l2 = <java.util.concurrent.atomic.AtomicInteger: long valueOffset>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l2, i0, i1);

        return $z0;
    }
}
