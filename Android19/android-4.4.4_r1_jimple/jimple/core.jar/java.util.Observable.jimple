public class java.util.Observable extends java.lang.Object
{
    boolean changed;
    java.util.List observers;

    public void <init>()
    {
        java.util.Observable r0;
        java.util.ArrayList $r1;

        r0 := @this: java.util.Observable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<java.util.Observable: java.util.List observers> = $r1;

        r0.<java.util.Observable: boolean changed> = 0;

        return;
    }

    public void addObserver(java.util.Observer)
    {
        java.util.Observable r0;
        java.util.Observer r1;
        java.lang.Throwable r2, $r6;
        java.util.List $r3, $r4;
        boolean $z0;
        java.lang.NullPointerException $r5;

        r0 := @this: java.util.Observable;

        r1 := @parameter0: java.util.Observer;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("observer == null");

        throw $r5;

     label1:
        entermonitor r0;

     label2:
        $r3 = r0.<java.util.Observable: java.util.List observers>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r4 = r0.<java.util.Observable: java.util.List observers>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

     label3:
        exitmonitor r0;

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

     label6:
        exitmonitor r0;

     label7:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    protected void clearChanged()
    {
        java.util.Observable r0;

        r0 := @this: java.util.Observable;

        r0.<java.util.Observable: boolean changed> = 0;

        return;
    }

    public int countObservers()
    {
        java.util.Observable r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: java.util.Observable;

        $r1 = r0.<java.util.Observable: java.util.List observers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void deleteObserver(java.util.Observer)
    {
        java.util.Observable r0;
        java.util.Observer r1;
        java.lang.Throwable r2, $r4;
        java.util.List $r3;

        r0 := @this: java.util.Observable;

        r1 := @parameter0: java.util.Observer;

        entermonitor r0;

     label1:
        $r3 = r0.<java.util.Observable: java.util.List observers>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void deleteObservers()
    {
        java.util.Observable r0;
        java.lang.Throwable r1, $r3;
        java.util.List $r2;

        r0 := @this: java.util.Observable;

        entermonitor r0;

     label1:
        $r2 = r0.<java.util.Observable: java.util.List observers>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean hasChanged()
    {
        java.util.Observable r0;
        boolean $z0;

        r0 := @this: java.util.Observable;

        $z0 = r0.<java.util.Observable: boolean changed>;

        return $z0;
    }

    public void notifyObservers()
    {
        java.util.Observable r0;

        r0 := @this: java.util.Observable;

        virtualinvoke r0.<java.util.Observable: void notifyObservers(java.lang.Object)>(null);

        return;
    }

    public void notifyObservers(java.lang.Object)
    {
        java.util.Observable r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r8;
        boolean z0;
        java.util.Observer[] r3, r4;
        int i0, i1, $i2;
        java.util.Observer $r5;
        java.util.List $r6, $r7;

        r0 := @this: java.util.Observable;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label01:
        z0 = virtualinvoke r0.<java.util.Observable: boolean hasChanged()>();

     label02:
        r3 = null;

        if z0 == 0 goto label04;

     label03:
        virtualinvoke r0.<java.util.Observable: void clearChanged()>();

        $r6 = r0.<java.util.Observable: java.util.List observers>;

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        r3 = newarray (java.util.Observer)[$i2];

        $r7 = r0.<java.util.Observable: java.util.List observers>;

        interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r3);

     label04:
        exitmonitor r0;

     label05:
        if r3 == null goto label10;

        r4 = r3;

        i0 = lengthof r4;

        i1 = 0;

     label06:
        if i1 >= i0 goto label10;

        $r5 = r4[i1];

        interfaceinvoke $r5.<java.util.Observer: void update(java.util.Observable,java.lang.Object)>(r0, r1);

        i1 = i1 + 1;

        goto label06;

     label07:
        $r8 := @caughtexception;

        r2 = $r8;

     label08:
        exitmonitor r0;

     label09:
        throw r2;

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    protected void setChanged()
    {
        java.util.Observable r0;

        r0 := @this: java.util.Observable;

        r0.<java.util.Observable: boolean changed> = 1;

        return;
    }
}
