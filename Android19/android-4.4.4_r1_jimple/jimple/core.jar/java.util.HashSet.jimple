public class java.util.HashSet extends java.util.AbstractSet implements java.util.Set, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    transient java.util.HashMap backingMap;

    public void <init>()
    {
        java.util.HashSet r0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashSet;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<java.util.HashSet: void <init>(java.util.HashMap)>($r1);

        return;
    }

    public void <init>(int)
    {
        java.util.HashSet r0;
        int i0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashSet;

        i0 := @parameter0: int;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0);

        specialinvoke r0.<java.util.HashSet: void <init>(java.util.HashMap)>($r1);

        return;
    }

    public void <init>(int, float)
    {
        java.util.HashSet r0;
        int i0;
        float f0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashSet;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int,float)>(i0, f0);

        specialinvoke r0.<java.util.HashSet: void <init>(java.util.HashMap)>($r1);

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.HashSet r0;
        java.util.Collection r1;
        int i0, $i1, $i2;
        java.util.Iterator r2;
        java.util.HashMap $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: java.util.HashSet;

        r1 := @parameter0: java.util.Collection;

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i1 >= 6 goto label3;

        i0 = 11;

     label1:
        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(i0);

        specialinvoke r0.<java.util.HashSet: void <init>(java.util.HashMap)>($r3);

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<java.util.HashSet: boolean add(java.lang.Object)>($r4);

        goto label2;

     label3:
        $i2 = interfaceinvoke r1.<java.util.Collection: int size()>();

        i0 = 2 * $i2;

        goto label1;

     label4:
        return;
    }

    void <init>(java.util.HashMap)
    {
        java.util.HashSet r0;
        java.util.HashMap r1;

        r0 := @this: java.util.HashSet;

        r1 := @parameter0: java.util.HashMap;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<java.util.HashSet: java.util.HashMap backingMap> = r1;

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.HashSet r0;
        java.io.ObjectInputStream r1;
        int i0, $i1;
        java.lang.Object r2;
        float $f0;
        java.util.HashMap $r3, $r4;

        r0 := @this: java.util.HashSet;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $f0 = virtualinvoke r1.<java.io.ObjectInputStream: float readFloat()>();

        $r3 = virtualinvoke r0.<java.util.HashSet: java.util.HashMap createBackingMap(int,float)>($i1, $f0);

        r0.<java.util.HashSet: java.util.HashMap backingMap> = $r3;

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

     label1:
        i0 = i0 + -1;

        if i0 < 0 goto label2;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = r0.<java.util.HashSet: java.util.HashMap backingMap>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

        goto label1;

     label2:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.HashSet r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2;
        java.util.HashMap $r3;
        java.util.HashMap$HashMapEntry[] $r4;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: java.util.HashSet;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r3 = r0.<java.util.HashSet: java.util.HashMap backingMap>;

        $r4 = $r3.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $i0 = lengthof $r4;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFloat(float)>(0.75F);

        $i1 = virtualinvoke r0.<java.util.HashSet: int size()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        r2 = virtualinvoke r0.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.HashSet r0;
        java.lang.Object r1, $r3;
        java.util.HashMap $r2;

        r0 := @this: java.util.HashSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.HashSet: java.util.HashMap backingMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0);

        if $r3 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public void clear()
    {
        java.util.HashSet r0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashSet;

        $r1 = r0.<java.util.HashSet: java.util.HashMap backingMap>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }

    public java.lang.Object clone()
    {
        java.util.HashSet r0, r2;
        java.lang.CloneNotSupportedException r1, $r7;
        java.lang.Object $r3, $r5;
        java.util.HashMap $r4, $r6;
        java.lang.AssertionError $r8;

        r0 := @this: java.util.HashSet;

     label1:
        $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (java.util.HashSet) $r3;

        $r4 = r0.<java.util.HashSet: java.util.HashMap backingMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object clone()>();

        $r6 = (java.util.HashMap) $r5;

        r2.<java.util.HashSet: java.util.HashMap backingMap> = $r6;

     label2:
        return r2;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r8;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.HashSet r0;
        java.lang.Object r1;
        java.util.HashMap $r2;
        boolean $z0;

        r0 := @this: java.util.HashSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.HashSet: java.util.HashMap backingMap>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    java.util.HashMap createBackingMap(int, float)
    {
        java.util.HashSet r0;
        int i0;
        float f0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashSet;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int,float)>(i0, f0);

        return $r1;
    }

    public boolean isEmpty()
    {
        java.util.HashSet r0;
        java.util.HashMap $r1;
        boolean $z0;

        r0 := @this: java.util.HashSet;

        $r1 = r0.<java.util.HashSet: java.util.HashMap backingMap>;

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.HashSet r0;
        java.util.HashMap $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;

        r0 := @this: java.util.HashSet;

        $r1 = r0.<java.util.HashSet: java.util.HashMap backingMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.HashSet r0;
        java.lang.Object r1, $r3;
        java.util.HashMap $r2;

        r0 := @this: java.util.HashSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.HashSet: java.util.HashMap backingMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public int size()
    {
        java.util.HashSet r0;
        java.util.HashMap $r1;
        int $i0;

        r0 := @this: java.util.HashSet;

        $r1 = r0.<java.util.HashSet: java.util.HashMap backingMap>;

        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        return $i0;
    }

    public static void <clinit>()
    {
        <java.util.HashSet: long serialVersionUID> = -5024744406713321676L;

        return;
    }
}
