public class java.io.StringWriter extends java.io.Writer
{
    private java.lang.StringBuffer buf;

    public void <init>()
    {
        java.io.StringWriter r0;
        java.lang.StringBuffer $r1, $r2;

        r0 := @this: java.io.StringWriter;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(16);

        r0.<java.io.StringWriter: java.lang.StringBuffer buf> = $r1;

        $r2 = r0.<java.io.StringWriter: java.lang.StringBuffer buf>;

        r0.<java.io.StringWriter: java.lang.Object lock> = $r2;

        return;
    }

    public void <init>(int)
    {
        java.io.StringWriter r0;
        int i0;
        java.lang.StringBuffer $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.io.StringWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initialSize < 0: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(i0);

        r0.<java.io.StringWriter: java.lang.StringBuffer buf> = $r1;

        $r2 = r0.<java.io.StringWriter: java.lang.StringBuffer buf>;

        r0.<java.io.StringWriter: java.lang.Object lock> = $r2;

        return;
    }

    public java.io.StringWriter append(char)
    {
        java.io.StringWriter r0;
        char c0;

        r0 := @this: java.io.StringWriter;

        c0 := @parameter0: char;

        virtualinvoke r0.<java.io.StringWriter: void write(int)>(c0);

        return r0;
    }

    public java.io.StringWriter append(java.lang.CharSequence)
    {
        java.io.StringWriter r0;
        java.lang.CharSequence r1;
        java.lang.String $r2;

        r0 := @this: java.io.StringWriter;

        r1 := @parameter0: java.lang.CharSequence;

        if r1 != null goto label1;

        r1 = "null";

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.io.StringWriter: void write(java.lang.String)>($r2);

        return r0;
    }

    public java.io.StringWriter append(java.lang.CharSequence, int, int)
    {
        java.io.StringWriter r0;
        java.lang.CharSequence r1, $r3;
        int i0, i1, $i2;
        java.lang.String r2;

        r0 := @this: java.io.StringWriter;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        r1 = "null";

     label1:
        $r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, i1);

        r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        virtualinvoke r0.<java.io.StringWriter: void write(java.lang.String,int,int)>(r2, 0, $i2);

        return r0;
    }

    public volatile java.io.Writer append(char) throws java.io.IOException
    {
        java.io.StringWriter r0, $r1;
        char c0;

        r0 := @this: java.io.StringWriter;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<java.io.StringWriter: java.io.StringWriter append(char)>(c0);

        return $r1;
    }

    public volatile java.io.Writer append(java.lang.CharSequence) throws java.io.IOException
    {
        java.io.StringWriter r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: java.io.StringWriter;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile java.io.Writer append(java.lang.CharSequence, int, int) throws java.io.IOException
    {
        java.io.StringWriter r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.io.StringWriter;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence,int,int)>(r1, i0, i1);

        return $r2;
    }

    public volatile java.lang.Appendable append(char) throws java.io.IOException
    {
        java.io.StringWriter r0, $r1;
        char c0;

        r0 := @this: java.io.StringWriter;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<java.io.StringWriter: java.io.StringWriter append(char)>(c0);

        return $r1;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException
    {
        java.io.StringWriter r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: java.io.StringWriter;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException
    {
        java.io.StringWriter r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.io.StringWriter;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence,int,int)>(r1, i0, i1);

        return $r2;
    }

    public void close() throws java.io.IOException
    {
        java.io.StringWriter r0;

        r0 := @this: java.io.StringWriter;

        return;
    }

    public void flush()
    {
        java.io.StringWriter r0;

        r0 := @this: java.io.StringWriter;

        return;
    }

    public java.lang.StringBuffer getBuffer()
    {
        java.io.StringWriter r0;
        java.lang.StringBuffer $r1;

        r0 := @this: java.io.StringWriter;

        $r1 = r0.<java.io.StringWriter: java.lang.StringBuffer buf>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.io.StringWriter r0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2;

        r0 := @this: java.io.StringWriter;

        $r1 = r0.<java.io.StringWriter: java.lang.StringBuffer buf>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public void write(int)
    {
        java.io.StringWriter r0;
        int i0;
        char $c1;
        java.lang.StringBuffer $r1;

        r0 := @this: java.io.StringWriter;

        i0 := @parameter0: int;

        $r1 = r0.<java.io.StringWriter: java.lang.StringBuffer buf>;

        $c1 = (char) i0;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        return;
    }

    public void write(java.lang.String)
    {
        java.io.StringWriter r0;
        java.lang.String r1;
        java.lang.StringBuffer $r2;

        r0 := @this: java.io.StringWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.io.StringWriter: java.lang.StringBuffer buf>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        return;
    }

    public void write(java.lang.String, int, int)
    {
        java.io.StringWriter r0;
        java.lang.String r1, r2;
        int i0, i1, $i2;
        java.lang.StringBuffer $r3;

        r0 := @this: java.io.StringWriter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i0 + i1;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i2);

        $r3 = r0.<java.io.StringWriter: java.lang.StringBuffer buf>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        return;
    }

    public void write(char[], int, int)
    {
        java.io.StringWriter r0;
        char[] r1;
        int i0, i1, $i2;
        java.lang.StringBuffer $r2;

        r0 := @this: java.io.StringWriter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        if i1 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<java.io.StringWriter: java.lang.StringBuffer buf>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r1, i0, i1);

        return;
    }
}
