class java.util.regex.MatchResultImpl extends java.lang.Object implements java.util.regex.MatchResult
{
    private int[] offsets;
    private java.lang.String text;

    void <init>(java.lang.String, int[])
    {
        java.util.regex.MatchResultImpl r0;
        java.lang.String r1;
        int[] r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.util.regex.MatchResultImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.regex.MatchResultImpl: java.lang.String text> = r1;

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (int[]) $r3;

        r0.<java.util.regex.MatchResultImpl: int[] offsets> = $r4;

        return;
    }

    public int end()
    {
        java.util.regex.MatchResultImpl r0;
        int $i0;

        r0 := @this: java.util.regex.MatchResultImpl;

        $i0 = virtualinvoke r0.<java.util.regex.MatchResultImpl: int end(int)>(0);

        return $i0;
    }

    public int end(int)
    {
        java.util.regex.MatchResultImpl r0;
        int i0, $i1, $i2, $i3;
        int[] $r1;

        r0 := @this: java.util.regex.MatchResultImpl;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.regex.MatchResultImpl: int[] offsets>;

        $i1 = i0 * 2;

        $i2 = 1 + $i1;

        $i3 = $r1[$i2];

        return $i3;
    }

    public java.lang.String group()
    {
        java.util.regex.MatchResultImpl r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;

        r0 := @this: java.util.regex.MatchResultImpl;

        $r1 = r0.<java.util.regex.MatchResultImpl: java.lang.String text>;

        $i0 = virtualinvoke r0.<java.util.regex.MatchResultImpl: int start()>();

        $i1 = virtualinvoke r0.<java.util.regex.MatchResultImpl: int end()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r2;
    }

    public java.lang.String group(int)
    {
        java.util.regex.MatchResultImpl r0;
        int i0, i1, i2, $i3, $i4, $i5;
        int[] $r1, $r2;
        java.lang.String $r3, $r4;

        r0 := @this: java.util.regex.MatchResultImpl;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.regex.MatchResultImpl: int[] offsets>;

        $i3 = i0 * 2;

        i1 = $r1[$i3];

        $r2 = r0.<java.util.regex.MatchResultImpl: int[] offsets>;

        $i4 = i0 * 2;

        $i5 = 1 + $i4;

        i2 = $r2[$i5];

        if i1 == -1 goto label1;

        if i2 != -1 goto label2;

     label1:
        return null;

     label2:
        $r3 = r0.<java.util.regex.MatchResultImpl: java.lang.String text>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);

        return $r4;
    }

    public int groupCount()
    {
        java.util.regex.MatchResultImpl r0;
        int[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: java.util.regex.MatchResultImpl;

        $r1 = r0.<java.util.regex.MatchResultImpl: int[] offsets>;

        $i0 = lengthof $r1;

        $i1 = $i0 / 2;

        $i2 = -1 + $i1;

        return $i2;
    }

    public int start()
    {
        java.util.regex.MatchResultImpl r0;
        int $i0;

        r0 := @this: java.util.regex.MatchResultImpl;

        $i0 = virtualinvoke r0.<java.util.regex.MatchResultImpl: int start(int)>(0);

        return $i0;
    }

    public int start(int)
    {
        java.util.regex.MatchResultImpl r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: java.util.regex.MatchResultImpl;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.regex.MatchResultImpl: int[] offsets>;

        $i1 = i0 * 2;

        $i2 = $r1[$i1];

        return $i2;
    }
}
