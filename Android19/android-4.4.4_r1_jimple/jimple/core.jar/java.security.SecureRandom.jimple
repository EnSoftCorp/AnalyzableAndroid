public class java.security.SecureRandom extends java.util.Random
{
    private static final org.apache.harmony.security.fortress.Engine ENGINE;
    private static final java.lang.String SERVICE;
    private static volatile java.security.SecureRandom internalSecureRandom;
    private static final long serialVersionUID;
    private final java.lang.String algorithm;
    private final java.security.Provider provider;
    private final java.security.SecureRandomSpi secureRandomSpi;

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;

        <java.security.SecureRandom: long serialVersionUID> = 4940670005562187L;

        <java.security.SecureRandom: java.lang.String SERVICE> = "SecureRandom";

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("SecureRandom");

        <java.security.SecureRandom: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        return;
    }

    public void <init>()
    {
        java.security.SecureRandom r0;
        java.security.Provider$Service r1;
        java.lang.Exception r2, $r8;
        java.security.Provider $r3;
        java.lang.Object $r4;
        java.security.SecureRandomSpi $r5;
        java.lang.String $r6;
        org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl $r7;
        java.lang.RuntimeException $r9;

        r0 := @this: java.security.SecureRandom;

        specialinvoke r0.<java.util.Random: void <init>(long)>(0L);

        r1 = staticinvoke <org.apache.harmony.security.fortress.Services: java.security.Provider$Service getSecureRandomService()>();

        if r1 != null goto label1;

        r0.<java.security.SecureRandom: java.security.Provider provider> = null;

        $r7 = new org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl;

        specialinvoke $r7.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: void <init>()>();

        r0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi> = $r7;

        r0.<java.security.SecureRandom: java.lang.String algorithm> = "SHA1PRNG";

        return;

     label1:
        $r3 = virtualinvoke r1.<java.security.Provider$Service: java.security.Provider getProvider()>();

        r0.<java.security.SecureRandom: java.security.Provider provider> = $r3;

        $r4 = virtualinvoke r1.<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>(null);

        $r5 = (java.security.SecureRandomSpi) $r4;

        r0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi> = $r5;

        $r6 = virtualinvoke r1.<java.security.Provider$Service: java.lang.String getAlgorithm()>();

        r0.<java.security.SecureRandom: java.lang.String algorithm> = $r6;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void <init>(java.security.SecureRandomSpi, java.security.Provider)
    {
        java.security.SecureRandom r0;
        java.security.SecureRandomSpi r1;
        java.security.Provider r2;

        r0 := @this: java.security.SecureRandom;

        r1 := @parameter0: java.security.SecureRandomSpi;

        r2 := @parameter1: java.security.Provider;

        specialinvoke r0.<java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider,java.lang.String)>(r1, r2, "unknown");

        return;
    }

    private void <init>(java.security.SecureRandomSpi, java.security.Provider, java.lang.String)
    {
        java.security.SecureRandom r0;
        java.security.SecureRandomSpi r1;
        java.security.Provider r2;
        java.lang.String r3;

        r0 := @this: java.security.SecureRandom;

        r1 := @parameter0: java.security.SecureRandomSpi;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.util.Random: void <init>(long)>(0L);

        r0.<java.security.SecureRandom: java.security.Provider provider> = r2;

        r0.<java.security.SecureRandom: java.lang.String algorithm> = r3;

        r0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi> = r1;

        return;
    }

    public void <init>(byte[])
    {
        java.security.SecureRandom r0;
        byte[] r1;

        r0 := @this: java.security.SecureRandom;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.security.SecureRandom: void <init>()>();

        virtualinvoke r0.<java.security.SecureRandom: void setSeed(byte[])>(r1);

        return;
    }

    public static java.security.SecureRandom getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r1;
        org.apache.harmony.security.fortress.Engine $r2;
        java.security.SecureRandom $r3;
        java.lang.Object $r4;
        java.security.Provider $r5;
        java.security.SecureRandomSpi $r6;
        java.lang.NullPointerException $r7;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r7;

     label1:
        $r2 = <java.security.SecureRandom: org.apache.harmony.security.fortress.Engine ENGINE>;

        r1 = virtualinvoke $r2.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)>(r0, null);

        $r3 = new java.security.SecureRandom;

        $r4 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $r6 = (java.security.SecureRandomSpi) $r4;

        $r5 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        specialinvoke $r3.<java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider,java.lang.String)>($r6, $r5, r0);

        return $r3;
    }

    public static java.security.SecureRandom getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1;
        java.security.Provider r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        java.security.SecureRandom $r4;
        java.security.NoSuchProviderException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);

        if r2 != null goto label3;

        $r5 = new java.security.NoSuchProviderException;

        specialinvoke $r5.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label3:
        $r4 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)>(r0, r2);

        return $r4;
    }

    public static java.security.SecureRandom getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1;
        java.security.SecureRandom $r2;
        org.apache.harmony.security.fortress.Engine $r3;
        java.lang.Object $r4;
        java.security.SecureRandomSpi $r5;
        java.lang.NullPointerException $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r7;

     label1:
        if r0 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r6;

     label2:
        $r2 = new java.security.SecureRandom;

        $r3 = <java.security.SecureRandom: org.apache.harmony.security.fortress.Engine ENGINE>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)>(r0, r1, null);

        $r5 = (java.security.SecureRandomSpi) $r4;

        specialinvoke $r2.<java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider,java.lang.String)>($r5, r1, r0);

        return $r2;
    }

    public static byte[] getSeed(int)
    {
        int i0;
        java.security.SecureRandom r0, $r2;
        byte[] $r1;

        i0 := @parameter0: int;

        r0 = <java.security.SecureRandom: java.security.SecureRandom internalSecureRandom>;

        if r0 != null goto label1;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        r0 = $r2;

        <java.security.SecureRandom: java.security.SecureRandom internalSecureRandom> = r0;

     label1:
        $r1 = virtualinvoke r0.<java.security.SecureRandom: byte[] generateSeed(int)>(i0);

        return $r1;
    }

    public byte[] generateSeed(int)
    {
        java.security.SecureRandom r0;
        int i0;
        java.security.SecureRandomSpi $r1;
        byte[] $r2;

        r0 := @this: java.security.SecureRandom;

        i0 := @parameter0: int;

        $r1 = r0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi>;

        $r2 = virtualinvoke $r1.<java.security.SecureRandomSpi: byte[] engineGenerateSeed(int)>(i0);

        return $r2;
    }

    public java.lang.String getAlgorithm()
    {
        java.security.SecureRandom r0;
        java.lang.String $r1;

        r0 := @this: java.security.SecureRandom;

        $r1 = r0.<java.security.SecureRandom: java.lang.String algorithm>;

        return $r1;
    }

    public final java.security.Provider getProvider()
    {
        java.security.SecureRandom r0;
        java.security.Provider $r1;

        r0 := @this: java.security.SecureRandom;

        $r1 = r0.<java.security.SecureRandom: java.security.Provider provider>;

        return $r1;
    }

    protected final int next(int)
    {
        java.security.SecureRandom r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9;
        byte[] r1;
        byte $b8;
        short $s10;

        r0 := @this: java.security.SecureRandom;

        i0 := @parameter0: int;

        if i0 >= 0 goto label3;

        i0 = 0;

     label1:
        $i4 = i0 + 7;

        i1 = $i4 / 8;

        r1 = newarray (byte)[i1];

        i2 = 0;

        virtualinvoke r0.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        $b8 = r1[i3];

        $s10 = 255 & $b8;

        $i9 = i2 << 8;

        i2 = $s10 | $i9;

        i3 = i3 + 1;

        goto label2;

     label3:
        if i0 <= 32 goto label1;

        i0 = 32;

        goto label1;

     label4:
        $i5 = i1 * 8;

        $i6 = $i5 - i0;

        $i7 = i2 >>> $i6;

        return $i7;
    }

    public void nextBytes(byte[])
    {
        java.security.SecureRandom r0;
        byte[] r1;
        java.lang.Throwable r2, $r4;
        java.security.SecureRandomSpi $r3;

        r0 := @this: java.security.SecureRandom;

        r1 := @parameter0: byte[];

        entermonitor r0;

     label1:
        $r3 = r0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi>;

        virtualinvoke $r3.<java.security.SecureRandomSpi: void engineNextBytes(byte[])>(r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setSeed(long)
    {
        java.security.SecureRandom r0;
        long l0;
        byte[] r1;
        byte $b1;
        java.nio.ByteOrder $r2;

        r0 := @this: java.security.SecureRandom;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        return;

     label1:
        r1 = newarray (byte)[8];

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeLong(byte[],int,long,java.nio.ByteOrder)>(r1, 0, l0, $r2);

        virtualinvoke r0.<java.security.SecureRandom: void setSeed(byte[])>(r1);

        return;
    }

    public void setSeed(byte[])
    {
        java.security.SecureRandom r0;
        byte[] r1;
        java.lang.Throwable r2, $r4;
        java.security.SecureRandomSpi $r3;

        r0 := @this: java.security.SecureRandom;

        r1 := @parameter0: byte[];

        entermonitor r0;

     label1:
        $r3 = r0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi>;

        virtualinvoke $r3.<java.security.SecureRandomSpi: void engineSetSeed(byte[])>(r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
