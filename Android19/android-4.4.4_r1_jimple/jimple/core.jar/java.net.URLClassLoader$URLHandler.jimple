class java.net.URLClassLoader$URLHandler extends java.lang.Object
{
    java.net.URL codeSourceUrl;
    final java.net.URLClassLoader this$0;
    java.net.URL url;

    public void <init>(java.net.URLClassLoader, java.net.URL)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.net.URLClassLoader r1;
        java.net.URL r2;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.net.URLClassLoader;

        r2 := @parameter1: java.net.URL;

        r0.<java.net.URLClassLoader$URLHandler: java.net.URLClassLoader this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.net.URLClassLoader$URLHandler: java.net.URL url> = r2;

        r0.<java.net.URLClassLoader$URLHandler: java.net.URL codeSourceUrl> = r2;

        return;
    }

    java.lang.Class createClass(java.io.InputStream, java.lang.String, java.lang.String)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.io.InputStream r1;
        java.lang.String r2, r3, r6;
        byte[] r5;
        java.lang.Package r7;
        java.security.CodeSource $r8;
        java.security.cert.Certificate[] $r9;
        java.net.URL $r10;
        java.net.URLClassLoader $r11, $r13, $r14;
        int $i0;
        java.lang.Class $r12;
        boolean $z0;
        java.lang.SecurityException $r15;
        java.io.IOException $r16;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        r5 = staticinvoke <libcore.io.Streams: byte[] readFully(java.io.InputStream)>(r1);

     label2:
        if r2 == null goto label3;

        r6 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r13 = r0.<java.net.URLClassLoader$URLHandler: java.net.URLClassLoader this$0>;

        r7 = staticinvoke <java.net.URLClassLoader: java.lang.Package access$000(java.net.URLClassLoader,java.lang.String)>($r13, r6);

        if r7 != null goto label5;

        $r14 = r0.<java.net.URLClassLoader$URLHandler: java.net.URLClassLoader this$0>;

        staticinvoke <java.net.URLClassLoader: java.lang.Package access$100(java.net.URLClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>($r14, r6, null, null, null, null, null, null, null);

     label3:
        $r11 = r0.<java.net.URLClassLoader$URLHandler: java.net.URLClassLoader this$0>;

        $i0 = lengthof r5;

        $r8 = new java.security.CodeSource;

        $r10 = r0.<java.net.URLClassLoader$URLHandler: java.net.URL codeSourceUrl>;

        $r9 = (java.security.cert.Certificate[]) null;

        specialinvoke $r8.<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>($r10, $r9);

        $r12 = staticinvoke <java.net.URLClassLoader: java.lang.Class access$200(java.net.URLClassLoader,java.lang.String,byte[],int,int,java.security.CodeSource)>($r11, r3, r5, 0, $i0, $r8);

        return $r12;

     label4:
        $r16 := @caughtexception;

        return null;

     label5:
        $z0 = virtualinvoke r7.<java.lang.Package: boolean isSealed()>();

        if $z0 == 0 goto label3;

        $r15 = new java.lang.SecurityException;

        specialinvoke $r15.<java.lang.SecurityException: void <init>(java.lang.String)>("Package is sealed");

        throw $r15;

        catch java.io.IOException from label1 to label2 with label4;
    }

    java.lang.Class findClass(java.lang.String, java.lang.String, java.lang.String)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.lang.String r1, r2, r3;
        java.net.URL r4, $r7;
        java.lang.Class r6;
        java.io.InputStream $r8;
        java.io.IOException $r9;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r7 = r0.<java.net.URLClassLoader$URLHandler: java.net.URL url>;

        r4 = virtualinvoke r0.<java.net.URLClassLoader$URLHandler: java.net.URL targetURL(java.net.URL,java.lang.String)>($r7, r2);

        if r4 == null goto label4;

     label1:
        $r8 = virtualinvoke r4.<java.net.URL: java.io.InputStream openStream()>();

        r6 = virtualinvoke r0.<java.net.URLClassLoader$URLHandler: java.lang.Class createClass(java.io.InputStream,java.lang.String,java.lang.String)>($r8, r1, r3);

     label2:
        return r6;

     label3:
        $r9 := @caughtexception;

     label4:
        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    java.net.URL findResource(java.lang.String)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.lang.String r1, $r8;
        java.net.URL r2, $r6;
        java.net.URLConnection r5;
        int i0;
        java.io.InputStream $r7;
        boolean $z0;
        java.net.HttpURLConnection $r9;
        java.io.IOException $r10;
        java.lang.SecurityException $r11;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<java.net.URLClassLoader$URLHandler: java.net.URL url>;

        r2 = virtualinvoke r0.<java.net.URLClassLoader$URLHandler: java.net.URL targetURL(java.net.URL,java.lang.String)>($r6, r1);

        if r2 == null goto label5;

     label1:
        r5 = virtualinvoke r2.<java.net.URL: java.net.URLConnection openConnection()>();

        $r7 = virtualinvoke r5.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        virtualinvoke $r7.<java.io.InputStream: void close()>();

        $r8 = virtualinvoke r2.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 != 0 goto label3;

     label2:
        return r2;

     label3:
        $r9 = (java.net.HttpURLConnection) r5;

        i0 = virtualinvoke $r9.<java.net.HttpURLConnection: int getResponseCode()>();

     label4:
        if i0 < 200 goto label5;

        if i0 < 300 goto label8;

     label5:
        return null;

     label6:
        $r11 := @caughtexception;

        return null;

     label7:
        $r10 := @caughtexception;

        r2 = null;

     label8:
        return r2;

        catch java.lang.SecurityException from label1 to label2 with label6;
        catch java.io.IOException from label1 to label2 with label7;
        catch java.lang.SecurityException from label3 to label4 with label6;
        catch java.io.IOException from label3 to label4 with label7;
    }

    void findResources(java.lang.String, java.util.ArrayList)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.lang.String r1;
        java.util.ArrayList r2;
        java.net.URL r3;
        boolean $z0;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.ArrayList;

        r3 = virtualinvoke r0.<java.net.URLClassLoader$URLHandler: java.net.URL findResource(java.lang.String)>(r1);

        if r3 == null goto label1;

        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label1:
        return;
    }

    java.net.URL targetURL(java.net.URL, java.lang.String)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.net.URL r1, r6, $r11;
        java.lang.String r2, r5, $r8, $r12, $r13;
        java.lang.StringBuilder r3, $r7;
        libcore.net.UriCodec $r10;
        java.net.MalformedURLException $r14;
        int $i0;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.net.URL;

        r2 := @parameter1: java.lang.String;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r3 = $r7;

        $r8 = virtualinvoke r1.<java.net.URL: java.lang.String getFile()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = <java.net.URI: libcore.net.UriCodec PATH_ENCODER>;

        virtualinvoke $r10.<libcore.net.UriCodec: void appendEncoded(java.lang.StringBuilder,java.lang.String)>(r3, r2);

        r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.net.URL;

        $r12 = virtualinvoke r1.<java.net.URL: java.lang.String getProtocol()>();

        $r13 = virtualinvoke r1.<java.net.URL: java.lang.String getHost()>();

        $i0 = virtualinvoke r1.<java.net.URL: int getPort()>();

        specialinvoke $r11.<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>($r12, $r13, $i0, r5, null);

        r6 = $r11;

     label2:
        return r6;

     label3:
        $r14 := @caughtexception;

        return null;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }
}
