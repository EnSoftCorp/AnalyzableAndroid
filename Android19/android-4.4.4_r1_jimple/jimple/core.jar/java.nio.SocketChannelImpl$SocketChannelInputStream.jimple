class java.nio.SocketChannelImpl$SocketChannelInputStream extends java.io.InputStream
{
    private final java.nio.channels.SocketChannel channel;

    public void <init>(java.nio.channels.SocketChannel)
    {
        java.nio.SocketChannelImpl$SocketChannelInputStream r0;
        java.nio.channels.SocketChannel r1;

        r0 := @this: java.nio.SocketChannelImpl$SocketChannelInputStream;

        r1 := @parameter0: java.nio.channels.SocketChannel;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<java.nio.SocketChannelImpl$SocketChannelInputStream: java.nio.channels.SocketChannel channel> = r1;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.nio.SocketChannelImpl$SocketChannelInputStream r0;
        java.nio.channels.SocketChannel $r1;

        r0 := @this: java.nio.SocketChannelImpl$SocketChannelInputStream;

        $r1 = r0.<java.nio.SocketChannelImpl$SocketChannelInputStream: java.nio.channels.SocketChannel channel>;

        virtualinvoke $r1.<java.nio.channels.SocketChannel: void close()>();

        return;
    }

    public int read() throws java.io.IOException
    {
        java.nio.SocketChannelImpl$SocketChannelInputStream r0;
        java.nio.ByteBuffer r1;
        int i0;
        java.nio.channels.SocketChannel $r2, $r3;
        boolean $z0;
        byte $b1;
        short $s2;
        java.nio.channels.IllegalBlockingModeException $r4;

        r0 := @this: java.nio.SocketChannelImpl$SocketChannelInputStream;

        $r2 = r0.<java.nio.SocketChannelImpl$SocketChannelInputStream: java.nio.channels.SocketChannel channel>;

        $z0 = virtualinvoke $r2.<java.nio.channels.SocketChannel: boolean isBlocking()>();

        if $z0 != 0 goto label1;

        $r4 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r4.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r4;

     label1:
        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1);

        $r3 = r0.<java.nio.SocketChannelImpl$SocketChannelInputStream: java.nio.channels.SocketChannel channel>;

        i0 = virtualinvoke $r3.<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)>(r1);

        if i0 != -1 goto label2;

        return i0;

     label2:
        $b1 = virtualinvoke r1.<java.nio.ByteBuffer: byte get(int)>(0);

        $s2 = 255 & $b1;

        return $s2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.nio.SocketChannelImpl$SocketChannelInputStream r0;
        byte[] r1;
        int i0, i1, $i2, $i3;
        java.nio.ByteBuffer r2;
        java.nio.channels.SocketChannel $r3, $r4;
        boolean $z0;
        java.nio.channels.IllegalBlockingModeException $r5;

        r0 := @this: java.nio.SocketChannelImpl$SocketChannelInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $r3 = r0.<java.nio.SocketChannelImpl$SocketChannelInputStream: java.nio.channels.SocketChannel channel>;

        $z0 = virtualinvoke $r3.<java.nio.channels.SocketChannel: boolean isBlocking()>();

        if $z0 != 0 goto label1;

        $r5 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r5.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r5;

     label1:
        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r1, i0, i1);

        $r4 = r0.<java.nio.SocketChannelImpl$SocketChannelInputStream: java.nio.channels.SocketChannel channel>;

        $i3 = virtualinvoke $r4.<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)>(r2);

        return $i3;
    }
}
