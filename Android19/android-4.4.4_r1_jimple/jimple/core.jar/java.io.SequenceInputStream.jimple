public class java.io.SequenceInputStream extends java.io.InputStream
{
    private java.util.Enumeration e;
    private java.io.InputStream in;

    public void <init>(java.io.InputStream, java.io.InputStream)
    {
        java.io.SequenceInputStream r0;
        java.io.InputStream r1, r2;
        java.util.Vector r3, $r4;
        java.util.Enumeration $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: java.io.SequenceInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.InputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("s1 == null");

        throw $r6;

     label1:
        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>(int)>(1);

        r3 = $r4;

        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        $r5 = virtualinvoke r3.<java.util.Vector: java.util.Enumeration elements()>();

        r0.<java.io.SequenceInputStream: java.util.Enumeration e> = $r5;

        r0.<java.io.SequenceInputStream: java.io.InputStream in> = r1;

        return;
    }

    public void <init>(java.util.Enumeration)
    {
        java.io.SequenceInputStream r0;
        java.util.Enumeration r1;
        boolean $z0;
        java.lang.Object $r2;
        java.io.InputStream $r3, $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: java.io.SequenceInputStream;

        r1 := @parameter0: java.util.Enumeration;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<java.io.SequenceInputStream: java.util.Enumeration e> = r1;

        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r3 = (java.io.InputStream) $r2;

        r0.<java.io.SequenceInputStream: java.io.InputStream in> = $r3;

        $r4 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        if $r4 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("element is null");

        throw $r5;

     label1:
        return;
    }

    private void nextStream() throws java.io.IOException
    {
        java.io.SequenceInputStream r0;
        java.io.InputStream $r1, $r5, $r6, $r8;
        java.util.Enumeration $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.NullPointerException $r7;

        r0 := @this: java.io.SequenceInputStream;

        $r1 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        if $r1 == null goto label1;

        $r8 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        virtualinvoke $r8.<java.io.InputStream: void close()>();

     label1:
        $r2 = r0.<java.io.SequenceInputStream: java.util.Enumeration e>;

        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<java.io.SequenceInputStream: java.util.Enumeration e>;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r5 = (java.io.InputStream) $r4;

        r0.<java.io.SequenceInputStream: java.io.InputStream in> = $r5;

        $r6 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        if $r6 != null goto label3;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("element is null");

        throw $r7;

     label2:
        r0.<java.io.SequenceInputStream: java.io.InputStream in> = null;

     label3:
        return;
    }

    public int available() throws java.io.IOException
    {
        java.io.SequenceInputStream r0;
        java.util.Enumeration $r1;
        java.io.InputStream $r2, $r3;
        int $i0;

        r0 := @this: java.io.SequenceInputStream;

        $r1 = r0.<java.io.SequenceInputStream: java.util.Enumeration e>;

        if $r1 == null goto label1;

        $r2 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        if $r2 == null goto label1;

        $r3 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r3.<java.io.InputStream: int available()>();

        return $i0;

     label1:
        return 0;
    }

    public void close() throws java.io.IOException
    {
        java.io.SequenceInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: java.io.SequenceInputStream;

     label1:
        $r1 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        if $r1 == null goto label2;

        specialinvoke r0.<java.io.SequenceInputStream: void nextStream()>();

        goto label1;

     label2:
        r0.<java.io.SequenceInputStream: java.util.Enumeration e> = null;

        return;
    }

    public int read() throws java.io.IOException
    {
        java.io.SequenceInputStream r0;
        int i0;
        java.io.InputStream $r1, $r2;

        r0 := @this: java.io.SequenceInputStream;

     label1:
        $r1 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        if $r1 == null goto label3;

        $r2 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        if i0 < 0 goto label2;

        return i0;

     label2:
        specialinvoke r0.<java.io.SequenceInputStream: void nextStream()>();

        goto label1;

     label3:
        return -1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.SequenceInputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        java.io.InputStream $r2, $r3, $r4;

        r0 := @this: java.io.SequenceInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        if $r2 != null goto label2;

        i2 = -1;

     label1:
        return i2;

     label2:
        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

     label3:
        $r3 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        if $r3 == null goto label4;

        $r4 = r0.<java.io.SequenceInputStream: java.io.InputStream in>;

        i2 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if i2 >= 0 goto label1;

        specialinvoke r0.<java.io.SequenceInputStream: void nextStream()>();

        goto label3;

     label4:
        return -1;
    }
}
