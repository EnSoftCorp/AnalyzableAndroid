public class javax.crypto.KeyAgreement extends java.lang.Object
{
    private static final org.apache.harmony.security.fortress.Engine ENGINE;
    private static final java.security.SecureRandom RANDOM;
    private final java.lang.String algorithm;
    private final java.security.Provider provider;
    private final javax.crypto.KeyAgreementSpi spiImpl;

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;
        java.security.SecureRandom $r1;

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("KeyAgreement");

        <javax.crypto.KeyAgreement: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        <javax.crypto.KeyAgreement: java.security.SecureRandom RANDOM> = $r1;

        return;
    }

    protected void <init>(javax.crypto.KeyAgreementSpi, java.security.Provider, java.lang.String)
    {
        javax.crypto.KeyAgreement r0;
        javax.crypto.KeyAgreementSpi r1;
        java.security.Provider r2;
        java.lang.String r3;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: javax.crypto.KeyAgreementSpi;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.crypto.KeyAgreement: java.security.Provider provider> = r2;

        r0.<javax.crypto.KeyAgreement: java.lang.String algorithm> = r3;

        r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl> = r1;

        return;
    }

    public static final javax.crypto.KeyAgreement getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r1;
        org.apache.harmony.security.fortress.Engine $r2;
        javax.crypto.KeyAgreement $r3;
        java.lang.Object $r4;
        java.security.Provider $r5;
        javax.crypto.KeyAgreementSpi $r6;
        java.lang.NullPointerException $r7;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r7;

     label1:
        $r2 = <javax.crypto.KeyAgreement: org.apache.harmony.security.fortress.Engine ENGINE>;

        r1 = virtualinvoke $r2.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)>(r0, null);

        $r3 = new javax.crypto.KeyAgreement;

        $r4 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $r6 = (javax.crypto.KeyAgreementSpi) $r4;

        $r5 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        specialinvoke $r3.<javax.crypto.KeyAgreement: void <init>(javax.crypto.KeyAgreementSpi,java.security.Provider,java.lang.String)>($r6, $r5, r0);

        return $r3;
    }

    public static final javax.crypto.KeyAgreement getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1;
        java.security.Provider r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        javax.crypto.KeyAgreement $r4;
        java.security.NoSuchProviderException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provider is null or empty");

        throw $r3;

     label2:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);

        if r2 != null goto label3;

        $r5 = new java.security.NoSuchProviderException;

        specialinvoke $r5.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label3:
        $r4 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.security.Provider)>(r0, r2);

        return $r4;
    }

    public static final javax.crypto.KeyAgreement getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1;
        javax.crypto.KeyAgreement $r2;
        org.apache.harmony.security.fortress.Engine $r3;
        java.lang.Object $r4;
        javax.crypto.KeyAgreementSpi $r5;
        java.lang.NullPointerException $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r7;

     label1:
        if r0 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r6;

     label2:
        $r2 = new javax.crypto.KeyAgreement;

        $r3 = <javax.crypto.KeyAgreement: org.apache.harmony.security.fortress.Engine ENGINE>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)>(r0, r1, null);

        $r5 = (javax.crypto.KeyAgreementSpi) $r4;

        specialinvoke $r2.<javax.crypto.KeyAgreement: void <init>(javax.crypto.KeyAgreementSpi,java.security.Provider,java.lang.String)>($r5, r1, r0);

        return $r2;
    }

    public final java.security.Key doPhase(java.security.Key, boolean) throws java.security.InvalidKeyException, java.lang.IllegalStateException
    {
        javax.crypto.KeyAgreement r0;
        java.security.Key r1, $r3;
        boolean z0;
        javax.crypto.KeyAgreementSpi $r2;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        z0 := @parameter1: boolean;

        $r2 = r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl>;

        $r3 = virtualinvoke $r2.<javax.crypto.KeyAgreementSpi: java.security.Key engineDoPhase(java.security.Key,boolean)>(r1, z0);

        return $r3;
    }

    public final int generateSecret(byte[], int) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException
    {
        javax.crypto.KeyAgreement r0;
        byte[] r1;
        int i0, $i1;
        javax.crypto.KeyAgreementSpi $r2;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r2 = r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl>;

        $i1 = virtualinvoke $r2.<javax.crypto.KeyAgreementSpi: int engineGenerateSecret(byte[],int)>(r1, i0);

        return $i1;
    }

    public final javax.crypto.SecretKey generateSecret(java.lang.String) throws java.lang.IllegalStateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        javax.crypto.KeyAgreement r0;
        java.lang.String r1;
        javax.crypto.KeyAgreementSpi $r2;
        javax.crypto.SecretKey $r3;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl>;

        $r3 = virtualinvoke $r2.<javax.crypto.KeyAgreementSpi: javax.crypto.SecretKey engineGenerateSecret(java.lang.String)>(r1);

        return $r3;
    }

    public final byte[] generateSecret() throws java.lang.IllegalStateException
    {
        javax.crypto.KeyAgreement r0;
        javax.crypto.KeyAgreementSpi $r1;
        byte[] $r2;

        r0 := @this: javax.crypto.KeyAgreement;

        $r1 = r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl>;

        $r2 = virtualinvoke $r1.<javax.crypto.KeyAgreementSpi: byte[] engineGenerateSecret()>();

        return $r2;
    }

    public final java.lang.String getAlgorithm()
    {
        javax.crypto.KeyAgreement r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.KeyAgreement;

        $r1 = r0.<javax.crypto.KeyAgreement: java.lang.String algorithm>;

        return $r1;
    }

    public final java.security.Provider getProvider()
    {
        javax.crypto.KeyAgreement r0;
        java.security.Provider $r1;

        r0 := @this: javax.crypto.KeyAgreement;

        $r1 = r0.<javax.crypto.KeyAgreement: java.security.Provider provider>;

        return $r1;
    }

    public final void init(java.security.Key) throws java.security.InvalidKeyException
    {
        javax.crypto.KeyAgreement r0;
        java.security.Key r1;
        java.security.SecureRandom $r2;
        javax.crypto.KeyAgreementSpi $r3;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        $r3 = r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl>;

        $r2 = <javax.crypto.KeyAgreement: java.security.SecureRandom RANDOM>;

        virtualinvoke $r3.<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.SecureRandom)>(r1, $r2);

        return;
    }

    public final void init(java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        javax.crypto.KeyAgreement r0;
        java.security.Key r1;
        java.security.SecureRandom r2;
        javax.crypto.KeyAgreementSpi $r3;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.SecureRandom;

        $r3 = r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl>;

        virtualinvoke $r3.<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.SecureRandom)>(r1, r2);

        return;
    }

    public final void init(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.KeyAgreement r0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        java.security.SecureRandom $r3;
        javax.crypto.KeyAgreementSpi $r4;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r4 = r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl>;

        $r3 = <javax.crypto.KeyAgreement: java.security.SecureRandom RANDOM>;

        virtualinvoke $r4.<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(r1, r2, $r3);

        return;
    }

    public final void init(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.KeyAgreement r0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        java.security.SecureRandom r3;
        javax.crypto.KeyAgreementSpi $r4;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        r3 := @parameter2: java.security.SecureRandom;

        $r4 = r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl>;

        virtualinvoke $r4.<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(r1, r2, r3);

        return;
    }
}
