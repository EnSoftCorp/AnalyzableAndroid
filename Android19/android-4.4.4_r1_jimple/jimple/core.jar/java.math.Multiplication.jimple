class java.math.Multiplication extends java.lang.Object
{
    static final java.math.BigInteger[] bigFivePows;
    static final java.math.BigInteger[] bigTenPows;
    static final int[] fivePows;
    static final int[] tenPows;

    static void <clinit>()
    {
        long l0, $l5;
        int i1, $i2, $i3, $i4;
        int[] $r0, $r1;
        java.math.BigInteger[] $r2, $r3, $r4, $r5, $r6, $r9, $r11, $r15, $r17, $r18;
        java.math.BigInteger $r7, $r8, $r10, $r12, $r13, $r14, $r16, $r19;

        $r0 = newarray (int)[10];

        $r0[0] = 1;

        $r0[1] = 10;

        $r0[2] = 100;

        $r0[3] = 1000;

        $r0[4] = 10000;

        $r0[5] = 100000;

        $r0[6] = 1000000;

        $r0[7] = 10000000;

        $r0[8] = 100000000;

        $r0[9] = 1000000000;

        <java.math.Multiplication: int[] tenPows> = $r0;

        $r1 = newarray (int)[14];

        $r1[0] = 1;

        $r1[1] = 5;

        $r1[2] = 25;

        $r1[3] = 125;

        $r1[4] = 625;

        $r1[5] = 3125;

        $r1[6] = 15625;

        $r1[7] = 78125;

        $r1[8] = 390625;

        $r1[9] = 1953125;

        $r1[10] = 9765625;

        $r1[11] = 48828125;

        $r1[12] = 244140625;

        $r1[13] = 1220703125;

        <java.math.Multiplication: int[] fivePows> = $r1;

        $r2 = newarray (java.math.BigInteger)[32];

        <java.math.Multiplication: java.math.BigInteger[] bigTenPows> = $r2;

        $r3 = newarray (java.math.BigInteger)[32];

        <java.math.Multiplication: java.math.BigInteger[] bigFivePows> = $r3;

        l0 = 1L;

        i1 = 0;

     label1:
        if i1 > 18 goto label2;

        $r17 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r16 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);

        $r17[i1] = $r16;

        $r18 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $l5 = l0 << i1;

        $r19 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        $r18[i1] = $r19;

        l0 = l0 * 5L;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $i2 = lengthof $r4;

        if i1 >= $i2 goto label3;

        $r9 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r5 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $i3 = i1 - 1;

        $r8 = $r5[$i3];

        $r6 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r7 = $r6[1];

        $r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        $r9[i1] = $r10;

        $r15 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $r11 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $i4 = i1 - 1;

        $r12 = $r11[$i4];

        $r13 = <java.math.BigInteger: java.math.BigInteger TEN>;

        $r14 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r13);

        $r15[i1] = $r14;

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private void <init>()
    {
        java.math.Multiplication r0;

        r0 := @this: java.math.Multiplication;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.math.BigInteger multiplyByFivePow(java.math.BigInteger, int)
    {
        java.math.BigInteger r0, $r4, $r5, $r6, $r8, $r9, $r11;
        int i0, $i1, $i2, $i3;
        int[] $r1, $r10;
        java.math.BigInteger[] $r2, $r3, $r7;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        $r1 = <java.math.Multiplication: int[] fivePows>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r10 = <java.math.Multiplication: int[] fivePows>;

        $i3 = $r10[i0];

        $r11 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByPositiveInt(java.math.BigInteger,int)>(r0, $i3);

        return $r11;

     label1:
        $r2 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $i2 = lengthof $r2;

        if i0 >= $i2 goto label2;

        $r7 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r8 = $r7[i0];

        $r9 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        return $r9;

     label2:
        $r3 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r4 = $r3[1];

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0);

        $r6 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        return $r6;
    }

    static java.math.BigInteger multiplyByPositiveInt(java.math.BigInteger, int)
    {
        java.math.BigInteger r0, $r3;
        int i0;
        java.math.BigInt r1, $r2;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        r1 = virtualinvoke $r2.<java.math.BigInt: java.math.BigInt copy()>();

        virtualinvoke r1.<java.math.BigInt: void multiplyByPositiveInt(int)>(i0);

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(java.math.BigInt)>(r1);

        return $r3;
    }

    static java.math.BigInteger multiplyByTenPow(java.math.BigInteger, long)
    {
        java.math.BigInteger r0, $r2, $r3, $r5;
        long l0, $l2;
        int[] $r1, $r4;
        int $i1, $i4, $i5;
        byte $b3;

        r0 := @parameter0: java.math.BigInteger;

        l0 := @parameter1: long;

        $r1 = <java.math.Multiplication: int[] tenPows>;

        $i1 = lengthof $r1;

        $l2 = (long) $i1;

        $b3 = l0 cmp $l2;

        if $b3 >= 0 goto label1;

        $r4 = <java.math.Multiplication: int[] tenPows>;

        $i4 = (int) l0;

        $i5 = $r4[$i4];

        $r5 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByPositiveInt(java.math.BigInteger,int)>(r0, $i5);

        return $r5;

     label1:
        $r2 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>(l0);

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        return $r3;
    }

    static java.math.BigInteger powerOf10(long)
    {
        long l0, l2, l4, $l6, $l10, $l11, $l13, $l16;
        int i1, i3, $i5;
        java.math.BigInteger r0, r1, r2, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r17, $r18, $r20, $r21, $r23, $r24;
        java.math.BigInteger[] $r3, $r5, $r8, $r11, $r19, $r22;
        byte $b7, $b8, $b9, $b12, $b14, $b15, $b17;
        double $d0, $d1;
        java.lang.Runtime $r4;
        java.lang.ArithmeticException $r14;

        l0 := @parameter0: long;

        i1 = (int) l0;

        $r3 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $i5 = lengthof $r3;

        $l6 = (long) $i5;

        $b7 = l0 cmp $l6;

        if $b7 >= 0 goto label1;

        $r22 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $r21 = $r22[i1];

        return $r21;

     label1:
        $b8 = l0 cmp 50L;

        if $b8 > 0 goto label2;

        $r24 = <java.math.BigInteger: java.math.BigInteger TEN>;

        $r23 = virtualinvoke $r24.<java.math.BigInteger: java.math.BigInteger pow(int)>(i1);

        return $r23;

     label2:
        $b9 = l0 cmp 1000L;

        if $b9 > 0 goto label3;

        $r19 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r20 = $r19[1];

        $r17 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger pow(int)>(i1);

        $r18 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i1);

        return $r18;

     label3:
        $d0 = (double) l0;

        $d1 = $d0 / 2.4082399653118496;

        $l10 = (long) $d1;

        $l11 = 1L + $l10;

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l13 = virtualinvoke $r4.<java.lang.Runtime: long freeMemory()>();

        $b12 = $l11 cmp $l13;

        if $b12 <= 0 goto label4;

        $r14 = new java.lang.ArithmeticException;

        specialinvoke $r14.<java.lang.ArithmeticException: void <init>()>();

        throw $r14;

     label4:
        $b14 = l0 cmp 2147483647L;

        if $b14 > 0 goto label5;

        $r11 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r15 = $r11[1];

        $r16 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger pow(int)>(i1);

        $r13 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i1);

        return $r13;

     label5:
        $r5 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r6 = $r5[1];

        r0 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(2147483647);

        r1 = r0;

        l2 = l0 - 2147483647L;

        $l16 = l0 % 2147483647L;

        i3 = (int) $l16;

     label6:
        $b15 = l2 cmp 2147483647L;

        if $b15 <= 0 goto label7;

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r0);

        l2 = l2 - 2147483647L;

        goto label6;

     label7:
        $r8 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r7 = $r8[1];

        $r9 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger pow(int)>(i3);

        $r10 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);

        r2 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(2147483647);

        l4 = l0 - 2147483647L;

     label8:
        $b17 = l4 cmp 2147483647L;

        if $b17 <= 0 goto label9;

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(2147483647);

        l4 = l4 - 2147483647L;

        goto label8;

     label9:
        $r12 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i3);

        return $r12;
    }
}
