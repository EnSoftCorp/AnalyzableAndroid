public final class org.apache.harmony.xml.dom.DOMConfigurationImpl extends java.lang.Object implements org.w3c.dom.DOMConfiguration
{
    private static final java.util.Map PARAMETERS;
    private boolean cdataSections;
    private boolean comments;
    private boolean datatypeNormalization;
    private boolean entities;
    private org.w3c.dom.DOMErrorHandler errorHandler;
    private boolean namespaces;
    private java.lang.String schemaLocation;
    private java.lang.String schemaType;
    private boolean splitCdataSections;
    private boolean validate;
    private boolean wellFormed;

    static void <clinit>()
    {
        java.util.TreeMap $r0;
        java.util.Comparator $r1;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter $r2, $r9, $r20, $r36, $r38, $r52;
        java.util.Map $r3, $r7, $r10, $r13, $r16, $r19, $r24, $r25, $r28, $r31, $r34, $r37, $r46, $r49, $r50, $r53, $r57, $r59;
        java.lang.Boolean $r4, $r11, $r21, $r40, $r43, $r60;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$1 $r6;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$2 $r14;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$3 $r17;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$4 $r22;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$5 $r27;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$6 $r30;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$7 $r33;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$8 $r41;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$9 $r44;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$10 $r47;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$11 $r55;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$12 $r56;

        $r0 = new java.util.TreeMap;

        $r1 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r0.<java.util.TreeMap: void <init>(java.util.Comparator)>($r1);

        <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS> = $r0;

        $r3 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r2 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        specialinvoke $r2.<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: void <init>(java.lang.Object)>($r4);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("canonical-form", $r2);

        $r7 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r6 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$1;

        specialinvoke $r6.<org.apache.harmony.xml.dom.DOMConfigurationImpl$1: void <init>()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cdata-sections", $r6);

        $r10 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r9 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        specialinvoke $r9.<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: void <init>(java.lang.Object)>($r11);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("check-character-normalization", $r9);

        $r13 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r14 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$2;

        specialinvoke $r14.<org.apache.harmony.xml.dom.DOMConfigurationImpl$2: void <init>()>();

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("comments", $r14);

        $r16 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r17 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$3;

        specialinvoke $r17.<org.apache.harmony.xml.dom.DOMConfigurationImpl$3: void <init>()>();

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("datatype-normalization", $r17);

        $r19 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r20 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter;

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        specialinvoke $r20.<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: void <init>(java.lang.Object)>($r21);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("element-content-whitespace", $r20);

        $r24 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r22 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$4;

        specialinvoke $r22.<org.apache.harmony.xml.dom.DOMConfigurationImpl$4: void <init>()>();

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("entities", $r22);

        $r25 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r27 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$5;

        specialinvoke $r27.<org.apache.harmony.xml.dom.DOMConfigurationImpl$5: void <init>()>();

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("error-handler", $r27);

        $r28 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r30 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$6;

        specialinvoke $r30.<org.apache.harmony.xml.dom.DOMConfigurationImpl$6: void <init>()>();

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("infoset", $r30);

        $r31 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r33 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$7;

        specialinvoke $r33.<org.apache.harmony.xml.dom.DOMConfigurationImpl$7: void <init>()>();

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("namespaces", $r33);

        $r34 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r36 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter;

        $r40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        specialinvoke $r36.<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: void <init>(java.lang.Object)>($r40);

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("namespace-declarations", $r36);

        $r37 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r38 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter;

        $r43 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        specialinvoke $r38.<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: void <init>(java.lang.Object)>($r43);

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("normalize-characters", $r38);

        $r46 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r41 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$8;

        specialinvoke $r41.<org.apache.harmony.xml.dom.DOMConfigurationImpl$8: void <init>()>();

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("schema-location", $r41);

        $r49 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r44 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$9;

        specialinvoke $r44.<org.apache.harmony.xml.dom.DOMConfigurationImpl$9: void <init>()>();

        interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("schema-type", $r44);

        $r53 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r47 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$10;

        specialinvoke $r47.<org.apache.harmony.xml.dom.DOMConfigurationImpl$10: void <init>()>();

        interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("split-cdata-sections", $r47);

        $r50 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r55 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$11;

        specialinvoke $r55.<org.apache.harmony.xml.dom.DOMConfigurationImpl$11: void <init>()>();

        interfaceinvoke $r50.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("validate", $r55);

        $r59 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r52 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter;

        $r60 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        specialinvoke $r52.<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: void <init>(java.lang.Object)>($r60);

        interfaceinvoke $r59.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("validate-if-schema", $r52);

        $r57 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r56 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$12;

        specialinvoke $r56.<org.apache.harmony.xml.dom.DOMConfigurationImpl$12: void <init>()>();

        interfaceinvoke $r57.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("well-formed", $r56);

        return;
    }

    public void <init>()
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean cdataSections> = 1;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean comments> = 1;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean datatypeNormalization> = 0;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean entities> = 1;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean namespaces> = 1;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean splitCdataSections> = 1;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean validate> = 0;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean wellFormed> = 1;

        return;
    }

    static boolean access$000(org.apache.harmony.xml.dom.DOMConfigurationImpl)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean $z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $z0 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean cdataSections>;

        return $z0;
    }

    static boolean access$002(org.apache.harmony.xml.dom.DOMConfigurationImpl, boolean)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        z0 := @parameter1: boolean;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean cdataSections> = z0;

        return z0;
    }

    static boolean access$100(org.apache.harmony.xml.dom.DOMConfigurationImpl)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean $z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $z0 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean comments>;

        return $z0;
    }

    static boolean access$1000(org.apache.harmony.xml.dom.DOMConfigurationImpl)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean $z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $z0 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean splitCdataSections>;

        return $z0;
    }

    static boolean access$1002(org.apache.harmony.xml.dom.DOMConfigurationImpl, boolean)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        z0 := @parameter1: boolean;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean splitCdataSections> = z0;

        return z0;
    }

    static boolean access$102(org.apache.harmony.xml.dom.DOMConfigurationImpl, boolean)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        z0 := @parameter1: boolean;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean comments> = z0;

        return z0;
    }

    static java.util.Map access$1100()
    {
        java.util.Map $r0;

        $r0 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        return $r0;
    }

    static boolean access$200(org.apache.harmony.xml.dom.DOMConfigurationImpl)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean $z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $z0 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean datatypeNormalization>;

        return $z0;
    }

    static boolean access$202(org.apache.harmony.xml.dom.DOMConfigurationImpl, boolean)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        z0 := @parameter1: boolean;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean datatypeNormalization> = z0;

        return z0;
    }

    static boolean access$300(org.apache.harmony.xml.dom.DOMConfigurationImpl)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean $z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $z0 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean validate>;

        return $z0;
    }

    static boolean access$302(org.apache.harmony.xml.dom.DOMConfigurationImpl, boolean)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        z0 := @parameter1: boolean;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean validate> = z0;

        return z0;
    }

    static boolean access$400(org.apache.harmony.xml.dom.DOMConfigurationImpl)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean $z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $z0 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean entities>;

        return $z0;
    }

    static boolean access$402(org.apache.harmony.xml.dom.DOMConfigurationImpl, boolean)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        z0 := @parameter1: boolean;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean entities> = z0;

        return z0;
    }

    static org.w3c.dom.DOMErrorHandler access$500(org.apache.harmony.xml.dom.DOMConfigurationImpl)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        org.w3c.dom.DOMErrorHandler $r1;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: org.w3c.dom.DOMErrorHandler errorHandler>;

        return $r1;
    }

    static org.w3c.dom.DOMErrorHandler access$502(org.apache.harmony.xml.dom.DOMConfigurationImpl, org.w3c.dom.DOMErrorHandler)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        org.w3c.dom.DOMErrorHandler r1;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        r1 := @parameter1: org.w3c.dom.DOMErrorHandler;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: org.w3c.dom.DOMErrorHandler errorHandler> = r1;

        return r1;
    }

    static boolean access$600(org.apache.harmony.xml.dom.DOMConfigurationImpl)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean $z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $z0 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean wellFormed>;

        return $z0;
    }

    static boolean access$602(org.apache.harmony.xml.dom.DOMConfigurationImpl, boolean)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        z0 := @parameter1: boolean;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean wellFormed> = z0;

        return z0;
    }

    static boolean access$700(org.apache.harmony.xml.dom.DOMConfigurationImpl)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean $z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $z0 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean namespaces>;

        return $z0;
    }

    static boolean access$702(org.apache.harmony.xml.dom.DOMConfigurationImpl, boolean)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        boolean z0;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        z0 := @parameter1: boolean;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean namespaces> = z0;

        return z0;
    }

    static java.lang.String access$800(org.apache.harmony.xml.dom.DOMConfigurationImpl)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: java.lang.String schemaLocation>;

        return $r1;
    }

    static java.lang.String access$802(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.String)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        java.lang.String r1;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        r1 := @parameter1: java.lang.String;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: java.lang.String schemaLocation> = r1;

        return r1;
    }

    static java.lang.String access$900(org.apache.harmony.xml.dom.DOMConfigurationImpl)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: java.lang.String schemaType>;

        return $r1;
    }

    static java.lang.String access$902(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.String)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        java.lang.String r1;

        r0 := @parameter0: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        r1 := @parameter1: java.lang.String;

        r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: java.lang.String schemaType> = r1;

        return r1;
    }

    private void checkTextValidity(java.lang.CharSequence)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        java.lang.CharSequence r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        r1 := @parameter0: java.lang.CharSequence;

        $z0 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean wellFormed>;

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean isValid(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label1;

        specialinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void report(short,java.lang.String)>(2, "wf-invalid-character");

     label1:
        return;
    }

    private boolean isValid(java.lang.CharSequence)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        java.lang.CharSequence r1;
        int i0, $i2;
        char c1;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        r1 := @parameter0: java.lang.CharSequence;

        i0 = 0;

     label1:
        $i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i0 >= $i2 goto label7;

        c1 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i0);

        if c1 == 9 goto label3;

        if c1 == 10 goto label3;

        if c1 == 13 goto label3;

        if c1 < 32 goto label2;

        if c1 <= 55295 goto label3;

     label2:
        if c1 < 57344 goto label5;

        if c1 > 65533 goto label5;

     label3:
        z0 = 1;

     label4:
        if z0 != 0 goto label6;

        return 0;

     label5:
        z0 = 0;

        goto label4;

     label6:
        i0 = i0 + 1;

        goto label1;

     label7:
        return 1;
    }

    private void report(short, java.lang.String)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        short s0;
        java.lang.String r1;
        org.w3c.dom.DOMErrorHandler $r2, $r4;
        org.apache.harmony.xml.dom.DOMErrorImpl $r3;

        r0 := @this: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        s0 := @parameter0: short;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: org.w3c.dom.DOMErrorHandler errorHandler>;

        if $r2 == null goto label1;

        $r4 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: org.w3c.dom.DOMErrorHandler errorHandler>;

        $r3 = new org.apache.harmony.xml.dom.DOMErrorImpl;

        specialinvoke $r3.<org.apache.harmony.xml.dom.DOMErrorImpl: void <init>(short,java.lang.String)>(s0, r1);

        interfaceinvoke $r4.<org.w3c.dom.DOMErrorHandler: boolean handleError(org.w3c.dom.DOMError)>($r3);

     label1:
        return;
    }

    public boolean canSetParameter(java.lang.String, java.lang.Object)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        java.lang.String r1;
        java.lang.Object r2, $r5;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$Parameter r3;
        java.util.Map $r4;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r4 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (org.apache.harmony.xml.dom.DOMConfigurationImpl$Parameter) $r5;

        if r3 == null goto label1;

        $z0 = interfaceinvoke r3.<org.apache.harmony.xml.dom.DOMConfigurationImpl$Parameter: boolean canSet(org.apache.harmony.xml.dom.DOMConfigurationImpl,java.lang.Object)>(r0, r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object getParameter(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        java.lang.String r1, $r10;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$Parameter r2;
        java.util.Map $r3;
        java.lang.Object $r4, $r5;
        org.w3c.dom.DOMException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.harmony.xml.dom.DOMConfigurationImpl$Parameter) $r4;

        if r2 != null goto label1;

        $r6 = new org.w3c.dom.DOMException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such parameter: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(8, $r10);

        throw $r6;

     label1:
        $r5 = interfaceinvoke r2.<org.apache.harmony.xml.dom.DOMConfigurationImpl$Parameter: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>(r0);

        return $r5;
    }

    public org.w3c.dom.DOMStringList getParameterNames()
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$13 $r1;
        java.util.Map $r2, $r4;
        java.util.Set $r3;
        int $i0;
        java.lang.String[] $r5, $r7;
        java.lang.Object[] $r6;

        r0 := @this: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        $r1 = new org.apache.harmony.xml.dom.DOMConfigurationImpl$13;

        $r2 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $i0 = interfaceinvoke $r4.<java.util.Map: int size()>();

        $r5 = newarray (java.lang.String)[$i0];

        $r6 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        specialinvoke $r1.<org.apache.harmony.xml.dom.DOMConfigurationImpl$13: void <init>(org.apache.harmony.xml.dom.DOMConfigurationImpl,java.lang.String[])>(r0, $r7);

        return $r1;
    }

    public void normalize(org.w3c.dom.Node)
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        org.w3c.dom.Node r1, r2, r3, $r13, $r24;
        org.w3c.dom.NamedNodeMap r4;
        int i0, $i3;
        org.apache.harmony.xml.dom.CommentImpl r5;
        org.apache.harmony.xml.dom.TextImpl r6, $r18;
        org.apache.harmony.xml.dom.CDATASectionImpl r7;
        short $s1, $s2;
        org.w3c.dom.DOMException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r11, $r17, $r22;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuffer $r14, $r19, $r21;
        org.apache.harmony.xml.dom.ProcessingInstructionImpl $r15;
        org.apache.harmony.xml.dom.AttrImpl $r20;
        org.apache.harmony.xml.dom.ElementImpl $r23;

        r0 := @this: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        $s1 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        tableswitch($s1)
        {
            case 1: goto label13;
            case 2: goto label12;
            case 3: goto label07;
            case 4: goto label02;
            case 5: goto label04;
            case 6: goto label04;
            case 7: goto label11;
            case 8: goto label08;
            case 9: goto label15;
            case 10: goto label04;
            case 11: goto label15;
            case 12: goto label04;
            default: goto label01;
        };

     label01:
        $r8 = new org.w3c.dom.DOMException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported node type ");

        $s2 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s2);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, $r11);

        throw $r8;

     label02:
        r7 = (org.apache.harmony.xml.dom.CDATASectionImpl) r1;

        $z2 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean cdataSections>;

        if $z2 == 0 goto label06;

        $z4 = virtualinvoke r7.<org.apache.harmony.xml.dom.CDATASectionImpl: boolean needsSplitting()>();

        if $z4 == 0 goto label03;

        $z3 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean splitCdataSections>;

        if $z3 == 0 goto label05;

        virtualinvoke r7.<org.apache.harmony.xml.dom.CDATASectionImpl: void split()>();

        specialinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void report(short,java.lang.String)>(1, "cdata-sections-splitted");

     label03:
        $r21 = r7.<org.apache.harmony.xml.dom.CDATASectionImpl: java.lang.StringBuffer buffer>;

        specialinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void checkTextValidity(java.lang.CharSequence)>($r21);

     label04:
        return;

     label05:
        specialinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void report(short,java.lang.String)>(2, "wf-invalid-character");

        goto label03;

     label06:
        r1 = virtualinvoke r7.<org.apache.harmony.xml.dom.CDATASectionImpl: org.apache.harmony.xml.dom.TextImpl replaceWithText()>();

     label07:
        $r18 = (org.apache.harmony.xml.dom.TextImpl) r1;

        r6 = virtualinvoke $r18.<org.apache.harmony.xml.dom.TextImpl: org.apache.harmony.xml.dom.TextImpl minimize()>();

        if r6 == null goto label04;

        $r19 = r6.<org.apache.harmony.xml.dom.TextImpl: java.lang.StringBuffer buffer>;

        specialinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void checkTextValidity(java.lang.CharSequence)>($r19);

        return;

     label08:
        r5 = (org.apache.harmony.xml.dom.CommentImpl) r1;

        $z1 = r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean comments>;

        if $z1 != 0 goto label09;

        $r13 = virtualinvoke r5.<org.apache.harmony.xml.dom.CommentImpl: org.w3c.dom.Node getParentNode()>();

        interfaceinvoke $r13.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r5);

        return;

     label09:
        $z0 = virtualinvoke r5.<org.apache.harmony.xml.dom.CommentImpl: boolean containsDashDash()>();

        if $z0 == 0 goto label10;

        specialinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void report(short,java.lang.String)>(2, "wf-invalid-character");

     label10:
        $r14 = r5.<org.apache.harmony.xml.dom.CommentImpl: java.lang.StringBuffer buffer>;

        specialinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void checkTextValidity(java.lang.CharSequence)>($r14);

        return;

     label11:
        $r15 = (org.apache.harmony.xml.dom.ProcessingInstructionImpl) r1;

        $r17 = virtualinvoke $r15.<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getData()>();

        specialinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void checkTextValidity(java.lang.CharSequence)>($r17);

        return;

     label12:
        $r20 = (org.apache.harmony.xml.dom.AttrImpl) r1;

        $r22 = virtualinvoke $r20.<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getValue()>();

        specialinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void checkTextValidity(java.lang.CharSequence)>($r22);

        return;

     label13:
        $r23 = (org.apache.harmony.xml.dom.ElementImpl) r1;

        r4 = virtualinvoke $r23.<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()>();

        i0 = 0;

     label14:
        $i3 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i0 >= $i3 goto label15;

        $r24 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i0);

        virtualinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void normalize(org.w3c.dom.Node)>($r24);

        i0 = i0 + 1;

        goto label14;

     label15:
        r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

     label16:
        if r2 == null goto label04;

        r3 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        virtualinvoke r0.<org.apache.harmony.xml.dom.DOMConfigurationImpl: void normalize(org.w3c.dom.Node)>(r2);

        r2 = r3;

        goto label16;
    }

    public void setParameter(java.lang.String, java.lang.Object) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.DOMConfigurationImpl r0;
        java.lang.String r1, $r12, $r20, $r27;
        java.lang.Object r2, $r7;
        org.apache.harmony.xml.dom.DOMConfigurationImpl$Parameter r3;
        java.util.Map $r6;
        org.w3c.dom.DOMException $r8, $r14, $r22;
        java.lang.StringBuilder $r9, $r10, $r11, $r15, $r16, $r17, $r19, $r21, $r24, $r25, $r26;
        java.lang.ClassCastException $r13;
        java.lang.Class $r18;
        java.lang.NullPointerException $r23;

        r0 := @this: org.apache.harmony.xml.dom.DOMConfigurationImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r6 = <org.apache.harmony.xml.dom.DOMConfigurationImpl: java.util.Map PARAMETERS>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (org.apache.harmony.xml.dom.DOMConfigurationImpl$Parameter) $r7;

        if r3 != null goto label1;

        $r8 = new org.w3c.dom.DOMException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such parameter: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(8, $r12);

        throw $r8;

     label1:
        interfaceinvoke r3.<org.apache.harmony.xml.dom.DOMConfigurationImpl$Parameter: void set(org.apache.harmony.xml.dom.DOMConfigurationImpl,java.lang.Object)>(r0, r2);

     label2:
        return;

     label3:
        $r23 := @caughtexception;

        $r22 = new org.w3c.dom.DOMException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Null not allowed for ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(17, $r27);

        throw $r22;

     label4:
        $r13 := @caughtexception;

        $r14 = new org.w3c.dom.DOMException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type for ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r18 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(17, $r20);

        throw $r14;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label4;
    }
}
