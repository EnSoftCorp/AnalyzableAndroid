public abstract class java.nio.charset.Charset extends java.lang.Object implements java.lang.Comparable
{
    private static final java.util.HashMap CACHED_CHARSETS;
    private static final java.nio.charset.Charset DEFAULT_CHARSET;
    private final java.util.HashSet aliasesSet;
    private final java.lang.String canonicalName;

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.nio.charset.Charset $r1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <java.nio.charset.Charset: java.util.HashMap CACHED_CHARSETS> = $r0;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset getDefaultCharset()>();

        <java.nio.charset.Charset: java.nio.charset.Charset DEFAULT_CHARSET> = $r1;

        return;
    }

    protected void <init>(java.lang.String, java.lang.String[])
    {
        java.nio.charset.Charset r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        int i0, i1;
        java.util.HashSet $r4, $r5;

        r0 := @this: java.nio.charset.Charset;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <java.nio.charset.Charset: void checkCharsetName(java.lang.String)>(r1);

        r0.<java.nio.charset.Charset: java.lang.String canonicalName> = r1;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<java.nio.charset.Charset: java.util.HashSet aliasesSet> = $r4;

        if r2 == null goto label2;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        staticinvoke <java.nio.charset.Charset: void checkCharsetName(java.lang.String)>(r3);

        $r5 = r0.<java.nio.charset.Charset: java.util.HashSet aliasesSet>;

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.util.SortedMap availableCharsets()
    {
        java.util.TreeMap r0, $r6;
        java.lang.String[] r1;
        int i0, i1;
        java.util.Iterator r2, r3;
        java.nio.charset.Charset r4, r5;
        java.util.Comparator $r7;
        java.util.ServiceLoader $r8;
        boolean $z0, $z1, $z2;
        java.util.SortedMap $r9;
        java.nio.charset.spi.CharsetProvider $r10;
        java.lang.Object $r11, $r13;
        java.lang.String $r12, $r14, $r15, $r17;

        $r6 = new java.util.TreeMap;

        $r7 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r6.<java.util.TreeMap: void <init>(java.util.Comparator)>($r7);

        r0 = $r6;

        r1 = staticinvoke <libcore.icu.NativeConverter: java.lang.String[] getAvailableCharsetNames()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r15 = r1[i1];

        r5 = staticinvoke <libcore.icu.NativeConverter: java.nio.charset.Charset charsetForName(java.lang.String)>($r15);

        $r17 = virtualinvoke r5.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke r0.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r8 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "java/nio/charset/spi/CharsetProvider");

        r2 = virtualinvoke $r8.<java.util.ServiceLoader: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.nio.charset.spi.CharsetProvider) $r11;

        r3 = virtualinvoke $r10.<java.nio.charset.spi.CharsetProvider: java.util.Iterator charsets()>();

     label4:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.nio.charset.Charset) $r13;

        $r12 = virtualinvoke r4.<java.nio.charset.Charset: java.lang.String name()>();

        $z2 = virtualinvoke r0.<java.util.TreeMap: boolean containsKey(java.lang.Object)>($r12);

        if $z2 != 0 goto label4;

        $r14 = virtualinvoke r4.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke r0.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r4);

        goto label4;

     label5:
        $r9 = staticinvoke <java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>(r0);

        return $r9;
    }

    private static java.nio.charset.Charset cacheCharset(java.lang.String, java.nio.charset.Charset)
    {
        java.lang.String r0, r4, r7;
        java.nio.charset.Charset r1, r5;
        java.util.HashMap r2, $r8, $r10, $r13, $r15;
        java.lang.Throwable r3, $r17;
        java.util.Iterator r6;
        java.lang.Object $r9, $r16;
        java.util.HashSet $r14;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.nio.charset.Charset;

        r2 = <java.nio.charset.Charset: java.util.HashMap CACHED_CHARSETS>;

        entermonitor r2;

     label01:
        r4 = virtualinvoke r1.<java.nio.charset.Charset: java.lang.String name()>();

        $r8 = <java.nio.charset.Charset: java.util.HashMap CACHED_CHARSETS>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (java.nio.charset.Charset) $r9;

     label02:
        if r5 != null goto label03;

        r5 = r1;

     label03:
        $r10 = <java.nio.charset.Charset: java.util.HashMap CACHED_CHARSETS>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

        $r13 = <java.nio.charset.Charset: java.util.HashMap CACHED_CHARSETS>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r5);

        $r14 = r1.<java.nio.charset.Charset: java.util.HashSet aliasesSet>;

        r6 = virtualinvoke $r14.<java.util.HashSet: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r16 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r16;

        $r15 = <java.nio.charset.Charset: java.util.HashMap CACHED_CHARSETS>;

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r5);

     label05:
        goto label04;

     label06:
        $r17 := @caughtexception;

        r3 = $r17;

     label07:
        exitmonitor r2;

     label08:
        throw r3;

     label09:
        exitmonitor r2;

     label10:
        return r5;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
    }

    private static void checkCharsetName(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i2;
        boolean $z0, $z1, $z2;
        char $c1, $c3;
        java.nio.charset.IllegalCharsetNameException $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = new java.nio.charset.IllegalCharsetNameException;

        specialinvoke $r3.<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>(r0);

        throw $r3;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <java.nio.charset.Charset: boolean isValidCharsetNameStart(char)>($c1);

        if $z1 != 0 goto label2;

        $r2 = new java.nio.charset.IllegalCharsetNameException;

        specialinvoke $r2.<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>(r0);

        throw $r2;

     label2:
        i0 = 1;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i2 goto label5;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $z2 = staticinvoke <java.nio.charset.Charset: boolean isValidCharsetNamePart(char)>($c3);

        if $z2 != 0 goto label4;

        $r1 = new java.nio.charset.IllegalCharsetNameException;

        specialinvoke $r1.<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>(r0);

        throw $r1;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        return;
    }

    public static java.nio.charset.Charset defaultCharset()
    {
        java.nio.charset.Charset $r0;

        $r0 = <java.nio.charset.Charset: java.nio.charset.Charset DEFAULT_CHARSET>;

        return $r0;
    }

    public static java.nio.charset.Charset forName(java.lang.String)
    {
        java.lang.String r0;
        java.util.HashMap r1, $r7;
        java.lang.Throwable r2, $r16;
        java.nio.charset.Charset r3, r4, r6, $r13, $r15;
        java.util.Iterator r5;
        java.lang.Object $r8, $r12;
        java.util.ServiceLoader $r9;
        boolean $z0;
        java.nio.charset.UnsupportedCharsetException $r10;
        java.nio.charset.spi.CharsetProvider $r11;
        java.nio.charset.IllegalCharsetNameException $r14;

        r0 := @parameter0: java.lang.String;

        r1 = <java.nio.charset.Charset: java.util.HashMap CACHED_CHARSETS>;

        entermonitor r1;

     label01:
        $r7 = <java.nio.charset.Charset: java.util.HashMap CACHED_CHARSETS>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.nio.charset.Charset) $r8;

     label02:
        if r3 == null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return r3;

     label05:
        exitmonitor r1;

     label06:
        if r0 != null goto label10;

        $r14 = new java.nio.charset.IllegalCharsetNameException;

        specialinvoke $r14.<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>(null);

        throw $r14;

     label07:
        $r16 := @caughtexception;

        r2 = $r16;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        staticinvoke <java.nio.charset.Charset: void checkCharsetName(java.lang.String)>(r0);

        r4 = staticinvoke <libcore.icu.NativeConverter: java.nio.charset.Charset charsetForName(java.lang.String)>(r0);

        if r4 == null goto label11;

        $r15 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset cacheCharset(java.lang.String,java.nio.charset.Charset)>(r0, r4);

        return $r15;

     label11:
        $r9 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "java/nio/charset/spi/CharsetProvider");

        r5 = virtualinvoke $r9.<java.util.ServiceLoader: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.nio.charset.spi.CharsetProvider) $r12;

        r6 = virtualinvoke $r11.<java.nio.charset.spi.CharsetProvider: java.nio.charset.Charset charsetForName(java.lang.String)>(r0);

        if r6 == null goto label12;

        $r13 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset cacheCharset(java.lang.String,java.nio.charset.Charset)>(r0, r6);

        return $r13;

     label13:
        $r10 = new java.nio.charset.UnsupportedCharsetException;

        specialinvoke $r10.<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>(r0);

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public static java.nio.charset.Charset forNameUEE(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0;
        java.lang.Exception r1, $r4;
        java.io.UnsupportedEncodingException r2, $r5;
        java.nio.charset.Charset r3;

        r0 := @parameter0: java.lang.String;

     label1:
        r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r0);

     label2:
        return r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.io.UnsupportedEncodingException;

        specialinvoke $r5.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r0);

        r2 = $r5;

        virtualinvoke r2.<java.io.UnsupportedEncodingException: java.lang.Throwable initCause(java.lang.Throwable)>(r1);

        throw r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static java.nio.charset.Charset getDefaultCharset()
    {
        java.lang.String r0;
        java.nio.charset.Charset r2, $r4;
        java.nio.charset.UnsupportedCharsetException $r3;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("file.encoding", "UTF-8");

     label1:
        r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r0);

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        return $r4;

        catch java.nio.charset.UnsupportedCharsetException from label1 to label2 with label3;
    }

    public static boolean isSupported(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.UnsupportedCharsetException $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r0);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.nio.charset.UnsupportedCharsetException from label1 to label2 with label3;
    }

    private static boolean isValidCharsetNamePart(char)
    {
        char c0;

        c0 := @parameter0: char;

        if c0 < 65 goto label1;

        if c0 <= 90 goto label4;

     label1:
        if c0 < 97 goto label2;

        if c0 <= 122 goto label4;

     label2:
        if c0 < 48 goto label3;

        if c0 <= 57 goto label4;

     label3:
        if c0 == 45 goto label4;

        if c0 == 46 goto label4;

        if c0 == 58 goto label4;

        if c0 != 95 goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }

    private static boolean isValidCharsetNameStart(char)
    {
        char c0;

        c0 := @parameter0: char;

        if c0 < 65 goto label1;

        if c0 <= 90 goto label3;

     label1:
        if c0 < 97 goto label2;

        if c0 <= 122 goto label3;

     label2:
        if c0 < 48 goto label4;

        if c0 > 57 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    public final java.util.Set aliases()
    {
        java.nio.charset.Charset r0;
        java.util.HashSet $r1;
        java.util.Set $r2;

        r0 := @this: java.nio.charset.Charset;

        $r1 = r0.<java.nio.charset.Charset: java.util.HashSet aliasesSet>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    public boolean canEncode()
    {
        java.nio.charset.Charset r0;

        r0 := @this: java.nio.charset.Charset;

        return 1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.nio.charset.Charset r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.nio.charset.Charset;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.nio.charset.Charset) r1;

        $i0 = virtualinvoke r0.<java.nio.charset.Charset: int compareTo(java.nio.charset.Charset)>($r2);

        return $i0;
    }

    public final int compareTo(java.nio.charset.Charset)
    {
        java.nio.charset.Charset r0, r1;
        java.lang.String $r2, $r3;
        int $i0;

        r0 := @this: java.nio.charset.Charset;

        r1 := @parameter0: java.nio.charset.Charset;

        $r3 = r0.<java.nio.charset.Charset: java.lang.String canonicalName>;

        $r2 = r1.<java.nio.charset.Charset: java.lang.String canonicalName>;

        $i0 = virtualinvoke $r3.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r2);

        return $i0;
    }

    public abstract boolean contains(java.nio.charset.Charset);

    public final java.nio.CharBuffer decode(java.nio.ByteBuffer)
    {
        java.nio.charset.Charset r0;
        java.nio.ByteBuffer r1;
        java.nio.charset.CharacterCodingException r2, $r9;
        java.nio.CharBuffer r3;
        java.nio.charset.CharsetDecoder $r4, $r6, $r8;
        java.nio.charset.CodingErrorAction $r5, $r7;
        java.lang.Error $r10;
        java.lang.String $r11;

        r0 := @this: java.nio.charset.Charset;

        r1 := @parameter0: java.nio.ByteBuffer;

     label1:
        $r4 = virtualinvoke r0.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r5 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r6 = virtualinvoke $r4.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r5);

        $r7 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r8 = virtualinvoke $r6.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r7);

        r3 = virtualinvoke $r8.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(r1);

     label2:
        return r3;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.lang.Error;

        $r11 = virtualinvoke r2.<java.nio.charset.CharacterCodingException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>($r11, r2);

        throw $r10;

        catch java.nio.charset.CharacterCodingException from label1 to label2 with label3;
    }

    public java.lang.String displayName()
    {
        java.nio.charset.Charset r0;
        java.lang.String $r1;

        r0 := @this: java.nio.charset.Charset;

        $r1 = r0.<java.nio.charset.Charset: java.lang.String canonicalName>;

        return $r1;
    }

    public java.lang.String displayName(java.util.Locale)
    {
        java.nio.charset.Charset r0;
        java.util.Locale r1;
        java.lang.String $r2;

        r0 := @this: java.nio.charset.Charset;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<java.nio.charset.Charset: java.lang.String canonicalName>;

        return $r2;
    }

    public final java.nio.ByteBuffer encode(java.lang.String)
    {
        java.nio.charset.Charset r0;
        java.lang.String r1;
        java.nio.CharBuffer $r2;
        java.nio.ByteBuffer $r3;

        r0 := @this: java.nio.charset.Charset;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r1);

        $r3 = virtualinvoke r0.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>($r2);

        return $r3;
    }

    public final java.nio.ByteBuffer encode(java.nio.CharBuffer)
    {
        java.nio.charset.Charset r0;
        java.nio.CharBuffer r1;
        java.nio.charset.CharacterCodingException r2, $r9;
        java.nio.ByteBuffer r3;
        java.nio.charset.CharsetEncoder $r4, $r6, $r8;
        java.nio.charset.CodingErrorAction $r5, $r7;
        java.lang.Error $r10;
        java.lang.String $r11;

        r0 := @this: java.nio.charset.Charset;

        r1 := @parameter0: java.nio.CharBuffer;

     label1:
        $r4 = virtualinvoke r0.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        $r5 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r6 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r5);

        $r7 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r8 = virtualinvoke $r6.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r7);

        r3 = virtualinvoke $r8.<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>(r1);

     label2:
        return r3;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.lang.Error;

        $r11 = virtualinvoke r2.<java.nio.charset.CharacterCodingException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>($r11, r2);

        throw $r10;

        catch java.nio.charset.CharacterCodingException from label1 to label2 with label3;
    }

    public final boolean equals(java.lang.Object)
    {
        java.nio.charset.Charset r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;

        r0 := @this: java.nio.charset.Charset;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.nio.charset.Charset;

        if $z0 == 0 goto label1;

        r2 = (java.nio.charset.Charset) r1;

        $r4 = r0.<java.nio.charset.Charset: java.lang.String canonicalName>;

        $r3 = r2.<java.nio.charset.Charset: java.lang.String canonicalName>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label1:
        return 0;
    }

    public final int hashCode()
    {
        java.nio.charset.Charset r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: java.nio.charset.Charset;

        $r1 = r0.<java.nio.charset.Charset: java.lang.String canonicalName>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public final boolean isRegistered()
    {
        java.nio.charset.Charset r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: java.nio.charset.Charset;

        $r1 = r0.<java.nio.charset.Charset: java.lang.String canonicalName>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("x-");

        if $z0 != 0 goto label1;

        $r2 = r0.<java.nio.charset.Charset: java.lang.String canonicalName>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("X-");

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final java.lang.String name()
    {
        java.nio.charset.Charset r0;
        java.lang.String $r1;

        r0 := @this: java.nio.charset.Charset;

        $r1 = r0.<java.nio.charset.Charset: java.lang.String canonicalName>;

        return $r1;
    }

    public abstract java.nio.charset.CharsetDecoder newDecoder();

    public abstract java.nio.charset.CharsetEncoder newEncoder();

    public final java.lang.String toString()
    {
        java.nio.charset.Charset r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r9;

        r0 := @this: java.nio.charset.Charset;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r6 = r0.<java.nio.charset.Charset: java.lang.String canonicalName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
