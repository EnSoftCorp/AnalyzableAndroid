public abstract class java.security.cert.Certificate extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.String type;

    protected void <init>(java.lang.String)
    {
        java.security.cert.Certificate r0;
        java.lang.String r1;

        r0 := @this: java.security.cert.Certificate;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.security.cert.Certificate: java.lang.String type> = r1;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.security.cert.Certificate r0, $r4;
        java.lang.Object r1;
        java.security.cert.CertificateEncodingException r2, $r6;
        boolean z0, $z1;
        byte[] $r3, $r5;
        java.lang.RuntimeException $r7;

        r0 := @this: java.security.cert.Certificate;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof java.security.cert.Certificate;

        if $z1 == 0 goto label5;

     label2:
        $r3 = virtualinvoke r0.<java.security.cert.Certificate: byte[] getEncoded()>();

        $r4 = (java.security.cert.Certificate) r1;

        $r5 = virtualinvoke $r4.<java.security.cert.Certificate: byte[] getEncoded()>();

        z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, $r5);

     label3:
        return z0;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

     label5:
        return 0;

        catch java.security.cert.CertificateEncodingException from label2 to label3 with label4;
    }

    public abstract byte[] getEncoded() throws java.security.cert.CertificateEncodingException;

    public abstract java.security.PublicKey getPublicKey();

    public final java.lang.String getType()
    {
        java.security.cert.Certificate r0;
        java.lang.String $r1;

        r0 := @this: java.security.cert.Certificate;

        $r1 = r0.<java.security.cert.Certificate: java.lang.String type>;

        return $r1;
    }

    public int hashCode()
    {
        java.security.cert.Certificate r0;
        java.security.cert.CertificateEncodingException r1, $r3;
        byte[] r2;
        int i0, i1, $i3, $i4;
        byte b2;
        java.lang.RuntimeException $r4;

        r0 := @this: java.security.cert.Certificate;

     label1:
        r2 = virtualinvoke r0.<java.security.cert.Certificate: byte[] getEncoded()>();

     label2:
        i0 = 0;

        i1 = 0;

     label3:
        $i3 = lengthof r2;

        if i1 >= $i3 goto label6;

        b2 = r2[i1];

     label4:
        $i4 = b2 * i1;

        i0 = i0 + $i4;

        i1 = i1 + 1;

        goto label3;

     label5:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r4;

     label6:
        return i0;

        catch java.security.cert.CertificateEncodingException from label1 to label2 with label5;
        catch java.security.cert.CertificateEncodingException from label3 to label4 with label5;
    }

    public abstract java.lang.String toString();

    public abstract void verify(java.security.PublicKey) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;

    public abstract void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;

    protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        java.security.cert.Certificate r0;
        java.security.cert.Certificate$CertificateRep r1, $r3;
        java.security.cert.CertificateEncodingException r2, $r6;
        java.lang.String $r4, $r11;
        byte[] $r5;
        java.io.NotSerializableException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: java.security.cert.Certificate;

     label1:
        $r3 = new java.security.cert.Certificate$CertificateRep;

        $r4 = virtualinvoke r0.<java.security.cert.Certificate: java.lang.String getType()>();

        $r5 = virtualinvoke r0.<java.security.cert.Certificate: byte[] getEncoded()>();

        specialinvoke $r3.<java.security.cert.Certificate$CertificateRep: void <init>(java.lang.String,byte[])>($r4, $r5);

        r1 = $r3;

     label2:
        return r1;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.io.NotSerializableException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create serialization object: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.NotSerializableException: void <init>(java.lang.String)>($r11);

        throw $r7;

        catch java.security.cert.CertificateEncodingException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <java.security.cert.Certificate: long serialVersionUID> = -3585440601605666277L;

        return;
    }
}
