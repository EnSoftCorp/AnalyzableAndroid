public final class libcore.io.MemoryMappedFile extends java.lang.Object implements java.lang.AutoCloseable
{
    private long address;
    private final long size;

    public void <init>(long, long)
    {
        libcore.io.MemoryMappedFile r0;
        long l0, l1;

        r0 := @this: libcore.io.MemoryMappedFile;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<libcore.io.MemoryMappedFile: long address> = l0;

        r0.<libcore.io.MemoryMappedFile: long size> = l1;

        return;
    }

    public static libcore.io.MemoryMappedFile mmapRO(java.lang.String) throws libcore.io.ErrnoException
    {
        java.lang.String r0;
        java.io.FileDescriptor r1;
        long l0, l1;
        int $i2, $i3, $i4;
        libcore.io.Os $r2, $r3, $r5, $r6;
        libcore.io.StructStat $r4;
        libcore.io.MemoryMappedFile $r7;

        r0 := @parameter0: java.lang.String;

        $r2 = <libcore.io.Libcore: libcore.io.Os os>;

        $i2 = <libcore.io.OsConstants: int O_RDONLY>;

        r1 = interfaceinvoke $r2.<libcore.io.Os: java.io.FileDescriptor open(java.lang.String,int,int)>(r0, $i2, 0);

        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r4 = interfaceinvoke $r3.<libcore.io.Os: libcore.io.StructStat fstat(java.io.FileDescriptor)>(r1);

        l0 = $r4.<libcore.io.StructStat: long st_size>;

        $r5 = <libcore.io.Libcore: libcore.io.Os os>;

        $i4 = <libcore.io.OsConstants: int PROT_READ>;

        $i3 = <libcore.io.OsConstants: int MAP_SHARED>;

        l1 = interfaceinvoke $r5.<libcore.io.Os: long mmap(long,long,int,int,java.io.FileDescriptor,long)>(0L, l0, $i4, $i3, r1, 0L);

        $r6 = <libcore.io.Libcore: libcore.io.Os os>;

        interfaceinvoke $r6.<libcore.io.Os: void close(java.io.FileDescriptor)>(r1);

        $r7 = new libcore.io.MemoryMappedFile;

        specialinvoke $r7.<libcore.io.MemoryMappedFile: void <init>(long,long)>(l1, l0);

        return $r7;
    }

    public libcore.io.BufferIterator bigEndianIterator()
    {
        libcore.io.MemoryMappedFile r0;
        long l0, $l2;
        int i1;
        boolean z0;
        java.nio.ByteOrder $r1, $r2;
        libcore.io.NioBufferIterator $r3;

        r0 := @this: libcore.io.MemoryMappedFile;

        l0 = r0.<libcore.io.MemoryMappedFile: long address>;

        $l2 = r0.<libcore.io.MemoryMappedFile: long size>;

        i1 = (int) $l2;

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if $r1 == $r2 goto label2;

        z0 = 1;

     label1:
        $r3 = new libcore.io.NioBufferIterator;

        specialinvoke $r3.<libcore.io.NioBufferIterator: void <init>(long,int,boolean)>(l0, i1, z0);

        return $r3;

     label2:
        z0 = 0;

        goto label1;
    }

    public void close() throws libcore.io.ErrnoException
    {
        libcore.io.MemoryMappedFile r0;
        java.lang.Throwable r1, $r3;
        long $l0, $l2, $l3;
        byte $b1;
        libcore.io.Os $r2;

        r0 := @this: libcore.io.MemoryMappedFile;

        entermonitor r0;

     label1:
        $l0 = r0.<libcore.io.MemoryMappedFile: long address>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $r2 = <libcore.io.Libcore: libcore.io.Os os>;

        $l3 = r0.<libcore.io.MemoryMappedFile: long address>;

        $l2 = r0.<libcore.io.MemoryMappedFile: long size>;

        interfaceinvoke $r2.<libcore.io.Os: void munmap(long,long)>($l3, $l2);

        r0.<libcore.io.MemoryMappedFile: long address> = 0L;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public libcore.io.BufferIterator littleEndianIterator()
    {
        libcore.io.MemoryMappedFile r0;
        long l0, $l2;
        int i1;
        boolean z0;
        java.nio.ByteOrder $r1, $r2;
        libcore.io.NioBufferIterator $r3;

        r0 := @this: libcore.io.MemoryMappedFile;

        l0 = r0.<libcore.io.MemoryMappedFile: long address>;

        $l2 = r0.<libcore.io.MemoryMappedFile: long size>;

        i1 = (int) $l2;

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        if $r1 == $r2 goto label2;

        z0 = 1;

     label1:
        $r3 = new libcore.io.NioBufferIterator;

        specialinvoke $r3.<libcore.io.NioBufferIterator: void <init>(long,int,boolean)>(l0, i1, z0);

        return $r3;

     label2:
        z0 = 0;

        goto label1;
    }

    public long size()
    {
        libcore.io.MemoryMappedFile r0;
        long $l0;

        r0 := @this: libcore.io.MemoryMappedFile;

        $l0 = r0.<libcore.io.MemoryMappedFile: long size>;

        return $l0;
    }
}
