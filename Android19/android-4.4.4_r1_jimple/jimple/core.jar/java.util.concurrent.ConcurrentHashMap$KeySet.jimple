final class java.util.concurrent.ConcurrentHashMap$KeySet extends java.util.AbstractSet
{
    final java.util.concurrent.ConcurrentHashMap this$0;

    void <init>(java.util.concurrent.ConcurrentHashMap)
    {
        java.util.concurrent.ConcurrentHashMap$KeySet r0;
        java.util.concurrent.ConcurrentHashMap r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySet;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap;

        r0.<java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentHashMap$KeySet r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySet;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$KeySet r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentHashMap$KeySet r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySet;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ConcurrentHashMap$KeySet r0;
        java.util.concurrent.ConcurrentHashMap$KeyIterator $r1;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySet;

        $r1 = new java.util.concurrent.ConcurrentHashMap$KeyIterator;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0>;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap$KeyIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>($r2);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$KeySet r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentHashMap$KeySet r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        int $i0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySet;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        return $i0;
    }
}
