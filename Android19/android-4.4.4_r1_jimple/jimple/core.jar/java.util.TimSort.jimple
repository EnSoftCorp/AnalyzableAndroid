class java.util.TimSort extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final int INITIAL_TMP_STORAGE_LENGTH;
    private static final int MIN_GALLOP;
    private static final int MIN_MERGE;
    private final java.lang.Object[] a;
    private final java.util.Comparator c;
    private int minGallop;
    private final int[] runBase;
    private final int[] runLen;
    private int stackSize;
    private java.lang.Object[] tmp;

    private void <init>(java.lang.Object[], java.util.Comparator)
    {
        java.util.TimSort r0;
        java.lang.Object[] r1, $r3, $r4;
        java.util.Comparator r2;
        int i0, i1;
        byte b2;
        int[] $r5, $r6;

        r0 := @this: java.util.TimSort;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.util.Comparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.TimSort: int minGallop> = 7;

        r0.<java.util.TimSort: int stackSize> = 0;

        r0.<java.util.TimSort: java.lang.Object[] a> = r1;

        r0.<java.util.TimSort: java.util.Comparator c> = r2;

        i0 = lengthof r1;

        if i0 >= 512 goto label3;

        i1 = i0 >>> 1;

     label1:
        $r3 = newarray (java.lang.Object)[i1];

        $r4 = (java.lang.Object[]) $r3;

        r0.<java.util.TimSort: java.lang.Object[] tmp> = $r4;

        if i0 >= 120 goto label4;

        b2 = 5;

     label2:
        $r5 = newarray (int)[b2];

        r0.<java.util.TimSort: int[] runBase> = $r5;

        $r6 = newarray (int)[b2];

        r0.<java.util.TimSort: int[] runLen> = $r6;

        return;

     label3:
        i1 = 256;

        goto label1;

     label4:
        if i0 >= 1542 goto label5;

        b2 = 10;

        goto label2;

     label5:
        if i0 >= 119151 goto label6;

        b2 = 19;

        goto label2;

     label6:
        b2 = 40;

        goto label2;
    }

    private static void binarySort(java.lang.Object[], int, int, int, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.util.Comparator r1;
        java.lang.Object r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: java.util.Comparator;

        if i2 != i0 goto label1;

        i2 = i2 + 1;

     label1:
        if i2 >= i1 goto label9;

        r2 = r0[i2];

        i3 = i0;

        i4 = i2;

     label2:
        if i3 >= i4 goto label4;

        $i11 = i3 + i4;

        i6 = $i11 >>> 1;

        $r5 = r0[i6];

        $i12 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r5);

        if $i12 >= 0 goto label3;

        i4 = i6;

        goto label2;

     label3:
        i3 = i6 + 1;

        goto label2;

     label4:
        i5 = i2 - i3;

        tableswitch(i5)
        {
            case 1: goto label8;
            case 2: goto label7;
            default: goto label5;
        };

     label5:
        $i7 = i3 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i3, r0, $i7, i5);

     label6:
        r0[i3] = r2;

        i2 = i2 + 1;

        goto label1;

     label7:
        $i9 = i3 + 2;

        $i8 = i3 + 1;

        $r3 = r0[$i8];

        r0[$i9] = $r3;

     label8:
        $i10 = i3 + 1;

        $r4 = r0[i3];

        r0[$i10] = $r4;

        goto label6;

     label9:
        return;
    }

    private static int countRunAndMakeAscending(java.lang.Object[], int, int, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.util.Comparator r1;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.util.Comparator;

        i2 = i0 + 1;

        if i2 != i1 goto label1;

        return 1;

     label1:
        i3 = i2 + 1;

        $r3 = r0[i2];

        $r2 = r0[i0];

        $i5 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $i5 >= 0 goto label6;

        i4 = i3;

     label2:
        if i4 >= i1 goto label3;

        $r6 = r0[i4];

        $i9 = i4 - 1;

        $r7 = r0[$i9];

        $i10 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $i10 >= 0 goto label3;

        i4 = i4 + 1;

        goto label2;

     label3:
        staticinvoke <java.util.TimSort: void reverseRange(java.lang.Object[],int,int)>(r0, i0, i4);

     label4:
        $i6 = i4 - i0;

        return $i6;

     label5:
        if i4 >= i1 goto label4;

        $r5 = r0[i4];

        $i7 = i4 - 1;

        $r4 = r0[$i7];

        $i8 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, $r4);

        if $i8 < 0 goto label4;

        i4 = i4 + 1;

        goto label5;

     label6:
        i4 = i3;

        goto label5;
    }

    private java.lang.Object[] ensureCapacity(int)
    {
        java.util.TimSort r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.Object[] $r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.util.TimSort;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.TimSort: java.lang.Object[] tmp>;

        $i7 = lengthof $r1;

        if $i7 >= i0 goto label2;

        $i8 = i0 >> 1;

        i1 = i0 | $i8;

        $i9 = i1 >> 2;

        i2 = i1 | $i9;

        $i10 = i2 >> 4;

        i3 = i2 | $i10;

        $i11 = i3 >> 8;

        i4 = i3 | $i11;

        $i12 = i4 >> 16;

        $i13 = i4 | $i12;

        i5 = 1 + $i13;

        if i5 >= 0 goto label3;

        i6 = i0;

     label1:
        $r4 = newarray (java.lang.Object)[i6];

        $r5 = (java.lang.Object[]) $r4;

        r0.<java.util.TimSort: java.lang.Object[] tmp> = $r5;

     label2:
        $r2 = r0.<java.util.TimSort: java.lang.Object[] tmp>;

        return $r2;

     label3:
        $r3 = r0.<java.util.TimSort: java.lang.Object[] a>;

        $i15 = lengthof $r3;

        $i14 = $i15 >>> 1;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>(i5, $i14);

        goto label1;
    }

    private static int gallopLeft(java.lang.Object, java.lang.Object[], int, int, int, java.util.Comparator)
    {
        java.lang.Object r0, $r3, $r4, $r5, $r6;
        java.lang.Object[] r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        java.util.Comparator r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: java.util.Comparator;

        i3 = 0;

        i4 = 1;

        $i12 = i0 + i2;

        $r3 = r1[$i12];

        $i13 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, $r3);

        if $i13 <= 0 goto label06;

        i11 = i1 - i2;

     label01:
        if i4 >= i11 goto label02;

        $i23 = i0 + i2;

        $i22 = i4 + $i23;

        $r6 = r1[$i22];

        $i24 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, $r6);

        if $i24 <= 0 goto label02;

        i3 = i4;

        $i25 = i4 * 2;

        i4 = 1 + $i25;

        if i4 > 0 goto label01;

        i4 = i11;

        goto label01;

     label02:
        if i4 <= i11 goto label03;

        i4 = i11;

     label03:
        i7 = i3 + i2;

        i8 = i4 + i2;

     label04:
        i9 = i7 + 1;

     label05:
        if i9 >= i8 goto label11;

        $i15 = i8 - i9;

        $i14 = $i15 >>> 1;

        i10 = i9 + $i14;

        $i16 = i0 + i10;

        $r4 = r1[$i16];

        $i18 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, $r4);

        if $i18 <= 0 goto label10;

        i9 = i10 + 1;

        goto label05;

     label06:
        i5 = i2 + 1;

     label07:
        if i4 >= i5 goto label08;

        $i17 = i0 + i2;

        $i19 = $i17 - i4;

        $r5 = r1[$i19];

        $i21 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, $r5);

        if $i21 > 0 goto label08;

        i3 = i4;

        $i20 = i4 * 2;

        i4 = 1 + $i20;

        if i4 > 0 goto label07;

        i4 = i5;

        goto label07;

     label08:
        if i4 <= i5 goto label09;

        i4 = i5;

     label09:
        i6 = i3;

        i7 = i2 - i4;

        i8 = i2 - i6;

        goto label04;

     label10:
        i8 = i10;

        goto label05;

     label11:
        return i8;
    }

    private static int gallopRight(java.lang.Object, java.lang.Object[], int, int, int, java.util.Comparator)
    {
        java.lang.Object r0, $r3, $r4, $r5, $r6;
        java.lang.Object[] r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        java.util.Comparator r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: java.util.Comparator;

        i3 = 1;

        i4 = 0;

        $i12 = i0 + i2;

        $r3 = r1[$i12];

        $i13 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, $r3);

        if $i13 >= 0 goto label06;

        i10 = i2 + 1;

     label01:
        if i3 >= i10 goto label02;

        $i23 = i0 + i2;

        $i22 = $i23 - i3;

        $r6 = r1[$i22];

        $i24 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, $r6);

        if $i24 >= 0 goto label02;

        i4 = i3;

        $i25 = i3 * 2;

        i3 = 1 + $i25;

        if i3 > 0 goto label01;

        i3 = i10;

        goto label01;

     label02:
        if i3 <= i10 goto label03;

        i3 = i10;

     label03:
        i11 = i4;

        i6 = i2 - i3;

        i7 = i2 - i11;

     label04:
        i8 = i6 + 1;

     label05:
        if i8 >= i7 goto label11;

        $i15 = i7 - i8;

        $i14 = $i15 >>> 1;

        i9 = i8 + $i14;

        $i16 = i0 + i9;

        $r4 = r1[$i16];

        $i18 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, $r4);

        if $i18 >= 0 goto label10;

        i7 = i9;

        goto label05;

     label06:
        i5 = i1 - i2;

     label07:
        if i3 >= i5 goto label08;

        $i17 = i0 + i2;

        $i19 = i3 + $i17;

        $r5 = r1[$i19];

        $i21 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, $r5);

        if $i21 < 0 goto label08;

        i4 = i3;

        $i20 = i3 * 2;

        i3 = 1 + $i20;

        if i3 > 0 goto label07;

        i3 = i5;

        goto label07;

     label08:
        if i3 <= i5 goto label09;

        i3 = i5;

     label09:
        i6 = i4 + i2;

        i7 = i3 + i2;

        goto label04;

     label10:
        i8 = i9 + 1;

        goto label05;

     label11:
        return i7;
    }

    private void mergeAt(int)
    {
        java.util.TimSort r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        int[] $r1, $r2, $r3, $r4, $r5, $r14, $r15, $r16, $r17;
        java.util.Comparator $r6, $r11;
        java.lang.Object[] $r7, $r9, $r10, $r12;
        java.lang.Object $r8, $r13;

        r0 := @this: java.util.TimSort;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.TimSort: int[] runBase>;

        i1 = $r1[i0];

        $r2 = r0.<java.util.TimSort: int[] runLen>;

        i2 = $r2[i0];

        $r3 = r0.<java.util.TimSort: int[] runBase>;

        $i9 = i0 + 1;

        i3 = $r3[$i9];

        $r4 = r0.<java.util.TimSort: int[] runLen>;

        $i10 = i0 + 1;

        i4 = $r4[$i10];

        $r5 = r0.<java.util.TimSort: int[] runLen>;

        $i11 = i2 + i4;

        $r5[i0] = $i11;

        $i13 = r0.<java.util.TimSort: int stackSize>;

        $i12 = -3 + $i13;

        if i0 != $i12 goto label1;

        $r14 = r0.<java.util.TimSort: int[] runBase>;

        $i20 = i0 + 1;

        $r15 = r0.<java.util.TimSort: int[] runBase>;

        $i19 = i0 + 2;

        $i21 = $r15[$i19];

        $r14[$i20] = $i21;

        $r17 = r0.<java.util.TimSort: int[] runLen>;

        $i23 = i0 + 1;

        $r16 = r0.<java.util.TimSort: int[] runLen>;

        $i24 = i0 + 2;

        $i22 = $r16[$i24];

        $r17[$i23] = $i22;

     label1:
        $i15 = r0.<java.util.TimSort: int stackSize>;

        $i14 = -1 + $i15;

        r0.<java.util.TimSort: int stackSize> = $i14;

        $r7 = r0.<java.util.TimSort: java.lang.Object[] a>;

        $r8 = $r7[i3];

        $r9 = r0.<java.util.TimSort: java.lang.Object[] a>;

        $r6 = r0.<java.util.TimSort: java.util.Comparator c>;

        i5 = staticinvoke <java.util.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>($r8, $r9, i1, i2, 0, $r6);

        i6 = i1 + i5;

        i7 = i2 - i5;

        if i7 != 0 goto label3;

     label2:
        return;

     label3:
        $r10 = r0.<java.util.TimSort: java.lang.Object[] a>;

        $i16 = i6 + i7;

        $i17 = -1 + $i16;

        $r13 = $r10[$i17];

        $r12 = r0.<java.util.TimSort: java.lang.Object[] a>;

        $i18 = i4 - 1;

        $r11 = r0.<java.util.TimSort: java.util.Comparator c>;

        i8 = staticinvoke <java.util.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>($r13, $r12, i3, i4, $i18, $r11);

        if i8 == 0 goto label2;

        if i7 > i8 goto label4;

        specialinvoke r0.<java.util.TimSort: void mergeLo(int,int,int,int)>(i6, i7, i3, i8);

        return;

     label4:
        specialinvoke r0.<java.util.TimSort: void mergeHi(int,int,int,int)>(i6, i7, i3, i8);

        return;
    }

    private void mergeCollapse()
    {
        java.util.TimSort r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: java.util.TimSort;

     label1:
        $i1 = r0.<java.util.TimSort: int stackSize>;

        if $i1 <= 1 goto label4;

        $i2 = r0.<java.util.TimSort: int stackSize>;

        i0 = -2 + $i2;

        if i0 <= 0 goto label3;

        $r3 = r0.<java.util.TimSort: int[] runLen>;

        $i6 = i0 - 1;

        $i10 = $r3[$i6];

        $r4 = r0.<java.util.TimSort: int[] runLen>;

        $i9 = $r4[i0];

        $r5 = r0.<java.util.TimSort: int[] runLen>;

        $i7 = i0 + 1;

        $i8 = $r5[$i7];

        $i11 = $i9 + $i8;

        if $i10 > $i11 goto label3;

        $r6 = r0.<java.util.TimSort: int[] runLen>;

        $i12 = i0 - 1;

        $i14 = $r6[$i12];

        $r7 = r0.<java.util.TimSort: int[] runLen>;

        $i13 = i0 + 1;

        $i15 = $r7[$i13];

        if $i14 >= $i15 goto label2;

        i0 = i0 + -1;

     label2:
        specialinvoke r0.<java.util.TimSort: void mergeAt(int)>(i0);

        goto label1;

     label3:
        $r1 = r0.<java.util.TimSort: int[] runLen>;

        $i5 = $r1[i0];

        $r2 = r0.<java.util.TimSort: int[] runLen>;

        $i3 = i0 + 1;

        $i4 = $r2[$i3];

        if $i5 > $i4 goto label4;

        specialinvoke r0.<java.util.TimSort: void mergeAt(int)>(i0);

        goto label1;

     label4:
        return;
    }

    private void mergeForceCollapse()
    {
        java.util.TimSort r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r1, $r2;

        r0 := @this: java.util.TimSort;

     label1:
        $i1 = r0.<java.util.TimSort: int stackSize>;

        if $i1 <= 1 goto label3;

        $i2 = r0.<java.util.TimSort: int stackSize>;

        i0 = -2 + $i2;

        if i0 <= 0 goto label2;

        $r1 = r0.<java.util.TimSort: int[] runLen>;

        $i3 = i0 - 1;

        $i6 = $r1[$i3];

        $r2 = r0.<java.util.TimSort: int[] runLen>;

        $i4 = i0 + 1;

        $i5 = $r2[$i4];

        if $i6 >= $i5 goto label2;

        i0 = i0 + -1;

     label2:
        specialinvoke r0.<java.util.TimSort: void mergeAt(int)>(i0);

        goto label1;

     label3:
        return;
    }

    private void mergeHi(int, int, int, int)
    {
        java.util.TimSort r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, $i28, $i29, i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48;
        java.lang.Object[] r1, r2;
        java.util.Comparator r3;
        java.lang.Object r4, r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15;
        boolean z0, z1, $z2;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: java.util.TimSort;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<java.util.TimSort: java.lang.Object[] a>;

        r2 = specialinvoke r0.<java.util.TimSort: java.lang.Object[] ensureCapacity(int)>(i3);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r2, 0, i3);

        $i28 = i0 + i1;

        i4 = -1 + $i28;

        i5 = i3 - 1;

        $i29 = i2 + i3;

        i6 = -1 + $i29;

        i7 = i6 - 1;

        i8 = i4 - 1;

        $r7 = r1[i4];

        r1[i6] = $r7;

        i9 = i1 - 1;

        if i9 != 0 goto label01;

        $i48 = i3 - 1;

        $i45 = i7 - $i48;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, $i45, i3);

        return;

     label01:
        if i3 != 1 goto label02;

        i30 = i7 - i9;

        $i42 = i8 - i9;

        $i47 = 1 + $i42;

        $i46 = i30 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i47, r1, $i46, i9);

        $r15 = r2[i5];

        r1[i30] = $r15;

        return;

     label02:
        r3 = r0.<java.util.TimSort: java.util.Comparator c>;

        i10 = r0.<java.util.TimSort: int minGallop>;

        i11 = i7;

        i13 = i8;

     label03:
        i12 = 0;

        i15 = 0;

     label04:
        $r6 = r2[i5];

        $r8 = r1[i13];

        $i31 = interfaceinvoke r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r6, $r8);

        if $i31 >= 0 goto label07;

        i25 = i11 - 1;

        i26 = i13 - 1;

        $r14 = r1[i13];

        r1[i11] = $r14;

        i12 = i12 + 1;

        i9 = i9 + -1;

        if i9 != 0 goto label24;

        i11 = i25;

        i13 = i26;

     label05:
        if i10 >= 1 goto label06;

        i10 = 1;

     label06:
        r0.<java.util.TimSort: int minGallop> = i10;

        if i3 != 1 goto label20;

        i27 = i11 - i9;

        $i37 = i13 - i9;

        $i41 = 1 + $i37;

        $i36 = i27 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i41, r1, $i36, i9);

        $r13 = r2[i5];

        r1[i27] = $r13;

        return;

     label07:
        i14 = i11 - 1;

        i16 = i5 - 1;

        $r10 = r2[i5];

        r1[i11] = $r10;

        i15 = i15 + 1;

        i12 = 0;

        i3 = i3 + -1;

        if i3 != 1 goto label08;

        i11 = i14;

        i5 = i16;

        goto label05;

     label08:
        i11 = i14;

        i5 = i16;

     label09:
        $i33 = i12 | i15;

        if $i33 < i10 goto label04;

     label10:
        r4 = r2[i5];

        i18 = i9 - 1;

        $i32 = staticinvoke <java.util.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>(r4, r1, i0, i9, i18, r3);

        i17 = i9 - $i32;

        if i17 == 0 goto label11;

        i11 = i11 - i17;

        i13 = i13 - i17;

        i9 = i9 - i17;

        $i43 = i13 + 1;

        $i44 = i11 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i43, r1, $i44, i17);

        if i9 == 0 goto label05;

     label11:
        i20 = i11 - 1;

        i19 = i5 - 1;

        $r9 = r2[i5];

        r1[i11] = $r9;

        i3 = i3 + -1;

        if i3 != 1 goto label12;

        i11 = i20;

        i5 = i19;

        goto label05;

     label12:
        r5 = r1[i13];

        i21 = i3 - 1;

        $i35 = staticinvoke <java.util.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>(r5, r2, 0, i3, i21, r3);

        i23 = i3 - $i35;

        if i23 == 0 goto label23;

        i11 = i20 - i23;

        i5 = i19 - i23;

        i3 = i3 - i23;

        $i39 = i5 + 1;

        $i40 = i11 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i39, r1, $i40, i23);

        if i3 <= 1 goto label05;

     label13:
        i22 = i11 - 1;

        i24 = i13 - 1;

        $r11 = r1[i13];

        r1[i11] = $r11;

        i9 = i9 + -1;

        if i9 != 0 goto label14;

        i11 = i22;

        i13 = i24;

        goto label05;

     label14:
        i10 = i10 + -1;

        if i17 < 7 goto label18;

        z0 = 1;

     label15:
        if i23 < 7 goto label19;

        z1 = 1;

     label16:
        $z2 = z1 | z0;

        if $z2 != 0 goto label22;

        if i10 >= 0 goto label17;

        i10 = 0;

     label17:
        i10 = i10 + 2;

        i11 = i22;

        i13 = i24;

        goto label03;

     label18:
        z0 = 0;

        goto label15;

     label19:
        z1 = 0;

        goto label16;

     label20:
        if i3 != 0 goto label21;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Comparison method violates its general contract!");

        throw $r12;

     label21:
        $i34 = i3 - 1;

        $i38 = i11 - $i34;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, $i38, i3);

        return;

     label22:
        i11 = i22;

        i13 = i24;

        goto label10;

     label23:
        i11 = i20;

        i5 = i19;

        goto label13;

     label24:
        i11 = i25;

        i13 = i26;

        i15 = 0;

        goto label09;
    }

    private void mergeLo(int, int, int, int)
    {
        java.util.TimSort r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, $i23, $i24, $i25, $i26;
        java.lang.Object[] r1, r2;
        java.util.Comparator r3;
        boolean z0, z1, $z2;
        java.lang.Object $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: java.util.TimSort;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<java.util.TimSort: java.lang.Object[] a>;

        r2 = specialinvoke r0.<java.util.TimSort: java.lang.Object[] ensureCapacity(int)>(i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, r2, 0, i1);

        i4 = 0;

        i5 = i0 + 1;

        i6 = i2 + 1;

        $r5 = r1[i2];

        r1[i0] = $r5;

        i7 = i3 - 1;

        if i7 != 0 goto label01;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i5, i1);

        return;

     label01:
        if i1 != 1 goto label02;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i6, r1, i5, i7);

        $i26 = i5 + i7;

        $r14 = r2[0];

        r1[$i26] = $r14;

        return;

     label02:
        r3 = r0.<java.util.TimSort: java.util.Comparator c>;

        i8 = r0.<java.util.TimSort: int minGallop>;

        i9 = i5;

        i10 = i6;

     label03:
        i11 = 0;

        i13 = 0;

     label04:
        $r7 = r1[i10];

        $r4 = r2[i4];

        $i24 = interfaceinvoke r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r7, $r4);

        if $i24 >= 0 goto label07;

        i21 = i9 + 1;

        i22 = i10 + 1;

        $r13 = r1[i10];

        r1[i9] = $r13;

        i13 = i13 + 1;

        i7 = i7 + -1;

        if i7 != 0 goto label24;

        i9 = i21;

        i10 = i22;

     label05:
        if i8 >= 1 goto label06;

        i8 = 1;

     label06:
        r0.<java.util.TimSort: int minGallop> = i8;

        if i1 != 1 goto label20;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i10, r1, i9, i7);

        $i25 = i9 + i7;

        $r15 = r2[i4];

        r1[$i25] = $r15;

        return;

     label07:
        i12 = i9 + 1;

        i15 = i4 + 1;

        $r6 = r2[i4];

        r1[i9] = $r6;

        i11 = i11 + 1;

        i13 = 0;

        i1 = i1 + -1;

        if i1 != 1 goto label08;

        i9 = i12;

        i4 = i15;

        goto label05;

     label08:
        i9 = i12;

        i4 = i15;

     label09:
        $i23 = i11 | i13;

        if $i23 < i8 goto label04;

        i14 = i10;

     label10:
        $r10 = r1[i14];

        i17 = staticinvoke <java.util.TimSort: int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>($r10, r2, i4, i1, 0, r3);

        if i17 == 0 goto label11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, r1, i9, i17);

        i9 = i9 + i17;

        i4 = i4 + i17;

        i1 = i1 - i17;

        if i1 > 1 goto label11;

        i10 = i14;

        goto label05;

     label11:
        i16 = i9 + 1;

        i10 = i14 + 1;

        $r8 = r1[i14];

        r1[i9] = $r8;

        i7 = i7 + -1;

        if i7 != 0 goto label12;

        i9 = i16;

        goto label05;

     label12:
        $r9 = r2[i4];

        i19 = staticinvoke <java.util.TimSort: int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator)>($r9, r1, i10, i7, 0, r3);

        if i19 == 0 goto label23;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i10, r1, i16, i19);

        i9 = i16 + i19;

        i10 = i10 + i19;

        i7 = i7 - i19;

        if i7 == 0 goto label05;

     label13:
        i18 = i9 + 1;

        i20 = i4 + 1;

        $r12 = r2[i4];

        r1[i9] = $r12;

        i1 = i1 + -1;

        if i1 != 1 goto label14;

        i9 = i18;

        i4 = i20;

        goto label05;

     label14:
        i8 = i8 + -1;

        if i17 < 7 goto label18;

        z0 = 1;

     label15:
        if i19 < 7 goto label19;

        z1 = 1;

     label16:
        $z2 = z1 | z0;

        if $z2 != 0 goto label22;

        if i8 >= 0 goto label17;

        i8 = 0;

     label17:
        i8 = i8 + 2;

        i9 = i18;

        i4 = i20;

        goto label03;

     label18:
        z0 = 0;

        goto label15;

     label19:
        z1 = 0;

        goto label16;

     label20:
        if i1 != 0 goto label21;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Comparison method violates its general contract!");

        throw $r11;

     label21:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, r1, i9, i1);

        return;

     label22:
        i9 = i18;

        i14 = i10;

        i4 = i20;

        goto label10;

     label23:
        i9 = i16;

        goto label13;

     label24:
        i9 = i21;

        i10 = i22;

        i11 = 0;

        goto label09;
    }

    private static int minRunLength(int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        if i0 < 32 goto label2;

        $i3 = i0 & 1;

        i1 = i1 | $i3;

        i0 = i0 >> 1;

        goto label1;

     label2:
        $i2 = i0 + i1;

        return $i2;
    }

    private void pushRun(int, int)
    {
        java.util.TimSort r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r2;

        r0 := @this: java.util.TimSort;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<java.util.TimSort: int[] runBase>;

        $i2 = r0.<java.util.TimSort: int stackSize>;

        $r1[$i2] = i0;

        $r2 = r0.<java.util.TimSort: int[] runLen>;

        $i3 = r0.<java.util.TimSort: int stackSize>;

        $r2[$i3] = i1;

        $i4 = r0.<java.util.TimSort: int stackSize>;

        $i5 = 1 + $i4;

        r0.<java.util.TimSort: int stackSize> = $i5;

        return;
    }

    private static void reverseRange(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, i5;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 - 1;

        i3 = i0;

     label1:
        if i3 >= i2 goto label2;

        r1 = r0[i3];

        i4 = i3 + 1;

        $r2 = r0[i2];

        r0[i3] = $r2;

        i5 = i2 - 1;

        r0[i2] = r1;

        i2 = i5;

        i3 = i4;

        goto label1;

     label2:
        return;
    }

    static void sort(java.lang.Object[], int, int, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10;
        java.util.Comparator r1;
        java.util.TimSort r2, $r3;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.util.Comparator;

        if r1 != null goto label2;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int)>(r0, i0, i1);

     label1:
        return;

     label2:
        $i6 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i6, i0, i1);

        i2 = i1 - i0;

        if i2 < 2 goto label1;

        if i2 >= 32 goto label3;

        $i9 = staticinvoke <java.util.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)>(r0, i0, i1, r1);

        $i10 = i0 + $i9;

        staticinvoke <java.util.TimSort: void binarySort(java.lang.Object[],int,int,int,java.util.Comparator)>(r0, i0, i1, $i10, r1);

        return;

     label3:
        $r3 = new java.util.TimSort;

        specialinvoke $r3.<java.util.TimSort: void <init>(java.lang.Object[],java.util.Comparator)>(r0, r1);

        r2 = $r3;

        i3 = staticinvoke <java.util.TimSort: int minRunLength(int)>(i2);

     label4:
        i4 = staticinvoke <java.util.TimSort: int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator)>(r0, i0, i1, r1);

        if i4 >= i3 goto label6;

        if i2 > i3 goto label7;

        i5 = i2;

     label5:
        $i8 = i0 + i5;

        $i7 = i0 + i4;

        staticinvoke <java.util.TimSort: void binarySort(java.lang.Object[],int,int,int,java.util.Comparator)>(r0, i0, $i8, $i7, r1);

        i4 = i5;

     label6:
        specialinvoke r2.<java.util.TimSort: void pushRun(int,int)>(i0, i4);

        specialinvoke r2.<java.util.TimSort: void mergeCollapse()>();

        i0 = i0 + i4;

        i2 = i2 - i4;

        if i2 != 0 goto label4;

        specialinvoke r2.<java.util.TimSort: void mergeForceCollapse()>();

        return;

     label7:
        i5 = i3;

        goto label5;
    }

    static void sort(java.lang.Object[], java.util.Comparator)
    {
        java.lang.Object[] r0;
        java.util.Comparator r1;
        int $i0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.Comparator;

        $i0 = lengthof r0;

        staticinvoke <java.util.TimSort: void sort(java.lang.Object[],int,int,java.util.Comparator)>(r0, 0, $i0, r1);

        return;
    }

    public static void <clinit>()
    {
        <java.util.TimSort: int MIN_MERGE> = 32;

        <java.util.TimSort: int MIN_GALLOP> = 7;

        <java.util.TimSort: int INITIAL_TMP_STORAGE_LENGTH> = 256;

        <java.util.TimSort: boolean DEBUG> = 0;

        return;
    }
}
