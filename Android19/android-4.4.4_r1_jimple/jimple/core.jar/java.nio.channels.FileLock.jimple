public abstract class java.nio.channels.FileLock extends java.lang.Object implements java.lang.AutoCloseable
{
    private final java.nio.channels.FileChannel channel;
    private final long position;
    private final boolean shared;
    private final long size;

    protected void <init>(java.nio.channels.FileChannel, long, long, boolean)
    {
        java.nio.channels.FileLock r0;
        java.nio.channels.FileChannel r1;
        long l0, l1, $l5;
        boolean z0;
        byte $b2, $b3, $b4;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: java.nio.channels.FileLock;

        r1 := @parameter0: java.nio.channels.FileChannel;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label1;

        $b3 = l1 cmp 0L;

        if $b3 < 0 goto label1;

        $l5 = l0 + l1;

        $b4 = $l5 cmp 0L;

        if $b4 >= 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label2:
        r0.<java.nio.channels.FileLock: java.nio.channels.FileChannel channel> = r1;

        r0.<java.nio.channels.FileLock: long position> = l0;

        r0.<java.nio.channels.FileLock: long size> = l1;

        r0.<java.nio.channels.FileLock: boolean shared> = z0;

        return;
    }

    public final java.nio.channels.FileChannel channel()
    {
        java.nio.channels.FileLock r0;
        java.nio.channels.FileChannel $r1;

        r0 := @this: java.nio.channels.FileLock;

        $r1 = r0.<java.nio.channels.FileLock: java.nio.channels.FileChannel channel>;

        return $r1;
    }

    public final void close() throws java.io.IOException
    {
        java.nio.channels.FileLock r0;

        r0 := @this: java.nio.channels.FileLock;

        virtualinvoke r0.<java.nio.channels.FileLock: void release()>();

        return;
    }

    public final boolean isShared()
    {
        java.nio.channels.FileLock r0;
        boolean $z0;

        r0 := @this: java.nio.channels.FileLock;

        $z0 = r0.<java.nio.channels.FileLock: boolean shared>;

        return $z0;
    }

    public abstract boolean isValid();

    public final boolean overlaps(long, long)
    {
        java.nio.channels.FileLock r0;
        long l0, l1, l2, l3, $l4, $l5, $l6, $l7, $l9;
        byte $b8, $b10;

        r0 := @this: java.nio.channels.FileLock;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l5 = r0.<java.nio.channels.FileLock: long position>;

        $l4 = r0.<java.nio.channels.FileLock: long size>;

        $l6 = $l5 + $l4;

        l2 = $l6 - 1L;

        $l7 = l0 + l1;

        l3 = $l7 - 1L;

        $b8 = l2 cmp l0;

        if $b8 < 0 goto label1;

        $l9 = r0.<java.nio.channels.FileLock: long position>;

        $b10 = $l9 cmp l3;

        if $b10 <= 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public final long position()
    {
        java.nio.channels.FileLock r0;
        long $l0;

        r0 := @this: java.nio.channels.FileLock;

        $l0 = r0.<java.nio.channels.FileLock: long position>;

        return $l0;
    }

    public abstract void release() throws java.io.IOException;

    public final long size()
    {
        java.nio.channels.FileLock r0;
        long $l0;

        r0 := @this: java.nio.channels.FileLock;

        $l0 = r0.<java.nio.channels.FileLock: long size>;

        return $l0;
    }

    public final java.lang.String toString()
    {
        java.nio.channels.FileLock r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        long $l0, $l1;
        boolean $z0;
        java.lang.String $r9;

        r0 := @this: java.nio.channels.FileLock;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FileLock[position=");

        $l0 = r0.<java.nio.channels.FileLock: long position>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size=");

        $l1 = r0.<java.nio.channels.FileLock: long size>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", shared=");

        $z0 = r0.<java.nio.channels.FileLock: boolean shared>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
