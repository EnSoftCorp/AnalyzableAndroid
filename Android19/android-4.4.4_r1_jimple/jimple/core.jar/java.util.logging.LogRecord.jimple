public class java.util.logging.LogRecord extends java.lang.Object implements java.io.Serializable
{
    private static final int MAJOR;
    private static final int MINOR;
    private static long currentSequenceNumber;
    private static java.lang.ThreadLocal currentThreadId;
    private static int initThreadId;
    private static final long serialVersionUID;
    private java.util.logging.Level level;
    private java.lang.String loggerName;
    private java.lang.String message;
    private long millis;
    private transient java.lang.Object[] parameters;
    private transient java.util.ResourceBundle resourceBundle;
    private java.lang.String resourceBundleName;
    private long sequenceNumber;
    private java.lang.String sourceClassName;
    private transient boolean sourceInitialized;
    private java.lang.String sourceMethodName;
    private int threadID;
    private java.lang.Throwable thrown;

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;

        <java.util.logging.LogRecord: long serialVersionUID> = 5372048053134512534L;

        <java.util.logging.LogRecord: int MINOR> = 4;

        <java.util.logging.LogRecord: int MAJOR> = 1;

        <java.util.logging.LogRecord: long currentSequenceNumber> = 0L;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <java.util.logging.LogRecord: java.lang.ThreadLocal currentThreadId> = $r0;

        <java.util.logging.LogRecord: int initThreadId> = 0;

        return;
    }

    public void <init>(java.util.logging.Level, java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.util.logging.Level r1;
        java.lang.String r2;
        java.lang.Throwable r3, $r10;
        long l0, $l2, $l3;
        java.lang.Integer r4, $r9;
        java.lang.ThreadLocal r5, $r6;
        int i1, $i4, $i5, $i6;
        java.lang.Object $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label01;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("level == null");

        throw $r8;

     label01:
        r0.<java.util.logging.LogRecord: java.util.logging.Level level> = r1;

        r0.<java.util.logging.LogRecord: java.lang.String message> = r2;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<java.util.logging.LogRecord: long millis> = $l2;

        entermonitor class "java/util/logging/LogRecord";

     label02:
        l0 = <java.util.logging.LogRecord: long currentSequenceNumber>;

        $l3 = 1L + l0;

        <java.util.logging.LogRecord: long currentSequenceNumber> = $l3;

        r0.<java.util.logging.LogRecord: long sequenceNumber> = l0;

        $r6 = <java.util.logging.LogRecord: java.lang.ThreadLocal currentThreadId>;

        $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        r4 = (java.lang.Integer) $r7;

     label03:
        if r4 != null goto label07;

     label04:
        $i5 = <java.util.logging.LogRecord: int initThreadId>;

        r0.<java.util.logging.LogRecord: int threadID> = $i5;

        r5 = <java.util.logging.LogRecord: java.lang.ThreadLocal currentThreadId>;

        i1 = <java.util.logging.LogRecord: int initThreadId>;

        $i6 = i1 + 1;

        <java.util.logging.LogRecord: int initThreadId> = $i6;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke r5.<java.lang.ThreadLocal: void set(java.lang.Object)>($r9);

     label05:
        exitmonitor class "java/util/logging/LogRecord";

     label06:
        r0.<java.util.logging.LogRecord: java.lang.String sourceClassName> = null;

        r0.<java.util.logging.LogRecord: java.lang.String sourceMethodName> = null;

        r0.<java.util.logging.LogRecord: java.lang.String loggerName> = null;

        r0.<java.util.logging.LogRecord: java.lang.Object[] parameters> = null;

        r0.<java.util.logging.LogRecord: java.util.ResourceBundle resourceBundle> = null;

        r0.<java.util.logging.LogRecord: java.lang.String resourceBundleName> = null;

        r0.<java.util.logging.LogRecord: java.lang.Throwable thrown> = null;

        return;

     label07:
        $i4 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        r0.<java.util.logging.LogRecord: int threadID> = $i4;

     label08:
        goto label05;

     label09:
        $r10 := @caughtexception;

        r3 = $r10;

     label10:
        exitmonitor class "java/util/logging/LogRecord";

     label11:
        throw r3;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void initSource()
    {
        java.util.logging.LogRecord r0;
        boolean z0, $z1, $z2;
        java.lang.StackTraceElement[] r1;
        int i0, i1;
        java.lang.StackTraceElement r2;
        java.lang.Throwable $r3;
        java.lang.String $r4, $r6, $r7, $r8;
        java.lang.Class $r5;

        r0 := @this: java.util.logging.LogRecord;

        $z1 = r0.<java.util.logging.LogRecord: boolean sourceInitialized>;

        if $z1 == 0 goto label1;

        return;

     label1:
        z0 = 0;

        $r3 = new java.lang.Throwable;

        specialinvoke $r3.<java.lang.Throwable: void <init>()>();

        r1 = virtualinvoke $r3.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r2 = r1[i1];

        $r4 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r5 = class "java/util/logging/Logger";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>($r6);

        if $z2 == 0 goto label4;

        z0 = 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        if z0 == 0 goto label3;

        $r7 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        r0.<java.util.logging.LogRecord: java.lang.String sourceClassName> = $r7;

        $r8 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        r0.<java.util.logging.LogRecord: java.lang.String sourceMethodName> = $r8;

     label5:
        r0.<java.util.logging.LogRecord: boolean sourceInitialized> = 1;

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.logging.LogRecord r0;
        java.io.ObjectInputStream r1;
        byte b0, b1;
        int i2, i3, $i4;
        java.lang.String $r3, $r4, $r19;
        java.util.ResourceBundle $r5;
        java.lang.Object[] $r6, $r7, $r9;
        java.lang.Object $r8;
        java.lang.StringBuilder $r10, $r13, $r14, $r15, $r16;
        java.io.IOException $r11;
        java.lang.Byte $r12, $r17;
        java.util.MissingResourceException $r18;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        b0 = virtualinvoke r1.<java.io.ObjectInputStream: byte readByte()>();

        b1 = virtualinvoke r1.<java.io.ObjectInputStream: byte readByte()>();

        if b0 == 1 goto label1;

        $r11 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Different version ");

        $r12 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r17 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r11;

     label1:
        i2 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        if i2 < 0 goto label3;

        $r6 = newarray (java.lang.Object)[i2];

        r0.<java.util.logging.LogRecord: java.lang.Object[] parameters> = $r6;

        i3 = 0;

     label2:
        $r7 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;

        $i4 = lengthof $r7;

        if i3 >= $i4 goto label3;

        $r9 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;

        $r8 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r9[i3] = $r8;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r3 = r0.<java.util.logging.LogRecord: java.lang.String resourceBundleName>;

        if $r3 == null goto label5;

     label4:
        $r4 = r0.<java.util.logging.LogRecord: java.lang.String resourceBundleName>;

        $r5 = staticinvoke <java.util.logging.Logger: java.util.ResourceBundle loadResourceBundle(java.lang.String)>($r4);

        r0.<java.util.logging.LogRecord: java.util.ResourceBundle resourceBundle> = $r5;

     label5:
        return;

     label6:
        $r18 := @caughtexception;

        r0.<java.util.logging.LogRecord: java.util.ResourceBundle resourceBundle> = null;

        return;

        catch java.util.MissingResourceException from label4 to label5 with label6;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.logging.LogRecord r0;
        java.io.ObjectOutputStream r1;
        java.lang.Object[] r2, $r5, $r6;
        int i0, i1, $i2;
        java.lang.Object r3;
        java.lang.String r4;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeByte(int)>(1);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeByte(int)>(4);

        $r5 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;

        if $r5 != null goto label2;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>(-1);

     label1:
        return;

     label2:
        $r6 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;

        $i2 = lengthof $r6;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i2);

        r2 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;

        i0 = lengthof r2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label1;

        r3 = r2[i1];

        if r3 != null goto label5;

        r4 = null;

     label4:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label3;

     label5:
        r4 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        goto label4;
    }

    public java.util.logging.Level getLevel()
    {
        java.util.logging.LogRecord r0;
        java.util.logging.Level $r1;

        r0 := @this: java.util.logging.LogRecord;

        $r1 = r0.<java.util.logging.LogRecord: java.util.logging.Level level>;

        return $r1;
    }

    public java.lang.String getLoggerName()
    {
        java.util.logging.LogRecord r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.LogRecord;

        $r1 = r0.<java.util.logging.LogRecord: java.lang.String loggerName>;

        return $r1;
    }

    public java.lang.String getMessage()
    {
        java.util.logging.LogRecord r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.LogRecord;

        $r1 = r0.<java.util.logging.LogRecord: java.lang.String message>;

        return $r1;
    }

    public long getMillis()
    {
        java.util.logging.LogRecord r0;
        long $l0;

        r0 := @this: java.util.logging.LogRecord;

        $l0 = r0.<java.util.logging.LogRecord: long millis>;

        return $l0;
    }

    public java.lang.Object[] getParameters()
    {
        java.util.logging.LogRecord r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.logging.LogRecord;

        $r1 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;

        return $r1;
    }

    public java.util.ResourceBundle getResourceBundle()
    {
        java.util.logging.LogRecord r0;
        java.util.ResourceBundle $r1;

        r0 := @this: java.util.logging.LogRecord;

        $r1 = r0.<java.util.logging.LogRecord: java.util.ResourceBundle resourceBundle>;

        return $r1;
    }

    public java.lang.String getResourceBundleName()
    {
        java.util.logging.LogRecord r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.LogRecord;

        $r1 = r0.<java.util.logging.LogRecord: java.lang.String resourceBundleName>;

        return $r1;
    }

    public long getSequenceNumber()
    {
        java.util.logging.LogRecord r0;
        long $l0;

        r0 := @this: java.util.logging.LogRecord;

        $l0 = r0.<java.util.logging.LogRecord: long sequenceNumber>;

        return $l0;
    }

    public java.lang.String getSourceClassName()
    {
        java.util.logging.LogRecord r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.LogRecord;

        specialinvoke r0.<java.util.logging.LogRecord: void initSource()>();

        $r1 = r0.<java.util.logging.LogRecord: java.lang.String sourceClassName>;

        return $r1;
    }

    public java.lang.String getSourceMethodName()
    {
        java.util.logging.LogRecord r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.LogRecord;

        specialinvoke r0.<java.util.logging.LogRecord: void initSource()>();

        $r1 = r0.<java.util.logging.LogRecord: java.lang.String sourceMethodName>;

        return $r1;
    }

    public int getThreadID()
    {
        java.util.logging.LogRecord r0;
        int $i0;

        r0 := @this: java.util.logging.LogRecord;

        $i0 = r0.<java.util.logging.LogRecord: int threadID>;

        return $i0;
    }

    public java.lang.Throwable getThrown()
    {
        java.util.logging.LogRecord r0;
        java.lang.Throwable $r1;

        r0 := @this: java.util.logging.LogRecord;

        $r1 = r0.<java.util.logging.LogRecord: java.lang.Throwable thrown>;

        return $r1;
    }

    public void setLevel(java.util.logging.Level)
    {
        java.util.logging.LogRecord r0;
        java.util.logging.Level r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.util.logging.Level;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("level == null");

        throw $r2;

     label1:
        r0.<java.util.logging.LogRecord: java.util.logging.Level level> = r1;

        return;
    }

    public void setLoggerName(java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.lang.String r1;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.lang.String;

        r0.<java.util.logging.LogRecord: java.lang.String loggerName> = r1;

        return;
    }

    public void setMessage(java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.lang.String r1;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.lang.String;

        r0.<java.util.logging.LogRecord: java.lang.String message> = r1;

        return;
    }

    public void setMillis(long)
    {
        java.util.logging.LogRecord r0;
        long l0;

        r0 := @this: java.util.logging.LogRecord;

        l0 := @parameter0: long;

        r0.<java.util.logging.LogRecord: long millis> = l0;

        return;
    }

    public void setParameters(java.lang.Object[])
    {
        java.util.logging.LogRecord r0;
        java.lang.Object[] r1;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.lang.Object[];

        r0.<java.util.logging.LogRecord: java.lang.Object[] parameters> = r1;

        return;
    }

    public void setResourceBundle(java.util.ResourceBundle)
    {
        java.util.logging.LogRecord r0;
        java.util.ResourceBundle r1;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.util.ResourceBundle;

        r0.<java.util.logging.LogRecord: java.util.ResourceBundle resourceBundle> = r1;

        return;
    }

    public void setResourceBundleName(java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.lang.String r1;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.lang.String;

        r0.<java.util.logging.LogRecord: java.lang.String resourceBundleName> = r1;

        return;
    }

    public void setSequenceNumber(long)
    {
        java.util.logging.LogRecord r0;
        long l0;

        r0 := @this: java.util.logging.LogRecord;

        l0 := @parameter0: long;

        r0.<java.util.logging.LogRecord: long sequenceNumber> = l0;

        return;
    }

    public void setSourceClassName(java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.lang.String r1;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.lang.String;

        r0.<java.util.logging.LogRecord: boolean sourceInitialized> = 1;

        r0.<java.util.logging.LogRecord: java.lang.String sourceClassName> = r1;

        return;
    }

    public void setSourceMethodName(java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.lang.String r1;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.lang.String;

        r0.<java.util.logging.LogRecord: boolean sourceInitialized> = 1;

        r0.<java.util.logging.LogRecord: java.lang.String sourceMethodName> = r1;

        return;
    }

    public void setThreadID(int)
    {
        java.util.logging.LogRecord r0;
        int i0;

        r0 := @this: java.util.logging.LogRecord;

        i0 := @parameter0: int;

        r0.<java.util.logging.LogRecord: int threadID> = i0;

        return;
    }

    public void setThrown(java.lang.Throwable)
    {
        java.util.logging.LogRecord r0;
        java.lang.Throwable r1;

        r0 := @this: java.util.logging.LogRecord;

        r1 := @parameter0: java.lang.Throwable;

        r0.<java.util.logging.LogRecord: java.lang.Throwable thrown> = r1;

        return;
    }
}
