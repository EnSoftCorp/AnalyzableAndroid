class java.util.concurrent.ArrayBlockingQueue$Itrs extends java.lang.Object
{
    private static final int LONG_SWEEP_PROBES;
    private static final int SHORT_SWEEP_PROBES;
    int cycles;
    private java.util.concurrent.ArrayBlockingQueue$Itrs$Node head;
    private java.util.concurrent.ArrayBlockingQueue$Itrs$Node sweeper;
    final java.util.concurrent.ArrayBlockingQueue this$0;

    void <init>(java.util.concurrent.ArrayBlockingQueue, java.util.concurrent.ArrayBlockingQueue$Itr)
    {
        java.util.concurrent.ArrayBlockingQueue$Itrs r0;
        java.util.concurrent.ArrayBlockingQueue r1;
        java.util.concurrent.ArrayBlockingQueue$Itr r2;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itrs;

        r1 := @parameter0: java.util.concurrent.ArrayBlockingQueue;

        r2 := @parameter1: java.util.concurrent.ArrayBlockingQueue$Itr;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: int cycles> = 0;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node sweeper> = null;

        virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: void register(java.util.concurrent.ArrayBlockingQueue$Itr)>(r2);

        return;
    }

    void doSomeSweeping(boolean)
    {
        java.util.concurrent.ArrayBlockingQueue$Itrs r0;
        boolean z0, z1, $z2;
        int i0;
        java.util.concurrent.ArrayBlockingQueue$Itrs$Node r1, r2, r3, r4, r6;
        java.util.concurrent.ArrayBlockingQueue$Itr r5;
        java.lang.Object $r7;
        java.util.concurrent.ArrayBlockingQueue $r8;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itrs;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label05;

        i0 = 16;

     label01:
        r1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node sweeper>;

        if r1 != null goto label06;

        r2 = null;

        r3 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head>;

        z1 = 1;

     label02:
        if i0 <= 0 goto label03;

        if r3 != null goto label08;

        if z1 == 0 goto label07;

     label03:
        r4 = null;

        if r3 != null goto label13;

     label04:
        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node sweeper> = r4;

        return;

     label05:
        i0 = 4;

        goto label01;

     label06:
        r2 = r1;

        r3 = r2.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next>;

        z1 = 0;

        goto label02;

     label07:
        r2 = null;

        r3 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head>;

        z1 = 1;

     label08:
        $r7 = virtualinvoke r3.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.lang.Object get()>();

        r5 = (java.util.concurrent.ArrayBlockingQueue$Itr) $r7;

        r6 = r3.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next>;

        if r5 == null goto label09;

        $z2 = virtualinvoke r5.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean isDetached()>();

        if $z2 == 0 goto label12;

     label09:
        i0 = 16;

        virtualinvoke r3.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: void clear()>();

        r3.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next> = null;

        if r2 != null goto label10;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head> = r6;

        if r6 != null goto label11;

        $r8 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue this$0>;

        $r8.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs> = null;

        return;

     label10:
        r2.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next> = r6;

     label11:
        r3 = r6;

        i0 = i0 + -1;

        goto label02;

     label12:
        r2 = r3;

        goto label11;

     label13:
        r4 = r2;

        goto label04;
    }

    void elementDequeued()
    {
        java.util.concurrent.ArrayBlockingQueue$Itrs r0;
        java.util.concurrent.ArrayBlockingQueue $r1, $r2;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itrs;

        $r1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue this$0>;

        $i0 = $r1.<java.util.concurrent.ArrayBlockingQueue: int count>;

        if $i0 != 0 goto label2;

        virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: void queueIsEmpty()>();

     label1:
        return;

     label2:
        $r2 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue this$0>;

        $i1 = $r2.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        if $i1 != 0 goto label1;

        virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: void takeIndexWrapped()>();

        return;
    }

    void queueIsEmpty()
    {
        java.util.concurrent.ArrayBlockingQueue$Itrs r0;
        java.util.concurrent.ArrayBlockingQueue$Itrs$Node r1;
        java.util.concurrent.ArrayBlockingQueue$Itr r2;
        java.util.concurrent.ArrayBlockingQueue $r3;
        java.lang.Object $r4;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itrs;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head>;

     label1:
        if r1 == null goto label3;

        $r4 = virtualinvoke r1.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.lang.Object get()>();

        r2 = (java.util.concurrent.ArrayBlockingQueue$Itr) $r4;

        if r2 == null goto label2;

        virtualinvoke r1.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: void clear()>();

        virtualinvoke r2.<java.util.concurrent.ArrayBlockingQueue$Itr: void shutdown()>();

     label2:
        r1 = r1.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next>;

        goto label1;

     label3:
        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head> = null;

        $r3 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue this$0>;

        $r3.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs> = null;

        return;
    }

    void register(java.util.concurrent.ArrayBlockingQueue$Itr)
    {
        java.util.concurrent.ArrayBlockingQueue$Itrs r0;
        java.util.concurrent.ArrayBlockingQueue$Itr r1;
        java.util.concurrent.ArrayBlockingQueue$Itrs$Node $r2, $r3;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itrs;

        r1 := @parameter0: java.util.concurrent.ArrayBlockingQueue$Itr;

        $r2 = new java.util.concurrent.ArrayBlockingQueue$Itrs$Node;

        $r3 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head>;

        specialinvoke $r2.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: void <init>(java.util.concurrent.ArrayBlockingQueue$Itrs,java.util.concurrent.ArrayBlockingQueue$Itr,java.util.concurrent.ArrayBlockingQueue$Itrs$Node)>(r0, r1, $r3);

        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head> = $r2;

        return;
    }

    void removedAt(int)
    {
        java.util.concurrent.ArrayBlockingQueue$Itrs r0;
        int i0;
        java.util.concurrent.ArrayBlockingQueue$Itrs$Node r1, r2, r4, $r5;
        java.util.concurrent.ArrayBlockingQueue$Itr r3;
        java.util.concurrent.ArrayBlockingQueue $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itrs;

        i0 := @parameter0: int;

        r1 = null;

        r2 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head>;

     label1:
        if r2 == null goto label6;

        $r7 = virtualinvoke r2.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.lang.Object get()>();

        r3 = (java.util.concurrent.ArrayBlockingQueue$Itr) $r7;

        r4 = r2.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next>;

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean removedAt(int)>(i0);

        if $z0 == 0 goto label5;

     label2:
        virtualinvoke r2.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: void clear()>();

        r2.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next> = null;

        if r1 != null goto label4;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head> = r4;

     label3:
        r2 = r4;

        goto label1;

     label4:
        r1.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next> = r4;

        goto label3;

     label5:
        r1 = r2;

        goto label3;

     label6:
        $r5 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head>;

        if $r5 != null goto label7;

        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue this$0>;

        $r6.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs> = null;

     label7:
        return;
    }

    void takeIndexWrapped()
    {
        java.util.concurrent.ArrayBlockingQueue$Itrs r0;
        java.util.concurrent.ArrayBlockingQueue$Itrs$Node r1, r2, r4, $r5;
        java.util.concurrent.ArrayBlockingQueue$Itr r3;
        int $i0, $i1;
        java.util.concurrent.ArrayBlockingQueue $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itrs;

        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: int cycles>;

        $i1 = 1 + $i0;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: int cycles> = $i1;

        r1 = null;

        r2 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head>;

     label1:
        if r2 == null goto label6;

        $r7 = virtualinvoke r2.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.lang.Object get()>();

        r3 = (java.util.concurrent.ArrayBlockingQueue$Itr) $r7;

        r4 = r2.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next>;

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean takeIndexWrapped()>();

        if $z0 == 0 goto label5;

     label2:
        virtualinvoke r2.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: void clear()>();

        r2.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next> = null;

        if r1 != null goto label4;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head> = r4;

     label3:
        r2 = r4;

        goto label1;

     label4:
        r1.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next> = r4;

        goto label3;

     label5:
        r1 = r2;

        goto label3;

     label6:
        $r5 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue$Itrs$Node head>;

        if $r5 != null goto label7;

        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue$Itrs: java.util.concurrent.ArrayBlockingQueue this$0>;

        $r6.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs> = null;

     label7:
        return;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ArrayBlockingQueue$Itrs: int SHORT_SWEEP_PROBES> = 4;

        <java.util.concurrent.ArrayBlockingQueue$Itrs: int LONG_SWEEP_PROBES> = 16;

        return;
    }
}
