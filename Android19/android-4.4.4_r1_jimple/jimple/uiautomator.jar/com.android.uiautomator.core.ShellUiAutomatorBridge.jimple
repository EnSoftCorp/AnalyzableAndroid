public class com.android.uiautomator.core.ShellUiAutomatorBridge extends com.android.uiautomator.core.UiAutomatorBridge
{
    private static final java.lang.String LOG_TAG;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "com/android/uiautomator/core/ShellUiAutomatorBridge";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>(android.app.UiAutomation)
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        android.app.UiAutomation r1;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        r1 := @parameter0: android.app.UiAutomation;

        specialinvoke r0.<com.android.uiautomator.core.UiAutomatorBridge: void <init>(android.app.UiAutomation)>(r1);

        return;
    }

    public android.view.Display getDefaultDisplay()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        android.hardware.display.DisplayManagerGlobal $r1;
        android.view.Display $r2;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        $r1 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        $r2 = virtualinvoke $r1.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(0);

        return $r2;
    }

    public int getRotation()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        android.view.IWindowManager r1;
        android.os.RemoteException r2, $r4;
        int i0;
        android.os.IBinder $r3;
        java.lang.String $r5;
        java.lang.RuntimeException r7;
        java.lang.Throwable r8, r9;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        r1 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r3);

     label1:
        i0 = interfaceinvoke r1.<android.view.IWindowManager: int getRotation()>();

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG>;

        r8 = (java.lang.Throwable) r2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Error getting screen rotation", r8);

        r7 = new java.lang.RuntimeException;

        r9 = (java.lang.Throwable) r2;

        specialinvoke r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r9);

        throw r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getSystemLongPressTime()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        long l0;
        android.content.IContentProvider r1;
        android.database.Cursor r2;
        android.os.RemoteException r3, $r18;
        android.app.IActivityManager r4;
        java.lang.String r5, $r19, $r20;
        android.os.Binder r6, r23;
        java.lang.Throwable r7, $r22, r27, r28;
        android.app.IActivityManager$ContentProviderHolder r8;
        int i1;
        android.net.Uri $r9, $r13;
        java.lang.String[] $r11, $r12;
        boolean $z0;
        java.lang.StringBuilder $r16, $r17, r24;
        java.lang.IllegalStateException r25;
        java.lang.RuntimeException r26;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        l0 = 0L;

        r1 = null;

        r2 = null;

     label01:
        r4 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r9 = <android.provider.Settings$Secure: android.net.Uri CONTENT_URI>;

        r5 = virtualinvoke $r9.<android.net.Uri: java.lang.String getAuthority()>();

        r23 = new android.os.Binder;

        specialinvoke r23.<android.os.Binder: void <init>()>();

        r6 = r23;

     label02:
        r8 = interfaceinvoke r4.<android.app.IActivityManager: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)>(r5, 0, r6);

     label03:
        r1 = null;

        r2 = null;

        if r8 != null goto label11;

     label04:
        r25 = new java.lang.IllegalStateException;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find provider: ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw r25;

     label05:
        $r22 := @caughtexception;

        r7 = $r22;

        if r2 == null goto label07;

     label06:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label07:
        if r1 == null goto label09;

     label08:
        interfaceinvoke r4.<android.app.IActivityManager: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>(r5, r6);

     label09:
        throw r7;

     label10:
        $r18 := @caughtexception;

        r3 = $r18;

        $r20 = <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG>;

        r27 = (java.lang.Throwable) r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r20, "Error reading long press timeout setting.", r27);

        r26 = new java.lang.RuntimeException;

        r28 = (java.lang.Throwable) r3;

        specialinvoke r26.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error reading long press timeout setting.", r28);

        throw r26;

     label11:
        r1 = r8.<android.app.IActivityManager$ContentProviderHolder: android.content.IContentProvider provider>;

        $r13 = <android.provider.Settings$Secure: android.net.Uri CONTENT_URI>;

        $r12 = newarray (java.lang.String)[1];

        $r12[0] = "value";

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "long_press_timeout";

        r2 = interfaceinvoke r1.<android.content.IContentProvider: android.database.Cursor query(java.lang.String,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.ICancellationSignal)>(null, $r13, $r12, "name=?", $r11, null, null);

        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label13;

        i1 = interfaceinvoke r2.<android.database.Cursor: int getInt(int)>(0);

     label12:
        l0 = (long) i1;

     label13:
        if r2 == null goto label15;

     label14:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label15:
        if r1 == null goto label17;

     label16:
        interfaceinvoke r4.<android.app.IActivityManager: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>(r5, r6);

     label17:
        return l0;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label04 to label05 with label05;
        catch android.os.RemoteException from label06 to label07 with label10;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch android.os.RemoteException from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label05;
        catch android.os.RemoteException from label14 to label15 with label10;
        catch android.os.RemoteException from label16 to label17 with label10;
    }

    public boolean isScreenOn()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        android.os.IPowerManager r1;
        android.os.RemoteException r2, $r4;
        boolean z0;
        android.os.IBinder $r3;
        java.lang.String $r5;
        java.lang.RuntimeException r7;
        java.lang.Throwable r8, r9;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("power");

        r1 = staticinvoke <android.os.IPowerManager$Stub: android.os.IPowerManager asInterface(android.os.IBinder)>($r3);

     label1:
        z0 = interfaceinvoke r1.<android.os.IPowerManager: boolean isScreenOn()>();

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG>;

        r8 = (java.lang.Throwable) r2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Error getting screen status", r8);

        r7 = new java.lang.RuntimeException;

        r9 = (java.lang.Throwable) r2;

        specialinvoke r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r9);

        throw r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
