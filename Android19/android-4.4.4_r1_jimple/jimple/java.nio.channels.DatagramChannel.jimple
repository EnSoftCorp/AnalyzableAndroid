public abstract class java.nio.channels.DatagramChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.ByteChannel, java.nio.channels.ScatteringByteChannel, java.nio.channels.GatheringByteChannel
{

    protected void <init>(java.nio.channels.spi.SelectorProvider)
    {
        java.nio.channels.DatagramChannel r0;
        java.nio.channels.spi.SelectorProvider r1;

        r0 := @this: java.nio.channels.DatagramChannel;

        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        specialinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);

        return;
    }

    public static java.nio.channels.DatagramChannel open() throws java.io.IOException
    {
        java.nio.channels.spi.SelectorProvider $r0;
        java.nio.channels.DatagramChannel $r1;

        $r0 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();

        $r1 = virtualinvoke $r0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel()>();

        return $r1;
    }

    public abstract java.nio.channels.DatagramChannel connect(java.net.SocketAddress) throws java.io.IOException;

    public abstract java.nio.channels.DatagramChannel disconnect() throws java.io.IOException;

    public abstract boolean isConnected();

    public abstract int read(java.nio.ByteBuffer) throws java.io.IOException;

    public final long read(java.nio.ByteBuffer[]) throws java.io.IOException
    {
        java.nio.channels.DatagramChannel r0;
        java.nio.ByteBuffer[] r1;
        java.lang.Throwable r2, $r3;
        long l0;
        int $i1;

        r0 := @this: java.nio.channels.DatagramChannel;

        r1 := @parameter0: java.nio.ByteBuffer[];

        entermonitor r0;

     label1:
        $i1 = lengthof r1;

        l0 = virtualinvoke r0.<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[],int,int)>(r1, 0, $i1);

     label2:
        exitmonitor r0;

        return l0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public abstract long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException;

    public abstract java.net.SocketAddress receive(java.nio.ByteBuffer) throws java.io.IOException;

    public abstract int send(java.nio.ByteBuffer, java.net.SocketAddress) throws java.io.IOException;

    public abstract java.net.DatagramSocket socket();

    public final int validOps()
    {
        java.nio.channels.DatagramChannel r0;

        r0 := @this: java.nio.channels.DatagramChannel;

        return 5;
    }

    public abstract int write(java.nio.ByteBuffer) throws java.io.IOException;

    public final long write(java.nio.ByteBuffer[]) throws java.io.IOException
    {
        java.nio.channels.DatagramChannel r0;
        java.nio.ByteBuffer[] r1;
        java.lang.Throwable r2, $r3;
        long l0;
        int $i1;

        r0 := @this: java.nio.channels.DatagramChannel;

        r1 := @parameter0: java.nio.ByteBuffer[];

        entermonitor r0;

     label1:
        $i1 = lengthof r1;

        l0 = virtualinvoke r0.<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[],int,int)>(r1, 0, $i1);

     label2:
        exitmonitor r0;

        return l0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public abstract long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException;
}
