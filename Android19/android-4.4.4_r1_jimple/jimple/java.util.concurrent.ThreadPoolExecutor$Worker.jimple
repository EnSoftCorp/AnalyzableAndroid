final class java.util.concurrent.ThreadPoolExecutor$Worker extends java.util.concurrent.locks.AbstractQueuedSynchronizer implements java.lang.Runnable
{
    private static final long serialVersionUID;
    volatile long completedTasks;
    java.lang.Runnable firstTask;
    final java.util.concurrent.ThreadPoolExecutor this$0;
    final java.lang.Thread thread;

    void <init>(java.util.concurrent.ThreadPoolExecutor, java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor$Worker r0;
        java.util.concurrent.ThreadPoolExecutor r1;
        java.lang.Runnable r2;
        java.util.concurrent.ThreadFactory $r3;
        java.lang.Thread $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        r1 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        r2 := @parameter1: java.lang.Runnable;

        r0.<java.util.concurrent.ThreadPoolExecutor$Worker: java.util.concurrent.ThreadPoolExecutor this$0> = r1;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: void <init>()>();

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor$Worker: void setState(int)>(-1);

        r0.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Runnable firstTask> = r2;

        $r3 = virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()>();

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(r0);

        r0.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread> = $r4;

        return;
    }

    void interruptIfStarted()
    {
        java.util.concurrent.ThreadPoolExecutor$Worker r0;
        java.lang.Thread r1;
        int $i0;
        boolean $z0;
        java.lang.SecurityException $r3;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        $i0 = virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor$Worker: int getState()>();

        if $i0 < 0 goto label2;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread>;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 != 0 goto label2;

     label1:
        virtualinvoke r1.<java.lang.Thread: void interrupt()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    protected boolean isHeldExclusively()
    {
        java.util.concurrent.ThreadPoolExecutor$Worker r0;
        int $i0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        $i0 = virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor$Worker: int getState()>();

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isLocked()
    {
        java.util.concurrent.ThreadPoolExecutor$Worker r0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        $z0 = virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean isHeldExclusively()>();

        return $z0;
    }

    public void lock()
    {
        java.util.concurrent.ThreadPoolExecutor$Worker r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor$Worker: void acquire(int)>(1);

        return;
    }

    public void run()
    {
        java.util.concurrent.ThreadPoolExecutor$Worker r0;
        java.util.concurrent.ThreadPoolExecutor $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor$Worker: java.util.concurrent.ThreadPoolExecutor this$0>;

        virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)>(r0);

        return;
    }

    protected boolean tryAcquire(int)
    {
        java.util.concurrent.ThreadPoolExecutor$Worker r0;
        int i0;
        boolean $z0;
        java.lang.Thread $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean compareAndSetState(int,int)>(0, 1);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor$Worker: void setExclusiveOwnerThread(java.lang.Thread)>($r1);

        return 1;

     label1:
        return 0;
    }

    public boolean tryLock()
    {
        java.util.concurrent.ThreadPoolExecutor$Worker r0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        $z0 = virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean tryAcquire(int)>(1);

        return $z0;
    }

    protected boolean tryRelease(int)
    {
        java.util.concurrent.ThreadPoolExecutor$Worker r0;
        int i0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor$Worker: void setExclusiveOwnerThread(java.lang.Thread)>(null);

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor$Worker: void setState(int)>(0);

        return 1;
    }

    public void unlock()
    {
        java.util.concurrent.ThreadPoolExecutor$Worker r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean release(int)>(1);

        return;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ThreadPoolExecutor$Worker: long serialVersionUID> = 6138294804551838833L;

        return;
    }
}
