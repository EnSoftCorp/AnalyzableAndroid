final class com.android.okhttp.internal.http.UnknownLengthHttpInputStream extends com.android.okhttp.internal.http.AbstractHttpInputStream
{
    private boolean inputExhausted;

    void <init>(java.io.InputStream, java.net.CacheRequest, com.android.okhttp.internal.http.HttpEngine) throws java.io.IOException
    {
        com.android.okhttp.internal.http.UnknownLengthHttpInputStream r0;
        java.io.InputStream r1;
        java.net.CacheRequest r2;
        com.android.okhttp.internal.http.HttpEngine r3;

        r0 := @this: com.android.okhttp.internal.http.UnknownLengthHttpInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.net.CacheRequest;

        r3 := @parameter2: com.android.okhttp.internal.http.HttpEngine;

        specialinvoke r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: void <init>(java.io.InputStream,com.android.okhttp.internal.http.HttpEngine,java.net.CacheRequest)>(r1, r3, r2);

        return;
    }

    public int available() throws java.io.IOException
    {
        com.android.okhttp.internal.http.UnknownLengthHttpInputStream r0;
        java.io.InputStream $r1, $r2;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.UnknownLengthHttpInputStream;

        virtualinvoke r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: void checkNotClosed()>();

        $r1 = r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: java.io.InputStream in>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int available()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.internal.http.UnknownLengthHttpInputStream r0;
        boolean $z0, $z1;

        r0 := @this: com.android.okhttp.internal.http.UnknownLengthHttpInputStream;

        $z0 = r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: boolean closed>;

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: boolean closed> = 1;

        $z1 = r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: boolean inputExhausted>;

        if $z1 != 0 goto label1;

        virtualinvoke r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: void unexpectedEndOfInput()>();

        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        com.android.okhttp.internal.http.UnknownLengthHttpInputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        java.io.InputStream $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.UnknownLengthHttpInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <com.android.okhttp.internal.Util: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        virtualinvoke r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: void checkNotClosed()>();

        $r2 = r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: java.io.InputStream in>;

        if $r2 == null goto label1;

        $z0 = r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: boolean inputExhausted>;

        if $z0 == 0 goto label2;

     label1:
        return -1;

     label2:
        $r3 = r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: java.io.InputStream in>;

        i2 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if i2 != -1 goto label3;

        r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: boolean inputExhausted> = 1;

        virtualinvoke r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: void endOfInput(boolean)>(0);

        return -1;

     label3:
        virtualinvoke r0.<com.android.okhttp.internal.http.UnknownLengthHttpInputStream: void cacheWrite(byte[],int,int)>(r1, i0, i2);

        return i2;
    }
}
