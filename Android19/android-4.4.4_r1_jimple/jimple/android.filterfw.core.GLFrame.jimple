public class android.filterfw.core.GLFrame extends android.filterfw.core.Frame
{
    public static final int EXISTING_FBO_BINDING;
    public static final int EXISTING_TEXTURE_BINDING;
    public static final int EXTERNAL_TEXTURE;
    public static final int NEW_FBO_BINDING;
    public static final int NEW_TEXTURE_BINDING;
    private int glFrameId;
    private android.filterfw.core.GLEnvironment mGLEnvironment;
    private boolean mOwnsTexture;

    static void <clinit>()
    {
        <android.filterfw.core.GLFrame: int NEW_TEXTURE_BINDING> = 102;

        <android.filterfw.core.GLFrame: int NEW_FBO_BINDING> = 103;

        <android.filterfw.core.GLFrame: int EXTERNAL_TEXTURE> = 104;

        <android.filterfw.core.GLFrame: int EXISTING_TEXTURE_BINDING> = 100;

        <android.filterfw.core.GLFrame: int EXISTING_FBO_BINDING> = 101;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("filterfw");

        return;
    }

    void <init>(android.filterfw.core.FrameFormat, android.filterfw.core.FrameManager)
    {
        android.filterfw.core.GLFrame r0;
        android.filterfw.core.FrameFormat r1;
        android.filterfw.core.FrameManager r2;

        r0 := @this: android.filterfw.core.GLFrame;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        r2 := @parameter1: android.filterfw.core.FrameManager;

        specialinvoke r0.<android.filterfw.core.Frame: void <init>(android.filterfw.core.FrameFormat,android.filterfw.core.FrameManager)>(r1, r2);

        r0.<android.filterfw.core.GLFrame: int glFrameId> = -1;

        r0.<android.filterfw.core.GLFrame: boolean mOwnsTexture> = 1;

        return;
    }

    void <init>(android.filterfw.core.FrameFormat, android.filterfw.core.FrameManager, int, long)
    {
        android.filterfw.core.GLFrame r0;
        android.filterfw.core.FrameFormat r1;
        android.filterfw.core.FrameManager r2;
        int i0;
        long l1;

        r0 := @this: android.filterfw.core.GLFrame;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        r2 := @parameter1: android.filterfw.core.FrameManager;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        specialinvoke r0.<android.filterfw.core.Frame: void <init>(android.filterfw.core.FrameFormat,android.filterfw.core.FrameManager,int,long)>(r1, r2, i0, l1);

        r0.<android.filterfw.core.GLFrame: int glFrameId> = -1;

        r0.<android.filterfw.core.GLFrame: boolean mOwnsTexture> = 1;

        return;
    }

    private void assertGLEnvValid()
    {
        android.filterfw.core.GLFrame r0;
        android.filterfw.core.GLEnvironment $r1;
        boolean $z0, $z1;
        java.lang.RuntimeException $r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r15;
        java.lang.String $r8, $r14;

        r0 := @this: android.filterfw.core.GLFrame;

        $r1 = r0.<android.filterfw.core.GLFrame: android.filterfw.core.GLEnvironment mGLEnvironment>;

        $z0 = virtualinvoke $r1.<android.filterfw.core.GLEnvironment: boolean isContextActive()>();

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.filterfw.core.GLEnvironment: boolean isAnyContextActive()>();

        if $z1 == 0 goto label1;

        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to access ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with foreign GL ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("context active!");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label1:
        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to access ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with no GL context ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" active!");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label2:
        return;
    }

    private native boolean generateNativeMipMap();

    private native boolean getNativeBitmap(android.graphics.Bitmap);

    private native byte[] getNativeData();

    private native int getNativeFboId();

    private native float[] getNativeFloats();

    private native int[] getNativeInts();

    private native int getNativeTextureId();

    private void initNew(boolean)
    {
        android.filterfw.core.GLFrame r0;
        boolean z0, $z1, $z2;
        android.filterfw.core.GLEnvironment $r1, $r5;
        android.filterfw.core.FrameFormat $r2, $r3;
        int $i0, $i1;
        java.lang.RuntimeException $r4, $r6;

        r0 := @this: android.filterfw.core.GLFrame;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r5 = r0.<android.filterfw.core.GLFrame: android.filterfw.core.GLEnvironment mGLEnvironment>;

        $z2 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean nativeAllocateExternal(android.filterfw.core.GLEnvironment)>($r5);

        if $z2 != 0 goto label2;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not allocate external GL frame!");

        throw $r6;

     label1:
        $r1 = r0.<android.filterfw.core.GLFrame: android.filterfw.core.GLEnvironment mGLEnvironment>;

        $r2 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getWidth()>();

        $r3 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i1 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getHeight()>();

        $z1 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean nativeAllocate(android.filterfw.core.GLEnvironment,int,int)>($r1, $i0, $i1);

        if $z1 != 0 goto label2;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not allocate GL frame!");

        throw $r4;

     label2:
        return;
    }

    private void initWithFbo(int)
    {
        android.filterfw.core.GLFrame r0;
        int i0, i1, i2;
        android.filterfw.core.FrameFormat $r1, $r2;
        android.filterfw.core.GLEnvironment $r3;
        boolean $z0;
        java.lang.RuntimeException $r4;

        r0 := @this: android.filterfw.core.GLFrame;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        i1 = virtualinvoke $r1.<android.filterfw.core.FrameFormat: int getWidth()>();

        $r2 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        i2 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getHeight()>();

        $r3 = r0.<android.filterfw.core.GLFrame: android.filterfw.core.GLEnvironment mGLEnvironment>;

        $z0 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean nativeAllocateWithFbo(android.filterfw.core.GLEnvironment,int,int,int)>($r3, i0, i1, i2);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not allocate FBO backed GL frame!");

        throw $r4;

     label1:
        return;
    }

    private void initWithTexture(int)
    {
        android.filterfw.core.GLFrame r0;
        int i0, i1, i2;
        android.filterfw.core.FrameFormat $r1, $r2;
        android.filterfw.core.GLEnvironment $r3;
        boolean $z0;
        java.lang.RuntimeException $r4;

        r0 := @this: android.filterfw.core.GLFrame;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        i1 = virtualinvoke $r1.<android.filterfw.core.FrameFormat: int getWidth()>();

        $r2 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        i2 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getHeight()>();

        $r3 = r0.<android.filterfw.core.GLFrame: android.filterfw.core.GLEnvironment mGLEnvironment>;

        $z0 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean nativeAllocateWithTexture(android.filterfw.core.GLEnvironment,int,int,int)>($r3, i0, i1, i2);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not allocate texture backed GL frame!");

        throw $r4;

     label1:
        r0.<android.filterfw.core.GLFrame: boolean mOwnsTexture> = 0;

        virtualinvoke r0.<android.filterfw.core.GLFrame: void markReadOnly()>();

        return;
    }

    private native boolean nativeAllocate(android.filterfw.core.GLEnvironment, int, int);

    private native boolean nativeAllocateExternal(android.filterfw.core.GLEnvironment);

    private native boolean nativeAllocateWithFbo(android.filterfw.core.GLEnvironment, int, int, int);

    private native boolean nativeAllocateWithTexture(android.filterfw.core.GLEnvironment, int, int, int);

    private native boolean nativeCopyFromGL(android.filterfw.core.GLFrame);

    private native boolean nativeCopyFromNative(android.filterfw.core.NativeFrame);

    private native boolean nativeDeallocate();

    private native boolean nativeDetachTexFromFbo();

    private native boolean nativeFocus();

    private native boolean nativeReattachTexToFbo();

    private native boolean nativeResetParams();

    private native boolean setNativeBitmap(android.graphics.Bitmap, int);

    private native boolean setNativeData(byte[], int, int);

    private native boolean setNativeFloats(float[]);

    private native boolean setNativeInts(int[]);

    private native boolean setNativeTextureParam(int, int);

    private native boolean setNativeViewport(int, int, int, int);

    void flushGPU(java.lang.String)
    {
        android.filterfw.core.GLFrame r0;
        java.lang.String r1, $r6, $r10;
        android.filterfw.core.StopWatchMap r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r9;

        r0 := @this: android.filterfw.core.GLFrame;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <android.filterfw.core.GLFrameTimer: android.filterfw.core.StopWatchMap get()>();

        $z0 = r2.<android.filterfw.core.StopWatchMap: boolean LOG_MFF_RUNNING_TIMES>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("glFinish ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.filterfw.core.StopWatchMap: void start(java.lang.String)>($r6);

        staticinvoke <android.opengl.GLES20: void glFinish()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("glFinish ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.filterfw.core.StopWatchMap: void stop(java.lang.String)>($r10);

     label1:
        return;
    }

    public void focus()
    {
        android.filterfw.core.GLFrame r0;
        boolean $z0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.filterfw.core.GLFrame;

        $z0 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean nativeFocus()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not focus on GLFrame for drawing!");

        throw $r1;

     label1:
        return;
    }

    public void generateMipMap()
    {
        android.filterfw.core.GLFrame r0;
        boolean $z0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.filterfw.core.GLFrame;

        virtualinvoke r0.<android.filterfw.core.GLFrame: void assertFrameMutable()>();

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        $z0 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean generateNativeMipMap()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not generate mip-map for GL frame!");

        throw $r1;

     label1:
        return;
    }

    public android.graphics.Bitmap getBitmap()
    {
        android.filterfw.core.GLFrame r0;
        android.graphics.Bitmap r1;
        android.filterfw.core.FrameFormat $r2, $r3;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r4;
        boolean $z0;
        java.lang.RuntimeException $r5;

        r0 := @this: android.filterfw.core.GLFrame;

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        virtualinvoke r0.<android.filterfw.core.GLFrame: void flushGPU(java.lang.String)>("getBitmap");

        $r2 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getWidth()>();

        $r3 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i1 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getHeight()>();

        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r4);

        $z0 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean getNativeBitmap(android.graphics.Bitmap)>(r1);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not get bitmap data from GL frame!");

        throw $r5;

     label1:
        return r1;
    }

    public java.nio.ByteBuffer getData()
    {
        android.filterfw.core.GLFrame r0;
        byte[] $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: android.filterfw.core.GLFrame;

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        virtualinvoke r0.<android.filterfw.core.GLFrame: void flushGPU(java.lang.String)>("getData");

        $r1 = specialinvoke r0.<android.filterfw.core.GLFrame: byte[] getNativeData()>();

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        return $r2;
    }

    public int getFboId()
    {
        android.filterfw.core.GLFrame r0;
        int $i0;

        r0 := @this: android.filterfw.core.GLFrame;

        $i0 = specialinvoke r0.<android.filterfw.core.GLFrame: int getNativeFboId()>();

        return $i0;
    }

    public float[] getFloats()
    {
        android.filterfw.core.GLFrame r0;
        float[] $r1;

        r0 := @this: android.filterfw.core.GLFrame;

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        virtualinvoke r0.<android.filterfw.core.GLFrame: void flushGPU(java.lang.String)>("getFloats");

        $r1 = specialinvoke r0.<android.filterfw.core.GLFrame: float[] getNativeFloats()>();

        return $r1;
    }

    public android.filterfw.core.GLEnvironment getGLEnvironment()
    {
        android.filterfw.core.GLFrame r0;
        android.filterfw.core.GLEnvironment $r1;

        r0 := @this: android.filterfw.core.GLFrame;

        $r1 = r0.<android.filterfw.core.GLFrame: android.filterfw.core.GLEnvironment mGLEnvironment>;

        return $r1;
    }

    public int[] getInts()
    {
        android.filterfw.core.GLFrame r0;
        int[] $r1;

        r0 := @this: android.filterfw.core.GLFrame;

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        virtualinvoke r0.<android.filterfw.core.GLFrame: void flushGPU(java.lang.String)>("getInts");

        $r1 = specialinvoke r0.<android.filterfw.core.GLFrame: int[] getNativeInts()>();

        return $r1;
    }

    public java.lang.Object getObjectValue()
    {
        android.filterfw.core.GLFrame r0;
        byte[] $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: android.filterfw.core.GLFrame;

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        $r1 = specialinvoke r0.<android.filterfw.core.GLFrame: byte[] getNativeData()>();

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        return $r2;
    }

    public int getTextureId()
    {
        android.filterfw.core.GLFrame r0;
        int $i0;

        r0 := @this: android.filterfw.core.GLFrame;

        $i0 = specialinvoke r0.<android.filterfw.core.GLFrame: int getNativeTextureId()>();

        return $i0;
    }

    protected boolean hasNativeAllocation()
    {
        android.filterfw.core.GLFrame r0;
        java.lang.Throwable r1, $r2;
        int i0;
        boolean z0;

        r0 := @this: android.filterfw.core.GLFrame;

        entermonitor r0;

     label1:
        i0 = r0.<android.filterfw.core.GLFrame: int glFrameId>;

     label2:
        if i0 == -1 goto label4;

        z0 = 1;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    void init(android.filterfw.core.GLEnvironment)
    {
        android.filterfw.core.GLFrame r0;
        android.filterfw.core.GLEnvironment r1;
        android.filterfw.core.FrameFormat r2, $r3;
        int i0, $i1, $i2, $i3, $i6, $i8, $i10, $i11;
        boolean z0;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        long $l4, $l5, $l7, $l9;
        java.lang.String $r9;
        java.lang.IllegalArgumentException $r10, $r11, $r12;

        r0 := @this: android.filterfw.core.GLFrame;

        r1 := @parameter0: android.filterfw.core.GLEnvironment;

        r2 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        r0.<android.filterfw.core.GLFrame: android.filterfw.core.GLEnvironment mGLEnvironment> = r1;

        $i1 = virtualinvoke r2.<android.filterfw.core.FrameFormat: int getBytesPerSample()>();

        if $i1 == 4 goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("GL frames must have 4 bytes per sample!");

        throw $r11;

     label01:
        $i2 = virtualinvoke r2.<android.filterfw.core.FrameFormat: int getDimensionCount()>();

        if $i2 == 2 goto label02;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("GL frames must be 2-dimensional!");

        throw $r12;

     label02:
        $r3 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i3 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getSize()>();

        if $i3 >= 0 goto label03;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Initializing GL frame with zero size!");

        throw $r10;

     label03:
        i0 = virtualinvoke r0.<android.filterfw.core.GLFrame: int getBindingType()>();

        z0 = 1;

        if i0 != 0 goto label05;

        specialinvoke r0.<android.filterfw.core.GLFrame: void initNew(boolean)>(0);

     label04:
        virtualinvoke r0.<android.filterfw.core.GLFrame: void setReusable(boolean)>(z0);

        return;

     label05:
        if i0 != 104 goto label06;

        specialinvoke r0.<android.filterfw.core.GLFrame: void initNew(boolean)>(1);

        z0 = 0;

        goto label04;

     label06:
        if i0 != 100 goto label07;

        $l9 = virtualinvoke r0.<android.filterfw.core.GLFrame: long getBindingId()>();

        $i11 = (int) $l9;

        specialinvoke r0.<android.filterfw.core.GLFrame: void initWithTexture(int)>($i11);

        goto label04;

     label07:
        if i0 != 101 goto label08;

        $l7 = virtualinvoke r0.<android.filterfw.core.GLFrame: long getBindingId()>();

        $i10 = (int) $l7;

        specialinvoke r0.<android.filterfw.core.GLFrame: void initWithFbo(int)>($i10);

        goto label04;

     label08:
        if i0 != 102 goto label09;

        $l5 = virtualinvoke r0.<android.filterfw.core.GLFrame: long getBindingId()>();

        $i8 = (int) $l5;

        specialinvoke r0.<android.filterfw.core.GLFrame: void initWithTexture(int)>($i8);

        goto label04;

     label09:
        if i0 != 103 goto label10;

        $l4 = virtualinvoke r0.<android.filterfw.core.GLFrame: long getBindingId()>();

        $i6 = (int) $l4;

        specialinvoke r0.<android.filterfw.core.GLFrame: void initWithFbo(int)>($i6);

        goto label04;

     label10:
        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to create GL frame with unknown binding type ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    protected void onFrameFetch()
    {
        android.filterfw.core.GLFrame r0;
        boolean $z0;

        r0 := @this: android.filterfw.core.GLFrame;

        $z0 = r0.<android.filterfw.core.GLFrame: boolean mOwnsTexture>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.filterfw.core.GLFrame: boolean nativeReattachTexToFbo()>();

     label1:
        return;
    }

    protected void onFrameStore()
    {
        android.filterfw.core.GLFrame r0;
        boolean $z0;

        r0 := @this: android.filterfw.core.GLFrame;

        $z0 = r0.<android.filterfw.core.GLFrame: boolean mOwnsTexture>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.filterfw.core.GLFrame: boolean nativeDetachTexFromFbo()>();

     label1:
        return;
    }

    protected void releaseNativeAllocation()
    {
        android.filterfw.core.GLFrame r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.filterfw.core.GLFrame;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.filterfw.core.GLFrame: boolean nativeDeallocate()>();

        r0.<android.filterfw.core.GLFrame: int glFrameId> = -1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void reset(android.filterfw.core.FrameFormat)
    {
        android.filterfw.core.GLFrame r0;
        android.filterfw.core.FrameFormat r1;
        boolean $z0;
        java.lang.RuntimeException $r2;

        r0 := @this: android.filterfw.core.GLFrame;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        $z0 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean nativeResetParams()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not reset GLFrame texture parameters!");

        throw $r2;

     label1:
        specialinvoke r0.<android.filterfw.core.Frame: void reset(android.filterfw.core.FrameFormat)>(r1);

        return;
    }

    public void setBitmap(android.graphics.Bitmap)
    {
        android.filterfw.core.GLFrame r0;
        android.graphics.Bitmap r1, r2;
        android.filterfw.core.FrameFormat $r3, $r5;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.RuntimeException $r4, $r6;
        boolean $z0;

        r0 := @this: android.filterfw.core.GLFrame;

        r1 := @parameter0: android.graphics.Bitmap;

        virtualinvoke r0.<android.filterfw.core.GLFrame: void assertFrameMutable()>();

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        $r3 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getWidth()>();

        $i1 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        if $i0 != $i1 goto label1;

        $r5 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i2 = virtualinvoke $r5.<android.filterfw.core.FrameFormat: int getHeight()>();

        $i3 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        if $i2 == $i3 goto label2;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Bitmap dimensions do not match GL frame dimensions!");

        throw $r4;

     label2:
        r2 = staticinvoke <android.filterfw.core.GLFrame: android.graphics.Bitmap convertBitmapToRGBA(android.graphics.Bitmap)>(r1);

        $i4 = virtualinvoke r2.<android.graphics.Bitmap: int getByteCount()>();

        $z0 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean setNativeBitmap(android.graphics.Bitmap,int)>(r2, $i4);

        if $z0 != 0 goto label3;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not set GL frame bitmap data!");

        throw $r6;

     label3:
        return;
    }

    public void setData(java.nio.ByteBuffer, int, int)
    {
        android.filterfw.core.GLFrame r0;
        java.nio.ByteBuffer r1;
        int i0, i1, $i2, $i3;
        byte[] r2;
        android.filterfw.core.FrameFormat $r3;
        boolean $z0;
        java.lang.RuntimeException $r4, $r5;

        r0 := @this: android.filterfw.core.GLFrame;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<android.filterfw.core.GLFrame: void assertFrameMutable()>();

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        r2 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $r3 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i2 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getSize()>();

        $i3 = lengthof r2;

        if $i2 == $i3 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Data size in setData does not match GL frame size!");

        throw $r5;

     label1:
        $z0 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean setNativeData(byte[],int,int)>(r2, i0, i1);

        if $z0 != 0 goto label2;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not set GL frame data!");

        throw $r4;

     label2:
        return;
    }

    public void setDataFromFrame(android.filterfw.core.Frame)
    {
        android.filterfw.core.GLFrame r0, $r5;
        android.filterfw.core.Frame r1;
        android.filterfw.core.FrameFormat $r2, $r3, $r9, $r14;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        android.filterfw.core.NativeFrame $r6;
        java.lang.RuntimeException $r7;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r15, $r16;
        java.lang.String $r17;

        r0 := @this: android.filterfw.core.GLFrame;

        r1 := @parameter0: android.filterfw.core.Frame;

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        $r2 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getSize()>();

        $r3 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i1 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getSize()>();

        if $i0 >= $i1 goto label1;

        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to assign frame of size ");

        $r9 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i2 = virtualinvoke $r9.<android.filterfw.core.FrameFormat: int getSize()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("smaller GL frame of size ");

        $r14 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i3 = virtualinvoke $r14.<android.filterfw.core.FrameFormat: int getSize()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r7;

     label1:
        $z0 = r1 instanceof android.filterfw.core.NativeFrame;

        if $z0 == 0 goto label2;

        $r6 = (android.filterfw.core.NativeFrame) r1;

        specialinvoke r0.<android.filterfw.core.GLFrame: boolean nativeCopyFromNative(android.filterfw.core.NativeFrame)>($r6);

        return;

     label2:
        $z1 = r1 instanceof android.filterfw.core.GLFrame;

        if $z1 == 0 goto label3;

        $r5 = (android.filterfw.core.GLFrame) r1;

        specialinvoke r0.<android.filterfw.core.GLFrame: boolean nativeCopyFromGL(android.filterfw.core.GLFrame)>($r5);

        return;

     label3:
        $z2 = r1 instanceof android.filterfw.core.SimpleFrame;

        if $z2 == 0 goto label4;

        $r4 = virtualinvoke r1.<android.filterfw.core.Frame: java.lang.Object getObjectValue()>();

        virtualinvoke r0.<android.filterfw.core.GLFrame: void setObjectValue(java.lang.Object)>($r4);

        return;

     label4:
        specialinvoke r0.<android.filterfw.core.Frame: void setDataFromFrame(android.filterfw.core.Frame)>(r1);

        return;
    }

    public void setFloats(float[])
    {
        android.filterfw.core.GLFrame r0;
        float[] r1;
        boolean $z0;
        java.lang.RuntimeException $r2;

        r0 := @this: android.filterfw.core.GLFrame;

        r1 := @parameter0: float[];

        virtualinvoke r0.<android.filterfw.core.GLFrame: void assertFrameMutable()>();

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        $z0 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean setNativeFloats(float[])>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not set int values for GL frame!");

        throw $r2;

     label1:
        return;
    }

    public void setInts(int[])
    {
        android.filterfw.core.GLFrame r0;
        int[] r1;
        boolean $z0;
        java.lang.RuntimeException $r2;

        r0 := @this: android.filterfw.core.GLFrame;

        r1 := @parameter0: int[];

        virtualinvoke r0.<android.filterfw.core.GLFrame: void assertFrameMutable()>();

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        $z0 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean setNativeInts(int[])>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not set int values for GL frame!");

        throw $r2;

     label1:
        return;
    }

    public void setTextureParameter(int, int)
    {
        android.filterfw.core.GLFrame r0;
        int i0, i1;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: android.filterfw.core.GLFrame;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<android.filterfw.core.GLFrame: void assertFrameMutable()>();

        specialinvoke r0.<android.filterfw.core.GLFrame: void assertGLEnvValid()>();

        $z0 = specialinvoke r0.<android.filterfw.core.GLFrame: boolean setNativeTextureParam(int,int)>(i0, i1);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not set texture value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for GLFrame!");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r1;

     label1:
        return;
    }

    public void setViewport(int, int, int, int)
    {
        android.filterfw.core.GLFrame r0;
        int i0, i1, i2, i3;

        r0 := @this: android.filterfw.core.GLFrame;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.filterfw.core.GLFrame: void assertFrameMutable()>();

        specialinvoke r0.<android.filterfw.core.GLFrame: boolean setNativeViewport(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void setViewport(android.graphics.Rect)
    {
        android.filterfw.core.GLFrame r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.filterfw.core.GLFrame;

        r1 := @parameter0: android.graphics.Rect;

        virtualinvoke r0.<android.filterfw.core.GLFrame: void assertFrameMutable()>();

        $i7 = r1.<android.graphics.Rect: int left>;

        $i6 = r1.<android.graphics.Rect: int top>;

        $i1 = r1.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int left>;

        $i5 = $i1 - $i0;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        $i2 = r1.<android.graphics.Rect: int top>;

        $i4 = $i3 - $i2;

        specialinvoke r0.<android.filterfw.core.GLFrame: boolean setNativeViewport(int,int,int,int)>($i7, $i6, $i5, $i4);

        return;
    }

    public java.lang.String toString()
    {
        android.filterfw.core.GLFrame r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2;
        android.filterfw.core.FrameFormat $r5;
        java.lang.String $r11;

        r0 := @this: android.filterfw.core.GLFrame;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GLFrame id: ");

        $i0 = r0.<android.filterfw.core.GLFrame: int glFrameId>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = virtualinvoke r0.<android.filterfw.core.GLFrame: android.filterfw.core.FrameFormat getFormat()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") with texture ID ");

        $i1 = virtualinvoke r0.<android.filterfw.core.GLFrame: int getTextureId()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", FBO ID ");

        $i2 = virtualinvoke r0.<android.filterfw.core.GLFrame: int getFboId()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }
}
