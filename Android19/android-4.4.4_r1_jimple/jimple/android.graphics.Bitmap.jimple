public final class android.graphics.Bitmap extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    public static final int DENSITY_NONE;
    private static final int WORKING_COMPRESS_STORAGE;
    private static volatile int sDefaultDensity;
    private static volatile android.graphics.Matrix sScaleMatrix;
    public byte[] mBuffer;
    int mDensity;
    private final android.graphics.Bitmap$BitmapFinalizer mFinalizer;
    private int mHeight;
    private final boolean mIsMutable;
    private boolean mIsPremultiplied;
    private int[] mLayoutBounds;
    public final int mNativeBitmap;
    private byte[] mNinePatchChunk;
    private boolean mRecycled;
    private int mWidth;

    static void <clinit>()
    {
        android.graphics.Bitmap$1 $r0;

        <android.graphics.Bitmap: int WORKING_COMPRESS_STORAGE> = 4096;

        <android.graphics.Bitmap: int DENSITY_NONE> = 0;

        <android.graphics.Bitmap: int sDefaultDensity> = -1;

        $r0 = new android.graphics.Bitmap$1;

        specialinvoke $r0.<android.graphics.Bitmap$1: void <init>()>();

        <android.graphics.Bitmap: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    void <init>(int, byte[], int, int, int, boolean, boolean, byte[], int[])
    {
        android.graphics.Bitmap r0;
        int i0, i1, i2, i3, $i4;
        byte[] r1, r2;
        boolean z0, z1;
        int[] r3;
        android.graphics.Bitmap$BitmapFinalizer $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        r2 := @parameter7: byte[];

        r3 := @parameter8: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i4 = staticinvoke <android.graphics.Bitmap: int getDefaultDensity()>();

        r0.<android.graphics.Bitmap: int mDensity> = $i4;

        if i0 != 0 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("internal error: native bitmap is 0");

        throw $r5;

     label1:
        r0.<android.graphics.Bitmap: int mWidth> = i1;

        r0.<android.graphics.Bitmap: int mHeight> = i2;

        r0.<android.graphics.Bitmap: boolean mIsMutable> = z0;

        r0.<android.graphics.Bitmap: boolean mIsPremultiplied> = z1;

        r0.<android.graphics.Bitmap: byte[] mBuffer> = r1;

        r0.<android.graphics.Bitmap: int mNativeBitmap> = i0;

        $r4 = new android.graphics.Bitmap$BitmapFinalizer;

        specialinvoke $r4.<android.graphics.Bitmap$BitmapFinalizer: void <init>(int)>(i0);

        r0.<android.graphics.Bitmap: android.graphics.Bitmap$BitmapFinalizer mFinalizer> = $r4;

        r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = r2;

        r0.<android.graphics.Bitmap: int[] mLayoutBounds> = r3;

        if i3 < 0 goto label2;

        r0.<android.graphics.Bitmap: int mDensity> = i3;

     label2:
        return;
    }

    static android.graphics.Bitmap access$000(android.os.Parcel)
    {
        android.os.Parcel r0;
        android.graphics.Bitmap $r1;

        r0 := @parameter0: android.os.Parcel;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreateFromParcel(android.os.Parcel)>(r0);

        return $r1;
    }

    static void access$100(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.graphics.Bitmap: void nativeDestructor(int)>(i0);

        return;
    }

    private void checkPixelAccess(int, int)
    {
        android.graphics.Bitmap r0;
        int i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>(i0, i1);

        $i2 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if i0 < $i2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x must be < bitmap.width()");

        throw $r2;

     label1:
        $i3 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if i1 < $i3 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y must be < bitmap.height()");

        throw $r1;

     label2:
        return;
    }

    private void checkPixelsAccess(int, int, int, int, int, int, int[])
    {
        android.graphics.Bitmap r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        int[] r1;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5, $r6, $r7;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: int[];

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>(i0, i1);

        if i2 >= 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width must be >= 0");

        throw $r7;

     label1:
        if i3 >= 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("height must be >= 0");

        throw $r5;

     label2:
        $i8 = i0 + i2;

        $i9 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if $i8 <= $i9 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x + width must be <= bitmap.width()");

        throw $r6;

     label3:
        $i10 = i1 + i3;

        $i11 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if $i10 <= $i11 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y + height must be <= bitmap.height()");

        throw $r3;

     label4:
        $i12 = staticinvoke <java.lang.Math: int abs(int)>(i5);

        if $i12 >= i2 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("abs(stride) must be >= width");

        throw $r4;

     label5:
        $i13 = i3 - 1;

        $i14 = i5 * $i13;

        i6 = i4 + $i14;

        i7 = lengthof r1;

        if i4 < 0 goto label6;

        $i16 = i4 + i2;

        if $i16 > i7 goto label6;

        if i6 < 0 goto label6;

        $i15 = i6 + i2;

        if $i15 <= i7 goto label7;

     label6:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label7:
        return;
    }

    private void checkRecycled(java.lang.String)
    {
        android.graphics.Bitmap r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label1:
        return;
    }

    private static void checkWidthHeight(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0, $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width must be > 0");

        throw $r1;

     label1:
        if i1 > 0 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("height must be > 0");

        throw $r0;

     label2:
        return;
    }

    private static void checkXYSign(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0, $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x must be >= 0");

        throw $r1;

     label1:
        if i1 >= 0 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y must be >= 0");

        throw $r0;

     label2:
        return;
    }

    public static android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap$Config)
    {
        int i0, i1;
        android.graphics.Bitmap$Config r0;
        android.graphics.Bitmap $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Bitmap$Config;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>(i0, i1, r0, 1);

        return $r1;
    }

    private static android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap$Config, boolean)
    {
        int i0, i1;
        android.graphics.Bitmap$Config r0;
        boolean z0;
        android.graphics.Bitmap $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Bitmap$Config;

        z0 := @parameter3: boolean;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>(null, i0, i1, r0, z0);

        return $r1;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: android.graphics.Bitmap;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>(r0, 0, 0, $i0, $i1);

        return $r1;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int)
    {
        android.graphics.Bitmap r0, $r1;
        int i0, i1, i2, i3;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>(r0, i0, i1, i2, i3, null, 0);

        return $r1;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int, android.graphics.Matrix, boolean)
    {
        android.graphics.Bitmap r0, r7;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        android.graphics.Matrix r1;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z11;
        android.graphics.Canvas r2, $r10;
        android.graphics.Rect r3, $r11;
        android.graphics.RectF r4, r9, $r12, $r13;
        android.graphics.Bitmap$Config r5, r6;
        android.graphics.Paint r8, $r14;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int[] $r15;
        java.lang.IllegalArgumentException $r16, $r17;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: android.graphics.Matrix;

        z0 := @parameter6: boolean;

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>(i0, i1);

        staticinvoke <android.graphics.Bitmap: void checkWidthHeight(int,int)>(i2, i3);

        $i7 = i0 + i2;

        $i6 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if $i7 <= $i6 goto label01;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x + width must be <= bitmap.width()");

        throw $r17;

     label01:
        $i9 = i1 + i3;

        $i8 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if $i9 <= $i8 goto label02;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y + height must be <= bitmap.height()");

        throw $r16;

     label02:
        $z3 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z3 != 0 goto label04;

        if i0 != 0 goto label04;

        if i1 != 0 goto label04;

        $i16 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if i2 != $i16 goto label04;

        $i15 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if i3 != $i15 goto label04;

        if r1 == null goto label03;

        $z11 = virtualinvoke r1.<android.graphics.Matrix: boolean isIdentity()>();

        if $z11 == 0 goto label04;

     label03:
        return r0;

     label04:
        $r10 = new android.graphics.Canvas;

        specialinvoke $r10.<android.graphics.Canvas: void <init>()>();

        r2 = $r10;

        $r11 = new android.graphics.Rect;

        $i11 = i0 + i2;

        $i10 = i1 + i3;

        specialinvoke $r11.<android.graphics.Rect: void <init>(int,int,int,int)>(i0, i1, $i11, $i10);

        r3 = $r11;

        $r12 = new android.graphics.RectF;

        $f0 = (float) i2;

        $f1 = (float) i3;

        specialinvoke $r12.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f0, $f1);

        r4 = $r12;

        r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r6 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if r6 == null goto label06;

        $r15 = <android.graphics.Bitmap$2: int[] $SwitchMap$android$graphics$Bitmap$Config>;

        $i14 = virtualinvoke r6.<android.graphics.Bitmap$Config: int ordinal()>();

        $i13 = $r15[$i14];

        tableswitch($i13)
        {
            case 1: goto label09;
            case 2: goto label10;
            default: goto label05;
        };

     label05:
        r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

     label06:
        if r1 == null goto label07;

        $z5 = virtualinvoke r1.<android.graphics.Matrix: boolean isIdentity()>();

        if $z5 == 0 goto label11;

     label07:
        $z4 = virtualinvoke r0.<android.graphics.Bitmap: boolean hasAlpha()>();

        r7 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>(i2, i3, r5, $z4);

        r8 = null;

     label08:
        $i12 = r0.<android.graphics.Bitmap: int mDensity>;

        r7.<android.graphics.Bitmap: int mDensity> = $i12;

        $z7 = virtualinvoke r0.<android.graphics.Bitmap: boolean hasAlpha()>();

        $z8 = r0.<android.graphics.Bitmap: boolean mIsPremultiplied>;

        specialinvoke r7.<android.graphics.Bitmap: void setAlphaAndPremultiplied(boolean,boolean)>($z7, $z8);

        virtualinvoke r2.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(r7);

        virtualinvoke r2.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>(r0, r3, r4, r8);

        virtualinvoke r2.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

        return r7;

     label09:
        r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        goto label06;

     label10:
        r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>;

        goto label06;

     label11:
        $z6 = virtualinvoke r1.<android.graphics.Matrix: boolean rectStaysRect()>();

        if $z6 != 0 goto label16;

        z1 = 1;

     label12:
        $r13 = new android.graphics.RectF;

        specialinvoke $r13.<android.graphics.RectF: void <init>()>();

        r9 = $r13;

        virtualinvoke r1.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>(r9, r4);

        $f2 = virtualinvoke r9.<android.graphics.RectF: float width()>();

        i4 = staticinvoke <java.lang.Math: int round(float)>($f2);

        $f4 = virtualinvoke r9.<android.graphics.RectF: float height()>();

        i5 = staticinvoke <java.lang.Math: int round(float)>($f4);

        if z1 == 0 goto label13;

        r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

     label13:
        if z1 != 0 goto label14;

        $z10 = virtualinvoke r0.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z10 == 0 goto label17;

     label14:
        z2 = 1;

     label15:
        r7 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>(i4, i5, r5, z2);

        $f3 = r9.<android.graphics.RectF: float left>;

        $f5 = neg $f3;

        $f7 = r9.<android.graphics.RectF: float top>;

        $f6 = neg $f7;

        virtualinvoke r2.<android.graphics.Canvas: void translate(float,float)>($f5, $f6);

        virtualinvoke r2.<android.graphics.Canvas: void concat(android.graphics.Matrix)>(r1);

        $r14 = new android.graphics.Paint;

        specialinvoke $r14.<android.graphics.Paint: void <init>()>();

        r8 = $r14;

        virtualinvoke r8.<android.graphics.Paint: void setFilterBitmap(boolean)>(z0);

        if z1 == 0 goto label08;

        virtualinvoke r8.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        goto label08;

     label16:
        z1 = 0;

        goto label12;

     label17:
        z2 = 0;

        goto label15;
    }

    public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int, int, android.graphics.Bitmap$Config)
    {
        android.util.DisplayMetrics r0;
        int i0, i1;
        android.graphics.Bitmap$Config r1;
        android.graphics.Bitmap $r2;

        r0 := @parameter0: android.util.DisplayMetrics;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.graphics.Bitmap$Config;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>(r0, i0, i1, r1, 1);

        return $r2;
    }

    private static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int, int, android.graphics.Bitmap$Config, boolean)
    {
        android.util.DisplayMetrics r0;
        int i0, i1, $i2, $i3, $i4;
        android.graphics.Bitmap$Config r1, $r4;
        boolean z0;
        android.graphics.Bitmap r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: android.util.DisplayMetrics;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.graphics.Bitmap$Config;

        z0 := @parameter4: boolean;

        if i0 <= 0 goto label1;

        if i1 > 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw $r3;

     label2:
        $i2 = r1.<android.graphics.Bitmap$Config: int nativeInt>;

        r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreate(int[],int,int,int,int,int,boolean)>(null, 0, i0, i0, i1, $i2, 1);

        if r0 == null goto label3;

        $i4 = r0.<android.util.DisplayMetrics: int densityDpi>;

        r2.<android.graphics.Bitmap: int mDensity> = $i4;

     label3:
        virtualinvoke r2.<android.graphics.Bitmap: void setHasAlpha(boolean)>(z0);

        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        if r1 != $r4 goto label4;

        if z0 != 0 goto label4;

        $i3 = r2.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeErase(int,int)>($i3, -16777216);

     label4:
        return r2;
    }

    public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int[], int, int, int, int, android.graphics.Bitmap$Config)
    {
        android.util.DisplayMetrics r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.graphics.Bitmap$Config r2;
        android.graphics.Bitmap r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @parameter0: android.util.DisplayMetrics;

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 := @parameter6: android.graphics.Bitmap$Config;

        staticinvoke <android.graphics.Bitmap: void checkWidthHeight(int,int)>(i2, i3);

        $i6 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i6 >= i2 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("abs(stride) must be >= width");

        throw $r6;

     label1:
        $i7 = i3 - 1;

        $i8 = i1 * $i7;

        i4 = i0 + $i8;

        i5 = lengthof r1;

        if i0 < 0 goto label2;

        $i9 = i0 + i2;

        if $i9 > i5 goto label2;

        if i4 < 0 goto label2;

        $i10 = i4 + i2;

        if $i10 <= i5 goto label3;

     label2:
        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label3:
        if i2 <= 0 goto label4;

        if i3 > 0 goto label5;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw $r5;

     label5:
        $i11 = r2.<android.graphics.Bitmap$Config: int nativeInt>;

        r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreate(int[],int,int,int,int,int,boolean)>(r1, i0, i1, i2, i3, $i11, 0);

        if r0 == null goto label6;

        $i12 = r0.<android.util.DisplayMetrics: int densityDpi>;

        r3.<android.graphics.Bitmap: int mDensity> = $i12;

     label6:
        return r3;
    }

    public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int[], int, int, android.graphics.Bitmap$Config)
    {
        android.util.DisplayMetrics r0;
        int[] r1;
        int i0, i1;
        android.graphics.Bitmap$Config r2;
        android.graphics.Bitmap $r3;

        r0 := @parameter0: android.util.DisplayMetrics;

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: android.graphics.Bitmap$Config;

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>(r0, r1, 0, i0, i0, i1, r2);

        return $r3;
    }

    public static android.graphics.Bitmap createBitmap(int[], int, int, int, int, android.graphics.Bitmap$Config)
    {
        int[] r0;
        int i0, i1, i2, i3;
        android.graphics.Bitmap$Config r1;
        android.graphics.Bitmap $r2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: android.graphics.Bitmap$Config;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>(null, r0, i0, i1, i2, i3, r1);

        return $r2;
    }

    public static android.graphics.Bitmap createBitmap(int[], int, int, android.graphics.Bitmap$Config)
    {
        int[] r0;
        int i0, i1;
        android.graphics.Bitmap$Config r1;
        android.graphics.Bitmap $r2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.graphics.Bitmap$Config;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>(null, r0, 0, i0, i0, i1, r1);

        return $r2;
    }

    public static android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap, int, int, boolean)
    {
        android.graphics.Bitmap r0, r3;
        int i0, i1, i2, i3;
        boolean z0;
        java.lang.Throwable r1, r4, $r6, $r8;
        android.graphics.Matrix r2, $r5, $r7;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        entermonitor class "android/graphics/Bitmap";

     label01:
        r2 = <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix>;

        <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix> = null;

        exitmonitor class "android/graphics/Bitmap";

     label02:
        if r2 != null goto label03;

        $r7 = new android.graphics.Matrix;

        specialinvoke $r7.<android.graphics.Matrix: void <init>()>();

        r2 = $r7;

     label03:
        i2 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        i3 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $f1 = (float) i0;

        $f0 = (float) i2;

        $f4 = $f1 / $f0;

        $f3 = (float) i1;

        $f2 = (float) i3;

        $f5 = $f3 / $f2;

        virtualinvoke r2.<android.graphics.Matrix: void setScale(float,float)>($f4, $f5);

        r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>(r0, 0, 0, i2, i3, r2, z0);

        entermonitor class "android/graphics/Bitmap";

     label04:
        $r5 = <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix>;

        if $r5 != null goto label05;

        <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix> = r2;

     label05:
        exitmonitor class "android/graphics/Bitmap";

     label06:
        return r3;

     label07:
        $r6 := @caughtexception;

        r1 = $r6;

     label08:
        exitmonitor class "android/graphics/Bitmap";

     label09:
        throw r1;

     label10:
        $r8 := @caughtexception;

        r4 = $r8;

     label11:
        exitmonitor class "android/graphics/Bitmap";

     label12:
        throw r4;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    static int getDefaultDensity()
    {
        int $i0, $i1, $i2, $i3;

        $i0 = <android.graphics.Bitmap: int sDefaultDensity>;

        if $i0 < 0 goto label1;

        $i3 = <android.graphics.Bitmap: int sDefaultDensity>;

        return $i3;

     label1:
        $i1 = <android.util.DisplayMetrics: int DENSITY_DEVICE>;

        <android.graphics.Bitmap: int sDefaultDensity> = $i1;

        $i2 = <android.graphics.Bitmap: int sDefaultDensity>;

        return $i2;
    }

    private static native boolean nativeCompress(int, int, int, java.io.OutputStream, byte[]);

    private static native int nativeConfig(int);

    private static native android.graphics.Bitmap nativeCopy(int, int, boolean);

    private static native void nativeCopyPixelsFromBuffer(int, java.nio.Buffer);

    private static native void nativeCopyPixelsToBuffer(int, java.nio.Buffer);

    private static native android.graphics.Bitmap nativeCreate(int[], int, int, int, int, int, boolean);

    private static native android.graphics.Bitmap nativeCreateFromParcel(android.os.Parcel);

    private static native void nativeDestructor(int);

    private static native void nativeErase(int, int);

    private static native android.graphics.Bitmap nativeExtractAlpha(int, int, int[]);

    private static native int nativeGenerationId(int);

    private static native int nativeGetPixel(int, int, int, boolean);

    private static native void nativeGetPixels(int, int[], int, int, int, int, int, int, boolean);

    private static native boolean nativeHasAlpha(int);

    private static native boolean nativeHasMipMap(int);

    private static native void nativePrepareToDraw(int);

    private static native void nativeReconfigure(int, int, int, int, int);

    private static native boolean nativeRecycle(int);

    private static native int nativeRowBytes(int);

    private static native boolean nativeSameAs(int, int);

    private static native void nativeSetAlphaAndPremultiplied(int, boolean, boolean);

    private static native void nativeSetHasMipMap(int, boolean);

    private static native void nativeSetPixel(int, int, int, int, boolean);

    private static native void nativeSetPixels(int, int[], int, int, int, int, int, int, boolean);

    private static native boolean nativeWriteToParcel(int, boolean, int, android.os.Parcel);

    public static int scaleFromDensity(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 == 0 goto label1;

        if i2 == 0 goto label1;

        if i1 != i2 goto label2;

     label1:
        return i0;

     label2:
        $i4 = i0 * i2;

        $i3 = i1 >> 1;

        $i5 = $i4 + $i3;

        $i6 = $i5 / i1;

        return $i6;
    }

    private final void setAlphaAndPremultiplied(boolean, boolean)
    {
        android.graphics.Bitmap r0;
        boolean z0, z1;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r0.<android.graphics.Bitmap: boolean mIsPremultiplied> = z1;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeSetAlphaAndPremultiplied(int,boolean,boolean)>($i0, z0, z1);

        return;
    }

    public static void setDefaultDensity(int)
    {
        int i0;

        i0 := @parameter0: int;

        <android.graphics.Bitmap: int sDefaultDensity> = i0;

        return;
    }

    public boolean compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream)
    {
        android.graphics.Bitmap r0;
        android.graphics.Bitmap$CompressFormat r1;
        int i0, $i1, $i2;
        java.io.OutputStream r2;
        java.lang.IllegalArgumentException $r3;
        byte[] $r4;
        boolean $z0;
        java.lang.NullPointerException $r5;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap$CompressFormat;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.OutputStream;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t compress a recycled bitmap");

        if r2 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label1:
        if i0 < 0 goto label2;

        if i0 <= 100 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("quality must be 0..100");

        throw $r3;

     label3:
        $i2 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i1 = r1.<android.graphics.Bitmap$CompressFormat: int nativeInt>;

        $r4 = newarray (byte)[4096];

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeCompress(int,int,int,java.io.OutputStream,byte[])>($i2, $i1, i0, r2, $r4);

        return $z0;
    }

    public android.graphics.Bitmap copy(android.graphics.Bitmap$Config, boolean)
    {
        android.graphics.Bitmap r0, r2;
        android.graphics.Bitmap$Config r1;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap$Config;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t copy a recycled bitmap");

        $i1 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i0 = r1.<android.graphics.Bitmap$Config: int nativeInt>;

        r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCopy(int,int,boolean)>($i1, $i0, z0);

        if r2 == null goto label1;

        $z1 = virtualinvoke r0.<android.graphics.Bitmap: boolean hasAlpha()>();

        $z2 = r0.<android.graphics.Bitmap: boolean mIsPremultiplied>;

        specialinvoke r2.<android.graphics.Bitmap: void setAlphaAndPremultiplied(boolean,boolean)>($z1, $z2);

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        r2.<android.graphics.Bitmap: int mDensity> = $i2;

     label1:
        return r2;
    }

    public void copyPixelsFromBuffer(java.nio.Buffer)
    {
        android.graphics.Bitmap r0;
        java.nio.Buffer r1;
        int i0, $i5, $i7, $i8, $i11;
        byte b1, $b6;
        long l2, l3, $l4, $l9, $l10, $l12;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r2, $r3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: java.nio.Buffer;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("copyPixelsFromBuffer called on recycled bitmap");

        i0 = virtualinvoke r1.<java.nio.Buffer: int remaining()>();

        $z0 = r1 instanceof java.nio.ByteBuffer;

        if $z0 == 0 goto label2;

        b1 = 0;

     label1:
        $l4 = (long) i0;

        l2 = $l4 << b1;

        $i5 = virtualinvoke r0.<android.graphics.Bitmap: int getByteCount()>();

        l3 = (long) $i5;

        $b6 = l2 cmp l3;

        if $b6 >= 0 goto label5;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Buffer not large enough for pixels");

        throw $r3;

     label2:
        $z1 = r1 instanceof java.nio.ShortBuffer;

        if $z1 == 0 goto label3;

        b1 = 1;

        goto label1;

     label3:
        $z2 = r1 instanceof java.nio.IntBuffer;

        if $z2 == 0 goto label4;

        b1 = 2;

        goto label1;

     label4:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("unsupported Buffer subclass");

        throw $r2;

     label5:
        $i8 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeCopyPixelsFromBuffer(int,java.nio.Buffer)>($i8, r1);

        $i7 = virtualinvoke r1.<java.nio.Buffer: int position()>();

        $l9 = (long) $i7;

        $l10 = l3 >> b1;

        $l12 = $l9 + $l10;

        $i11 = (int) $l12;

        virtualinvoke r1.<java.nio.Buffer: java.nio.Buffer position(int)>($i11);

        return;
    }

    public void copyPixelsToBuffer(java.nio.Buffer)
    {
        android.graphics.Bitmap r0;
        java.nio.Buffer r1;
        int i0, $i5, $i7, $i8, $i11;
        byte b1, $b6;
        long l2, l3, $l4, $l9, $l10, $l12;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r2, $r3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: java.nio.Buffer;

        i0 = virtualinvoke r1.<java.nio.Buffer: int remaining()>();

        $z0 = r1 instanceof java.nio.ByteBuffer;

        if $z0 == 0 goto label2;

        b1 = 0;

     label1:
        $l4 = (long) i0;

        l2 = $l4 << b1;

        $i5 = virtualinvoke r0.<android.graphics.Bitmap: int getByteCount()>();

        l3 = (long) $i5;

        $b6 = l2 cmp l3;

        if $b6 >= 0 goto label5;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Buffer not large enough for pixels");

        throw $r3;

     label2:
        $z1 = r1 instanceof java.nio.ShortBuffer;

        if $z1 == 0 goto label3;

        b1 = 1;

        goto label1;

     label3:
        $z2 = r1 instanceof java.nio.IntBuffer;

        if $z2 == 0 goto label4;

        b1 = 2;

        goto label1;

     label4:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("unsupported Buffer subclass");

        throw $r2;

     label5:
        $i8 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeCopyPixelsToBuffer(int,java.nio.Buffer)>($i8, r1);

        $i7 = virtualinvoke r1.<java.nio.Buffer: int position()>();

        $l9 = (long) $i7;

        $l10 = l3 >> b1;

        $l12 = $l9 + $l10;

        $i11 = (int) $l12;

        virtualinvoke r1.<java.nio.Buffer: java.nio.Buffer position(int)>($i11);

        return;
    }

    public int describeContents()
    {
        android.graphics.Bitmap r0;

        r0 := @this: android.graphics.Bitmap;

        return 0;
    }

    public void eraseColor(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t erase a recycled bitmap");

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot erase immutable bitmaps");

        throw $r1;

     label1:
        $i1 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeErase(int,int)>($i1, i0);

        return;
    }

    public android.graphics.Bitmap extractAlpha()
    {
        android.graphics.Bitmap r0, $r1;

        r0 := @this: android.graphics.Bitmap;

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>(null, null);

        return $r1;
    }

    public android.graphics.Bitmap extractAlpha(android.graphics.Paint, int[])
    {
        android.graphics.Bitmap r0, r3;
        android.graphics.Paint r1;
        int[] r2;
        int i0, $i1, $i2;
        java.lang.RuntimeException $r4;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Paint;

        r2 := @parameter1: int[];

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t extractAlpha on a recycled bitmap");

        if r1 == null goto label2;

        i0 = r1.<android.graphics.Paint: int mNativePaint>;

     label1:
        $i1 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeExtractAlpha(int,int,int[])>($i1, i0, r2);

        if r3 != null goto label3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to extractAlpha on Bitmap");

        throw $r4;

     label2:
        i0 = 0;

        goto label1;

     label3:
        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        r3.<android.graphics.Bitmap: int mDensity> = $i2;

        return r3;
    }

    public final int getAllocationByteCount()
    {
        android.graphics.Bitmap r0;
        byte[] $r1, $r2;
        int $i0, $i1;

        r0 := @this: android.graphics.Bitmap;

        $r1 = r0.<android.graphics.Bitmap: byte[] mBuffer>;

        if $r1 != null goto label1;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getByteCount()>();

        return $i1;

     label1:
        $r2 = r0.<android.graphics.Bitmap: byte[] mBuffer>;

        $i0 = lengthof $r2;

        return $i0;
    }

    public final int getByteCount()
    {
        android.graphics.Bitmap r0;
        int $i0, $i1, $i2;

        r0 := @this: android.graphics.Bitmap;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getRowBytes()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = $i0 * $i1;

        return $i2;
    }

    public final android.graphics.Bitmap$Config getConfig()
    {
        android.graphics.Bitmap r0;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r1;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i1 = staticinvoke <android.graphics.Bitmap: int nativeConfig(int)>($i0);

        $r1 = staticinvoke <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config nativeToConfig(int)>($i1);

        return $r1;
    }

    public int getDensity()
    {
        android.graphics.Bitmap r0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mDensity>;

        return $i0;
    }

    public int getGenerationId()
    {
        android.graphics.Bitmap r0;
        int $i0, $i1;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i1 = staticinvoke <android.graphics.Bitmap: int nativeGenerationId(int)>($i0);

        return $i1;
    }

    public final int getHeight()
    {
        android.graphics.Bitmap r0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mHeight>;

        return $i0;
    }

    public int[] getLayoutBounds()
    {
        android.graphics.Bitmap r0;
        int[] $r1;

        r0 := @this: android.graphics.Bitmap;

        $r1 = r0.<android.graphics.Bitmap: int[] mLayoutBounds>;

        return $r1;
    }

    public byte[] getNinePatchChunk()
    {
        android.graphics.Bitmap r0;
        byte[] $r1;

        r0 := @this: android.graphics.Bitmap;

        $r1 = r0.<android.graphics.Bitmap: byte[] mNinePatchChunk>;

        return $r1;
    }

    public int getPixel(int, int)
    {
        android.graphics.Bitmap r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call getPixel() on a recycled bitmap");

        specialinvoke r0.<android.graphics.Bitmap: void checkPixelAccess(int,int)>(i0, i1);

        $i2 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z0 = r0.<android.graphics.Bitmap: boolean mIsPremultiplied>;

        $i3 = staticinvoke <android.graphics.Bitmap: int nativeGetPixel(int,int,int,boolean)>($i2, i0, i1, $z0);

        return $i3;
    }

    public void getPixels(int[], int, int, int, int, int, int)
    {
        android.graphics.Bitmap r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5, $i6;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call getPixels() on a recycled bitmap");

        if i4 == 0 goto label1;

        if i5 != 0 goto label2;

     label1:
        return;

     label2:
        specialinvoke r0.<android.graphics.Bitmap: void checkPixelsAccess(int,int,int,int,int,int,int[])>(i2, i3, i4, i5, i0, i1, r1);

        $i6 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z0 = r0.<android.graphics.Bitmap: boolean mIsPremultiplied>;

        staticinvoke <android.graphics.Bitmap: void nativeGetPixels(int,int[],int,int,int,int,int,int,boolean)>($i6, r1, i0, i1, i2, i3, i4, i5, $z0);

        return;
    }

    public final int getRowBytes()
    {
        android.graphics.Bitmap r0;
        int $i0, $i1;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i1 = staticinvoke <android.graphics.Bitmap: int nativeRowBytes(int)>($i0);

        return $i1;
    }

    public int getScaledHeight(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i1, $i2, i0);

        return $i3;
    }

    public int getScaledHeight(android.graphics.Canvas)
    {
        android.graphics.Bitmap r0;
        android.graphics.Canvas r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.graphics.Canvas: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public int getScaledHeight(android.util.DisplayMetrics)
    {
        android.graphics.Bitmap r0;
        android.util.DisplayMetrics r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.util.DisplayMetrics;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.util.DisplayMetrics: int densityDpi>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public int getScaledWidth(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i1, $i2, i0);

        return $i3;
    }

    public int getScaledWidth(android.graphics.Canvas)
    {
        android.graphics.Bitmap r0;
        android.graphics.Canvas r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.graphics.Canvas: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public int getScaledWidth(android.util.DisplayMetrics)
    {
        android.graphics.Bitmap r0;
        android.util.DisplayMetrics r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.util.DisplayMetrics;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.util.DisplayMetrics: int densityDpi>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public final int getWidth()
    {
        android.graphics.Bitmap r0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mWidth>;

        return $i0;
    }

    public final boolean hasAlpha()
    {
        android.graphics.Bitmap r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeHasAlpha(int)>($i0);

        return $z0;
    }

    public final boolean hasMipMap()
    {
        android.graphics.Bitmap r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeHasMipMap(int)>($i0);

        return $z0;
    }

    public final boolean isMutable()
    {
        android.graphics.Bitmap r0;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mIsMutable>;

        return $z0;
    }

    public final boolean isPremultiplied()
    {
        android.graphics.Bitmap r0;
        boolean $z0, $z1;
        android.graphics.Bitmap$Config $r1, $r2;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mIsPremultiplied>;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        if $r1 == $r2 goto label1;

        $z1 = virtualinvoke r0.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isRecycled()
    {
        android.graphics.Bitmap r0;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        return $z0;
    }

    final int ni()
    {
        android.graphics.Bitmap r0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        return $i0;
    }

    public void prepareToDraw()
    {
        android.graphics.Bitmap r0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativePrepareToDraw(int)>($i0);

        return;
    }

    public void reconfigure(int, int, android.graphics.Bitmap$Config)
    {
        android.graphics.Bitmap r0;
        int i0, i1, $i2, $i3, $i4;
        android.graphics.Bitmap$Config r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        byte[] $r3, $r4;
        java.lang.IllegalStateException $r5, $r6;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Bitmap$Config;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call reconfigure() on a recycled bitmap");

        if i0 <= 0 goto label1;

        if i1 > 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw $r2;

     label2:
        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 != 0 goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("only mutable bitmaps may be reconfigured");

        throw $r6;

     label3:
        $r3 = r0.<android.graphics.Bitmap: byte[] mBuffer>;

        if $r3 != null goto label4;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("native-backed bitmaps may not be reconfigured");

        throw $r5;

     label4:
        $i4 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i3 = r1.<android.graphics.Bitmap$Config: int nativeInt>;

        $r4 = r0.<android.graphics.Bitmap: byte[] mBuffer>;

        $i2 = lengthof $r4;

        staticinvoke <android.graphics.Bitmap: void nativeReconfigure(int,int,int,int,int)>($i4, i0, i1, $i3, $i2);

        r0.<android.graphics.Bitmap: int mWidth> = i0;

        r0.<android.graphics.Bitmap: int mHeight> = i1;

        return;
    }

    public void recycle()
    {
        android.graphics.Bitmap r0;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 != 0 goto label2;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z1 = staticinvoke <android.graphics.Bitmap: boolean nativeRecycle(int)>($i0);

        if $z1 == 0 goto label1;

        r0.<android.graphics.Bitmap: byte[] mBuffer> = null;

        r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = null;

     label1:
        r0.<android.graphics.Bitmap: boolean mRecycled> = 1;

     label2:
        return;
    }

    void reinit(int, int, boolean)
    {
        android.graphics.Bitmap r0;
        int i0, i1;
        boolean z0;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        r0.<android.graphics.Bitmap: int mWidth> = i0;

        r0.<android.graphics.Bitmap: int mHeight> = i1;

        r0.<android.graphics.Bitmap: boolean mIsPremultiplied> = z0;

        return;
    }

    public boolean sameAs(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap;

        if r0 == r1 goto label1;

        if r1 == null goto label2;

        $i1 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i0 = r1.<android.graphics.Bitmap: int mNativeBitmap>;

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeSameAs(int,int)>($i1, $i0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void setConfig(android.graphics.Bitmap$Config)
    {
        android.graphics.Bitmap r0;
        android.graphics.Bitmap$Config r1;
        int $i0, $i1;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap$Config;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r0.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>($i0, $i1, r1);

        return;
    }

    public void setDensity(int)
    {
        android.graphics.Bitmap r0;
        int i0;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        r0.<android.graphics.Bitmap: int mDensity> = i0;

        return;
    }

    public void setHasAlpha(boolean)
    {
        android.graphics.Bitmap r0;
        boolean z0, $z1;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z1 = r0.<android.graphics.Bitmap: boolean mIsPremultiplied>;

        staticinvoke <android.graphics.Bitmap: void nativeSetAlphaAndPremultiplied(int,boolean,boolean)>($i0, z0, $z1);

        return;
    }

    public final void setHasMipMap(boolean)
    {
        android.graphics.Bitmap r0;
        boolean z0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeSetHasMipMap(int,boolean)>($i0, z0);

        return;
    }

    public void setHeight(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1;
        android.graphics.Bitmap$Config $r1;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        virtualinvoke r0.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>($i1, i0, $r1);

        return;
    }

    public void setLayoutBounds(int[])
    {
        android.graphics.Bitmap r0;
        int[] r1;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: int[];

        r0.<android.graphics.Bitmap: int[] mLayoutBounds> = r1;

        return;
    }

    public void setNinePatchChunk(byte[])
    {
        android.graphics.Bitmap r0;
        byte[] r1;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: byte[];

        r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = r1;

        return;
    }

    public void setPixel(int, int, int)
    {
        android.graphics.Bitmap r0;
        int i0, i1, i2, $i3;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call setPixel() on a recycled bitmap");

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        specialinvoke r0.<android.graphics.Bitmap: void checkPixelAccess(int,int)>(i0, i1);

        $i3 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z1 = r0.<android.graphics.Bitmap: boolean mIsPremultiplied>;

        staticinvoke <android.graphics.Bitmap: void nativeSetPixel(int,int,int,int,boolean)>($i3, i0, i1, i2, $z1);

        return;
    }

    public void setPixels(int[], int, int, int, int, int, int)
    {
        android.graphics.Bitmap r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5, $i6;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call setPixels() on a recycled bitmap");

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        if i4 == 0 goto label2;

        if i5 != 0 goto label3;

     label2:
        return;

     label3:
        specialinvoke r0.<android.graphics.Bitmap: void checkPixelsAccess(int,int,int,int,int,int,int[])>(i2, i3, i4, i5, i0, i1, r1);

        $i6 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z1 = r0.<android.graphics.Bitmap: boolean mIsPremultiplied>;

        staticinvoke <android.graphics.Bitmap: void nativeSetPixels(int,int[],int,int,int,int,int,int,boolean)>($i6, r1, i0, i1, i2, i3, i4, i5, $z1);

        return;
    }

    public final void setPremultiplied(boolean)
    {
        android.graphics.Bitmap r0;
        boolean z0, $z1;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        z0 := @parameter0: boolean;

        r0.<android.graphics.Bitmap: boolean mIsPremultiplied> = z0;

        $i0 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z1 = virtualinvoke r0.<android.graphics.Bitmap: boolean hasAlpha()>();

        staticinvoke <android.graphics.Bitmap: void nativeSetAlphaAndPremultiplied(int,boolean,boolean)>($i0, $z1, z0);

        return;
    }

    public void setWidth(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1;
        android.graphics.Bitmap$Config $r1;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        virtualinvoke r0.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>(i0, $i1, $r1);

        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.graphics.Bitmap r0;
        android.os.Parcel r1;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.RuntimeException $r2;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t parcel a recycled bitmap");

        $i2 = r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z0 = r0.<android.graphics.Bitmap: boolean mIsMutable>;

        $i1 = r0.<android.graphics.Bitmap: int mDensity>;

        $z1 = staticinvoke <android.graphics.Bitmap: boolean nativeWriteToParcel(int,boolean,int,android.os.Parcel)>($i2, $z0, $i1, r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("native writeToParcel failed");

        throw $r2;

     label1:
        return;
    }
}
