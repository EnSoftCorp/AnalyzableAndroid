public abstract class com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher extends javax.crypto.CipherSpi implements com.android.org.bouncycastle.jcajce.provider.symmetric.util.PBE
{
    private java.lang.Class[] availableSpecs;
    protected java.security.AlgorithmParameters engineParams;
    private byte[] iv;
    private int ivSize;
    protected int pbeHash;
    protected int pbeIvSize;
    protected int pbeKeySize;
    protected int pbeType;
    protected com.android.org.bouncycastle.crypto.Wrapper wrapEngine;

    protected void <init>()
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        java.lang.Class[] $r1;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "javax/crypto/spec/IvParameterSpec";

        $r1[1] = class "javax/crypto/spec/PBEParameterSpec";

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: java.lang.Class[] availableSpecs> = $r1;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: int pbeType> = 2;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: int pbeHash> = 1;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: java.security.AlgorithmParameters engineParams> = null;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: com.android.org.bouncycastle.crypto.Wrapper wrapEngine> = null;

        return;
    }

    protected void <init>(com.android.org.bouncycastle.crypto.Wrapper)
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        com.android.org.bouncycastle.crypto.Wrapper r1;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        r1 := @parameter0: com.android.org.bouncycastle.crypto.Wrapper;

        specialinvoke r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: void <init>(com.android.org.bouncycastle.crypto.Wrapper,int)>(r1, 0);

        return;
    }

    protected void <init>(com.android.org.bouncycastle.crypto.Wrapper, int)
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        com.android.org.bouncycastle.crypto.Wrapper r1;
        int i0;
        java.lang.Class[] $r2;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        r1 := @parameter0: com.android.org.bouncycastle.crypto.Wrapper;

        i0 := @parameter1: int;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r2 = newarray (java.lang.Class)[2];

        $r2[0] = class "javax/crypto/spec/IvParameterSpec";

        $r2[1] = class "javax/crypto/spec/PBEParameterSpec";

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: java.lang.Class[] availableSpecs> = $r2;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: int pbeType> = 2;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: int pbeHash> = 1;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: java.security.AlgorithmParameters engineParams> = null;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: com.android.org.bouncycastle.crypto.Wrapper wrapEngine> = null;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: com.android.org.bouncycastle.crypto.Wrapper wrapEngine> = r1;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: int ivSize> = i0;

        return;
    }

    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, javax.crypto.ShortBufferException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        byte[] r1, r2;
        int i0, i1, i2;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

        return 0;
    }

    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        byte[] r1;
        int i0, i1;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return null;
    }

    protected int engineGetBlockSize()
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        return 0;
    }

    protected byte[] engineGetIV()
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        byte[] $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        $r1 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: byte[] iv>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        $r4 = (byte[]) $r3;

        return $r4;
    }

    protected int engineGetKeySize(java.security.Key)
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        java.security.Key r1;
        byte[] $r2;
        int $i0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        r1 := @parameter0: java.security.Key;

        $r2 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r2;

        return $i0;
    }

    protected int engineGetOutputSize(int)
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        int i0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        i0 := @parameter0: int;

        return -1;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        return null;
    }

    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        int i0, i1, i2;
        java.security.Key r1;
        java.security.AlgorithmParameters r2;
        java.security.SecureRandom r3;
        java.security.spec.AlgorithmParameterSpec r4, r6;
        java.lang.Class[] $r7, $r13;
        java.security.InvalidAlgorithmParameterException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r11, $r14;
        java.lang.Class $r15;
        java.lang.Exception $r16;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.AlgorithmParameters;

        r3 := @parameter3: java.security.SecureRandom;

        r4 = null;

        if r2 == null goto label6;

        i1 = 0;

     label1:
        $r7 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: java.lang.Class[] availableSpecs>;

        i2 = lengthof $r7;

        r4 = null;

        if i1 == i2 goto label4;

     label2:
        $r13 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: java.lang.Class[] availableSpecs>;

        $r15 = $r13[i1];

        r6 = virtualinvoke r2.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r15);

     label3:
        r4 = r6;

     label4:
        if r4 != null goto label6;

        $r8 = new java.security.InvalidAlgorithmParameterException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r11 = virtualinvoke r2.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label5:
        $r16 := @caughtexception;

        i1 = i1 + 1;

        goto label1;

     label6:
        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: java.security.AlgorithmParameters engineParams> = r2;

        virtualinvoke r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r1, r4, r3);

        return;

        catch java.lang.Exception from label2 to label3 with label5;
    }

    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        int i0;
        java.security.Key r1;
        java.security.SecureRandom r2;
        java.security.InvalidAlgorithmParameterException r3, $r5;
        java.security.spec.AlgorithmParameterSpec $r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.SecureRandom;

     label1:
        $r4 = (java.security.spec.AlgorithmParameterSpec) null;

        virtualinvoke r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r1, $r4, r2);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke r3.<java.security.InvalidAlgorithmParameterException: java.lang.String getMessage()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        int i0, $i1, $i2;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        java.security.SecureRandom r3;
        com.android.org.bouncycastle.crypto.CipherParameters r4, $r20;
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey r5;
        boolean $z0, $z1, $z2, $z3;
        com.android.org.bouncycastle.crypto.params.KeyParameter $r6;
        byte[] $r7, $r12, $r13, $r14, $r18;
        java.io.PrintStream $r8;
        com.android.org.bouncycastle.crypto.Wrapper $r9, $r10, $r21;
        java.lang.IllegalArgumentException $r11;
        com.android.org.bouncycastle.crypto.params.ParametersWithIV $r15, $r17;
        javax.crypto.spec.IvParameterSpec $r16;
        java.security.InvalidAlgorithmParameterException $r19;
        java.lang.String $r22;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        r3 := @parameter3: java.security.SecureRandom;

        $z0 = r1 instanceof com.android.org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey;

        if $z0 == 0 goto label07;

        r5 = (com.android.org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey) r1;

        $z3 = r2 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z3 == 0 goto label05;

        $r21 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        $r22 = interfaceinvoke $r21.<com.android.org.bouncycastle.crypto.Wrapper: java.lang.String getAlgorithmName()>();

        r4 = staticinvoke <com.android.org.bouncycastle.jcajce.provider.symmetric.util.PBE$Util: com.android.org.bouncycastle.crypto.CipherParameters makePBEParameters(com.android.org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey,java.security.spec.AlgorithmParameterSpec,java.lang.String)>(r5, r2, $r22);

     label01:
        $z1 = r2 instanceof javax.crypto.spec.IvParameterSpec;

        if $z1 == 0 goto label02;

        $r17 = new com.android.org.bouncycastle.crypto.params.ParametersWithIV;

        $r16 = (javax.crypto.spec.IvParameterSpec) r2;

        $r18 = virtualinvoke $r16.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke $r17.<com.android.org.bouncycastle.crypto.params.ParametersWithIV: void <init>(com.android.org.bouncycastle.crypto.CipherParameters,byte[])>(r4, $r18);

        r4 = $r17;

     label02:
        $z2 = r4 instanceof com.android.org.bouncycastle.crypto.params.KeyParameter;

        if $z2 == 0 goto label03;

        $i2 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: int ivSize>;

        if $i2 == 0 goto label03;

        $i1 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: int ivSize>;

        $r13 = newarray (byte)[$i1];

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: byte[] iv> = $r13;

        $r12 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: byte[] iv>;

        virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>($r12);

        $r15 = new com.android.org.bouncycastle.crypto.params.ParametersWithIV;

        $r14 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: byte[] iv>;

        specialinvoke $r15.<com.android.org.bouncycastle.crypto.params.ParametersWithIV: void <init>(com.android.org.bouncycastle.crypto.CipherParameters,byte[])>(r4, $r14);

        r4 = $r15;

     label03:
        tableswitch(i0)
        {
            case 1: goto label10;
            case 2: goto label10;
            case 3: goto label08;
            case 4: goto label09;
            default: goto label04;
        };

     label04:
        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("eeek!");

        return;

     label05:
        $r20 = virtualinvoke r5.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey: com.android.org.bouncycastle.crypto.CipherParameters getParam()>();

        if $r20 == null goto label06;

        r4 = virtualinvoke r5.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey: com.android.org.bouncycastle.crypto.CipherParameters getParam()>();

        goto label01;

     label06:
        $r19 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r19.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PBE requires PBE parameters to be set.");

        throw $r19;

     label07:
        $r6 = new com.android.org.bouncycastle.crypto.params.KeyParameter;

        $r7 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r6.<com.android.org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r7);

        r4 = $r6;

        goto label01;

     label08:
        $r10 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        interfaceinvoke $r10.<com.android.org.bouncycastle.crypto.Wrapper: void init(boolean,com.android.org.bouncycastle.crypto.CipherParameters)>(1, r4);

        return;

     label09:
        $r9 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        interfaceinvoke $r9.<com.android.org.bouncycastle.crypto.Wrapper: void init(boolean,com.android.org.bouncycastle.crypto.CipherParameters)>(0, r4);

        return;

     label10:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("engine only valid for wrapping");

        throw $r11;
    }

    protected void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        java.lang.String r1, $r6;
        java.security.NoSuchAlgorithmException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.security.NoSuchAlgorithmException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r4, $r5, $r6, r8;
        javax.crypto.NoSuchPaddingException r9;
        java.lang.Throwable r10;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        r1 := @parameter0: java.lang.String;

        r9 = new javax.crypto.NoSuchPaddingException;

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r7);

        r10 = (java.lang.Throwable) r9;

        throw r10;
    }

    protected java.security.Key engineUnwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        byte[] r1, r6, r7, r16;
        java.lang.String r2, $r21, $r34, $r36, $r39, $r42, $r48, $r51, $r56, $r59;
        int i0, $i1, $i2;
        javax.crypto.IllegalBlockSizeException r3, $r41;
        javax.crypto.BadPaddingException r4, $r37;
        com.android.org.bouncycastle.crypto.InvalidCipherTextException r5, $r57;
        java.lang.Object r8;
        java.security.spec.InvalidKeySpecException r9, $r38;
        java.security.NoSuchProviderException r10, $r47;
        java.security.KeyFactory r11;
        java.security.PrivateKey r12;
        com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo r14;
        com.android.org.bouncycastle.crypto.Wrapper $r15, $r17;
        boolean $z0;
        java.lang.StringBuilder $r19, $r22, $r29, $r30, $r33, $r43, $r49, $r50, $r52, r64, r69, r71, r73;
        java.security.PublicKey $r24;
        com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier $r28;
        com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier $r31;
        java.lang.Exception $r54;
        javax.crypto.spec.SecretKeySpec r60;
        java.security.InvalidKeyException r61, r62, r63, r65, r66, r70, r72, r74;
        java.security.spec.X509EncodedKeySpec r67;
        java.security.spec.PKCS8EncodedKeySpec r68;
        java.security.Key r75;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label01:
        $r15 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        if $r15 != null goto label05;

        $i2 = lengthof r1;

        r16 = virtualinvoke r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: byte[] engineDoFinal(byte[],int,int)>(r1, 0, $i2);

     label02:
        r7 = r16;

     label03:
        if i0 != 3 goto label10;

        r60 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r60.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r7, r2);

        r8 = r60;

     label04:
        r75 = (java.security.Key) r8;

        return r75;

     label05:
        $r17 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        $i1 = lengthof r1;

        r6 = interfaceinvoke $r17.<com.android.org.bouncycastle.crypto.Wrapper: byte[] unwrap(byte[],int,int)>(r1, 0, $i1);

     label06:
        r7 = r6;

        goto label03;

     label07:
        $r57 := @caughtexception;

        r5 = $r57;

        r61 = new java.security.InvalidKeyException;

        $r59 = virtualinvoke r5.<com.android.org.bouncycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke r61.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r59);

        throw r61;

     label08:
        $r37 := @caughtexception;

        r4 = $r37;

        r62 = new java.security.InvalidKeyException;

        $r36 = virtualinvoke r4.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke r62.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r36);

        throw r62;

     label09:
        $r41 := @caughtexception;

        r3 = $r41;

        r63 = new java.security.InvalidKeyException;

        $r39 = virtualinvoke r3.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        specialinvoke r63.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r39);

        throw r63;

     label10:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label15;

        if i0 != 2 goto label15;

     label11:
        r14 = staticinvoke <com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo: com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>(r7);

        r8 = staticinvoke <com.android.org.bouncycastle.jce.provider.BouncyCastleProvider: java.security.PrivateKey getPrivateKey(com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>(r14);

     label12:
        if r8 != null goto label04;

     label13:
        r65 = new java.security.InvalidKeyException;

        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("algorithm ");

        $r31 = virtualinvoke r14.<com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm()>();

        $r28 = virtualinvoke $r31.<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r65.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r34);

        throw r65;

     label14:
        $r54 := @caughtexception;

        r66 = new java.security.InvalidKeyException;

        specialinvoke r66.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Invalid key encoding.");

        throw r66;

     label15:
        r11 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>(r2, "BC");

     label16:
        if i0 != 1 goto label18;

     label17:
        r67 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke r67.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r7);

        $r24 = virtualinvoke r11.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r67);

        return $r24;

     label18:
        if i0 != 2 goto label23;

     label19:
        r68 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke r68.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r7);

        r12 = virtualinvoke r11.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>(r68);

     label20:
        return r12;

     label21:
        $r47 := @caughtexception;

        r10 = $r47;

        r70 = new java.security.InvalidKeyException;

        r69 = new java.lang.StringBuilder;

        specialinvoke r69.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r51 = virtualinvoke r10.<java.security.NoSuchProviderException: java.lang.String getMessage()>();

        $r50 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r56 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r70.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r56);

        throw r70;

     label22:
        $r38 := @caughtexception;

        r9 = $r38;

        r72 = new java.security.InvalidKeyException;

        r71 = new java.lang.StringBuilder;

        specialinvoke r71.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r42 = virtualinvoke r9.<java.security.spec.InvalidKeySpecException: java.lang.String getMessage()>();

        $r49 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r72.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r48);

        throw r72;

     label23:
        r74 = new java.security.InvalidKeyException;

        r73 = new java.lang.StringBuilder;

        specialinvoke r73.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r74.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r21);

        throw r74;

        catch com.android.org.bouncycastle.crypto.InvalidCipherTextException from label01 to label02 with label07;
        catch javax.crypto.BadPaddingException from label01 to label02 with label08;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label09;
        catch com.android.org.bouncycastle.crypto.InvalidCipherTextException from label05 to label06 with label07;
        catch javax.crypto.BadPaddingException from label05 to label06 with label08;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label09;
        catch java.lang.Exception from label11 to label12 with label14;
        catch java.lang.Exception from label13 to label14 with label14;
        catch java.security.NoSuchProviderException from label15 to label16 with label21;
        catch java.security.spec.InvalidKeySpecException from label15 to label16 with label22;
        catch java.security.NoSuchProviderException from label17 to label18 with label21;
        catch java.security.spec.InvalidKeySpecException from label17 to label18 with label22;
        catch java.security.NoSuchProviderException from label19 to label20 with label21;
        catch java.security.spec.InvalidKeySpecException from label19 to label20 with label22;
    }

    protected int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        byte[] r1, r2;
        int i0, i1, i2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("not supported for wrapping");

        throw $r3;
    }

    protected byte[] engineUpdate(byte[], int, int)
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        byte[] r1;
        int i0, i1;
        java.lang.RuntimeException $r2;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("not supported for wrapping");

        throw $r2;
    }

    protected byte[] engineWrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher r0;
        java.security.Key r1;
        byte[] r2, r4, $r7;
        javax.crypto.BadPaddingException r3, $r9;
        com.android.org.bouncycastle.crypto.Wrapper $r5, $r6;
        int $i0, $i1;
        java.lang.String $r11;
        java.security.InvalidKeyException r12;
        javax.crypto.IllegalBlockSizeException r13;
        java.lang.Throwable r14;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher;

        r1 := @parameter0: java.security.Key;

        r2 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r2 != null goto label1;

        r12 = new java.security.InvalidKeyException;

        specialinvoke r12.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Cannot wrap key, null encoding.");

        throw r12;

     label1:
        $r5 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        if $r5 != null goto label2;

        $i1 = lengthof r2;

        $r7 = virtualinvoke r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: byte[] engineDoFinal(byte[],int,int)>(r2, 0, $i1);

        return $r7;

     label2:
        $r6 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        $i0 = lengthof r2;

        r4 = interfaceinvoke $r6.<com.android.org.bouncycastle.crypto.Wrapper: byte[] wrap(byte[],int,int)>(r2, 0, $i0);

     label3:
        return r4;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        r13 = new javax.crypto.IllegalBlockSizeException;

        $r11 = virtualinvoke r3.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke r13.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r11);

        r14 = (java.lang.Throwable) r13;

        throw r14;

        catch javax.crypto.BadPaddingException from label1 to label2 with label4;
        catch javax.crypto.BadPaddingException from label2 to label3 with label4;
    }
}
