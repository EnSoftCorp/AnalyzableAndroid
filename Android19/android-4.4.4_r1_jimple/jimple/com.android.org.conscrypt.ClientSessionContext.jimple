public class com.android.org.conscrypt.ClientSessionContext extends com.android.org.conscrypt.AbstractSessionContext
{
    private com.android.org.conscrypt.SSLClientSessionCache persistentCache;
    final java.util.Map sessionsByHostAndPort;

    public void <init>()
    {
        com.android.org.conscrypt.ClientSessionContext r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.org.conscrypt.ClientSessionContext;

        specialinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: void <init>(int,int)>(10, 0);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.org.conscrypt.ClientSessionContext: java.util.Map sessionsByHostAndPort> = $r1;

        return;
    }

    public javax.net.ssl.SSLSession getSession(java.lang.String, int)
    {
        com.android.org.conscrypt.ClientSessionContext r0;
        java.lang.String r1;
        int i0;
        com.android.org.conscrypt.ClientSessionContext$HostAndPort r2, $r10;
        java.util.Map r3, r8, $r11, $r16;
        java.lang.Throwable r4, r9, $r17, $r18;
        javax.net.ssl.SSLSession r5, r7;
        byte[] r6;
        java.lang.Object $r12;
        com.android.org.conscrypt.SSLClientSessionCache $r13, $r14;
        boolean $z0, $z1;

        r0 := @this: com.android.org.conscrypt.ClientSessionContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r1 != null goto label02;

        r5 = null;

     label01:
        return r5;

     label02:
        $r10 = new com.android.org.conscrypt.ClientSessionContext$HostAndPort;

        specialinvoke $r10.<com.android.org.conscrypt.ClientSessionContext$HostAndPort: void <init>(java.lang.String,int)>(r1, i0);

        r2 = $r10;

        r3 = r0.<com.android.org.conscrypt.ClientSessionContext: java.util.Map sessionsByHostAndPort>;

        entermonitor r3;

     label03:
        $r11 = r0.<com.android.org.conscrypt.ClientSessionContext: java.util.Map sessionsByHostAndPort>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (javax.net.ssl.SSLSession) $r12;

        exitmonitor r3;

     label04:
        if r5 == null goto label05;

        $z1 = interfaceinvoke r5.<javax.net.ssl.SSLSession: boolean isValid()>();

        if $z1 != 0 goto label01;

     label05:
        $r14 = r0.<com.android.org.conscrypt.ClientSessionContext: com.android.org.conscrypt.SSLClientSessionCache persistentCache>;

        if $r14 == null goto label14;

        $r13 = r0.<com.android.org.conscrypt.ClientSessionContext: com.android.org.conscrypt.SSLClientSessionCache persistentCache>;

        r6 = interfaceinvoke $r13.<com.android.org.conscrypt.SSLClientSessionCache: byte[] getSessionData(java.lang.String,int)>(r1, i0);

        if r6 == null goto label14;

        r7 = virtualinvoke r0.<com.android.org.conscrypt.ClientSessionContext: javax.net.ssl.SSLSession toSession(byte[],java.lang.String,int)>(r6, r1, i0);

        if r7 == null goto label14;

        $z0 = interfaceinvoke r7.<javax.net.ssl.SSLSession: boolean isValid()>();

        if $z0 == 0 goto label14;

        specialinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: void putSession(javax.net.ssl.SSLSession)>(r7);

        r8 = r0.<com.android.org.conscrypt.ClientSessionContext: java.util.Map sessionsByHostAndPort>;

        entermonitor r8;

     label06:
        $r16 = r0.<com.android.org.conscrypt.ClientSessionContext: java.util.Map sessionsByHostAndPort>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r7);

        exitmonitor r8;

     label07:
        return r7;

     label08:
        $r17 := @caughtexception;

        r9 = $r17;

     label09:
        exitmonitor r8;

     label10:
        throw r9;

     label11:
        $r18 := @caughtexception;

        r4 = $r18;

     label12:
        exitmonitor r3;

     label13:
        throw r4;

     label14:
        return null;

        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public volatile javax.net.ssl.SSLSession getSession(byte[])
    {
        com.android.org.conscrypt.ClientSessionContext r0;
        byte[] r1;
        javax.net.ssl.SSLSession $r2;

        r0 := @this: com.android.org.conscrypt.ClientSessionContext;

        r1 := @parameter0: byte[];

        $r2 = specialinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: javax.net.ssl.SSLSession getSession(byte[])>(r1);

        return $r2;
    }

    public void putSession(javax.net.ssl.SSLSession)
    {
        com.android.org.conscrypt.ClientSessionContext r0;
        javax.net.ssl.SSLSession r1;
        java.lang.String r2;
        int i0;
        com.android.org.conscrypt.ClientSessionContext$HostAndPort r3, $r7;
        java.util.Map r4, $r8;
        java.lang.Throwable r5, $r11;
        byte[] r6;
        com.android.org.conscrypt.SSLClientSessionCache $r10, $r12;

        r0 := @this: com.android.org.conscrypt.ClientSessionContext;

        r1 := @parameter0: javax.net.ssl.SSLSession;

        specialinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: void putSession(javax.net.ssl.SSLSession)>(r1);

        r2 = interfaceinvoke r1.<javax.net.ssl.SSLSession: java.lang.String getPeerHost()>();

        i0 = interfaceinvoke r1.<javax.net.ssl.SSLSession: int getPeerPort()>();

        if r2 != null goto label2;

     label1:
        return;

     label2:
        $r7 = new com.android.org.conscrypt.ClientSessionContext$HostAndPort;

        specialinvoke $r7.<com.android.org.conscrypt.ClientSessionContext$HostAndPort: void <init>(java.lang.String,int)>(r2, i0);

        r3 = $r7;

        r4 = r0.<com.android.org.conscrypt.ClientSessionContext: java.util.Map sessionsByHostAndPort>;

        entermonitor r4;

     label3:
        $r8 = r0.<com.android.org.conscrypt.ClientSessionContext: java.util.Map sessionsByHostAndPort>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r1);

        exitmonitor r4;

     label4:
        $r10 = r0.<com.android.org.conscrypt.ClientSessionContext: com.android.org.conscrypt.SSLClientSessionCache persistentCache>;

        if $r10 == null goto label1;

        r6 = virtualinvoke r0.<com.android.org.conscrypt.ClientSessionContext: byte[] toBytes(javax.net.ssl.SSLSession)>(r1);

        if r6 == null goto label1;

        $r12 = r0.<com.android.org.conscrypt.ClientSessionContext: com.android.org.conscrypt.SSLClientSessionCache persistentCache>;

        interfaceinvoke $r12.<com.android.org.conscrypt.SSLClientSessionCache: void putSessionData(javax.net.ssl.SSLSession,byte[])>(r1, r6);

        return;

     label5:
        $r11 := @caughtexception;

        r5 = $r11;

     label6:
        exitmonitor r4;

     label7:
        throw r5;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    protected void sessionRemoved(javax.net.ssl.SSLSession)
    {
        com.android.org.conscrypt.ClientSessionContext r0;
        javax.net.ssl.SSLSession r1;
        java.lang.String r2;
        int i0;
        com.android.org.conscrypt.ClientSessionContext$HostAndPort r3, $r6;
        java.util.Map r4, $r7;
        java.lang.Throwable r5, $r9;

        r0 := @this: com.android.org.conscrypt.ClientSessionContext;

        r1 := @parameter0: javax.net.ssl.SSLSession;

        r2 = interfaceinvoke r1.<javax.net.ssl.SSLSession: java.lang.String getPeerHost()>();

        i0 = interfaceinvoke r1.<javax.net.ssl.SSLSession: int getPeerPort()>();

        if r2 != null goto label1;

        return;

     label1:
        $r6 = new com.android.org.conscrypt.ClientSessionContext$HostAndPort;

        specialinvoke $r6.<com.android.org.conscrypt.ClientSessionContext$HostAndPort: void <init>(java.lang.String,int)>(r2, i0);

        r3 = $r6;

        r4 = r0.<com.android.org.conscrypt.ClientSessionContext: java.util.Map sessionsByHostAndPort>;

        entermonitor r4;

     label2:
        $r7 = r0.<com.android.org.conscrypt.ClientSessionContext: java.util.Map sessionsByHostAndPort>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        exitmonitor r4;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

        r5 = $r9;

     label5:
        exitmonitor r4;

     label6:
        throw r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setPersistentCache(com.android.org.conscrypt.SSLClientSessionCache)
    {
        com.android.org.conscrypt.ClientSessionContext r0;
        com.android.org.conscrypt.SSLClientSessionCache r1;

        r0 := @this: com.android.org.conscrypt.ClientSessionContext;

        r1 := @parameter0: com.android.org.conscrypt.SSLClientSessionCache;

        r0.<com.android.org.conscrypt.ClientSessionContext: com.android.org.conscrypt.SSLClientSessionCache persistentCache> = r1;

        return;
    }

    public volatile void setSessionTimeout(int) throws java.lang.IllegalArgumentException
    {
        com.android.org.conscrypt.ClientSessionContext r0;
        int i0;

        r0 := @this: com.android.org.conscrypt.ClientSessionContext;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.org.conscrypt.AbstractSessionContext: void setSessionTimeout(int)>(i0);

        return;
    }

    public int size()
    {
        com.android.org.conscrypt.ClientSessionContext r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: com.android.org.conscrypt.ClientSessionContext;

        $r1 = r0.<com.android.org.conscrypt.ClientSessionContext: java.util.Map sessionsByHostAndPort>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }
}
