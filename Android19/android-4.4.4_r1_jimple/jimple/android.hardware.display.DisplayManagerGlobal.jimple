public final class android.hardware.display.DisplayManagerGlobal extends java.lang.Object
{
    private static final boolean DEBUG;
    public static final int EVENT_DISPLAY_ADDED;
    public static final int EVENT_DISPLAY_CHANGED;
    public static final int EVENT_DISPLAY_REMOVED;
    private static final java.lang.String TAG;
    private static final boolean USE_CACHE;
    private static android.hardware.display.DisplayManagerGlobal sInstance;
    private android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback;
    private int[] mDisplayIdCache;
    private final android.util.SparseArray mDisplayInfoCache;
    private final java.util.ArrayList mDisplayListeners;
    private final android.hardware.display.IDisplayManager mDm;
    private final java.lang.Object mLock;
    private int mWifiDisplayScanNestCount;

    private void <init>(android.hardware.display.IDisplayManager)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager r1;
        java.lang.Object $r2;
        java.util.ArrayList $r3;
        android.util.SparseArray $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.IDisplayManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners> = $r3;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.display.DisplayManagerGlobal: android.util.SparseArray mDisplayInfoCache> = $r4;

        r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm> = r1;

        return;
    }

    static void access$100(android.hardware.display.DisplayManagerGlobal, int, int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0, i1;

        r0 := @parameter0: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void handleDisplayEvent(int,int)>(i0, i1);

        return;
    }

    private int findDisplayListenerLocked(android.hardware.display.DisplayManager$DisplayListener)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.DisplayManager$DisplayListener r1, $r6;
        int i0, i1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.DisplayManager$DisplayListener;

        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate) $r4;

        $r6 = $r5.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: android.hardware.display.DisplayManager$DisplayListener mListener>;

        if $r6 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static android.hardware.display.DisplayManagerGlobal getInstance()
    {
        java.lang.Throwable r0, $r6;
        android.hardware.display.DisplayManagerGlobal r1, $r3, $r4;
        android.os.IBinder r2;
        android.hardware.display.IDisplayManager $r5;

        entermonitor class "android/hardware/display/DisplayManagerGlobal";

     label1:
        $r3 = <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal sInstance>;

        if $r3 != null goto label4;

        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("display");

     label2:
        if r2 == null goto label4;

     label3:
        $r4 = new android.hardware.display.DisplayManagerGlobal;

        $r5 = staticinvoke <android.hardware.display.IDisplayManager$Stub: android.hardware.display.IDisplayManager asInterface(android.os.IBinder)>(r2);

        specialinvoke $r4.<android.hardware.display.DisplayManagerGlobal: void <init>(android.hardware.display.IDisplayManager)>($r5);

        <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal sInstance> = $r4;

     label4:
        r1 = <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal sInstance>;

        exitmonitor class "android/hardware/display/DisplayManagerGlobal";

     label5:
        return r1;

     label6:
        $r6 := @caughtexception;

        r0 = $r6;

     label7:
        exitmonitor class "android/hardware/display/DisplayManagerGlobal";

     label8:
        throw r0;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void handleDisplayEvent(int, int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0, i1, i2, i3;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r7;
        java.util.ArrayList $r3, $r4;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate $r6;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label02:
        i3 = 0;

     label03:
        if i3 >= i2 goto label06;

     label04:
        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r6 = (android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate) $r5;

        virtualinvoke $r6.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: void sendDisplayEvent(int,int)>(i0, i1);

     label05:
        i3 = i3 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r7 := @caughtexception;

        r2 = $r7;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void registerCallbackIfNeededLocked()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.RemoteException r1, $r6;
        android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback $r2, $r3, $r4;
        android.hardware.display.IDisplayManager $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback>;

        if $r2 != null goto label2;

        $r3 = new android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback;

        specialinvoke $r3.<android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback: void <init>(android.hardware.display.DisplayManagerGlobal,android.hardware.display.DisplayManagerGlobal$1)>(r0, null);

        r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback> = $r3;

     label1:
        $r5 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback>;

        interfaceinvoke $r5.<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>($r4);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to register callback with display manager service.", r1);

        r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback> = null;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void connectWifiDisplay(java.lang.String)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.String r1, $r10;
        android.os.RemoteException r2, $r5;
        android.hardware.display.IDisplayManager $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("deviceAddress must not be null");

        throw $r4;

     label1:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r3.<android.hardware.display.IDisplayManager: void connectWifiDisplay(java.lang.String)>(r1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to connect to Wifi display ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", $r10, r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.display.VirtualDisplay createVirtualDisplay(android.content.Context, java.lang.String, int, int, int, android.view.Surface, int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.content.Context r1;
        java.lang.String r2, $r10, $r15, $r19, $r27;
        int i0, i1, i2, i3, i4;
        android.view.Surface r3;
        android.os.Binder r4, $r8;
        android.os.RemoteException r5, $r22, $r29;
        android.view.Display r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r9, $r24, $r25;
        android.hardware.display.IDisplayManager $r11, $r17;
        java.lang.StringBuilder $r12, $r14, $r16, $r18, $r20, $r21, $r23, $r26, $r28;
        android.hardware.display.VirtualDisplay $r13;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.view.Surface;

        i3 := @parameter6: int;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label01;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must be non-null and non-empty");

        throw $r25;

     label01:
        if i0 <= 0 goto label02;

        if i1 <= 0 goto label02;

        if i2 > 0 goto label03;

     label02:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width, height, and densityDpi must be greater than 0");

        throw $r9;

     label03:
        if r3 != null goto label04;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("surface must not be null");

        throw $r24;

     label04:
        $r8 = new android.os.Binder;

        specialinvoke $r8.<android.os.Binder: void <init>()>();

        r4 = $r8;

     label05:
        $r11 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        $r10 = virtualinvoke r1.<android.content.Context: java.lang.String getPackageName()>();

        i4 = interfaceinvoke $r11.<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.os.IBinder,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)>(r4, $r10, r2, i0, i1, i2, r3, i3);

     label06:
        if i4 >= 0 goto label08;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create virtual display: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DisplayManager", $r19);

        return null;

     label07:
        $r22 := @caughtexception;

        r5 = $r22;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create virtual display: ");

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", $r27, r5);

        return null;

     label08:
        r6 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(i4);

        if r6 != null goto label11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not obtain display info for newly created virtual display: ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("DisplayManager", $r15);

     label09:
        $r17 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r17.<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.os.IBinder)>(r4);

     label10:
        return null;

     label11:
        $r13 = new android.hardware.display.VirtualDisplay;

        specialinvoke $r13.<android.hardware.display.VirtualDisplay: void <init>(android.hardware.display.DisplayManagerGlobal,android.view.Display,android.os.IBinder)>(r0, r6, r4);

        return $r13;

     label12:
        $r29 := @caughtexception;

        goto label10;

        catch android.os.RemoteException from label05 to label06 with label07;
        catch android.os.RemoteException from label09 to label10 with label12;
    }

    public void disconnectWifiDisplay()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.RemoteException r1, $r3;
        android.hardware.display.IDisplayManager $r2;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void disconnectWifiDisplay()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to disconnect from Wifi display.", r1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forgetWifiDisplay(java.lang.String)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r5;
        android.hardware.display.IDisplayManager $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("deviceAddress must not be null");

        throw $r4;

     label1:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r3.<android.hardware.display.IDisplayManager: void forgetWifiDisplay(java.lang.String)>(r1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to forget Wifi display.", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.view.Display getCompatibleDisplay(int, android.view.DisplayAdjustments)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.view.DisplayAdjustments r1;
        android.view.DisplayInfo r2;
        android.view.Display $r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.DisplayAdjustments;

        r2 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)>(i0);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = new android.view.Display;

        specialinvoke $r3.<android.view.Display: void <init>(android.hardware.display.DisplayManagerGlobal,int,android.view.DisplayInfo,android.view.DisplayAdjustments)>(r0, i0, r2, r1);

        return $r3;
    }

    public int[] getDisplayIds()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.RemoteException r1, $r7;
        java.lang.Object r2;
        java.lang.Throwable r3, $r6;
        int[] r4, $r8;
        android.hardware.display.IDisplayManager $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        r2 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        $r5 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r4 = interfaceinvoke $r5.<android.hardware.display.IDisplayManager: int[] getDisplayIds()>();

        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

        exitmonitor r2;

     label3:
        return r4;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        $r7 := @caughtexception;

        r1 = $r7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Could not get display ids from display manager.", r1);

        $r8 = newarray (int)[1];

        $r8[0] = 0;

        return $r8;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch android.os.RemoteException from label6 to label7 with label7;
    }

    public android.view.DisplayInfo getDisplayInfo(int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.os.RemoteException r1, $r6;
        java.lang.Object r2;
        java.lang.Throwable r3, $r7;
        android.view.DisplayInfo r4;
        android.hardware.display.IDisplayManager $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

     label01:
        r2 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        $r5 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r4 = interfaceinvoke $r5.<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>(i0);

     label03:
        if r4 != null goto label06;

     label04:
        exitmonitor r2;

     label05:
        return null;

     label06:
        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

        exitmonitor r2;

     label07:
        return r4;

     label08:
        $r7 := @caughtexception;

        r3 = $r7;

     label09:
        exitmonitor r2;

     label10:
        throw r3;

     label11:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Could not get display information from display manager.", r1);

        return null;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch android.os.RemoteException from label10 to label11 with label11;
    }

    public android.view.Display getRealDisplay(int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.view.DisplayAdjustments $r1;
        android.view.Display $r2;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        $r1 = <android.view.DisplayAdjustments: android.view.DisplayAdjustments DEFAULT_DISPLAY_ADJUSTMENTS>;

        $r2 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.view.DisplayAdjustments)>(i0, $r1);

        return $r2;
    }

    public android.view.Display getRealDisplay(int, android.os.IBinder)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.os.IBinder r1;
        android.view.DisplayAdjustments $r2;
        android.view.Display $r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        $r2 = new android.view.DisplayAdjustments;

        specialinvoke $r2.<android.view.DisplayAdjustments: void <init>(android.os.IBinder)>(r1);

        $r3 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.view.DisplayAdjustments)>(i0, $r2);

        return $r3;
    }

    public android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.RemoteException r1, $r4;
        android.hardware.display.WifiDisplayStatus r2, $r5;
        android.hardware.display.IDisplayManager $r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r2 = interfaceinvoke $r3.<android.hardware.display.IDisplayManager: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to get Wifi display status.", r1);

        $r5 = new android.hardware.display.WifiDisplayStatus;

        specialinvoke $r5.<android.hardware.display.WifiDisplayStatus: void <init>()>();

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void pauseWifiDisplay()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.RemoteException r1, $r3;
        android.hardware.display.IDisplayManager $r2;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void pauseWifiDisplay()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to pause Wifi display.", r1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener, android.os.Handler)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.DisplayManager$DisplayListener r1;
        android.os.Handler r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r8;
        int $i0;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate $r5;
        java.util.ArrayList $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.DisplayManager$DisplayListener;

        r2 := @parameter1: android.os.Handler;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r7;

     label1:
        r3 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r3;

     label2:
        $i0 = specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: int findDisplayListenerLocked(android.hardware.display.DisplayManager$DisplayListener)>(r1);

        if $i0 >= 0 goto label3;

        $r6 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        $r5 = new android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate;

        specialinvoke $r5.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: void <init>(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>(r1, r2);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

     label3:
        exitmonitor r3;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

        r4 = $r8;

     label6:
        exitmonitor r3;

     label7:
        throw r4;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void releaseVirtualDisplay(android.os.IBinder)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.IBinder r1;
        android.os.RemoteException r2, $r4;
        android.hardware.display.IDisplayManager $r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.os.IBinder;

     label1:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r3.<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.os.IBinder)>(r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to release virtual display.", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void renameWifiDisplay(java.lang.String, java.lang.String)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.String r1, r2, $r13;
        android.os.RemoteException r3, $r6;
        android.hardware.display.IDisplayManager $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("deviceAddress must not be null");

        throw $r5;

     label1:
        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r4.<android.hardware.display.IDisplayManager: void renameWifiDisplay(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename Wifi display ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with alias ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", $r13, r3);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resumeWifiDisplay()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.RemoteException r1, $r3;
        android.hardware.display.IDisplayManager $r2;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void resumeWifiDisplay()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to resume Wifi display.", r1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startWifiDisplayScan()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r6;
        int i0, $i1;
        android.os.RemoteException r3, $r5;
        android.hardware.display.IDisplayManager $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        i0 = r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount>;

        $i1 = i0 + 1;

        r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount> = $i1;

     label02:
        if i0 != 0 goto label05;

     label03:
        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

     label04:
        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r4.<android.hardware.display.IDisplayManager: void startWifiDisplayScan()>();

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r5 := @caughtexception;

        r3 = $r5;

     label08:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to scan for Wifi displays.", r3);

     label09:
        goto label05;

     label10:
        $r6 := @caughtexception;

        r2 = $r6;

     label11:
        exitmonitor r1;

     label12:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void stopWifiDisplayScan()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r10;
        int i0, $i1, $i2, $i3;
        android.os.RemoteException r3, $r9;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        android.hardware.display.IDisplayManager $r8;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount>;

        i0 = -1 + $i1;

        r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount> = i0;

     label02:
        if i0 != 0 goto label12;

     label03:
        $r8 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r8.<android.hardware.display.IDisplayManager: void stopWifiDisplayScan()>();

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $r9 := @caughtexception;

        r3 = $r9;

     label07:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to scan for Wifi displays.", r3);

     label08:
        goto label04;

     label09:
        $r10 := @caughtexception;

        r2 = $r10;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

     label12:
        $i2 = r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount>;

        if $i2 >= 0 goto label04;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wifi display scan nest count became negative: ");

        $i3 = r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("DisplayManager", $r7);

        r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount> = 0;

     label13:
        goto label04;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }

    public void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.DisplayManager$DisplayListener r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r10;
        int i0;
        java.util.ArrayList $r4, $r7;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate $r6;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.DisplayManager$DisplayListener;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r9;

     label1:
        r2 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        i0 = specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: int findDisplayListenerLocked(android.hardware.display.DisplayManager$DisplayListener)>(r1);

     label3:
        if i0 < 0 goto label5;

     label4:
        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r6 = (android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate) $r5;

        virtualinvoke $r6.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: void clearEvents()>();

        $r7 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        virtualinvoke $r7.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

     label5:
        exitmonitor r2;

     label6:
        return;

     label7:
        $r10 := @caughtexception;

        r3 = $r10;

     label8:
        exitmonitor r2;

     label9:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public static void <clinit>()
    {
        <android.hardware.display.DisplayManagerGlobal: java.lang.String TAG> = "DisplayManager";

        <android.hardware.display.DisplayManagerGlobal: int EVENT_DISPLAY_REMOVED> = 3;

        <android.hardware.display.DisplayManagerGlobal: int EVENT_DISPLAY_CHANGED> = 2;

        <android.hardware.display.DisplayManagerGlobal: int EVENT_DISPLAY_ADDED> = 1;

        <android.hardware.display.DisplayManagerGlobal: boolean DEBUG> = 0;

        return;
    }
}
