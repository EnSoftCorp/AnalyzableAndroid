class com.android.server.wm.ViewServer extends java.lang.Object implements java.lang.Runnable
{
    private static final java.lang.String COMMAND_PROTOCOL_VERSION;
    private static final java.lang.String COMMAND_SERVER_VERSION;
    private static final java.lang.String COMMAND_WINDOW_MANAGER_AUTOLIST;
    private static final java.lang.String COMMAND_WINDOW_MANAGER_GET_FOCUS;
    private static final java.lang.String COMMAND_WINDOW_MANAGER_LIST;
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String VALUE_PROTOCOL_VERSION;
    private static final java.lang.String VALUE_SERVER_VERSION;
    public static final int VIEW_SERVER_DEFAULT_PORT;
    private static final int VIEW_SERVER_MAX_CONNECTIONS;
    private final int mPort;
    private java.net.ServerSocket mServer;
    private java.lang.Thread mThread;
    private java.util.concurrent.ExecutorService mThreadPool;
    private final com.android.server.wm.WindowManagerService mWindowManager;

    void <init>(com.android.server.wm.WindowManagerService, int)
    {
        com.android.server.wm.ViewServer r0;
        com.android.server.wm.WindowManagerService r1;
        int i0;

        r0 := @this: com.android.server.wm.ViewServer;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.ViewServer: com.android.server.wm.WindowManagerService mWindowManager> = r1;

        r0.<com.android.server.wm.ViewServer: int mPort> = i0;

        return;
    }

    static boolean access$000(java.net.Socket, java.lang.String)
    {
        java.net.Socket r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: java.net.Socket;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.android.server.wm.ViewServer: boolean writeValue(java.net.Socket,java.lang.String)>(r0, r1);

        return $z0;
    }

    static com.android.server.wm.WindowManagerService access$100(com.android.server.wm.ViewServer)
    {
        com.android.server.wm.ViewServer r0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @parameter0: com.android.server.wm.ViewServer;

        $r1 = r0.<com.android.server.wm.ViewServer: com.android.server.wm.WindowManagerService mWindowManager>;

        return $r1;
    }

    private static boolean writeValue(java.net.Socket, java.lang.String)
    {
        java.net.Socket r0;
        java.lang.String r1;
        java.io.BufferedWriter r2, r3, $r10;
        boolean z0;
        java.lang.Throwable r6, $r13, $r14;
        java.io.OutputStreamWriter $r11;
        java.io.OutputStream $r12;
        java.io.IOException $r15, $r16, $r19;
        java.lang.Exception $r17, $r18;

        r0 := @parameter0: java.net.Socket;

        r1 := @parameter1: java.lang.String;

        r2 = null;

     label01:
        $r10 = new java.io.BufferedWriter;

        $r11 = new java.io.OutputStreamWriter;

        $r12 = virtualinvoke r0.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r11.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r12);

        specialinvoke $r10.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r11, 8192);

        r3 = $r10;

     label02:
        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>("\n");

        virtualinvoke r3.<java.io.BufferedWriter: void flush()>();

     label03:
        z0 = 1;

        if r3 == null goto label19;

     label04:
        virtualinvoke r3.<java.io.BufferedWriter: void close()>();

     label05:
        return z0;

     label06:
        $r16 := @caughtexception;

        return 0;

     label07:
        $r18 := @caughtexception;

     label08:
        z0 = 0;

        if r2 == null goto label05;

     label09:
        virtualinvoke r2.<java.io.BufferedWriter: void close()>();

     label10:
        return 0;

     label11:
        $r19 := @caughtexception;

        return 0;

     label12:
        $r13 := @caughtexception;

        r6 = $r13;

     label13:
        if r2 == null goto label15;

     label14:
        virtualinvoke r2.<java.io.BufferedWriter: void close()>();

     label15:
        throw r6;

     label16:
        $r15 := @caughtexception;

        goto label15;

     label17:
        $r14 := @caughtexception;

        r6 = $r14;

        r2 = r3;

        goto label13;

     label18:
        $r17 := @caughtexception;

        r2 = r3;

        goto label08;

     label19:
        return 1;

        catch java.lang.Exception from label01 to label02 with label07;
        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Exception from label02 to label03 with label18;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label14 to label15 with label16;
    }

    boolean isRunning()
    {
        com.android.server.wm.ViewServer r0;
        java.lang.Thread $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ViewServer;

        $r1 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        $z0 = virtualinvoke $r2.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void run()
    {
        com.android.server.wm.ViewServer r0;
        java.lang.Exception r1, $r11;
        java.net.Socket r2;
        java.io.IOException r3, $r12;
        java.lang.Thread $r4, $r5;
        java.net.ServerSocket $r6;
        java.util.concurrent.ExecutorService $r7, $r9;
        com.android.server.wm.ViewServer$ViewServerWorker $r8;

        r0 := @this: com.android.server.wm.ViewServer;

     label01:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        if $r4 != $r5 goto label10;

     label02:
        $r6 = r0.<com.android.server.wm.ViewServer: java.net.ServerSocket mServer>;

        r2 = virtualinvoke $r6.<java.net.ServerSocket: java.net.Socket accept()>();

        $r7 = r0.<com.android.server.wm.ViewServer: java.util.concurrent.ExecutorService mThreadPool>;

        if $r7 == null goto label05;

        $r9 = r0.<com.android.server.wm.ViewServer: java.util.concurrent.ExecutorService mThreadPool>;

        $r8 = new com.android.server.wm.ViewServer$ViewServerWorker;

        specialinvoke $r8.<com.android.server.wm.ViewServer$ViewServerWorker: void <init>(com.android.server.wm.ViewServer,java.net.Socket)>(r0, r2);

        interfaceinvoke $r9.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r8);

     label03:
        goto label01;

     label04:
        $r11 := @caughtexception;

        r1 = $r11;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewServer", "Connection error: ", r1);

        goto label01;

     label05:
        virtualinvoke r2.<java.net.Socket: void close()>();

     label06:
        goto label01;

     label07:
        $r12 := @caughtexception;

        r3 = $r12;

     label08:
        virtualinvoke r3.<java.io.IOException: void printStackTrace()>();

     label09:
        goto label01;

     label10:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Exception from label05 to label06 with label04;
        catch java.lang.Exception from label08 to label09 with label04;
    }

    boolean start() throws java.io.IOException
    {
        com.android.server.wm.ViewServer r0;
        java.lang.Thread $r1, $r4, $r11;
        java.net.ServerSocket $r2;
        int $i0, $i1;
        java.net.InetAddress $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        java.util.concurrent.ExecutorService $r10;

        r0 := @this: com.android.server.wm.ViewServer;

        $r1 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        if $r1 == null goto label1;

        return 0;

     label1:
        $r2 = new java.net.ServerSocket;

        $i0 = r0.<com.android.server.wm.ViewServer: int mPort>;

        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();

        specialinvoke $r2.<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>($i0, 10, $r3);

        r0.<com.android.server.wm.ViewServer: java.net.ServerSocket mServer> = $r2;

        $r4 = new java.lang.Thread;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote View Server [port=");

        $i1 = r0.<com.android.server.wm.ViewServer: int mPort>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r0, $r9);

        r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread> = $r4;

        $r10 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(10);

        r0.<com.android.server.wm.ViewServer: java.util.concurrent.ExecutorService mThreadPool> = $r10;

        $r11 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        virtualinvoke $r11.<java.lang.Thread: void start()>();

        return 1;
    }

    boolean stop()
    {
        com.android.server.wm.ViewServer r0;
        java.lang.Thread $r3, $r4;
        java.util.concurrent.ExecutorService $r5, $r7;
        java.net.ServerSocket $r6;
        java.io.IOException $r9;
        java.lang.SecurityException $r10;

        r0 := @this: com.android.server.wm.ViewServer;

        $r3 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        if $r3 == null goto label7;

        $r4 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

        $r5 = r0.<com.android.server.wm.ViewServer: java.util.concurrent.ExecutorService mThreadPool>;

        if $r5 == null goto label2;

     label1:
        $r7 = r0.<com.android.server.wm.ViewServer: java.util.concurrent.ExecutorService mThreadPool>;

        interfaceinvoke $r7.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label2:
        r0.<com.android.server.wm.ViewServer: java.util.concurrent.ExecutorService mThreadPool> = null;

        r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread> = null;

     label3:
        $r6 = r0.<com.android.server.wm.ViewServer: java.net.ServerSocket mServer>;

        virtualinvoke $r6.<java.net.ServerSocket: void close()>();

        r0.<com.android.server.wm.ViewServer: java.net.ServerSocket mServer> = null;

     label4:
        return 1;

     label5:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ViewServer", "Could not stop all view server threads");

        goto label2;

     label6:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ViewServer", "Could not close the view server");

     label7:
        return 0;

        catch java.lang.SecurityException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label6;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.ViewServer: int VIEW_SERVER_MAX_CONNECTIONS> = 10;

        <com.android.server.wm.ViewServer: int VIEW_SERVER_DEFAULT_PORT> = 4939;

        <com.android.server.wm.ViewServer: java.lang.String VALUE_SERVER_VERSION> = "4";

        <com.android.server.wm.ViewServer: java.lang.String VALUE_PROTOCOL_VERSION> = "4";

        <com.android.server.wm.ViewServer: java.lang.String LOG_TAG> = "ViewServer";

        <com.android.server.wm.ViewServer: java.lang.String COMMAND_WINDOW_MANAGER_LIST> = "LIST";

        <com.android.server.wm.ViewServer: java.lang.String COMMAND_WINDOW_MANAGER_GET_FOCUS> = "GET_FOCUS";

        <com.android.server.wm.ViewServer: java.lang.String COMMAND_WINDOW_MANAGER_AUTOLIST> = "AUTOLIST";

        <com.android.server.wm.ViewServer: java.lang.String COMMAND_SERVER_VERSION> = "SERVER";

        <com.android.server.wm.ViewServer: java.lang.String COMMAND_PROTOCOL_VERSION> = "PROTOCOL";

        return;
    }
}
