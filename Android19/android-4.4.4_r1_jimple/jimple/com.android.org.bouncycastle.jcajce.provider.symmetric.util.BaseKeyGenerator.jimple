public class com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator extends javax.crypto.KeyGeneratorSpi
{
    protected java.lang.String algName;
    protected int defaultKeySize;
    protected com.android.org.bouncycastle.crypto.CipherKeyGenerator engine;
    protected int keySize;
    protected boolean uninitialised;

    protected void <init>(java.lang.String, int, com.android.org.bouncycastle.crypto.CipherKeyGenerator)
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator r0;
        java.lang.String r1;
        int i0;
        com.android.org.bouncycastle.crypto.CipherKeyGenerator r2;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.org.bouncycastle.crypto.CipherKeyGenerator;

        specialinvoke r0.<javax.crypto.KeyGeneratorSpi: void <init>()>();

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: boolean uninitialised> = 1;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: java.lang.String algName> = r1;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: int defaultKeySize> = i0;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: int keySize> = i0;

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: com.android.org.bouncycastle.crypto.CipherKeyGenerator engine> = r2;

        return;
    }

    protected javax.crypto.SecretKey engineGenerateKey()
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator r0;
        boolean $z0;
        javax.crypto.spec.SecretKeySpec $r1;
        com.android.org.bouncycastle.crypto.CipherKeyGenerator $r2, $r7;
        byte[] $r3;
        java.lang.String $r4;
        com.android.org.bouncycastle.crypto.KeyGenerationParameters $r5;
        java.security.SecureRandom $r6;
        int $i0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator;

        $z0 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: boolean uninitialised>;

        if $z0 == 0 goto label1;

        $r7 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: com.android.org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r5 = new com.android.org.bouncycastle.crypto.KeyGenerationParameters;

        $r6 = new java.security.SecureRandom;

        specialinvoke $r6.<java.security.SecureRandom: void <init>()>();

        $i0 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: int defaultKeySize>;

        specialinvoke $r5.<com.android.org.bouncycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r6, $i0);

        virtualinvoke $r7.<com.android.org.bouncycastle.crypto.CipherKeyGenerator: void init(com.android.org.bouncycastle.crypto.KeyGenerationParameters)>($r5);

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: boolean uninitialised> = 0;

     label1:
        $r1 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: com.android.org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r3 = virtualinvoke $r2.<com.android.org.bouncycastle.crypto.CipherKeyGenerator: byte[] generateKey()>();

        $r4 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: java.lang.String algName>;

        specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r4);

        return $r1;
    }

    protected void engineInit(int, java.security.SecureRandom)
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator r0;
        int i0;
        java.security.SecureRandom r1, $r5;
        java.lang.IllegalArgumentException r2, $r6;
        com.android.org.bouncycastle.crypto.KeyGenerationParameters $r3;
        com.android.org.bouncycastle.crypto.CipherKeyGenerator $r4;
        java.security.InvalidParameterException $r7;
        java.lang.String $r8;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.SecureRandom;

        if r1 != null goto label2;

     label1:
        $r5 = new java.security.SecureRandom;

        specialinvoke $r5.<java.security.SecureRandom: void <init>()>();

        r1 = $r5;

     label2:
        $r4 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: com.android.org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r3 = new com.android.org.bouncycastle.crypto.KeyGenerationParameters;

        specialinvoke $r3.<com.android.org.bouncycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>(r1, i0);

        virtualinvoke $r4.<com.android.org.bouncycastle.crypto.CipherKeyGenerator: void init(com.android.org.bouncycastle.crypto.KeyGenerationParameters)>($r3);

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: boolean uninitialised> = 0;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.security.InvalidParameterException;

        $r8 = virtualinvoke r2.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        specialinvoke $r7.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    protected void engineInit(java.security.SecureRandom)
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator r0;
        java.security.SecureRandom r1;
        com.android.org.bouncycastle.crypto.KeyGenerationParameters $r2;
        int $i0;
        com.android.org.bouncycastle.crypto.CipherKeyGenerator $r3;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator;

        r1 := @parameter0: java.security.SecureRandom;

        if r1 == null goto label1;

        $r3 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: com.android.org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r2 = new com.android.org.bouncycastle.crypto.KeyGenerationParameters;

        $i0 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: int defaultKeySize>;

        specialinvoke $r2.<com.android.org.bouncycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>(r1, $i0);

        virtualinvoke $r3.<com.android.org.bouncycastle.crypto.CipherKeyGenerator: void init(com.android.org.bouncycastle.crypto.KeyGenerationParameters)>($r2);

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: boolean uninitialised> = 0;

     label1:
        return;
    }

    protected void engineInit(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator r0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.security.SecureRandom r2;
        java.security.InvalidAlgorithmParameterException $r3;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        r2 := @parameter1: java.security.SecureRandom;

        $r3 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r3.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Not Implemented");

        throw $r3;
    }
}
