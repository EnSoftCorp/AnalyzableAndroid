class java.util.Collections$CheckedMap$CheckedEntrySet extends java.lang.Object implements java.util.Set
{
    final java.util.Set s;
    final java.lang.Class valueType;

    public void <init>(java.util.Set, java.lang.Class)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Set r1;
        java.lang.Class r2;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s> = r1;

        r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.lang.Class valueType> = r2;

        return;
    }

    public volatile boolean add(java.lang.Object)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.lang.Object r1;
        java.util.Map$Entry $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Map$Entry) r1;

        $z0 = virtualinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet: boolean add(java.util.Map$Entry)>($r2);

        return $z0;
    }

    public boolean add(java.util.Map$Entry)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Map$Entry r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        r1 := @parameter0: java.util.Map$Entry;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void clear()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Set $r1;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.lang.Object r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Collection r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.lang.Object r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntryIterator $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        java.lang.Class $r4;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        $r1 = new java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntryIterator;

        $r2 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.lang.Class valueType>;

        specialinvoke $r1.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntryIterator: void <init>(java.util.Iterator,java.lang.Class)>($r3, $r4);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.lang.Object r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Collection r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Collection r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public int size()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        int i0, i1;
        java.lang.Object[] r1;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        i0 = virtualinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet: int size()>();

        r1 = newarray (java.lang.Object)[i0];

        r2 = virtualinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Iterator iterator()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.lang.Object[] r1, $r7;
        int i0, i1, $i2, $i3;
        java.util.Iterator r2;
        java.lang.Object $r3, $r6;
        java.lang.Class $r4, $r5;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;

        r1 := @parameter0: java.lang.Object[];

        i0 = virtualinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet: int size()>();

        $i2 = lengthof r1;

        if $i2 >= i0 goto label1;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r5, i0);

        $r7 = (java.lang.Object[]) $r6;

        r1 = (java.lang.Object[]) $r7;

     label1:
        r2 = virtualinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Iterator iterator()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1[i1] = $r3;

        i1 = i1 + 1;

        goto label2;

     label3:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label4;

        r1[i0] = null;

     label4:
        return r1;
    }
}
