class org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser extends org.apache.xml.dtm.DTMAxisTraverser
{
    final org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0;

    private void <init>(org.apache.xml.dtm.ref.DTMDefaultBaseTraversers)
    {
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser r0;
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser;

        r1 := @parameter0: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0> = r1;

        specialinvoke r0.<org.apache.xml.dtm.DTMAxisTraverser: void <init>()>();

        return;
    }

    void <init>(org.apache.xml.dtm.ref.DTMDefaultBaseTraversers, org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$1)
    {
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser r0;
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers r1;
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$1 r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser;

        r1 := @parameter0: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers;

        r2 := @parameter1: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$1;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: void <init>(org.apache.xml.dtm.ref.DTMDefaultBaseTraversers)>(r1);

        return;
    }

    public int first(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser r0;
        int i0, $i1;
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $i1 = virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: int getFirstChild(int)>(i0);

        return $i1;
    }

    public int first(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser r0;
        int i0, i1, i2, i3, $i4, $i5;
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers $r1, $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        i2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: int makeNodeIdentity(int)>(i0);

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $i4 = virtualinvoke $r2.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: int _firstch(int)>(i2);

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: int getNextIndexed(int,int,int)>(i2, $i4, i1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $i5 = virtualinvoke $r3.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: int makeNodeHandle(int)>(i3);

        return $i5;
    }

    protected int getNextIndexed(int, int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7;
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers $r1, $r3, $r5, $r6, $r7, $r10, $r11;
        org.apache.xml.dtm.ref.ExpandedNameTable $r2, $r4;
        org.apache.xml.utils.SuballocatedIntVector $r8, $r9, $r12;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $r2 = $r1.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        i3 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ExpandedNameTable: int getNamespaceID(int)>(i2);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $r4 = $r3.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        i4 = virtualinvoke $r4.<org.apache.xml.dtm.ref.ExpandedNameTable: int getLocalNameID(int)>(i2);

     label1:
        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        i5 = virtualinvoke $r5.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: int findElementFromIndex(int,int,int)>(i3, i4, i1);

        if -2 == i5 goto label5;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $r9 = $r10.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        i6 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i5);

        if i6 != i0 goto label2;

        return i5;

     label2:
        if i6 >= i0 goto label3;

        return -1;

     label3:
        $r11 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $r12 = $r11.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        i6 = virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i6);

        if i6 >= i0 goto label4;

        return -1;

     label4:
        if i6 > i0 goto label3;

        i1 = i5 + 1;

        goto label1;

     label5:
        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        virtualinvoke $r6.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: boolean nextNode()>();

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $r8 = $r7.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i7 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if $i7 == -2 goto label1;

        return -1;
    }

    public int next(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser r0;
        int i0, i1, $i2;
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $i2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: int getNextSibling(int)>(i1);

        return $i2;
    }

    public int next(int, int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser r0;
        int i0, i1, i2, i3, i4, $i5, $i6;
        org.apache.xml.dtm.ref.DTMDefaultBaseTraversers $r1, $r2, $r3, $r5, $r6;
        org.apache.xml.utils.SuballocatedIntVector $r4;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = -1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $i5 = virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: int makeNodeIdentity(int)>(i1);

        i4 = virtualinvoke $r2.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: int _nextsib(int)>($i5);

     label1:
        if -1 == i4 goto label2;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        $r4 = $r3.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $i6 = virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i4);

        if $i6 != i2 goto label3;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        i3 = virtualinvoke $r6.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: int makeNodeHandle(int)>(i4);

     label2:
        return i3;

     label3:
        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$ChildTraverser: org.apache.xml.dtm.ref.DTMDefaultBaseTraversers this$0>;

        i4 = virtualinvoke $r5.<org.apache.xml.dtm.ref.DTMDefaultBaseTraversers: int _nextsib(int)>(i4);

        goto label1;
    }
}
