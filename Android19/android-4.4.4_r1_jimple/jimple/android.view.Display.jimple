public final class android.view.Display extends java.lang.Object
{
    private static final int CACHED_APP_SIZE_DURATION_MILLIS;
    private static final boolean DEBUG;
    public static final int DEFAULT_DISPLAY;
    public static final int FLAG_PRESENTATION;
    public static final int FLAG_PRIVATE;
    public static final int FLAG_SECURE;
    public static final int FLAG_SUPPORTS_PROTECTED_BUFFERS;
    private static final java.lang.String TAG;
    public static final int TYPE_BUILT_IN;
    public static final int TYPE_HDMI;
    public static final int TYPE_OVERLAY;
    public static final int TYPE_UNKNOWN;
    public static final int TYPE_VIRTUAL;
    public static final int TYPE_WIFI;
    private final java.lang.String mAddress;
    private int mCachedAppHeightCompat;
    private int mCachedAppWidthCompat;
    private final android.view.DisplayAdjustments mDisplayAdjustments;
    private final int mDisplayId;
    private android.view.DisplayInfo mDisplayInfo;
    private final int mFlags;
    private final android.hardware.display.DisplayManagerGlobal mGlobal;
    private boolean mIsValid;
    private long mLastCachedAppSizeUpdate;
    private final int mLayerStack;
    private final java.lang.String mOwnerPackageName;
    private final int mOwnerUid;
    private final android.util.DisplayMetrics mTempMetrics;
    private final int mType;

    public void <init>(android.hardware.display.DisplayManagerGlobal, int, android.view.DisplayInfo, android.view.DisplayAdjustments)
    {
        android.view.Display r0;
        android.hardware.display.DisplayManagerGlobal r1;
        int i0, $i1, $i2, $i3, $i4;
        android.view.DisplayInfo r2;
        android.view.DisplayAdjustments r3, $r5;
        android.util.DisplayMetrics $r4;
        java.lang.String $r6, $r7;

        r0 := @this: android.view.Display;

        r1 := @parameter0: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.DisplayInfo;

        r3 := @parameter3: android.view.DisplayAdjustments;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.util.DisplayMetrics;

        specialinvoke $r4.<android.util.DisplayMetrics: void <init>()>();

        r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics> = $r4;

        r0.<android.view.Display: android.hardware.display.DisplayManagerGlobal mGlobal> = r1;

        r0.<android.view.Display: int mDisplayId> = i0;

        r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo> = r2;

        $r5 = new android.view.DisplayAdjustments;

        specialinvoke $r5.<android.view.DisplayAdjustments: void <init>(android.view.DisplayAdjustments)>(r3);

        r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments> = $r5;

        r0.<android.view.Display: boolean mIsValid> = 1;

        $i1 = r2.<android.view.DisplayInfo: int layerStack>;

        r0.<android.view.Display: int mLayerStack> = $i1;

        $i2 = r2.<android.view.DisplayInfo: int flags>;

        r0.<android.view.Display: int mFlags> = $i2;

        $i3 = r2.<android.view.DisplayInfo: int type>;

        r0.<android.view.Display: int mType> = $i3;

        $r6 = r2.<android.view.DisplayInfo: java.lang.String address>;

        r0.<android.view.Display: java.lang.String mAddress> = $r6;

        $i4 = r2.<android.view.DisplayInfo: int ownerUid>;

        r0.<android.view.Display: int mOwnerUid> = $i4;

        $r7 = r2.<android.view.DisplayInfo: java.lang.String ownerPackageName>;

        r0.<android.view.Display: java.lang.String mOwnerPackageName> = $r7;

        return;
    }

    public static boolean hasAccess(int, int, int)
    {
        int i0, i1, i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i1 & 4;

        if $i3 == 0 goto label1;

        if i0 == i2 goto label1;

        if i0 == 1000 goto label1;

        if i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static java.lang.String typeToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            default: goto label1;
        };

     label1:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label2:
        return "UNKNOWN";

     label3:
        return "BUILT_IN";

     label4:
        return "HDMI";

     label5:
        return "WIFI";

     label6:
        return "OVERLAY";

     label7:
        return "VIRTUAL";
    }

    private void updateCachedAppSizeIfNeededLocked()
    {
        android.view.Display r0;
        long l0, $l1, $l2;
        byte $b3;
        android.view.DisplayAdjustments $r1;
        android.util.DisplayMetrics $r2, $r4, $r5;
        android.view.DisplayInfo $r3;
        int $i4, $i5;

        r0 := @this: android.view.Display;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<android.view.Display: long mLastCachedAppSizeUpdate>;

        $l2 = 20L + $l1;

        $b3 = l0 cmp $l2;

        if $b3 <= 0 goto label1;

        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r3 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r2 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $r1 = r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments>;

        virtualinvoke $r3.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics,android.view.DisplayAdjustments)>($r2, $r1);

        $r4 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i4 = $r4.<android.util.DisplayMetrics: int widthPixels>;

        r0.<android.view.Display: int mCachedAppWidthCompat> = $i4;

        $r5 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i5 = $r5.<android.util.DisplayMetrics: int heightPixels>;

        r0.<android.view.Display: int mCachedAppHeightCompat> = $i5;

        r0.<android.view.Display: long mLastCachedAppSizeUpdate> = l0;

     label1:
        return;
    }

    private void updateDisplayInfoLocked()
    {
        android.view.Display r0;
        android.view.DisplayInfo r1;
        int $i0;
        android.hardware.display.DisplayManagerGlobal $r2;
        boolean $z0, $z1;

        r0 := @this: android.view.Display;

        $r2 = r0.<android.view.Display: android.hardware.display.DisplayManagerGlobal mGlobal>;

        $i0 = r0.<android.view.Display: int mDisplayId>;

        r1 = virtualinvoke $r2.<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)>($i0);

        if r1 != null goto label2;

        $z1 = r0.<android.view.Display: boolean mIsValid>;

        if $z1 == 0 goto label1;

        r0.<android.view.Display: boolean mIsValid> = 0;

     label1:
        return;

     label2:
        r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo> = r1;

        $z0 = r0.<android.view.Display: boolean mIsValid>;

        if $z0 != 0 goto label1;

        r0.<android.view.Display: boolean mIsValid> = 1;

        return;
    }

    public java.lang.String getAddress()
    {
        android.view.Display r0;
        java.lang.String $r1;

        r0 := @this: android.view.Display;

        $r1 = r0.<android.view.Display: java.lang.String mAddress>;

        return $r1;
    }

    public void getCurrentSizeRange(android.graphics.Point, android.graphics.Point)
    {
        android.view.Display r0;
        android.graphics.Point r1, r2;
        java.lang.Throwable r3, $r8;
        android.view.DisplayInfo $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.Display;

        r1 := @parameter0: android.graphics.Point;

        r2 := @parameter1: android.graphics.Point;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r4 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i0 = $r4.<android.view.DisplayInfo: int smallestNominalAppWidth>;

        r1.<android.graphics.Point: int x> = $i0;

        $r5 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i1 = $r5.<android.view.DisplayInfo: int smallestNominalAppHeight>;

        r1.<android.graphics.Point: int y> = $i1;

        $r6 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i2 = $r6.<android.view.DisplayInfo: int largestNominalAppWidth>;

        r2.<android.graphics.Point: int x> = $i2;

        $r7 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i3 = $r7.<android.view.DisplayInfo: int largestNominalAppHeight>;

        r2.<android.graphics.Point: int y> = $i3;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.view.DisplayAdjustments getDisplayAdjustments()
    {
        android.view.Display r0;
        android.view.DisplayAdjustments $r1;

        r0 := @this: android.view.Display;

        $r1 = r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments>;

        return $r1;
    }

    public int getDisplayId()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mDisplayId>;

        return $i0;
    }

    public boolean getDisplayInfo(android.view.DisplayInfo)
    {
        android.view.Display r0;
        android.view.DisplayInfo r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean z0;

        r0 := @this: android.view.Display;

        r1 := @parameter0: android.view.DisplayInfo;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r3 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        virtualinvoke r1.<android.view.DisplayInfo: void copyFrom(android.view.DisplayInfo)>($r3);

        z0 = r0.<android.view.Display: boolean mIsValid>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getFlags()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mFlags>;

        return $i0;
    }

    public int getHeight()
    {
        android.view.Display r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateCachedAppSizeIfNeededLocked()>();

        i0 = r0.<android.view.Display: int mCachedAppHeightCompat>;

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getLayerStack()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mLayerStack>;

        return $i0;
    }

    public int getMaximumSizeDimension()
    {
        android.view.Display r0;
        java.lang.Throwable r1, $r4;
        int i0, $i1, $i2;
        android.view.DisplayInfo $r2, $r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i2 = $r2.<android.view.DisplayInfo: int logicalWidth>;

        $r3 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i1 = $r3.<android.view.DisplayInfo: int logicalHeight>;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i1);

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void getMetrics(android.util.DisplayMetrics)
    {
        android.view.Display r0;
        android.util.DisplayMetrics r1;
        java.lang.Throwable r2, $r5;
        android.view.DisplayAdjustments $r3;
        android.view.DisplayInfo $r4;

        r0 := @this: android.view.Display;

        r1 := @parameter0: android.util.DisplayMetrics;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r4 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r3 = r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments>;

        virtualinvoke $r4.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics,android.view.DisplayAdjustments)>(r1, $r3);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getName()
    {
        android.view.Display r0;
        java.lang.Throwable r1, $r4;
        java.lang.String r2;
        android.view.DisplayInfo $r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r3 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        r2 = $r3.<android.view.DisplayInfo: java.lang.String name>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getOrientation()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = virtualinvoke r0.<android.view.Display: int getRotation()>();

        return $i0;
    }

    public void getOverscanInsets(android.graphics.Rect)
    {
        android.view.Display r0;
        android.graphics.Rect r1;
        java.lang.Throwable r2, $r7;
        android.view.DisplayInfo $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.Display;

        r1 := @parameter0: android.graphics.Rect;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r3 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i3 = $r3.<android.view.DisplayInfo: int overscanLeft>;

        $r4 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i2 = $r4.<android.view.DisplayInfo: int overscanTop>;

        $r5 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i1 = $r5.<android.view.DisplayInfo: int overscanRight>;

        $r6 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i0 = $r6.<android.view.DisplayInfo: int overscanBottom>;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i3, $i2, $i1, $i0);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

     label4:
        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getOwnerPackageName()
    {
        android.view.Display r0;
        java.lang.String $r1;

        r0 := @this: android.view.Display;

        $r1 = r0.<android.view.Display: java.lang.String mOwnerPackageName>;

        return $r1;
    }

    public int getOwnerUid()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mOwnerUid>;

        return $i0;
    }

    public int getPixelFormat()
    {
        android.view.Display r0;

        r0 := @this: android.view.Display;

        return 1;
    }

    public void getRealMetrics(android.util.DisplayMetrics)
    {
        android.view.Display r0;
        android.util.DisplayMetrics r1;
        java.lang.Throwable r2, $r7;
        android.view.DisplayAdjustments $r3;
        android.view.DisplayInfo $r4;
        android.content.res.CompatibilityInfo $r5;
        android.os.IBinder $r6;

        r0 := @this: android.view.Display;

        r1 := @parameter0: android.util.DisplayMetrics;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r4 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r5 = <android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo DEFAULT_COMPATIBILITY_INFO>;

        $r3 = r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments>;

        $r6 = virtualinvoke $r3.<android.view.DisplayAdjustments: android.os.IBinder getActivityToken()>();

        virtualinvoke $r4.<android.view.DisplayInfo: void getLogicalMetrics(android.util.DisplayMetrics,android.content.res.CompatibilityInfo,android.os.IBinder)>(r1, $r5, $r6);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

     label4:
        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void getRealSize(android.graphics.Point)
    {
        android.view.Display r0;
        android.graphics.Point r1;
        java.lang.Throwable r2, $r5;
        android.view.DisplayInfo $r3, $r4;
        int $i0, $i1;

        r0 := @this: android.view.Display;

        r1 := @parameter0: android.graphics.Point;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r3 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i0 = $r3.<android.view.DisplayInfo: int logicalWidth>;

        r1.<android.graphics.Point: int x> = $i0;

        $r4 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i1 = $r4.<android.view.DisplayInfo: int logicalHeight>;

        r1.<android.graphics.Point: int y> = $i1;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void getRectSize(android.graphics.Rect)
    {
        android.view.Display r0;
        android.graphics.Rect r1;
        java.lang.Throwable r2, $r8;
        android.view.DisplayAdjustments $r3;
        android.util.DisplayMetrics $r4, $r6, $r7;
        android.view.DisplayInfo $r5;
        int $i0, $i1;

        r0 := @this: android.view.Display;

        r1 := @parameter0: android.graphics.Rect;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r5 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r4 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $r3 = r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments>;

        virtualinvoke $r5.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics,android.view.DisplayAdjustments)>($r4, $r3);

        $r6 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i1 = $r6.<android.util.DisplayMetrics: int widthPixels>;

        $r7 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i0 = $r7.<android.util.DisplayMetrics: int heightPixels>;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i1, $i0);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

     label4:
        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public float getRefreshRate()
    {
        android.view.Display r0;
        java.lang.Throwable r1, $r3;
        float f0;
        android.view.DisplayInfo $r2;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        f0 = $r2.<android.view.DisplayInfo: float refreshRate>;

        exitmonitor r0;

     label2:
        return f0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getRotation()
    {
        android.view.Display r0;
        java.lang.Throwable r1, $r3;
        int i0;
        android.view.DisplayInfo $r2;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        i0 = $r2.<android.view.DisplayInfo: int rotation>;

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void getSize(android.graphics.Point)
    {
        android.view.Display r0;
        android.graphics.Point r1;
        java.lang.Throwable r2, $r8;
        android.view.DisplayAdjustments $r3;
        android.util.DisplayMetrics $r4, $r6, $r7;
        android.view.DisplayInfo $r5;
        int $i0, $i1;

        r0 := @this: android.view.Display;

        r1 := @parameter0: android.graphics.Point;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r5 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r4 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $r3 = r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments>;

        virtualinvoke $r5.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics,android.view.DisplayAdjustments)>($r4, $r3);

        $r6 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i0 = $r6.<android.util.DisplayMetrics: int widthPixels>;

        r1.<android.graphics.Point: int x> = $i0;

        $r7 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i1 = $r7.<android.util.DisplayMetrics: int heightPixels>;

        r1.<android.graphics.Point: int y> = $i1;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

     label4:
        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getType()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mType>;

        return $i0;
    }

    public int getWidth()
    {
        android.view.Display r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateCachedAppSizeIfNeededLocked()>();

        i0 = r0.<android.view.Display: int mCachedAppWidthCompat>;

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean hasAccess(int)
    {
        android.view.Display r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.view.Display;

        i0 := @parameter0: int;

        $i2 = r0.<android.view.Display: int mFlags>;

        $i1 = r0.<android.view.Display: int mOwnerUid>;

        $z0 = staticinvoke <android.view.Display: boolean hasAccess(int,int,int)>(i0, $i2, $i1);

        return $z0;
    }

    public boolean isPublicPresentation()
    {
        android.view.Display r0;
        int $i0, $i1;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mFlags>;

        $i1 = 12 & $i0;

        if $i1 != 8 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isValid()
    {
        android.view.Display r0;
        java.lang.Throwable r1, $r2;
        boolean z0;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        z0 = r0.<android.view.Display: boolean mIsValid>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String toString()
    {
        android.view.Display r0;
        java.lang.Throwable r1, $r17;
        java.lang.String r2;
        android.view.DisplayAdjustments $r3;
        android.util.DisplayMetrics $r4, $r13;
        android.view.DisplayInfo $r5, $r10;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r16;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r5 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r4 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $r3 = r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments>;

        virtualinvoke $r5.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics,android.view.DisplayAdjustments)>($r4, $r3);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display id ");

        $i0 = r0.<android.view.Display: int mDisplayId>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isValid=");

        $z0 = r0.<android.view.Display: boolean mIsValid>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        r2 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r17 := @caughtexception;

        r1 = $r17;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <android.view.Display: int TYPE_WIFI> = 3;

        <android.view.Display: int TYPE_VIRTUAL> = 5;

        <android.view.Display: int TYPE_UNKNOWN> = 0;

        <android.view.Display: int TYPE_OVERLAY> = 4;

        <android.view.Display: int TYPE_HDMI> = 2;

        <android.view.Display: int TYPE_BUILT_IN> = 1;

        <android.view.Display: java.lang.String TAG> = "Display";

        <android.view.Display: int FLAG_SUPPORTS_PROTECTED_BUFFERS> = 1;

        <android.view.Display: int FLAG_SECURE> = 2;

        <android.view.Display: int FLAG_PRIVATE> = 4;

        <android.view.Display: int FLAG_PRESENTATION> = 8;

        <android.view.Display: int DEFAULT_DISPLAY> = 0;

        <android.view.Display: boolean DEBUG> = 0;

        <android.view.Display: int CACHED_APP_SIZE_DURATION_MILLIS> = 20;

        return;
    }
}
