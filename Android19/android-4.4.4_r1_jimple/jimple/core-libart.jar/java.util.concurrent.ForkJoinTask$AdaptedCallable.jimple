final class java.util.concurrent.ForkJoinTask$AdaptedCallable extends java.util.concurrent.ForkJoinTask implements java.util.concurrent.RunnableFuture
{
    private static final long serialVersionUID;
    final java.util.concurrent.Callable callable;
    java.lang.Object result;

    void <init>(java.util.concurrent.Callable)
    {
        java.util.concurrent.ForkJoinTask$AdaptedCallable r0;
        java.util.concurrent.Callable r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.concurrent.ForkJoinTask$AdaptedCallable;

        r1 := @parameter0: java.util.concurrent.Callable;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r0.<java.util.concurrent.ForkJoinTask$AdaptedCallable: java.util.concurrent.Callable callable> = r1;

        return;
    }

    public final boolean exec()
    {
        java.util.concurrent.ForkJoinTask$AdaptedCallable r0;
        java.lang.Exception r1, $r6;
        java.lang.RuntimeException r2, $r7, $r9;
        java.lang.Error r3, $r8;
        java.util.concurrent.Callable $r4;
        java.lang.Object $r5;

        r0 := @this: java.util.concurrent.ForkJoinTask$AdaptedCallable;

     label1:
        $r4 = r0.<java.util.concurrent.ForkJoinTask$AdaptedCallable: java.util.concurrent.Callable callable>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.Callable: java.lang.Object call()>();

        r0.<java.util.concurrent.ForkJoinTask$AdaptedCallable: java.lang.Object result> = $r5;

     label2:
        return 1;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        throw r3;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        throw r2;

     label5:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r7;

        catch java.lang.Error from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    public final java.lang.Object getRawResult()
    {
        java.util.concurrent.ForkJoinTask$AdaptedCallable r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.ForkJoinTask$AdaptedCallable;

        $r1 = r0.<java.util.concurrent.ForkJoinTask$AdaptedCallable: java.lang.Object result>;

        return $r1;
    }

    public final void run()
    {
        java.util.concurrent.ForkJoinTask$AdaptedCallable r0;

        r0 := @this: java.util.concurrent.ForkJoinTask$AdaptedCallable;

        virtualinvoke r0.<java.util.concurrent.ForkJoinTask$AdaptedCallable: java.lang.Object invoke()>();

        return;
    }

    public final void setRawResult(java.lang.Object)
    {
        java.util.concurrent.ForkJoinTask$AdaptedCallable r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.ForkJoinTask$AdaptedCallable;

        r1 := @parameter0: java.lang.Object;

        r0.<java.util.concurrent.ForkJoinTask$AdaptedCallable: java.lang.Object result> = r1;

        return;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ForkJoinTask$AdaptedCallable: long serialVersionUID> = 2838392045355241008L;

        return;
    }
}
