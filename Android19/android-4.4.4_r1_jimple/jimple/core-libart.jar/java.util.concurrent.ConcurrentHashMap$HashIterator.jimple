abstract class java.util.concurrent.ConcurrentHashMap$HashIterator extends java.lang.Object
{
    java.util.concurrent.ConcurrentHashMap$HashEntry[] currentTable;
    java.util.concurrent.ConcurrentHashMap$HashEntry lastReturned;
    java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry;
    int nextSegmentIndex;
    int nextTableIndex;
    final java.util.concurrent.ConcurrentHashMap this$0;

    void <init>(java.util.concurrent.ConcurrentHashMap)
    {
        java.util.concurrent.ConcurrentHashMap$HashIterator r0;
        java.util.concurrent.ConcurrentHashMap r1;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r2;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$HashIterator;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap;

        r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        $i0 = lengthof $r2;

        $i1 = -1 + $i0;

        r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: int nextSegmentIndex> = $i1;

        r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: int nextTableIndex> = -1;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: void advance()>();

        return;
    }

    final void advance()
    {
        java.util.concurrent.ConcurrentHashMap$HashIterator r0;
        java.util.concurrent.ConcurrentHashMap$Segment[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.concurrent.ConcurrentHashMap$Segment r2;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r3, r4, $r7;
        java.util.concurrent.ConcurrentHashMap$HashEntry r5;
        java.util.concurrent.ConcurrentHashMap $r6;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$HashIterator;

     label1:
        $i2 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: int nextTableIndex>;

        if $i2 < 0 goto label3;

        r4 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry[] currentTable>;

        i1 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: int nextTableIndex>;

        $i7 = i1 - 1;

        r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: int nextTableIndex> = $i7;

        r5 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int)>(r4, i1);

        r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry> = r5;

        if r5 == null goto label1;

     label2:
        return;

     label3:
        $i3 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: int nextSegmentIndex>;

        if $i3 < 0 goto label2;

        $r6 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap this$0>;

        r1 = $r6.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;

        i0 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: int nextSegmentIndex>;

        $i4 = i0 - 1;

        r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: int nextSegmentIndex> = $i4;

        r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r1, i0);

        if r2 == null goto label1;

        r3 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;

        r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry[] currentTable> = r3;

        if r3 == null goto label1;

        $r7 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry[] currentTable>;

        $i5 = lengthof $r7;

        $i6 = -1 + $i5;

        r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: int nextTableIndex> = $i6;

        goto label1;
    }

    public final boolean hasMoreElements()
    {
        java.util.concurrent.ConcurrentHashMap$HashIterator r0;
        java.util.concurrent.ConcurrentHashMap$HashEntry $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$HashIterator;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean hasNext()
    {
        java.util.concurrent.ConcurrentHashMap$HashIterator r0;
        java.util.concurrent.ConcurrentHashMap$HashEntry $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$HashIterator;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    final java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry()
    {
        java.util.concurrent.ConcurrentHashMap$HashIterator r0;
        java.util.concurrent.ConcurrentHashMap$HashEntry r1, r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$HashIterator;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry>;

        if r1 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry lastReturned> = r1;

        r2 = r1.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

        r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry> = r2;

        if r2 != null goto label2;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: void advance()>();

     label2:
        return r1;
    }

    public final void remove()
    {
        java.util.concurrent.ConcurrentHashMap$HashIterator r0;
        java.util.concurrent.ConcurrentHashMap$HashEntry $r1, $r2;
        java.lang.Object $r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$HashIterator;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry lastReturned>;

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        $r4 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap this$0>;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry lastReturned>;

        $r3 = $r2.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r3);

        r0.<java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry lastReturned> = null;

        return;
    }
}
