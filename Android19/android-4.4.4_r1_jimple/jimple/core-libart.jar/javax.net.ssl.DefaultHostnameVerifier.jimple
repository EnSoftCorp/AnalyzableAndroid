public final class javax.net.ssl.DefaultHostnameVerifier extends java.lang.Object implements javax.net.ssl.HostnameVerifier
{
    private static final int ALT_DNS_NAME;
    private static final int ALT_IPA_NAME;

    public void <init>()
    {
        javax.net.ssl.DefaultHostnameVerifier r0;

        r0 := @this: javax.net.ssl.DefaultHostnameVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private java.util.List getSubjectAltNames(java.security.cert.X509Certificate, int)
    {
        javax.net.ssl.DefaultHostnameVerifier r0;
        java.security.cert.X509Certificate r1;
        int i0, $i1, $i2;
        java.util.List r2, r6, $r14;
        java.util.Collection r4;
        java.util.Iterator r5;
        java.lang.Integer r7;
        java.lang.String r8;
        java.util.ArrayList $r9;
        boolean $z0;
        java.lang.Object $r10, $r11, $r12;
        java.security.cert.CertificateParsingException $r13;

        r0 := @this: javax.net.ssl.DefaultHostnameVerifier;

        r1 := @parameter0: java.security.cert.X509Certificate;

        i0 := @parameter1: int;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r2 = $r9;

     label01:
        r4 = virtualinvoke r1.<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>();

     label02:
        if r4 != null goto label04;

     label03:
        $r14 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r14;

     label04:
        r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.List) $r10;

     label06:
        if r6 == null goto label05;

     label07:
        $i1 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i1 < 2 goto label05;

        $r11 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        r7 = (java.lang.Integer) $r11;

     label08:
        if r7 == null goto label05;

     label09:
        $i2 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        if $i2 != i0 goto label05;

        $r12 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(1);

        r8 = (java.lang.String) $r12;

     label10:
        if r8 == null goto label05;

     label11:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r8);

     label12:
        goto label05;

     label13:
        $r13 := @caughtexception;

        r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label14:
        return r2;

        catch java.security.cert.CertificateParsingException from label01 to label02 with label13;
        catch java.security.cert.CertificateParsingException from label03 to label04 with label13;
        catch java.security.cert.CertificateParsingException from label04 to label05 with label13;
        catch java.security.cert.CertificateParsingException from label05 to label06 with label13;
        catch java.security.cert.CertificateParsingException from label07 to label08 with label13;
        catch java.security.cert.CertificateParsingException from label09 to label10 with label13;
        catch java.security.cert.CertificateParsingException from label11 to label12 with label13;
    }

    private boolean verifyHostName(java.lang.String, java.security.cert.X509Certificate)
    {
        javax.net.ssl.DefaultHostnameVerifier r0;
        java.lang.String r1, r3, r5, r6;
        java.security.cert.X509Certificate r2;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r4;
        java.util.Locale $r7;
        java.util.List $r8;
        javax.net.ssl.DistinguishedNameParser $r9;
        javax.security.auth.x500.X500Principal $r10;
        java.lang.Object $r11;

        r0 := @this: javax.net.ssl.DefaultHostnameVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.cert.X509Certificate;

        $r7 = <java.util.Locale: java.util.Locale US>;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r7);

        z0 = 0;

        $r8 = specialinvoke r0.<javax.net.ssl.DefaultHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>(r2, 2);

        r4 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r11;

        z0 = 1;

        $z3 = virtualinvoke r0.<javax.net.ssl.DefaultHostnameVerifier: boolean verifyHostName(java.lang.String,java.lang.String)>(r3, r6);

        if $z3 == 0 goto label1;

        return 1;

     label2:
        if z0 != 0 goto label3;

        $r9 = new javax.net.ssl.DistinguishedNameParser;

        $r10 = virtualinvoke r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        specialinvoke $r9.<javax.net.ssl.DistinguishedNameParser: void <init>(javax.security.auth.x500.X500Principal)>($r10);

        r5 = virtualinvoke $r9.<javax.net.ssl.DistinguishedNameParser: java.lang.String findMostSpecific(java.lang.String)>("cn");

        if r5 == null goto label3;

        $z2 = virtualinvoke r0.<javax.net.ssl.DefaultHostnameVerifier: boolean verifyHostName(java.lang.String,java.lang.String)>(r3, r5);

        return $z2;

     label3:
        return 0;
    }

    private boolean verifyIpAddress(java.lang.String, java.security.cert.X509Certificate)
    {
        javax.net.ssl.DefaultHostnameVerifier r0;
        java.lang.String r1, $r6;
        java.security.cert.X509Certificate r2;
        java.util.Iterator r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: javax.net.ssl.DefaultHostnameVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.cert.X509Certificate;

        $r4 = specialinvoke r0.<javax.net.ssl.DefaultHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>(r2, 7);

        r3 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r5;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z1 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public boolean verify(java.lang.String, java.security.cert.X509Certificate)
    {
        javax.net.ssl.DefaultHostnameVerifier r0;
        java.lang.String r1;
        java.security.cert.X509Certificate r2;
        boolean $z0, $z1, $z2;

        r0 := @this: javax.net.ssl.DefaultHostnameVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.cert.X509Certificate;

        $z0 = staticinvoke <java.net.InetAddress: boolean isNumeric(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $z2 = specialinvoke r0.<javax.net.ssl.DefaultHostnameVerifier: boolean verifyIpAddress(java.lang.String,java.security.cert.X509Certificate)>(r1, r2);

        return $z2;

     label1:
        $z1 = specialinvoke r0.<javax.net.ssl.DefaultHostnameVerifier: boolean verifyHostName(java.lang.String,java.security.cert.X509Certificate)>(r1, r2);

        return $z1;
    }

    public final boolean verify(java.lang.String, javax.net.ssl.SSLSession)
    {
        javax.net.ssl.DefaultHostnameVerifier r0;
        java.lang.String r1;
        javax.net.ssl.SSLSession r2;
        boolean z0;
        java.security.cert.Certificate[] $r4;
        java.security.cert.Certificate $r5;
        java.security.cert.X509Certificate $r6;
        javax.net.ssl.SSLException $r7;

        r0 := @this: javax.net.ssl.DefaultHostnameVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.net.ssl.SSLSession;

     label1:
        $r4 = interfaceinvoke r2.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

        $r5 = $r4[0];

        $r6 = (java.security.cert.X509Certificate) $r5;

        z0 = virtualinvoke r0.<javax.net.ssl.DefaultHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>(r1, $r6);

     label2:
        return z0;

     label3:
        $r7 := @caughtexception;

        return 0;

        catch javax.net.ssl.SSLException from label1 to label2 with label3;
    }

    public boolean verifyHostName(java.lang.String, java.lang.String)
    {
        javax.net.ssl.DefaultHostnameVerifier r0;
        java.lang.String r1, r2, r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.util.Locale $r4;

        r0 := @this: javax.net.ssl.DefaultHostnameVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 = 1;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        if r2 == null goto label1;

        $z2 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label3;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        $r4 = <java.util.Locale: java.util.Locale US>;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

        $z3 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("*");

        if $z3 != 0 goto label4;

        $z9 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        return $z9;

     label4:
        $z4 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("*.");

        if $z4 == 0 goto label5;

        $i9 = virtualinvoke r3.<java.lang.String: int length()>();

        $i10 = -2 + $i9;

        $z8 = virtualinvoke r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(0, r3, 2, $i10);

        if $z8 != 0 goto label2;

     label5:
        i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(42);

        $i3 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(46);

        if i0 <= $i3 goto label6;

        return 0;

     label6:
        $z5 = virtualinvoke r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(0, r3, 0, i0);

        if $z5 != 0 goto label7;

        return 0;

     label7:
        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        $i6 = i0 + 1;

        i1 = $i4 - $i6;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = $i5 - i1;

        $i8 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(46, i0);

        if $i8 >= i2 goto label8;

        $z6 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".clients.google.com");

        if $z6 != 0 goto label8;

        return 0;

     label8:
        $i7 = i0 + 1;

        $z7 = virtualinvoke r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(i2, r3, $i7, i1);

        if $z7 != 0 goto label2;

        return 0;
    }

    public static void <clinit>()
    {
        <javax.net.ssl.DefaultHostnameVerifier: int ALT_IPA_NAME> = 7;

        <javax.net.ssl.DefaultHostnameVerifier: int ALT_DNS_NAME> = 2;

        return;
    }
}
