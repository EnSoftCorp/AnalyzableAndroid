public class java.util.Hashtable extends java.util.Dictionary implements java.util.Map, java.lang.Cloneable, java.io.Serializable
{
    private static final int CHARS_PER_ENTRY;
    private static final float DEFAULT_LOAD_FACTOR;
    private static final java.util.Map$Entry[] EMPTY_TABLE;
    private static final int MAXIMUM_CAPACITY;
    private static final int MINIMUM_CAPACITY;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static final long serialVersionUID;
    private transient java.util.Set entrySet;
    private transient java.util.Set keySet;
    private transient int modCount;
    private transient int size;
    private transient java.util.Hashtable$HashtableEntry[] table;
    private transient int threshold;
    private transient java.util.Collection values;

    static void <clinit>()
    {
        java.io.ObjectStreamField[] r0;
        java.util.Hashtable$HashtableEntry[] $r1;
        java.io.ObjectStreamField $r2, $r4;
        java.lang.Class $r3, $r5;

        <java.util.Hashtable: long serialVersionUID> = 1421746759512286392L;

        <java.util.Hashtable: int MINIMUM_CAPACITY> = 4;

        <java.util.Hashtable: int MAXIMUM_CAPACITY> = 1073741824;

        <java.util.Hashtable: float DEFAULT_LOAD_FACTOR> = 0.75F;

        <java.util.Hashtable: int CHARS_PER_ENTRY> = 15;

        $r1 = newarray (java.util.Hashtable$HashtableEntry)[2];

        <java.util.Hashtable: java.util.Map$Entry[] EMPTY_TABLE> = $r1;

        r0 = newarray (java.io.ObjectStreamField)[2];

        $r2 = new java.io.ObjectStreamField;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r2.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("threshold", $r3);

        r0[0] = $r2;

        $r4 = new java.io.ObjectStreamField;

        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("loadFactor", $r5);

        r0[1] = $r4;

        <java.util.Hashtable: java.io.ObjectStreamField[] serialPersistentFields> = r0;

        return;
    }

    public void <init>()
    {
        java.util.Hashtable r0;
        java.util.Map$Entry[] $r1;
        java.util.Hashtable$HashtableEntry[] $r2, $r3;

        r0 := @this: java.util.Hashtable;

        specialinvoke r0.<java.util.Dictionary: void <init>()>();

        $r1 = <java.util.Hashtable: java.util.Map$Entry[] EMPTY_TABLE>;

        $r2 = (java.util.Hashtable$HashtableEntry[]) $r1;

        $r3 = (java.util.Hashtable$HashtableEntry[]) $r2;

        r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table> = $r3;

        r0.<java.util.Hashtable: int threshold> = -1;

        return;
    }

    public void <init>(int)
    {
        java.util.Hashtable r0;
        int i0, i1;
        java.util.Map$Entry[] $r2;
        java.util.Hashtable$HashtableEntry[] $r3, $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: java.util.Hashtable;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.Dictionary: void <init>()>();

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Capacity: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        if i0 != 0 goto label2;

        $r2 = <java.util.Hashtable: java.util.Map$Entry[] EMPTY_TABLE>;

        $r3 = (java.util.Hashtable$HashtableEntry[]) $r2;

        $r4 = (java.util.Hashtable$HashtableEntry[]) $r3;

        r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table> = $r4;

        r0.<java.util.Hashtable: int threshold> = -1;

        return;

     label2:
        if i0 >= 4 goto label4;

        i1 = 4;

     label3:
        specialinvoke r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] makeTable(int)>(i1);

        return;

     label4:
        if i0 <= 1073741824 goto label5;

        i1 = 1073741824;

        goto label3;

     label5:
        i1 = staticinvoke <java.util.Collections: int roundUpToPowerOfTwo(int)>(i0);

        goto label3;
    }

    public void <init>(int, float)
    {
        java.util.Hashtable r0;
        int i0;
        float f0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: java.util.Hashtable;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.util.Hashtable: void <init>(int)>(i0);

        $b1 = f0 cmpg 0.0F;

        if $b1 <= 0 goto label1;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Load factor: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.Hashtable r0;
        java.util.Map r1;
        int $i0, $i1;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i1 = staticinvoke <java.util.Hashtable: int capacityForInitSize(int)>($i0);

        specialinvoke r0.<java.util.Hashtable: void <init>(int)>($i1);

        specialinvoke r0.<java.util.Hashtable: void constructorPutAll(java.util.Map)>(r1);

        return;
    }

    static boolean access$1100(java.util.Hashtable, java.lang.Object, java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @parameter0: java.util.Hashtable;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.Hashtable: boolean containsMapping(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z0;
    }

    static boolean access$1200(java.util.Hashtable, java.lang.Object, java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @parameter0: java.util.Hashtable;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.Hashtable: boolean removeMapping(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z0;
    }

    static int access$500(java.util.Hashtable)
    {
        java.util.Hashtable r0;
        int $i0;

        r0 := @parameter0: java.util.Hashtable;

        $i0 = r0.<java.util.Hashtable: int modCount>;

        return $i0;
    }

    static java.util.Hashtable$HashtableEntry[] access$600(java.util.Hashtable)
    {
        java.util.Hashtable r0;
        java.util.Hashtable$HashtableEntry[] $r1;

        r0 := @parameter0: java.util.Hashtable;

        $r1 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        return $r1;
    }

    static int access$800(java.util.Hashtable)
    {
        java.util.Hashtable r0;
        int $i0;

        r0 := @parameter0: java.util.Hashtable;

        $i0 = r0.<java.util.Hashtable: int size>;

        return $i0;
    }

    private static int capacityForInitSize(int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        $i2 = i0 >> 1;

        i1 = i0 + $i2;

        $i3 = -1073741824 & i1;

        if $i3 != 0 goto label1;

        return i1;

     label1:
        return 1073741824;
    }

    private void constructorPut(java.lang.Object, java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r2, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.util.Hashtable$HashtableEntry[] r3;
        java.util.Hashtable$HashtableEntry r4, r5, $r6;
        java.lang.NullPointerException $r8, $r9;
        boolean $z0;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r9;

     label1:
        if r2 != null goto label2;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("value == null");

        throw $r8;

     label2:
        i0 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r3 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        $i2 = lengthof r3;

        $i3 = -1 + $i2;

        i1 = i0 & $i3;

        r4 = r3[i1];

        r5 = r4;

     label3:
        if r5 == null goto label5;

        $i6 = r5.<java.util.Hashtable$HashtableEntry: int hash>;

        if $i6 != i0 goto label4;

        $r7 = r5.<java.util.Hashtable$HashtableEntry: java.lang.Object key>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

        r5.<java.util.Hashtable$HashtableEntry: java.lang.Object value> = r2;

        return;

     label4:
        r5 = r5.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

        goto label3;

     label5:
        $r6 = new java.util.Hashtable$HashtableEntry;

        specialinvoke $r6.<java.util.Hashtable$HashtableEntry: void <init>(java.lang.Object,java.lang.Object,int,java.util.Hashtable$HashtableEntry)>(r1, r2, i0, r4);

        r3[i1] = $r6;

        $i4 = r0.<java.util.Hashtable: int size>;

        $i5 = 1 + $i4;

        r0.<java.util.Hashtable: int size> = $i5;

        return;
    }

    private void constructorPutAll(java.util.Map)
    {
        java.util.Hashtable r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map$Entry[] $r4;
        java.util.Hashtable$HashtableEntry[] $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r9;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.util.Map;

        $r5 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        $r4 = <java.util.Hashtable: java.util.Map$Entry[] EMPTY_TABLE>;

        if $r5 != $r4 goto label1;

        specialinvoke r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] doubleCapacity()>();

     label1:
        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        specialinvoke r0.<java.util.Hashtable: void constructorPut(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label2;

     label3:
        return;
    }

    private boolean containsMapping(java.lang.Object, java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r2, $r6, $r7;
        java.lang.Throwable r3, $r8;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Hashtable$HashtableEntry[] r4;
        java.util.Hashtable$HashtableEntry r5;
        boolean z0, z1, $z2;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        entermonitor r0;

     label1:
        i0 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r4 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        $i1 = lengthof r4;

        $i2 = -1 + $i1;

        $i3 = i0 & $i2;

        r5 = r4[$i3];

     label2:
        if r5 == null goto label8;

     label3:
        $i4 = r5.<java.util.Hashtable$HashtableEntry: int hash>;

        if $i4 != i0 goto label6;

        $r6 = r5.<java.util.Hashtable$HashtableEntry: java.lang.Object key>;

        $z2 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label6;

        $r7 = r5.<java.util.Hashtable$HashtableEntry: java.lang.Object value>;

        z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

     label4:
        z1 = z0;

     label5:
        exitmonitor r0;

        return z1;

     label6:
        r5 = r5.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

     label7:
        goto label2;

     label8:
        z1 = 0;

        goto label5;

     label9:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r0;

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    private java.util.Hashtable$HashtableEntry[] doubleCapacity()
    {
        java.util.Hashtable r0;
        java.util.Hashtable$HashtableEntry[] r1, r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.Hashtable$HashtableEntry r3, r4, r5;

        r0 := @this: java.util.Hashtable;

        r1 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        i0 = lengthof r1;

        if i0 != 1073741824 goto label02;

        r2 = r1;

     label01:
        return r2;

     label02:
        $i4 = i0 * 2;

        r2 = specialinvoke r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] makeTable(int)>($i4);

        $i5 = r0.<java.util.Hashtable: int size>;

        if $i5 == 0 goto label01;

        i1 = 0;

     label03:
        if i1 >= i0 goto label01;

        r3 = r1[i1];

        if r3 != null goto label05;

     label04:
        i1 = i1 + 1;

        goto label03;

     label05:
        $i6 = r3.<java.util.Hashtable$HashtableEntry: int hash>;

        i2 = i0 & $i6;

        r4 = null;

        $i7 = i1 | i2;

        r2[$i7] = r3;

        r5 = r3.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

     label06:
        if r5 == null goto label10;

        $i8 = r5.<java.util.Hashtable$HashtableEntry: int hash>;

        i3 = i0 & $i8;

        if i3 == i2 goto label08;

        if r4 != null goto label09;

        $i9 = i1 | i3;

        r2[$i9] = r5;

     label07:
        r4 = r3;

        i2 = i3;

     label08:
        r3 = r5;

        r5 = r5.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

        goto label06;

     label09:
        r4.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next> = r5;

        goto label07;

     label10:
        if r4 == null goto label04;

        r4.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next> = null;

        goto label04;
    }

    private void ensureCapacity(int)
    {
        java.util.Hashtable r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        java.util.Hashtable$HashtableEntry[] r1, r2;
        java.util.Hashtable$HashtableEntry r3, r4, r5;

        r0 := @this: java.util.Hashtable;

        i0 := @parameter0: int;

        $i6 = staticinvoke <java.util.Hashtable: int capacityForInitSize(int)>(i0);

        i1 = staticinvoke <java.util.Collections: int roundUpToPowerOfTwo(int)>($i6);

        r1 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        i2 = lengthof r1;

        if i1 > i2 goto label2;

     label1:
        return;

     label2:
        virtualinvoke r0.<java.util.Hashtable: void rehash()>();

        $i7 = i2 * 2;

        if i1 != $i7 goto label3;

        specialinvoke r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] doubleCapacity()>();

        return;

     label3:
        r2 = specialinvoke r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] makeTable(int)>(i1);

        $i9 = r0.<java.util.Hashtable: int size>;

        if $i9 == 0 goto label1;

        i3 = i1 - 1;

        i4 = 0;

     label4:
        if i4 >= i2 goto label1;

        r3 = r1[i4];

     label5:
        if r3 == null goto label6;

        r4 = r3.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

        $i8 = r3.<java.util.Hashtable$HashtableEntry: int hash>;

        i5 = i3 & $i8;

        r5 = r2[i5];

        r2[i5] = r3;

        r3.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next> = r5;

        r3 = r4;

        goto label5;

     label6:
        i4 = i4 + 1;

        goto label4;
    }

    private java.util.Hashtable$HashtableEntry[] makeTable(int)
    {
        java.util.Hashtable r0;
        int i0, $i1, $i2, $i3;
        java.util.Hashtable$HashtableEntry[] r1, $r2;

        r0 := @this: java.util.Hashtable;

        i0 := @parameter0: int;

        $r2 = newarray (java.util.Hashtable$HashtableEntry)[i0];

        r1 = (java.util.Hashtable$HashtableEntry[]) $r2;

        r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table> = r1;

        $i2 = i0 >> 1;

        $i1 = i0 >> 2;

        $i3 = $i2 + $i1;

        r0.<java.util.Hashtable: int threshold> = $i3;

        return r1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Hashtable r0;
        java.io.ObjectInputStream r1;
        int i0, i1, i2, i3;
        java.lang.Object $r3, $r4;
        java.io.InvalidObjectException $r5, $r11;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12, $r13;
        java.lang.String $r8, $r14;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        if i0 >= 0 goto label1;

        $r11 = new java.io.InvalidObjectException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Capacity: ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label1:
        if i0 >= 4 goto label3;

        i1 = 4;

     label2:
        specialinvoke r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] makeTable(int)>(i1);

        i2 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        if i2 >= 0 goto label5;

        $r5 = new java.io.InvalidObjectException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size: ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label3:
        if i0 <= 1073741824 goto label4;

        i1 = 1073741824;

        goto label2;

     label4:
        i1 = staticinvoke <java.util.Collections: int roundUpToPowerOfTwo(int)>(i0);

        goto label2;

     label5:
        i3 = 0;

     label6:
        if i3 >= i2 goto label7;

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        specialinvoke r0.<java.util.Hashtable: void constructorPut(java.lang.Object,java.lang.Object)>($r3, $r4);

        i3 = i3 + 1;

        goto label6;

     label7:
        return;
    }

    private boolean removeMapping(java.lang.Object, java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r2, $r7, $r8;
        java.lang.Throwable r3, $r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Hashtable$HashtableEntry[] r4;
        java.util.Hashtable$HashtableEntry r5, r6, $r9, $r11;
        boolean z0, z1, $z2;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        entermonitor r0;

     label01:
        i0 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r4 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        $i2 = lengthof r4;

        $i3 = -1 + $i2;

        i1 = i0 & $i3;

        r5 = r4[i1];

     label02:
        r6 = null;

     label03:
        z0 = 0;

        if r5 == null goto label06;

     label04:
        $i4 = r5.<java.util.Hashtable$HashtableEntry: int hash>;

        if $i4 != i0 goto label14;

        $r7 = r5.<java.util.Hashtable$HashtableEntry: java.lang.Object key>;

        $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label14;

        $r8 = r5.<java.util.Hashtable$HashtableEntry: java.lang.Object value>;

        z1 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

     label05:
        z0 = 0;

        if z1 != 0 goto label07;

     label06:
        exitmonitor r0;

        return z0;

     label07:
        if r6 != null goto label11;

     label08:
        $r11 = r5.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

        r4[i1] = $r11;

     label09:
        $i6 = r0.<java.util.Hashtable: int modCount>;

        $i5 = 1 + $i6;

        r0.<java.util.Hashtable: int modCount> = $i5;

        $i8 = r0.<java.util.Hashtable: int size>;

        $i7 = -1 + $i8;

        r0.<java.util.Hashtable: int size> = $i7;

     label10:
        z0 = 1;

        goto label06;

     label11:
        $r9 = r5.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

        r6.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next> = $r9;

     label12:
        goto label09;

     label13:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r0;

        throw r3;

     label14:
        r6 = r5;

     label15:
        r5 = r5.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

     label16:
        goto label03;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Hashtable r0;
        java.io.ObjectOutputStream r1;
        java.lang.Throwable r2, $r11;
        java.io.ObjectOutputStream$PutField r3;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.util.Hashtable$HashtableEntry[] $r6, $r7;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object $r9, $r10, $r12;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.io.ObjectOutputStream;

        entermonitor r0;

     label1:
        r3 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        $r6 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        $i0 = lengthof $r6;

        $f0 = (float) $i0;

        $f1 = 0.75F * $f0;

        $i1 = (int) $f1;

        virtualinvoke r3.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("threshold", $i1);

        virtualinvoke r3.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,float)>("loadFactor", 0.75F);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        $r7 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        $i2 = lengthof $r7;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i2);

        $i3 = r0.<java.util.Hashtable: int size>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i3);

        $r8 = virtualinvoke r0.<java.util.Hashtable: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r10;

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r9);

        $r12 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r12);

     label3:
        goto label2;

     label4:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r0;

        throw r2;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void clear()
    {
        java.util.Hashtable r0;
        java.lang.Throwable r1, $r3;
        int $i0, $i1, $i2;
        java.util.Hashtable$HashtableEntry[] $r2;

        r0 := @this: java.util.Hashtable;

        entermonitor r0;

     label1:
        $i0 = r0.<java.util.Hashtable: int size>;

        if $i0 == 0 goto label2;

        $r2 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r2, null);

        $i1 = r0.<java.util.Hashtable: int modCount>;

        $i2 = 1 + $i1;

        r0.<java.util.Hashtable: int modCount> = $i2;

        r0.<java.util.Hashtable: int size> = 0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object clone()
    {
        java.util.Hashtable r0, r3;
        java.lang.Throwable r1, $r7;
        java.lang.CloneNotSupportedException r2, $r8;
        java.lang.Object $r4;
        java.util.Hashtable$HashtableEntry[] $r5;
        int $i0;
        java.lang.AssertionError $r9;

        r0 := @this: java.util.Hashtable;

        entermonitor r0;

     label1:
        $r4 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r3 = (java.util.Hashtable) $r4;

     label2:
        $r5 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        $i0 = lengthof $r5;

        specialinvoke r3.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] makeTable(int)>($i0);

        r3.<java.util.Hashtable: int size> = 0;

        r3.<java.util.Hashtable: java.util.Set keySet> = null;

        r3.<java.util.Hashtable: java.util.Set entrySet> = null;

        r3.<java.util.Hashtable: java.util.Collection values> = null;

        specialinvoke r3.<java.util.Hashtable: void constructorPutAll(java.util.Map)>(r0);

     label3:
        exitmonitor r0;

        return r3;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

     label5:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r9;

     label6:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

        throw r1;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.Hashtable: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r5;
        java.lang.Throwable r2, $r6;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Hashtable$HashtableEntry[] r3;
        java.util.Hashtable$HashtableEntry r4;
        boolean z0, z1;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label01:
        i0 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r3 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        $i1 = lengthof r3;

        $i2 = -1 + $i1;

        $i3 = i0 & $i2;

        r4 = r3[$i3];

     label02:
        if r4 == null goto label11;

     label03:
        r5 = r4.<java.util.Hashtable$HashtableEntry: java.lang.Object key>;

     label04:
        if r5 == r1 goto label07;

     label05:
        $i4 = r4.<java.util.Hashtable$HashtableEntry: int hash>;

        if $i4 != i0 goto label09;

        z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

     label06:
        if z0 == 0 goto label09;

     label07:
        z1 = 1;

     label08:
        exitmonitor r0;

        return z1;

     label09:
        r4 = r4.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

     label10:
        goto label02;

     label11:
        z1 = 0;

        goto label08;

     label12:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, $r5;
        java.util.Hashtable$HashtableEntry[] r2;
        int i0, i1;
        java.util.Hashtable$HashtableEntry r3;
        boolean z0, z1;
        java.lang.Throwable r4, $r7;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

        if r1 != null goto label03;

     label01:
        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("value == null");

        throw $r6;

     label02:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r0;

        throw r4;

     label03:
        r2 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        i0 = lengthof r2;

     label04:
        i1 = 0;

     label05:
        if i1 >= i0 goto label14;

     label06:
        r3 = r2[i1];

     label07:
        if r3 == null goto label13;

     label08:
        $r5 = r3.<java.util.Hashtable$HashtableEntry: java.lang.Object value>;

        z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

     label09:
        if z0 == 0 goto label11;

        z1 = 1;

     label10:
        exitmonitor r0;

        return z1;

     label11:
        r3 = r3.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

     label12:
        goto label07;

     label13:
        i1 = i1 + 1;

        goto label05;

     label14:
        z1 = 0;

        goto label10;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label11 to label12 with label02;
    }

    public java.util.Enumeration elements()
    {
        java.util.Hashtable r0;
        java.util.Hashtable$ValueEnumeration r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: java.util.Hashtable;

        entermonitor r0;

     label1:
        $r3 = new java.util.Hashtable$ValueEnumeration;

        specialinvoke $r3.<java.util.Hashtable$ValueEnumeration: void <init>(java.util.Hashtable,java.util.Hashtable$1)>(r0, null);

        r1 = $r3;

     label2:
        exitmonitor r0;

        return r1;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.Set entrySet()
    {
        java.util.Hashtable r0;
        java.lang.Throwable r1, $r4;
        java.util.Set r2;
        java.util.Hashtable$EntrySet $r3;

        r0 := @this: java.util.Hashtable;

        entermonitor r0;

     label1:
        r2 = r0.<java.util.Hashtable: java.util.Set entrySet>;

     label2:
        if r2 == null goto label4;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r3 = new java.util.Hashtable$EntrySet;

        specialinvoke $r3.<java.util.Hashtable$EntrySet: void <init>(java.util.Hashtable,java.util.Hashtable$1)>(r0, null);

        r2 = $r3;

        r0.<java.util.Hashtable: java.util.Set entrySet> = r2;

     label5:
        goto label3;

     label6:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r6;
        boolean z0, z1, $z2;
        java.util.Set $r3, $r5;
        java.util.Map $r4;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        $z2 = r1 instanceof java.util.Map;

        if $z2 == 0 goto label4;

        $r3 = virtualinvoke r0.<java.util.Hashtable: java.util.Set entrySet()>();

        $r4 = (java.util.Map) r1;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

     label2:
        if z1 == 0 goto label4;

        z0 = 1;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r5, r6;
        java.lang.Throwable r2, $r7;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Hashtable$HashtableEntry[] r3;
        java.util.Hashtable$HashtableEntry r4;
        boolean $z0;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label01:
        i0 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r3 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        $i1 = lengthof r3;

        $i2 = -1 + $i1;

        $i3 = i0 & $i2;

        r4 = r3[$i3];

     label02:
        if r4 == null goto label10;

     label03:
        r5 = r4.<java.util.Hashtable$HashtableEntry: java.lang.Object key>;

     label04:
        if r5 == r1 goto label06;

     label05:
        $i4 = r4.<java.util.Hashtable$HashtableEntry: int hash>;

        if $i4 != i0 goto label08;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label08;

     label06:
        r6 = r4.<java.util.Hashtable$HashtableEntry: java.lang.Object value>;

     label07:
        exitmonitor r0;

        return r6;

     label08:
        r4 = r4.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

     label09:
        goto label02;

     label10:
        r6 = null;

        goto label07;

     label11:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
    }

    public int hashCode()
    {
        java.util.Hashtable r0;
        int i0, i1, i2, i3, $i4;
        java.lang.Throwable r1, $r8;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.Object r4, r5, $r7;
        java.util.Set $r6;
        boolean $z0;

        r0 := @this: java.util.Hashtable;

        entermonitor r0;

        i0 = 0;

     label01:
        $r6 = virtualinvoke r0.<java.util.Hashtable: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

     label03:
        if r4 == r0 goto label02;

        if r5 == r0 goto label02;

        if r4 == null goto label09;

     label04:
        i1 = virtualinvoke r4.<java.lang.Object: int hashCode()>();

     label05:
        if r5 == null goto label10;

     label06:
        i2 = virtualinvoke r5.<java.lang.Object: int hashCode()>();

     label07:
        i3 = i2;

     label08:
        $i4 = i3 ^ i1;

        i0 = i0 + $i4;

        goto label02;

     label09:
        i1 = 0;

        goto label05;

     label10:
        i3 = 0;

        goto label08;

     label11:
        exitmonitor r0;

        return i0;

     label12:
        $r8 := @caughtexception;

        r1 = $r8;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
    }

    public boolean isEmpty()
    {
        java.util.Hashtable r0;
        java.lang.Throwable r1, $r2;
        int i0;
        boolean z0;

        r0 := @this: java.util.Hashtable;

        entermonitor r0;

     label1:
        i0 = r0.<java.util.Hashtable: int size>;

     label2:
        if i0 != 0 goto label4;

        z0 = 1;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public java.util.Set keySet()
    {
        java.util.Hashtable r0;
        java.lang.Throwable r1, $r4;
        java.util.Set r2;
        java.util.Hashtable$KeySet $r3;

        r0 := @this: java.util.Hashtable;

        entermonitor r0;

     label1:
        r2 = r0.<java.util.Hashtable: java.util.Set keySet>;

     label2:
        if r2 == null goto label4;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r3 = new java.util.Hashtable$KeySet;

        specialinvoke $r3.<java.util.Hashtable$KeySet: void <init>(java.util.Hashtable,java.util.Hashtable$1)>(r0, null);

        r2 = $r3;

        r0.<java.util.Hashtable: java.util.Set keySet> = r2;

     label5:
        goto label3;

     label6:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public java.util.Enumeration keys()
    {
        java.util.Hashtable r0;
        java.util.Hashtable$KeyEnumeration r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: java.util.Hashtable;

        entermonitor r0;

     label1:
        $r3 = new java.util.Hashtable$KeyEnumeration;

        specialinvoke $r3.<java.util.Hashtable$KeyEnumeration: void <init>(java.util.Hashtable,java.util.Hashtable$1)>(r0, null);

        r1 = $r3;

     label2:
        exitmonitor r0;

        return r1;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r2, r7, $r9;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.util.Hashtable$HashtableEntry[] r3;
        java.util.Hashtable$HashtableEntry r4, r5, $r8;
        java.lang.Throwable r6, $r11;
        java.lang.NullPointerException $r10, $r12;
        boolean $z0;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        entermonitor r0;

        if r1 != null goto label03;

     label01:
        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r12;

     label02:
        $r11 := @caughtexception;

        r6 = $r11;

        exitmonitor r0;

        throw r6;

     label03:
        if r2 != null goto label05;

     label04:
        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("value == null");

        throw $r10;

     label05:
        i0 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r3 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        $i3 = lengthof r3;

        $i4 = -1 + $i3;

        i1 = i0 & $i4;

        r4 = r3[i1];

     label06:
        r5 = r4;

     label07:
        if r5 == null goto label12;

     label08:
        $i11 = r5.<java.util.Hashtable$HashtableEntry: int hash>;

        if $i11 != i0 goto label10;

        $r9 = r5.<java.util.Hashtable$HashtableEntry: java.lang.Object key>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label10;

        r7 = r5.<java.util.Hashtable$HashtableEntry: java.lang.Object value>;

        r5.<java.util.Hashtable$HashtableEntry: java.lang.Object value> = r2;

     label09:
        exitmonitor r0;

        return r7;

     label10:
        r5 = r5.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

     label11:
        goto label07;

     label12:
        $i5 = r0.<java.util.Hashtable: int modCount>;

        $i7 = 1 + $i5;

        r0.<java.util.Hashtable: int modCount> = $i7;

        i2 = r0.<java.util.Hashtable: int size>;

        $i6 = i2 + 1;

        r0.<java.util.Hashtable: int size> = $i6;

        $i8 = r0.<java.util.Hashtable: int threshold>;

        if i2 <= $i8 goto label13;

        virtualinvoke r0.<java.util.Hashtable: void rehash()>();

        r3 = specialinvoke r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] doubleCapacity()>();

        $i10 = lengthof r3;

        $i9 = -1 + $i10;

        i1 = i0 & $i9;

        r4 = r3[i1];

     label13:
        $r8 = new java.util.Hashtable$HashtableEntry;

        specialinvoke $r8.<java.util.Hashtable$HashtableEntry: void <init>(java.lang.Object,java.lang.Object,int,java.util.Hashtable$HashtableEntry)>(r1, r2, i0, r4);

        r3[i1] = $r8;

     label14:
        r7 = null;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
        catch java.lang.Throwable from label12 to label13 with label02;
        catch java.lang.Throwable from label13 to label14 with label02;
    }

    public void putAll(java.util.Map)
    {
        java.util.Hashtable r0;
        java.util.Map r1;
        java.lang.Throwable r2, $r10;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        int $i0;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r7, $r8;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.util.Map;

        entermonitor r0;

     label1:
        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke r0.<java.util.Hashtable: void ensureCapacity(int)>($i0);

        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

     label3:
        goto label2;

     label4:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r0;

        throw r2;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    protected void rehash()
    {
        java.util.Hashtable r0;

        r0 := @this: java.util.Hashtable;

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r6, $r7;
        java.lang.Throwable r2, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Hashtable$HashtableEntry[] r3;
        java.util.Hashtable$HashtableEntry r4, r5, $r8, $r10;
        boolean $z0;

        r0 := @this: java.util.Hashtable;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label01:
        i0 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r3 = r0.<java.util.Hashtable: java.util.Hashtable$HashtableEntry[] table>;

        $i2 = lengthof r3;

        $i3 = -1 + $i2;

        i1 = i0 & $i3;

        r4 = r3[i1];

     label02:
        r5 = null;

     label03:
        if r4 == null goto label15;

     label04:
        $i4 = r4.<java.util.Hashtable$HashtableEntry: int hash>;

        if $i4 != i0 goto label12;

        $r7 = r4.<java.util.Hashtable$HashtableEntry: java.lang.Object key>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label12;

     label05:
        if r5 != null goto label09;

     label06:
        $r10 = r4.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

        r3[i1] = $r10;

     label07:
        $i6 = r0.<java.util.Hashtable: int modCount>;

        $i5 = 1 + $i6;

        r0.<java.util.Hashtable: int modCount> = $i5;

        $i8 = r0.<java.util.Hashtable: int size>;

        $i7 = -1 + $i8;

        r0.<java.util.Hashtable: int size> = $i7;

        r6 = r4.<java.util.Hashtable$HashtableEntry: java.lang.Object value>;

     label08:
        exitmonitor r0;

        return r6;

     label09:
        $r8 = r4.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

        r5.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next> = $r8;

     label10:
        goto label07;

     label11:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r0;

        throw r2;

     label12:
        r5 = r4;

     label13:
        r4 = r4.<java.util.Hashtable$HashtableEntry: java.util.Hashtable$HashtableEntry next>;

     label14:
        goto label03;

     label15:
        r6 = null;

        goto label08;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label13 to label14 with label11;
    }

    public int size()
    {
        java.util.Hashtable r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: java.util.Hashtable;

        entermonitor r0;

     label1:
        i0 = r0.<java.util.Hashtable: int size>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        java.util.Hashtable r0;
        java.lang.StringBuilder r1, $r10;
        java.lang.Throwable r2, $r18;
        java.util.Iterator r3;
        boolean z0;
        java.util.Map$Entry r4;
        java.lang.Object r5, r7, $r14;
        java.lang.String r6, r8, r9;
        int $i0, $i1;
        java.util.Set $r12;

        r0 := @this: java.util.Hashtable;

        entermonitor r0;

     label01:
        $r10 = new java.lang.StringBuilder;

        $i0 = r0.<java.util.Hashtable: int size>;

        $i1 = 15 * $i0;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i1);

        r1 = $r10;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $r12 = virtualinvoke r0.<java.util.Hashtable: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

        z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

     label02:
        if z0 == 0 goto label16;

     label03:
        $r14 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r14;

        r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

     label04:
        if r5 != r0 goto label12;

        r6 = "(this Map)";

     label05:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

     label06:
        if r7 != r0 goto label14;

        r8 = "(this Map)";

     label07:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

     label08:
        if z0 == 0 goto label02;

     label09:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label10:
        goto label02;

     label11:
        $r18 := @caughtexception;

        r2 = $r18;

        exitmonitor r0;

        throw r2;

     label12:
        r6 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

     label13:
        goto label05;

     label14:
        r8 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

     label15:
        goto label07;

     label16:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label17:
        exitmonitor r0;

        return r9;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label14 to label15 with label11;
        catch java.lang.Throwable from label16 to label17 with label11;
    }

    public java.util.Collection values()
    {
        java.util.Hashtable r0;
        java.lang.Throwable r1, $r4;
        java.util.Collection r2;
        java.util.Hashtable$Values $r3;

        r0 := @this: java.util.Hashtable;

        entermonitor r0;

     label1:
        r2 = r0.<java.util.Hashtable: java.util.Collection values>;

     label2:
        if r2 == null goto label4;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r3 = new java.util.Hashtable$Values;

        specialinvoke $r3.<java.util.Hashtable$Values: void <init>(java.util.Hashtable,java.util.Hashtable$1)>(r0, null);

        r2 = $r3;

        r0.<java.util.Hashtable: java.util.Collection values> = r2;

     label5:
        goto label3;

     label6:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
}
