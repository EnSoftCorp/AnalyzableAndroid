final class java.lang.reflect.AbstractMethod$GenericInfo extends java.lang.Object
{
    final java.lang.reflect.TypeVariable[] formalTypeParameters;
    final libcore.reflect.ListOfTypes genericExceptionTypes;
    final libcore.reflect.ListOfTypes genericParameterTypes;
    final java.lang.reflect.Type genericReturnType;

    void <init>(libcore.reflect.ListOfTypes, libcore.reflect.ListOfTypes, java.lang.reflect.Type, java.lang.reflect.TypeVariable[])
    {
        java.lang.reflect.AbstractMethod$GenericInfo r0;
        libcore.reflect.ListOfTypes r1, r2;
        java.lang.reflect.Type r3;
        java.lang.reflect.TypeVariable[] r4;

        r0 := @this: java.lang.reflect.AbstractMethod$GenericInfo;

        r1 := @parameter0: libcore.reflect.ListOfTypes;

        r2 := @parameter1: libcore.reflect.ListOfTypes;

        r3 := @parameter2: java.lang.reflect.Type;

        r4 := @parameter3: java.lang.reflect.TypeVariable[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.reflect.AbstractMethod$GenericInfo: libcore.reflect.ListOfTypes genericExceptionTypes> = r1;

        r0.<java.lang.reflect.AbstractMethod$GenericInfo: libcore.reflect.ListOfTypes genericParameterTypes> = r2;

        r0.<java.lang.reflect.AbstractMethod$GenericInfo: java.lang.reflect.Type genericReturnType> = r3;

        r0.<java.lang.reflect.AbstractMethod$GenericInfo: java.lang.reflect.TypeVariable[] formalTypeParameters> = r4;

        return;
    }
}
