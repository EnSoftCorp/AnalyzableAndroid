final class java.util.concurrent.ForkJoinPool$WorkQueue extends java.lang.Object
{
    private static final int ABASE;
    private static final int ASHIFT;
    static final int INITIAL_QUEUE_CAPACITY;
    static final int MAXIMUM_QUEUE_CAPACITY;
    private static final long QLOCK;
    private static final sun.misc.Unsafe U;
    java.util.concurrent.ForkJoinTask[] array;
    volatile int base;
    volatile java.util.concurrent.ForkJoinTask currentJoin;
    java.util.concurrent.ForkJoinTask currentSteal;
    volatile int eventCount;
    int hint;
    final int mode;
    int nextWait;
    int nsteals;
    final java.util.concurrent.ForkJoinWorkerThread owner;
    volatile long pad00;
    volatile long pad01;
    volatile long pad02;
    volatile long pad03;
    volatile long pad04;
    volatile long pad05;
    volatile long pad06;
    volatile java.lang.Object pad10;
    volatile java.lang.Object pad11;
    volatile java.lang.Object pad12;
    volatile java.lang.Object pad13;
    volatile java.lang.Object pad14;
    volatile java.lang.Object pad15;
    volatile java.lang.Object pad16;
    volatile java.lang.Object pad17;
    volatile java.lang.Object pad18;
    volatile java.lang.Object pad19;
    volatile java.lang.Object pad1a;
    volatile java.lang.Object pad1b;
    volatile java.lang.Object pad1c;
    volatile java.lang.Object pad1d;
    volatile java.lang.Thread parker;
    final java.util.concurrent.ForkJoinPool pool;
    int poolIndex;
    volatile int qlock;
    int seed;
    int top;

    static void <clinit>()
    {
        java.lang.Exception r0, $r7;
        int i0, $i2, $i3, $i4, $i5, $i6;
        sun.misc.Unsafe $r1, $r3, $r5, $r6;
        java.lang.Class $r2;
        java.lang.reflect.Field $r4;
        long $l1;
        java.lang.Error $r8, $r9;

        <java.util.concurrent.ForkJoinPool$WorkQueue: int MAXIMUM_QUEUE_CAPACITY> = 67108864;

        <java.util.concurrent.ForkJoinPool$WorkQueue: int INITIAL_QUEUE_CAPACITY> = 8192;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U> = $r1;

        $r3 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $r2 = class "java/util/concurrent/ForkJoinPool$WorkQueue";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("qlock");

        $l1 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.ForkJoinPool$WorkQueue: long QLOCK> = $l1;

        $r5 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $i2 = virtualinvoke $r5.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Ljava/util/concurrent/ForkJoinTask;");

        <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE> = $i2;

        $r6 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        i0 = virtualinvoke $r6.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Ljava/util/concurrent/ForkJoinTask;");

     label2:
        $i3 = i0 - 1;

        $i4 = i0 & $i3;

        if $i4 == 0 goto label5;

     label3:
        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.String)>("data type scale not a power of two");

        throw $r8;

     label4:
        $r7 := @caughtexception;

        r0 = $r7;

        $r9 = new java.lang.Error;

        specialinvoke $r9.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r9;

     label5:
        $i5 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i6 = 31 - $i5;

        <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT> = $i6;

     label6:
        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label3 to label4 with label4;
        catch java.lang.Exception from label5 to label6 with label4;
    }

    void <init>(java.util.concurrent.ForkJoinPool, java.util.concurrent.ForkJoinWorkerThread, int, int)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinPool r1;
        java.util.concurrent.ForkJoinWorkerThread r2;
        int i0, i1;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool;

        r2 := @parameter1: java.util.concurrent.ForkJoinWorkerThread;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinPool pool> = r1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinWorkerThread owner> = r2;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int mode> = i0;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int seed> = i1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = 4096;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base> = 4096;

        return;
    }

    private void pollAndExecAll()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

     label1:
        r1 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask poll()>();

        if r1 == null goto label2;

        virtualinvoke r1.<java.util.concurrent.ForkJoinTask: int doExec()>();

        goto label1;

     label2:
        return;
    }

    private void popAndExecAll()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask[] r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        sun.misc.Unsafe r2, $r5;
        long l2;
        java.util.concurrent.ForkJoinTask r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

     label1:
        r1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r1 == null goto label2;

        $i3 = lengthof r1;

        i0 = -1 + $i3;

        if i0 < 0 goto label2;

        $i4 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i1 = -1 + $i4;

        $i5 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i6 = i1 - $i5;

        if $i6 < 0 goto label2;

        r2 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $i8 = i0 & i1;

        $i7 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i10 = $i8 << $i7;

        $i9 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i11 = $i10 + $i9;

        l2 = (long) $i11;

        $r4 = virtualinvoke r2.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r1, l2);

        r3 = (java.util.concurrent.ForkJoinTask) $r4;

        if r3 == null goto label2;

        $r5 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $z0 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l2, r3, null);

        if $z0 == 0 goto label1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = i1;

        virtualinvoke r3.<java.util.concurrent.ForkJoinTask: int doExec()>();

        goto label1;

     label2:
        return;
    }

    final void cancelAll()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1, $r2, $r3;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        $r2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        staticinvoke <java.util.concurrent.ForkJoinTask: void cancelIgnoringExceptions(java.util.concurrent.ForkJoinTask)>($r2);

        $r3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        staticinvoke <java.util.concurrent.ForkJoinTask: void cancelIgnoringExceptions(java.util.concurrent.ForkJoinTask)>($r3);

     label1:
        r1 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask poll()>();

        if r1 == null goto label2;

        staticinvoke <java.util.concurrent.ForkJoinTask: void cancelIgnoringExceptions(java.util.concurrent.ForkJoinTask)>(r1);

        goto label1;

     label2:
        return;
    }

    final java.util.concurrent.ForkJoinTask[] growArray()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask[] r1, r2;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i20;
        java.util.concurrent.ForkJoinTask r3;
        long $l16, $l18, $l19;
        java.lang.Object $r4;
        sun.misc.Unsafe $r5, $r6, $r8;
        boolean $z0;
        java.util.concurrent.RejectedExecutionException $r7;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r1 == null goto label2;

        $i20 = lengthof r1;

        i0 = $i20 << 1;

     label1:
        if i0 <= 67108864 goto label3;

        $r7 = new java.util.concurrent.RejectedExecutionException;

        specialinvoke $r7.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>("Queue capacity exceeded");

        throw $r7;

     label2:
        i0 = 8192;

        goto label1;

     label3:
        r2 = newarray (java.util.concurrent.ForkJoinTask)[i0];

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array> = r2;

        if r1 == null goto label6;

        $i7 = lengthof r1;

        i1 = -1 + $i7;

        if i1 < 0 goto label6;

        i2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i8 = i2 - i3;

        if $i8 <= 0 goto label6;

        i4 = i0 - 1;

     label4:
        $i10 = i3 & i1;

        $i9 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i13 = $i10 << $i9;

        $i11 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i5 = $i13 + $i11;

        $i15 = i3 & i4;

        $i12 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i17 = $i15 << $i12;

        $i14 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i6 = $i17 + $i14;

        $r5 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l16 = (long) i5;

        $r4 = virtualinvoke $r5.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, $l16);

        r3 = (java.util.concurrent.ForkJoinTask) $r4;

        if r3 == null goto label5;

        $r6 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l18 = (long) i5;

        $z0 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, $l18, r3, null);

        if $z0 == 0 goto label5;

        $r8 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l19 = (long) i6;

        virtualinvoke $r8.<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>(r2, $l19, r3);

     label5:
        i3 = i3 + 1;

        if i3 != i2 goto label4;

     label6:
        return r2;
    }

    final boolean isApparentlyUnblocked()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinWorkerThread r1;
        java.lang.Thread$State r2, $r3, $r4, $r5;
        int $i0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        $i0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i0 < 0 goto label1;

        r1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinWorkerThread owner>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<java.lang.Thread: java.lang.Thread$State getState()>();

        $r3 = <java.lang.Thread$State: java.lang.Thread$State BLOCKED>;

        if r2 == $r3 goto label1;

        $r4 = <java.lang.Thread$State: java.lang.Thread$State WAITING>;

        if r2 == $r4 goto label1;

        $r5 = <java.lang.Thread$State: java.lang.Thread$State TIMED_WAITING>;

        if r2 == $r5 goto label1;

        return 1;

     label1:
        return 0;
    }

    final boolean isEmpty()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.concurrent.ForkJoinTask[] r1;
        long $l10, $l11, $l12;
        sun.misc.Unsafe $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        i0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i2 = i0 - i1;

        if i2 >= 0 goto label1;

        if i2 != -1 goto label2;

        r1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r1 == null goto label1;

        $i4 = lengthof r1;

        i3 = -1 + $i4;

        if i3 < 0 goto label1;

        $r2 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $i5 = i1 - 1;

        $i7 = i3 & $i5;

        $i6 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i8 = $i7 << $i6;

        $l11 = (long) $i8;

        $i9 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $l10 = (long) $i9;

        $l12 = $l11 + $l10;

        $r3 = virtualinvoke $r2.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r1, $l12);

        if $r3 != null goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    final java.util.concurrent.ForkJoinTask nextLocalTask()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        int $i0;
        java.util.concurrent.ForkJoinTask $r1, $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        $i0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int mode>;

        if $i0 != 0 goto label1;

        $r2 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask pop()>();

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask poll()>();

        return $r1;
    }

    final int nextSeed()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        i0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int seed>;

        $i4 = i0 << 13;

        i1 = i0 ^ $i4;

        $i5 = i1 >>> 17;

        i2 = i1 ^ $i5;

        $i6 = i2 << 5;

        i3 = i2 ^ $i6;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int seed> = i3;

        return i3;
    }

    final java.util.concurrent.ForkJoinTask peek()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        long $l9;
        sun.misc.Unsafe $r2;
        java.lang.Object $r3;
        java.util.concurrent.ForkJoinTask $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r1 == null goto label1;

        $i3 = lengthof r1;

        i0 = -1 + $i3;

        if i0 >= 0 goto label2;

     label1:
        return null;

     label2:
        $i4 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int mode>;

        if $i4 != 0 goto label4;

        $i10 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i1 = -1 + $i10;

     label3:
        $i6 = i1 & i0;

        $i5 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i8 = $i6 << $i5;

        $i7 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i2 = $i8 + $i7;

        $r2 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l9 = (long) i2;

        $r3 = virtualinvoke $r2.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, $l9);

        $r4 = (java.util.concurrent.ForkJoinTask) $r3;

        return $r4;

     label4:
        i1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        goto label3;
    }

    final java.util.concurrent.ForkJoinTask poll()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16;
        java.util.concurrent.ForkJoinTask[] r1;
        java.util.concurrent.ForkJoinTask r2;
        long $l10, $l15;
        sun.misc.Unsafe $r3, $r5;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

     label1:
        i0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i3 = i0 - $i2;

        if $i3 >= 0 goto label3;

        r1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r1 == null goto label3;

        $i4 = lengthof r1;

        $i5 = -1 + $i4;

        $i7 = i0 & $i5;

        $i6 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i9 = $i7 << $i6;

        $i8 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i1 = $i9 + $i8;

        $r3 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l10 = (long) i1;

        $r4 = virtualinvoke $r3.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, $l10);

        r2 = (java.util.concurrent.ForkJoinTask) $r4;

        if r2 == null goto label2;

        $i13 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i13 != i0 goto label1;

        $r5 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l15 = (long) i1;

        $z0 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, $l15, r2, null);

        if $z0 == 0 goto label1;

        $i16 = i0 + 1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base> = $i16;

        return r2;

     label2:
        $i12 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i12 != i0 goto label1;

        $i14 = i0 + 1;

        $i11 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i14 != $i11 goto label4;

     label3:
        return null;

     label4:
        staticinvoke <java.lang.Thread: void yield()>();

        goto label1;
    }

    final boolean pollAndExecCC(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13;
        java.util.concurrent.ForkJoinTask[] r2;
        long l1;
        java.lang.Object r3;
        java.util.concurrent.CountedCompleter r4, r5;
        sun.misc.Unsafe $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

     label1:
        i0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i3 = i0 - $i2;

        if $i3 >= 0 goto label2;

        r2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r2 == null goto label2;

        $i4 = lengthof r2;

        $i5 = -1 + $i4;

        $i7 = i0 & $i5;

        $i6 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i10 = $i7 << $i6;

        $i8 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i9 = $i10 + $i8;

        l1 = (long) $i9;

        $r6 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        r3 = virtualinvoke $r6.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r2, l1);

        if r3 == null goto label2;

        $z0 = r3 instanceof java.util.concurrent.CountedCompleter;

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        r4 = (java.util.concurrent.CountedCompleter) r3;

        r5 = r4;

     label4:
        if r5 != r1 goto label5;

        $i11 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i11 != i0 goto label1;

        $r7 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $z1 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l1, r4, null);

        if $z1 == 0 goto label1;

        $i13 = i0 + 1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base> = $i13;

        virtualinvoke r4.<java.util.concurrent.CountedCompleter: int doExec()>();

        return 1;

     label5:
        r5 = r5.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        if r5 != null goto label4;

        goto label2;
    }

    final java.util.concurrent.ForkJoinTask pollAt(int)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11;
        java.util.concurrent.ForkJoinTask[] r1;
        java.util.concurrent.ForkJoinTask r2;
        long $l8, $l10;
        sun.misc.Unsafe $r3, $r5;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        i0 := @parameter0: int;

        r1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r1 == null goto label1;

        $i2 = lengthof r1;

        $i3 = -1 + $i2;

        $i5 = i0 & $i3;

        $i4 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i7 = $i5 << $i4;

        $i6 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i1 = $i7 + $i6;

        $r3 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l8 = (long) i1;

        $r4 = virtualinvoke $r3.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, $l8);

        r2 = (java.util.concurrent.ForkJoinTask) $r4;

        if r2 == null goto label1;

        $i9 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i9 != i0 goto label1;

        $r5 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l10 = (long) i1;

        $z0 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, $l10, r2, null);

        if $z0 == 0 goto label1;

        $i11 = i0 + 1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base> = $i11;

        return r2;

     label1:
        return null;
    }

    final java.util.concurrent.ForkJoinTask pop()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask[] r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        long l2;
        java.util.concurrent.ForkJoinTask r2;
        java.lang.Object $r3;
        sun.misc.Unsafe $r4, $r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r1 == null goto label2;

        $i3 = lengthof r1;

        i0 = -1 + $i3;

        if i0 < 0 goto label2;

     label1:
        $i4 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i1 = -1 + $i4;

        $i5 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i6 = i1 - $i5;

        if $i6 < 0 goto label2;

        $i8 = i0 & i1;

        $i7 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i10 = $i8 << $i7;

        $i9 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i11 = $i10 + $i9;

        l2 = (long) $i11;

        $r4 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $r3 = virtualinvoke $r4.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r1, l2);

        r2 = (java.util.concurrent.ForkJoinTask) $r3;

        if r2 != null goto label3;

     label2:
        return null;

     label3:
        $r5 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $z0 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l2, r2, null);

        if $z0 == 0 goto label1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = i1;

        return r2;
    }

    final void push(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i11;
        java.util.concurrent.ForkJoinTask[] r2;
        java.util.concurrent.ForkJoinPool r3;
        long $l10;
        sun.misc.Unsafe $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        i0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        r2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r2 == null goto label1;

        $i5 = lengthof r2;

        i1 = -1 + $i5;

        $i7 = i1 & i0;

        $i6 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i9 = $i7 << $i6;

        $i8 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i2 = $i9 + $i8;

        $r4 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l10 = (long) i2;

        virtualinvoke $r4.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r2, $l10, r1);

        i3 = i0 + 1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = i3;

        $i11 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i4 = i3 - $i11;

        if i4 > 2 goto label2;

        r3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinPool pool>;

        if r3 == null goto label1;

        virtualinvoke r3.<java.util.concurrent.ForkJoinPool: void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue)>(r0);

     label1:
        return;

     label2:
        if i4 < i1 goto label1;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] growArray()>();

        return;
    }

    final int queueSize()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        $i2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i0 = $i2 - $i1;

        if i0 < 0 goto label1;

        return 0;

     label1:
        $i3 = neg i0;

        return $i3;
    }

    final void runSubtask(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1, r2;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r1 == null goto label1;

        r2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal> = r1;

        virtualinvoke r1.<java.util.concurrent.ForkJoinTask: int doExec()>();

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal> = r2;

     label1:
        return;
    }

    final void runTask(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1;
        int $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r1 == null goto label1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal> = r1;

        virtualinvoke r1.<java.util.concurrent.ForkJoinTask: int doExec()>();

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal> = null;

        $i1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals>;

        $i2 = 1 + $i1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals> = $i2;

        $i4 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i5 = $i4 - $i3;

        if $i5 >= 0 goto label1;

        $i6 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int mode>;

        if $i6 != 0 goto label2;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: void popAndExecAll()>();

     label1:
        return;

     label2:
        specialinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: void pollAndExecAll()>();

        return;
    }

    final boolean tryRemoveAndExec(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1, r3;
        boolean z0, z1, z2, z3, z4;
        java.util.concurrent.ForkJoinTask[] r2;
        int i0, i1, i2, i3, i4, i5, i6, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i17, $i18, $i19;
        long $l12, $l16, $l20, $l21;
        java.lang.Object $r4;
        sun.misc.Unsafe $r5, $r6, $r8, $r9;
        java.util.concurrent.ForkJoinPool$EmptyTask $r7;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        z0 = 1;

        z1 = 1;

        r2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        z2 = 0;

        if r2 == null goto label2;

        $i9 = lengthof r2;

        i0 = -1 + $i9;

        z2 = 0;

        if i0 < 0 goto label2;

        i1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i3 = i1 - i2;

        z2 = 0;

        if i3 <= 0 goto label2;

     label1:
        i1 = i1 + -1;

        $i11 = i1 & i0;

        $i8 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i13 = $i11 << $i8;

        $i10 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i4 = $i13 + $i10;

        $r5 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l12 = (long) i4;

        $r4 = virtualinvoke $r5.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r2, $l12);

        r3 = (java.util.concurrent.ForkJoinTask) $r4;

        z2 = 0;

        if r3 != null goto label4;

     label2:
        if z2 == 0 goto label3;

        virtualinvoke r1.<java.util.concurrent.ForkJoinTask: int doExec()>();

     label3:
        return z0;

     label4:
        if r3 != r1 goto label6;

        $i19 = i1 + 1;

        $i18 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i19 != $i18 goto label5;

        $r9 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l20 = (long) i4;

        z4 = virtualinvoke $r9.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, $l20, r1, null);

        z2 = 0;

        if z4 == 0 goto label2;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = i1;

        z2 = 1;

        goto label2;

     label5:
        i6 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        z2 = 0;

        if i6 != i2 goto label2;

        $r8 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l21 = (long) i4;

        $r7 = new java.util.concurrent.ForkJoinPool$EmptyTask;

        specialinvoke $r7.<java.util.concurrent.ForkJoinPool$EmptyTask: void <init>()>();

        z2 = virtualinvoke $r8.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, $l21, r1, $r7);

        goto label2;

     label6:
        $i15 = r3.<java.util.concurrent.ForkJoinTask: int status>;

        if $i15 < 0 goto label8;

        z1 = 0;

     label7:
        i3 = i3 + -1;

        if i3 != 0 goto label1;

        z2 = 0;

        if z1 != 0 goto label2;

        i5 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        z2 = 0;

        if i5 != i2 goto label2;

        z2 = 0;

        z0 = 0;

        goto label2;

     label8:
        $i17 = i1 + 1;

        $i14 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i17 != $i14 goto label7;

        $r6 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l16 = (long) i4;

        z3 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, $l16, r3, null);

        z2 = 0;

        if z3 == 0 goto label2;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = i1;

        z2 = 0;

        goto label2;
    }

    final boolean tryUnpush(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1;
        java.util.concurrent.ForkJoinTask[] r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        sun.misc.Unsafe r3;
        long $l10;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        r2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r2 == null goto label1;

        i0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if i0 == $i3 goto label1;

        r3 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $i4 = lengthof r2;

        i1 = -1 + $i4;

        i2 = i0 - 1;

        $i6 = i1 & i2;

        $i5 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i8 = $i6 << $i5;

        $i7 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i9 = $i8 + $i7;

        $l10 = (long) $i9;

        $z0 = virtualinvoke r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, $l10, r1, null);

        if $z0 == 0 goto label1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = i2;

        return 1;

     label1:
        return 0;
    }
}
