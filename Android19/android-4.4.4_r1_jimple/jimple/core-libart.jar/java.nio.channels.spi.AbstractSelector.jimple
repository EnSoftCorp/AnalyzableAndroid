public abstract class java.nio.channels.spi.AbstractSelector extends java.nio.channels.Selector
{
    private final java.util.Set cancelledKeysSet;
    private final java.util.concurrent.atomic.AtomicBoolean isOpen;
    private java.nio.channels.spi.SelectorProvider provider;
    private final java.lang.Runnable wakeupRunnable;

    protected void <init>(java.nio.channels.spi.SelectorProvider)
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        java.util.HashSet $r3;
        java.nio.channels.spi.AbstractSelector$1 $r4;

        r0 := @this: java.nio.channels.spi.AbstractSelector;

        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        specialinvoke r0.<java.nio.channels.Selector: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<java.nio.channels.spi.AbstractSelector: java.util.concurrent.atomic.AtomicBoolean isOpen> = $r2;

        r0.<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider> = null;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeysSet> = $r3;

        $r4 = new java.nio.channels.spi.AbstractSelector$1;

        specialinvoke $r4.<java.nio.channels.spi.AbstractSelector$1: void <init>(java.nio.channels.spi.AbstractSelector)>(r0);

        r0.<java.nio.channels.spi.AbstractSelector: java.lang.Runnable wakeupRunnable> = $r4;

        r0.<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider> = r1;

        return;
    }

    protected final void begin()
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.lang.Thread $r1;
        java.lang.Runnable $r2;

        r0 := @this: java.nio.channels.spi.AbstractSelector;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = r0.<java.nio.channels.spi.AbstractSelector: java.lang.Runnable wakeupRunnable>;

        virtualinvoke $r1.<java.lang.Thread: void pushInterruptAction$(java.lang.Runnable)>($r2);

        return;
    }

    void cancel(java.nio.channels.SelectionKey)
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.nio.channels.SelectionKey r1;
        java.util.Set r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: java.nio.channels.spi.AbstractSelector;

        r1 := @parameter0: java.nio.channels.SelectionKey;

        r2 = r0.<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeysSet>;

        entermonitor r2;

     label1:
        $r4 = r0.<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeysSet>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected final java.util.Set cancelledKeys()
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.util.Set $r1;

        r0 := @this: java.nio.channels.spi.AbstractSelector;

        $r1 = r0.<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeysSet>;

        return $r1;
    }

    public final void close() throws java.io.IOException
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: java.nio.channels.spi.AbstractSelector;

        $r1 = r0.<java.nio.channels.spi.AbstractSelector: java.util.concurrent.atomic.AtomicBoolean isOpen>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.nio.channels.spi.AbstractSelector: void implCloseSelector()>();

     label1:
        return;
    }

    protected final void deregister(java.nio.channels.spi.AbstractSelectionKey)
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.nio.channels.spi.AbstractSelectionKey r1;
        java.nio.channels.SelectableChannel $r2;
        java.nio.channels.spi.AbstractSelectableChannel $r3;

        r0 := @this: java.nio.channels.spi.AbstractSelector;

        r1 := @parameter0: java.nio.channels.spi.AbstractSelectionKey;

        $r2 = virtualinvoke r1.<java.nio.channels.spi.AbstractSelectionKey: java.nio.channels.SelectableChannel channel()>();

        $r3 = (java.nio.channels.spi.AbstractSelectableChannel) $r2;

        virtualinvoke $r3.<java.nio.channels.spi.AbstractSelectableChannel: void deregister(java.nio.channels.SelectionKey)>(r1);

        r1.<java.nio.channels.spi.AbstractSelectionKey: boolean isValid> = 0;

        return;
    }

    protected final void end()
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.lang.Thread $r1;
        java.lang.Runnable $r2;

        r0 := @this: java.nio.channels.spi.AbstractSelector;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = r0.<java.nio.channels.spi.AbstractSelector: java.lang.Runnable wakeupRunnable>;

        virtualinvoke $r1.<java.lang.Thread: void popInterruptAction$(java.lang.Runnable)>($r2);

        return;
    }

    protected abstract void implCloseSelector() throws java.io.IOException;

    public final boolean isOpen()
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: java.nio.channels.spi.AbstractSelector;

        $r1 = r0.<java.nio.channels.spi.AbstractSelector: java.util.concurrent.atomic.AtomicBoolean isOpen>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public final java.nio.channels.spi.SelectorProvider provider()
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.nio.channels.spi.SelectorProvider $r1;

        r0 := @this: java.nio.channels.spi.AbstractSelector;

        $r1 = r0.<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider>;

        return $r1;
    }

    protected abstract java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel, int, java.lang.Object);
}
