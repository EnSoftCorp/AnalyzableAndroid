public class java.io.StreamTokenizer extends java.lang.Object
{
    private static final byte TOKEN_COMMENT;
    private static final byte TOKEN_DIGIT;
    private static final byte TOKEN_QUOTE;
    private static final byte TOKEN_WHITE;
    private static final byte TOKEN_WORD;
    public static final int TT_EOF;
    public static final int TT_EOL;
    public static final int TT_NUMBER;
    private static final int TT_UNKNOWN;
    public static final int TT_WORD;
    private boolean forceLowercase;
    private java.io.Reader inReader;
    private java.io.InputStream inStream;
    private boolean isEOLSignificant;
    private boolean lastCr;
    private int lineNumber;
    public double nval;
    private int peekChar;
    private boolean pushBackToken;
    private boolean slashSlashComments;
    private boolean slashStarComments;
    public java.lang.String sval;
    private byte[] tokenTypes;
    public int ttype;

    private void <init>()
    {
        java.io.StreamTokenizer r0;
        byte[] $r1;

        r0 := @this: java.io.StreamTokenizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.io.StreamTokenizer: int ttype> = -4;

        $r1 = newarray (byte)[256];

        r0.<java.io.StreamTokenizer: byte[] tokenTypes> = $r1;

        r0.<java.io.StreamTokenizer: int lineNumber> = 1;

        r0.<java.io.StreamTokenizer: int peekChar> = -2;

        virtualinvoke r0.<java.io.StreamTokenizer: void wordChars(int,int)>(65, 90);

        virtualinvoke r0.<java.io.StreamTokenizer: void wordChars(int,int)>(97, 122);

        virtualinvoke r0.<java.io.StreamTokenizer: void wordChars(int,int)>(160, 255);

        virtualinvoke r0.<java.io.StreamTokenizer: void whitespaceChars(int,int)>(0, 32);

        virtualinvoke r0.<java.io.StreamTokenizer: void commentChar(int)>(47);

        virtualinvoke r0.<java.io.StreamTokenizer: void quoteChar(int)>(34);

        virtualinvoke r0.<java.io.StreamTokenizer: void quoteChar(int)>(39);

        virtualinvoke r0.<java.io.StreamTokenizer: void parseNumbers()>();

        return;
    }

    public void <init>(java.io.InputStream)
    {
        java.io.StreamTokenizer r0;
        java.io.InputStream r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.io.StreamTokenizer;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.StreamTokenizer: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("is == null");

        throw $r2;

     label1:
        r0.<java.io.StreamTokenizer: java.io.InputStream inStream> = r1;

        return;
    }

    public void <init>(java.io.Reader)
    {
        java.io.StreamTokenizer r0;
        java.io.Reader r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.io.StreamTokenizer;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.io.StreamTokenizer: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("r == null");

        throw $r2;

     label1:
        r0.<java.io.StreamTokenizer: java.io.Reader inReader> = r1;

        return;
    }

    private int read() throws java.io.IOException
    {
        java.io.StreamTokenizer r0;
        java.io.InputStream $r1, $r2;
        int $i0, $i1;
        java.io.Reader $r3;

        r0 := @this: java.io.StreamTokenizer;

        $r1 = r0.<java.io.StreamTokenizer: java.io.InputStream inStream>;

        if $r1 != null goto label1;

        $r3 = r0.<java.io.StreamTokenizer: java.io.Reader inReader>;

        $i1 = virtualinvoke $r3.<java.io.Reader: int read()>();

        return $i1;

     label1:
        $r2 = r0.<java.io.StreamTokenizer: java.io.InputStream inStream>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        return $i0;
    }

    public void commentChar(int)
    {
        java.io.StreamTokenizer r0;
        int i0, $i1;
        byte[] $r1, $r2;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r2[i0] = 1;

     label1:
        return;
    }

    public void eolIsSignificant(boolean)
    {
        java.io.StreamTokenizer r0;
        boolean z0;

        r0 := @this: java.io.StreamTokenizer;

        z0 := @parameter0: boolean;

        r0.<java.io.StreamTokenizer: boolean isEOLSignificant> = z0;

        return;
    }

    public int lineno()
    {
        java.io.StreamTokenizer r0;
        int $i0;

        r0 := @this: java.io.StreamTokenizer;

        $i0 = r0.<java.io.StreamTokenizer: int lineNumber>;

        return $i0;
    }

    public void lowerCaseMode(boolean)
    {
        java.io.StreamTokenizer r0;
        boolean z0;

        r0 := @this: java.io.StreamTokenizer;

        z0 := @parameter0: boolean;

        r0.<java.io.StreamTokenizer: boolean forceLowercase> = z0;

        return;
    }

    public int nextToken() throws java.io.IOException
    {
        java.io.StreamTokenizer r0;
        int i0, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i27, $i28, $i29, $i30, $i35, $i36, $i37, $i38, $i39, $i40, $i41;
        byte b1, $b12, $b13, $b15, $b32, $b34;
        java.lang.StringBuilder r1, r3, r4, $r7, $r12, $r14;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        byte[] $r5, $r18, $r19;
        java.lang.String $r6, $r10, $r11, $r17, $r20;
        char $c25, $c26, $c31, $c33;
        java.util.Locale $r16;
        double $d0;
        java.lang.Double $r21;
        java.lang.NumberFormatException $r22;

        r0 := @this: java.io.StreamTokenizer;

        $z3 = r0.<java.io.StreamTokenizer: boolean pushBackToken>;

        if $z3 == 0 goto label01;

        r0.<java.io.StreamTokenizer: boolean pushBackToken> = 0;

        $i40 = r0.<java.io.StreamTokenizer: int ttype>;

        if $i40 == -4 goto label01;

        $i41 = r0.<java.io.StreamTokenizer: int ttype>;

        return $i41;

     label01:
        r0.<java.io.StreamTokenizer: java.lang.String sval> = null;

        $i11 = r0.<java.io.StreamTokenizer: int peekChar>;

        if $i11 != -2 goto label04;

        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label02:
        $z4 = r0.<java.io.StreamTokenizer: boolean lastCr>;

        if $z4 == 0 goto label03;

        if i0 != 10 goto label03;

        r0.<java.io.StreamTokenizer: boolean lastCr> = 0;

        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label03:
        if i0 != -1 goto label05;

        r0.<java.io.StreamTokenizer: int ttype> = -1;

        return -1;

     label04:
        i0 = r0.<java.io.StreamTokenizer: int peekChar>;

        goto label02;

     label05:
        if i0 <= 255 goto label07;

        b1 = 8;

     label06:
        $b13 = b1 & 4;

        if $b13 == 0 goto label16;

        if i0 != 13 goto label10;

        $i39 = r0.<java.io.StreamTokenizer: int lineNumber>;

        $i37 = 1 + $i39;

        r0.<java.io.StreamTokenizer: int lineNumber> = $i37;

        $z10 = r0.<java.io.StreamTokenizer: boolean isEOLSignificant>;

        if $z10 == 0 goto label08;

        r0.<java.io.StreamTokenizer: boolean lastCr> = 1;

        r0.<java.io.StreamTokenizer: int peekChar> = -2;

        r0.<java.io.StreamTokenizer: int ttype> = 10;

        return 10;

     label07:
        $r5 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        b1 = $r5[i0];

        goto label06;

     label08:
        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i0 != 10 goto label09;

        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label09:
        if i0 != -1 goto label13;

        r0.<java.io.StreamTokenizer: int ttype> = -1;

        return -1;

     label10:
        if i0 != 10 goto label12;

        $i36 = r0.<java.io.StreamTokenizer: int lineNumber>;

        $i38 = 1 + $i36;

        r0.<java.io.StreamTokenizer: int lineNumber> = $i38;

        $z11 = r0.<java.io.StreamTokenizer: boolean isEOLSignificant>;

        if $z11 == 0 goto label11;

        r0.<java.io.StreamTokenizer: int peekChar> = -2;

        r0.<java.io.StreamTokenizer: int ttype> = 10;

        return 10;

     label11:
        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        goto label09;

     label12:
        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        goto label09;

     label13:
        if i0 <= 255 goto label15;

        b1 = 8;

     label14:
        goto label06;

     label15:
        $r19 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        b1 = $r19[i0];

        goto label14;

     label16:
        $b12 = b1 & 16;

        if $b12 == 0 goto label25;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(int)>(20);

        r1 = $r14;

        z0 = 0;

        if i0 != 45 goto label21;

        z1 = 1;

     label17:
        if i0 != 46 goto label18;

        z0 = 1;

     label18:
        $c33 = (char) i0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c33);

        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i0 < 48 goto label19;

        if i0 <= 57 goto label17;

     label19:
        if z0 != 0 goto label20;

        if i0 == 46 goto label17;

     label20:
        r0.<java.io.StreamTokenizer: int peekChar> = i0;

        if z1 == 0 goto label22;

        $i35 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i35 != 1 goto label22;

        r0.<java.io.StreamTokenizer: int ttype> = 45;

        return 45;

     label21:
        z1 = 0;

        z0 = 0;

        goto label17;

     label22:
        $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r20);

        $d0 = virtualinvoke $r21.<java.lang.Double: double doubleValue()>();

        r0.<java.io.StreamTokenizer: double nval> = $d0;

     label23:
        r0.<java.io.StreamTokenizer: int ttype> = -2;

        return -2;

     label24:
        $r22 := @caughtexception;

        r0.<java.io.StreamTokenizer: double nval> = 0.0;

        goto label23;

     label25:
        $b15 = b1 & 8;

        if $b15 == 0 goto label29;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(int)>(20);

        r3 = $r12;

     label26:
        $c31 = (char) i0;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c31);

        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i0 == -1 goto label27;

        if i0 >= 256 goto label26;

        $r18 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b34 = $r18[i0];

        $b32 = 24 & $b34;

        if $b32 != 0 goto label26;

     label27:
        r0.<java.io.StreamTokenizer: int peekChar> = i0;

        $r10 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<java.io.StreamTokenizer: java.lang.String sval> = $r10;

        $z9 = r0.<java.io.StreamTokenizer: boolean forceLowercase>;

        if $z9 == 0 goto label28;

        $r11 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        $r16 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r17 = virtualinvoke $r11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r16);

        r0.<java.io.StreamTokenizer: java.lang.String sval> = $r17;

     label28:
        r0.<java.io.StreamTokenizer: int ttype> = -3;

        return -3;

     label29:
        if b1 != 2 goto label49;

        i6 = i0;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r4 = $r7;

        i7 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label30:
        if i7 < 0 goto label47;

        if i7 == i6 goto label47;

        if i7 == 13 goto label47;

        if i7 == 10 goto label47;

        z2 = 1;

        if i7 != 92 goto label33;

        i8 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i8 > 55 goto label38;

        if i8 < 48 goto label38;

        i10 = i8 - 48;

        i9 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i9 > 55 goto label31;

        if i9 >= 48 goto label34;

     label31:
        z2 = 0;

     label32:
        if z2 != 0 goto label37;

        $c26 = (char) i10;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c26);

        i7 = i9;

     label33:
        if z2 == 0 goto label30;

        $c25 = (char) i7;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c25);

        i7 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        goto label30;

     label34:
        $i28 = i10 * 8;

        $i29 = i9 - 48;

        i10 = $i28 + $i29;

        i9 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i10 > 31 goto label35;

        if i9 > 55 goto label35;

        if i9 >= 48 goto label36;

     label35:
        z2 = 0;

        goto label32;

     label36:
        $i30 = i10 * 8;

        $i27 = i9 - 48;

        i10 = $i30 + $i27;

        goto label32;

     label37:
        i7 = i10;

        goto label33;

     label38:
        lookupswitch(i8)
        {
            case 97: goto label40;
            case 98: goto label41;
            case 102: goto label42;
            case 110: goto label43;
            case 114: goto label44;
            case 116: goto label45;
            case 118: goto label46;
            default: goto label39;
        };

     label39:
        i7 = i8;

        goto label33;

     label40:
        i7 = 7;

        goto label33;

     label41:
        i7 = 8;

        goto label33;

     label42:
        i7 = 12;

        goto label33;

     label43:
        i7 = 10;

        goto label33;

     label44:
        i7 = 13;

        goto label33;

     label45:
        i7 = 9;

        goto label33;

     label46:
        i7 = 11;

        goto label33;

     label47:
        if i7 != i6 goto label48;

        i7 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label48:
        r0.<java.io.StreamTokenizer: int peekChar> = i7;

        r0.<java.io.StreamTokenizer: int ttype> = i6;

        $r6 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<java.io.StreamTokenizer: java.lang.String sval> = $r6;

        $i24 = r0.<java.io.StreamTokenizer: int ttype>;

        return $i24;

     label49:
        if i0 != 47 goto label60;

        $z6 = r0.<java.io.StreamTokenizer: boolean slashSlashComments>;

        if $z6 != 0 goto label50;

        $z8 = r0.<java.io.StreamTokenizer: boolean slashStarComments>;

        if $z8 == 0 goto label60;

     label50:
        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i0 != 42 goto label56;

        $z7 = r0.<java.io.StreamTokenizer: boolean slashStarComments>;

        if $z7 == 0 goto label56;

        i4 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label51:
        i5 = i4;

        i4 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i5 != -1 goto label52;

        r0.<java.io.StreamTokenizer: int peekChar> = -1;

        r0.<java.io.StreamTokenizer: int ttype> = -1;

        return -1;

     label52:
        if i5 != 13 goto label54;

        if i4 != 10 goto label53;

        i4 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label53:
        $i22 = r0.<java.io.StreamTokenizer: int lineNumber>;

        $i23 = 1 + $i22;

        r0.<java.io.StreamTokenizer: int lineNumber> = $i23;

        goto label51;

     label54:
        if i5 != 10 goto label55;

        $i18 = r0.<java.io.StreamTokenizer: int lineNumber>;

        $i19 = 1 + $i18;

        r0.<java.io.StreamTokenizer: int lineNumber> = $i19;

        goto label51;

     label55:
        if i5 != 42 goto label51;

        if i4 != 47 goto label51;

        $i20 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        r0.<java.io.StreamTokenizer: int peekChar> = $i20;

        $i21 = virtualinvoke r0.<java.io.StreamTokenizer: int nextToken()>();

        return $i21;

     label56:
        if i0 != 47 goto label59;

        $z5 = r0.<java.io.StreamTokenizer: boolean slashSlashComments>;

        if $z5 == 0 goto label59;

     label57:
        i3 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i3 < 0 goto label58;

        if i3 == 13 goto label58;

        if i3 != 10 goto label57;

     label58:
        r0.<java.io.StreamTokenizer: int peekChar> = i3;

        $i17 = virtualinvoke r0.<java.io.StreamTokenizer: int nextToken()>();

        return $i17;

     label59:
        if b1 == 1 goto label60;

        r0.<java.io.StreamTokenizer: int peekChar> = i0;

        r0.<java.io.StreamTokenizer: int ttype> = 47;

        return 47;

     label60:
        if b1 != 1 goto label63;

     label61:
        i2 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i2 < 0 goto label62;

        if i2 == 13 goto label62;

        if i2 != 10 goto label61;

     label62:
        r0.<java.io.StreamTokenizer: int peekChar> = i2;

        $i16 = virtualinvoke r0.<java.io.StreamTokenizer: int nextToken()>();

        return $i16;

     label63:
        $i14 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        r0.<java.io.StreamTokenizer: int peekChar> = $i14;

        r0.<java.io.StreamTokenizer: int ttype> = i0;

        return i0;

        catch java.lang.NumberFormatException from label22 to label23 with label24;
    }

    public void ordinaryChar(int)
    {
        java.io.StreamTokenizer r0;
        int i0, $i1;
        byte[] $r1, $r2;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r2[i0] = 0;

     label1:
        return;
    }

    public void ordinaryChars(int, int)
    {
        java.io.StreamTokenizer r0;
        int i0, i1, i2, $i3, $i4;
        byte[] $r1, $r2, $r3;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i3 = lengthof $r1;

        if i1 <= $i3 goto label2;

        $r3 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i4 = lengthof $r3;

        i1 = -1 + $i4;

     label2:
        i2 = i0;

     label3:
        if i2 > i1 goto label4;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r2[i2] = 0;

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public void parseNumbers()
    {
        java.io.StreamTokenizer r0;
        int i0;
        byte[] r1, r2, r3;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9;

        r0 := @this: java.io.StreamTokenizer;

        i0 = 48;

     label1:
        if i0 > 57 goto label2;

        r3 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b7 = r3[i0];

        $b8 = 16 | $b7;

        $b9 = (byte) $b8;

        r3[i0] = $b9;

        i0 = i0 + 1;

        goto label1;

     label2:
        r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b1 = r1[46];

        $b2 = 16 | $b1;

        $b3 = (byte) $b2;

        r1[46] = $b3;

        r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b4 = r2[45];

        $b5 = 16 | $b4;

        $b6 = (byte) $b5;

        r2[45] = $b6;

        return;
    }

    public void pushBack()
    {
        java.io.StreamTokenizer r0;

        r0 := @this: java.io.StreamTokenizer;

        r0.<java.io.StreamTokenizer: boolean pushBackToken> = 1;

        return;
    }

    public void quoteChar(int)
    {
        java.io.StreamTokenizer r0;
        int i0, $i1;
        byte[] $r1, $r2;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r2[i0] = 2;

     label1:
        return;
    }

    public void resetSyntax()
    {
        java.io.StreamTokenizer r0;
        int i0;
        byte[] $r1;

        r0 := @this: java.io.StreamTokenizer;

        i0 = 0;

     label1:
        if i0 >= 256 goto label2;

        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void slashSlashComments(boolean)
    {
        java.io.StreamTokenizer r0;
        boolean z0;

        r0 := @this: java.io.StreamTokenizer;

        z0 := @parameter0: boolean;

        r0.<java.io.StreamTokenizer: boolean slashSlashComments> = z0;

        return;
    }

    public void slashStarComments(boolean)
    {
        java.io.StreamTokenizer r0;
        boolean z0;

        r0 := @this: java.io.StreamTokenizer;

        z0 := @parameter0: boolean;

        r0.<java.io.StreamTokenizer: boolean slashStarComments> = z0;

        return;
    }

    public java.lang.String toString()
    {
        java.io.StreamTokenizer r0;
        java.lang.StringBuilder r1, $r2;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String $r7, $r11, $r13;
        double $d0;
        byte $b4;
        byte[] $r15;
        char $c6;

        r0 := @this: java.io.StreamTokenizer;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Token[");

        $i0 = r0.<java.io.StreamTokenizer: int ttype>;

        lookupswitch($i0)
        {
            case -3: goto label7;
            case -2: goto label6;
            case -1: goto label4;
            case 10: goto label5;
            default: goto label1;
        };

     label1:
        $i2 = r0.<java.io.StreamTokenizer: int ttype>;

        if $i2 == -4 goto label2;

        $r15 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i3 = r0.<java.io.StreamTokenizer: int ttype>;

        $b4 = $r15[$i3];

        if $b4 != 2 goto label8;

     label2:
        $r13 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], line ");

        $i1 = r0.<java.io.StreamTokenizer: int lineNumber>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EOF");

        goto label3;

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EOL");

        goto label3;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n=");

        $d0 = r0.<java.io.StreamTokenizer: double nval>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        goto label3;

     label7:
        $r11 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        goto label3;

     label8:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $i5 = r0.<java.io.StreamTokenizer: int ttype>;

        $c6 = (char) $i5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        goto label3;
    }

    public void whitespaceChars(int, int)
    {
        java.io.StreamTokenizer r0;
        int i0, i1, i2, $i3, $i4;
        byte[] $r1, $r2, $r3;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i3 = lengthof $r1;

        if i1 <= $i3 goto label2;

        $r3 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i4 = lengthof $r3;

        i1 = -1 + $i4;

     label2:
        i2 = i0;

     label3:
        if i2 > i1 goto label4;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r2[i2] = 4;

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public void wordChars(int, int)
    {
        java.io.StreamTokenizer r0;
        int i0, i1, i2, $i3, $i7;
        byte[] r1, $r2, $r3;
        byte $b4, $b5, $b6;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i3 = lengthof $r2;

        if i1 <= $i3 goto label2;

        $r3 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i7 = lengthof $r3;

        i1 = -1 + $i7;

     label2:
        i2 = i0;

     label3:
        if i2 > i1 goto label4;

        r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b4 = r1[i2];

        $b5 = 8 | $b4;

        $b6 = (byte) $b5;

        r1[i2] = $b6;

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public static void <clinit>()
    {
        <java.io.StreamTokenizer: int TT_WORD> = -3;

        <java.io.StreamTokenizer: int TT_UNKNOWN> = -4;

        <java.io.StreamTokenizer: int TT_NUMBER> = -2;

        <java.io.StreamTokenizer: int TT_EOL> = 10;

        <java.io.StreamTokenizer: int TT_EOF> = -1;

        <java.io.StreamTokenizer: byte TOKEN_WORD> = 8;

        <java.io.StreamTokenizer: byte TOKEN_WHITE> = 4;

        <java.io.StreamTokenizer: byte TOKEN_QUOTE> = 2;

        <java.io.StreamTokenizer: byte TOKEN_DIGIT> = 16;

        <java.io.StreamTokenizer: byte TOKEN_COMMENT> = 1;

        return;
    }
}
