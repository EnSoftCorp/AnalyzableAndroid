public class java.util.concurrent.PriorityBlockingQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue, java.io.Serializable
{
    private static final int DEFAULT_INITIAL_CAPACITY;
    private static final int MAX_ARRAY_SIZE;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long allocationSpinLockOffset;
    private static final long serialVersionUID;
    private transient volatile int allocationSpinLock;
    private transient java.util.Comparator comparator;
    private final java.util.concurrent.locks.ReentrantLock lock;
    private final java.util.concurrent.locks.Condition notEmpty;
    private java.util.PriorityQueue q;
    private transient java.lang.Object[] queue;
    private transient int size;

    static void <clinit>()
    {
        java.lang.Exception r0, $r5;
        sun.misc.Unsafe $r1, $r3;
        java.lang.Class $r2;
        java.lang.reflect.Field $r4;
        long $l0;
        java.lang.Error $r6;

        <java.util.concurrent.PriorityBlockingQueue: long serialVersionUID> = 5595510919245408276L;

        <java.util.concurrent.PriorityBlockingQueue: int MAX_ARRAY_SIZE> = 2147483639;

        <java.util.concurrent.PriorityBlockingQueue: int DEFAULT_INITIAL_CAPACITY> = 11;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.PriorityBlockingQueue: sun.misc.Unsafe UNSAFE> = $r1;

        $r3 = <java.util.concurrent.PriorityBlockingQueue: sun.misc.Unsafe UNSAFE>;

        $r2 = class "java/util/concurrent/PriorityBlockingQueue";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("allocationSpinLock");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.PriorityBlockingQueue: long allocationSpinLockOffset> = $l0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r0 = $r5;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>()
    {
        java.util.concurrent.PriorityBlockingQueue r0;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: void <init>(int,java.util.Comparator)>(11, null);

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        int i0;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: void <init>(int,java.util.Comparator)>(i0, null);

        return;
    }

    public void <init>(int, java.util.Comparator)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        int i0;
        java.util.Comparator r1;
        java.util.concurrent.locks.ReentrantLock $r2, $r3;
        java.util.concurrent.locks.Condition $r4;
        java.lang.Object[] $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Comparator;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        if i0 >= 1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock> = $r2;

        $r3 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.Condition notEmpty> = $r4;

        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator> = r1;

        $r5 = newarray (java.lang.Object)[i0];

        r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue> = $r5;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.PriorityBlockingQueue r0, r2;
        java.util.Collection r1;
        boolean z0, z1, $z2, $z3;
        java.lang.Class r3, $r8;
        java.lang.Object[] r4;
        int i0, i1;
        java.util.concurrent.locks.ReentrantLock $r5, $r6;
        java.util.concurrent.locks.Condition $r7;
        java.lang.NullPointerException $r9;
        java.lang.Object $r10;
        java.util.Comparator $r11, $r12, $r13;
        java.util.SortedSet $r14;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        $r5 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock> = $r5;

        $r6 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.Condition notEmpty> = $r7;

        z0 = 1;

        z1 = 1;

        $z2 = r1 instanceof java.util.SortedSet;

        if $z2 == 0 goto label5;

        $r14 = (java.util.SortedSet) r1;

        $r13 = interfaceinvoke $r14.<java.util.SortedSet: java.util.Comparator comparator()>();

        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator> = $r13;

        z0 = 0;

     label1:
        r4 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof r4;

        $r8 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        if $r8 == class "[Ljava/lang/Object;" goto label2;

        r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(r4, i0, class "[Ljava/lang/Object;");

     label2:
        if z1 == 0 goto label7;

        if i0 == 1 goto label3;

        $r11 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator>;

        if $r11 == null goto label7;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label7;

        $r10 = r4[i1];

        if $r10 != null goto label6;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();

        throw $r9;

     label5:
        $z3 = r1 instanceof java.util.concurrent.PriorityBlockingQueue;

        if $z3 == 0 goto label1;

        r2 = (java.util.concurrent.PriorityBlockingQueue) r1;

        $r12 = virtualinvoke r2.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator()>();

        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator> = $r12;

        r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        z1 = 0;

        if r3 != class "java/util/concurrent/PriorityBlockingQueue" goto label1;

        z0 = 0;

        z1 = 0;

        goto label1;

     label6:
        i1 = i1 + 1;

        goto label4;

     label7:
        r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue> = r4;

        r0.<java.util.concurrent.PriorityBlockingQueue: int size> = i0;

        if z0 == 0 goto label8;

        specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: void heapify()>();

     label8:
        return;
    }

    private java.lang.Object dequeue()
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        int i0, $i1;
        java.lang.Object[] r1;
        java.lang.Object r2, r3;
        java.util.Comparator r4;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        $i1 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

        i0 = -1 + $i1;

        if i0 >= 0 goto label1;

        return null;

     label1:
        r1 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        r2 = r1[0];

        r3 = r1[i0];

        r1[i0] = null;

        r4 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator>;

        if r4 != null goto label3;

        staticinvoke <java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>(0, r3, r1, i0);

     label2:
        r0.<java.util.concurrent.PriorityBlockingQueue: int size> = i0;

        return r2;

     label3:
        staticinvoke <java.util.concurrent.PriorityBlockingQueue: void siftDownUsingComparator(int,java.lang.Object,java.lang.Object[],int,java.util.Comparator)>(0, r3, r1, i0, r4);

        goto label2;
    }

    private void heapify()
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.lang.Object[] r1;
        int i0, i1, i2, i3, $i4;
        java.util.Comparator r2;
        java.lang.Object $r3, $r4;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        i0 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

        $i4 = i0 >>> 1;

        i1 = -1 + $i4;

        r2 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator>;

        if r2 != null goto label2;

        i3 = i1;

     label1:
        if i3 < 0 goto label4;

        $r4 = r1[i3];

        staticinvoke <java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>(i3, $r4, r1, i0);

        i3 = i3 + -1;

        goto label1;

     label2:
        i2 = i1;

     label3:
        if i2 < 0 goto label4;

        $r3 = r1[i2];

        staticinvoke <java.util.concurrent.PriorityBlockingQueue: void siftDownUsingComparator(int,java.lang.Object,java.lang.Object[],int,java.util.Comparator)>(i2, $r3, r1, i0, r2);

        i2 = i2 + -1;

        goto label3;

     label4:
        return;
    }

    private int indexOf(java.lang.Object)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.lang.Object r1, $r3;
        java.lang.Object[] r2;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label3;

        r2 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        i0 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.io.ObjectInputStream r1;
        java.lang.Throwable r2, $r8;
        java.util.PriorityQueue $r3, $r5, $r7;
        int $i0;
        java.lang.Object[] $r4;
        java.util.Comparator $r6;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.io.ObjectInputStream;

     label1:
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r3 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.PriorityQueue q>;

        $i0 = virtualinvoke $r3.<java.util.PriorityQueue: int size()>();

        $r4 = newarray (java.lang.Object)[$i0];

        r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue> = $r4;

        $r5 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.PriorityQueue q>;

        $r6 = virtualinvoke $r5.<java.util.PriorityQueue: java.util.Comparator comparator()>();

        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator> = $r6;

        $r7 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.PriorityQueue q>;

        virtualinvoke r0.<java.util.concurrent.PriorityBlockingQueue: boolean addAll(java.util.Collection)>($r7);

     label2:
        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.PriorityQueue q> = null;

        return;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.PriorityQueue q> = null;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void removeAt(int)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        int i0, i1, $i2;
        java.lang.Object[] r1;
        java.lang.Object r2, $r4;
        java.util.Comparator r3;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        i0 := @parameter0: int;

        r1 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        $i2 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

        i1 = -1 + $i2;

        if i1 != i0 goto label2;

        r1[i0] = null;

     label1:
        r0.<java.util.concurrent.PriorityBlockingQueue: int size> = i1;

        return;

     label2:
        r2 = r1[i1];

        r1[i1] = null;

        r3 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator>;

        if r3 != null goto label4;

        staticinvoke <java.util.concurrent.PriorityBlockingQueue: void siftDownComparable(int,java.lang.Object,java.lang.Object[],int)>(i0, r2, r1, i1);

     label3:
        $r4 = r1[i0];

        if $r4 != r2 goto label1;

        if r3 != null goto label5;

        staticinvoke <java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>(i0, r2, r1);

        goto label1;

     label4:
        staticinvoke <java.util.concurrent.PriorityBlockingQueue: void siftDownUsingComparator(int,java.lang.Object,java.lang.Object[],int,java.util.Comparator)>(i0, r2, r1, i1, r3);

        goto label3;

     label5:
        staticinvoke <java.util.concurrent.PriorityBlockingQueue: void siftUpUsingComparator(int,java.lang.Object,java.lang.Object[],java.util.Comparator)>(i0, r2, r1, r3);

        goto label1;
    }

    private static void siftDownComparable(int, java.lang.Object, java.lang.Object[], int)
    {
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        java.lang.Object r0, r3, $r4;
        java.lang.Object[] r1;
        java.lang.Comparable r2, $r5;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object[];

        i1 := @parameter3: int;

        if i1 <= 0 goto label4;

        r2 = (java.lang.Comparable) r0;

        i2 = i1 >>> 1;

     label1:
        if i0 >= i2 goto label3;

        $i5 = i0 << 1;

        i3 = 1 + $i5;

        r3 = r1[i3];

        i4 = i3 + 1;

        if i4 >= i1 goto label2;

        $r5 = (java.lang.Comparable) r3;

        $r4 = r1[i4];

        $i7 = interfaceinvoke $r5.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);

        if $i7 <= 0 goto label2;

        i3 = i4;

        r3 = r1[i4];

     label2:
        $i6 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);

        if $i6 > 0 goto label5;

     label3:
        r1[i0] = r2;

     label4:
        return;

     label5:
        r1[i0] = r3;

        i0 = i3;

        goto label1;
    }

    private static void siftDownUsingComparator(int, java.lang.Object, java.lang.Object[], int, java.util.Comparator)
    {
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        java.lang.Object r0, r3, $r4;
        java.lang.Object[] r1;
        java.util.Comparator r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object[];

        i1 := @parameter3: int;

        r2 := @parameter4: java.util.Comparator;

        if i1 <= 0 goto label4;

        i2 = i1 >>> 1;

     label1:
        if i0 >= i2 goto label3;

        $i5 = i0 << 1;

        i3 = 1 + $i5;

        r3 = r1[i3];

        i4 = i3 + 1;

        if i4 >= i1 goto label2;

        $r4 = r1[i4];

        $i7 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, $r4);

        if $i7 <= 0 goto label2;

        i3 = i4;

        r3 = r1[i4];

     label2:
        $i6 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r3);

        if $i6 > 0 goto label5;

     label3:
        r1[i0] = r0;

     label4:
        return;

     label5:
        r1[i0] = r3;

        i0 = i3;

        goto label1;
    }

    private static void siftUpComparable(int, java.lang.Object, java.lang.Object[])
    {
        int i0, i1, $i2, $i3;
        java.lang.Object r0, r3;
        java.lang.Object[] r1;
        java.lang.Comparable r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object[];

        r2 = (java.lang.Comparable) r0;

     label1:
        if i0 <= 0 goto label2;

        $i2 = i0 - 1;

        i1 = $i2 >>> 1;

        r3 = r1[i1];

        $i3 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);

        if $i3 < 0 goto label3;

     label2:
        r1[i0] = r2;

        return;

     label3:
        r1[i0] = r3;

        i0 = i1;

        goto label1;
    }

    private static void siftUpUsingComparator(int, java.lang.Object, java.lang.Object[], java.util.Comparator)
    {
        int i0, i1, $i2, $i3;
        java.lang.Object r0, r3;
        java.lang.Object[] r1;
        java.util.Comparator r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object[];

        r2 := @parameter3: java.util.Comparator;

     label1:
        if i0 <= 0 goto label2;

        $i2 = i0 - 1;

        i1 = $i2 >>> 1;

        r3 = r1[i1];

        $i3 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r3);

        if $i3 < 0 goto label3;

     label2:
        r1[i0] = r0;

        return;

     label3:
        r1[i0] = r3;

        i0 = i1;

        goto label1;
    }

    private void tryGrow(java.lang.Object[], int)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.lang.Object[] r1, r2, r3, $r7;
        int i0, i1, i2, i3, i4, $i6;
        boolean z0;
        java.lang.Throwable r4, $r9;
        java.util.concurrent.locks.ReentrantLock $r5, $r6;
        long $l5;
        sun.misc.Unsafe $r8;
        java.lang.OutOfMemoryError $r10;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $r5 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        i1 = r0.<java.util.concurrent.PriorityBlockingQueue: int allocationSpinLock>;

        r2 = null;

        if i1 != 0 goto label11;

        $r8 = <java.util.concurrent.PriorityBlockingQueue: sun.misc.Unsafe UNSAFE>;

        $l5 = <java.util.concurrent.PriorityBlockingQueue: long allocationSpinLockOffset>;

        z0 = virtualinvoke $r8.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l5, 0, 1);

        r2 = null;

        if z0 == 0 goto label11;

        if i0 >= 64 goto label04;

        i2 = i0 + 2;

     label01:
        i3 = i0 + i2;

        $i6 = i3 - 2147483639;

        if $i6 <= 0 goto label06;

        i4 = i0 + 1;

        if i4 < 0 goto label02;

        if i4 <= 2147483639 goto label05;

     label02:
        $r10 = new java.lang.OutOfMemoryError;

        specialinvoke $r10.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r10;

     label03:
        $r9 := @caughtexception;

        r4 = $r9;

        r0.<java.util.concurrent.PriorityBlockingQueue: int allocationSpinLock> = 0;

        throw r4;

     label04:
        i2 = i0 >> 1;

        goto label01;

     label05:
        i3 = 2147483639;

     label06:
        r2 = null;

        if i3 <= i0 goto label10;

     label07:
        r3 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

     label08:
        r2 = null;

        if r3 != r1 goto label10;

     label09:
        r2 = newarray (java.lang.Object)[i3];

     label10:
        r0.<java.util.concurrent.PriorityBlockingQueue: int allocationSpinLock> = 0;

     label11:
        if r2 != null goto label12;

        staticinvoke <java.lang.Thread: void yield()>();

     label12:
        $r6 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        if r2 == null goto label13;

        $r7 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        if $r7 != r1 goto label13;

        r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue> = r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, i0);

     label13:
        return;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label09 to label10 with label03;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.io.ObjectOutputStream r1;
        java.lang.Throwable r2, $r8;
        java.util.concurrent.locks.ReentrantLock $r3, $r7, $r9;
        java.util.PriorityQueue $r4, $r6;
        int $i0, $i1;
        java.util.Comparator $r5;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r3 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = new java.util.PriorityQueue;

        $i0 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 1);

        $r5 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator>;

        specialinvoke $r4.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>($i1, $r5);

        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.PriorityQueue q> = $r4;

        $r6 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.PriorityQueue q>;

        virtualinvoke $r6.<java.util.PriorityQueue: boolean addAll(java.util.Collection)>(r0);

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

     label2:
        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.PriorityQueue q> = null;

        $r7 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        r0.<java.util.concurrent.PriorityBlockingQueue: java.util.PriorityQueue q> = null;

        $r9 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r9.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.concurrent.PriorityBlockingQueue: boolean offer(java.lang.Object)>(r1);

        return $z0;
    }

    public void clear()
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r4;
        java.lang.Object[] r3;
        int i0, i1;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        r3 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        i0 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

        r0.<java.util.concurrent.PriorityBlockingQueue: int size> = 0;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label7;

     label4:
        r3[i1] = null;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label7:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public java.util.Comparator comparator()
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.util.Comparator $r1;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        $r1 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator>;

        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r4;
        int i0;
        boolean z0;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: int indexOf(java.lang.Object)>(r1);

     label2:
        if i0 == -1 goto label4;

        z0 = 1;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $r4 := @caughtexception;

        r3 = $r4;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public int drainTo(java.util.Collection)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.util.Collection r1;
        int $i0;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.util.Collection;

        $i0 = virtualinvoke r0.<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection,int)>(r1, 2147483647);

        return $i0;
    }

    public int drainTo(java.util.Collection, int)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.util.Collection r1;
        int i0, i1, i2, $i3;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r9;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        if r1 != null goto label01;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();

        throw $r8;

     label01:
        if r1 != r0 goto label02;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label02:
        if i0 > 0 goto label03;

        return 0;

     label03:
        r2 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label04:
        $i3 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i0);

     label05:
        i2 = 0;

     label06:
        if i2 >= i1 goto label10;

     label07:
        $r4 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        $r5 = $r4[0];

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object dequeue()>();

     label08:
        i2 = i2 + 1;

        goto label06;

     label09:
        $r9 := @caughtexception;

        r3 = $r9;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label10:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i1;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.util.concurrent.PriorityBlockingQueue$Itr $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        $r1 = new java.util.concurrent.PriorityBlockingQueue$Itr;

        $r2 = virtualinvoke r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] toArray()>();

        specialinvoke $r1.<java.util.concurrent.PriorityBlockingQueue$Itr: void <init>(java.util.concurrent.PriorityBlockingQueue,java.lang.Object[])>(r0, $r2);

        return $r1;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        int i0, i1, $i2;
        java.lang.Object[] r3;
        java.lang.Throwable r4, $r8;
        java.util.Comparator r5;
        java.util.concurrent.locks.Condition $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();

        throw $r7;

     label01:
        r2 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label02:
        i0 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

        r3 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        i1 = lengthof r3;

        if i0 < i1 goto label03;

        specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: void tryGrow(java.lang.Object[],int)>(r3, i1);

        goto label02;

     label03:
        r5 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator>;

     label04:
        if r5 != null goto label08;

     label05:
        staticinvoke <java.util.concurrent.PriorityBlockingQueue: void siftUpComparable(int,java.lang.Object,java.lang.Object[])>(i0, r1, r3);

     label06:
        $i2 = i0 + 1;

        r0.<java.util.concurrent.PriorityBlockingQueue: int size> = $i2;

        $r6 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>();

     label07:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label08:
        staticinvoke <java.util.concurrent.PriorityBlockingQueue: void siftUpUsingComparator(int,java.lang.Object,java.lang.Object[],java.util.Comparator)>(i0, r1, r3, r5);

     label09:
        goto label06;

     label10:
        $r8 := @caughtexception;

        r4 = $r8;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.lang.Object r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $z0 = virtualinvoke r0.<java.util.concurrent.PriorityBlockingQueue: boolean offer(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object peek()
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r5;
        int i0;
        java.lang.Object r3;
        java.lang.Object[] $r4;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

     label2:
        if i0 != 0 goto label4;

        r3 = null;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

     label4:
        $r4 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        r3 = $r4[0];

     label5:
        goto label3;

     label6:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public java.lang.Object poll()
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r4;
        java.lang.Object r3;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        r3 = specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object dequeue()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        long l0, l1, l2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r6;
        java.lang.Object r4;
        byte $b3;
        java.util.concurrent.locks.Condition $r5;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r2 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label1:
        r4 = specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object dequeue()>();

     label2:
        if r4 != null goto label6;

        $b3 = l1 cmp 0L;

        if $b3 <= 0 goto label6;

     label3:
        $r5 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        l2 = interfaceinvoke $r5.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

     label4:
        l1 = l2;

        goto label1;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void put(java.lang.Object)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.concurrent.PriorityBlockingQueue: boolean offer(java.lang.Object)>(r1);

        return;
    }

    public int remainingCapacity()
    {
        java.util.concurrent.PriorityBlockingQueue r0;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        return 2147483647;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r4;
        int i0;
        boolean z0;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: int indexOf(java.lang.Object)>(r1);

     label2:
        if i0 != -1 goto label4;

        z0 = 0;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label4:
        specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: void removeAt(int)>(i0);

     label5:
        z0 = 1;

        goto label3;

     label6:
        $r4 := @caughtexception;

        r3 = $r4;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    void removeEQ(java.lang.Object)
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.lang.Object r1, $r5;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r6;
        java.lang.Object[] r4;
        int i0, i1;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        r4 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

     label2:
        i0 = 0;

     label3:
        i1 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

     label4:
        if i0 >= i1 goto label6;

     label5:
        $r5 = r4[i0];

        if r1 != $r5 goto label7;

        specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: void removeAt(int)>(i0);

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label7:
        i0 = i0 + 1;

        goto label4;

     label8:
        $r6 := @caughtexception;

        r3 = $r6;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public int size()
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r3;
        int i0;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object take() throws java.lang.InterruptedException
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r5;
        java.lang.Object r3;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label1:
        r3 = specialinvoke r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object dequeue()>();

     label2:
        if r3 != null goto label6;

     label3:
        $r4 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void await()>();

     label4:
        goto label1;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r5;
        java.lang.Object[] r3, $r4;
        int $i0;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        $i0 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

        r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r4, $i0);

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.lang.Object[] r1, r4, $r5, $r6, $r8;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r9;
        int i0, $i1, $i2, $i3;
        java.lang.Class $r7;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 := @parameter0: java.lang.Object[];

        r2 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

        $i1 = lengthof r1;

        if $i1 >= i0 goto label3;

        $r6 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        $i3 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>($r6, $i3, $r7);

        r4 = (java.lang.Object[]) $r8;

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r4;

     label3:
        $r5 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, i0);

        $i2 = lengthof r1;

        if $i2 <= i0 goto label4;

        r1[i0] = null;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r1;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.PriorityBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r13;
        int i0, i1, $i2;
        java.lang.StringBuilder r3, $r7, $r9, $r12;
        java.lang.Object r4;
        java.lang.String r5, r6;
        java.lang.Object[] $r11;

        r0 := @this: java.util.concurrent.PriorityBlockingQueue;

        r1 = r0.<java.util.concurrent.PriorityBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        i0 = r0.<java.util.concurrent.PriorityBlockingQueue: int size>;

     label02:
        if i0 != 0 goto label04;

        r6 = "[]";

     label03:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r6;

     label04:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r3 = $r7;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

     label05:
        i1 = 0;

     label06:
        if i1 >= i0 goto label13;

     label07:
        $r11 = r0.<java.util.concurrent.PriorityBlockingQueue: java.lang.Object[] queue>;

        r4 = $r11[i1];

     label08:
        if r4 != r0 goto label09;

        r4 = "(this Collection)";

     label09:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

     label10:
        $i2 = i0 - 1;

        if i1 == $i2 goto label16;

     label11:
        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label12:
        goto label16;

     label13:
        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        r6 = r5;

        goto label03;

     label15:
        $r13 := @caughtexception;

        r2 = $r13;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label16:
        i1 = i1 + 1;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }
}
