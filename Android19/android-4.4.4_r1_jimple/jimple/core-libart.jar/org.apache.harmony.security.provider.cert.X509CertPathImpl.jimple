public class org.apache.harmony.security.provider.cert.X509CertPathImpl extends java.security.cert.CertPath
{
    public static final org.apache.harmony.security.asn1.ASN1SequenceOf ASN1;
    private static final org.apache.harmony.security.asn1.ASN1Sequence ASN1_SIGNED_DATA;
    private static final org.apache.harmony.security.asn1.ASN1Sequence PKCS7_SIGNED_DATA_OBJECT;
    static final java.util.List encodings;
    private static final long serialVersionUID;
    private final java.util.List certificates;
    private byte[] pkcs7Encoding;
    private byte[] pkiPathEncoding;

    static void <clinit>()
    {
        java.lang.String[] r0;
        org.apache.harmony.security.asn1.ASN1Type[] r1, r2;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding $r3, $r5;
        java.lang.String $r4, $r6;
        java.util.List $r7, $r8;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$1 $r9;
        org.apache.harmony.security.asn1.ASN1Any $r10, $r11, $r14, $r17;
        org.apache.harmony.security.asn1.ASN1Implicit $r12;
        org.apache.harmony.security.asn1.ASN1SequenceOf $r13;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$2 $r15;
        org.apache.harmony.security.asn1.ASN1Explicit $r16;
        org.apache.harmony.security.asn1.ASN1Sequence $r18;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$3 $r19;

        <org.apache.harmony.security.provider.cert.X509CertPathImpl: long serialVersionUID> = 7989755106209515436L;

        r0 = newarray (java.lang.String)[2];

        $r3 = <org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding PKI_PATH>;

        $r4 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: java.lang.String access$000(org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding)>($r3);

        r0[0] = $r4;

        $r5 = <org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding PKCS7>;

        $r6 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: java.lang.String access$000(org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding)>($r5);

        r0[1] = $r6;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r7);

        <org.apache.harmony.security.provider.cert.X509CertPathImpl: java.util.List encodings> = $r8;

        $r9 = new org.apache.harmony.security.provider.cert.X509CertPathImpl$1;

        $r10 = staticinvoke <org.apache.harmony.security.asn1.ASN1Any: org.apache.harmony.security.asn1.ASN1Any getInstance()>();

        specialinvoke $r9.<org.apache.harmony.security.provider.cert.X509CertPathImpl$1: void <init>(org.apache.harmony.security.asn1.ASN1Type)>($r10);

        <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.asn1.ASN1SequenceOf ASN1> = $r9;

        r1 = newarray (org.apache.harmony.security.asn1.ASN1Type)[3];

        $r11 = staticinvoke <org.apache.harmony.security.asn1.ASN1Any: org.apache.harmony.security.asn1.ASN1Any getInstance()>();

        r1[0] = $r11;

        $r12 = new org.apache.harmony.security.asn1.ASN1Implicit;

        $r13 = <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.asn1.ASN1SequenceOf ASN1>;

        specialinvoke $r12.<org.apache.harmony.security.asn1.ASN1Implicit: void <init>(int,org.apache.harmony.security.asn1.ASN1Type)>(0, $r13);

        r1[1] = $r12;

        $r14 = staticinvoke <org.apache.harmony.security.asn1.ASN1Any: org.apache.harmony.security.asn1.ASN1Any getInstance()>();

        r1[2] = $r14;

        $r15 = new org.apache.harmony.security.provider.cert.X509CertPathImpl$2;

        specialinvoke $r15.<org.apache.harmony.security.provider.cert.X509CertPathImpl$2: void <init>(org.apache.harmony.security.asn1.ASN1Type[])>(r1);

        <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.asn1.ASN1Sequence ASN1_SIGNED_DATA> = $r15;

        r2 = newarray (org.apache.harmony.security.asn1.ASN1Type)[2];

        $r17 = staticinvoke <org.apache.harmony.security.asn1.ASN1Any: org.apache.harmony.security.asn1.ASN1Any getInstance()>();

        r2[0] = $r17;

        $r16 = new org.apache.harmony.security.asn1.ASN1Explicit;

        $r18 = <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.asn1.ASN1Sequence ASN1_SIGNED_DATA>;

        specialinvoke $r16.<org.apache.harmony.security.asn1.ASN1Explicit: void <init>(int,org.apache.harmony.security.asn1.ASN1Type)>(0, $r18);

        r2[1] = $r16;

        $r19 = new org.apache.harmony.security.provider.cert.X509CertPathImpl$3;

        specialinvoke $r19.<org.apache.harmony.security.provider.cert.X509CertPathImpl$3: void <init>(org.apache.harmony.security.asn1.ASN1Type[])>(r2);

        <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.asn1.ASN1Sequence PKCS7_SIGNED_DATA_OBJECT> = $r19;

        return;
    }

    public void <init>(java.util.List) throws java.security.cert.CertificateException
    {
        org.apache.harmony.security.provider.cert.X509CertPathImpl r0;
        java.util.List r1, $r6;
        int i0, i1;
        java.security.cert.Certificate r2;
        java.util.ArrayList $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.security.cert.X509Certificate $r5;
        java.security.cert.CertificateException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r12;
        java.lang.String $r11;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertPathImpl;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.security.cert.CertPath: void <init>(java.lang.String)>("X.509");

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: java.util.List certificates> = $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (java.security.cert.Certificate) $r4;

        $z0 = r2 instanceof java.security.cert.X509Certificate;

        if $z0 != 0 goto label2;

        $r7 = new java.security.cert.CertificateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an X.509 certificate");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: java.util.List certificates>;

        $r5 = (java.security.cert.X509Certificate) r2;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void <init>(java.util.List, org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding)
    {
        org.apache.harmony.security.provider.cert.X509CertPathImpl r0;
        java.util.List r1;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertPathImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding;

        specialinvoke r0.<java.security.cert.CertPath: void <init>(java.lang.String)>("X.509");

        r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: java.util.List certificates> = r1;

        return;
    }

    void <init>(java.util.List, org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding, org.apache.harmony.security.provider.cert.X509CertPathImpl$1)
    {
        org.apache.harmony.security.provider.cert.X509CertPathImpl r0;
        java.util.List r1;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding r2;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$1 r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertPathImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding;

        r3 := @parameter2: org.apache.harmony.security.provider.cert.X509CertPathImpl$1;

        specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: void <init>(java.util.List,org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding)>(r1, r2);

        return;
    }

    static java.util.List access$200(org.apache.harmony.security.provider.cert.X509CertPathImpl)
    {
        org.apache.harmony.security.provider.cert.X509CertPathImpl r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.harmony.security.provider.cert.X509CertPathImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: java.util.List certificates>;

        return $r1;
    }

    private static org.apache.harmony.security.provider.cert.X509CertPathImpl getCertPathFromContentInfo(org.apache.harmony.security.pkcs7.ContentInfo) throws java.security.cert.CertificateException
    {
        org.apache.harmony.security.pkcs7.ContentInfo r0;
        org.apache.harmony.security.pkcs7.SignedData r1;
        java.util.List r2;
        java.util.ArrayList r3, $r5;
        java.util.Iterator r4;
        int $i0;
        boolean $z0;
        org.apache.harmony.security.provider.cert.X509CertPathImpl $r6;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding $r7;
        org.apache.harmony.security.provider.cert.X509CertImpl $r8;
        java.lang.Object $r9;
        org.apache.harmony.security.x509.Certificate $r10;
        java.security.cert.CertificateException $r11;

        r0 := @parameter0: org.apache.harmony.security.pkcs7.ContentInfo;

        r1 = virtualinvoke r0.<org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.pkcs7.SignedData getSignedData()>();

        if r1 != null goto label1;

        $r11 = new java.security.cert.CertificateException;

        specialinvoke $r11.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Incorrect PKCS7 encoded form: missing signed data");

        throw $r11;

     label1:
        r2 = virtualinvoke r1.<org.apache.harmony.security.pkcs7.SignedData: java.util.List getCertificates()>();

        if r2 != null goto label2;

        r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        $r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = $r5;

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = new org.apache.harmony.security.provider.cert.X509CertImpl;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.apache.harmony.security.x509.Certificate) $r9;

        specialinvoke $r8.<org.apache.harmony.security.provider.cert.X509CertImpl: void <init>(org.apache.harmony.security.x509.Certificate)>($r10);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label3;

     label4:
        $r6 = new org.apache.harmony.security.provider.cert.X509CertPathImpl;

        $r7 = <org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding PKCS7>;

        specialinvoke $r6.<org.apache.harmony.security.provider.cert.X509CertPathImpl: void <init>(java.util.List,org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding)>(r3, $r7);

        return $r6;
    }

    private byte[] getEncoded(org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding) throws java.security.cert.CertificateEncodingException
    {
        org.apache.harmony.security.provider.cert.X509CertPathImpl r0;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding r1;
        int[] $r2;
        int $i0, $i1;
        java.security.cert.CertificateEncodingException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        byte[] $r8, $r9, $r11, $r13, $r14, $r15, $r16, $r18;
        java.lang.Object $r10, $r17;
        org.apache.harmony.security.asn1.ASN1Sequence $r12;
        org.apache.harmony.security.asn1.ASN1SequenceOf $r19;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertPathImpl;

        r1 := @parameter0: org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding;

        $r2 = <org.apache.harmony.security.provider.cert.X509CertPathImpl$4: int[] $SwitchMap$org$apache$harmony$security$provider$cert$X509CertPathImpl$Encoding>;

        $i0 = virtualinvoke r1.<org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label4;
            default: goto label1;
        };

     label1:
        $r3 = new java.security.cert.CertificateEncodingException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported encoding: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        $r15 = r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: byte[] pkiPathEncoding>;

        if $r15 != null goto label3;

        $r19 = <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.asn1.ASN1SequenceOf ASN1>;

        $r18 = virtualinvoke $r19.<org.apache.harmony.security.asn1.ASN1SequenceOf: byte[] encode(java.lang.Object)>(r0);

        r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: byte[] pkiPathEncoding> = $r18;

     label3:
        $r14 = r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: byte[] pkiPathEncoding>;

        $r17 = virtualinvoke $r14.<java.lang.Object: java.lang.Object clone()>();

        $r16 = (byte[]) $r17;

        return $r16;

     label4:
        $r8 = r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: byte[] pkcs7Encoding>;

        if $r8 != null goto label5;

        $r12 = <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.asn1.ASN1Sequence PKCS7_SIGNED_DATA_OBJECT>;

        $r13 = virtualinvoke $r12.<org.apache.harmony.security.asn1.ASN1Sequence: byte[] encode(java.lang.Object)>(r0);

        r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: byte[] pkcs7Encoding> = $r13;

     label5:
        $r9 = r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: byte[] pkcs7Encoding>;

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Object clone()>();

        $r11 = (byte[]) $r10;

        return $r11;
    }

    public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.io.InputStream r0;
        java.io.IOException r1, $r5;
        org.apache.harmony.security.provider.cert.X509CertPathImpl r2;
        org.apache.harmony.security.asn1.ASN1SequenceOf $r3;
        java.lang.Object $r4;
        java.security.cert.CertificateException $r6;

        r0 := @parameter0: java.io.InputStream;

     label1:
        $r3 = <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.asn1.ASN1SequenceOf ASN1>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.asn1.ASN1SequenceOf: java.lang.Object decode(java.io.InputStream)>(r0);

        r2 = (org.apache.harmony.security.provider.cert.X509CertPathImpl) $r4;

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.security.cert.CertificateException;

        specialinvoke $r6.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to decode CertPath", r1);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(java.io.InputStream, java.lang.String) throws java.security.cert.CertificateException
    {
        java.io.InputStream r0;
        java.lang.String r1, $r10, $r20;
        java.io.IOException r2, $r23;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding r3;
        org.apache.harmony.security.provider.cert.X509CertPathImpl r4, $r17;
        int[] $r5;
        int $i0, $i1;
        java.security.cert.CertificateException $r6, $r16, $r22;
        java.lang.StringBuilder $r7, $r8, $r9, $r18, $r19, $r21;
        org.apache.harmony.security.asn1.ASN1Sequence $r11;
        java.lang.Object $r12, $r14;
        org.apache.harmony.security.pkcs7.ContentInfo $r13;
        org.apache.harmony.security.asn1.ASN1SequenceOf $r15;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

     label1:
        r3 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding findByApiName(java.lang.String)>(r1);

     label2:
        if r3 != null goto label5;

     label3:
        $r16 = new java.security.cert.CertificateException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported encoding: ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label4:
        $r23 := @caughtexception;

        r2 = $r23;

        $r22 = new java.security.cert.CertificateException;

        specialinvoke $r22.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to decode CertPath", r2);

        throw $r22;

     label5:
        $r5 = <org.apache.harmony.security.provider.cert.X509CertPathImpl$4: int[] $SwitchMap$org$apache$harmony$security$provider$cert$X509CertPathImpl$Encoding>;

        $i0 = virtualinvoke r3.<org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label7;
            case 2: goto label8;
            default: goto label6;
        };

     label6:
        $r6 = new java.security.cert.CertificateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported encoding: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label7:
        $r15 = <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.asn1.ASN1SequenceOf ASN1>;

        $r14 = virtualinvoke $r15.<org.apache.harmony.security.asn1.ASN1SequenceOf: java.lang.Object decode(java.io.InputStream)>(r0);

        $r17 = (org.apache.harmony.security.provider.cert.X509CertPathImpl) $r14;

        return $r17;

     label8:
        $r11 = <org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r12 = virtualinvoke $r11.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(java.io.InputStream)>(r0);

        $r13 = (org.apache.harmony.security.pkcs7.ContentInfo) $r12;

        r4 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.provider.cert.X509CertPathImpl getCertPathFromContentInfo(org.apache.harmony.security.pkcs7.ContentInfo)>($r13);

     label9:
        return r4;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label3 to label4 with label4;
        catch java.io.IOException from label5 to label6 with label4;
        catch java.io.IOException from label6 to label7 with label4;
        catch java.io.IOException from label7 to label8 with label4;
        catch java.io.IOException from label8 to label9 with label4;
    }

    public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(byte[]) throws java.security.cert.CertificateException
    {
        byte[] r0;
        java.io.IOException r1, $r5;
        org.apache.harmony.security.provider.cert.X509CertPathImpl r2;
        org.apache.harmony.security.asn1.ASN1SequenceOf $r3;
        java.lang.Object $r4;
        java.security.cert.CertificateException $r6;

        r0 := @parameter0: byte[];

     label1:
        $r3 = <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.asn1.ASN1SequenceOf ASN1>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.asn1.ASN1SequenceOf: java.lang.Object decode(byte[])>(r0);

        r2 = (org.apache.harmony.security.provider.cert.X509CertPathImpl) $r4;

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.security.cert.CertificateException;

        specialinvoke $r6.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to decode CertPath", r1);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(byte[], java.lang.String) throws java.security.cert.CertificateException
    {
        byte[] r0;
        java.lang.String r1, $r10, $r20;
        java.io.IOException r2, $r23;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding r3;
        org.apache.harmony.security.provider.cert.X509CertPathImpl r4, $r17;
        int[] $r5;
        int $i0, $i1;
        java.security.cert.CertificateException $r6, $r16, $r22;
        java.lang.StringBuilder $r7, $r8, $r9, $r18, $r19, $r21;
        org.apache.harmony.security.asn1.ASN1Sequence $r11;
        java.lang.Object $r12, $r14;
        org.apache.harmony.security.pkcs7.ContentInfo $r13;
        org.apache.harmony.security.asn1.ASN1SequenceOf $r15;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.String;

     label1:
        r3 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding findByApiName(java.lang.String)>(r1);

     label2:
        if r3 != null goto label5;

     label3:
        $r16 = new java.security.cert.CertificateException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported encoding: ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label4:
        $r23 := @caughtexception;

        r2 = $r23;

        $r22 = new java.security.cert.CertificateException;

        specialinvoke $r22.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to decode CertPath", r2);

        throw $r22;

     label5:
        $r5 = <org.apache.harmony.security.provider.cert.X509CertPathImpl$4: int[] $SwitchMap$org$apache$harmony$security$provider$cert$X509CertPathImpl$Encoding>;

        $i0 = virtualinvoke r3.<org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label7;
            case 2: goto label8;
            default: goto label6;
        };

     label6:
        $r6 = new java.security.cert.CertificateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported encoding: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label7:
        $r15 = <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.asn1.ASN1SequenceOf ASN1>;

        $r14 = virtualinvoke $r15.<org.apache.harmony.security.asn1.ASN1SequenceOf: java.lang.Object decode(byte[])>(r0);

        $r17 = (org.apache.harmony.security.provider.cert.X509CertPathImpl) $r14;

        return $r17;

     label8:
        $r11 = <org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r12 = virtualinvoke $r11.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(byte[])>(r0);

        $r13 = (org.apache.harmony.security.pkcs7.ContentInfo) $r12;

        r4 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.provider.cert.X509CertPathImpl getCertPathFromContentInfo(org.apache.harmony.security.pkcs7.ContentInfo)>($r13);

     label9:
        return r4;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label3 to label4 with label4;
        catch java.io.IOException from label5 to label6 with label4;
        catch java.io.IOException from label6 to label7 with label4;
        catch java.io.IOException from label7 to label8 with label4;
        catch java.io.IOException from label8 to label9 with label4;
    }

    public java.util.List getCertificates()
    {
        org.apache.harmony.security.provider.cert.X509CertPathImpl r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertPathImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: java.util.List certificates>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public byte[] getEncoded() throws java.security.cert.CertificateEncodingException
    {
        org.apache.harmony.security.provider.cert.X509CertPathImpl r0;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding $r1;
        byte[] $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertPathImpl;

        $r1 = <org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding PKI_PATH>;

        $r2 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: byte[] getEncoded(org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding)>($r1);

        return $r2;
    }

    public byte[] getEncoded(java.lang.String) throws java.security.cert.CertificateEncodingException
    {
        org.apache.harmony.security.provider.cert.X509CertPathImpl r0;
        java.lang.String r1, $r8;
        org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding r2;
        byte[] $r3;
        java.security.cert.CertificateEncodingException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertPathImpl;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding: org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding findByApiName(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r4 = new java.security.cert.CertificateEncodingException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported encoding: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r3 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertPathImpl: byte[] getEncoded(org.apache.harmony.security.provider.cert.X509CertPathImpl$Encoding)>(r2);

        return $r3;
    }

    public java.util.Iterator getEncodings()
    {
        org.apache.harmony.security.provider.cert.X509CertPathImpl r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertPathImpl;

        $r1 = <org.apache.harmony.security.provider.cert.X509CertPathImpl: java.util.List encodings>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }
}
