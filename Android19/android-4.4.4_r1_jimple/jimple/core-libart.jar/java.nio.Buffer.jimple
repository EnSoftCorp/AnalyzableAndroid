public abstract class java.nio.Buffer extends java.lang.Object
{
    static final int UNSET_MARK;
    final int _elementSizeShift;
    final java.nio.MemoryBlock block;
    final int capacity;
    long effectiveDirectAddress;
    int limit;
    int mark;
    int position;

    void <init>(int, int, java.nio.MemoryBlock)
    {
        java.nio.Buffer r0;
        int i0, i1;
        java.nio.MemoryBlock r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.nio.Buffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.nio.MemoryBlock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.nio.Buffer: int mark> = -1;

        r0.<java.nio.Buffer: int position> = 0;

        r0.<java.nio.Buffer: int _elementSizeShift> = i0;

        if i1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity < 0: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        r0.<java.nio.Buffer: int limit> = i1;

        r0.<java.nio.Buffer: int capacity> = i1;

        r0.<java.nio.Buffer: java.nio.MemoryBlock block> = r1;

        return;
    }

    public abstract java.lang.Object array();

    public abstract int arrayOffset();

    public final int capacity()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;

        $i0 = r0.<java.nio.Buffer: int capacity>;

        return $i0;
    }

    int checkGetBounds(int, int, int, int)
    {
        java.nio.Buffer r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        java.nio.BufferUnderflowException $r10;

        r0 := @this: java.nio.Buffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 = i0 * i3;

        $i5 = i2 | i3;

        if $i5 < 0 goto label1;

        if i2 > i1 goto label1;

        $i7 = i1 - i2;

        if $i7 >= i3 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offset=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", count=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r1;

     label2:
        $i6 = virtualinvoke r0.<java.nio.Buffer: int remaining()>();

        if i4 <= $i6 goto label3;

        $r10 = new java.nio.BufferUnderflowException;

        specialinvoke $r10.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r10;

     label3:
        return i4;
    }

    void checkIndex(int)
    {
        java.nio.Buffer r0;
        int i0, $i1, $i2;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.nio.Buffer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = r0.<java.nio.Buffer: int limit>;

        if i0 < $i2 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", limit=");

        $i1 = r0.<java.nio.Buffer: int limit>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        return;
    }

    void checkIndex(int, int)
    {
        java.nio.Buffer r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: java.nio.Buffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        $i3 = r0.<java.nio.Buffer: int limit>;

        $i4 = $i3 - i1;

        if i0 <= $i4 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", limit=");

        $i2 = r0.<java.nio.Buffer: int limit>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size of type=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r1;

     label2:
        return;
    }

    int checkPutBounds(int, int, int, int)
    {
        java.nio.Buffer r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        java.nio.ReadOnlyBufferException $r10;
        boolean $z0;
        java.nio.BufferOverflowException $r11;

        r0 := @this: java.nio.Buffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 = i0 * i3;

        $i5 = i2 | i3;

        if $i5 < 0 goto label1;

        if i2 > i1 goto label1;

        $i7 = i1 - i2;

        if $i7 >= i3 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offset=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", count=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r1;

     label2:
        $i6 = virtualinvoke r0.<java.nio.Buffer: int remaining()>();

        if i4 <= $i6 goto label3;

        $r11 = new java.nio.BufferOverflowException;

        specialinvoke $r11.<java.nio.BufferOverflowException: void <init>()>();

        throw $r11;

     label3:
        $z0 = virtualinvoke r0.<java.nio.Buffer: boolean isReadOnly()>();

        if $z0 == 0 goto label4;

        $r10 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r10.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r10;

     label4:
        return i4;
    }

    void checkStartEndRemaining(int, int)
    {
        java.nio.Buffer r0;
        int i0, i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: java.nio.Buffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < i0 goto label1;

        if i0 < 0 goto label1;

        $i3 = virtualinvoke r0.<java.nio.Buffer: int remaining()>();

        if i1 <= $i3 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", end=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", remaining()=");

        $i2 = virtualinvoke r0.<java.nio.Buffer: int remaining()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r1;

     label2:
        return;
    }

    final void checkWritable()
    {
        java.nio.Buffer r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.nio.Buffer;

        $z0 = virtualinvoke r0.<java.nio.Buffer: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Read-only buffer");

        throw $r1;

     label1:
        return;
    }

    public final java.nio.Buffer clear()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;

        r0.<java.nio.Buffer: int position> = 0;

        r0.<java.nio.Buffer: int mark> = -1;

        $i0 = r0.<java.nio.Buffer: int capacity>;

        r0.<java.nio.Buffer: int limit> = $i0;

        return r0;
    }

    public final java.nio.Buffer flip()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;

        $i0 = r0.<java.nio.Buffer: int position>;

        r0.<java.nio.Buffer: int limit> = $i0;

        r0.<java.nio.Buffer: int position> = 0;

        r0.<java.nio.Buffer: int mark> = -1;

        return r0;
    }

    public abstract boolean hasArray();

    public final boolean hasRemaining()
    {
        java.nio.Buffer r0;
        int $i0, $i1;

        r0 := @this: java.nio.Buffer;

        $i1 = r0.<java.nio.Buffer: int position>;

        $i0 = r0.<java.nio.Buffer: int limit>;

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public abstract boolean isDirect();

    public abstract boolean isReadOnly();

    public final int limit()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;

        $i0 = r0.<java.nio.Buffer: int limit>;

        return $i0;
    }

    public final java.nio.Buffer limit(int)
    {
        java.nio.Buffer r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.nio.Buffer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = r0.<java.nio.Buffer: int capacity>;

        if i0 <= $i2 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad limit (capacity ");

        $i1 = r0.<java.nio.Buffer: int capacity>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        r0.<java.nio.Buffer: int limit> = i0;

        $i3 = r0.<java.nio.Buffer: int position>;

        if $i3 <= i0 goto label3;

        r0.<java.nio.Buffer: int position> = i0;

     label3:
        $i4 = r0.<java.nio.Buffer: int mark>;

        if $i4 == -1 goto label4;

        $i5 = r0.<java.nio.Buffer: int mark>;

        if $i5 <= i0 goto label4;

        r0.<java.nio.Buffer: int mark> = -1;

     label4:
        return r0;
    }

    public final java.nio.Buffer mark()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;

        $i0 = r0.<java.nio.Buffer: int position>;

        r0.<java.nio.Buffer: int mark> = $i0;

        return r0;
    }

    public final int position()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;

        $i0 = r0.<java.nio.Buffer: int position>;

        return $i0;
    }

    public final java.nio.Buffer position(int)
    {
        java.nio.Buffer r0;
        int i0;

        r0 := @this: java.nio.Buffer;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.nio.Buffer: void positionImpl(int)>(i0);

        return r0;
    }

    void positionImpl(int)
    {
        java.nio.Buffer r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.nio.Buffer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = r0.<java.nio.Buffer: int limit>;

        if i0 <= $i2 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad position (limit ");

        $i1 = r0.<java.nio.Buffer: int limit>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        r0.<java.nio.Buffer: int position> = i0;

        $i3 = r0.<java.nio.Buffer: int mark>;

        if $i3 == -1 goto label3;

        $i5 = r0.<java.nio.Buffer: int mark>;

        $i4 = r0.<java.nio.Buffer: int position>;

        if $i5 <= $i4 goto label3;

        r0.<java.nio.Buffer: int mark> = -1;

     label3:
        return;
    }

    public final int remaining()
    {
        java.nio.Buffer r0;
        int $i0, $i1, $i2;

        r0 := @this: java.nio.Buffer;

        $i1 = r0.<java.nio.Buffer: int limit>;

        $i0 = r0.<java.nio.Buffer: int position>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public final java.nio.Buffer reset()
    {
        java.nio.Buffer r0;
        int $i0, $i1;
        java.nio.InvalidMarkException $r1;

        r0 := @this: java.nio.Buffer;

        $i0 = r0.<java.nio.Buffer: int mark>;

        if $i0 != -1 goto label1;

        $r1 = new java.nio.InvalidMarkException;

        specialinvoke $r1.<java.nio.InvalidMarkException: void <init>(java.lang.String)>("Mark not set");

        throw $r1;

     label1:
        $i1 = r0.<java.nio.Buffer: int mark>;

        r0.<java.nio.Buffer: int position> = $i1;

        return r0;
    }

    public final java.nio.Buffer rewind()
    {
        java.nio.Buffer r0;

        r0 := @this: java.nio.Buffer;

        r0.<java.nio.Buffer: int position> = 0;

        r0.<java.nio.Buffer: int mark> = -1;

        return r0;
    }

    public java.lang.String toString()
    {
        java.nio.Buffer r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.Class $r2;
        java.lang.String $r3, $r12;
        int $i0, $i1, $i2;

        r0 := @this: java.nio.Buffer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[position=");

        $i0 = r0.<java.nio.Buffer: int position>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",limit=");

        $i1 = r0.<java.nio.Buffer: int limit>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",capacity=");

        $i2 = r0.<java.nio.Buffer: int capacity>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public static void <clinit>()
    {
        <java.nio.Buffer: int UNSET_MARK> = -1;

        return;
    }
}
