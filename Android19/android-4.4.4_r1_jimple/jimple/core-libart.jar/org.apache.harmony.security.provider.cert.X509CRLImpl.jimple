public class org.apache.harmony.security.provider.cert.X509CRLImpl extends java.security.cert.X509CRL
{
    private final org.apache.harmony.security.x509.CertificateList crl;
    private byte[] encoding;
    private java.util.ArrayList entries;
    private boolean entriesRetrieved;
    private int entriesSize;
    private final org.apache.harmony.security.x509.Extensions extensions;
    private boolean isIndirectCRL;
    private javax.security.auth.x500.X500Principal issuer;
    private int nonIndirectEntriesSize;
    private boolean nullSigAlgParams;
    private java.lang.String sigAlgName;
    private java.lang.String sigAlgOID;
    private byte[] sigAlgParams;
    private byte[] signature;
    private final org.apache.harmony.security.x509.TBSCertList tbsCertList;
    private byte[] tbsCertListEncoding;

    public void <init>(java.io.InputStream) throws java.security.cert.CRLException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        java.io.InputStream r1;
        java.io.IOException r2, $r10;
        org.apache.harmony.security.asn1.ASN1Sequence $r3;
        java.lang.Object $r4;
        org.apache.harmony.security.x509.CertificateList $r5, $r6;
        org.apache.harmony.security.x509.TBSCertList $r7, $r8;
        org.apache.harmony.security.x509.Extensions $r9;
        java.security.cert.CRLException $r11;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.security.cert.X509CRL: void <init>()>();

     label1:
        $r3 = <org.apache.harmony.security.x509.CertificateList: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(java.io.InputStream)>(r1);

        $r5 = (org.apache.harmony.security.x509.CertificateList) $r4;

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl> = $r5;

        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.x509.CertificateList: org.apache.harmony.security.x509.TBSCertList getTbsCertList()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList> = $r7;

        $r8 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r9 = virtualinvoke $r8.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.Extensions getCrlExtensions()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions> = $r9;

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = new java.security.cert.CRLException;

        specialinvoke $r11.<java.security.cert.CRLException: void <init>(java.lang.Throwable)>(r2);

        throw $r11;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(org.apache.harmony.security.x509.CertificateList)
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        org.apache.harmony.security.x509.CertificateList r1;
        org.apache.harmony.security.x509.TBSCertList $r2, $r3;
        org.apache.harmony.security.x509.Extensions $r4;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        r1 := @parameter0: org.apache.harmony.security.x509.CertificateList;

        specialinvoke r0.<java.security.cert.X509CRL: void <init>()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl> = r1;

        $r2 = virtualinvoke r1.<org.apache.harmony.security.x509.CertificateList: org.apache.harmony.security.x509.TBSCertList getTbsCertList()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList> = $r2;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.Extensions getCrlExtensions()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions> = $r4;

        return;
    }

    public void <init>(byte[]) throws java.io.IOException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        byte[] r1;
        org.apache.harmony.security.asn1.ASN1Sequence $r2;
        java.lang.Object $r3;
        org.apache.harmony.security.x509.CertificateList $r4;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        r1 := @parameter0: byte[];

        $r2 = <org.apache.harmony.security.x509.CertificateList: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(byte[])>(r1);

        $r4 = (org.apache.harmony.security.x509.CertificateList) $r3;

        specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: void <init>(org.apache.harmony.security.x509.CertificateList)>($r4);

        return;
    }

    private void retrieveEntries()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        java.util.List r1;
        javax.security.auth.x500.X500Principal r2, r4;
        int i0, $i1, $i2, $i3;
        org.apache.harmony.security.x509.TBSCertList$RevokedCertificate r3;
        org.apache.harmony.security.x509.TBSCertList $r5;
        java.util.ArrayList $r6, $r9;
        java.lang.Object $r7;
        org.apache.harmony.security.provider.cert.X509CRLEntryImpl $r8;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean entriesRetrieved> = 1;

        $r5 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        r1 = virtualinvoke $r5.<org.apache.harmony.security.x509.TBSCertList: java.util.List getRevokedCertificates()>();

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int entriesSize> = $i1;

        $r6 = new java.util.ArrayList;

        $i2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int entriesSize>;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i2);

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries> = $r6;

        r2 = null;

        i0 = 0;

     label3:
        $i3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int entriesSize>;

        if i0 >= $i3 goto label1;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (org.apache.harmony.security.x509.TBSCertList$RevokedCertificate) $r7;

        r4 = virtualinvoke r3.<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: javax.security.auth.x500.X500Principal getIssuer()>();

        if r4 == null goto label4;

        r2 = r4;

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean isIndirectCRL> = 1;

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int nonIndirectEntriesSize> = i0;

     label4:
        $r9 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        $r8 = new org.apache.harmony.security.provider.cert.X509CRLEntryImpl;

        specialinvoke $r8.<org.apache.harmony.security.provider.cert.X509CRLEntryImpl: void <init>(org.apache.harmony.security.x509.TBSCertList$RevokedCertificate,javax.security.auth.x500.X500Principal)>(r3, r2);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        i0 = i0 + 1;

        goto label3;
    }

    public java.util.Set getCriticalExtensionOIDs()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        org.apache.harmony.security.x509.Extensions $r1, $r2;
        java.util.Set $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: java.util.Set getCriticalExtensions()>();

        return $r3;
    }

    public byte[] getEncoded() throws java.security.cert.CRLException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        byte[] r1, $r2, $r3, $r4, $r5, $r7;
        int $i0, $i1;
        org.apache.harmony.security.x509.CertificateList $r6;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] encoding>;

        if $r2 != null goto label1;

        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.x509.CertificateList: byte[] getEncoded()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] encoding> = $r7;

     label1:
        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] encoding>;

        $i0 = lengthof $r3;

        r1 = newarray (byte)[$i0];

        $r5 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] encoding>;

        $r4 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] encoding>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i1);

        return r1;
    }

    public byte[] getExtensionValue(java.lang.String)
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        java.lang.String r1;
        org.apache.harmony.security.x509.Extension r2;
        org.apache.harmony.security.x509.Extensions $r3, $r4;
        byte[] $r5;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r3 != null goto label2;

     label1:
        return null;

     label2:
        $r4 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        r2 = virtualinvoke $r4.<org.apache.harmony.security.x509.Extensions: org.apache.harmony.security.x509.Extension getExtensionByOID(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r5 = virtualinvoke r2.<org.apache.harmony.security.x509.Extension: byte[] getRawExtnValue()>();

        return $r5;
    }

    public java.security.Principal getIssuerDN()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        javax.security.auth.x500.X500Principal $r1, $r2, $r5;
        org.apache.harmony.security.x509.TBSCertList $r3;
        org.apache.harmony.security.x501.Name $r4;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x501.Name getIssuer()>();

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer> = $r5;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer>;

        return $r2;
    }

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        javax.security.auth.x500.X500Principal $r1, $r2, $r5;
        org.apache.harmony.security.x509.TBSCertList $r3;
        org.apache.harmony.security.x501.Name $r4;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x501.Name getIssuer()>();

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer> = $r5;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer>;

        return $r2;
    }

    public java.util.Date getNextUpdate()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        org.apache.harmony.security.x509.TBSCertList $r1;
        java.util.Date $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertList: java.util.Date getNextUpdate()>();

        return $r2;
    }

    public java.util.Set getNonCriticalExtensionOIDs()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        org.apache.harmony.security.x509.Extensions $r1, $r2;
        java.util.Set $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: java.util.Set getNonCriticalExtensions()>();

        return $r3;
    }

    public java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        java.math.BigInteger r1, $r6;
        int i0, $i1;
        java.security.cert.X509CRLEntry r2;
        boolean $z0, $z1;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        r1 := @parameter0: java.math.BigInteger;

        $z0 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean entriesRetrieved>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: void retrieveEntries()>();

     label1:
        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        if $r3 != null goto label3;

        r2 = null;

     label2:
        return r2;

     label3:
        i0 = 0;

     label4:
        $i1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int nonIndirectEntriesSize>;

        if i0 >= $i1 goto label5;

        $r4 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r2 = (java.security.cert.X509CRLEntry) $r5;

        $r6 = virtualinvoke r2.<java.security.cert.X509CRLEntry: java.math.BigInteger getSerialNumber()>();

        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label2;

        i0 = i0 + 1;

        goto label4;

     label5:
        return null;
    }

    public java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        java.security.cert.X509Certificate r1;
        java.math.BigInteger r2, $r9, $r12;
        int i0, i1, $i2, $i3;
        java.security.cert.X509CRLEntry r3;
        javax.security.auth.x500.X500Principal r4, r5, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.ArrayList $r6, $r7, $r11;
        java.lang.Object $r8, $r13;
        java.lang.NullPointerException $r14;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        r1 := @parameter0: java.security.cert.X509Certificate;

        if r1 != null goto label01;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>("certificate == null");

        throw $r14;

     label01:
        $z0 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean entriesRetrieved>;

        if $z0 != 0 goto label02;

        specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: void retrieveEntries()>();

     label02:
        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        if $r6 != null goto label04;

        r3 = null;

     label03:
        return r3;

     label04:
        r2 = virtualinvoke r1.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();

        $z1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean isIndirectCRL>;

        if $z1 == 0 goto label09;

        r4 = virtualinvoke r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $r10 = virtualinvoke r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $z3 = virtualinvoke r4.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label05;

        r4 = null;

     label05:
        i1 = 0;

     label06:
        $i3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int entriesSize>;

        if i1 >= $i3 goto label11;

        $r11 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        $r13 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (java.security.cert.X509CRLEntry) $r13;

        $r12 = virtualinvoke r3.<java.security.cert.X509CRLEntry: java.math.BigInteger getSerialNumber()>();

        $z4 = virtualinvoke r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r12);

        if $z4 == 0 goto label07;

        r5 = virtualinvoke r3.<java.security.cert.X509CRLEntry: javax.security.auth.x500.X500Principal getCertificateIssuer()>();

        if r4 == null goto label08;

        $z5 = virtualinvoke r4.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>(r5);

        if $z5 != 0 goto label03;

     label07:
        i1 = i1 + 1;

        goto label06;

     label08:
        if r5 != null goto label07;

        return r3;

     label09:
        i0 = 0;

     label10:
        $i2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int entriesSize>;

        if i0 >= $i2 goto label11;

        $r7 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r3 = (java.security.cert.X509CRLEntry) $r8;

        $r9 = virtualinvoke r3.<java.security.cert.X509CRLEntry: java.math.BigInteger getSerialNumber()>();

        $z2 = virtualinvoke r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);

        if $z2 != 0 goto label03;

        i0 = i0 + 1;

        goto label10;

     label11:
        return null;
    }

    public java.util.Set getRevokedCertificates()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        boolean $z0;
        java.util.ArrayList $r1, $r3;
        java.util.HashSet $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $z0 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean entriesRetrieved>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: void retrieveEntries()>();

     label1:
        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        if $r1 != null goto label2;

        return null;

     label2:
        $r2 = new java.util.HashSet;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        return $r2;
    }

    public java.lang.String getSigAlgName()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        java.lang.String $r1, $r2, $r5, $r6, $r7, $r8, $r9;
        org.apache.harmony.security.x509.TBSCertList $r3;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r4;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()>();

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID> = $r5;

        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        $r7 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>($r6);

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName> = $r7;

        $r8 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName>;

        if $r8 != null goto label1;

        $r9 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName> = $r9;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName>;

        return $r2;
    }

    public java.lang.String getSigAlgOID()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        java.lang.String $r1, $r2, $r5, $r6, $r7, $r8, $r9;
        org.apache.harmony.security.x509.TBSCertList $r3;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r4;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()>();

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID> = $r5;

        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        $r7 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>($r6);

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName> = $r7;

        $r8 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName>;

        if $r8 != null goto label1;

        $r9 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName> = $r9;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        return $r2;
    }

    public byte[] getSigAlgParams()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        boolean $z0;
        byte[] $r1, $r2, $r5, $r6;
        org.apache.harmony.security.x509.TBSCertList $r3;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r4;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $z0 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean nullSigAlgParams>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] sigAlgParams>;

        if $r1 != null goto label2;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()>();

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getParameters()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] sigAlgParams> = $r5;

        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] sigAlgParams>;

        if $r6 != null goto label2;

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean nullSigAlgParams> = 1;

        return null;

     label2:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] sigAlgParams>;

        return $r2;
    }

    public byte[] getSignature()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        byte[] r1, $r2, $r3, $r4, $r5, $r7;
        int $i0, $i1;
        org.apache.harmony.security.x509.CertificateList $r6;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] signature>;

        if $r2 != null goto label1;

        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.x509.CertificateList: byte[] getSignatureValue()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] signature> = $r7;

     label1:
        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] signature>;

        $i0 = lengthof $r3;

        r1 = newarray (byte)[$i0];

        $r5 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] signature>;

        $r4 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] signature>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i1);

        return r1;
    }

    public byte[] getTBSCertList() throws java.security.cert.CRLException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        byte[] r1, $r2, $r3, $r4, $r5, $r7;
        int $i0, $i1;
        org.apache.harmony.security.x509.TBSCertList $r6;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] tbsCertListEncoding>;

        if $r2 != null goto label1;

        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.x509.TBSCertList: byte[] getEncoded()>();

        r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] tbsCertListEncoding> = $r7;

     label1:
        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] tbsCertListEncoding>;

        $i0 = lengthof $r3;

        r1 = newarray (byte)[$i0];

        $r5 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] tbsCertListEncoding>;

        $r4 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] tbsCertListEncoding>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i1);

        return r1;
    }

    public java.util.Date getThisUpdate()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        org.apache.harmony.security.x509.TBSCertList $r1;
        java.util.Date $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertList: java.util.Date getThisUpdate()>();

        return $r2;
    }

    public int getVersion()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        org.apache.harmony.security.x509.TBSCertList $r1;
        int $i0;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $i0 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertList: int getVersion()>();

        return $i0;
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        org.apache.harmony.security.x509.Extensions $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $z0 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: boolean hasUnsupportedCritical()>();

        return $z0;
    }

    public boolean isRevoked(java.security.cert.Certificate)
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        java.security.cert.Certificate r1;
        boolean $z0;
        java.security.cert.X509Certificate $r2;
        java.security.cert.X509CRLEntry $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        r1 := @parameter0: java.security.cert.Certificate;

        $z0 = r1 instanceof java.security.cert.X509Certificate;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = (java.security.cert.X509Certificate) r1;

        $r3 = virtualinvoke r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)>($r2);

        if $r3 == null goto label1;

        return 1;
    }

    public java.lang.String toString()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        org.apache.harmony.security.x509.CertificateList $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.CertificateList: java.lang.String toString()>();

        return $r2;
    }

    public void verify(java.security.PublicKey) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        java.security.PublicKey r1;
        java.security.Signature r2;
        byte[] r3, $r7;
        java.lang.String $r4;
        org.apache.harmony.security.x509.TBSCertList $r5;
        int $i0;
        org.apache.harmony.security.x509.CertificateList $r6;
        boolean $z0;
        java.security.SignatureException $r8;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        r1 := @parameter0: java.security.PublicKey;

        $r4 = virtualinvoke r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String getSigAlgName()>();

        r2 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r4);

        virtualinvoke r2.<java.security.Signature: void initVerify(java.security.PublicKey)>(r1);

        $r5 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        r3 = virtualinvoke $r5.<org.apache.harmony.security.x509.TBSCertList: byte[] getEncoded()>();

        $i0 = lengthof r3;

        virtualinvoke r2.<java.security.Signature: void update(byte[],int,int)>(r3, 0, $i0);

        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.x509.CertificateList: byte[] getSignatureValue()>();

        $z0 = virtualinvoke r2.<java.security.Signature: boolean verify(byte[])>($r7);

        if $z0 != 0 goto label1;

        $r8 = new java.security.SignatureException;

        specialinvoke $r8.<java.security.SignatureException: void <init>(java.lang.String)>("Signature was not verified");

        throw $r8;

     label1:
        return;
    }

    public void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl r0;
        java.security.PublicKey r1;
        java.lang.String r2, $r5;
        java.security.Signature r3;
        byte[] r4, $r8;
        org.apache.harmony.security.x509.TBSCertList $r6;
        int $i0;
        org.apache.harmony.security.x509.CertificateList $r7;
        boolean $z0;
        java.security.SignatureException $r9;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        r1 := @parameter0: java.security.PublicKey;

        r2 := @parameter1: java.lang.String;

        $r5 = virtualinvoke r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String getSigAlgName()>();

        r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>($r5, r2);

        virtualinvoke r3.<java.security.Signature: void initVerify(java.security.PublicKey)>(r1);

        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        r4 = virtualinvoke $r6.<org.apache.harmony.security.x509.TBSCertList: byte[] getEncoded()>();

        $i0 = lengthof r4;

        virtualinvoke r3.<java.security.Signature: void update(byte[],int,int)>(r4, 0, $i0);

        $r7 = r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r8 = virtualinvoke $r7.<org.apache.harmony.security.x509.CertificateList: byte[] getSignatureValue()>();

        $z0 = virtualinvoke r3.<java.security.Signature: boolean verify(byte[])>($r8);

        if $z0 != 0 goto label1;

        $r9 = new java.security.SignatureException;

        specialinvoke $r9.<java.security.SignatureException: void <init>(java.lang.String)>("Signature was not verified");

        throw $r9;

     label1:
        return;
    }
}
