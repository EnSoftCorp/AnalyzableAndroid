class java.util.LinkedList$ReverseLinkIterator extends java.lang.Object implements java.util.Iterator
{
    private boolean canRemove;
    private int expectedModCount;
    private java.util.LinkedList$Link link;
    private final java.util.LinkedList list;
    final java.util.LinkedList this$0;

    void <init>(java.util.LinkedList, java.util.LinkedList)
    {
        java.util.LinkedList$ReverseLinkIterator r0;
        java.util.LinkedList r1, r2, $r3, $r4;
        int $i0;
        java.util.LinkedList$Link $r5;

        r0 := @this: java.util.LinkedList$ReverseLinkIterator;

        r1 := @parameter0: java.util.LinkedList;

        r2 := @parameter1: java.util.LinkedList;

        r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList list> = r2;

        $r3 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList list>;

        $i0 = $r3.<java.util.LinkedList: int modCount>;

        r0.<java.util.LinkedList$ReverseLinkIterator: int expectedModCount> = $i0;

        $r4 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList list>;

        $r5 = $r4.<java.util.LinkedList: java.util.LinkedList$Link voidLink>;

        r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList$Link link> = $r5;

        r0.<java.util.LinkedList$ReverseLinkIterator: boolean canRemove> = 0;

        return;
    }

    public boolean hasNext()
    {
        java.util.LinkedList$ReverseLinkIterator r0;
        java.util.LinkedList$Link $r1, $r3, $r4;
        java.util.LinkedList $r2;

        r0 := @this: java.util.LinkedList$ReverseLinkIterator;

        $r1 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList$Link link>;

        $r4 = $r1.<java.util.LinkedList$Link: java.util.LinkedList$Link previous>;

        $r2 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList list>;

        $r3 = $r2.<java.util.LinkedList: java.util.LinkedList$Link voidLink>;

        if $r4 == $r3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        java.util.LinkedList$ReverseLinkIterator r0;
        java.util.LinkedList $r1;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r2;
        boolean $z0;
        java.util.NoSuchElementException $r3;
        java.util.LinkedList$Link $r4, $r5, $r6;
        java.lang.Object $r7;

        r0 := @this: java.util.LinkedList$ReverseLinkIterator;

        $i1 = r0.<java.util.LinkedList$ReverseLinkIterator: int expectedModCount>;

        $r1 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList list>;

        $i0 = $r1.<java.util.LinkedList: int modCount>;

        if $i1 != $i0 goto label2;

        $z0 = virtualinvoke r0.<java.util.LinkedList$ReverseLinkIterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList$Link link>;

        $r5 = $r4.<java.util.LinkedList$Link: java.util.LinkedList$Link previous>;

        r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList$Link link> = $r5;

        r0.<java.util.LinkedList$ReverseLinkIterator: boolean canRemove> = 1;

        $r6 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList$Link link>;

        $r7 = $r6.<java.util.LinkedList$Link: java.lang.Object data>;

        return $r7;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label2:
        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r2;
    }

    public void remove()
    {
        java.util.LinkedList$ReverseLinkIterator r0;
        java.util.LinkedList$Link r1, r2, $r8, $r9;
        java.util.LinkedList r3, r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.ConcurrentModificationException $r6;
        boolean $z0;
        java.lang.IllegalStateException $r7;

        r0 := @this: java.util.LinkedList$ReverseLinkIterator;

        $i1 = r0.<java.util.LinkedList$ReverseLinkIterator: int expectedModCount>;

        $r5 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList list>;

        $i0 = $r5.<java.util.LinkedList: int modCount>;

        if $i1 != $i0 goto label2;

        $z0 = r0.<java.util.LinkedList$ReverseLinkIterator: boolean canRemove>;

        if $z0 == 0 goto label1;

        $r8 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList$Link link>;

        r1 = $r8.<java.util.LinkedList$Link: java.util.LinkedList$Link previous>;

        $r9 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList$Link link>;

        r2 = $r9.<java.util.LinkedList$Link: java.util.LinkedList$Link next>;

        r1.<java.util.LinkedList$Link: java.util.LinkedList$Link next> = r2;

        r2.<java.util.LinkedList$Link: java.util.LinkedList$Link previous> = r1;

        r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList$Link link> = r2;

        r3 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList list>;

        $i2 = r3.<java.util.LinkedList: int size>;

        $i3 = -1 + $i2;

        r3.<java.util.LinkedList: int size> = $i3;

        r4 = r0.<java.util.LinkedList$ReverseLinkIterator: java.util.LinkedList list>;

        $i4 = r4.<java.util.LinkedList: int modCount>;

        $i6 = 1 + $i4;

        r4.<java.util.LinkedList: int modCount> = $i6;

        $i5 = r0.<java.util.LinkedList$ReverseLinkIterator: int expectedModCount>;

        $i7 = 1 + $i5;

        r0.<java.util.LinkedList$ReverseLinkIterator: int expectedModCount> = $i7;

        r0.<java.util.LinkedList$ReverseLinkIterator: boolean canRemove> = 0;

        return;

     label1:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label2:
        $r6 = new java.util.ConcurrentModificationException;

        specialinvoke $r6.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r6;
    }
}
