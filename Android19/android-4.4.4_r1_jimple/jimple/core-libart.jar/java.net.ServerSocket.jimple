public class java.net.ServerSocket extends java.lang.Object implements java.io.Closeable
{
    private static final int DEFAULT_BACKLOG;
    static java.net.SocketImplFactory factory;
    private final java.net.SocketImpl impl;
    private boolean isBound;
    private boolean isClosed;

    public void <init>() throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.net.SocketImpl r1, $r4;
        java.net.SocketImplFactory $r2, $r5;
        java.net.PlainServerSocketImpl $r3;

        r0 := @this: java.net.ServerSocket;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <java.net.ServerSocket: java.net.SocketImplFactory factory>;

        if $r2 == null goto label2;

        $r5 = <java.net.ServerSocket: java.net.SocketImplFactory factory>;

        r1 = interfaceinvoke $r5.<java.net.SocketImplFactory: java.net.SocketImpl createSocketImpl()>();

     label1:
        r0.<java.net.ServerSocket: java.net.SocketImpl impl> = r1;

        $r4 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        virtualinvoke $r4.<java.net.SocketImpl: void create(boolean)>(1);

        return;

     label2:
        $r3 = new java.net.PlainServerSocketImpl;

        specialinvoke $r3.<java.net.PlainServerSocketImpl: void <init>()>();

        r1 = $r3;

        goto label1;
    }

    public void <init>(int) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        int i0;
        java.net.InetAddress $r1;

        r0 := @this: java.net.ServerSocket;

        i0 := @parameter0: int;

        $r1 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        specialinvoke r0.<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>(i0, 50, $r1);

        return;
    }

    public void <init>(int, int) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        int i0, i1;
        java.net.InetAddress $r1;

        r0 := @this: java.net.ServerSocket;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        specialinvoke r0.<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>(i0, i1, $r1);

        return;
    }

    public void <init>(int, int, java.net.InetAddress) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        int i0, i1;
        java.net.InetAddress r1, r3;
        java.net.SocketImpl r2, r6, $r9, $r10;
        java.lang.Throwable r4, $r13;
        java.io.IOException r5, $r12;
        java.net.SocketImplFactory $r7, $r11;
        java.net.PlainServerSocketImpl $r8;

        r0 := @this: java.net.ServerSocket;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.net.InetAddress;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<java.net.ServerSocket: void checkListen(int)>(i0);

        $r7 = <java.net.ServerSocket: java.net.SocketImplFactory factory>;

        if $r7 == null goto label09;

        $r11 = <java.net.ServerSocket: java.net.SocketImplFactory factory>;

        r2 = interfaceinvoke $r11.<java.net.SocketImplFactory: java.net.SocketImpl createSocketImpl()>();

     label01:
        r0.<java.net.ServerSocket: java.net.SocketImpl impl> = r2;

        if r1 != null goto label10;

        r3 = <java.net.Inet4Address: java.net.InetAddress ANY>;

     label02:
        entermonitor r0;

     label03:
        $r9 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        virtualinvoke $r9.<java.net.SocketImpl: void create(boolean)>(1);

     label04:
        $r10 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        virtualinvoke $r10.<java.net.SocketImpl: void bind(java.net.InetAddress,int)>(r3, i0);

        r0.<java.net.ServerSocket: boolean isBound> = 1;

        r6 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

     label05:
        if i1 <= 0 goto label11;

     label06:
        virtualinvoke r6.<java.net.SocketImpl: void listen(int)>(i1);

     label07:
        exitmonitor r0;

     label08:
        return;

     label09:
        $r8 = new java.net.PlainServerSocketImpl;

        specialinvoke $r8.<java.net.PlainServerSocketImpl: void <init>()>();

        r2 = $r8;

        goto label01;

     label10:
        r3 = r1;

        goto label02;

     label11:
        i1 = 50;

        goto label06;

     label12:
        $r12 := @caughtexception;

        r5 = $r12;

     label13:
        virtualinvoke r0.<java.net.ServerSocket: void close()>();

        throw r5;

     label14:
        $r13 := @caughtexception;

        r4 = $r13;

     label15:
        exitmonitor r0;

     label16:
        throw r4;

        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private void checkListen(int)
    {
        java.net.ServerSocket r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.net.ServerSocket;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 65535 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Port out of range: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    private void checkOpen() throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        boolean $z0;
        java.net.SocketException $r1;

        r0 := @this: java.net.ServerSocket;

        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isClosed()>();

        if $z0 == 0 goto label1;

        $r1 = new java.net.SocketException;

        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");

        throw $r1;

     label1:
        return;
    }

    public static void setSocketFactory(java.net.SocketImplFactory) throws java.io.IOException
    {
        java.net.SocketImplFactory r0, $r2;
        java.lang.Throwable r1, $r4;
        java.net.SocketException $r3;

        r0 := @parameter0: java.net.SocketImplFactory;

        entermonitor class "java/net/ServerSocket";

     label1:
        $r2 = <java.net.ServerSocket: java.net.SocketImplFactory factory>;

        if $r2 == null goto label3;

        $r3 = new java.net.SocketException;

        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Factory already set");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor class "java/net/ServerSocket";

        throw r1;

     label3:
        <java.net.ServerSocket: java.net.SocketImplFactory factory> = r0;

     label4:
        exitmonitor class "java/net/ServerSocket";

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.net.Socket accept() throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.net.Socket r1, $r3;
        java.io.IOException r2, $r5;
        boolean $z0;
        java.net.SocketException $r4;

        r0 := @this: java.net.ServerSocket;

        specialinvoke r0.<java.net.ServerSocket: void checkOpen()>();

        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();

        if $z0 != 0 goto label1;

        $r4 = new java.net.SocketException;

        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("Socket is not bound");

        throw $r4;

     label1:
        $r3 = new java.net.Socket;

        specialinvoke $r3.<java.net.Socket: void <init>()>();

        r1 = $r3;

     label2:
        virtualinvoke r0.<java.net.ServerSocket: void implAccept(java.net.Socket)>(r1);

     label3:
        return r1;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r1.<java.net.Socket: void close()>();

        throw r2;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void bind(java.net.SocketAddress) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.net.SocketAddress r1;

        r0 := @this: java.net.ServerSocket;

        r1 := @parameter0: java.net.SocketAddress;

        virtualinvoke r0.<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>(r1, 50);

        return;
    }

    public void bind(java.net.SocketAddress, int) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.net.SocketAddress r1;
        int i0, i1;
        java.net.InetAddress r2;
        java.lang.Throwable r3, $r22;
        java.io.IOException r4, $r20;
        java.net.SocketImpl r5, $r7;
        java.net.InetSocketAddress r6;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r11, $r13, $r14, $r17, $r19;
        java.net.SocketException $r9;
        java.lang.String $r10, $r12, $r18;
        java.lang.IllegalArgumentException $r15;
        java.lang.Class $r16;
        java.net.BindException $r21;

        r0 := @this: java.net.ServerSocket;

        r1 := @parameter0: java.net.SocketAddress;

        i0 := @parameter1: int;

        specialinvoke r0.<java.net.ServerSocket: void checkOpen()>();

        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();

        if $z0 == 0 goto label01;

        $r21 = new java.net.BindException;

        specialinvoke $r21.<java.net.BindException: void <init>(java.lang.String)>("Socket is already bound");

        throw $r21;

     label01:
        r2 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        i1 = 0;

        if r1 == null goto label04;

        $z1 = r1 instanceof java.net.InetSocketAddress;

        if $z1 != 0 goto label02;

        $r15 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local address not an InetSocketAddress: ");

        $r16 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r15;

     label02:
        r6 = (java.net.InetSocketAddress) r1;

        r2 = virtualinvoke r6.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        if r2 != null goto label03;

        $r9 = new java.net.SocketException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host is unresolved: ");

        $r10 = virtualinvoke r6.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.net.SocketException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label03:
        i1 = virtualinvoke r6.<java.net.InetSocketAddress: int getPort()>();

     label04:
        entermonitor r0;

     label05:
        $r7 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        virtualinvoke $r7.<java.net.SocketImpl: void bind(java.net.InetAddress,int)>(r2, i1);

        r0.<java.net.ServerSocket: boolean isBound> = 1;

        r5 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

     label06:
        if i0 <= 0 goto label15;

     label07:
        virtualinvoke r5.<java.net.SocketImpl: void listen(int)>(i0);

     label08:
        exitmonitor r0;

     label09:
        return;

     label10:
        $r20 := @caughtexception;

        r4 = $r20;

     label11:
        virtualinvoke r0.<java.net.ServerSocket: void close()>();

        throw r4;

     label12:
        $r22 := @caughtexception;

        r3 = $r22;

     label13:
        exitmonitor r0;

     label14:
        throw r3;

     label15:
        i0 = 50;

        goto label07;

        catch java.io.IOException from label05 to label06 with label10;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.io.IOException from label07 to label08 with label10;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void close() throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.net.SocketImpl $r1;

        r0 := @this: java.net.ServerSocket;

        r0.<java.net.ServerSocket: boolean isClosed> = 1;

        $r1 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        virtualinvoke $r1.<java.net.SocketImpl: void close()>();

        return;
    }

    public java.nio.channels.ServerSocketChannel getChannel()
    {
        java.net.ServerSocket r0;

        r0 := @this: java.net.ServerSocket;

        return null;
    }

    public java.net.SocketImpl getImpl$()
    {
        java.net.ServerSocket r0;
        java.net.SocketImpl $r1;

        r0 := @this: java.net.ServerSocket;

        $r1 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        return $r1;
    }

    public java.net.InetAddress getInetAddress()
    {
        java.net.ServerSocket r0;
        boolean $z0;
        java.net.SocketImpl $r1;
        java.net.InetAddress $r2;

        r0 := @this: java.net.ServerSocket;

        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.net.InetAddress getInetAddress()>();

        return $r2;
    }

    public int getLocalPort()
    {
        java.net.ServerSocket r0;
        boolean $z0;
        java.net.SocketImpl $r1;
        int $i0;

        r0 := @this: java.net.ServerSocket;

        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r1 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        $i0 = virtualinvoke $r1.<java.net.SocketImpl: int getLocalPort()>();

        return $i0;
    }

    public java.net.SocketAddress getLocalSocketAddress()
    {
        java.net.ServerSocket r0;
        boolean $z0;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: java.net.ServerSocket;

        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = new java.net.InetSocketAddress;

        $r2 = virtualinvoke r0.<java.net.ServerSocket: java.net.InetAddress getInetAddress()>();

        $i0 = virtualinvoke r0.<java.net.ServerSocket: int getLocalPort()>();

        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);

        return $r1;
    }

    public int getReceiveBufferSize() throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        java.net.SocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: java.net.ServerSocket;

        specialinvoke r0.<java.net.ServerSocket: void checkOpen()>();

        $r1 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>(4098);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public boolean getReuseAddress() throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        java.net.SocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: java.net.ServerSocket;

        specialinvoke r0.<java.net.ServerSocket: void checkOpen()>();

        $r1 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>(4);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public int getSoTimeout() throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.lang.Throwable r1, $r5;
        int i0;
        java.net.SocketImpl $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: java.net.ServerSocket;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.net.ServerSocket: void checkOpen()>();

        $r2 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        $r3 = virtualinvoke $r2.<java.net.SocketImpl: java.lang.Object getOption(int)>(4102);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected final void implAccept(java.net.Socket) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.net.Socket r1;
        java.lang.Throwable r2, $r5;
        java.net.SocketImpl $r3, $r4;

        r0 := @this: java.net.ServerSocket;

        r1 := @parameter0: java.net.Socket;

        entermonitor r0;

     label1:
        $r4 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        $r3 = r1.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r4.<java.net.SocketImpl: void accept(java.net.SocketImpl)>($r3);

        virtualinvoke r1.<java.net.Socket: void accepted()>();

        exitmonitor r0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isBound()
    {
        java.net.ServerSocket r0;
        boolean $z0;

        r0 := @this: java.net.ServerSocket;

        $z0 = r0.<java.net.ServerSocket: boolean isBound>;

        return $z0;
    }

    public boolean isClosed()
    {
        java.net.ServerSocket r0;
        boolean $z0;

        r0 := @this: java.net.ServerSocket;

        $z0 = r0.<java.net.ServerSocket: boolean isClosed>;

        return $z0;
    }

    public void setPerformancePreferences(int, int, int)
    {
        java.net.ServerSocket r0;
        int i0, i1, i2;

        r0 := @this: java.net.ServerSocket;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }

    public void setReceiveBufferSize(int) throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        int i0;
        java.net.SocketImpl $r1;
        java.lang.Integer $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.net.ServerSocket;

        i0 := @parameter0: int;

        specialinvoke r0.<java.net.ServerSocket: void checkOpen()>();

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size < 1");

        throw $r3;

     label1:
        $r1 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4098, $r2);

        return;
    }

    public void setReuseAddress(boolean) throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        boolean z0;
        java.net.SocketImpl $r1;
        java.lang.Boolean $r2;

        r0 := @this: java.net.ServerSocket;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.net.ServerSocket: void checkOpen()>();

        $r1 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r1.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4, $r2);

        return;
    }

    public void setSoTimeout(int) throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        int i0;
        java.lang.Throwable r1, $r5;
        java.net.SocketImpl $r2;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.net.ServerSocket;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.net.ServerSocket: void checkOpen()>();

     label2:
        if i0 >= 0 goto label5;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");

        throw $r4;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

     label5:
        $r2 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4102, $r3);

     label6:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.String toString()
    {
        java.net.ServerSocket r0;
        java.lang.StringBuilder r1, $r2, $r4, $r7, $r8, $r11, $r12, $r13, $r15, $r17;
        boolean $z0;
        java.net.InetAddress $r5, $r9;
        java.lang.String $r6, $r10, $r14, $r16;
        int $i0;

        r0 := @this: java.net.ServerSocket;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(64);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ServerSocket[");

        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();

        if $z0 != 0 goto label1;

        $r17 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unbound]");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label1:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addr=");

        $r5 = virtualinvoke r0.<java.net.ServerSocket: java.net.InetAddress getInetAddress()>();

        $r6 = virtualinvoke $r5.<java.net.InetAddress: java.lang.String getHostName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = virtualinvoke r0.<java.net.ServerSocket: java.net.InetAddress getInetAddress()>();

        $r10 = virtualinvoke $r9.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",port=0,localport=");

        $i0 = virtualinvoke r0.<java.net.ServerSocket: int getLocalPort()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public static void <clinit>()
    {
        <java.net.ServerSocket: int DEFAULT_BACKLOG> = 50;

        return;
    }
}
