public class java.security.cert.CertStore extends java.lang.Object
{
    private static final java.lang.String DEFAULT_PROPERTY;
    private static final org.apache.harmony.security.fortress.Engine ENGINE;
    private static final java.lang.String PROPERTY_NAME;
    private static final java.lang.String SERVICE;
    private final java.security.cert.CertStoreParameters certStoreParams;
    private final java.security.Provider provider;
    private final java.security.cert.CertStoreSpi spiImpl;
    private final java.lang.String type;

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;

        <java.security.cert.CertStore: java.lang.String SERVICE> = "CertStore";

        <java.security.cert.CertStore: java.lang.String PROPERTY_NAME> = "certstore.type";

        <java.security.cert.CertStore: java.lang.String DEFAULT_PROPERTY> = "LDAP";

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("CertStore");

        <java.security.cert.CertStore: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        return;
    }

    protected void <init>(java.security.cert.CertStoreSpi, java.security.Provider, java.lang.String, java.security.cert.CertStoreParameters)
    {
        java.security.cert.CertStore r0;
        java.security.cert.CertStoreSpi r1;
        java.security.Provider r2;
        java.lang.String r3;
        java.security.cert.CertStoreParameters r4;

        r0 := @this: java.security.cert.CertStore;

        r1 := @parameter0: java.security.cert.CertStoreSpi;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.security.cert.CertStoreParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.security.cert.CertStore: java.security.Provider provider> = r2;

        r0.<java.security.cert.CertStore: java.lang.String type> = r3;

        r0.<java.security.cert.CertStore: java.security.cert.CertStoreSpi spiImpl> = r1;

        r0.<java.security.cert.CertStore: java.security.cert.CertStoreParameters certStoreParams> = r4;

        return;
    }

    public static final java.lang.String getDefaultType()
    {
        java.lang.String r0;

        r0 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("certstore.type");

        if r0 != null goto label1;

        r0 = "LDAP";

     label1:
        return r0;
    }

    public static java.security.cert.CertStore getInstance(java.lang.String, java.security.cert.CertStoreParameters) throws java.security.InvalidAlgorithmParameterException, java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, $r14;
        java.security.cert.CertStoreParameters r1;
        java.security.NoSuchAlgorithmException r2, $r12;
        java.lang.Throwable r3;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r4;
        java.security.cert.CertStore r5, $r7;
        org.apache.harmony.security.fortress.Engine $r6;
        java.lang.Object $r8;
        java.security.Provider $r9;
        java.security.cert.CertStoreSpi $r10;
        java.lang.NullPointerException $r11;
        java.security.InvalidAlgorithmParameterException $r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.cert.CertStoreParameters;

        if r0 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("type == null");

        throw $r11;

     label1:
        $r6 = <java.security.cert.CertStore: org.apache.harmony.security.fortress.Engine ENGINE>;

        r4 = virtualinvoke $r6.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)>(r0, r1);

        $r7 = new java.security.cert.CertStore;

        $r8 = r4.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $r10 = (java.security.cert.CertStoreSpi) $r8;

        $r9 = r4.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        specialinvoke $r7.<java.security.cert.CertStore: void <init>(java.security.cert.CertStoreSpi,java.security.Provider,java.lang.String,java.security.cert.CertStoreParameters)>($r10, $r9, r0, r1);

        r5 = $r7;

     label2:
        return r5;

     label3:
        $r12 := @caughtexception;

        r2 = $r12;

        r3 = virtualinvoke r2.<java.security.NoSuchAlgorithmException: java.lang.Throwable getCause()>();

        if r3 != null goto label4;

        throw r2;

     label4:
        $r13 = new java.security.InvalidAlgorithmParameterException;

        $r14 = virtualinvoke r2.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke $r13.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String,java.lang.Throwable)>($r14, r3);

        throw $r13;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public static java.security.cert.CertStore getInstance(java.lang.String, java.security.cert.CertStoreParameters, java.lang.String) throws java.security.InvalidAlgorithmParameterException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r2;
        java.security.cert.CertStoreParameters r1;
        java.security.Provider r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        java.security.cert.CertStore $r5;
        java.security.NoSuchProviderException $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.cert.CertStoreParameters;

        r2 := @parameter2: java.lang.String;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null || provider.isEmpty()");

        throw $r4;

     label2:
        r3 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r2);

        if r3 != null goto label3;

        $r6 = new java.security.NoSuchProviderException;

        specialinvoke $r6.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r2);

        throw $r6;

     label3:
        $r5 = staticinvoke <java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)>(r0, r1, r3);

        return $r5;
    }

    public static java.security.cert.CertStore getInstance(java.lang.String, java.security.cert.CertStoreParameters, java.security.Provider) throws java.security.NoSuchAlgorithmException, java.security.InvalidAlgorithmParameterException
    {
        java.lang.String r0, $r14;
        java.security.cert.CertStoreParameters r1;
        java.security.Provider r2;
        java.security.cert.CertStore r3, $r6;
        java.security.NoSuchAlgorithmException r4, $r12;
        java.lang.Throwable r5;
        org.apache.harmony.security.fortress.Engine $r7;
        java.lang.Object $r8;
        java.security.cert.CertStoreSpi $r9;
        java.lang.NullPointerException $r10;
        java.lang.IllegalArgumentException $r11;
        java.security.InvalidAlgorithmParameterException $r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.cert.CertStoreParameters;

        r2 := @parameter2: java.security.Provider;

        if r2 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r11;

     label1:
        if r0 != null goto label2;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("type == null");

        throw $r10;

     label2:
        $r6 = new java.security.cert.CertStore;

        $r7 = <java.security.cert.CertStore: org.apache.harmony.security.fortress.Engine ENGINE>;

        $r8 = virtualinvoke $r7.<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)>(r0, r2, r1);

        $r9 = (java.security.cert.CertStoreSpi) $r8;

        specialinvoke $r6.<java.security.cert.CertStore: void <init>(java.security.cert.CertStoreSpi,java.security.Provider,java.lang.String,java.security.cert.CertStoreParameters)>($r9, r2, r0, r1);

        r3 = $r6;

     label3:
        return r3;

     label4:
        $r12 := @caughtexception;

        r4 = $r12;

        r5 = virtualinvoke r4.<java.security.NoSuchAlgorithmException: java.lang.Throwable getCause()>();

        if r5 != null goto label5;

        throw r4;

     label5:
        $r13 = new java.security.InvalidAlgorithmParameterException;

        $r14 = virtualinvoke r4.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke $r13.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String,java.lang.Throwable)>($r14, r5);

        throw $r13;

        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
    }

    public final java.util.Collection getCRLs(java.security.cert.CRLSelector) throws java.security.cert.CertStoreException
    {
        java.security.cert.CertStore r0;
        java.security.cert.CRLSelector r1;
        java.security.cert.CertStoreSpi $r2;
        java.util.Collection $r3;

        r0 := @this: java.security.cert.CertStore;

        r1 := @parameter0: java.security.cert.CRLSelector;

        $r2 = r0.<java.security.cert.CertStore: java.security.cert.CertStoreSpi spiImpl>;

        $r3 = virtualinvoke $r2.<java.security.cert.CertStoreSpi: java.util.Collection engineGetCRLs(java.security.cert.CRLSelector)>(r1);

        return $r3;
    }

    public final java.security.cert.CertStoreParameters getCertStoreParameters()
    {
        java.security.cert.CertStore r0;
        java.security.cert.CertStoreParameters $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.security.cert.CertStore;

        $r1 = r0.<java.security.cert.CertStore: java.security.cert.CertStoreParameters certStoreParams>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<java.security.cert.CertStore: java.security.cert.CertStoreParameters certStoreParams>;

        $r3 = interfaceinvoke $r2.<java.security.cert.CertStoreParameters: java.lang.Object clone()>();

        $r4 = (java.security.cert.CertStoreParameters) $r3;

        return $r4;
    }

    public final java.util.Collection getCertificates(java.security.cert.CertSelector) throws java.security.cert.CertStoreException
    {
        java.security.cert.CertStore r0;
        java.security.cert.CertSelector r1;
        java.security.cert.CertStoreSpi $r2;
        java.util.Collection $r3;

        r0 := @this: java.security.cert.CertStore;

        r1 := @parameter0: java.security.cert.CertSelector;

        $r2 = r0.<java.security.cert.CertStore: java.security.cert.CertStoreSpi spiImpl>;

        $r3 = virtualinvoke $r2.<java.security.cert.CertStoreSpi: java.util.Collection engineGetCertificates(java.security.cert.CertSelector)>(r1);

        return $r3;
    }

    public final java.security.Provider getProvider()
    {
        java.security.cert.CertStore r0;
        java.security.Provider $r1;

        r0 := @this: java.security.cert.CertStore;

        $r1 = r0.<java.security.cert.CertStore: java.security.Provider provider>;

        return $r1;
    }

    public final java.lang.String getType()
    {
        java.security.cert.CertStore r0;
        java.lang.String $r1;

        r0 := @this: java.security.cert.CertStore;

        $r1 = r0.<java.security.cert.CertStore: java.lang.String type>;

        return $r1;
    }
}
