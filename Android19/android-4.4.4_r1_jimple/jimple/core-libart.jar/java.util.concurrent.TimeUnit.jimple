public abstract enum class java.util.concurrent.TimeUnit extends java.lang.Enum
{
    private static final java.util.concurrent.TimeUnit[] $VALUES;
    static final long C0;
    static final long C1;
    static final long C2;
    static final long C3;
    static final long C4;
    static final long C5;
    static final long C6;
    public static final enum java.util.concurrent.TimeUnit DAYS;
    public static final enum java.util.concurrent.TimeUnit HOURS;
    static final long MAX;
    public static final enum java.util.concurrent.TimeUnit MICROSECONDS;
    public static final enum java.util.concurrent.TimeUnit MILLISECONDS;
    public static final enum java.util.concurrent.TimeUnit MINUTES;
    public static final enum java.util.concurrent.TimeUnit NANOSECONDS;
    public static final enum java.util.concurrent.TimeUnit SECONDS;

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit[] r0;
        java.util.concurrent.TimeUnit$1 $r1;
        java.util.concurrent.TimeUnit$2 $r2;
        java.util.concurrent.TimeUnit$3 $r3;
        java.util.concurrent.TimeUnit$4 $r4;
        java.util.concurrent.TimeUnit$5 $r5;
        java.util.concurrent.TimeUnit$6 $r6;
        java.util.concurrent.TimeUnit$7 $r7;
        java.util.concurrent.TimeUnit $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        <java.util.concurrent.TimeUnit: long MAX> = 9223372036854775807L;

        <java.util.concurrent.TimeUnit: long C6> = 86400000000000L;

        <java.util.concurrent.TimeUnit: long C5> = 3600000000000L;

        <java.util.concurrent.TimeUnit: long C4> = 60000000000L;

        <java.util.concurrent.TimeUnit: long C3> = 1000000000L;

        <java.util.concurrent.TimeUnit: long C2> = 1000000L;

        <java.util.concurrent.TimeUnit: long C1> = 1000L;

        <java.util.concurrent.TimeUnit: long C0> = 1L;

        $r1 = new java.util.concurrent.TimeUnit$1;

        specialinvoke $r1.<java.util.concurrent.TimeUnit$1: void <init>(java.lang.String,int)>("NANOSECONDS", 0);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> = $r1;

        $r2 = new java.util.concurrent.TimeUnit$2;

        specialinvoke $r2.<java.util.concurrent.TimeUnit$2: void <init>(java.lang.String,int)>("MICROSECONDS", 1);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS> = $r2;

        $r3 = new java.util.concurrent.TimeUnit$3;

        specialinvoke $r3.<java.util.concurrent.TimeUnit$3: void <init>(java.lang.String,int)>("MILLISECONDS", 2);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> = $r3;

        $r4 = new java.util.concurrent.TimeUnit$4;

        specialinvoke $r4.<java.util.concurrent.TimeUnit$4: void <init>(java.lang.String,int)>("SECONDS", 3);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> = $r4;

        $r5 = new java.util.concurrent.TimeUnit$5;

        specialinvoke $r5.<java.util.concurrent.TimeUnit$5: void <init>(java.lang.String,int)>("MINUTES", 4);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES> = $r5;

        $r6 = new java.util.concurrent.TimeUnit$6;

        specialinvoke $r6.<java.util.concurrent.TimeUnit$6: void <init>(java.lang.String,int)>("HOURS", 5);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS> = $r6;

        $r7 = new java.util.concurrent.TimeUnit$7;

        specialinvoke $r7.<java.util.concurrent.TimeUnit$7: void <init>(java.lang.String,int)>("DAYS", 6);

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS> = $r7;

        r0 = newarray (java.util.concurrent.TimeUnit)[7];

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        r0[0] = $r8;

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>;

        r0[1] = $r9;

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        r0[2] = $r10;

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        r0[3] = $r11;

        $r12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        r0[4] = $r12;

        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        r0[5] = $r13;

        $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        r0[6] = $r14;

        <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] $VALUES> = r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        java.util.concurrent.TimeUnit r0;
        java.lang.String r1;
        int i0;

        r0 := @this: java.util.concurrent.TimeUnit;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    void <init>(java.lang.String, int, java.util.concurrent.TimeUnit$1)
    {
        java.util.concurrent.TimeUnit r0;
        java.lang.String r1;
        int i0;
        java.util.concurrent.TimeUnit$1 r2;

        r0 := @this: java.util.concurrent.TimeUnit;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.concurrent.TimeUnit$1;

        specialinvoke r0.<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static java.util.concurrent.TimeUnit valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        java.util.concurrent.TimeUnit $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "java/util/concurrent/TimeUnit", r0);

        $r2 = (java.util.concurrent.TimeUnit) $r1;

        return $r2;
    }

    public static java.util.concurrent.TimeUnit[] values()
    {
        java.util.concurrent.TimeUnit[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.util.concurrent.TimeUnit[]) $r1;

        return $r2;
    }

    static long x(long, long, long)
    {
        long l0, l1, l2, $l4, $l6;
        byte $b3, $b5;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $b3 = l0 cmp l2;

        if $b3 <= 0 goto label1;

        return 9223372036854775807L;

     label1:
        $l4 = neg l2;

        $b5 = l0 cmp $l4;

        if $b5 >= 0 goto label2;

        return -9223372036854775808L;

     label2:
        $l6 = l0 * l1;

        return $l6;
    }

    public long convert(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r0, r1;
        long l0;
        java.lang.AbstractMethodError $r2;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = new java.lang.AbstractMethodError;

        specialinvoke $r2.<java.lang.AbstractMethodError: void <init>()>();

        throw $r2;
    }

    abstract int excessNanos(long, long);

    public void sleep(long) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit r0;
        long l0, l1;
        byte $b2;
        int $i3;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label1;

        l1 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $i3 = virtualinvoke r0.<java.util.concurrent.TimeUnit: int excessNanos(long,long)>(l0, l1);

        staticinvoke <java.lang.Thread: void sleep(long,int)>(l1, $i3);

     label1:
        return;
    }

    public void timedJoin(java.lang.Thread, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit r0;
        java.lang.Thread r1;
        long l0, l1;
        byte $b2;
        int $i3;

        r0 := @this: java.util.concurrent.TimeUnit;

        r1 := @parameter0: java.lang.Thread;

        l0 := @parameter1: long;

        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label1;

        l1 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $i3 = virtualinvoke r0.<java.util.concurrent.TimeUnit: int excessNanos(long,long)>(l0, l1);

        virtualinvoke r1.<java.lang.Thread: void join(long,int)>(l1, $i3);

     label1:
        return;
    }

    public void timedWait(java.lang.Object, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit r0;
        java.lang.Object r1;
        long l0, l1;
        byte $b2;
        int $i3;

        r0 := @this: java.util.concurrent.TimeUnit;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label1;

        l1 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $i3 = virtualinvoke r0.<java.util.concurrent.TimeUnit: int excessNanos(long,long)>(l0, l1);

        virtualinvoke r1.<java.lang.Object: void wait(long,int)>(l1, $i3);

     label1:
        return;
    }

    public long toDays(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.AbstractMethodError $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.AbstractMethodError;

        specialinvoke $r1.<java.lang.AbstractMethodError: void <init>()>();

        throw $r1;
    }

    public long toHours(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.AbstractMethodError $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.AbstractMethodError;

        specialinvoke $r1.<java.lang.AbstractMethodError: void <init>()>();

        throw $r1;
    }

    public long toMicros(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.AbstractMethodError $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.AbstractMethodError;

        specialinvoke $r1.<java.lang.AbstractMethodError: void <init>()>();

        throw $r1;
    }

    public long toMillis(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.AbstractMethodError $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.AbstractMethodError;

        specialinvoke $r1.<java.lang.AbstractMethodError: void <init>()>();

        throw $r1;
    }

    public long toMinutes(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.AbstractMethodError $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.AbstractMethodError;

        specialinvoke $r1.<java.lang.AbstractMethodError: void <init>()>();

        throw $r1;
    }

    public long toNanos(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.AbstractMethodError $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.AbstractMethodError;

        specialinvoke $r1.<java.lang.AbstractMethodError: void <init>()>();

        throw $r1;
    }

    public long toSeconds(long)
    {
        java.util.concurrent.TimeUnit r0;
        long l0;
        java.lang.AbstractMethodError $r1;

        r0 := @this: java.util.concurrent.TimeUnit;

        l0 := @parameter0: long;

        $r1 = new java.lang.AbstractMethodError;

        specialinvoke $r1.<java.lang.AbstractMethodError: void <init>()>();

        throw $r1;
    }
}
