public class java.util.logging.MemoryHandler extends java.util.logging.Handler
{
    private static final int DEFAULT_SIZE;
    private java.util.logging.LogRecord[] buffer;
    private int cursor;
    private final java.util.logging.LogManager manager;
    private java.util.logging.Level push;
    private int size;
    private java.util.logging.Handler target;

    public void <init>()
    {
        java.util.logging.MemoryHandler r0;
        java.lang.String r1, r2, r5, r6, $r15, $r25, $r28, $r35, $r45, $r47;
        java.lang.ClassLoader r4;
        java.lang.Exception r7, r8, $r33, $r36, $r44;
        java.util.logging.Level $r9, $r31;
        java.util.logging.LogManager $r10, $r13, $r21, $r26;
        java.lang.Class $r11, $r18;
        java.lang.StringBuilder $r12, $r14, $r16, $r22, $r23, $r24, $r27, $r29, $r30, $r34, $r37, $r38, $r39, $r40, $r41, $r43, $r46, $r48, $r49;
        java.lang.Thread $r17;
        java.util.logging.Handler $r19;
        java.lang.Object $r20;
        int $i0, $i1, $i2;
        java.util.logging.LogRecord[] $r32;
        java.lang.RuntimeException $r42;

        r0 := @this: java.util.logging.MemoryHandler;

        specialinvoke r0.<java.util.logging.Handler: void <init>()>();

        r0.<java.util.logging.MemoryHandler: int size> = 1000;

        $r9 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        r0.<java.util.logging.MemoryHandler: java.util.logging.Level push> = $r9;

        $r10 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager> = $r10;

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".target");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke $r13.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r15);

     label01:
        $r17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r4 = virtualinvoke $r17.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label02:
        if r4 != null goto label04;

     label03:
        r4 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label04:
        $r18 = virtualinvoke r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

        $r20 = virtualinvoke $r18.<java.lang.Class: java.lang.Object newInstance()>();

        $r19 = (java.util.logging.Handler) $r20;

        r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target> = $r19;

     label05:
        $r21 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".size");

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = virtualinvoke $r21.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r25);

        if r5 == null goto label07;

     label06:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r5);

        r0.<java.util.logging.MemoryHandler: int size> = $i0;

        $i2 = r0.<java.util.logging.MemoryHandler: int size>;

        if $i2 > 0 goto label07;

        r0.<java.util.logging.MemoryHandler: int size> = 1000;

     label07:
        $r26 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".push");

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = virtualinvoke $r26.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r28);

        if r6 == null goto label09;

     label08:
        $r31 = staticinvoke <java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>(r6);

        r0.<java.util.logging.MemoryHandler: java.util.logging.Level push> = $r31;

     label09:
        virtualinvoke r0.<java.util.logging.MemoryHandler: void initProperties(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("ALL", null, "java.util.logging.SimpleFormatter", null);

        $i1 = r0.<java.util.logging.MemoryHandler: int size>;

        $r32 = newarray (java.util.logging.LogRecord)[$i1];

        r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer> = $r32;

        return;

     label10:
        $r36 := @caughtexception;

        $r42 = new java.lang.RuntimeException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot load target handler \'");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r46 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.RuntimeException: void <init>(java.lang.String)>($r45);

        throw $r42;

     label11:
        $r33 := @caughtexception;

        r8 = $r33;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".size");

        $r35 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.util.logging.MemoryHandler: void printInvalidPropMessage(java.lang.String,java.lang.String,java.lang.Exception)>($r35, r5, r8);

        goto label07;

     label12:
        $r44 := @caughtexception;

        r7 = $r44;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".push");

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.util.logging.MemoryHandler: void printInvalidPropMessage(java.lang.String,java.lang.String,java.lang.Exception)>($r47, r6, r7);

        goto label09;

        catch java.lang.Exception from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label10;
        catch java.lang.Exception from label04 to label05 with label10;
        catch java.lang.Exception from label06 to label07 with label11;
        catch java.lang.Exception from label08 to label09 with label12;
    }

    public void <init>(java.util.logging.Handler, int, java.util.logging.Level)
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.Handler r1;
        int i0;
        java.util.logging.Level r2, $r3;
        java.util.logging.LogManager $r4;
        java.util.logging.LogRecord[] $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: java.util.logging.MemoryHandler;

        r1 := @parameter0: java.util.logging.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.logging.Level;

        specialinvoke r0.<java.util.logging.Handler: void <init>()>();

        r0.<java.util.logging.MemoryHandler: int size> = 1000;

        $r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        r0.<java.util.logging.MemoryHandler: java.util.logging.Level push> = $r3;

        $r4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager> = $r4;

        if i0 > 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size <= 0");

        throw $r7;

     label1:
        virtualinvoke r1.<java.util.logging.Handler: java.util.logging.Level getLevel()>();

        virtualinvoke r2.<java.util.logging.Level: int intValue()>();

        r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target> = r1;

        r0.<java.util.logging.MemoryHandler: int size> = i0;

        r0.<java.util.logging.MemoryHandler: java.util.logging.Level push> = r2;

        virtualinvoke r0.<java.util.logging.MemoryHandler: void initProperties(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("ALL", null, "java.util.logging.SimpleFormatter", null);

        $r6 = newarray (java.util.logging.LogRecord)[i0];

        r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer> = $r6;

        return;
    }

    public void close()
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.LogManager $r1;
        java.util.logging.Handler $r2;
        java.util.logging.Level $r3;

        r0 := @this: java.util.logging.MemoryHandler;

        $r1 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager>;

        virtualinvoke $r1.<java.util.logging.LogManager: void checkAccess()>();

        $r2 = r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target>;

        virtualinvoke $r2.<java.util.logging.Handler: void close()>();

        $r3 = <java.util.logging.Level: java.util.logging.Level OFF>;

        virtualinvoke r0.<java.util.logging.MemoryHandler: void setLevel(java.util.logging.Level)>($r3);

        return;
    }

    public void flush()
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.Handler $r1;

        r0 := @this: java.util.logging.MemoryHandler;

        $r1 = r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target>;

        virtualinvoke $r1.<java.util.logging.Handler: void flush()>();

        return;
    }

    public java.util.logging.Level getPushLevel()
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.Level $r1;

        r0 := @this: java.util.logging.MemoryHandler;

        $r1 = r0.<java.util.logging.MemoryHandler: java.util.logging.Level push>;

        return $r1;
    }

    public boolean isLoggable(java.util.logging.LogRecord)
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.LogRecord r1;
        boolean $z0;

        r0 := @this: java.util.logging.MemoryHandler;

        r1 := @parameter0: java.util.logging.LogRecord;

        $z0 = specialinvoke r0.<java.util.logging.Handler: boolean isLoggable(java.util.logging.LogRecord)>(r1);

        return $z0;
    }

    public void publish(java.util.logging.LogRecord)
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.LogRecord r1;
        java.lang.Throwable r2, $r6;
        boolean z0;
        java.util.logging.LogRecord[] r3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.logging.Level $r4, $r5;

        r0 := @this: java.util.logging.MemoryHandler;

        r1 := @parameter0: java.util.logging.LogRecord;

        entermonitor r0;

     label1:
        z0 = virtualinvoke r0.<java.util.logging.MemoryHandler: boolean isLoggable(java.util.logging.LogRecord)>(r1);

     label2:
        if z0 != 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        $i2 = r0.<java.util.logging.MemoryHandler: int cursor>;

        $i1 = r0.<java.util.logging.MemoryHandler: int size>;

        if $i2 < $i1 goto label5;

        r0.<java.util.logging.MemoryHandler: int cursor> = 0;

     label5:
        r3 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        i0 = r0.<java.util.logging.MemoryHandler: int cursor>;

        $i3 = i0 + 1;

        r0.<java.util.logging.MemoryHandler: int cursor> = $i3;

        r3[i0] = r1;

        $r4 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();

        $i4 = virtualinvoke $r4.<java.util.logging.Level: int intValue()>();

        $r5 = r0.<java.util.logging.MemoryHandler: java.util.logging.Level push>;

        $i5 = virtualinvoke $r5.<java.util.logging.Level: int intValue()>();

        if $i4 < $i5 goto label3;

        virtualinvoke r0.<java.util.logging.MemoryHandler: void push()>();

     label6:
        goto label3;

     label7:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void push()
    {
        java.util.logging.MemoryHandler r0;
        int i0, i1, $i2, $i3;
        java.util.logging.LogRecord[] $r1, $r3, $r4, $r7, $r9, $r10;
        java.util.logging.LogRecord $r2, $r5, $r8, $r11;
        java.util.logging.Handler $r6, $r12;

        r0 := @this: java.util.logging.MemoryHandler;

        i0 = r0.<java.util.logging.MemoryHandler: int cursor>;

     label1:
        $i2 = r0.<java.util.logging.MemoryHandler: int size>;

        if i0 >= $i2 goto label3;

        $r7 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r8 = $r7[i0];

        if $r8 == null goto label2;

        $r12 = r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target>;

        $r10 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r11 = $r10[i0];

        virtualinvoke $r12.<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>($r11);

     label2:
        $r9 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r9[i0] = null;

        i0 = i0 + 1;

        goto label1;

     label3:
        i1 = 0;

     label4:
        $i3 = r0.<java.util.logging.MemoryHandler: int cursor>;

        if i1 >= $i3 goto label6;

        $r1 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r2 = $r1[i1];

        if $r2 == null goto label5;

        $r6 = r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target>;

        $r4 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r5 = $r4[i1];

        virtualinvoke $r6.<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>($r5);

     label5:
        $r3 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r3[i1] = null;

        i1 = i1 + 1;

        goto label4;

     label6:
        r0.<java.util.logging.MemoryHandler: int cursor> = 0;

        return;
    }

    public void setPushLevel(java.util.logging.Level)
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.Level r1;
        java.util.logging.LogManager $r2;

        r0 := @this: java.util.logging.MemoryHandler;

        r1 := @parameter0: java.util.logging.Level;

        $r2 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager>;

        virtualinvoke $r2.<java.util.logging.LogManager: void checkAccess()>();

        virtualinvoke r1.<java.util.logging.Level: int intValue()>();

        r0.<java.util.logging.MemoryHandler: java.util.logging.Level push> = r1;

        return;
    }

    public static void <clinit>()
    {
        <java.util.logging.MemoryHandler: int DEFAULT_SIZE> = 1000;

        return;
    }
}
