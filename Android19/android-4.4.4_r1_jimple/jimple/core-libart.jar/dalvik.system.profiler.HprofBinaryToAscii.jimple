public final class dalvik.system.profiler.HprofBinaryToAscii extends java.lang.Object
{

    public void <init>()
    {
        dalvik.system.profiler.HprofBinaryToAscii r0;

        r0 := @this: dalvik.system.profiler.HprofBinaryToAscii;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.Closeable;

        if r0 == null goto label2;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static boolean convert(java.lang.String[])
    {
        java.lang.String[] r0;
        java.io.File r1, $r6;
        java.io.IOException r2, r4, $r14, $r21;
        dalvik.system.profiler.HprofData r3, r5;
        int $i0;
        java.lang.String $r7, $r11, $r20, $r22, $r26, $r30;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r15, $r17, $r18, $r19, $r24, $r25, $r27, $r28, $r29;
        java.io.PrintStream $r16, $r23;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 1 goto label1;

        staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: void usage(java.lang.String)>("binary hprof file argument expected");

        return 0;

     label1:
        $r6 = new java.io.File;

        $r7 = r0[0];

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        r1 = $r6;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: void usage(java.lang.String)>($r11);

        return 0;

     label2:
        $z1 = staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: boolean startsWithMagic(java.io.File)>(r1);

        if $z1 == 0 goto label6;

     label3:
        r5 = staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: dalvik.system.profiler.HprofData readHprof(java.io.File)>(r1);

     label4:
        $z3 = staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: boolean write(dalvik.system.profiler.HprofData)>(r5);

        return $z3;

     label5:
        $r21 := @caughtexception;

        r4 = $r21;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem reading binary hprof data from ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r26 = virtualinvoke r4.<java.io.IOException: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r30);

        return 0;

     label6:
        r3 = staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: dalvik.system.profiler.HprofData readSnapshot(java.io.File)>(r1);

     label7:
        $z2 = staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: boolean write(dalvik.system.profiler.HprofData)>(r3);

        return $z2;

     label8:
        $r14 := @caughtexception;

        r2 = $r14;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem reading snapshot containing binary hprof data from ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r20 = virtualinvoke r2.<java.io.IOException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r22);

        return 0;

        catch java.io.IOException from label3 to label4 with label5;
        catch java.io.IOException from label6 to label7 with label8;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        byte b0;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $z0 = staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: boolean convert(java.lang.String[])>(r0);

        if $z0 == 0 goto label2;

        b0 = 0;

     label1:
        staticinvoke <java.lang.System: void exit(int)>(b0);

        return;

     label2:
        b0 = 1;

        goto label1;
    }

    private static dalvik.system.profiler.HprofData read(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        dalvik.system.profiler.BinaryHprofReader r1, $r2;
        dalvik.system.profiler.HprofData $r3;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new dalvik.system.profiler.BinaryHprofReader;

        specialinvoke $r2.<dalvik.system.profiler.BinaryHprofReader: void <init>(java.io.InputStream)>(r0);

        r1 = $r2;

        virtualinvoke r1.<dalvik.system.profiler.BinaryHprofReader: void setStrict(boolean)>(0);

        virtualinvoke r1.<dalvik.system.profiler.BinaryHprofReader: void read()>();

        $r3 = virtualinvoke r1.<dalvik.system.profiler.BinaryHprofReader: dalvik.system.profiler.HprofData getHprofData()>();

        return $r3;
    }

    private static dalvik.system.profiler.HprofData readHprof(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.io.BufferedInputStream r1, r2, $r5;
        java.lang.Throwable r3, $r7, $r8;
        dalvik.system.profiler.HprofData r4;
        java.io.FileInputStream $r6;

        r0 := @parameter0: java.io.File;

        r1 = null;

     label1:
        $r5 = new java.io.BufferedInputStream;

        $r6 = new java.io.FileInputStream;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r6);

        r2 = $r5;

     label2:
        r4 = staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: dalvik.system.profiler.HprofData read(java.io.InputStream)>(r2);

     label3:
        staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: void closeQuietly(java.io.Closeable)>(r2);

        return r4;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

     label5:
        staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: void closeQuietly(java.io.Closeable)>(r1);

        throw r3;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

        r1 = r2;

        goto label5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
    }

    private static dalvik.system.profiler.HprofData readSnapshot(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.io.BufferedInputStream r1, r3, $r5;
        java.lang.Throwable r2, $r8, $r9;
        int i0, $i1;
        dalvik.system.profiler.HprofData r4;
        java.io.FileInputStream $r6;
        java.io.EOFException $r7;

        r0 := @parameter0: java.io.File;

     label1:
        $r5 = new java.io.BufferedInputStream;

        $r6 = new java.io.FileInputStream;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r6);

        r1 = $r5;

     label2:
        i0 = virtualinvoke r1.<java.io.InputStream: int read()>();

     label3:
        if i0 == -1 goto label6;

        if i0 != 10 goto label2;

     label4:
        $i1 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if $i1 != 10 goto label2;

        r4 = staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: dalvik.system.profiler.HprofData read(java.io.InputStream)>(r1);

     label5:
        staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: void closeQuietly(java.io.Closeable)>(r1);

        return r4;

     label6:
        $r7 = new java.io.EOFException;

        specialinvoke $r7.<java.io.EOFException: void <init>(java.lang.String)>("Could not find expected header");

        throw $r7;

     label7:
        $r8 := @caughtexception;

        r2 = $r8;

        r3 = r1;

     label8:
        staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: void closeQuietly(java.io.Closeable)>(r3);

        throw r2;

     label9:
        $r9 := @caughtexception;

        r2 = $r9;

        r3 = null;

        goto label8;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    private static boolean startsWithMagic(java.io.File)
    {
        java.io.File r0;
        java.io.DataInputStream r1, r2, $r7;
        java.lang.Throwable r4, $r10, $r13;
        java.lang.String r5;
        boolean z0;
        java.io.BufferedInputStream $r8;
        java.io.FileInputStream $r9;
        java.io.IOException $r11, $r12;

        r0 := @parameter0: java.io.File;

        r1 = null;

     label01:
        $r7 = new java.io.DataInputStream;

        $r8 = new java.io.BufferedInputStream;

        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r8.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r9);

        specialinvoke $r7.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r8);

        r2 = $r7;

     label02:
        r5 = staticinvoke <dalvik.system.profiler.BinaryHprof: java.lang.String readMagic(java.io.DataInputStream)>(r2);

     label03:
        z0 = 0;

        if r5 == null goto label04;

        z0 = 1;

     label04:
        staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: void closeQuietly(java.io.Closeable)>(r2);

        return z0;

     label05:
        $r12 := @caughtexception;

     label06:
        staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: void closeQuietly(java.io.Closeable)>(r1);

        return 0;

     label07:
        $r13 := @caughtexception;

        r4 = $r13;

     label08:
        staticinvoke <dalvik.system.profiler.HprofBinaryToAscii: void closeQuietly(java.io.Closeable)>(r1);

        throw r4;

     label09:
        $r10 := @caughtexception;

        r4 = $r10;

        r1 = r2;

        goto label08;

     label10:
        $r11 := @caughtexception;

        r1 = r2;

        goto label06;

        catch java.io.IOException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.io.IOException from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label09;
    }

    private static void usage(java.lang.String)
    {
        java.lang.String r0;
        java.io.PrintStream $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>("ERROR: ");

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println()>();

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("usage: HprofBinaryToAscii <binary-hprof-file>");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println()>();

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Reads a binary hprof file and print it in ASCII format");

        return;
    }

    private static boolean write(dalvik.system.profiler.HprofData)
    {
        dalvik.system.profiler.HprofData r0;
        java.io.IOException r1, $r3;
        java.io.PrintStream $r2, $r5;
        java.lang.StringBuilder $r4, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @parameter0: dalvik.system.profiler.HprofData;

     label1:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <dalvik.system.profiler.AsciiHprofWriter: void write(dalvik.system.profiler.HprofData,java.io.OutputStream)>(r0, $r2);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem writing ASCII hprof data: ");

        $r7 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
