public final class libcore.reflect.ParameterizedTypeImpl extends java.lang.Object implements java.lang.reflect.ParameterizedType
{
    private final libcore.reflect.ListOfTypes args;
    private java.lang.ClassLoader loader;
    private final libcore.reflect.ParameterizedTypeImpl ownerType0;
    private java.lang.reflect.Type ownerTypeRes;
    private java.lang.Class rawType;
    private final java.lang.String rawTypeName;

    public void <init>(libcore.reflect.ParameterizedTypeImpl, java.lang.String, libcore.reflect.ListOfTypes, java.lang.ClassLoader)
    {
        libcore.reflect.ParameterizedTypeImpl r0, r1;
        java.lang.String r2;
        libcore.reflect.ListOfTypes r3;
        java.lang.ClassLoader r4;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        r1 := @parameter0: libcore.reflect.ParameterizedTypeImpl;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: libcore.reflect.ListOfTypes;

        r4 := @parameter3: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ParameterizedTypeImpl ownerType0> = r1;

        r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.String rawTypeName> = r2;

        r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args> = r3;

        r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.ClassLoader loader> = r4;

        return;
    }

    public java.lang.reflect.Type[] getActualTypeArguments()
    {
        libcore.reflect.ParameterizedTypeImpl r0;
        libcore.reflect.ListOfTypes $r1;
        java.lang.reflect.Type[] $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r1 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args>;

        $r2 = virtualinvoke $r1.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.reflect.Type[]) $r3;

        return $r4;
    }

    public java.lang.reflect.Type getOwnerType()
    {
        libcore.reflect.ParameterizedTypeImpl r0, $r3, $r6;
        java.lang.reflect.Type $r1, $r2, $r7;
        java.lang.Class $r4, $r5;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r1 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerTypeRes>;

        if $r1 != null goto label1;

        $r3 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ParameterizedTypeImpl ownerType0>;

        if $r3 == null goto label2;

        $r6 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ParameterizedTypeImpl ownerType0>;

        $r7 = virtualinvoke $r6.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type getResolvedType()>();

        r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerTypeRes> = $r7;

     label1:
        $r2 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerTypeRes>;

        return $r2;

     label2:
        $r4 = virtualinvoke r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class getRawType()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerTypeRes> = $r5;

        goto label1;
    }

    public java.lang.Class getRawType()
    {
        libcore.reflect.ParameterizedTypeImpl r0;
        java.lang.ClassNotFoundException r1, $r7;
        java.lang.Class $r2, $r3, $r6;
        java.lang.ClassLoader $r4;
        java.lang.String $r5, $r9;
        java.lang.TypeNotPresentException $r8;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r2 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class rawType>;

        if $r2 != null goto label2;

     label1:
        $r5 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.String rawTypeName>;

        $r4 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.ClassLoader loader>;

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r5, 0, $r4);

        r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class rawType> = $r6;

     label2:
        $r3 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class rawType>;

        return $r3;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new java.lang.TypeNotPresentException;

        $r9 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.String rawTypeName>;

        specialinvoke $r8.<java.lang.TypeNotPresentException: void <init>(java.lang.String,java.lang.Throwable)>($r9, r1);

        throw $r8;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public volatile java.lang.reflect.Type getRawType()
    {
        libcore.reflect.ParameterizedTypeImpl r0;
        java.lang.Class $r1;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r1 = virtualinvoke r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class getRawType()>();

        return $r1;
    }

    java.lang.reflect.Type getResolvedType()
    {
        java.lang.reflect.Type r0;
        libcore.reflect.ListOfTypes $r1;
        java.lang.reflect.Type[] $r2;
        int $i0;
        libcore.reflect.ParameterizedTypeImpl r3, r4;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        r3 = (libcore.reflect.ParameterizedTypeImpl) r0;

        $r1 = r3.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args>;

        $r2 = virtualinvoke $r1.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        r4 = (libcore.reflect.ParameterizedTypeImpl) r0;

        r0 = virtualinvoke r4.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class getRawType()>();

     label1:
        return r0;
    }

    public java.lang.String toString()
    {
        libcore.reflect.ParameterizedTypeImpl r0;
        java.lang.StringBuilder r1, $r2, $r7, $r9;
        java.lang.String $r3, $r6;
        libcore.reflect.ListOfTypes $r5, $r8;
        int $i0;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        $r3 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.String rawTypeName>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args>;

        $i0 = virtualinvoke $r5.<libcore.reflect.ListOfTypes: int length()>();

        if $i0 <= 0 goto label1;

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r8 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label1:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
