public class org.apache.harmony.security.utils.JarUtils extends java.lang.Object
{
    private static final int[] MESSAGE_DIGEST_OID;

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[7];

        $r0[0] = 1;

        $r0[1] = 2;

        $r0[2] = 840;

        $r0[3] = 113549;

        $r0[4] = 1;

        $r0[5] = 9;

        $r0[6] = 4;

        <org.apache.harmony.security.utils.JarUtils: int[] MESSAGE_DIGEST_OID> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.security.utils.JarUtils r0;

        r0 := @this: org.apache.harmony.security.utils.JarUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.security.cert.X509Certificate[] createChain(java.security.cert.X509Certificate, java.security.cert.X509Certificate[])
    {
        java.security.cert.X509Certificate r0, r4;
        java.security.cert.X509Certificate[] r1, $r11, $r12, $r13, $r14, $r15, $r17;
        java.util.LinkedList r2, $r5;
        java.security.Principal r3, $r6, $r7, $r8, $r9;
        int i0;
        boolean $z0, $z2;
        java.lang.Object[] $r10, $r16;

        r0 := @parameter0: java.security.cert.X509Certificate;

        r1 := @parameter1: java.security.cert.X509Certificate[];

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r2 = $r5;

        virtualinvoke r2.<java.util.LinkedList: void add(int,java.lang.Object)>(0, r0);

        $r6 = virtualinvoke r0.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        $r7 = virtualinvoke r0.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r14 = newarray (java.security.cert.X509Certificate)[1];

        $r16 = virtualinvoke r2.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r15 = (java.security.cert.X509Certificate[]) $r16;

        $r17 = (java.security.cert.X509Certificate[]) $r15;

        return $r17;

     label1:
        r3 = virtualinvoke r0.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();

        i0 = 1;

     label2:
        r4 = staticinvoke <org.apache.harmony.security.utils.JarUtils: java.security.cert.X509Certificate findCert(java.security.Principal,java.security.cert.X509Certificate[])>(r3, r1);

        if r4 != null goto label4;

     label3:
        $r11 = newarray (java.security.cert.X509Certificate)[i0];

        $r10 = virtualinvoke r2.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (java.security.cert.X509Certificate[]) $r10;

        $r12 = (java.security.cert.X509Certificate[]) $r13;

        return $r12;

     label4:
        virtualinvoke r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r4);

        i0 = i0 + 1;

        $r8 = virtualinvoke r4.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        $r9 = virtualinvoke r4.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();

        $z2 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z2 != 0 goto label3;

        r3 = virtualinvoke r4.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();

        goto label2;
    }

    private static java.security.cert.X509Certificate findCert(java.security.Principal, java.security.cert.X509Certificate[])
    {
        java.security.Principal r0, $r3;
        java.security.cert.X509Certificate[] r1;
        int i0, $i1;
        java.security.cert.X509Certificate $r2, $r4;
        boolean $z0;

        r0 := @parameter0: java.security.Principal;

        r1 := @parameter1: java.security.cert.X509Certificate[];

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        $r2 = r1[i0];

        $r3 = virtualinvoke $r2.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r4 = r1[i0];

        return $r4;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }

    public static java.security.cert.Certificate[] verifySignature(java.io.InputStream, java.io.InputStream) throws java.io.IOException, java.security.GeneralSecurityException
    {
        java.io.InputStream r0, r1;
        org.apache.harmony.security.asn1.BerInputStream r2, $r37;
        org.apache.harmony.security.pkcs7.SignedData r3;
        java.util.List r4, r7, r17;
        java.security.cert.X509Certificate[] r5, $r45;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i9, $i10;
        java.util.Iterator r6, r19, $r55;
        org.apache.harmony.security.pkcs7.SignerInfo r8;
        javax.security.auth.x500.X500Principal r9;
        java.math.BigInteger r10, $r70;
        java.lang.String r11, r12, r13, r29, r30, r31;
        java.security.cert.X509Certificate r14, $r43, $r44, $r71, $r73;
        java.security.Signature r15, r25, r26, r33, r36;
        byte[] r16, r18, r20, r21, $r48, $r57;
        java.security.MessageDigest r22;
        java.util.Collection r23;
        org.apache.harmony.security.x501.AttributeTypeAndValue r24;
        org.apache.harmony.security.x509.Certificate r34;
        org.apache.harmony.security.asn1.ASN1Sequence $r38;
        org.apache.harmony.security.provider.cert.X509CertImpl r39, $r80;
        org.apache.harmony.security.pkcs7.ContentInfo $r40;
        java.lang.Object $r41, $r42, $r52, $r54, $r69;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.SecurityException $r46, $r47, $r53, $r56, $r64, $r74;
        int[] $r49, $r51;
        org.apache.harmony.security.utils.ObjectIdentifier $r50;
        org.apache.harmony.security.asn1.ASN1OctetString $r58;
        org.apache.harmony.security.x501.AttributeValue $r59;
        java.lang.StringBuilder $r60, $r61, $r62, $r63, $r65, $r66, $r67, $r68;
        java.security.Principal $r72;
        java.security.NoSuchAlgorithmException $r75, $r76, $r77, $r78;
        java.io.IOException $r79;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.InputStream;

        $r37 = new org.apache.harmony.security.asn1.BerInputStream;

        specialinvoke $r37.<org.apache.harmony.security.asn1.BerInputStream: void <init>(java.io.InputStream)>(r1);

        r2 = $r37;

        $r38 = <org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r41 = virtualinvoke $r38.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>(r2);

        $r40 = (org.apache.harmony.security.pkcs7.ContentInfo) $r41;

        r3 = virtualinvoke $r40.<org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.pkcs7.SignedData getSignedData()>();

        if r3 != null goto label01;

        $r79 = new java.io.IOException;

        specialinvoke $r79.<java.io.IOException: void <init>(java.lang.String)>("No SignedData found");

        throw $r79;

     label01:
        r4 = virtualinvoke r3.<org.apache.harmony.security.pkcs7.SignedData: java.util.List getCertificates()>();

        $z1 = interfaceinvoke r4.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label02;

        return null;

     label02:
        $i7 = interfaceinvoke r4.<java.util.Collection: int size()>();

        r5 = newarray (java.security.cert.X509Certificate)[$i7];

        i0 = 0;

        r6 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r69 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r34 = (org.apache.harmony.security.x509.Certificate) $r69;

        i6 = i0 + 1;

        $r80 = new org.apache.harmony.security.provider.cert.X509CertImpl;

        specialinvoke $r80.<org.apache.harmony.security.provider.cert.X509CertImpl: void <init>(org.apache.harmony.security.x509.Certificate)>(r34);

        r39 = $r80;

        r5[i0] = r39;

        i0 = i6;

        goto label03;

     label04:
        r7 = virtualinvoke r3.<org.apache.harmony.security.pkcs7.SignedData: java.util.List getSignerInfos()>();

        $z2 = interfaceinvoke r7.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label07;

        $r42 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(0);

        r8 = (org.apache.harmony.security.pkcs7.SignerInfo) $r42;

        r9 = virtualinvoke r8.<org.apache.harmony.security.pkcs7.SignerInfo: javax.security.auth.x500.X500Principal getIssuer()>();

        r10 = virtualinvoke r8.<org.apache.harmony.security.pkcs7.SignerInfo: java.math.BigInteger getSerialNumber()>();

        i1 = 0;

     label05:
        i2 = lengthof r5;

        i3 = i1;

        i4 = 0;

        if i3 >= i2 goto label06;

        $r73 = r5[i1];

        $r72 = virtualinvoke $r73.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();

        $z9 = virtualinvoke r9.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r72);

        if $z9 == 0 goto label08;

        $r71 = r5[i1];

        $r70 = virtualinvoke $r71.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();

        $z8 = virtualinvoke r10.<java.math.BigInteger: boolean equals(java.lang.Object)>($r70);

        if $z8 == 0 goto label08;

        i4 = i1;

     label06:
        i5 = lengthof r5;

        if i1 != i5 goto label09;

        return null;

     label07:
        return null;

     label08:
        i1 = i1 + 1;

        goto label05;

     label09:
        $r43 = r5[i4];

        $z3 = virtualinvoke $r43.<java.security.cert.X509Certificate: boolean hasUnsupportedCriticalExtension()>();

        if $z3 == 0 goto label10;

        $r74 = new java.lang.SecurityException;

        specialinvoke $r74.<java.lang.SecurityException: void <init>(java.lang.String)>("Can not recognize a critical extension");

        throw $r74;

     label10:
        r11 = virtualinvoke r8.<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestAlgorithm()>();

        r13 = virtualinvoke r8.<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestAlgorithmName()>();

        r12 = virtualinvoke r8.<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestEncryptionAlgorithm()>();

        r15 = null;

        if r11 == null goto label16;

        r15 = null;

        if r12 == null goto label16;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with");

        $r60 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        r31 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        r33 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r31);

     label12:
        r15 = r33;

     label13:
        if r15 != null goto label16;

        r29 = virtualinvoke r8.<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestEncryptionAlgorithmName()>();

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r65 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        r30 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        r36 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r30);

     label15:
        r15 = r36;

     label16:
        if r15 != null goto label22;

        if r11 == null goto label22;

     label17:
        r26 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r11);

     label18:
        r15 = r26;

     label19:
        if r15 != null goto label22;

        if r13 == null goto label22;

     label20:
        r25 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r13);

     label21:
        r15 = r25;

     label22:
        if r15 != null goto label23;

        return null;

     label23:
        r14 = r5[i4];

        virtualinvoke r15.<java.security.Signature: void initVerify(java.security.cert.Certificate)>(r14);

        r17 = virtualinvoke r8.<org.apache.harmony.security.pkcs7.SignerInfo: java.util.List getAuthenticatedAttributes()>();

        $i9 = virtualinvoke r0.<java.io.InputStream: int available()>();

        r16 = newarray (byte)[$i9];

        virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r16);

        if r17 != null goto label25;

        virtualinvoke r15.<java.security.Signature: void update(byte[])>(r16);

     label24:
        r21 = virtualinvoke r8.<org.apache.harmony.security.pkcs7.SignerInfo: byte[] getEncryptedDigest()>();

        $z6 = virtualinvoke r15.<java.security.Signature: boolean verify(byte[])>(r21);

        if $z6 != 0 goto label34;

        $r46 = new java.lang.SecurityException;

        specialinvoke $r46.<java.lang.SecurityException: void <init>(java.lang.String)>("Incorrect signature");

        throw $r46;

     label25:
        r18 = virtualinvoke r8.<org.apache.harmony.security.pkcs7.SignerInfo: byte[] getEncodedAuthenticatedAttributes()>();

        virtualinvoke r15.<java.security.Signature: void update(byte[])>(r18);

        r20 = null;

        r19 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label26:
        $z4 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label29;

        $r52 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.apache.harmony.security.x501.AttributeTypeAndValue) $r52;

        $r50 = virtualinvoke r24.<org.apache.harmony.security.x501.AttributeTypeAndValue: org.apache.harmony.security.utils.ObjectIdentifier getType()>();

        $r49 = virtualinvoke $r50.<org.apache.harmony.security.utils.ObjectIdentifier: int[] getOid()>();

        $r51 = <org.apache.harmony.security.utils.JarUtils: int[] MESSAGE_DIGEST_OID>;

        $z7 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r49, $r51);

        if $z7 == 0 goto label26;

        if r20 == null goto label27;

        $r64 = new java.lang.SecurityException;

        specialinvoke $r64.<java.lang.SecurityException: void <init>(java.lang.String)>("Too many MessageDigest attributes");

        throw $r64;

     label27:
        $r59 = virtualinvoke r24.<org.apache.harmony.security.x501.AttributeTypeAndValue: org.apache.harmony.security.x501.AttributeValue getValue()>();

        $r58 = staticinvoke <org.apache.harmony.security.asn1.ASN1OctetString: org.apache.harmony.security.asn1.ASN1OctetString getInstance()>();

        r23 = virtualinvoke $r59.<org.apache.harmony.security.x501.AttributeValue: java.util.Collection getValues(org.apache.harmony.security.asn1.ASN1Type)>($r58);

        $i10 = interfaceinvoke r23.<java.util.Collection: int size()>();

        if $i10 == 1 goto label28;

        $r56 = new java.lang.SecurityException;

        specialinvoke $r56.<java.lang.SecurityException: void <init>(java.lang.String)>("Too many values for MessageDigest attribute");

        throw $r56;

     label28:
        $r55 = interfaceinvoke r23.<java.util.Collection: java.util.Iterator iterator()>();

        $r54 = interfaceinvoke $r55.<java.util.Iterator: java.lang.Object next()>();

        $r57 = (byte[]) $r54;

        r20 = (byte[]) $r57;

        goto label26;

     label29:
        if r20 != null goto label30;

        $r53 = new java.lang.SecurityException;

        specialinvoke $r53.<java.lang.SecurityException: void <init>(java.lang.String)>("Missing MessageDigest in Authenticated Attributes");

        throw $r53;

     label30:
        r22 = null;

        if r11 == null goto label31;

        r22 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r11);

     label31:
        if r22 != null goto label32;

        if r13 == null goto label32;

        r22 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r13);

     label32:
        if r22 != null goto label33;

        return null;

     label33:
        $r48 = virtualinvoke r22.<java.security.MessageDigest: byte[] digest(byte[])>(r16);

        $z5 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r20, $r48);

        if $z5 != 0 goto label24;

        $r47 = new java.lang.SecurityException;

        specialinvoke $r47.<java.lang.SecurityException: void <init>(java.lang.String)>("Incorrect MD");

        throw $r47;

     label34:
        $r44 = r5[i4];

        $r45 = staticinvoke <org.apache.harmony.security.utils.JarUtils: java.security.cert.X509Certificate[] createChain(java.security.cert.X509Certificate,java.security.cert.X509Certificate[])>($r44, r5);

        return $r45;

     label35:
        $r78 := @caughtexception;

        r15 = null;

        goto label13;

     label36:
        $r76 := @caughtexception;

        goto label16;

     label37:
        $r75 := @caughtexception;

        goto label19;

     label38:
        $r77 := @caughtexception;

        goto label22;

        catch java.security.NoSuchAlgorithmException from label11 to label12 with label35;
        catch java.security.NoSuchAlgorithmException from label14 to label15 with label36;
        catch java.security.NoSuchAlgorithmException from label17 to label18 with label37;
        catch java.security.NoSuchAlgorithmException from label20 to label21 with label38;
    }
}
