public abstract class android.view.InputEventReceiver extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final dalvik.system.CloseGuard mCloseGuard;
    private android.view.InputChannel mInputChannel;
    private android.os.MessageQueue mMessageQueue;
    private int mReceiverPtr;
    private final android.util.SparseIntArray mSeqMap;

    public void <init>(android.view.InputChannel, android.os.Looper)
    {
        android.view.InputEventReceiver r0;
        android.view.InputChannel r1;
        android.os.Looper r2;
        dalvik.system.CloseGuard $r3, $r8;
        android.util.SparseIntArray $r4;
        android.os.MessageQueue $r5, $r7;
        java.lang.ref.WeakReference $r6;
        int $i0;
        java.lang.IllegalArgumentException $r9, $r10;

        r0 := @this: android.view.InputEventReceiver;

        r1 := @parameter0: android.view.InputChannel;

        r2 := @parameter1: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.InputEventReceiver: dalvik.system.CloseGuard mCloseGuard> = $r3;

        $r4 = new android.util.SparseIntArray;

        specialinvoke $r4.<android.util.SparseIntArray: void <init>()>();

        r0.<android.view.InputEventReceiver: android.util.SparseIntArray mSeqMap> = $r4;

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputChannel must not be null");

        throw $r10;

     label1:
        if r2 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("looper must not be null");

        throw $r9;

     label2:
        r0.<android.view.InputEventReceiver: android.view.InputChannel mInputChannel> = r1;

        $r5 = virtualinvoke r2.<android.os.Looper: android.os.MessageQueue getQueue()>();

        r0.<android.view.InputEventReceiver: android.os.MessageQueue mMessageQueue> = $r5;

        $r6 = new java.lang.ref.WeakReference;

        specialinvoke $r6.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $r7 = r0.<android.view.InputEventReceiver: android.os.MessageQueue mMessageQueue>;

        $i0 = staticinvoke <android.view.InputEventReceiver: int nativeInit(java.lang.ref.WeakReference,android.view.InputChannel,android.os.MessageQueue)>($r6, r1, $r7);

        r0.<android.view.InputEventReceiver: int mReceiverPtr> = $i0;

        $r8 = r0.<android.view.InputEventReceiver: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void open(java.lang.String)>("dispose");

        return;
    }

    private void dispatchBatchedInputEventPending()
    {
        android.view.InputEventReceiver r0;

        r0 := @this: android.view.InputEventReceiver;

        virtualinvoke r0.<android.view.InputEventReceiver: void onBatchedInputEventPending()>();

        return;
    }

    private void dispatchInputEvent(int, android.view.InputEvent)
    {
        android.view.InputEventReceiver r0;
        int i0, $i1;
        android.view.InputEvent r1;
        android.util.SparseIntArray $r2;

        r0 := @this: android.view.InputEventReceiver;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.InputEvent;

        $r2 = r0.<android.view.InputEventReceiver: android.util.SparseIntArray mSeqMap>;

        $i1 = virtualinvoke r1.<android.view.InputEvent: int getSequenceNumber()>();

        virtualinvoke $r2.<android.util.SparseIntArray: void put(int,int)>($i1, i0);

        virtualinvoke r0.<android.view.InputEventReceiver: void onInputEvent(android.view.InputEvent)>(r1);

        return;
    }

    private void dispose(boolean)
    {
        android.view.InputEventReceiver r0;
        boolean z0;
        dalvik.system.CloseGuard $r1, $r2, $r3;
        int $i0, $i1;

        r0 := @this: android.view.InputEventReceiver;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.view.InputEventReceiver: dalvik.system.CloseGuard mCloseGuard>;

        if $r1 == null goto label2;

        if z0 == 0 goto label1;

        $r3 = r0.<android.view.InputEventReceiver: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label1:
        $r2 = r0.<android.view.InputEventReceiver: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

     label2:
        $i0 = r0.<android.view.InputEventReceiver: int mReceiverPtr>;

        if $i0 == 0 goto label3;

        $i1 = r0.<android.view.InputEventReceiver: int mReceiverPtr>;

        staticinvoke <android.view.InputEventReceiver: void nativeDispose(int)>($i1);

        r0.<android.view.InputEventReceiver: int mReceiverPtr> = 0;

     label3:
        r0.<android.view.InputEventReceiver: android.view.InputChannel mInputChannel> = null;

        r0.<android.view.InputEventReceiver: android.os.MessageQueue mMessageQueue> = null;

        return;
    }

    private static native boolean nativeConsumeBatchedInputEvents(int, long);

    private static native void nativeDispose(int);

    private static native void nativeFinishInputEvent(int, int, boolean);

    private static native int nativeInit(java.lang.ref.WeakReference, android.view.InputChannel, android.os.MessageQueue);

    public final boolean consumeBatchedInputEvents(long)
    {
        android.view.InputEventReceiver r0;
        long l0;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: android.view.InputEventReceiver;

        l0 := @parameter0: long;

        $i1 = r0.<android.view.InputEventReceiver: int mReceiverPtr>;

        if $i1 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputEventReceiver", "Attempted to consume batched input events but the input event receiver has already been disposed.");

        return 0;

     label1:
        $i2 = r0.<android.view.InputEventReceiver: int mReceiverPtr>;

        $z0 = staticinvoke <android.view.InputEventReceiver: boolean nativeConsumeBatchedInputEvents(int,long)>($i2, l0);

        return $z0;
    }

    public void dispose()
    {
        android.view.InputEventReceiver r0;

        r0 := @this: android.view.InputEventReceiver;

        specialinvoke r0.<android.view.InputEventReceiver: void dispose(boolean)>(0);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.InputEventReceiver r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.view.InputEventReceiver;

     label1:
        specialinvoke r0.<android.view.InputEventReceiver: void dispose(boolean)>(1);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void finishInputEvent(android.view.InputEvent, boolean)
    {
        android.view.InputEventReceiver r0;
        android.view.InputEvent r1;
        boolean z0;
        int i0, i1, $i2, $i3, $i4;
        android.util.SparseIntArray $r2, $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.view.InputEventReceiver;

        r1 := @parameter0: android.view.InputEvent;

        z0 := @parameter1: boolean;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event must not be null");

        throw $r5;

     label1:
        $i2 = r0.<android.view.InputEventReceiver: int mReceiverPtr>;

        if $i2 != 0 goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputEventReceiver", "Attempted to finish an input event but the input event receiver has already been disposed.");

     label2:
        virtualinvoke r1.<android.view.InputEvent: void recycleIfNeededAfterDispatch()>();

        return;

     label3:
        $r2 = r0.<android.view.InputEventReceiver: android.util.SparseIntArray mSeqMap>;

        $i3 = virtualinvoke r1.<android.view.InputEvent: int getSequenceNumber()>();

        i0 = virtualinvoke $r2.<android.util.SparseIntArray: int indexOfKey(int)>($i3);

        if i0 >= 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputEventReceiver", "Attempted to finish an input event that is not in progress.");

        goto label2;

     label4:
        $r3 = r0.<android.view.InputEventReceiver: android.util.SparseIntArray mSeqMap>;

        i1 = virtualinvoke $r3.<android.util.SparseIntArray: int valueAt(int)>(i0);

        $r4 = r0.<android.view.InputEventReceiver: android.util.SparseIntArray mSeqMap>;

        virtualinvoke $r4.<android.util.SparseIntArray: void removeAt(int)>(i0);

        $i4 = r0.<android.view.InputEventReceiver: int mReceiverPtr>;

        staticinvoke <android.view.InputEventReceiver: void nativeFinishInputEvent(int,int,boolean)>($i4, i1, z0);

        goto label2;
    }

    public void onBatchedInputEventPending()
    {
        android.view.InputEventReceiver r0;

        r0 := @this: android.view.InputEventReceiver;

        virtualinvoke r0.<android.view.InputEventReceiver: boolean consumeBatchedInputEvents(long)>(-1L);

        return;
    }

    public void onInputEvent(android.view.InputEvent)
    {
        android.view.InputEventReceiver r0;
        android.view.InputEvent r1;

        r0 := @this: android.view.InputEventReceiver;

        r1 := @parameter0: android.view.InputEvent;

        virtualinvoke r0.<android.view.InputEventReceiver: void finishInputEvent(android.view.InputEvent,boolean)>(r1, 0);

        return;
    }

    public static void <clinit>()
    {
        <android.view.InputEventReceiver: java.lang.String TAG> = "InputEventReceiver";

        return;
    }
}
