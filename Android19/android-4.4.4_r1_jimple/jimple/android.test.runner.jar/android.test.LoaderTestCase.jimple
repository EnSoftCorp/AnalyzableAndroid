public class android.test.LoaderTestCase extends android.test.AndroidTestCase
{

    static void <clinit>()
    {
        android.test.LoaderTestCase$1 $r0;

        $r0 = new android.test.LoaderTestCase$1;

        specialinvoke $r0.<android.test.LoaderTestCase$1: void <init>()>();

        return;
    }

    public void <init>()
    {
        android.test.LoaderTestCase r0;

        r0 := @this: android.test.LoaderTestCase;

        specialinvoke r0.<android.test.AndroidTestCase: void <init>()>();

        return;
    }

    public java.lang.Object getLoaderResultSynchronously(android.content.Loader)
    {
        android.test.LoaderTestCase r0;
        android.content.Loader r1;
        java.util.concurrent.ArrayBlockingQueue r2, r12;
        android.test.LoaderTestCase$2 r3, r13;
        java.lang.InterruptedException r4, $r10;
        java.lang.Object r5;
        android.os.Looper $r9;
        android.test.LoaderTestCase$3 r14;
        java.lang.RuntimeException r15;
        android.content.Loader$OnLoadCompleteListener r16;

        r0 := @this: android.test.LoaderTestCase;

        r1 := @parameter0: android.content.Loader;

        r12 = new java.util.concurrent.ArrayBlockingQueue;

        specialinvoke r12.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(1);

        r2 = r12;

        r13 = new android.test.LoaderTestCase$2;

        specialinvoke r13.<android.test.LoaderTestCase$2: void <init>(android.test.LoaderTestCase,java.util.concurrent.ArrayBlockingQueue)>(r0, r2);

        r3 = r13;

        r14 = new android.test.LoaderTestCase$3;

        $r9 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        r16 = (android.content.Loader$OnLoadCompleteListener) r3;

        specialinvoke r14.<android.test.LoaderTestCase$3: void <init>(android.test.LoaderTestCase,android.os.Looper,android.content.Loader,android.content.Loader$OnLoadCompleteListener)>(r0, $r9, r1, r16);

        virtualinvoke r14.<android.os.Handler: boolean sendEmptyMessage(int)>(0);

     label1:
        r5 = virtualinvoke r2.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object take()>();

     label2:
        return r5;

     label3:
        $r10 := @caughtexception;

        r4 = $r10;

        r15 = new java.lang.RuntimeException;

        specialinvoke r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("waiting thread interrupted", r4);

        throw r15;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
}
