public class android.test.TestRunner extends java.lang.Object implements android.test.PerformanceTestCase$Intermediates
{
    public static final int CLEARSCREEN;
    public static final int PERFORMANCE;
    public static final int PROFILING;
    public static final int REGRESSION;
    private static final java.lang.String TAG;
    private static java.lang.Class mJUnitClass;
    private static java.lang.Class mRunnableClass;
    private java.lang.String mClassName;
    private android.content.Context mContext;
    private long mEndTime;
    private int mFailed;
    java.util.List mIntermediates;
    private int mInternalIterations;
    private java.util.List mListeners;
    private int mMode;
    private int mPassed;
    private long mStartTime;

    static void <clinit>()
    {
        java.lang.ClassNotFoundException r0, $r3;
        java.lang.Class $r1, $r2;
        java.lang.RuntimeException $r4;

        <android.test.TestRunner: java.lang.String TAG> = "TestHarness";

        <android.test.TestRunner: int REGRESSION> = 0;

        <android.test.TestRunner: int PROFILING> = 2;

        <android.test.TestRunner: int PERFORMANCE> = 1;

        <android.test.TestRunner: int CLEARSCREEN> = 0;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("java.lang.Runnable", 0, null);

        <android.test.TestRunner: java.lang.Class mRunnableClass> = $r1;

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("junit.framework.TestCase", 0, null);

        <android.test.TestRunner: java.lang.Class mJUnitClass> = $r2;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r0 = $r3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("shouldn\'t happen", r0);

        throw $r4;

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void <init>(android.content.Context)
    {
        android.test.TestRunner r0;
        android.content.Context r1;
        java.util.ArrayList $r2;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.test.TestRunner: int mMode> = 0;

        $r2 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<android.test.TestRunner: java.util.List mListeners> = $r2;

        r0.<android.test.TestRunner: java.util.List mIntermediates> = null;

        r0.<android.test.TestRunner: android.content.Context mContext> = r1;

        return;
    }

    static void access$000(android.test.TestRunner, java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;

        r0 := @parameter0: android.test.TestRunner;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.test.TestRunner: void started(java.lang.String)>(r1);

        return;
    }

    static void access$100(android.test.TestRunner, java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;

        r0 := @parameter0: android.test.TestRunner;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.test.TestRunner: void finished(java.lang.String)>(r1);

        return;
    }

    public static int countJunitTests(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] $r1;
        int $i0;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)>(r0);

        $i0 = lengthof $r1;

        return $i0;
    }

    public static int countTests(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1, $r9;
        java.lang.Class r3, $r7, $r8;
        java.lang.reflect.Method r4;
        java.lang.String[] r5;
        int i0, i1, i2, i3, $i4;
        java.lang.ClassLoader $r6;
        boolean $z0, $z1;
        java.lang.ClassNotFoundException $r10;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

     label01:
        $r6 = virtualinvoke r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r3 = virtualinvoke $r6.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        r4 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(java.lang.Class)>(r3);

     label02:
        if r4 == null goto label10;

     label03:
        r5 = staticinvoke <android.test.TestRunner: java.lang.String[] getChildren(java.lang.reflect.Method)>(r4);

     label04:
        i0 = 0;

     label05:
        i1 = lengthof r5;

     label06:
        i2 = 0;

     label07:
        if i2 >= i1 goto label16;

     label08:
        $r9 = r5[i2];

        $i4 = staticinvoke <android.test.TestRunner: int countTests(android.content.Context,java.lang.String)>(r0, $r9);

        i0 = i0 + $i4;

     label09:
        i2 = i2 + 1;

        goto label07;

     label10:
        $r7 = <android.test.TestRunner: java.lang.Class mRunnableClass>;

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z0 == 0 goto label12;

     label11:
        return 1;

     label12:
        $r8 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z1 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z1 == 0 goto label15;

        i3 = staticinvoke <android.test.TestRunner: int countJunitTests(java.lang.Class)>(r3);

     label13:
        return i3;

     label14:
        $r10 := @caughtexception;

        return 1;

     label15:
        i0 = 0;

     label16:
        return i0;

        catch java.lang.ClassNotFoundException from label01 to label02 with label14;
        catch java.lang.ClassNotFoundException from label03 to label04 with label14;
        catch java.lang.ClassNotFoundException from label05 to label06 with label14;
        catch java.lang.ClassNotFoundException from label08 to label09 with label14;
        catch java.lang.ClassNotFoundException from label10 to label11 with label14;
        catch java.lang.ClassNotFoundException from label12 to label13 with label14;
    }

    private void finished(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        int i0, i1;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        android.test.TestRunner$Listener $r5;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.TestRunner: java.util.List mListeners>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<android.test.TestRunner: java.util.List mListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (android.test.TestRunner$Listener) $r4;

        interfaceinvoke $r5.<android.test.TestRunner$Listener: void finished(java.lang.String)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] r1, r2;
        int i0, i1, i2, i3, i4, i5;
        java.lang.reflect.Method r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = 0;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        $r4 = r1[i2];

        $z1 = staticinvoke <android.test.TestRunner: boolean isTestMethod(java.lang.reflect.Method)>($r4);

        if $z1 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        i3 = 0;

        r2 = newarray (java.lang.reflect.Method)[i0];

        i4 = lengthof r1;

        i5 = 0;

     label4:
        if i5 >= i4 goto label6;

        r3 = r1[i5];

        $z0 = staticinvoke <android.test.TestRunner: boolean isTestMethod(java.lang.reflect.Method)>(r3);

        if $z0 == 0 goto label5;

        r2[i3] = r3;

        i3 = i3 + 1;

     label5:
        i5 = i5 + 1;

        goto label4;

     label6:
        return r2;
    }

    public static java.lang.String[] getChildren(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1, $r10;
        boolean z0, z1, $z2;
        java.lang.reflect.Method r2;
        java.lang.String[] r3, r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.RuntimeException $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        z0 = 1;

        r2 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(android.content.Context,java.lang.String)>(r0, r1);

        r3 = staticinvoke <android.test.TestRunner: java.lang.String[] getTestChildren(android.content.Context,java.lang.String)>(r0, r1);

        if r2 != null goto label3;

        z1 = 1;

     label1:
        if r3 != null goto label4;

     label2:
        $z2 = z0 & z1;

        if $z2 == 0 goto label5;

        $r7 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t get children method for ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label3:
        z1 = 0;

        goto label1;

     label4:
        z0 = 0;

        goto label2;

     label5:
        if r2 == null goto label7;

        r4 = staticinvoke <android.test.TestRunner: java.lang.String[] getChildren(java.lang.reflect.Method)>(r2);

        if r3 == null goto label6;

        $i1 = lengthof r3;

        $i0 = lengthof r4;

        $i2 = $i1 + $i0;

        r5 = newarray (java.lang.String)[$i2];

        $i3 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, 0, $i3);

        $i4 = lengthof r4;

        $i5 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r5, $i4, $i5);

        return r5;

     label6:
        return r4;

     label7:
        if r3 == null goto label8;

        return r3;

     label8:
        return null;
    }

    public static java.lang.String[] getChildren(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.String[] r3, $r6, $r9;
        int $i0;
        boolean $z0;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.lang.RuntimeException $r7;
        java.lang.IllegalAccessException $r8;
        java.lang.reflect.InvocationTargetException $r10;

        r0 := @parameter0: java.lang.reflect.Method;

     label1:
        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label4;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("children method is not static");

        throw $r7;

     label2:
        $r8 := @caughtexception;

     label3:
        $r9 = newarray (java.lang.String)[0];

        return $r9;

     label4:
        $r4 = (java.lang.Object[]) null;

        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        $r6 = (java.lang.String[]) $r5;

        r3 = (java.lang.String[]) $r6;

     label5:
        return r3;

     label6:
        $r10 := @caughtexception;

        goto label3;

        catch java.lang.IllegalAccessException from label1 to label2 with label2;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label4 to label5 with label2;
        catch java.lang.reflect.InvocationTargetException from label4 to label5 with label6;
    }

    public static java.lang.reflect.Method getChildrenMethod(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        java.lang.reflect.Method r3;
        java.lang.ClassLoader $r4;
        java.lang.Class $r5;
        java.lang.ClassNotFoundException $r6;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

     label1:
        $r4 = virtualinvoke r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r5 = virtualinvoke $r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        r3 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(java.lang.Class)>($r5);

     label2:
        return r3;

     label3:
        $r6 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.reflect.Method getChildrenMethod(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method r2;
        java.lang.Class[] $r3;
        java.lang.NoSuchMethodException $r4;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r3 = (java.lang.Class[]) null;

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("children", $r3);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static java.lang.String[] getTestChildren(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        java.lang.ClassNotFoundException r2, $r7;
        java.lang.Class r3, $r6;
        java.lang.String[] r4;
        java.lang.ClassLoader $r5;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

     label1:
        $r5 = virtualinvoke r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r3 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r6 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z0 == 0 goto label4;

        r4 = staticinvoke <android.test.TestRunner: java.lang.String[] getTestChildren(java.lang.Class)>(r3);

     label2:
        return r4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "No class found", r2);

     label4:
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.String[] getTestChildren(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] r1;
        java.lang.String[] r2;
        int i0, i1, i2, $i3;
        java.lang.reflect.Method r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r9;
        java.lang.String $r5, $r8, $r10;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)>(r0);

        $i3 = lengthof r1;

        r2 = newarray (java.lang.String)[$i3];

        i0 = 0;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r3 = r1[i2];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r8 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r2[i0] = $r10;

        i0 = i0 + 1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static java.lang.String getTitle(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1, i2, $i3;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(36);

        if i0 <= i1 goto label3;

        i2 = i0;

     label1:
        if i2 < 0 goto label2;

        $i3 = i2 + 1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

     label2:
        return r0;

     label3:
        i2 = i1;

        goto label1;
    }

    private static boolean isTestMethod(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Class $r2, $r3;
        java.lang.Class[] $r4;
        int $i0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("test");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r3 = <java.lang.Void: java.lang.Class TYPE>;

        if $r2 != $r3 goto label1;

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r4;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isTestSuite(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.lang.Class r3, $r6;
        int i0;
        java.lang.reflect.Method $r4;
        java.lang.ClassLoader $r5;
        java.lang.ClassNotFoundException $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r4 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(android.content.Context,java.lang.String)>(r0, r1);

        if $r4 == null goto label4;

        z0 = 1;

     label1:
        $r5 = virtualinvoke r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r3 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r6 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z1 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z1 == 0 goto label3;

        i0 = staticinvoke <android.test.TestRunner: int countJunitTests(java.lang.Class)>(r3);

     label2:
        if i0 <= 0 goto label3;

        z0 = 1;

     label3:
        return z0;

     label4:
        z0 = 0;

        goto label1;

     label5:
        $r7 := @caughtexception;

        return z0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
    }

    private void missingTest(java.lang.String, java.lang.Throwable)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<android.test.TestRunner: void started(java.lang.String)>(r1);

        specialinvoke r0.<android.test.TestRunner: void finished(java.lang.String)>(r1);

        virtualinvoke r0.<android.test.TestRunner: void failed(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

    private void performance(java.lang.String, long, int, java.util.List)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        long l0;
        int i1, i2, i3;
        java.util.List r2, $r3, $r4;
        java.lang.Object $r5;
        android.test.TestRunner$Listener $r6;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r2 := @parameter3: java.util.List;

        $r3 = r0.<android.test.TestRunner: java.util.List mListeners>;

        i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r4 = r0.<android.test.TestRunner: java.util.List mListeners>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (android.test.TestRunner$Listener) $r5;

        interfaceinvoke $r6.<android.test.TestRunner$Listener: void performance(java.lang.String,long,int,java.util.List)>(r1, l0, i1, r2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void started(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        int i0, i1;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        android.test.TestRunner$Listener $r5;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.TestRunner: java.util.List mListeners>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<android.test.TestRunner: java.util.List mListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (android.test.TestRunner$Listener) $r4;

        interfaceinvoke $r5.<android.test.TestRunner$Listener: void started(java.lang.String)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void addIntermediate(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        long $l0, $l1, $l2, $l3;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<android.test.TestRunner: long mStartTime>;

        $l2 = $l0 - $l1;

        $l3 = 1000000L * $l2;

        virtualinvoke r0.<android.test.TestRunner: void addIntermediate(java.lang.String,long)>(r1, $l3);

        return;
    }

    public void addIntermediate(java.lang.String, long)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        long l0;
        android.test.TestRunner$IntermediateTime $r2;
        java.util.List $r3;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r3 = r0.<android.test.TestRunner: java.util.List mIntermediates>;

        $r2 = new android.test.TestRunner$IntermediateTime;

        specialinvoke $r2.<android.test.TestRunner$IntermediateTime: void <init>(java.lang.String,long)>(r1, l0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    public void addListener(android.test.TestRunner$Listener)
    {
        android.test.TestRunner r0;
        android.test.TestRunner$Listener r1;
        java.util.List $r2;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: android.test.TestRunner$Listener;

        $r2 = r0.<android.test.TestRunner: java.util.List mListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void failed(java.lang.String, java.lang.Throwable)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        int i0, i1, $i2, $i3;
        java.util.List $r3, $r4;
        java.lang.Object $r5;
        android.test.TestRunner$Listener $r6;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $i2 = r0.<android.test.TestRunner: int mFailed>;

        $i3 = 1 + $i2;

        r0.<android.test.TestRunner: int mFailed> = $i3;

        $r3 = r0.<android.test.TestRunner: java.util.List mListeners>;

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<android.test.TestRunner: java.util.List mListeners>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (android.test.TestRunner$Listener) $r5;

        interfaceinvoke $r6.<android.test.TestRunner$Listener: void failed(java.lang.String,java.lang.Throwable)>(r1, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public int failedCount()
    {
        android.test.TestRunner r0;
        int $i0;

        r0 := @this: android.test.TestRunner;

        $i0 = r0.<android.test.TestRunner: int mFailed>;

        return $i0;
    }

    public void finishProfiling()
    {
        android.test.TestRunner r0;

        r0 := @this: android.test.TestRunner;

        staticinvoke <android.os.Debug: void stopMethodTracing()>();

        return;
    }

    public void finishTiming(boolean)
    {
        android.test.TestRunner r0;
        boolean z0;
        long $l0, $l1;

        r0 := @this: android.test.TestRunner;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<android.test.TestRunner: long mEndTime> = $l1;

        return;

     label1:
        $l0 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        r0.<android.test.TestRunner: long mEndTime> = $l0;

        return;
    }

    public boolean isJunitTest(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        int i0;
        java.lang.Class r3, $r6;
        boolean z0, z1;
        android.content.Context $r4;
        java.lang.ClassLoader $r5;
        java.lang.ClassNotFoundException $r7;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(36);

        if i0 < 0 goto label1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label1:
        $r4 = r0.<android.test.TestRunner: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r3 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r6 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

     label2:
        z1 = 0;

        if z0 == 0 goto label3;

        z1 = 1;

     label3:
        return z1;

     label4:
        $r7 := @caughtexception;

        return 0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
    }

    public void passed(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        android.test.TestRunner$Listener $r5;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        $i2 = r0.<android.test.TestRunner: int mPassed>;

        $i3 = 1 + $i2;

        r0.<android.test.TestRunner: int mPassed> = $i3;

        $r2 = r0.<android.test.TestRunner: java.util.List mListeners>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<android.test.TestRunner: java.util.List mListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (android.test.TestRunner$Listener) $r4;

        interfaceinvoke $r5.<android.test.TestRunner$Listener: void passed(java.lang.String)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public int passedCount()
    {
        android.test.TestRunner r0;
        int $i0;

        r0 := @this: android.test.TestRunner;

        $i0 = r0.<android.test.TestRunner: int mPassed>;

        return $i0;
    }

    public void run(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1, $r27, $r33, $r34, $r35, $r36, $r38, $r39, $r56, $r57, $r60, $r66, $r67;
        java.lang.IllegalAccessException r2, $r45;
        java.lang.InstantiationException r3, $r49;
        java.lang.ClassNotFoundException r4, $r59;
        java.lang.Class r5, $r22, $r25;
        java.lang.reflect.Method r6, r10;
        java.lang.Throwable r7, r14, r17, r19, r21, $r43, $r44, $r63;
        android.test.TestRunner$JunitTestSuite r8, r71;
        java.lang.reflect.Method[] r9;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        junit.framework.TestCase r11;
        android.test.AndroidTestCase r12;
        java.lang.Exception r13, $r62;
        junit.framework.Test r15, r73, r74, r75;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.lang.Runnable r16;
        android.test.TestCase r18;
        android.content.Context $r20, $r41, $r42, $r47;
        java.lang.ClassLoader $r23;
        java.lang.StringBuilder $r26, $r29, $r52, $r54, $r55, $r61, $r64, $r65, r68, r69, r70, r72;
        java.io.PrintStream $r28, $r51, $r53;
        java.lang.Object $r37, $r40;
        java.lang.String[] $r48;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

     label01:
        r0.<android.test.TestRunner: java.lang.String mClassName> = r1;

        $r20 = r0.<android.test.TestRunner: android.content.Context mContext>;

        $r23 = virtualinvoke $r20.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r5 = virtualinvoke $r23.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        r6 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(java.lang.Class)>(r5);

     label02:
        if r6 == null goto label05;

     label03:
        $r48 = staticinvoke <android.test.TestRunner: java.lang.String[] getChildren(java.lang.reflect.Method)>(r6);

        virtualinvoke r0.<android.test.TestRunner: void run(java.lang.String[])>($r48);

     label04:
        return;

     label05:
        $r22 = <android.test.TestRunner: java.lang.Class mRunnableClass>;

        $z3 = virtualinvoke $r22.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r5);

        if $z3 == 0 goto label30;

        $r40 = virtualinvoke r5.<java.lang.Class: java.lang.Object newInstance()>();

        r16 = (java.lang.Runnable) $r40;

        z0 = r16 instanceof android.test.TestCase;

     label06:
        r18 = null;

        if z0 == 0 goto label08;

     label07:
        r18 = (android.test.TestCase) r16;

     label08:
        r17 = null;

     label09:
        specialinvoke r0.<android.test.TestRunner: void started(java.lang.String)>(r1);

     label10:
        z1 = 0;

        if r18 == null goto label13;

     label11:
        $r47 = r0.<android.test.TestRunner: android.content.Context mContext>;

        interfaceinvoke r18.<android.test.TestCase: void setUp(android.content.Context)>($r47);

     label12:
        z1 = 1;

     label13:
        $i6 = r0.<android.test.TestRunner: int mMode>;

        if $i6 != 1 goto label21;

        virtualinvoke r0.<android.test.TestRunner: void runInPerformanceMode(java.lang.Object,java.lang.String,boolean,java.lang.String)>(r16, r1, 0, r1);

     label14:
        if r18 == null goto label16;

        if z1 == 0 goto label16;

     label15:
        interfaceinvoke r18.<android.test.TestCase: void tearDown()>();

     label16:
        specialinvoke r0.<android.test.TestRunner: void finished(java.lang.String)>(r1);

     label17:
        if r17 != null goto label27;

     label18:
        virtualinvoke r0.<android.test.TestRunner: void passed(java.lang.String)>(r1);

     label19:
        return;

     label20:
        $r59 := @caughtexception;

        r4 = $r59;

        r68 = new java.lang.StringBuilder;

        specialinvoke r68.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassNotFoundException for ");

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r67 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        $r66 = virtualinvoke r4.<java.lang.ClassNotFoundException: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r67, $r66);

        $z5 = virtualinvoke r0.<android.test.TestRunner: boolean isJunitTest(java.lang.String)>(r1);

        if $z5 == 0 goto label59;

        virtualinvoke r0.<android.test.TestRunner: void runSingleJunitTest(java.lang.String)>(r1);

        return;

     label21:
        $i7 = r0.<android.test.TestRunner: int mMode>;

        if $i7 != 2 goto label23;

        virtualinvoke r0.<android.test.TestRunner: void startProfiling()>();

        interfaceinvoke r16.<java.lang.Runnable: void run()>();

        virtualinvoke r0.<android.test.TestRunner: void finishProfiling()>();

     label22:
        r17 = null;

        goto label14;

     label23:
        interfaceinvoke r16.<java.lang.Runnable: void run()>();

     label24:
        r17 = null;

        goto label14;

     label25:
        $r49 := @caughtexception;

        r3 = $r49;

        $r51 = <java.lang.System: java.io.PrintStream out>;

        r69 = new java.lang.StringBuilder;

        specialinvoke r69.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InstantiationException for ");

        $r61 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r51.<java.io.PrintStream: void println(java.lang.String)>($r60);

        specialinvoke r0.<android.test.TestRunner: void missingTest(java.lang.String,java.lang.Throwable)>(r1, r3);

        return;

     label26:
        $r44 := @caughtexception;

        r21 = $r44;

        r17 = r21;

        goto label16;

     label27:
        virtualinvoke r0.<android.test.TestRunner: void failed(java.lang.String,java.lang.Throwable)>(r1, r17);

     label28:
        return;

     label29:
        $r45 := @caughtexception;

        r2 = $r45;

        $r53 = <java.lang.System: java.io.PrintStream out>;

        r70 = new java.lang.StringBuilder;

        specialinvoke r70.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IllegalAccessException for ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r53.<java.io.PrintStream: void println(java.lang.String)>($r56);

        specialinvoke r0.<android.test.TestRunner: void missingTest(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;

     label30:
        $r25 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z2 = virtualinvoke $r25.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r5);

        if $z2 == 0 goto label57;

     label31:
        r7 = null;

     label32:
        r71 = new android.test.TestRunner$JunitTestSuite;

        specialinvoke r71.<android.test.TestRunner$JunitTestSuite: void <init>(android.test.TestRunner)>(r0);

        r8 = r71;

        r9 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)>(r5);

        i0 = lengthof r9;

     label33:
        i1 = 0;

     label34:
        if i1 >= i0 goto label42;

     label35:
        r10 = r9[i1];

        $r37 = virtualinvoke r5.<java.lang.Class: java.lang.Object newInstance()>();

        r11 = (junit.framework.TestCase) $r37;

        $r36 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke r11.<junit.framework.TestCase: void setName(java.lang.String)>($r36);

        $z4 = r11 instanceof android.test.AndroidTestCase;

        if $z4 == 0 goto label37;

        r12 = (android.test.AndroidTestCase) r11;

     label36:
        $r42 = r0.<android.test.TestRunner: android.content.Context mContext>;

        virtualinvoke r12.<android.test.AndroidTestCase: void setContext(android.content.Context)>($r42);

        $r41 = r0.<android.test.TestRunner: android.content.Context mContext>;

        virtualinvoke r12.<android.test.AndroidTestCase: void setTestContext(android.content.Context)>($r41);

     label37:
        r73 = (junit.framework.Test) r11;

        virtualinvoke r8.<android.test.TestRunner$JunitTestSuite: void addTest(junit.framework.Test)>(r73);

     label38:
        i1 = i1 + 1;

        goto label34;

     label39:
        $r62 := @caughtexception;

        r13 = $r62;

     label40:
        $r57 = virtualinvoke r13.<java.lang.Exception: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("TestHarness", $r57);

     label41:
        goto label37;

     label42:
        $i4 = r0.<android.test.TestRunner: int mMode>;

        if $i4 != 1 goto label53;

        i3 = virtualinvoke r8.<android.test.TestRunner$JunitTestSuite: int testCount()>();

     label43:
        i2 = 0;

     label44:
        if i2 >= i3 goto label60;

     label45:
        r15 = virtualinvoke r8.<android.test.TestRunner$JunitTestSuite: junit.framework.Test testAt(int)>(i2);

        $r35 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r0.<android.test.TestRunner: void started(java.lang.String)>($r35);

     label46:
        $r34 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<android.test.TestRunner: void runInPerformanceMode(java.lang.Object,java.lang.String,boolean,java.lang.String)>(r15, r1, 1, $r34);

     label47:
        $r33 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r0.<android.test.TestRunner: void finished(java.lang.String)>($r33);

     label48:
        if r7 != null goto label51;

     label49:
        $r38 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<android.test.TestRunner: void passed(java.lang.String)>($r38);

     label50:
        goto label62;

     label51:
        $r39 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<android.test.TestRunner: void failed(java.lang.String,java.lang.Throwable)>($r39, r7);

     label52:
        goto label62;

     label53:
        $i5 = r0.<android.test.TestRunner: int mMode>;

        if $i5 != 2 goto label55;

        virtualinvoke r0.<android.test.TestRunner: void startProfiling()>();

        r74 = (junit.framework.Test) r8;

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>(r74);

        virtualinvoke r0.<android.test.TestRunner: void finishProfiling()>();

     label54:
        return;

     label55:
        r75 = (junit.framework.Test) r8;

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>(r75);

     label56:
        return;

     label57:
        $r28 = <java.lang.System: java.io.PrintStream out>;

        r72 = new java.lang.StringBuilder;

        specialinvoke r72.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test wasn\'t Runnable and didn\'t have a children method: ");

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>($r27);

     label58:
        return;

     label59:
        specialinvoke r0.<android.test.TestRunner: void missingTest(java.lang.String,java.lang.Throwable)>(r1, r4);

     label60:
        return;

     label61:
        $r43 := @caughtexception;

        r19 = $r43;

        r17 = r19;

        goto label14;

     label62:
        i2 = i2 + 1;

        goto label44;

     label63:
        $r63 := @caughtexception;

        r14 = $r63;

        r7 = r14;

        goto label47;

        catch java.lang.ClassNotFoundException from label01 to label02 with label20;
        catch java.lang.InstantiationException from label01 to label02 with label25;
        catch java.lang.IllegalAccessException from label01 to label02 with label29;
        catch java.lang.ClassNotFoundException from label03 to label04 with label20;
        catch java.lang.InstantiationException from label03 to label04 with label25;
        catch java.lang.IllegalAccessException from label03 to label04 with label29;
        catch java.lang.ClassNotFoundException from label05 to label06 with label20;
        catch java.lang.InstantiationException from label05 to label06 with label25;
        catch java.lang.IllegalAccessException from label05 to label06 with label29;
        catch java.lang.ClassNotFoundException from label07 to label08 with label20;
        catch java.lang.InstantiationException from label07 to label08 with label25;
        catch java.lang.IllegalAccessException from label07 to label08 with label29;
        catch java.lang.ClassNotFoundException from label09 to label10 with label20;
        catch java.lang.InstantiationException from label09 to label10 with label25;
        catch java.lang.IllegalAccessException from label09 to label10 with label29;
        catch java.lang.Throwable from label11 to label12 with label61;
        catch java.lang.ClassNotFoundException from label11 to label12 with label20;
        catch java.lang.InstantiationException from label11 to label12 with label25;
        catch java.lang.IllegalAccessException from label11 to label12 with label29;
        catch java.lang.Throwable from label13 to label14 with label61;
        catch java.lang.ClassNotFoundException from label13 to label14 with label20;
        catch java.lang.InstantiationException from label13 to label14 with label25;
        catch java.lang.IllegalAccessException from label13 to label14 with label29;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.ClassNotFoundException from label15 to label16 with label20;
        catch java.lang.InstantiationException from label15 to label16 with label25;
        catch java.lang.IllegalAccessException from label15 to label16 with label29;
        catch java.lang.ClassNotFoundException from label16 to label17 with label20;
        catch java.lang.InstantiationException from label16 to label17 with label25;
        catch java.lang.IllegalAccessException from label16 to label17 with label29;
        catch java.lang.ClassNotFoundException from label18 to label19 with label20;
        catch java.lang.InstantiationException from label18 to label19 with label25;
        catch java.lang.IllegalAccessException from label18 to label19 with label29;
        catch java.lang.Throwable from label21 to label22 with label61;
        catch java.lang.ClassNotFoundException from label21 to label22 with label20;
        catch java.lang.InstantiationException from label21 to label22 with label25;
        catch java.lang.IllegalAccessException from label21 to label22 with label29;
        catch java.lang.Throwable from label23 to label24 with label61;
        catch java.lang.ClassNotFoundException from label23 to label24 with label20;
        catch java.lang.InstantiationException from label23 to label24 with label25;
        catch java.lang.IllegalAccessException from label23 to label24 with label29;
        catch java.lang.ClassNotFoundException from label27 to label28 with label20;
        catch java.lang.InstantiationException from label27 to label28 with label25;
        catch java.lang.IllegalAccessException from label27 to label28 with label29;
        catch java.lang.ClassNotFoundException from label30 to label31 with label20;
        catch java.lang.InstantiationException from label30 to label31 with label25;
        catch java.lang.IllegalAccessException from label30 to label31 with label29;
        catch java.lang.ClassNotFoundException from label32 to label33 with label20;
        catch java.lang.InstantiationException from label32 to label33 with label25;
        catch java.lang.IllegalAccessException from label32 to label33 with label29;
        catch java.lang.ClassNotFoundException from label35 to label36 with label20;
        catch java.lang.InstantiationException from label35 to label36 with label25;
        catch java.lang.IllegalAccessException from label35 to label36 with label29;
        catch java.lang.Exception from label36 to label37 with label39;
        catch java.lang.ClassNotFoundException from label36 to label37 with label20;
        catch java.lang.InstantiationException from label36 to label37 with label25;
        catch java.lang.IllegalAccessException from label36 to label37 with label29;
        catch java.lang.ClassNotFoundException from label37 to label38 with label20;
        catch java.lang.InstantiationException from label37 to label38 with label25;
        catch java.lang.IllegalAccessException from label37 to label38 with label29;
        catch java.lang.ClassNotFoundException from label40 to label41 with label20;
        catch java.lang.InstantiationException from label40 to label41 with label25;
        catch java.lang.IllegalAccessException from label40 to label41 with label29;
        catch java.lang.ClassNotFoundException from label42 to label43 with label20;
        catch java.lang.InstantiationException from label42 to label43 with label25;
        catch java.lang.IllegalAccessException from label42 to label43 with label29;
        catch java.lang.ClassNotFoundException from label45 to label46 with label20;
        catch java.lang.InstantiationException from label45 to label46 with label25;
        catch java.lang.IllegalAccessException from label45 to label46 with label29;
        catch java.lang.Throwable from label46 to label47 with label63;
        catch java.lang.ClassNotFoundException from label46 to label47 with label20;
        catch java.lang.InstantiationException from label46 to label47 with label25;
        catch java.lang.IllegalAccessException from label46 to label47 with label29;
        catch java.lang.ClassNotFoundException from label47 to label48 with label20;
        catch java.lang.InstantiationException from label47 to label48 with label25;
        catch java.lang.IllegalAccessException from label47 to label48 with label29;
        catch java.lang.ClassNotFoundException from label49 to label50 with label20;
        catch java.lang.InstantiationException from label49 to label50 with label25;
        catch java.lang.IllegalAccessException from label49 to label50 with label29;
        catch java.lang.ClassNotFoundException from label51 to label52 with label20;
        catch java.lang.InstantiationException from label51 to label52 with label25;
        catch java.lang.IllegalAccessException from label51 to label52 with label29;
        catch java.lang.ClassNotFoundException from label53 to label54 with label20;
        catch java.lang.InstantiationException from label53 to label54 with label25;
        catch java.lang.IllegalAccessException from label53 to label54 with label29;
        catch java.lang.ClassNotFoundException from label55 to label56 with label20;
        catch java.lang.InstantiationException from label55 to label56 with label25;
        catch java.lang.IllegalAccessException from label55 to label56 with label29;
        catch java.lang.ClassNotFoundException from label57 to label58 with label20;
        catch java.lang.InstantiationException from label57 to label58 with label25;
        catch java.lang.IllegalAccessException from label57 to label58 with label29;
    }

    public void run(java.lang.String[])
    {
        android.test.TestRunner r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String $r2;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke r0.<android.test.TestRunner: void run(java.lang.String)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void runInPerformanceMode(java.lang.Object, java.lang.String, boolean, java.lang.String) throws java.lang.Exception
    {
        android.test.TestRunner r0;
        java.lang.Object r1, r4;
        java.lang.String r2, r3;
        boolean z0, z1, z2, $z3;
        int i0, i1, i4, i5, $i12, $i17, $i21;
        android.test.PerformanceTestCase r5;
        java.lang.Runnable r6;
        long l2, l3, $l6, $l14, $l15, $l16, $l18, $l19, $l20;
        java.lang.ClassLoader $r7;
        android.content.Context $r8;
        java.lang.Class $r9;
        java.lang.Runtime $r10, $r11;
        byte $b7, $b8, $b9, $b10, $b11, $b13;
        java.util.List $r12;
        junit.framework.Test $r14;
        java.util.ArrayList r16;
        android.test.PerformanceTestCase$Intermediates r17;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        z1 = 1;

        i0 = 1;

        r0.<android.test.TestRunner: java.util.List mIntermediates> = null;

        r0.<android.test.TestRunner: int mInternalIterations> = 1;

        $r8 = r0.<android.test.TestRunner: android.content.Context mContext>;

        $r7 = virtualinvoke $r8.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r9 = virtualinvoke $r7.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

        r4 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>();

        z2 = r4 instanceof android.test.PerformanceTestCase;

        r5 = null;

        if z2 == 0 goto label02;

        r5 = (android.test.PerformanceTestCase) r4;

        $i21 = r0.<android.test.TestRunner: int mMode>;

        if $i21 != 0 goto label02;

        $z3 = interfaceinvoke r5.<android.test.PerformanceTestCase: boolean isPerformanceOnly()>();

        if $z3 == 0 goto label02;

     label01:
        return;

     label02:
        $r11 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r11.<java.lang.Runtime: void runFinalization()>();

        $r10 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r10.<java.lang.Runtime: void gc()>();

        if r5 == null goto label03;

        r16 = new java.util.ArrayList;

        specialinvoke r16.<java.util.ArrayList: void <init>()>();

        r0.<android.test.TestRunner: java.util.List mIntermediates> = r16;

        r17 = (android.test.PerformanceTestCase$Intermediates) r0;

        i0 = interfaceinvoke r5.<android.test.PerformanceTestCase: int startPerformance(android.test.PerformanceTestCase$Intermediates)>(r17);

        if i0 <= 0 goto label07;

        z1 = 0;

     label03:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label04:
        r0.<android.test.TestRunner: long mEndTime> = 0L;

        if z1 == 0 goto label08;

        $l20 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        r0.<android.test.TestRunner: long mStartTime> = $l20;

     label05:
        if z0 == 0 goto label09;

        i4 = 0;

     label06:
        if i4 >= i0 goto label11;

        $r14 = (junit.framework.Test) r1;

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>($r14);

        i4 = i4 + 1;

        goto label06;

     label07:
        i0 = 1;

        goto label03;

     label08:
        r0.<android.test.TestRunner: long mStartTime> = 0L;

        goto label05;

     label09:
        r6 = (java.lang.Runnable) r1;

        i1 = 0;

     label10:
        if i1 >= i0 goto label11;

        interfaceinvoke r6.<java.lang.Runnable: void run()>();

        i1 = i1 + 1;

        goto label10;

     label11:
        l2 = r0.<android.test.TestRunner: long mEndTime>;

        $b7 = l2 cmp 0L;

        if $b7 != 0 goto label12;

        l2 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

     label12:
        $l6 = r0.<android.test.TestRunner: long mStartTime>;

        l3 = l2 - $l6;

        if z1 != 0 goto label14;

     label13:
        $b13 = l3 cmp 0L;

        if $b13 == 0 goto label01;

        $i12 = r0.<android.test.TestRunner: int mInternalIterations>;

        i5 = i0 * $i12;

        $l16 = 1000000L * l3;

        $l15 = (long) i5;

        $l14 = $l16 / $l15;

        $r12 = r0.<android.test.TestRunner: java.util.List mIntermediates>;

        specialinvoke r0.<android.test.TestRunner: void performance(java.lang.String,long,int,java.util.List)>(r3, $l14, i5, $r12);

        return;

     label14:
        $b9 = l3 cmp 1L;

        if $b9 > 0 goto label15;

        i0 = i0 * 1000;

        goto label04;

     label15:
        $b8 = l3 cmp 10L;

        if $b8 > 0 goto label16;

        i0 = i0 * 100;

        goto label04;

     label16:
        $b11 = l3 cmp 100L;

        if $b11 >= 0 goto label17;

        i0 = i0 * 10;

        goto label04;

     label17:
        $b10 = l3 cmp 1000L;

        if $b10 >= 0 goto label13;

        $l18 = 1000L / l3;

        $l19 = 2L + $l18;

        $i17 = (int) $l19;

        i0 = i0 * $i17;

        goto label04;
    }

    public void runSingleJunitTest(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1, r2, r3, $r20, $r21, $r22, $r25;
        int i0, i1, $i2, $i4;
        java.lang.InstantiationException r4, $r30;
        java.lang.IllegalAccessException r5, $r26;
        java.lang.ClassNotFoundException r6, $r29;
        java.lang.Class r7, $r15;
        junit.framework.TestCase r8;
        android.test.TestRunner$JunitTestSuite r9, r31;
        java.lang.Exception r11, $r28;
        android.test.AndroidTestCase r12;
        android.content.Context $r13, $r23;
        java.lang.ClassLoader $r14;
        boolean $z0, $z1;
        java.lang.Object $r17;
        java.lang.Throwable $r27;
        junit.framework.Test r32, r33, r34;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(36);

        r2 = "";

        r3 = r1;

        if i0 < 0 goto label01;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i4 = i0 + 1;

        r2 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i4);

     label01:
        $r13 = r0.<android.test.TestRunner: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r7 = virtualinvoke $r14.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r15 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z0 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r7);

        if $z0 == 0 goto label07;

        $r17 = virtualinvoke r7.<java.lang.Class: java.lang.Object newInstance()>();

        r8 = (junit.framework.TestCase) $r17;

        r31 = new android.test.TestRunner$JunitTestSuite;

        specialinvoke r31.<android.test.TestRunner$JunitTestSuite: void <init>(android.test.TestRunner)>(r0);

        r9 = r31;

        virtualinvoke r8.<junit.framework.TestCase: void setName(java.lang.String)>(r2);

        $z1 = r8 instanceof android.test.AndroidTestCase;

        if $z1 == 0 goto label03;

        r12 = (android.test.AndroidTestCase) r8;

     label02:
        $r23 = r0.<android.test.TestRunner: android.content.Context mContext>;

        virtualinvoke r12.<android.test.AndroidTestCase: void setContext(android.content.Context)>($r23);

     label03:
        r32 = (junit.framework.Test) r8;

        virtualinvoke r9.<android.test.TestRunner$JunitTestSuite: void addTest(junit.framework.Test)>(r32);

        i1 = r0.<android.test.TestRunner: int mMode>;

     label04:
        if i1 != 1 goto label13;

     label05:
        $r22 = virtualinvoke r8.<junit.framework.TestCase: java.lang.String toString()>();

        specialinvoke r0.<android.test.TestRunner: void started(java.lang.String)>($r22);

        $r20 = virtualinvoke r8.<junit.framework.TestCase: java.lang.String toString()>();

        virtualinvoke r0.<android.test.TestRunner: void runInPerformanceMode(java.lang.Object,java.lang.String,boolean,java.lang.String)>(r8, r1, 1, $r20);

        $r21 = virtualinvoke r8.<junit.framework.TestCase: java.lang.String toString()>();

        specialinvoke r0.<android.test.TestRunner: void finished(java.lang.String)>($r21);

     label06:
        $r25 = virtualinvoke r8.<junit.framework.TestCase: java.lang.String toString()>();

        virtualinvoke r0.<android.test.TestRunner: void passed(java.lang.String)>($r25);

     label07:
        return;

     label08:
        $r28 := @caughtexception;

        r11 = $r28;

     label09:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "Exception encountered while trying to set the context.", r11);

     label10:
        goto label03;

     label11:
        $r29 := @caughtexception;

        r6 = $r29;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "No test case to run", r6);

        return;

     label12:
        $r27 := @caughtexception;

        return;

     label13:
        $i2 = r0.<android.test.TestRunner: int mMode>;

        if $i2 != 2 goto label16;

        virtualinvoke r0.<android.test.TestRunner: void startProfiling()>();

        r33 = (junit.framework.Test) r9;

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>(r33);

        virtualinvoke r0.<android.test.TestRunner: void finishProfiling()>();

     label14:
        return;

     label15:
        $r26 := @caughtexception;

        r5 = $r26;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "Illegal Access Exception", r5);

        return;

     label16:
        r34 = (junit.framework.Test) r9;

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>(r34);

     label17:
        return;

     label18:
        $r30 := @caughtexception;

        r4 = $r30;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "Instantiation Exception", r4);

        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label11;
        catch java.lang.IllegalAccessException from label01 to label02 with label15;
        catch java.lang.InstantiationException from label01 to label02 with label18;
        catch java.lang.Exception from label02 to label03 with label08;
        catch java.lang.ClassNotFoundException from label02 to label03 with label11;
        catch java.lang.IllegalAccessException from label02 to label03 with label15;
        catch java.lang.InstantiationException from label02 to label03 with label18;
        catch java.lang.ClassNotFoundException from label03 to label04 with label11;
        catch java.lang.IllegalAccessException from label03 to label04 with label15;
        catch java.lang.InstantiationException from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.ClassNotFoundException from label05 to label06 with label11;
        catch java.lang.IllegalAccessException from label05 to label06 with label15;
        catch java.lang.InstantiationException from label05 to label06 with label18;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.ClassNotFoundException from label06 to label07 with label11;
        catch java.lang.IllegalAccessException from label06 to label07 with label15;
        catch java.lang.InstantiationException from label06 to label07 with label18;
        catch java.lang.ClassNotFoundException from label09 to label10 with label11;
        catch java.lang.IllegalAccessException from label09 to label10 with label15;
        catch java.lang.InstantiationException from label09 to label10 with label18;
        catch java.lang.Throwable from label12 to label12 with label12;
        catch java.lang.ClassNotFoundException from label12 to label12 with label11;
        catch java.lang.IllegalAccessException from label12 to label12 with label15;
        catch java.lang.InstantiationException from label12 to label12 with label18;
        catch java.lang.ClassNotFoundException from label13 to label14 with label11;
        catch java.lang.IllegalAccessException from label13 to label14 with label15;
        catch java.lang.InstantiationException from label13 to label14 with label18;
        catch java.lang.ClassNotFoundException from label16 to label17 with label11;
        catch java.lang.IllegalAccessException from label16 to label17 with label15;
        catch java.lang.InstantiationException from label16 to label17 with label18;
    }

    public void setInternalIterations(int)
    {
        android.test.TestRunner r0;
        int i0;

        r0 := @this: android.test.TestRunner;

        i0 := @parameter0: int;

        r0.<android.test.TestRunner: int mInternalIterations> = i0;

        return;
    }

    public void setPerformanceMode(int)
    {
        android.test.TestRunner r0;
        int i0;

        r0 := @this: android.test.TestRunner;

        i0 := @parameter0: int;

        r0.<android.test.TestRunner: int mMode> = i0;

        return;
    }

    public void startProfiling()
    {
        android.test.TestRunner r0;
        java.io.File $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r4, $r7;

        r0 := @this: android.test.TestRunner;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("/tmp/trace");

        virtualinvoke $r1.<java.io.File: boolean mkdir()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/tmp/trace/");

        $r4 = r0.<android.test.TestRunner: java.lang.String mClassName>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dmtrace");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Debug: void startMethodTracing(java.lang.String,int)>($r7, 8388608);

        return;
    }

    public void startTiming(boolean)
    {
        android.test.TestRunner r0;
        boolean z0;
        long $l0, $l1;

        r0 := @this: android.test.TestRunner;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<android.test.TestRunner: long mStartTime> = $l1;

        return;

     label1:
        $l0 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        r0.<android.test.TestRunner: long mStartTime> = $l0;

        return;
    }
}
