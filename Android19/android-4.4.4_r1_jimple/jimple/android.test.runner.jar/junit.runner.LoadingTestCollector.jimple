public class junit.runner.LoadingTestCollector extends junit.runner.ClassPathTestCollector
{
    junit.runner.TestCaseClassLoader fLoader;

    public void <init>()
    {
        junit.runner.LoadingTestCollector r0;
        junit.runner.TestCaseClassLoader $r1;

        r0 := @this: junit.runner.LoadingTestCollector;

        specialinvoke r0.<junit.runner.ClassPathTestCollector: void <init>()>();

        $r1 = new junit.runner.TestCaseClassLoader;

        specialinvoke $r1.<junit.runner.TestCaseClassLoader: void <init>()>();

        r0.<junit.runner.LoadingTestCollector: junit.runner.TestCaseClassLoader fLoader> = $r1;

        return;
    }

    java.lang.Class classFromFile(java.lang.String) throws java.lang.ClassNotFoundException
    {
        junit.runner.LoadingTestCollector r0;
        java.lang.String r1, r2;
        junit.runner.TestCaseClassLoader $r3, $r4;
        boolean $z0;
        java.lang.Class $r5;

        r0 := @this: junit.runner.LoadingTestCollector;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<junit.runner.LoadingTestCollector: java.lang.String classNameFromFile(java.lang.String)>(r1);

        $r3 = r0.<junit.runner.LoadingTestCollector: junit.runner.TestCaseClassLoader fLoader>;

        $z0 = virtualinvoke $r3.<junit.runner.TestCaseClassLoader: boolean isExcluded(java.lang.String)>(r2);

        if $z0 != 0 goto label1;

        $r4 = r0.<junit.runner.LoadingTestCollector: junit.runner.TestCaseClassLoader fLoader>;

        $r5 = virtualinvoke $r4.<junit.runner.TestCaseClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>(r2, 0);

        return $r5;

     label1:
        return null;
    }

    boolean hasPublicConstructor(java.lang.Class)
    {
        junit.runner.LoadingTestCollector r0;
        java.lang.Class r1;
        java.lang.NoSuchMethodException $r4;

        r0 := @this: junit.runner.LoadingTestCollector;

        r1 := @parameter0: java.lang.Class;

     label1:
        staticinvoke <junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)>(r1);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    boolean hasSuiteMethod(java.lang.Class)
    {
        junit.runner.LoadingTestCollector r0;
        java.lang.Class r1;
        java.lang.Class[] $r3;
        java.lang.Exception $r5;

        r0 := @this: junit.runner.LoadingTestCollector;

        r1 := @parameter0: java.lang.Class;

     label1:
        $r3 = newarray (java.lang.Class)[0];

        virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("suite", $r3);

     label2:
        return 1;

     label3:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    boolean isTestClass(java.lang.Class)
    {
        junit.runner.LoadingTestCollector r0;
        java.lang.Class r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        int $i0;

        r0 := @this: junit.runner.LoadingTestCollector;

        r1 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<junit.runner.LoadingTestCollector: boolean hasSuiteMethod(java.lang.Class)>(r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        $r2 = class "junit/framework/Test";

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z1 == 0 goto label3;

        $i0 = virtualinvoke r1.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z2 == 0 goto label3;

        $z3 = virtualinvoke r0.<junit.runner.LoadingTestCollector: boolean hasPublicConstructor(java.lang.Class)>(r1);

        if $z3 != 0 goto label1;

     label3:
        return 0;
    }

    protected boolean isTestClass(java.lang.String)
    {
        junit.runner.LoadingTestCollector r0;
        java.lang.String r1;
        boolean z0, z1, z2;
        java.lang.Class r4;
        java.lang.NoClassDefFoundError $r5;
        java.lang.ClassNotFoundException $r6;

        r0 := @this: junit.runner.LoadingTestCollector;

        r1 := @parameter0: java.lang.String;

     label1:
        z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

     label2:
        z1 = 0;

        if z0 == 0 goto label7;

     label3:
        r4 = virtualinvoke r0.<junit.runner.LoadingTestCollector: java.lang.Class classFromFile(java.lang.String)>(r1);

     label4:
        z1 = 0;

        if r4 == null goto label7;

     label5:
        z2 = virtualinvoke r0.<junit.runner.LoadingTestCollector: boolean isTestClass(java.lang.Class)>(r4);

     label6:
        z1 = 0;

        if z2 == 0 goto label7;

        z1 = 1;

     label7:
        return z1;

     label8:
        $r5 := @caughtexception;

        return 0;

     label9:
        $r6 := @caughtexception;

        return 0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label9;
        catch java.lang.NoClassDefFoundError from label1 to label2 with label8;
        catch java.lang.ClassNotFoundException from label3 to label4 with label9;
        catch java.lang.NoClassDefFoundError from label3 to label4 with label8;
        catch java.lang.ClassNotFoundException from label5 to label6 with label9;
        catch java.lang.NoClassDefFoundError from label5 to label6 with label8;
    }
}
