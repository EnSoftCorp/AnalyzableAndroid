class org.apache.xpath.compiler.Lexer extends java.lang.Object
{
    static final int TARGETEXTRA;
    private org.apache.xpath.compiler.Compiler m_compiler;
    org.apache.xml.utils.PrefixResolver m_namespaceContext;
    private int[] m_patternMap;
    private int m_patternMapSize;
    org.apache.xpath.compiler.XPathParser m_processor;

    void <init>(org.apache.xpath.compiler.Compiler, org.apache.xml.utils.PrefixResolver, org.apache.xpath.compiler.XPathParser)
    {
        org.apache.xpath.compiler.Lexer r0;
        org.apache.xpath.compiler.Compiler r1;
        org.apache.xml.utils.PrefixResolver r2;
        org.apache.xpath.compiler.XPathParser r3;
        int[] $r4;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        r2 := @parameter1: org.apache.xml.utils.PrefixResolver;

        r3 := @parameter2: org.apache.xpath.compiler.XPathParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = newarray (int)[100];

        r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap> = $r4;

        r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler> = r1;

        r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext> = r2;

        r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor> = r3;

        return;
    }

    private final void addToTokenQueue(java.lang.String)
    {
        org.apache.xpath.compiler.Lexer r0;
        java.lang.String r1;
        org.apache.xpath.compiler.Compiler $r2;
        org.apache.xml.utils.ObjectVector $r3;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $r3 = virtualinvoke $r2.<org.apache.xpath.compiler.Compiler: org.apache.xml.utils.ObjectVector getTokenQueue()>();

        virtualinvoke $r3.<org.apache.xml.utils.ObjectVector: void addElement(java.lang.Object)>(r1);

        return;
    }

    private int getTokenQueuePosFromMap(int)
    {
        org.apache.xpath.compiler.Lexer r0;
        int i0, i1;
        int[] $r1;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        i1 = $r1[i0];

        if i1 < 10000 goto label1;

        i1 = i1 + -10000;

     label1:
        return i1;
    }

    private int mapNSTokens(java.lang.String, int, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.Lexer r0;
        java.lang.String r1, r2, r3, r4, r6, r7;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        org.apache.xml.utils.PrefixResolver $r8, $r11, $r12, $r13;
        java.lang.String[] $r9;
        org.apache.xpath.compiler.XPathParser $r10;
        boolean $z0, $z1;
        java.lang.ClassCastException $r14;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 = "";

        if i0 < 0 goto label01;

        if i1 < 0 goto label01;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

     label01:
        $r8 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        if $r8 == null goto label09;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z1 != 0 goto label09;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z0 != 0 goto label09;

     label02:
        $i6 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i6 <= 0 goto label06;

        $r12 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        r7 = interfaceinvoke $r12.<org.apache.xml.utils.PrefixResolver: java.lang.String getNamespaceForPrefix(java.lang.String)>(r2);

     label03:
        r3 = r7;

     label04:
        if r3 == null goto label10;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i3 <= 0 goto label10;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>(r3);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>(":");

        $i4 = i1 + 1;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i4, i2);

        $i5 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i5 <= 0 goto label05;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>(r4);

     label05:
        return -1;

     label06:
        $r11 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        r6 = interfaceinvoke $r11.<org.apache.xml.utils.PrefixResolver: java.lang.String getNamespaceForPrefix(java.lang.String)>(r2);

     label07:
        r3 = r6;

        goto label04;

     label08:
        $r14 := @caughtexception;

        $r13 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        r3 = interfaceinvoke $r13.<org.apache.xml.utils.PrefixResolver: java.lang.String getNamespaceForPrefix(java.lang.String)>(r2);

        goto label04;

     label09:
        r3 = r2;

        goto label04;

     label10:
        $r10 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = r2;

        virtualinvoke $r10.<org.apache.xpath.compiler.XPathParser: void errorForDOM3(java.lang.String,java.lang.Object[])>("ER_PREFIX_MUST_RESOLVE", $r9);

        goto label05;

        catch java.lang.ClassCastException from label02 to label03 with label08;
        catch java.lang.ClassCastException from label06 to label07 with label08;
    }

    private boolean mapPatternElemPos(int, boolean, boolean)
    {
        org.apache.xpath.compiler.Lexer r0;
        int i0, i1, i2, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        boolean z0, z1;
        int[] r1, r2, r3, $r4, $r6, $r7, $r8;
        byte b3;
        org.apache.xpath.compiler.Compiler $r5;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if i0 != 0 goto label4;

        $i7 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        $r4 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        $i6 = lengthof $r4;

        if $i7 < $i6 goto label1;

        r3 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        $r6 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        i5 = lengthof $r6;

        $i15 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        $i16 = 100 + $i15;

        $r7 = newarray (int)[$i16];

        r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap> = $r7;

        $r8 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r8, 0, i5);

     label1:
        if z0 != 0 goto label2;

        r2 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        $i11 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        i4 = -1 + $i11;

        $i14 = r2[i4];

        $i13 = -10000 + $i14;

        r2[i4] = $i13;

     label2:
        r1 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        i1 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        $r5 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        i2 = virtualinvoke $r5.<org.apache.xpath.compiler.Compiler: int getTokenQueueSize()>();

        b3 = 0;

        if z1 == 0 goto label3;

        b3 = 1;

     label3:
        $i8 = i2 - b3;

        $i10 = 10000 + $i8;

        r1[i1] = $i10;

        $i9 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        $i12 = 1 + $i9;

        r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize> = $i12;

        z0 = 0;

     label4:
        return z0;
    }

    private void recordTokenString(java.util.Vector)
    {
        org.apache.xpath.compiler.Lexer r0;
        java.util.Vector r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.xpath.compiler.XPathParser $r2, $r3, $r4, $r8;
        boolean $z0, $z1, $z2;
        org.apache.xpath.compiler.Compiler $r5;
        org.apache.xml.utils.ObjectVector $r6;
        java.lang.Object $r7;
        java.lang.String $r9;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.util.Vector;

        $i1 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        $i2 = -1 + $i1;

        i0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: int getTokenQueuePosFromMap(int)>($i2);

        $i3 = i0 + 1;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void resetTokenMark(int)>($i3);

        $r2 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $z0 = virtualinvoke $r2.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(40, 1);

        if $z0 == 0 goto label08;

        $r8 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r9 = $r8.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $i5 = virtualinvoke r0.<org.apache.xpath.compiler.Lexer: int getKeywordToken(java.lang.String)>($r9);

        lookupswitch($i5)
        {
            case 35: goto label05;
            case 36: goto label06;
            case 1030: goto label02;
            case 1031: goto label03;
            case 1032: goto label07;
            case 1033: goto label04;
            default: goto label01;
        };

     label01:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("*");

        return;

     label02:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("#comment");

        return;

     label03:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("#text");

        return;

     label04:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("*");

        return;

     label05:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("/");

        return;

     label06:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("*");

        return;

     label07:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("*");

        return;

     label08:
        $r3 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $z1 = virtualinvoke $r3.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(64);

        if $z1 == 0 goto label09;

        i0 = i0 + 1;

        $i4 = i0 + 1;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void resetTokenMark(int)>($i4);

     label09:
        $r4 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $z2 = virtualinvoke $r4.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(58, 1);

        if $z2 == 0 goto label10;

        i0 = i0 + 2;

     label10:
        $r5 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $r6 = virtualinvoke $r5.<org.apache.xpath.compiler.Compiler: org.apache.xml.utils.ObjectVector getTokenQueue()>();

        $r7 = virtualinvoke $r6.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>(i0);

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>($r7);

        return;
    }

    private final void resetTokenMark(int)
    {
        org.apache.xpath.compiler.Lexer r0;
        int i0, i1, i2, $i3, $i4;
        org.apache.xpath.compiler.XPathParser r1, r2, r4, $r6, $r7, $r8, $r11, $r13;
        org.apache.xml.utils.ObjectVector r3;
        org.apache.xpath.compiler.Compiler $r5, $r9;
        java.lang.Object $r10;
        java.lang.String $r12, $r14;
        char $c5;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        i0 := @parameter0: int;

        $r5 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        i1 = virtualinvoke $r5.<org.apache.xpath.compiler.Compiler: int getTokenQueueSize()>();

        r1 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        if i0 <= 0 goto label2;

        if i0 > i1 goto label1;

        i0 = i0 + -1;

     label1:
        r1.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = i0;

        $r6 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $i3 = $r6.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        if $i3 >= i1 goto label3;

        r2 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r9 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        r3 = virtualinvoke $r9.<org.apache.xpath.compiler.Compiler: org.apache.xml.utils.ObjectVector getTokenQueue()>();

        r4 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        i2 = r4.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i4 = i2 + 1;

        r4.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = $i4;

        $r10 = virtualinvoke r3.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>(i2);

        $r12 = (java.lang.String) $r10;

        r2.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = $r12;

        $r13 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r11 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r14 = $r11.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $c5 = virtualinvoke $r14.<java.lang.String: char charAt(int)>(0);

        $r13.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = $c5;

        return;

     label2:
        i0 = 0;

        goto label1;

     label3:
        $r7 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r7.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = null;

        $r8 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r8.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = 0;

        return;
    }

    final int getKeywordToken(java.lang.String)
    {
        org.apache.xpath.compiler.Lexer r0;
        java.lang.String r1;
        java.lang.Integer r4;
        int i0;
        java.lang.Object $r5;
        java.lang.NullPointerException $r6;
        java.lang.ClassCastException $r7;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.lang.String;

     label1:
        $r5 = staticinvoke <org.apache.xpath.compiler.Keywords: java.lang.Object getKeyWord(java.lang.String)>(r1);

        r4 = (java.lang.Integer) $r5;

     label2:
        if r4 == null goto label5;

     label3:
        i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

     label4:
        return i0;

     label5:
        return 0;

     label6:
        $r6 := @caughtexception;

        return 0;

     label7:
        $r7 := @caughtexception;

        return 0;

        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch java.lang.ClassCastException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
        catch java.lang.ClassCastException from label3 to label4 with label7;
    }

    void tokenize(java.lang.String) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.Lexer r0;
        java.lang.String r1;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.xpath.compiler.Lexer: void tokenize(java.lang.String,java.util.Vector)>(r1, null);

        return;
    }

    void tokenize(java.lang.String, java.util.Vector) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.Lexer r0;
        java.lang.String r1, $r11, $r12, $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r22;
        java.util.Vector r2;
        int i0, i1, i2, i3, i4, i5, i6, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        boolean z0, z1, z2, $z4;
        char c7;
        org.apache.xpath.compiler.Compiler $r3, $r4, $r6;
        org.apache.xpath.compiler.OpMapVector $r5;
        org.apache.xpath.compiler.XPathParser $r7, $r8, $r17, $r18;
        org.apache.xml.utils.PrefixResolver $r9, $r10;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Vector;

        $r3 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $r3.<org.apache.xpath.compiler.Compiler: java.lang.String m_currentPattern> = r1;

        r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize> = 0;

        $i8 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i8 >= 500 goto label05;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label01:
        i1 = i0 * 5;

        $r4 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $r5 = new org.apache.xpath.compiler.OpMapVector;

        specialinvoke $r5.<org.apache.xpath.compiler.OpMapVector: void <init>(int,int,int)>(i1, 2500, 1);

        $r4.<org.apache.xpath.compiler.Compiler: org.apache.xpath.compiler.OpMapVector m_opMap> = $r5;

        i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i3 = -1;

        i4 = -1;

        z0 = 1;

        z1 = 0;

        z2 = 0;

        i5 = 0;

        i6 = 0;

     label02:
        if i6 >= i2 goto label40;

        c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        lookupswitch(c7)
        {
            case 9: goto label18;
            case 10: goto label18;
            case 13: goto label18;
            case 32: goto label18;
            case 33: goto label24;
            case 34: goto label06;
            case 36: goto label24;
            case 39: goto label12;
            case 40: goto label24;
            case 41: goto label24;
            case 42: goto label24;
            case 43: goto label24;
            case 44: goto label24;
            case 45: goto label22;
            case 47: goto label24;
            case 58: goto label36;
            case 60: goto label24;
            case 61: goto label24;
            case 62: goto label24;
            case 64: goto label21;
            case 91: goto label24;
            case 92: goto label24;
            case 93: goto label24;
            case 94: goto label24;
            case 124: goto label24;
            default: goto label03;
        };

     label03:
        if -1 != i3 goto label39;

        i3 = i6;

        z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c7);

     label04:
        i6 = i6 + 1;

        goto label02;

     label05:
        i0 = 500;

        goto label01;

     label06:
        if i3 == -1 goto label07;

        z2 = 0;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i5, z0, z1);

        z1 = 0;

        if -1 == i4 goto label09;

        i4 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: int mapNSTokens(java.lang.String,int,int,int)>(r1, i3, i4, i6);

     label07:
        i3 = i6;

        i6 = i6 + 1;

     label08:
        if i6 >= i2 goto label10;

        c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        if c7 == 34 goto label10;

        i6 = i6 + 1;

        goto label08;

     label09:
        $r22 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, i6);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r22);

        z1 = 0;

        z2 = 0;

        goto label07;

     label10:
        if c7 != 34 goto label11;

        if i6 >= i2 goto label11;

        $i18 = i6 + 1;

        $r20 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, $i18);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r20);

        i3 = -1;

        goto label04;

     label11:
        $r18 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        virtualinvoke $r18.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_DOUBLE_QUOTE", null);

        goto label04;

     label12:
        if i3 == -1 goto label13;

        z2 = 0;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i5, z0, z1);

        z1 = 0;

        if -1 == i4 goto label15;

        i4 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: int mapNSTokens(java.lang.String,int,int,int)>(r1, i3, i4, i6);

     label13:
        i3 = i6;

        i6 = i6 + 1;

     label14:
        if i6 >= i2 goto label16;

        c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        if c7 == 39 goto label16;

        i6 = i6 + 1;

        goto label14;

     label15:
        $r19 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, i6);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r19);

        z1 = 0;

        z2 = 0;

        goto label13;

     label16:
        if c7 != 39 goto label17;

        if i6 >= i2 goto label17;

        $i17 = i6 + 1;

        $r16 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, $i17);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r16);

        i3 = -1;

        goto label04;

     label17:
        $r17 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        virtualinvoke $r17.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_SINGLE_QUOTE", null);

        goto label04;

     label18:
        if i3 == -1 goto label04;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i5, z0, z1);

        if -1 == i4 goto label20;

        i4 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: int mapNSTokens(java.lang.String,int,int,int)>(r1, i3, i4, i6);

     label19:
        i3 = -1;

        z1 = 0;

        z2 = 0;

        goto label04;

     label20:
        $r21 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, i6);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r21);

        goto label19;

     label21:
        z1 = 1;

     label22:
        if 45 != c7 goto label24;

        if z2 != 0 goto label23;

        if i3 != -1 goto label04;

     label23:
        z2 = 0;

     label24:
        if i3 == -1 goto label32;

        z2 = 0;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i5, z0, z1);

        z1 = 0;

        if -1 == i4 goto label31;

        i4 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: int mapNSTokens(java.lang.String,int,int,int)>(r1, i3, i4, i6);

     label25:
        i3 = -1;

     label26:
        if i5 != 0 goto label28;

        if 124 != c7 goto label28;

        if r2 == null goto label27;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void recordTokenString(java.util.Vector)>(r2);

     label27:
        z0 = 1;

     label28:
        if 41 == c7 goto label29;

        if 93 != c7 goto label34;

     label29:
        i5 = i5 + -1;

     label30:
        $i11 = i6 + 1;

        $r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i6, $i11);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r12);

        goto label04;

     label31:
        $r13 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, i6);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r13);

        goto label25;

     label32:
        if 47 != c7 goto label33;

        if z0 == 0 goto label33;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i5, z0, z1);

        goto label26;

     label33:
        if 42 != c7 goto label26;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i5, z0, z1);

        z1 = 0;

        goto label26;

     label34:
        if 40 == c7 goto label35;

        if 91 != c7 goto label30;

     label35:
        i5 = i5 + 1;

        goto label30;

     label36:
        if i6 <= 0 goto label03;

        $i14 = i6 - 1;

        if i4 != $i14 goto label38;

        if i3 == -1 goto label37;

        $i16 = i6 - 1;

        if i3 >= $i16 goto label37;

        $i15 = i6 - 1;

        $r14 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, $i15);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r14);

     label37:
        i3 = -1;

        i4 = -1;

        $i13 = i6 - 1;

        $i12 = i6 + 1;

        $r15 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i13, $i12);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r15);

        z1 = 0;

        z2 = 0;

        goto label04;

     label38:
        i4 = i6;

        goto label03;

     label39:
        if z2 == 0 goto label04;

        z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c7);

        goto label04;

     label40:
        if i3 == -1 goto label42;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i5, z0, z1);

        if -1 != i4 goto label41;

        $r9 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        if $r9 == null goto label44;

        $r10 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        $z4 = interfaceinvoke $r10.<org.apache.xml.utils.PrefixResolver: boolean handlesNullPrefixes()>();

        if $z4 == 0 goto label44;

     label41:
        specialinvoke r0.<org.apache.xpath.compiler.Lexer: int mapNSTokens(java.lang.String,int,int,int)>(r1, i3, i4, i2);

     label42:
        $r6 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $i9 = virtualinvoke $r6.<org.apache.xpath.compiler.Compiler: int getTokenQueueSize()>();

        if $i9 != 0 goto label45;

        $r8 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        virtualinvoke $r8.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EMPTY_EXPRESSION", null);

     label43:
        $r7 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r7.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = 0;

        return;

     label44:
        $r11 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, i2);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r11);

        goto label42;

     label45:
        if r2 == null goto label43;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void recordTokenString(java.util.Vector)>(r2);

        goto label43;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.compiler.Lexer: int TARGETEXTRA> = 10000;

        return;
    }
}
