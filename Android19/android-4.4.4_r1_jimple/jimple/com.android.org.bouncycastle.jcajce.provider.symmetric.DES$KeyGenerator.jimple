public class com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator extends com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator
{

    public void <init>()
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator r0;
        com.android.org.bouncycastle.crypto.generators.DESKeyGenerator $r1;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator;

        $r1 = new com.android.org.bouncycastle.crypto.generators.DESKeyGenerator;

        specialinvoke $r1.<com.android.org.bouncycastle.crypto.generators.DESKeyGenerator: void <init>()>();

        specialinvoke r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: void <init>(java.lang.String,int,com.android.org.bouncycastle.crypto.CipherKeyGenerator)>("DES", 64, $r1);

        return;
    }

    protected javax.crypto.SecretKey engineGenerateKey()
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator r0;
        boolean $z0;
        javax.crypto.spec.SecretKeySpec $r1;
        com.android.org.bouncycastle.crypto.CipherKeyGenerator $r2, $r7;
        byte[] $r3;
        java.lang.String $r4;
        com.android.org.bouncycastle.crypto.KeyGenerationParameters $r5;
        java.security.SecureRandom $r6;
        int $i0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator;

        $z0 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator: boolean uninitialised>;

        if $z0 == 0 goto label1;

        $r7 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator: com.android.org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r5 = new com.android.org.bouncycastle.crypto.KeyGenerationParameters;

        $r6 = new java.security.SecureRandom;

        specialinvoke $r6.<java.security.SecureRandom: void <init>()>();

        $i0 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator: int defaultKeySize>;

        specialinvoke $r5.<com.android.org.bouncycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r6, $i0);

        virtualinvoke $r7.<com.android.org.bouncycastle.crypto.CipherKeyGenerator: void init(com.android.org.bouncycastle.crypto.KeyGenerationParameters)>($r5);

        r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator: boolean uninitialised> = 0;

     label1:
        $r1 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator: com.android.org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r3 = virtualinvoke $r2.<com.android.org.bouncycastle.crypto.CipherKeyGenerator: byte[] generateKey()>();

        $r4 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator: java.lang.String algName>;

        specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r4);

        return $r1;
    }

    protected void engineInit(int, java.security.SecureRandom)
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator r0;
        int i0;
        java.security.SecureRandom r1;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: void engineInit(int,java.security.SecureRandom)>(i0, r1);

        return;
    }
}
