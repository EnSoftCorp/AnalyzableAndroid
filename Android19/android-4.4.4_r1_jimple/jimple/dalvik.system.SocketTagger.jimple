public abstract class dalvik.system.SocketTagger extends java.lang.Object
{
    private static dalvik.system.SocketTagger tagger;

    static void <clinit>()
    {
        dalvik.system.SocketTagger$1 $r0;

        $r0 = new dalvik.system.SocketTagger$1;

        specialinvoke $r0.<dalvik.system.SocketTagger$1: void <init>()>();

        <dalvik.system.SocketTagger: dalvik.system.SocketTagger tagger> = $r0;

        return;
    }

    public void <init>()
    {
        dalvik.system.SocketTagger r0;

        r0 := @this: dalvik.system.SocketTagger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static dalvik.system.SocketTagger get()
    {
        java.lang.Throwable r0, $r2;
        dalvik.system.SocketTagger r1;

        entermonitor class "dalvik/system/SocketTagger";

     label1:
        r1 = <dalvik.system.SocketTagger: dalvik.system.SocketTagger tagger>;

     label2:
        exitmonitor class "dalvik/system/SocketTagger";

        return r1;

     label3:
        $r2 := @caughtexception;

        r0 = $r2;

        exitmonitor class "dalvik/system/SocketTagger";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void set(dalvik.system.SocketTagger)
    {
        dalvik.system.SocketTagger r0;
        java.lang.Throwable r1, $r3;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: dalvik.system.SocketTagger;

        entermonitor class "dalvik/system/SocketTagger";

        if r0 != null goto label3;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("tagger == null");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor class "dalvik/system/SocketTagger";

        throw r1;

     label3:
        <dalvik.system.SocketTagger: dalvik.system.SocketTagger tagger> = r0;

     label4:
        exitmonitor class "dalvik/system/SocketTagger";

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public abstract void tag(java.io.FileDescriptor) throws java.net.SocketException;

    public final void tag(java.net.Socket) throws java.net.SocketException
    {
        dalvik.system.SocketTagger r0;
        java.net.Socket r1;
        boolean $z0;
        java.io.FileDescriptor $r2;

        r0 := @this: dalvik.system.SocketTagger;

        r1 := @parameter0: java.net.Socket;

        $z0 = virtualinvoke r1.<java.net.Socket: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r1.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        virtualinvoke r0.<dalvik.system.SocketTagger: void tag(java.io.FileDescriptor)>($r2);

     label1:
        return;
    }

    public abstract void untag(java.io.FileDescriptor) throws java.net.SocketException;

    public final void untag(java.net.Socket) throws java.net.SocketException
    {
        dalvik.system.SocketTagger r0;
        java.net.Socket r1;
        boolean $z0;
        java.io.FileDescriptor $r2;

        r0 := @this: dalvik.system.SocketTagger;

        r1 := @parameter0: java.net.Socket;

        $z0 = virtualinvoke r1.<java.net.Socket: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r1.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        virtualinvoke r0.<dalvik.system.SocketTagger: void untag(java.io.FileDescriptor)>($r2);

     label1:
        return;
    }
}
