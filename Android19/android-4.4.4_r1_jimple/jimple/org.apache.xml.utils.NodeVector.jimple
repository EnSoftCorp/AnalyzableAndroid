public class org.apache.xml.utils.NodeVector extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    static final long serialVersionUID;
    private int m_blocksize;
    protected int m_firstFree;
    private int[] m_map;
    private int m_mapSize;

    public void <init>()
    {
        org.apache.xml.utils.NodeVector r0;

        r0 := @this: org.apache.xml.utils.NodeVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.NodeVector: int m_blocksize> = 32;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = 0;

        return;
    }

    public void <init>(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.NodeVector: int m_blocksize> = i0;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = 0;

        return;
    }

    public void RemoveAllNoClear()
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r1 != null goto label1;

        return;

     label1:
        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = 0;

        return;
    }

    public void addElement(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        int[] r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i3 = 1 + $i1;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        if $i3 < $i2 goto label1;

        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r3 != null goto label2;

        $i13 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $r5 = newarray (int)[$i13];

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = $r5;

        $i14 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i14;

     label1:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $r2[$i4] = i0;

        $i5 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i6 = 1 + $i5;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i6;

        return;

     label2:
        $i8 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $i7 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i9 = $i8 + $i7;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i9;

        $i10 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        r1 = newarray (int)[$i10];

        $r4 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i11 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i12 = 1 + $i11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i12);

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = r1;

        goto label1;
    }

    public void appendNodes(org.apache.xml.utils.NodeVector)
    {
        org.apache.xml.utils.NodeVector r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        int[] r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.xml.utils.NodeVector;

        r1 := @parameter0: org.apache.xml.utils.NodeVector;

        i0 = virtualinvoke r1.<org.apache.xml.utils.NodeVector: int size()>();

        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r3 != null goto label2;

        $i15 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i14 = i0 + $i15;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i14;

        $i16 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $r7 = newarray (int)[$i16];

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = $r7;

     label1:
        $r5 = r1.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r4 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, $i4, i0);

        $i5 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i6 = i0 + $i5;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i6;

        return;

     label2:
        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i3 = i0 + $i1;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        if $i3 < $i2 goto label1;

        $i10 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $i7 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i8 = i0 + $i7;

        $i9 = $i10 + $i8;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i9;

        $i12 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        r2 = newarray (int)[$i12];

        $r6 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i11 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i13 = i0 + $i11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, $i13);

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = r2;

        goto label1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xml.utils.NodeVector r0, r1;
        java.lang.Object $r2;
        int[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (org.apache.xml.utils.NodeVector) $r2;

        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r3 == null goto label1;

        $r5 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r4 = r1.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r5 != $r4 goto label1;

        $r6 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i0 = lengthof $r6;

        $r7 = newarray (int)[$i0];

        r1.<org.apache.xml.utils.NodeVector: int[] m_map> = $r7;

        $r10 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r9 = r1.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r8 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i1 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i1);

     label1:
        return r1;
    }

    public boolean contains(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, i1, $i2, $i3;
        int[] $r1, $r2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r1 != null goto label2;

     label1:
        return 0;

     label2:
        i1 = 0;

     label3:
        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i1 >= $i2 goto label1;

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i3 = $r2[i1];

        if $i3 != i0 goto label4;

        return 1;

     label4:
        i1 = i1 + 1;

        goto label3;
    }

    public int elementAt(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, $i1;
        int[] $r1, $r2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i1 = $r2[i0];

        return $i1;
    }

    public int indexOf(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, i1, $i2, $i3;
        int[] $r1, $r2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r1 != null goto label2;

        i1 = -1;

     label1:
        return i1;

     label2:
        i1 = 0;

     label3:
        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i1 >= $i2 goto label4;

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i3 = $r2[i1];

        if $i3 == i0 goto label1;

        i1 = i1 + 1;

        goto label3;

     label4:
        return -1;
    }

    public int indexOf(int, int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, i1, i2, $i3, $i4;
        int[] $r1, $r2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r1 != null goto label2;

        i2 = -1;

     label1:
        return i2;

     label2:
        i2 = i1;

     label3:
        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i2 >= $i3 goto label4;

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i4 = $r2[i2];

        if $i4 == i0 goto label1;

        i2 = i2 + 1;

        goto label3;

     label4:
        return -1;
    }

    public void insertElementAt(int, int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        int[] r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r2 != null goto label3;

        $i18 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $r7 = newarray (int)[$i18];

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = $r7;

        $i19 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i19;

     label1:
        $i5 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i6 = -1 + $i5;

        if i1 > $i6 goto label2;

        $r4 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r5 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i11 = i1 + 1;

        $i9 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i10 = $i9 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i1, $r5, $i11, $i10);

     label2:
        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r3[i1] = i0;

        $i7 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i8 = 1 + $i7;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i8;

        return;

     label3:
        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i4 = 1 + $i2;

        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        if $i4 < $i3 goto label1;

        $i12 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $i13 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i15 = $i12 + $i13;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i15;

        $i14 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        r1 = newarray (int)[$i14];

        $r6 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i17 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i16 = 1 + $i17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r1, 0, $i16);

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = r1;

        goto label1;
    }

    public void insertInOrder(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, i1, $i2, $i3;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i1 >= $i2 goto label3;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i3 = $r1[i1];

        if i0 >= $i3 goto label2;

        virtualinvoke r0.<org.apache.xml.utils.NodeVector: void insertElementAt(int,int)>(i0, i1);

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<org.apache.xml.utils.NodeVector: void addElement(int)>(i0);

        return;
    }

    public final int peepOrNull()
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r1 == null goto label1;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i2 = -1 + $i1;

        $i3 = $r2[$i2];

        return $i3;

     label1:
        return -1;
    }

    public final int peepTail()
    {
        org.apache.xml.utils.NodeVector r0;
        int $i0, $i1, $i2;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = -1 + $i0;

        $i2 = $r1[$i1];

        return $i2;
    }

    public final int peepTailSub1()
    {
        org.apache.xml.utils.NodeVector r0;
        int $i0, $i1, $i2;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = -2 + $i0;

        $i2 = $r1[$i1];

        return $i2;
    }

    public final int pop()
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, $i1, $i2, $i3, $i4;
        int[] $r1, $r2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i2 = -1 + $i1;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i2;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        i0 = $r1[$i3];

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $r2[$i4] = -1;

        return i0;
    }

    public final int popAndTop()
    {
        org.apache.xml.utils.NodeVector r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r1, $r2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = -1 + $i0;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i1;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $r1[$i2] = -1;

        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if $i3 != 0 goto label1;

        return -1;

     label1:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i5 = -1 + $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final void popPair()
    {
        org.apache.xml.utils.NodeVector r0;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r1, $r2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = -2 + $i0;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i1;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $r1[$i2] = -1;

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i4 = 1 + $i3;

        $r2[$i4] = -1;

        return;
    }

    public final void popQuick()
    {
        org.apache.xml.utils.NodeVector r0;
        int $i0, $i1, $i2;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = -1 + $i0;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i1;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $r1[$i2] = -1;

        return;
    }

    public final void push(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        int[] r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i3 = i1 + 1;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        if $i3 < $i2 goto label1;

        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r3 != null goto label2;

        $i10 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $r5 = newarray (int)[$i10];

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = $r5;

        $i11 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i11;

     label1:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r2[i1] = i0;

        $i4 = i1 + 1;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i4;

        return;

     label2:
        $i6 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $i5 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i7 = $i6 + $i5;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i7;

        $i8 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        r1 = newarray (int)[$i8];

        $r4 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i9 = i1 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i9);

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = r1;

        goto label1;
    }

    public final void pushPair(int, int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        int[] r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r2 != null goto label2;

        $i15 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $r6 = newarray (int)[$i15];

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = $r6;

        $i16 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i16;

     label1:
        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i5 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $r3[$i5] = i0;

        $r4 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i6 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i7 = 1 + $i6;

        $r4[$i7] = i1;

        $i8 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i9 = 2 + $i8;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i9;

        return;

     label2:
        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i4 = 2 + $i2;

        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        if $i4 < $i3 goto label1;

        $i12 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $i10 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i11 = $i12 + $i10;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i11;

        $i14 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        r1 = newarray (int)[$i14];

        $r5 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i13 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i13);

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = r1;

        goto label1;
    }

    public void removeAllElements()
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, $i1;
        int[] $r1, $r2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r1 != null goto label1;

        return;

     label1:
        i0 = 0;

     label2:
        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i0 >= $i1 goto label3;

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r2[i0] = -1;

        i0 = i0 + 1;

        goto label2;

     label3:
        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = 0;

        return;
    }

    public boolean removeElement(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        int[] $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r1 != null goto label2;

     label1:
        return 0;

     label2:
        i1 = 0;

     label3:
        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i1 >= $i2 goto label1;

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i3 = $r2[i1];

        if $i3 != i0 goto label6;

        $i4 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i1 <= $i4 goto label5;

        $r5 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i10 = i1 + 1;

        $r4 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i9 = i1 - 1;

        $i7 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i8 = $i7 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i10, $r4, $i9, $i8);

     label4:
        $i5 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i6 = -1 + $i5;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i6;

        return 1;

     label5:
        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r3[i1] = -1;

        goto label4;

     label6:
        i1 = i1 + 1;

        goto label3;
    }

    public void removeElementAt(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r1 != null goto label1;

        return;

     label1:
        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i0 <= $i1 goto label2;

        $r4 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i5 = i0 + 1;

        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i4 = i0 - 1;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i3 = $i2 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i5, $r3, $i4, $i3);

        return;

     label2:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r2[i0] = -1;

        return;
    }

    public void setElementAt(int, int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, i1, $i2, $i3;
        int[] $r1, $r2, $r3;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r1 != null goto label1;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $r3 = newarray (int)[$i2];

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = $r3;

        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i3;

     label1:
        if i1 != -1 goto label2;

        virtualinvoke r0.<org.apache.xml.utils.NodeVector: void addElement(int)>(i0);

     label2:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r2[i1] = i0;

        return;
    }

    public final void setTail(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i2 = -1 + $i1;

        $r1[$i2] = i0;

        return;
    }

    public final void setTailSub1(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i2 = -2 + $i1;

        $r1[$i2] = i0;

        return;
    }

    public int size()
    {
        org.apache.xml.utils.NodeVector r0;
        int $i0;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        return $i0;
    }

    public void sort() throws java.lang.Exception
    {
        org.apache.xml.utils.NodeVector r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = -1 + $i0;

        virtualinvoke r0.<org.apache.xml.utils.NodeVector: void sort(int[],int,int)>($r1, 0, $i1);

        return;
    }

    public void sort(int[], int, int) throws java.lang.Exception
    {
        org.apache.xml.utils.NodeVector r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;

        r0 := @this: org.apache.xml.utils.NodeVector;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0;

        i3 = i1;

        if i2 < i3 goto label2;

     label1:
        return;

     label2:
        $i7 = i3 - 1;

        if i2 != $i7 goto label3;

        $i21 = r1[i2];

        $i18 = r1[i3];

        if $i21 <= $i18 goto label1;

        i6 = r1[i2];

        $i20 = r1[i3];

        r1[i2] = $i20;

        r1[i3] = i6;

        return;

     label3:
        $i8 = i2 + i3;

        $i9 = $i8 / 2;

        i4 = r1[$i9];

        $i10 = i2 + i3;

        $i12 = $i10 / 2;

        $i11 = r1[i3];

        r1[$i12] = $i11;

        r1[i3] = i4;

     label4:
        if i2 >= i3 goto label8;

     label5:
        $i17 = r1[i2];

        if $i17 > i4 goto label6;

        if i2 >= i3 goto label6;

        i2 = i2 + 1;

        goto label5;

     label6:
        $i16 = r1[i3];

        if i4 > $i16 goto label7;

        if i2 >= i3 goto label7;

        i3 = i3 + -1;

        goto label6;

     label7:
        if i2 >= i3 goto label4;

        i5 = r1[i2];

        $i19 = r1[i3];

        r1[i2] = $i19;

        r1[i3] = i5;

        goto label4;

     label8:
        $i13 = r1[i3];

        r1[i1] = $i13;

        r1[i3] = i4;

        $i15 = i2 - 1;

        virtualinvoke r0.<org.apache.xml.utils.NodeVector: void sort(int[],int,int)>(r1, i0, $i15);

        $i14 = i3 + 1;

        virtualinvoke r0.<org.apache.xml.utils.NodeVector: void sort(int[],int,int)>(r1, $i14, i1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xml.utils.NodeVector: long serialVersionUID> = -713473092200731870L;

        return;
    }
}
