public class android.app.admin.DevicePolicyManager extends java.lang.Object
{
    public static final java.lang.String ACTION_ADD_DEVICE_ADMIN;
    public static final java.lang.String ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED;
    public static final java.lang.String ACTION_SET_NEW_PASSWORD;
    public static final java.lang.String ACTION_START_ENCRYPTION;
    public static final int ENCRYPTION_STATUS_ACTIVATING;
    public static final int ENCRYPTION_STATUS_ACTIVE;
    public static final int ENCRYPTION_STATUS_INACTIVE;
    public static final int ENCRYPTION_STATUS_UNSUPPORTED;
    public static final java.lang.String EXTRA_ADD_EXPLANATION;
    public static final java.lang.String EXTRA_DEVICE_ADMIN;
    public static final int KEYGUARD_DISABLE_FEATURES_ALL;
    public static final int KEYGUARD_DISABLE_FEATURES_NONE;
    public static final int KEYGUARD_DISABLE_SECURE_CAMERA;
    public static final int KEYGUARD_DISABLE_WIDGETS_ALL;
    public static final int PASSWORD_QUALITY_ALPHABETIC;
    public static final int PASSWORD_QUALITY_ALPHANUMERIC;
    public static final int PASSWORD_QUALITY_BIOMETRIC_WEAK;
    public static final int PASSWORD_QUALITY_COMPLEX;
    public static final int PASSWORD_QUALITY_NUMERIC;
    public static final int PASSWORD_QUALITY_SOMETHING;
    public static final int PASSWORD_QUALITY_UNSPECIFIED;
    public static final int RESET_PASSWORD_REQUIRE_ENTRY;
    private static java.lang.String TAG;
    public static final int WIPE_EXTERNAL_STORAGE;
    private final android.content.Context mContext;
    private final android.app.admin.IDevicePolicyManager mService;

    static void <clinit>()
    {
        <android.app.admin.DevicePolicyManager: int WIPE_EXTERNAL_STORAGE> = 1;

        <android.app.admin.DevicePolicyManager: int RESET_PASSWORD_REQUIRE_ENTRY> = 1;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_UNSPECIFIED> = 0;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_SOMETHING> = 65536;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_NUMERIC> = 131072;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_COMPLEX> = 393216;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_BIOMETRIC_WEAK> = 32768;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_ALPHANUMERIC> = 327680;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_ALPHABETIC> = 262144;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_WIDGETS_ALL> = 1;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_SECURE_CAMERA> = 2;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FEATURES_NONE> = 0;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FEATURES_ALL> = 2147483647;

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_DEVICE_ADMIN> = "android.app.extra.DEVICE_ADMIN";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_ADD_EXPLANATION> = "android.app.extra.ADD_EXPLANATION";

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_UNSUPPORTED> = 0;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_INACTIVE> = 1;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVE> = 3;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVATING> = 2;

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_START_ENCRYPTION> = "android.app.action.START_ENCRYPTION";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_SET_NEW_PASSWORD> = "android.app.action.SET_NEW_PASSWORD";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED> = "android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_ADD_DEVICE_ADMIN> = "android.app.action.ADD_DEVICE_ADMIN";

        <android.app.admin.DevicePolicyManager: java.lang.String TAG> = "DevicePolicyManager";

        return;
    }

    private void <init>(android.content.Context, android.os.Handler)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Context r1;
        android.os.Handler r2;
        android.os.IBinder $r3;
        android.app.admin.IDevicePolicyManager $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext> = r1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("device_policy");

        $r4 = staticinvoke <android.app.admin.IDevicePolicyManager$Stub: android.app.admin.IDevicePolicyManager asInterface(android.os.IBinder)>($r3);

        r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService> = $r4;

        return;
    }

    public static android.app.admin.DevicePolicyManager create(android.content.Context, android.os.Handler)
    {
        android.content.Context r0;
        android.os.Handler r1;
        android.app.admin.DevicePolicyManager r2, $r3;
        android.app.admin.IDevicePolicyManager $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Handler;

        $r3 = new android.app.admin.DevicePolicyManager;

        specialinvoke $r3.<android.app.admin.DevicePolicyManager: void <init>(android.content.Context,android.os.Handler)>(r0, r1);

        r2 = $r3;

        $r4 = r2.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label1;

        return r2;

     label1:
        return null;
    }

    public static boolean hasAnyCaCertsInstalled()
    {
        java.util.Set r0;
        com.android.org.conscrypt.TrustedCertificateStore $r1;
        boolean $z0;

        $r1 = new com.android.org.conscrypt.TrustedCertificateStore;

        specialinvoke $r1.<com.android.org.conscrypt.TrustedCertificateStore: void <init>()>();

        r0 = virtualinvoke $r1.<com.android.org.conscrypt.TrustedCertificateStore: java.util.Set userAliases()>();

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.List getActiveAdmins()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r5;
        java.util.List r2;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r2 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: java.util.List getActiveAdmins(int)>($i0);

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r1);

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.admin.DeviceAdminInfo getAdminInfo(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.content.pm.PackageManager$NameNotFoundException r2, $r14;
        android.content.pm.ActivityInfo r3;
        android.content.pm.ResolveInfo r4, $r10;
        android.app.admin.DeviceAdminInfo r5, $r11;
        java.io.IOException r6, $r19;
        org.xmlpull.v1.XmlPullParserException r7, $r26;
        android.content.Context $r8, $r12;
        android.content.pm.PackageManager $r9;
        java.lang.StringBuilder $r13, $r15, $r18, $r21, $r22, $r23, $r25, $r27, $r30;
        java.lang.String $r16, $r17, $r20, $r24, $r28, $r29;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

     label1:
        $r8 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r3 = virtualinvoke $r9.<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>(r1, 128);

     label2:
        $r10 = new android.content.pm.ResolveInfo;

        specialinvoke $r10.<android.content.pm.ResolveInfo: void <init>()>();

        r4 = $r10;

        r4.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = r3;

     label3:
        $r11 = new android.app.admin.DeviceAdminInfo;

        $r12 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        specialinvoke $r11.<android.app.admin.DeviceAdminInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>($r12, r4);

        r5 = $r11;

     label4:
        return r5;

     label5:
        $r14 := @caughtexception;

        r2 = $r14;

        $r16 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to retrieve device policy ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r16, $r17, r2);

        return null;

     label6:
        $r26 := @caughtexception;

        r7 = $r26;

        $r29 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse device policy ");

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r29, $r28, r7);

        return null;

     label7:
        $r19 := @caughtexception;

        r6 = $r19;

        $r20 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse device policy ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r20, $r24, r6);

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label5;
        catch org.xmlpull.v1.XmlPullParserException from label3 to label4 with label6;
        catch java.io.IOException from label3 to label4 with label7;
    }

    public boolean getCameraDisabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>(r1, $i0);

        return $z0;
    }

    public boolean getCameraDisabled(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0;
        android.os.RemoteException r2, $r5;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>(r1, i0);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getCurrentFailedPasswordAttempts()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r4;
        int i0, $i1;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        i0 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: int getCurrentFailedPasswordAttempts(int)>($i1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getDeviceOwner()
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r2, $r6;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r2 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: java.lang.String getDeviceOwner()>();

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "Failed to get device owner");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getDeviceOwnerName()
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r2, $r6;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r2 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: java.lang.String getDeviceOwnerName()>();

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "Failed to get device owner");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName getGlobalProxyAdmin()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r5;
        android.content.ComponentName r2;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r2 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin(int)>($i0);

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r1);

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getKeyguardDisabledFeatures(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getKeyguardDisabledFeatures(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMaximumFailedPasswordsForWipe(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getMaximumFailedPasswordsForWipe(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getMaximumTimeToLock(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0;
        long $l1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $l1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)>(r1, $i0);

        return $l1;
    }

    public long getMaximumTimeToLock(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0;
        android.os.RemoteException r2, $r5;
        long l1;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        l1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)>(r1, i0);

     label2:
        return l1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getPasswordExpiration(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        long l0;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i1;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        l0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: long getPasswordExpiration(android.content.ComponentName,int)>(r1, $i1);

     label2:
        return l0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getPasswordExpirationTimeout(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        long l0;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i1;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        l0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName,int)>(r1, $i1);

     label2:
        return l0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordHistoryLength(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordHistoryLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMaximumLength(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        return 16;
    }

    public int getPasswordMinimumLength(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumLetters(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumLetters(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumLowerCase(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumLowerCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumNonLetter(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumNonLetter(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumNumeric(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumNumeric(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumSymbols(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumSymbols(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumUpperCase(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumUpperCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordQuality(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordQuality(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)>(r1, i0);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void getRemoveWarning(android.content.ComponentName, android.os.RemoteCallback)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteCallback r2;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        int $i0;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.RemoteCallback;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label2;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>(r1, r2, $i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getStorageEncryption(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName,int)>(r1, $i0);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getStorageEncryptionStatus()
    {
        android.app.admin.DevicePolicyManager r0;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus(int)>($i0);

        return $i1;
    }

    public int getStorageEncryptionStatus(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, i1;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: int getStorageEncryptionStatus(int)>(i0);

     label2:
        return i1;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasCaCertInstalled(byte[])
    {
        android.app.admin.DevicePolicyManager r0;
        byte[] r1;
        com.android.org.conscrypt.TrustedCertificateStore r2, $r5;
        java.security.cert.CertificateException r3, $r10;
        java.lang.String r4, $r11;
        boolean z0;
        java.security.cert.CertificateFactory $r6;
        java.io.ByteArrayInputStream $r7;
        java.security.cert.Certificate $r8;
        java.security.cert.X509Certificate $r9;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: byte[];

        $r5 = new com.android.org.conscrypt.TrustedCertificateStore;

        specialinvoke $r5.<com.android.org.conscrypt.TrustedCertificateStore: void <init>()>();

        r2 = $r5;

     label1:
        $r6 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r8 = virtualinvoke $r6.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r7);

        $r9 = (java.security.cert.X509Certificate) $r8;

        r4 = virtualinvoke r2.<com.android.org.conscrypt.TrustedCertificateStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)>($r9);

     label2:
        z0 = 0;

        if r4 == null goto label3;

        z0 = 1;

     label3:
        return z0;

     label4:
        $r10 := @caughtexception;

        r3 = $r10;

        $r11 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "Could not parse certificate", r3);

        return 0;

        catch java.security.cert.CertificateException from label1 to label2 with label4;
    }

    public boolean hasGrantedPolicy(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean installCaCert(byte[])
    {
        android.app.admin.DevicePolicyManager r0;
        byte[] r1;
        android.os.RemoteException r2, $r5;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: byte[];

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean installCaCert(byte[])>(r1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isActivePasswordSufficient()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r4;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        int $i0;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        z0 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: boolean isActivePasswordSufficient(int)>($i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAdminActive(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean isAdminActive(android.content.ComponentName,int)>(r1, $i0);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDeviceOwner(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerApp(java.lang.String)>(r1);

        return $z0;
    }

    public boolean isDeviceOwnerApp(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r6;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean isDeviceOwner(java.lang.String)>(r1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "Failed to check device owner");

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void lockNow()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label2;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void lockNow()>();

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean packageHasActiveAdmins(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r6;
        android.os.RemoteException r2, $r5;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)>(r1, $i0);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeActiveAdmin(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void removeActiveAdmin(android.content.ComponentName,int)>(r1, $i0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportFailedPasswordAttempt(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label2;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void reportFailedPasswordAttempt(int)>(i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportSuccessfulPasswordAttempt(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label2;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void reportSuccessfulPasswordAttempt(int)>(i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean resetPassword(java.lang.String, int)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r6;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r3, $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean resetPassword(java.lang.String,int,int)>(r1, i0, $i1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setActiveAdmin(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>(r1, z0, $i0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setActivePasswordState(int, int, int, int, int, int, int, int, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        i8 := @parameter8: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label2;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6, i7, i8);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCameraDisabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean,int)>(r1, z0, $i0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setDeviceOwner(java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean setDeviceOwner(java.lang.String,java.lang.String)>(r1, null);

        return $z0;
    }

    public boolean setDeviceOwner(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r2, $r7;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean setDeviceOwner(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        return z0;

     label3:
        $r6 := @caughtexception;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "Failed to set device owner");

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName setGlobalProxy(android.content.ComponentName, java.net.Proxy, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, $r25;
        java.net.Proxy r2, $r13;
        java.util.List r3;
        android.os.RemoteException r4, $r32;
        java.lang.String r5, r6, r8, r11, r12, $r22, $r24, $r29, $r30;
        java.net.InetSocketAddress r7;
        int i0, $i1;
        java.lang.StringBuilder r9, $r18, $r19, $r20, $r21, $r23;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r10;
        android.app.admin.IDevicePolicyManager $r14, $r27;
        java.net.Proxy$Type $r15, $r16;
        java.net.SocketAddress $r17;
        java.lang.Object $r26;
        java.lang.IllegalArgumentException $r28;
        java.lang.NullPointerException $r31;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.net.Proxy;

        r3 := @parameter2: java.util.List;

        if r2 != null goto label01;

        $r31 = new java.lang.NullPointerException;

        specialinvoke $r31.<java.lang.NullPointerException: void <init>()>();

        throw $r31;

     label01:
        $r14 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r14 == null goto label07;

     label02:
        $r13 = <java.net.Proxy: java.net.Proxy NO_PROXY>;

        $z1 = virtualinvoke r2.<java.net.Proxy: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label05;

     label03:
        r5 = null;

        r6 = null;

     label04:
        $r27 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r25 = interfaceinvoke $r27.<android.app.admin.IDevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)>(r1, r5, r6, $i1);

        return $r25;

     label05:
        $r15 = virtualinvoke r2.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r16 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        $z2 = virtualinvoke $r15.<java.net.Proxy$Type: boolean equals(java.lang.Object)>($r16);

        if $z2 != 0 goto label08;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r28;

     label06:
        $r32 := @caughtexception;

        r4 = $r32;

        $r30 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r30, "Failed talking with device policy service", r4);

     label07:
        return null;

     label08:
        $r17 = virtualinvoke r2.<java.net.Proxy: java.net.SocketAddress address()>();

        r7 = (java.net.InetSocketAddress) $r17;

        r8 = virtualinvoke r7.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        i0 = virtualinvoke r7.<java.net.InetSocketAddress: int getPort()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r22 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        r5 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        if r3 != null goto label12;

        r6 = "";

     label10:
        $r24 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        staticinvoke <android.net.Proxy: void validate(java.lang.String,java.lang.String,java.lang.String)>(r8, $r24, r6);

     label11:
        goto label04;

     label12:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        r9 = $r23;

     label13:
        z0 = 1;

     label14:
        r10 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z3 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label20;

        $r26 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r26;

     label16:
        if z0 != 0 goto label22;

     label17:
        r9 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label18:
        $r29 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>();

        r9 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

     label19:
        goto label15;

     label20:
        r11 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label21:
        r6 = r11;

        goto label10;

     label22:
        z0 = 0;

        goto label18;

        catch android.os.RemoteException from label02 to label03 with label06;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch android.os.RemoteException from label05 to label06 with label06;
        catch android.os.RemoteException from label08 to label09 with label06;
        catch android.os.RemoteException from label10 to label11 with label06;
        catch android.os.RemoteException from label12 to label13 with label06;
        catch android.os.RemoteException from label14 to label15 with label06;
        catch android.os.RemoteException from label15 to label16 with label06;
        catch android.os.RemoteException from label17 to label18 with label06;
        catch android.os.RemoteException from label18 to label19 with label06;
        catch android.os.RemoteException from label20 to label21 with label06;
    }

    public void setKeyguardDisabledFeatures(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMaximumFailedPasswordsForWipe(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMaximumTimeToLock(android.content.ComponentName, long)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        long l0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i1;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long,int)>(r1, l0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordExpirationTimeout(android.content.ComponentName, long)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        long l0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i1;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)>(r1, l0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordHistoryLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumLetters(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumLowerCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumNonLetter(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumNumeric(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumSymbols(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumUpperCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordQuality(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setStorageEncryption(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        android.os.RemoteException r2, $r5;
        int i0, $i1;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        i0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean,int)>(r1, z0, $i1);

     label2:
        return i0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void uninstallCaCert(byte[])
    {
        android.app.admin.DevicePolicyManager r0;
        byte[] r1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: byte[];

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void uninstallCaCert(byte[])>(r1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void wipeData(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, $i1;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label2;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void wipeData(int,int)>(i0, $i1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
