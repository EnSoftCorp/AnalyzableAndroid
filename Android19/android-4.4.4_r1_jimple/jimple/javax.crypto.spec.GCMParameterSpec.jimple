public class javax.crypto.spec.GCMParameterSpec extends java.lang.Object implements java.security.spec.AlgorithmParameterSpec
{
    private final byte[] iv;
    private final int tagLen;

    public void <init>(int, byte[])
    {
        javax.crypto.spec.GCMParameterSpec r0;
        int i0;
        byte[] r1, $r3;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r4, $r5;

        r0 := @this: javax.crypto.spec.GCMParameterSpec;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tag should be a non-negative integer");

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("iv == null");

        throw $r4;

     label2:
        r0.<javax.crypto.spec.GCMParameterSpec: int tagLen> = i0;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        r0.<javax.crypto.spec.GCMParameterSpec: byte[] iv> = $r3;

        return;
    }

    public void <init>(int, byte[], int, int)
    {
        javax.crypto.spec.GCMParameterSpec r0;
        int i0, i1, i2, $i3, $i4;
        byte[] r1, $r3;
        java.lang.ArrayIndexOutOfBoundsException r2, $r6;
        java.lang.IllegalArgumentException $r4, $r5, $r7;

        r0 := @this: javax.crypto.spec.GCMParameterSpec;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tag should be a non-negative integer");

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("iv == null");

        throw $r4;

     label2:
        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i1, i2);

     label3:
        r0.<javax.crypto.spec.GCMParameterSpec: int tagLen> = i0;

        $i4 = i1 + i2;

        $r3 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r1, i1, $i4);

        r0.<javax.crypto.spec.GCMParameterSpec: byte[] iv> = $r3;

        return;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch java.lang.ArrayIndexOutOfBoundsException from label2 to label3 with label4;
    }

    public byte[] getIV()
    {
        javax.crypto.spec.GCMParameterSpec r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: javax.crypto.spec.GCMParameterSpec;

        $r1 = r0.<javax.crypto.spec.GCMParameterSpec: byte[] iv>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public int getTLen()
    {
        javax.crypto.spec.GCMParameterSpec r0;
        int $i0;

        r0 := @this: javax.crypto.spec.GCMParameterSpec;

        $i0 = r0.<javax.crypto.spec.GCMParameterSpec: int tagLen>;

        return $i0;
    }
}
