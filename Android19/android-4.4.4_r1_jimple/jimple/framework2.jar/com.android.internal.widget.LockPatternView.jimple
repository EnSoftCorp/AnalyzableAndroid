public class com.android.internal.widget.LockPatternView extends android.view.View
{
    private static final int ASPECT_LOCK_HEIGHT;
    private static final int ASPECT_LOCK_WIDTH;
    private static final int ASPECT_SQUARE;
    private static final float DRAG_THRESHHOLD;
    private static final int MILLIS_PER_CIRCLE_ANIMATING;
    private static final boolean PROFILE_DRAWING;
    private long mAnimatingPeriodStart;
    private final android.graphics.Matrix mArrowMatrix;
    private int mAspect;
    private android.graphics.Bitmap mBitmapArrowGreenUp;
    private android.graphics.Bitmap mBitmapArrowRedUp;
    private android.graphics.Bitmap mBitmapBtnDefault;
    private android.graphics.Bitmap mBitmapBtnTouched;
    private android.graphics.Bitmap mBitmapCircleDefault;
    private android.graphics.Bitmap mBitmapCircleGreen;
    private android.graphics.Bitmap mBitmapCircleRed;
    private int mBitmapHeight;
    private int mBitmapWidth;
    private final android.graphics.Matrix mCircleMatrix;
    private final android.graphics.Path mCurrentPath;
    private float mDiameterFactor;
    private boolean mDrawingProfilingStarted;
    private boolean mEnableHapticFeedback;
    private float mHitFactor;
    private float mInProgressX;
    private float mInProgressY;
    private boolean mInStealthMode;
    private boolean mInputEnabled;
    private final android.graphics.Rect mInvalidate;
    private com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener;
    private android.graphics.Paint mPaint;
    private android.graphics.Paint mPathPaint;
    private java.util.ArrayList mPattern;
    private com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode;
    private boolean[][] mPatternDrawLookup;
    private boolean mPatternInProgress;
    private float mSquareHeight;
    private float mSquareWidth;
    private final int mStrokeAlpha;
    private final android.graphics.Rect mTmpInvalidateRect;

    public void <init>(android.content.Context)
    {
        com.android.internal.widget.LockPatternView r0;
        android.content.Context r1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.android.internal.widget.LockPatternView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int[] r3, $r10, $r21;
        java.lang.String r4, $r22, $r23, $r24;
        android.graphics.Bitmap[] r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.graphics.Bitmap r6, $r34, $r35, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46;
        android.graphics.Paint $r7, $r8, $r25, $r26, $r28, $r29, $r30, $r32, $r36;
        java.util.ArrayList $r9;
        java.lang.Class $r11;
        java.lang.Object $r12;
        boolean[][] $r13;
        android.graphics.Path $r14;
        com.android.internal.widget.LockPatternView$DisplayMode $r15;
        android.graphics.Rect $r16, $r17;
        android.graphics.Matrix $r18, $r19;
        android.content.res.TypedArray $r20;
        boolean $z0, $z1, $z2;
        android.graphics.Paint$Style $r27;
        android.graphics.Paint$Cap $r31;
        android.graphics.Paint$Join $r33;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        r0.<com.android.internal.widget.LockPatternView: boolean mDrawingProfilingStarted> = 0;

        $r7 = new android.graphics.Paint;

        specialinvoke $r7.<android.graphics.Paint: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint> = $r7;

        $r8 = new android.graphics.Paint;

        specialinvoke $r8.<android.graphics.Paint: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(9);

        r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern> = $r9;

        $r10 = newarray (int)[2];

        $r10[0] = 3;

        $r10[1] = 3;

        r3 = $r10;

        $r11 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r12 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r11, r3);

        $r13 = (boolean[][]) $r12;

        r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup> = $r13;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = -1.0F;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = -1.0F;

        $r15 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r15;

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = 1;

        r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode> = 0;

        r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback> = 1;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 0;

        r0.<com.android.internal.widget.LockPatternView: float mDiameterFactor> = 0.1F;

        r0.<com.android.internal.widget.LockPatternView: int mStrokeAlpha> = 128;

        r0.<com.android.internal.widget.LockPatternView: float mHitFactor> = 0.6F;

        $r14 = new android.graphics.Path;

        specialinvoke $r14.<android.graphics.Path: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Path mCurrentPath> = $r14;

        $r17 = new android.graphics.Rect;

        specialinvoke $r17.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate> = $r17;

        $r16 = new android.graphics.Rect;

        specialinvoke $r16.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect> = $r16;

        $r19 = new android.graphics.Matrix;

        specialinvoke $r19.<android.graphics.Matrix: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mArrowMatrix> = $r19;

        $r18 = new android.graphics.Matrix;

        specialinvoke $r18.<android.graphics.Matrix: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mCircleMatrix> = $r18;

        $r21 = <com.android.internal.R$styleable: int[] LockPatternView>;

        $r20 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>(r2, $r21);

        r4 = virtualinvoke $r20.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        $r22 = "square";

        $z0 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label3;

        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 0;

     label1:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setClickable(boolean)>(1);

        $r25 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r25.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r28 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r28.<android.graphics.Paint: void setDither(boolean)>(1);

        $r29 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r29.<android.graphics.Paint: void setColor(int)>(-1);

        $r26 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r26.<android.graphics.Paint: void setAlpha(int)>(128);

        $r32 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $r27 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r32.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r27);

        $r30 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $r33 = <android.graphics.Paint$Join: android.graphics.Paint$Join ROUND>;

        virtualinvoke $r30.<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>($r33);

        $r36 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $r31 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>;

        virtualinvoke $r36.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r31);

        $r37 = specialinvoke r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap getBitmapFor(int)>(17301778);

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapBtnDefault> = $r37;

        $r34 = specialinvoke r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap getBitmapFor(int)>(17301780);

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapBtnTouched> = $r34;

        $r35 = specialinvoke r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap getBitmapFor(int)>(17302443);

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapCircleDefault> = $r35;

        $r40 = specialinvoke r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap getBitmapFor(int)>(17302445);

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapCircleGreen> = $r40;

        $r41 = specialinvoke r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap getBitmapFor(int)>(17302447);

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapCircleRed> = $r41;

        $r38 = specialinvoke r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap getBitmapFor(int)>(17302440);

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapArrowGreenUp> = $r38;

        $r39 = specialinvoke r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap getBitmapFor(int)>(17302441);

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapArrowRedUp> = $r39;

        r5 = newarray (android.graphics.Bitmap)[5];

        $r45 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapBtnDefault>;

        r5[0] = $r45;

        $r44 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapBtnTouched>;

        r5[1] = $r44;

        $r43 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapCircleDefault>;

        r5[2] = $r43;

        $r42 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapCircleGreen>;

        r5[3] = $r42;

        $r46 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapCircleRed>;

        r5[4] = $r46;

        i0 = lengthof r5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label6;

        r6 = r5[i1];

        $i4 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        $i3 = virtualinvoke r6.<android.graphics.Bitmap: int getWidth()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i3);

        r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth> = $i2;

        $i7 = r0.<com.android.internal.widget.LockPatternView: int mBitmapHeight>;

        $i6 = virtualinvoke r6.<android.graphics.Bitmap: int getHeight()>();

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6);

        r0.<com.android.internal.widget.LockPatternView: int mBitmapHeight> = $i5;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r23 = "lock_width";

        $z1 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label4;

        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 1;

        goto label1;

     label4:
        $r24 = "lock_height";

        $z2 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label5;

        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 2;

        goto label1;

     label5:
        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 0;

        goto label1;

     label6:
        return;
    }

    private void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$Cell r1;
        boolean[][] $r2;
        int $i0, $i1;
        boolean[] $r3;
        java.util.ArrayList $r4;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$Cell;

        $r2 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $i0 = virtualinvoke r1.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $r3 = $r2[$i0];

        $i1 = virtualinvoke r1.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $r3[$i1] = 1;

        $r4 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyCellAdded()>();

        return;
    }

    private com.android.internal.widget.LockPatternView$Cell checkForNewHit(float, float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1;
        int i0, i1;
        boolean[][] $r1;
        boolean[] $r2;
        boolean $z0;
        com.android.internal.widget.LockPatternView$Cell $r3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getRowHit(float)>(f1);

        if i0 >= 0 goto label2;

     label1:
        return null;

     label2:
        i1 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getColumnHit(float)>(f0);

        if i1 < 0 goto label1;

        $r1 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $r2 = $r1[i0];

        $z0 = $r2[i1];

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <com.android.internal.widget.LockPatternView$Cell: com.android.internal.widget.LockPatternView$Cell of(int,int)>(i0, i1);

        return $r3;
    }

    private void clearPatternDrawLookup()
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1;
        boolean[][] $r1;
        boolean[] $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 = 0;

     label1:
        if i0 >= 3 goto label4;

        i1 = 0;

     label2:
        if i1 >= 3 goto label3;

        $r1 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $r2 = $r1[i0];

        $r2[i1] = 0;

        i1 = i1 + 1;

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }

    private com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float, float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1;
        byte b0, b7;
        com.android.internal.widget.LockPatternView$Cell r1, r3, r4;
        java.util.ArrayList r2;
        boolean z0, $z1, $z3;
        int i1, i2, i3, i4, i5, i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        boolean[][] $r5;
        boolean[] $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        b0 = -1;

        r1 = specialinvoke r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell checkForNewHit(float,float)>(f0, f1);

        if r1 == null goto label9;

        r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        z0 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>();

        r3 = null;

        if z0 != 0 goto label5;

        $i10 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $i11 = -1 + $i10;

        $r7 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>($i11);

        r4 = (com.android.internal.widget.LockPatternView$Cell) $r7;

        $i12 = r1.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $i13 = r4.<com.android.internal.widget.LockPatternView$Cell: int row>;

        i1 = $i12 - $i13;

        $i17 = r1.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $i16 = r4.<com.android.internal.widget.LockPatternView$Cell: int column>;

        i2 = $i17 - $i16;

        i3 = r4.<com.android.internal.widget.LockPatternView$Cell: int row>;

        i4 = r4.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $i14 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i14 != 2 goto label2;

        $i18 = staticinvoke <java.lang.Math: int abs(int)>(i2);

        if $i18 == 1 goto label2;

        i6 = r4.<com.android.internal.widget.LockPatternView$Cell: int row>;

        if i1 <= 0 goto label8;

        b7 = 1;

     label1:
        i3 = i6 + b7;

     label2:
        $i15 = staticinvoke <java.lang.Math: int abs(int)>(i2);

        if $i15 != 2 goto label4;

        $i19 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i19 == 1 goto label4;

        i5 = r4.<com.android.internal.widget.LockPatternView$Cell: int column>;

        if i2 <= 0 goto label3;

        b0 = 1;

     label3:
        i4 = i5 + b0;

     label4:
        r3 = staticinvoke <com.android.internal.widget.LockPatternView$Cell: com.android.internal.widget.LockPatternView$Cell of(int,int)>(i3, i4);

     label5:
        if r3 == null goto label6;

        $r5 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $i8 = r3.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $r6 = $r5[$i8];

        $i9 = r3.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $z3 = $r6[$i9];

        if $z3 != 0 goto label6;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)>(r3);

     label6:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)>(r1);

        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback>;

        if $z1 == 0 goto label7;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: boolean performHapticFeedback(int,int)>(1, 3);

     label7:
        return r1;

     label8:
        b7 = -1;

        goto label1;

     label9:
        return null;
    }

    private void drawArrow(android.graphics.Canvas, float, float, com.android.internal.widget.LockPatternView$Cell, com.android.internal.widget.LockPatternView$Cell)
    {
        com.android.internal.widget.LockPatternView r0;
        android.graphics.Canvas r1;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28;
        com.android.internal.widget.LockPatternView$Cell r2, r3;
        boolean z0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        android.graphics.Bitmap r4;
        com.android.internal.widget.LockPatternView$DisplayMode $r5, $r6;
        double $d0, $d1, $d2, $d3, $d4;
        android.graphics.Matrix $r7, $r8, $r9, $r10, $r11, $r12, $r14;
        android.graphics.Paint $r13;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.graphics.Canvas;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: com.android.internal.widget.LockPatternView$Cell;

        r3 := @parameter4: com.android.internal.widget.LockPatternView$Cell;

        $r6 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r5 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Wrong>;

        if $r6 == $r5 goto label3;

        z0 = 1;

     label1:
        i0 = r3.<com.android.internal.widget.LockPatternView$Cell: int row>;

        i1 = r2.<com.android.internal.widget.LockPatternView$Cell: int row>;

        i2 = r3.<com.android.internal.widget.LockPatternView$Cell: int column>;

        i3 = r2.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $f5 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $i8 = (int) $f5;

        $i9 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        $i10 = $i8 - $i9;

        i4 = $i10 / 2;

        $f6 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $i11 = (int) $f6;

        $i12 = r0.<com.android.internal.widget.LockPatternView: int mBitmapHeight>;

        $i14 = $i11 - $i12;

        i5 = $i14 / 2;

        if z0 == 0 goto label4;

        r4 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapArrowGreenUp>;

     label2:
        i6 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        i7 = r0.<com.android.internal.widget.LockPatternView: int mBitmapHeight>;

        $i13 = i0 - i1;

        $d2 = (double) $i13;

        $i15 = i2 - i3;

        $d0 = (double) $i15;

        $d1 = staticinvoke <java.lang.Math: double atan2(double,double)>($d2, $d0);

        $f7 = (float) $d1;

        $d3 = (double) $f7;

        $d4 = staticinvoke <java.lang.Math: double toDegrees(double)>($d3);

        $f8 = (float) $d4;

        f3 = 90.0F + $f8;

        $f11 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $i16 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        $f10 = (float) $i16;

        $f9 = $f11 / $f10;

        f2 = staticinvoke <java.lang.Math: float min(float,float)>($f9, 1.0F);

        $f12 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $i17 = r0.<com.android.internal.widget.LockPatternView: int mBitmapHeight>;

        $f14 = (float) $i17;

        $f13 = $f12 / $f14;

        f4 = staticinvoke <java.lang.Math: float min(float,float)>($f13, 1.0F);

        $r7 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mArrowMatrix>;

        $f17 = (float) i4;

        $f18 = f0 + $f17;

        $f16 = (float) i5;

        $f15 = f1 + $f16;

        virtualinvoke $r7.<android.graphics.Matrix: void setTranslate(float,float)>($f18, $f15);

        $r9 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mArrowMatrix>;

        $i19 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        $i18 = $i19 / 2;

        $f19 = (float) $i18;

        $i21 = r0.<com.android.internal.widget.LockPatternView: int mBitmapHeight>;

        $i20 = $i21 / 2;

        $f20 = (float) $i20;

        virtualinvoke $r9.<android.graphics.Matrix: boolean preTranslate(float,float)>($f19, $f20);

        $r8 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mArrowMatrix>;

        virtualinvoke $r8.<android.graphics.Matrix: boolean preScale(float,float)>(f2, f4);

        $r11 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mArrowMatrix>;

        $i24 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        $i25 = neg $i24;

        $i26 = $i25 / 2;

        $f22 = (float) $i26;

        $i27 = r0.<com.android.internal.widget.LockPatternView: int mBitmapHeight>;

        $i22 = neg $i27;

        $i23 = $i22 / 2;

        $f21 = (float) $i23;

        virtualinvoke $r11.<android.graphics.Matrix: boolean preTranslate(float,float)>($f22, $f21);

        $r10 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mArrowMatrix>;

        $f25 = (float) i6;

        $f24 = $f25 / 2.0F;

        $f26 = (float) i7;

        $f23 = $f26 / 2.0F;

        virtualinvoke $r10.<android.graphics.Matrix: boolean preRotate(float,float,float)>(f3, $f24, $f23);

        $r14 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mArrowMatrix>;

        $i28 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        $i29 = i6 - $i28;

        $f28 = (float) $i29;

        $f27 = $f28 / 2.0F;

        virtualinvoke $r14.<android.graphics.Matrix: boolean preTranslate(float,float)>($f27, 0.0F);

        $r12 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mArrowMatrix>;

        $r13 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r4, $r12, $r13);

        return;

     label3:
        z0 = 0;

        goto label1;

     label4:
        r4 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapArrowRedUp>;

        goto label2;
    }

    private void drawCircle(android.graphics.Canvas, int, int, boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        android.graphics.Canvas r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        boolean z0, $z4, $z5;
        android.graphics.Bitmap r2, r3;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21;
        android.graphics.Matrix $r4, $r5, $r6, $r7, $r8, $r10;
        android.graphics.Paint $r9, $r11;
        com.android.internal.widget.LockPatternView$DisplayMode $r12, $r13, $r17, $r18, $r19, $r20, $r21, $r24, $r25;
        java.lang.IllegalStateException $r14;
        java.lang.StringBuilder $r15, $r16, $r22;
        java.lang.String $r23;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label1;

        $z5 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        if $z5 == 0 goto label3;

        $r25 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r24 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Wrong>;

        if $r25 == $r24 goto label3;

     label1:
        r2 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapCircleDefault>;

        r3 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapBtnDefault>;

     label2:
        i2 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        i3 = r0.<com.android.internal.widget.LockPatternView: int mBitmapHeight>;

        f0 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        f1 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f4 = (float) i2;

        $f6 = f0 - $f4;

        $f5 = $f6 / 2.0F;

        i4 = (int) $f5;

        $f8 = (float) i3;

        $f7 = f1 - $f8;

        $f9 = $f7 / 2.0F;

        i5 = (int) $f9;

        $f10 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $i6 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        $f11 = (float) $i6;

        $f12 = $f10 / $f11;

        f2 = staticinvoke <java.lang.Math: float min(float,float)>($f12, 1.0F);

        $f15 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $i7 = r0.<com.android.internal.widget.LockPatternView: int mBitmapHeight>;

        $f13 = (float) $i7;

        $f14 = $f15 / $f13;

        f3 = staticinvoke <java.lang.Math: float min(float,float)>($f14, 1.0F);

        $r4 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mCircleMatrix>;

        $i8 = i0 + i4;

        $f16 = (float) $i8;

        $i9 = i1 + i5;

        $f17 = (float) $i9;

        virtualinvoke $r4.<android.graphics.Matrix: void setTranslate(float,float)>($f16, $f17);

        $r5 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mCircleMatrix>;

        $i12 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        $i13 = $i12 / 2;

        $f19 = (float) $i13;

        $i10 = r0.<com.android.internal.widget.LockPatternView: int mBitmapHeight>;

        $i11 = $i10 / 2;

        $f18 = (float) $i11;

        virtualinvoke $r5.<android.graphics.Matrix: boolean preTranslate(float,float)>($f19, $f18);

        $r6 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mCircleMatrix>;

        virtualinvoke $r6.<android.graphics.Matrix: boolean preScale(float,float)>(f2, f3);

        $r7 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mCircleMatrix>;

        $i14 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        $i15 = neg $i14;

        $i19 = $i15 / 2;

        $f20 = (float) $i19;

        $i18 = r0.<com.android.internal.widget.LockPatternView: int mBitmapHeight>;

        $i17 = neg $i18;

        $i16 = $i17 / 2;

        $f21 = (float) $i16;

        virtualinvoke $r7.<android.graphics.Matrix: boolean preTranslate(float,float)>($f20, $f21);

        $r10 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mCircleMatrix>;

        $r11 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r2, $r10, $r11);

        $r8 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Matrix mCircleMatrix>;

        $r9 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r3, $r8, $r9);

        return;

     label3:
        $z4 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z4 == 0 goto label4;

        r2 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapCircleGreen>;

        r3 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapBtnTouched>;

        goto label2;

     label4:
        $r12 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r13 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Wrong>;

        if $r12 != $r13 goto label5;

        r2 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapCircleRed>;

        r3 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapBtnDefault>;

        goto label2;

     label5:
        $r19 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r18 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        if $r19 == $r18 goto label6;

        $r21 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r20 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if $r21 != $r20 goto label7;

     label6:
        r2 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapCircleGreen>;

        r3 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Bitmap mBitmapBtnDefault>;

        goto label2;

     label7:
        $r14 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown display mode ");

        $r17 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r14;
    }

    private android.graphics.Bitmap getBitmapFor(int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        android.graphics.Bitmap $r3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>($r2, i0);

        return $r3;
    }

    private float getCenterXForColumn(int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, $i1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        $f3 = (float) $i1;

        $f1 = (float) i0;

        $f0 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f2 = $f1 * $f0;

        $f6 = $f3 + $f2;

        $f4 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f5 = $f4 / 2.0F;

        $f7 = $f6 + $f5;

        return $f7;
    }

    private float getCenterYForRow(int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, $i1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        $f3 = (float) $i1;

        $f1 = (float) i0;

        $f0 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f2 = $f1 * $f0;

        $f6 = $f3 + $f2;

        $f4 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f5 = $f4 / 2.0F;

        $f7 = $f6 + $f5;

        return $f7;
    }

    private int getColumnHit(float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        int i0, $i1;
        byte $b2, $b3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f5 = r0.<com.android.internal.widget.LockPatternView: float mHitFactor>;

        f2 = f1 * $f5;

        $i1 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        $f8 = (float) $i1;

        $f6 = f1 - f2;

        $f7 = $f6 / 2.0F;

        f3 = $f8 + $f7;

        i0 = 0;

     label1:
        if i0 >= 3 goto label3;

        $f9 = (float) i0;

        $f10 = f1 * $f9;

        f4 = f3 + $f10;

        $b2 = f0 cmpl f4;

        if $b2 < 0 goto label2;

        $f11 = f4 + f2;

        $b3 = f0 cmpg $f11;

        if $b3 > 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    private int getRowHit(float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        int i0, $i1;
        byte $b2, $b3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f5 = r0.<com.android.internal.widget.LockPatternView: float mHitFactor>;

        f2 = f1 * $f5;

        $i1 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        $f8 = (float) $i1;

        $f6 = f1 - f2;

        $f7 = $f6 / 2.0F;

        f3 = $f8 + $f7;

        i0 = 0;

     label1:
        if i0 >= 3 goto label3;

        $f9 = (float) i0;

        $f10 = f1 * $f9;

        f4 = f3 + $f10;

        $b2 = f0 cmpl f4;

        if $b2 < 0 goto label2;

        $f11 = f4 + f2;

        $b3 = f0 cmpg $f11;

        if $b3 > 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    private void handleActionDown(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11;
        com.android.internal.widget.LockPatternView$Cell r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.internal.widget.LockPatternView$DisplayMode $r3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void resetPattern()>();

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r2 = specialinvoke r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)>(f0, f1);

        if r2 == null goto label3;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 1;

        $r3 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r3;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternStarted()>();

     label1:
        if r2 == null goto label2;

        $i0 = r2.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f2 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i0);

        $i1 = r2.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f3 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i1);

        $f6 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        f4 = $f6 / 2.0F;

        $f8 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        f5 = $f8 / 2.0F;

        $f7 = f2 - f4;

        $i5 = (int) $f7;

        $f10 = f3 - f5;

        $i3 = (int) $f10;

        $f9 = f2 + f4;

        $i4 = (int) $f9;

        $f11 = f3 + f5;

        $i2 = (int) $f11;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate(int,int,int,int)>($i5, $i3, $i4, $i2);

     label2:
        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = f0;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = f1;

        return;

     label3:
        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z0 == 0 goto label1;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 0;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternCleared()>();

        goto label1;
    }

    private void handleActionMove(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, $f14, f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean z0, $z1;
        com.android.internal.widget.LockPatternView$Cell r2, r3;
        android.graphics.Rect $r4, $r5, $r6, $r7, $r8, $r9, $r13;
        java.util.ArrayList $r10, $r12;
        byte $b4, $b14;
        java.lang.Object $r11;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        $f17 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f14 = r0.<com.android.internal.widget.LockPatternView: float mDiameterFactor>;

        $f16 = $f17 * $f14;

        f0 = 0.5F * $f16;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getHistorySize()>();

        $r4 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        virtualinvoke $r4.<android.graphics.Rect: void setEmpty()>();

        z0 = 0;

        i1 = 0;

     label01:
        $i3 = i0 + 1;

        if i1 >= $i3 goto label11;

        if i1 >= i0 goto label09;

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getHistoricalX(int)>(i1);

     label02:
        if i1 >= i0 goto label10;

        f2 = virtualinvoke r1.<android.view.MotionEvent: float getHistoricalY(int)>(i1);

     label03:
        r2 = specialinvoke r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)>(f1, f2);

        $r10 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        i2 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        if r2 == null goto label04;

        if i2 != 1 goto label04;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 1;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternStarted()>();

     label04:
        $f21 = r0.<com.android.internal.widget.LockPatternView: float mInProgressX>;

        $f20 = f1 - $f21;

        f3 = staticinvoke <java.lang.Math: float abs(float)>($f20);

        $f22 = r0.<com.android.internal.widget.LockPatternView: float mInProgressY>;

        $f23 = f2 - $f22;

        f4 = staticinvoke <java.lang.Math: float abs(float)>($f23);

        $b4 = f3 cmpl 0.0F;

        if $b4 > 0 goto label05;

        $b14 = f4 cmpl 0.0F;

        if $b14 <= 0 goto label06;

     label05:
        z0 = 1;

     label06:
        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z1 == 0 goto label08;

        if i2 <= 0 goto label08;

        $r12 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $i5 = i2 - 1;

        $r11 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        r3 = (com.android.internal.widget.LockPatternView$Cell) $r11;

        $i7 = r3.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f5 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i7);

        $i6 = r3.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f6 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i6);

        $f27 = staticinvoke <java.lang.Math: float min(float,float)>(f5, f1);

        f7 = $f27 - f0;

        $f26 = staticinvoke <java.lang.Math: float max(float,float)>(f5, f1);

        f9 = f0 + $f26;

        $f25 = staticinvoke <java.lang.Math: float min(float,float)>(f6, f2);

        f8 = $f25 - f0;

        $f24 = staticinvoke <java.lang.Math: float max(float,float)>(f6, f2);

        f11 = f0 + $f24;

        if r2 == null goto label07;

        $f29 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        f10 = 0.5F * $f29;

        $f30 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        f13 = 0.5F * $f30;

        $i13 = r2.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f12 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i13);

        $i11 = r2.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f15 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i11);

        $f28 = f12 - f10;

        f7 = staticinvoke <java.lang.Math: float min(float,float)>($f28, f7);

        $f32 = f12 + f10;

        f9 = staticinvoke <java.lang.Math: float max(float,float)>($f32, f9);

        $f33 = f15 - f13;

        f8 = staticinvoke <java.lang.Math: float min(float,float)>($f33, f8);

        $f31 = f15 + f13;

        f11 = staticinvoke <java.lang.Math: float max(float,float)>($f31, f11);

     label07:
        $r13 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        $i10 = staticinvoke <java.lang.Math: int round(float)>(f7);

        $i9 = staticinvoke <java.lang.Math: int round(float)>(f8);

        $i8 = staticinvoke <java.lang.Math: int round(float)>(f9);

        $i12 = staticinvoke <java.lang.Math: int round(float)>(f11);

        virtualinvoke $r13.<android.graphics.Rect: void union(int,int,int,int)>($i10, $i9, $i8, $i12);

     label08:
        i1 = i1 + 1;

        goto label01;

     label09:
        f1 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        goto label02;

     label10:
        f2 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        goto label03;

     label11:
        $f18 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = $f18;

        $f19 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = $f19;

        if z0 == 0 goto label12;

        $r8 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate>;

        $r5 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        virtualinvoke $r8.<android.graphics.Rect: void union(android.graphics.Rect)>($r5);

        $r9 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate>;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate(android.graphics.Rect)>($r9);

        $r7 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate>;

        $r6 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        virtualinvoke $r7.<android.graphics.Rect: void set(android.graphics.Rect)>($r6);

     label12:
        return;
    }

    private void handleActionUp(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 0;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternDetected()>();

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

     label1:
        return;
    }

    private void notifyCellAdded()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener $r1, $r3;
        java.util.ArrayList $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void sendAccessEvent(int)>(17040191);

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        $r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        interfaceinvoke $r3.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded(java.util.List)>($r2);

     label1:
        return;
    }

    private void notifyPatternCleared()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener $r1, $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void sendAccessEvent(int)>(17040190);

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        interfaceinvoke $r2.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCleared()>();

     label1:
        return;
    }

    private void notifyPatternDetected()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener $r1, $r3;
        java.util.ArrayList $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void sendAccessEvent(int)>(17040192);

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        $r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        interfaceinvoke $r3.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)>($r2);

     label1:
        return;
    }

    private void notifyPatternStarted()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener $r1, $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void sendAccessEvent(int)>(17040189);

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        interfaceinvoke $r2.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternStart()>();

     label1:
        return;
    }

    private void resetPattern()
    {
        com.android.internal.widget.LockPatternView r0;
        java.util.ArrayList $r1;
        com.android.internal.widget.LockPatternView$DisplayMode $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $r1 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

        $r2 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r2;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

        return;
    }

    private int resolveMeasured(int, int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1, i2, $i3, $i4;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        $i3 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        lookupswitch($i3)
        {
            case -2147483648: goto label3;
            case 0: goto label2;
            default: goto label1;
        };

     label1:
        return i2;

     label2:
        return i1;

     label3:
        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(i2, i1);

        return $i4;
    }

    private void sendAccessEvent(int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0;
        android.content.Context $r1;
        java.lang.String $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.widget.LockPatternView: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(i0);

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void announceForAccessibility(java.lang.CharSequence)>($r2);

        return;
    }

    public void clearPattern()
    {
        com.android.internal.widget.LockPatternView r0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void resetPattern()>();

        return;
    }

    public void disableInput()
    {
        com.android.internal.widget.LockPatternView r0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = 0;

        return;
    }

    public void enableInput()
    {
        com.android.internal.widget.LockPatternView r0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = 1;

        return;
    }

    protected int getSuggestedMinimumHeight()
    {
        com.android.internal.widget.LockPatternView r0;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $i0 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        $i1 = 3 * $i0;

        return $i1;
    }

    protected int getSuggestedMinimumWidth()
    {
        com.android.internal.widget.LockPatternView r0;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $i0 = r0.<com.android.internal.widget.LockPatternView: int mBitmapWidth>;

        $i1 = 3 * $i0;

        return $i1;
    }

    public boolean isInStealthMode()
    {
        com.android.internal.widget.LockPatternView r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        return $z0;
    }

    public boolean isTactileFeedbackEnabled()
    {
        com.android.internal.widget.LockPatternView r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback>;

        return $z0;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        com.android.internal.widget.LockPatternView r0;
        android.graphics.Canvas r1;
        java.util.ArrayList r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i30, $i32, $i33, $i34, $i35, $i36, $i37;
        boolean[][] r3;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36;
        android.graphics.Path r4;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8;
        com.android.internal.widget.LockPatternView$Cell r5, r6, r7, r8, r9, r11;
        com.android.internal.widget.LockPatternView$DisplayMode $r10, $r13, $r17, $r20, $r25, $r26;
        android.graphics.Paint $r12, $r14, $r15, $r16, $r18;
        java.lang.Object $r19, $r22, $r24, $r28, $r29, $r30;
        boolean[] $r21, $r23, $r27, $r31;
        long $l28, $l29, $l31;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        r3 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $r13 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r10 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if $r13 != $r10 goto label05;

        $i30 = i0 + 1;

        i7 = 700 * $i30;

        $l31 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l28 = r0.<com.android.internal.widget.LockPatternView: long mAnimatingPeriodStart>;

        $l29 = $l31 - $l28;

        $i26 = (int) $l29;

        i10 = $i26 % i7;

        i9 = i10 / 700;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

        i11 = 0;

     label01:
        if i11 >= i9 goto label02;

        $r30 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i11);

        r11 = (com.android.internal.widget.LockPatternView$Cell) $r30;

        $i35 = virtualinvoke r11.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $r31 = r3[$i35];

        $i37 = virtualinvoke r11.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $r31[$i37] = 1;

        i11 = i11 + 1;

        goto label01;

     label02:
        if i9 <= 0 goto label08;

        if i9 >= i0 goto label08;

        z3 = 1;

     label03:
        if z3 == 0 goto label04;

        $i27 = i10 % 700;

        $f30 = (float) $i27;

        f6 = $f30 / 700.0F;

        $i25 = i9 - 1;

        $r29 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>($i25);

        r8 = (com.android.internal.widget.LockPatternView$Cell) $r29;

        $i34 = r8.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f8 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i34);

        $i33 = r8.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f9 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i33);

        $r28 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        r9 = (com.android.internal.widget.LockPatternView$Cell) $r28;

        $i32 = r9.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $f31 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i32);

        $f36 = $f31 - f8;

        f7 = f6 * $f36;

        $i36 = r9.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $f35 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i36);

        $f34 = $f35 - f9;

        f10 = f6 * $f34;

        $f33 = f8 + f7;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = $f33;

        $f32 = f9 + f10;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = $f32;

     label04:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

     label05:
        f0 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        f1 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f12 = r0.<com.android.internal.widget.LockPatternView: float mDiameterFactor>;

        $f11 = f0 * $f12;

        f2 = 0.5F * $f11;

        $r12 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r12.<android.graphics.Paint: void setStrokeWidth(float)>(f2);

        r4 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Path mCurrentPath>;

        virtualinvoke r4.<android.graphics.Path: void rewind()>();

        i1 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        i2 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        i3 = 0;

     label06:
        if i3 >= 3 goto label10;

        $f21 = (float) i1;

        $f20 = (float) i3;

        $f22 = f1 * $f20;

        f5 = $f21 + $f22;

        i8 = 0;

     label07:
        if i8 >= 3 goto label09;

        $f29 = (float) i2;

        $f27 = (float) i8;

        $f26 = f0 * $f27;

        $f28 = $f29 + $f26;

        $i23 = (int) $f28;

        $i24 = (int) f5;

        $r27 = r3[i3];

        $z8 = $r27[i8];

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void drawCircle(android.graphics.Canvas,int,int,boolean)>(r1, $i23, $i24, $z8);

        i8 = i8 + 1;

        goto label07;

     label08:
        z3 = 0;

        goto label03;

     label09:
        i3 = i3 + 1;

        goto label06;

     label10:
        $z4 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        if $z4 == 0 goto label11;

        $r25 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r26 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Wrong>;

        if $r25 != $r26 goto label21;

     label11:
        z0 = 1;

     label12:
        $r14 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        $i12 = virtualinvoke $r14.<android.graphics.Paint: int getFlags()>();

        $i13 = 2 & $i12;

        if $i13 == 0 goto label22;

        z1 = 1;

     label13:
        $r16 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        virtualinvoke $r16.<android.graphics.Paint: void setFilterBitmap(boolean)>(1);

        if z0 == 0 goto label15;

        i5 = 0;

     label14:
        i6 = i0 - 1;

        if i5 >= i6 goto label15;

        $r24 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        r6 = (com.android.internal.widget.LockPatternView$Cell) $r24;

        $i20 = i5 + 1;

        $r22 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>($i20);

        r7 = (com.android.internal.widget.LockPatternView$Cell) $r22;

        $i17 = r7.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $r23 = r3[$i17];

        $i18 = r7.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $z7 = $r23[$i18];

        if $z7 != 0 goto label23;

     label15:
        if z0 == 0 goto label20;

        z2 = 0;

        i4 = 0;

     label16:
        if i4 >= i0 goto label17;

        $r19 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r5 = (com.android.internal.widget.LockPatternView$Cell) $r19;

        $i15 = r5.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $r21 = r3[$i15];

        $i14 = r5.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $z6 = $r21[$i14];

        if $z6 != 0 goto label24;

     label17:
        $z5 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z5 != 0 goto label18;

        $r20 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r17 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if $r20 != $r17 goto label19;

     label18:
        if z2 == 0 goto label19;

        $f13 = r0.<com.android.internal.widget.LockPatternView: float mInProgressX>;

        $f14 = r0.<com.android.internal.widget.LockPatternView: float mInProgressY>;

        virtualinvoke r4.<android.graphics.Path: void lineTo(float,float)>($f13, $f14);

     label19:
        $r18 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>(r4, $r18);

     label20:
        $r15 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        virtualinvoke $r15.<android.graphics.Paint: void setFilterBitmap(boolean)>(z1);

        return;

     label21:
        z0 = 0;

        goto label12;

     label22:
        z1 = 0;

        goto label13;

     label23:
        $f15 = (float) i2;

        $i22 = r6.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $f18 = (float) $i22;

        $f19 = f0 * $f18;

        $f25 = $f15 + $f19;

        $f24 = (float) i1;

        $i21 = r6.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $f16 = (float) $i21;

        $f17 = f1 * $f16;

        $f23 = $f24 + $f17;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void drawArrow(android.graphics.Canvas,float,float,com.android.internal.widget.LockPatternView$Cell,com.android.internal.widget.LockPatternView$Cell)>(r1, $f25, $f23, r6, r7);

        i5 = i5 + 1;

        goto label14;

     label24:
        z2 = 1;

        $i16 = r5.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f3 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i16);

        $i19 = r5.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f4 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i19);

        if i4 != 0 goto label26;

        virtualinvoke r4.<android.graphics.Path: void moveTo(float,float)>(f3, f4);

     label25:
        i4 = i4 + 1;

        goto label16;

     label26:
        virtualinvoke r4.<android.graphics.Path: void lineTo(float,float)>(f3, f4);

        goto label25;
    }

    public boolean onHoverEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        int i0;
        android.content.Context $r2;
        android.view.accessibility.AccessibilityManager $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.widget.LockPatternView: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r2);

        $z0 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z0 == 0 goto label2;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        tableswitch(i0)
        {
            case 7: goto label4;
            case 8: goto label1;
            case 9: goto label3;
            case 10: goto label5;
            default: goto label1;
        };

     label1:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(i0);

     label2:
        $z1 = specialinvoke r0.<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>(r1);

        return $z1;

     label3:
        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(0);

        goto label1;

     label4:
        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(2);

        goto label1;

     label5:
        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(1);

        goto label1;
    }

    protected void onMeasure(int, int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1, i2, i3, i4, i5, $i6;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: int getSuggestedMinimumWidth()>();

        i3 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: int getSuggestedMinimumHeight()>();

        i4 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int resolveMeasured(int,int)>(i0, i2);

        i5 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int resolveMeasured(int,int)>(i1, i3);

        $i6 = r0.<com.android.internal.widget.LockPatternView: int mAspect>;

        tableswitch($i6)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label1;
        };

     label1:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setMeasuredDimension(int,int)>(i4, i5);

        return;

     label2:
        i5 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i5);

        i4 = i5;

        goto label1;

     label3:
        i5 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i5);

        goto label1;

     label4:
        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i5);

        goto label1;
    }

    protected void onRestoreInstanceState(android.os.Parcelable)
    {
        com.android.internal.widget.LockPatternView r0;
        android.os.Parcelable r1, $r3;
        com.android.internal.widget.LockPatternView$SavedState r2;
        com.android.internal.widget.LockPatternView$DisplayMode $r4, $r8;
        java.lang.String $r5;
        java.util.List $r6;
        com.android.internal.widget.LockPatternView$DisplayMode[] $r7;
        int $i0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.os.Parcelable;

        r2 = (com.android.internal.widget.LockPatternView$SavedState) r1;

        $r3 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: android.os.Parcelable getSuperState()>();

        specialinvoke r0.<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>($r3);

        $r4 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        $r5 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: java.lang.String getSerializedPattern()>();

        $r6 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.util.List stringToPattern(java.lang.String)>($r5);

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setPattern(com.android.internal.widget.LockPatternView$DisplayMode,java.util.List)>($r4, $r6);

        $r7 = staticinvoke <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode[] values()>();

        $i0 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: int getDisplayMode()>();

        $r8 = $r7[$i0];

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r8;

        $z0 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: boolean isInputEnabled()>();

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = $z0;

        $z1 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: boolean isInStealthMode()>();

        r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode> = $z1;

        $z2 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: boolean isTactileFeedbackEnabled()>();

        r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback> = $z2;

        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        com.android.internal.widget.LockPatternView r0;
        android.os.Parcelable $r2, r7;
        java.util.ArrayList $r3;
        java.lang.String $r4;
        com.android.internal.widget.LockPatternView$DisplayMode $r5;
        int $i0;
        boolean $z0, $z1, $z2;
        com.android.internal.widget.LockPatternView$SavedState r6;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r6 = new com.android.internal.widget.LockPatternView$SavedState;

        $r2 = specialinvoke r0.<android.view.View: android.os.Parcelable onSaveInstanceState()>();

        $r3 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $r4 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String patternToString(java.util.List)>($r3);

        $r5 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $i0 = virtualinvoke $r5.<com.android.internal.widget.LockPatternView$DisplayMode: int ordinal()>();

        $z2 = r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled>;

        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback>;

        specialinvoke r6.<com.android.internal.widget.LockPatternView$SavedState: void <init>(android.os.Parcelable,java.lang.String,int,boolean,boolean,boolean,com.android.internal.widget.LockPatternView$1)>($r2, $r4, $i0, $z2, $z1, $z0, null);

        r7 = (android.os.Parcelable) r6;

        return r7;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i4 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        $i6 = i0 - $i4;

        $i5 = r0.<com.android.internal.widget.LockPatternView: int mPaddingRight>;

        $i7 = $i6 - $i5;

        $f0 = (float) $i7;

        $f1 = $f0 / 3.0F;

        r0.<com.android.internal.widget.LockPatternView: float mSquareWidth> = $f1;

        $i8 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        $i10 = i1 - $i8;

        $i9 = r0.<com.android.internal.widget.LockPatternView: int mPaddingBottom>;

        $i11 = $i10 - $i9;

        $f2 = (float) $i11;

        $f3 = $f2 / 3.0F;

        r0.<com.android.internal.widget.LockPatternView: float mSquareHeight> = $f3;

        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        boolean z0, $z1, $z2, $z3;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        z0 = 1;

        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled>;

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: boolean isEnabled()>();

        if $z2 != 0 goto label3;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        tableswitch($i0)
        {
            case 0: goto label5;
            case 1: goto label6;
            case 2: goto label7;
            case 3: goto label8;
            default: goto label4;
        };

     label4:
        return 0;

     label5:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void handleActionDown(android.view.MotionEvent)>(r1);

        return 1;

     label6:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void handleActionUp(android.view.MotionEvent)>(r1);

        return 1;

     label7:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void handleActionMove(android.view.MotionEvent)>(r1);

        return 1;

     label8:
        $z3 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z3 == 0 goto label2;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 0;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void resetPattern()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternCleared()>();

        return 1;
    }

    public void setDisplayMode(com.android.internal.widget.LockPatternView$DisplayMode)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$DisplayMode r1, $r3;
        com.android.internal.widget.LockPatternView$Cell r2;
        java.util.ArrayList $r4, $r5;
        int $i0, $i2, $i3;
        long $l1;
        java.lang.Object $r6;
        float $f0, $f1;
        java.lang.IllegalStateException $r7;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$DisplayMode;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = r1;

        $r3 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if r1 != $r3 goto label2;

        $r4 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("you must have a pattern to animate if you want to set the display mode to animate");

        throw $r7;

     label1:
        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.internal.widget.LockPatternView: long mAnimatingPeriodStart> = $l1;

        $r5 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r2 = (com.android.internal.widget.LockPatternView$Cell) $r6;

        $i2 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $f0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i2);

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = $f0;

        $i3 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $f1 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i3);

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = $f1;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

     label2:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

        return;
    }

    public void setInStealthMode(boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode> = z0;

        return;
    }

    public void setOnPatternListener(com.android.internal.widget.LockPatternView$OnPatternListener)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener r1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$OnPatternListener;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener> = r1;

        return;
    }

    public void setPattern(com.android.internal.widget.LockPatternView$DisplayMode, java.util.List)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$DisplayMode r1;
        java.util.List r2;
        java.util.Iterator r3;
        com.android.internal.widget.LockPatternView$Cell r4;
        java.util.ArrayList $r5, $r6;
        boolean $z1;
        java.lang.Object $r7;
        boolean[][] $r8;
        int $i0, $i1;
        boolean[] $r9;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$DisplayMode;

        r2 := @parameter1: java.util.List;

        $r5 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r5.<java.util.ArrayList: void clear()>();

        $r6 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r6.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r2);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.internal.widget.LockPatternView$Cell) $r7;

        $r8 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $i0 = virtualinvoke r4.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $r9 = $r8[$i0];

        $i1 = virtualinvoke r4.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $r9[$i1] = 1;

        goto label1;

     label2:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setDisplayMode(com.android.internal.widget.LockPatternView$DisplayMode)>(r1);

        return;
    }

    public void setTactileFeedbackEnabled(boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback> = z0;

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.widget.LockPatternView: int MILLIS_PER_CIRCLE_ANIMATING> = 700;

        <com.android.internal.widget.LockPatternView: float DRAG_THRESHHOLD> = 0.0F;

        <com.android.internal.widget.LockPatternView: int ASPECT_SQUARE> = 0;

        <com.android.internal.widget.LockPatternView: int ASPECT_LOCK_WIDTH> = 1;

        <com.android.internal.widget.LockPatternView: int ASPECT_LOCK_HEIGHT> = 2;

        return;
    }
}
