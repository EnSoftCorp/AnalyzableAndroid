public class com.android.internal.os.ProcessCpuTracker$Stats extends java.lang.Object
{
    public boolean active;
    public boolean added;
    public java.lang.String baseName;
    public long base_majfaults;
    public long base_minfaults;
    public long base_stime;
    public long base_uptime;
    public long base_utime;
    public com.android.internal.os.BatteryStatsImpl$Uid$Proc batteryStats;
    final java.lang.String cmdlineFile;
    public boolean interesting;
    public java.lang.String name;
    public int nameWidth;
    public final int pid;
    public int rel_majfaults;
    public int rel_minfaults;
    public int rel_stime;
    public long rel_uptime;
    public int rel_utime;
    public boolean removed;
    final java.lang.String statFile;
    final java.util.ArrayList threadStats;
    final java.lang.String threadsDir;
    public final int uid;
    public long vsize;
    public boolean working;
    final java.util.ArrayList workingThreads;

    void <init>(int, int, boolean)
    {
        com.android.internal.os.ProcessCpuTracker$Stats r0;
        int i0, i1, $i2, $i3, $i4;
        boolean z0;
        java.io.File r1, $r2, $r3, $r4, $r5, $r11, $r12, $r14, $r16;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r13, $r15, $r17, $r19;
        java.util.ArrayList $r18, $r20;

        r0 := @this: com.android.internal.os.ProcessCpuTracker$Stats;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: int pid> = i0;

        if i1 >= 0 goto label3;

        $r11 = new java.io.File;

        $i4 = r0.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String,java.lang.String)>("/proc", $r13);

        r1 = $r11;

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "stat");

        $r15 = virtualinvoke $r12.<java.io.File: java.lang.String toString()>();

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String statFile> = $r15;

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "cmdline");

        $r17 = virtualinvoke $r14.<java.io.File: java.lang.String toString()>();

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String cmdlineFile> = $r17;

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "task");

        $r19 = virtualinvoke $r16.<java.io.File: java.lang.String toString()>();

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String threadsDir> = $r19;

        if z0 == 0 goto label2;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats> = $r18;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads> = $r20;

     label1:
        $r9 = r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String statFile>;

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toString()>();

        $i3 = staticinvoke <android.os.FileUtils: int getUid(java.lang.String)>($r10);

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: int uid> = $i3;

        return;

     label2:
        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats> = null;

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads> = null;

        goto label1;

     label3:
        $r2 = new java.io.File;

        $r3 = new java.io.File;

        $r4 = new java.io.File;

        $r5 = new java.io.File;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String,java.lang.String)>("/proc", $r6);

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "task");

        $i2 = r0.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r7);

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "stat");

        $r8 = virtualinvoke $r2.<java.io.File: java.lang.String toString()>();

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String statFile> = $r8;

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String cmdlineFile> = null;

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String threadsDir> = null;

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats> = null;

        r0.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads> = null;

        goto label1;
    }
}
