final class com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy extends java.lang.Object
{
    private static final int RETRIEVAL_ALLOWING_EVENT_TYPES;
    private static final int VALID_ACTIONS;
    private int mActiveWindowId;
    private boolean mTouchInteractionInProgress;
    final com.android.server.accessibility.AccessibilityManagerService this$0;

    void <init>(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        com.android.server.accessibility.AccessibilityManagerService r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static boolean access$1000(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy, android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        android.view.accessibility.AccessibilityEvent r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter1: android.view.accessibility.AccessibilityEvent;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean canDispatchAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        return $z0;
    }

    static void access$1100(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy, java.lang.String, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void enforceCallingPermission(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static int access$1600(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int $i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        return $i0;
    }

    private boolean canDispatchAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        android.view.accessibility.AccessibilityEvent r1;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        lookupswitch($i0)
        {
            case 32: goto label2;
            case 64: goto label2;
            case 128: goto label2;
            case 256: goto label2;
            case 512: goto label2;
            case 1024: goto label2;
            case 262144: goto label2;
            case 524288: goto label2;
            case 1048576: goto label2;
            case 2097152: goto label2;
            default: goto label1;
        };

     label1:
        $i1 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        $i2 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        if $i1 != $i2 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    private void enforceCallingPermission(java.lang.String, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        java.lang.String r1, r2, $r13;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$4200()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        if $i0 != $i1 goto label2;

     label1:
        return;

     label2:
        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean hasPermission(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You do not have ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" required to call ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from pid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r3;
    }

    private int getFocusedWindowId()
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        android.os.IBinder r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r13;
        int i0;
        com.android.server.accessibility.AccessibilityManagerService $r5, $r7, $r8, $r11;
        android.view.IWindowManager $r6;
        android.util.SparseArray $r9, $r12;
        com.android.server.accessibility.AccessibilityManagerService$UserState $r10;
        android.os.RemoteException $r14;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

     label01:
        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r6 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: android.view.IWindowManager access$3600(com.android.server.accessibility.AccessibilityManagerService)>($r5);

        r2 = interfaceinvoke $r6.<android.view.IWindowManager: android.os.IBinder getFocusedWindowToken()>();

     label02:
        if r2 == null goto label13;

     label03:
        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        r3 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: java.lang.Object access$000(com.android.server.accessibility.AccessibilityManagerService)>($r7);

        entermonitor r3;

     label04:
        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r9 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray access$3500(com.android.server.accessibility.AccessibilityManagerService)>($r8);

        i0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getFocusedWindowIdLocked(android.os.IBinder,android.util.SparseArray)>(r2, $r9);

     label05:
        if i0 >= 0 goto label07;

     label06:
        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r10 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState access$200(com.android.server.accessibility.AccessibilityManagerService)>($r11);

        $r12 = $r10.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mWindowTokens>;

        i0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getFocusedWindowIdLocked(android.os.IBinder,android.util.SparseArray)>(r2, $r12);

     label07:
        exitmonitor r3;

     label08:
        return i0;

     label09:
        $r13 := @caughtexception;

        r4 = $r13;

     label10:
        exitmonitor r3;

     label11:
        throw r4;

     label12:
        $r14 := @caughtexception;

     label13:
        return -1;

        catch android.os.RemoteException from label01 to label02 with label12;
        catch android.os.RemoteException from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch android.os.RemoteException from label11 to label12 with label12;
    }

    private int getFocusedWindowIdLocked(android.os.IBinder, android.util.SparseArray)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        android.os.IBinder r1;
        android.util.SparseArray r2;
        int i0, i1, $i2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.util.SparseArray;

        i0 = virtualinvoke r2.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = virtualinvoke r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        if $r3 != r1 goto label2;

        $i2 = virtualinvoke r2.<android.util.SparseArray: int keyAt(int)>(i1);

        return $i2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private boolean hasPermission(java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        java.lang.String r1;
        com.android.server.accessibility.AccessibilityManagerService $r2;
        android.content.Context $r3;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r3 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: android.content.Context access$1700(com.android.server.accessibility.AccessibilityManagerService)>($r2);

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>(r1);

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isActionPermitted(int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        $i1 = 2097151 & i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isRetrievalAllowingWindow(int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        if $i1 != i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean canGetAccessibilityNodeInfoLocked(com.android.server.accessibility.AccessibilityManagerService$Service, int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        int i0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean canRetrieveWindowContent(com.android.server.accessibility.AccessibilityManagerService$Service)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean isRetrievalAllowingWindow(int)>(i0);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean canPerformActionLocked(com.android.server.accessibility.AccessibilityManagerService$Service, int, int, android.os.Bundle)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        int i0, i1;
        android.os.Bundle r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.Bundle;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean canRetrieveWindowContent(com.android.server.accessibility.AccessibilityManagerService$Service)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean isRetrievalAllowingWindow(int)>(i0);

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean isActionPermitted(int)>(i1);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean canRetrieveWindowContent(com.android.server.accessibility.AccessibilityManagerService$Service)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        android.accessibilityservice.AccessibilityServiceInfo $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        $r2 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        $i0 = virtualinvoke $r2.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        $i1 = 1 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void enforceCanRetrieveWindowContent(com.android.server.accessibility.AccessibilityManagerService$Service) throws android.os.RemoteException
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;
        android.content.ComponentName $r4;
        java.lang.String $r8;
        android.os.RemoteException $r9;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean canRetrieveWindowContent(com.android.server.accessibility.AccessibilityManagerService$Service)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Accessibility serivce ");

        $r4 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: android.content.ComponentName mComponentName>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("declare android:canRetrieveWindowContent.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r8);

        $r9 = new android.os.RemoteException;

        specialinvoke $r9.<android.os.RemoteException: void <init>()>();

        throw $r9;

     label1:
        return;
    }

    public int getRetrievalAllowingWindowLocked()
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        return $i0;
    }

    public boolean isCallerInteractingAcrossUsers(int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, i1, $i2, $i3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Process: int myPid()>();

        if $i2 == $i3 goto label1;

        if i1 == 2000 goto label1;

        if i0 == -2 goto label1;

        if i0 != -3 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void onTouchInteractionEnd()
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean mTouchInteractionInProgress> = 0;

        $i0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getFocusedWindowId()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId> = $i0;

        return;
    }

    public void onTouchInteractionStart()
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean mTouchInteractionInProgress> = 1;

        return;
    }

    public int resolveCallingUserIdEnforcingPermissionsLocked(int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, i1, i2, $i3;
        com.android.server.accessibility.AccessibilityManagerService $r1, $r2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.SecurityException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r12;
        java.lang.String $r11;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i1 == 0 goto label1;

        if i1 == 1000 goto label1;

        if i1 != 2000 goto label3;

     label1:
        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        i0 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$100(com.android.server.accessibility.AccessibilityManagerService)>($r1);

     label2:
        return i0;

     label3:
        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        if i2 == i0 goto label2;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean hasPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS");

        if $z0 != 0 goto label4;

        $z1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean hasPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $z1 != 0 goto label4;

        $r4 = new java.lang.SecurityException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Call from user ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as user ");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission INTERACT_ACROSS_USERS or ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INTERACT_ACROSS_USERS_FULL not allowed.");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label4:
        if i0 == -2 goto label5;

        if i0 != -3 goto label6;

     label5:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $i3 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$100(com.android.server.accessibility.AccessibilityManagerService)>($r2);

        return $i3;

     label6:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Calling user can be changed to only UserHandle.USER_CURRENT or UserHandle.USER_CURRENT_OR_SELF.");

        throw $r3;
    }

    public void updateActiveWindow(int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        lookupswitch(i1)
        {
            case 32: goto label2;
            case 128: goto label3;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $i2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getFocusedWindowId()>();

        if $i2 != i0 goto label1;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId> = i0;

        return;

     label3:
        $z0 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean mTouchInteractionInProgress>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId> = i0;

        return;
    }

    public void updateEventSourceLocked(android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        android.view.accessibility.AccessibilityEvent r1;
        int $i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        $i1 = 113087 & $i0;

        if $i1 != 0 goto label1;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setSource(android.view.View)>(null);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int VALID_ACTIONS> = 2097151;

        <com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int RETRIEVAL_ALLOWING_EVENT_TYPES> = 113087;

        return;
    }
}
