public abstract class java.nio.channels.spi.AbstractSelectableChannel extends java.nio.channels.SelectableChannel
{
    private final java.lang.Object blockingLock;
    boolean isBlocking;
    private java.util.List keyList;
    private final java.nio.channels.spi.SelectorProvider provider;

    protected void <init>(java.nio.channels.spi.SelectorProvider)
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.util.ArrayList $r2;
        java.lang.Object $r3;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        specialinvoke r0.<java.nio.channels.SelectableChannel: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock> = $r3;

        r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking> = 1;

        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider> = r1;

        return;
    }

    private boolean containsValidKeys()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Throwable r1, $r6;
        java.util.Iterator r2;
        boolean z0, z1, $z2;
        java.nio.channels.SelectionKey r3;
        java.util.List $r4;
        java.lang.Object $r5;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        entermonitor r0;

     label1:
        $r4 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.nio.channels.SelectionKey) $r5;

     label3:
        if r3 == null goto label2;

     label4:
        z1 = virtualinvoke r3.<java.nio.channels.SelectionKey: boolean isValid()>();

     label5:
        if z1 == 0 goto label2;

        z0 = 1;

     label6:
        exitmonitor r0;

        return z0;

     label7:
        z0 = 0;

        goto label6;

     label8:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
    }

    public final java.lang.Object blockingLock()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Object $r1;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        $r1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock>;

        return $r1;
    }

    public final java.nio.channels.SelectableChannel configureBlocking(boolean) throws java.io.IOException
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        java.nio.channels.IllegalBlockingModeException $r3;
        java.nio.channels.ClosedChannelException $r4;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isOpen()>();

        if $z1 != 0 goto label01;

        $r4 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r4.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r4;

     label01:
        r1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock>;

        entermonitor r1;

     label02:
        $z2 = r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking>;

        if $z2 != z0 goto label04;

        exitmonitor r1;

     label03:
        return r0;

     label04:
        if z0 == 0 goto label09;

     label05:
        $z3 = specialinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean containsValidKeys()>();

        if $z3 == 0 goto label09;

        $r3 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r3.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r3;

     label06:
        $r5 := @caughtexception;

        r2 = $r5;

     label07:
        exitmonitor r1;

     label08:
        throw r2;

     label09:
        virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: void implConfigureBlocking(boolean)>(z0);

        r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking> = z0;

        exitmonitor r1;

     label10:
        return r0;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
    }

    void deregister(java.nio.channels.SelectionKey)
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.SelectionKey r1;
        java.lang.Throwable r2, $r5;
        java.util.List $r3, $r4;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        r1 := @parameter0: java.nio.channels.SelectionKey;

        entermonitor r0;

     label1:
        $r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        if $r3 == null goto label2;

        $r4 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected final void implCloseChannel() throws java.io.IOException
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Throwable r1, $r6;
        java.util.Iterator r2;
        java.nio.channels.SelectionKey r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        entermonitor r0;

     label1:
        virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: void implCloseSelectableChannel()>();

        $r4 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.nio.channels.SelectionKey) $r5;

     label3:
        if r3 == null goto label2;

     label4:
        virtualinvoke r3.<java.nio.channels.SelectionKey: void cancel()>();

     label5:
        goto label2;

     label6:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

        throw r1;

     label7:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    protected abstract void implCloseSelectableChannel() throws java.io.IOException;

    protected abstract void implConfigureBlocking(boolean) throws java.io.IOException;

    public final boolean isBlocking()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean z0;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        r1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock>;

        entermonitor r1;

     label1:
        z0 = r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final boolean isRegistered()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Throwable r1, $r3;
        boolean z0, z1;
        java.util.List $r2;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        entermonitor r0;

     label1:
        $r2 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

     label2:
        if z0 != 0 goto label4;

        z1 = 1;

     label3:
        exitmonitor r0;

        return z1;

     label4:
        z1 = 0;

        goto label3;

     label5:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public final java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.Selector r1, r5;
        java.lang.Throwable r2, $r8;
        java.util.Iterator r3;
        java.nio.channels.SelectionKey r4;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        r1 := @parameter0: java.nio.channels.Selector;

        entermonitor r0;

     label1:
        $r6 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.nio.channels.SelectionKey) $r7;

     label3:
        if r4 == null goto label2;

     label4:
        r5 = virtualinvoke r4.<java.nio.channels.SelectionKey: java.nio.channels.Selector selector()>();

     label5:
        if r5 != r1 goto label2;

     label6:
        exitmonitor r0;

        return r4;

     label7:
        r4 = null;

        goto label6;

     label8:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
    }

    public final java.nio.channels.spi.SelectorProvider provider()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.spi.SelectorProvider $r1;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        $r1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider>;

        return $r1;
    }

    public final java.nio.channels.SelectionKey register(java.nio.channels.Selector, int, java.lang.Object) throws java.nio.channels.ClosedChannelException
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.Selector r1;
        int i0, $i1, $i2, $i3;
        java.lang.Object r2, r3;
        java.lang.Throwable r4, $r18;
        java.nio.channels.SelectionKey r5;
        boolean $z0, $z1, $z2, $z3;
        java.nio.channels.spi.AbstractSelector $r8;
        java.nio.channels.CancelledKeyException $r9;
        java.util.List $r10;
        java.lang.NullPointerException $r11;
        java.nio.channels.IllegalBlockingModeException $r12;
        java.nio.channels.IllegalSelectorException $r13;
        java.lang.StringBuilder $r14, $r16, $r17;
        java.lang.IllegalArgumentException $r15;
        java.lang.String $r19;
        java.nio.channels.ClosedChannelException $r20;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        r1 := @parameter0: java.nio.channels.Selector;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $z0 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isOpen()>();

        if $z0 != 0 goto label01;

        $r20 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r20.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r20;

     label01:
        $i1 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: int validOps()>();

        $i2 = -1 ^ $i1;

        $i3 = i0 & $i2;

        if $i3 == 0 goto label02;

        $r15 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no valid ops in interest set: ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label02:
        r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock>;

        entermonitor r3;

     label03:
        $z1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking>;

        if $z1 == 0 goto label07;

        $r12 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r12.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r12;

     label04:
        $r18 := @caughtexception;

        r4 = $r18;

     label05:
        exitmonitor r3;

     label06:
        throw r4;

     label07:
        $z2 = virtualinvoke r1.<java.nio.channels.Selector: boolean isOpen()>();

        if $z2 != 0 goto label11;

     label08:
        if i0 != 0 goto label10;

     label09:
        $r13 = new java.nio.channels.IllegalSelectorException;

        specialinvoke $r13.<java.nio.channels.IllegalSelectorException: void <init>()>();

        throw $r13;

     label10:
        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("selector not open");

        throw $r11;

     label11:
        r5 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>(r1);

     label12:
        if r5 != null goto label16;

     label13:
        $r8 = (java.nio.channels.spi.AbstractSelector) r1;

        r5 = virtualinvoke $r8.<java.nio.channels.spi.AbstractSelector: java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)>(r0, i0, r2);

        $r10 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r5);

     label14:
        exitmonitor r3;

     label15:
        return r5;

     label16:
        $z3 = virtualinvoke r5.<java.nio.channels.SelectionKey: boolean isValid()>();

        if $z3 != 0 goto label17;

        $r9 = new java.nio.channels.CancelledKeyException;

        specialinvoke $r9.<java.nio.channels.CancelledKeyException: void <init>()>();

        throw $r9;

     label17:
        virtualinvoke r5.<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>(i0);

        virtualinvoke r5.<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)>(r2);

     label18:
        goto label14;

        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label11 to label12 with label04;
        catch java.lang.Throwable from label13 to label14 with label04;
        catch java.lang.Throwable from label14 to label15 with label04;
        catch java.lang.Throwable from label16 to label17 with label04;
        catch java.lang.Throwable from label17 to label18 with label04;
    }
}
