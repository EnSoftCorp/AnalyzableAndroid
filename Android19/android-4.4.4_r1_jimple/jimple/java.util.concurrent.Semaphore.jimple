public class java.util.concurrent.Semaphore extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.concurrent.Semaphore$Sync sync;

    public void <init>(int)
    {
        java.util.concurrent.Semaphore r0;
        int i0;
        java.util.concurrent.Semaphore$NonfairSync $r1;

        r0 := @this: java.util.concurrent.Semaphore;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.Semaphore$NonfairSync;

        specialinvoke $r1.<java.util.concurrent.Semaphore$NonfairSync: void <init>(int)>(i0);

        r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync> = $r1;

        return;
    }

    public void <init>(int, boolean)
    {
        java.util.concurrent.Semaphore r0;
        int i0;
        boolean z0;
        java.util.concurrent.Semaphore$Sync r1;
        java.util.concurrent.Semaphore$NonfairSync $r2;
        java.util.concurrent.Semaphore$FairSync $r3;

        r0 := @this: java.util.concurrent.Semaphore;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z0 == 0 goto label2;

        $r3 = new java.util.concurrent.Semaphore$FairSync;

        specialinvoke $r3.<java.util.concurrent.Semaphore$FairSync: void <init>(int)>(i0);

        r1 = $r3;

     label1:
        r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync> = r1;

        return;

     label2:
        $r2 = new java.util.concurrent.Semaphore$NonfairSync;

        specialinvoke $r2.<java.util.concurrent.Semaphore$NonfairSync: void <init>(int)>(i0);

        r1 = $r2;

        goto label1;
    }

    public void acquire() throws java.lang.InterruptedException
    {
        java.util.concurrent.Semaphore r0;
        java.util.concurrent.Semaphore$Sync $r1;

        r0 := @this: java.util.concurrent.Semaphore;

        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: void acquireSharedInterruptibly(int)>(1);

        return;
    }

    public void acquire(int) throws java.lang.InterruptedException
    {
        java.util.concurrent.Semaphore r0;
        int i0;
        java.util.concurrent.Semaphore$Sync $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.util.concurrent.Semaphore;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: void acquireSharedInterruptibly(int)>(i0);

        return;
    }

    public void acquireUninterruptibly()
    {
        java.util.concurrent.Semaphore r0;
        java.util.concurrent.Semaphore$Sync $r1;

        r0 := @this: java.util.concurrent.Semaphore;

        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: void acquireShared(int)>(1);

        return;
    }

    public void acquireUninterruptibly(int)
    {
        java.util.concurrent.Semaphore r0;
        int i0;
        java.util.concurrent.Semaphore$Sync $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.util.concurrent.Semaphore;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: void acquireShared(int)>(i0);

        return;
    }

    public int availablePermits()
    {
        java.util.concurrent.Semaphore r0;
        java.util.concurrent.Semaphore$Sync $r1;
        int $i0;

        r0 := @this: java.util.concurrent.Semaphore;

        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: int getPermits()>();

        return $i0;
    }

    public int drainPermits()
    {
        java.util.concurrent.Semaphore r0;
        java.util.concurrent.Semaphore$Sync $r1;
        int $i0;

        r0 := @this: java.util.concurrent.Semaphore;

        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: int drainPermits()>();

        return $i0;
    }

    public final int getQueueLength()
    {
        java.util.concurrent.Semaphore r0;
        java.util.concurrent.Semaphore$Sync $r1;
        int $i0;

        r0 := @this: java.util.concurrent.Semaphore;

        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: int getQueueLength()>();

        return $i0;
    }

    protected java.util.Collection getQueuedThreads()
    {
        java.util.concurrent.Semaphore r0;
        java.util.concurrent.Semaphore$Sync $r1;
        java.util.Collection $r2;

        r0 := @this: java.util.concurrent.Semaphore;

        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: java.util.Collection getQueuedThreads()>();

        return $r2;
    }

    public final boolean hasQueuedThreads()
    {
        java.util.concurrent.Semaphore r0;
        java.util.concurrent.Semaphore$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.Semaphore;

        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: boolean hasQueuedThreads()>();

        return $z0;
    }

    public boolean isFair()
    {
        java.util.concurrent.Semaphore r0;
        java.util.concurrent.Semaphore$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.Semaphore;

        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        $z0 = $r1 instanceof java.util.concurrent.Semaphore$FairSync;

        return $z0;
    }

    protected void reducePermits(int)
    {
        java.util.concurrent.Semaphore r0;
        int i0;
        java.util.concurrent.Semaphore$Sync $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.util.concurrent.Semaphore;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: void reducePermits(int)>(i0);

        return;
    }

    public void release()
    {
        java.util.concurrent.Semaphore r0;
        java.util.concurrent.Semaphore$Sync $r1;

        r0 := @this: java.util.concurrent.Semaphore;

        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: boolean releaseShared(int)>(1);

        return;
    }

    public void release(int)
    {
        java.util.concurrent.Semaphore r0;
        int i0;
        java.util.concurrent.Semaphore$Sync $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.util.concurrent.Semaphore;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: boolean releaseShared(int)>(i0);

        return;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.Semaphore r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7;
        java.lang.String $r2, $r8;
        java.util.concurrent.Semaphore$Sync $r5;
        int $i0;

        r0 := @this: java.util.concurrent.Semaphore;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Permits = ");

        $r5 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.Semaphore$Sync: int getPermits()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public boolean tryAcquire()
    {
        java.util.concurrent.Semaphore r0;
        java.util.concurrent.Semaphore$Sync $r1;
        int $i0;

        r0 := @this: java.util.concurrent.Semaphore;

        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: int nonfairTryAcquireShared(int)>(1);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean tryAcquire(int)
    {
        java.util.concurrent.Semaphore r0;
        int i0, $i1;
        java.util.concurrent.Semaphore$Sync $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.util.concurrent.Semaphore;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        $i1 = virtualinvoke $r1.<java.util.concurrent.Semaphore$Sync: int nonfairTryAcquireShared(int)>(i0);

        if $i1 < 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean tryAcquire(int, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.Semaphore r0;
        int i0;
        long l1, $l2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.Semaphore$Sync $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.util.concurrent.Semaphore;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.TimeUnit;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        $l2 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l1);

        $z0 = virtualinvoke $r2.<java.util.concurrent.Semaphore$Sync: boolean tryAcquireSharedNanos(int,long)>(i0, $l2);

        return $z0;
    }

    public boolean tryAcquire(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.Semaphore r0;
        long l0, $l1;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.Semaphore$Sync $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.Semaphore;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<java.util.concurrent.Semaphore: java.util.concurrent.Semaphore$Sync sync>;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $z0 = virtualinvoke $r2.<java.util.concurrent.Semaphore$Sync: boolean tryAcquireSharedNanos(int,long)>(1, $l1);

        return $z0;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.Semaphore: long serialVersionUID> = -3222578661600680210L;

        return;
    }
}
