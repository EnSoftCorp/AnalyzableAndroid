public class java.util.logging.LogManager extends java.lang.Object
{
    public static final java.lang.String LOGGING_MXBEAN_NAME;
    static java.util.logging.LogManager manager;
    private static final java.util.logging.LoggingPermission perm;
    private java.beans.PropertyChangeSupport listeners;
    private java.util.Hashtable loggers;
    private java.util.Properties props;

    static void <clinit>()
    {
        java.lang.String r0;
        java.lang.Exception r1, $r15;
        java.util.logging.Logger r2, $r6, $r8, $r10;
        java.util.logging.LoggingPermission $r3;
        java.util.logging.LogManager $r4, $r5, $r9, $r11, $r12, $r13;
        java.util.logging.Level $r7;
        java.lang.Object $r14;

        <java.util.logging.LogManager: java.lang.String LOGGING_MXBEAN_NAME> = "java.util.logging:type=Logging";

        $r3 = new java.util.logging.LoggingPermission;

        specialinvoke $r3.<java.util.logging.LoggingPermission: void <init>(java.lang.String,java.lang.String)>("control", null);

        <java.util.logging.LogManager: java.util.logging.LoggingPermission perm> = $r3;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.manager");

        if r0 == null goto label1;

        $r14 = staticinvoke <java.util.logging.LogManager: java.lang.Object getInstanceByClass(java.lang.String)>(r0);

        $r13 = (java.util.logging.LogManager) $r14;

        <java.util.logging.LogManager: java.util.logging.LogManager manager> = $r13;

     label1:
        $r4 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;

        if $r4 != null goto label2;

        $r12 = new java.util.logging.LogManager;

        specialinvoke $r12.<java.util.logging.LogManager: void <init>()>();

        <java.util.logging.LogManager: java.util.logging.LogManager manager> = $r12;

     label2:
        $r5 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;

        virtualinvoke $r5.<java.util.logging.LogManager: void readConfiguration()>();

     label3:
        $r6 = new java.util.logging.Logger;

        specialinvoke $r6.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String)>("", null);

        r2 = $r6;

        $r7 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke r2.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r7);

        $r8 = <java.util.logging.Logger: java.util.logging.Logger global>;

        virtualinvoke $r8.<java.util.logging.Logger: void setParent(java.util.logging.Logger)>(r2);

        $r9 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;

        virtualinvoke $r9.<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>(r2);

        $r11 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;

        $r10 = <java.util.logging.Logger: java.util.logging.Logger global>;

        virtualinvoke $r11.<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>($r10);

        return;

     label4:
        $r15 := @caughtexception;

        r1 = $r15;

        virtualinvoke r1.<java.lang.Exception: void printStackTrace()>();

        goto label3;

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void <init>()
    {
        java.util.logging.LogManager r0;
        java.util.Hashtable $r1;
        java.util.Properties $r2;
        java.beans.PropertyChangeSupport $r3;
        java.lang.Runtime $r4;
        java.util.logging.LogManager$1 $r5;

        r0 := @this: java.util.logging.LogManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<java.util.logging.LogManager: java.util.Hashtable loggers> = $r1;

        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

        r0.<java.util.logging.LogManager: java.util.Properties props> = $r2;

        $r3 = new java.beans.PropertyChangeSupport;

        specialinvoke $r3.<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>(r0);

        r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport listeners> = $r3;

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r5 = new java.util.logging.LogManager$1;

        specialinvoke $r5.<java.util.logging.LogManager$1: void <init>(java.util.logging.LogManager)>(r0);

        virtualinvoke $r4.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r5);

        return;
    }

    private void addToFamilyTree(java.util.logging.Logger, java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1, r3, r7, r8;
        java.lang.String r2, r4, r5, $r16, $r22, $r23, $r29, $r30;
        int i0, $i1;
        java.util.Iterator r6;
        java.lang.StringBuilder $r9, $r10, $r11, $r20, $r24, $r25, $r26, $r27, $r28;
        java.util.Hashtable $r12, $r18, $r19;
        java.util.Collection $r13;
        java.lang.Object $r14, $r17, $r21;
        boolean $z0, $z2;
        java.util.List $r15;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.util.logging.Logger;

        r2 := @parameter1: java.lang.String;

        r3 = null;

        r4 = r2;

     label1:
        i0 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 == -1 goto label2;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r19 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r21 = virtualinvoke $r19.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4);

        r3 = (java.util.logging.Logger) $r21;

        if r3 == null goto label6;

        virtualinvoke r0.<java.util.logging.LogManager: void setParent(java.util.logging.Logger,java.util.logging.Logger)>(r1, r3);

     label2:
        if r3 != null goto label3;

        $r18 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r17 = virtualinvoke $r18.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("");

        r3 = (java.util.logging.Logger) $r17;

        if r3 == null goto label3;

        virtualinvoke r0.<java.util.logging.LogManager: void setParent(java.util.logging.Logger,java.util.logging.Logger)>(r1, r3);

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r13 = virtualinvoke $r12.<java.util.Hashtable: java.util.Collection values()>();

        r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.logging.Logger) $r14;

        r8 = virtualinvoke r7.<java.util.logging.Logger: java.util.logging.Logger getParent()>();

        if r3 != r8 goto label4;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 == 0 goto label5;

        $r16 = virtualinvoke r7.<java.util.logging.Logger: java.lang.String getName()>();

        $z2 = virtualinvoke $r16.<java.lang.String: boolean startsWith(java.lang.String)>(r5);

        if $z2 == 0 goto label4;

     label5:
        virtualinvoke r7.<java.util.logging.Logger: void setParent(java.util.logging.Logger)>(r1);

        if r8 == null goto label4;

        $r15 = r8.<java.util.logging.Logger: java.util.List children>;

        interfaceinvoke $r15.<java.util.List: boolean remove(java.lang.Object)>(r7);

        goto label4;

     label6:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r22);

        if $r23 != null goto label7;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".handlers");

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r29);

        if $r30 == null goto label1;

     label7:
        r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r4);

        virtualinvoke r0.<java.util.logging.LogManager: void setParent(java.util.logging.Logger,java.util.logging.Logger)>(r1, r3);

        goto label2;

     label8:
        return;
    }

    static java.lang.Object getInstanceByClass(java.lang.String)
    {
        java.lang.String r0, $r13;
        java.lang.Exception r2, $r7, $r16;
        java.lang.Object r3, r4;
        java.lang.ClassLoader $r5, $r18;
        java.lang.Class $r6, $r17;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;
        java.io.PrintStream $r9, $r14;
        java.lang.Thread $r15;

        r0 := @parameter0: java.lang.String;

     label1:
        $r5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r6 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

        r4 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return r4;

     label3:
        $r16 := @caughtexception;

     label4:
        $r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r18 = virtualinvoke $r15.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r17 = virtualinvoke $r18.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

        r3 = virtualinvoke $r17.<java.lang.Class: java.lang.Object newInstance()>();

     label5:
        return r3;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading class \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' failed");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r14 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.Object)>(r2);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public static java.util.logging.LogManager getLogManager()
    {
        java.util.logging.LogManager $r0;

        $r0 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;

        return $r0;
    }

    public static java.util.logging.LoggingMXBean getLoggingMXBean()
    {
        java.lang.UnsupportedOperationException $r0;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    private void readConfigurationImpl(java.io.InputStream) throws java.io.IOException
    {
        java.util.logging.LogManager r0;
        java.io.InputStream r1;
        java.lang.Throwable r2, $r25;
        java.util.logging.Logger r3, r7;
        java.lang.String r4, r8, $r20, $r21, $r26;
        java.util.StringTokenizer r5, $r24;
        java.util.Iterator r6;
        java.util.Properties $r9, $r12, $r17;
        java.util.Hashtable $r10, $r13;
        java.lang.Object $r11, $r16;
        java.util.Collection $r14;
        java.beans.PropertyChangeSupport $r15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r18, $r19, $r22;
        java.util.logging.Level $r23;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.io.InputStream;

        entermonitor r0;

     label01:
        virtualinvoke r0.<java.util.logging.LogManager: void reset()>();

        $r9 = r0.<java.util.logging.LogManager: java.util.Properties props>;

        virtualinvoke $r9.<java.util.Properties: void load(java.io.InputStream)>(r1);

        $r10 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r11 = virtualinvoke $r10.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("");

        r3 = (java.util.logging.Logger) $r11;

     label02:
        if r3 == null goto label04;

     label03:
        virtualinvoke r3.<java.util.logging.Logger: void setManager(java.util.logging.LogManager)>(r0);

     label04:
        $r12 = r0.<java.util.logging.LogManager: java.util.Properties props>;

        r4 = virtualinvoke $r12.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("config");

     label05:
        if r4 == null goto label10;

     label06:
        $r24 = new java.util.StringTokenizer;

        specialinvoke $r24.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r4, " ");

        r5 = $r24;

     label07:
        $z1 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label10;

        $r26 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        staticinvoke <java.util.logging.LogManager: java.lang.Object getInstanceByClass(java.lang.String)>($r26);

     label08:
        goto label07;

     label09:
        $r25 := @caughtexception;

        r2 = $r25;

        exitmonitor r0;

        throw r2;

     label10:
        $r13 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r14 = virtualinvoke $r13.<java.util.Hashtable: java.util.Collection values()>();

        r6 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r16 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.logging.Logger) $r16;

        $r17 = r0.<java.util.logging.LogManager: java.util.Properties props>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r7.<java.util.logging.Logger: java.lang.String getName()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        r8 = virtualinvoke $r17.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r21);

     label12:
        if r8 == null goto label11;

     label13:
        $r23 = staticinvoke <java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>(r8);

        virtualinvoke r7.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r23);

     label14:
        goto label11;

     label15:
        $r15 = r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport listeners>;

        virtualinvoke $r15.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>(null, null, null);

     label16:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
        catch java.lang.Throwable from label15 to label16 with label09;
    }

    public boolean addLogger(java.util.logging.Logger)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1;
        java.lang.Throwable r2, $r8;
        java.lang.String r3;
        java.lang.Object r4;
        boolean z0;
        java.util.Hashtable $r5, $r6;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.util.logging.Logger;

        entermonitor r0;

     label1:
        r3 = virtualinvoke r1.<java.util.logging.Logger: java.lang.String getName()>();

        $r5 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        r4 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r3);

     label2:
        if r4 == null goto label4;

        z0 = 0;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        specialinvoke r0.<java.util.logging.LogManager: void addToFamilyTree(java.util.logging.Logger,java.lang.String)>(r1, r3);

        $r6 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r1);

        virtualinvoke r1.<java.util.logging.Logger: void setManager(java.util.logging.LogManager)>(r0);

     label5:
        z0 = 1;

        goto label3;

     label6:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void addPropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.util.logging.LogManager r0;
        java.beans.PropertyChangeListener r1;
        java.beans.PropertyChangeSupport $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("l == null");

        throw $r3;

     label1:
        virtualinvoke r0.<java.util.logging.LogManager: void checkAccess()>();

        $r2 = r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport listeners>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>(r1);

        return;
    }

    public void checkAccess()
    {
        java.util.logging.LogManager r0;

        r0 := @this: java.util.logging.LogManager;

        return;
    }

    public java.util.logging.Logger getLogger(java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r6;
        java.util.logging.Logger r3;
        java.util.Hashtable $r4;
        java.lang.Object $r5;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r4 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.logging.Logger) $r5;

     label2:
        exitmonitor r0;

        return r3;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.Enumeration getLoggerNames()
    {
        java.util.logging.LogManager r0;
        java.lang.Throwable r1, $r4;
        java.util.Enumeration r2;
        java.util.Hashtable $r3;

        r0 := @this: java.util.logging.LogManager;

        entermonitor r0;

     label1:
        $r3 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        r2 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration keys()>();

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    java.util.logging.Logger getOrCreate(java.lang.String, java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r2;
        java.lang.Throwable r3, $r6;
        java.util.logging.Logger r4, $r5;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        entermonitor r0;

     label1:
        r4 = virtualinvoke r0.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>(r1);

     label2:
        if r4 != null goto label4;

     label3:
        $r5 = new java.util.logging.Logger;

        specialinvoke $r5.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r4 = $r5;

        virtualinvoke r0.<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>(r4);

     label4:
        exitmonitor r0;

        return r4;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r0;

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public java.lang.String getProperty(java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, $r3;
        java.util.Properties $r2;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.util.logging.LogManager: java.util.Properties props>;

        $r3 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);

        return $r3;
    }

    public void readConfiguration() throws java.io.IOException
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r2, $r10, $r12, $r14;
        java.io.InputStream r3;
        java.io.FileInputStream r4, $r7;
        java.lang.Throwable r5, $r21;
        java.io.IOException r6, $r20;
        java.io.BufferedInputStream $r8;
        java.lang.StringBuilder $r9, $r11, $r13, $r15, $r16, $r17;
        java.lang.Object $r18;
        java.lang.Class $r19;

        r0 := @this: java.util.logging.LogManager;

        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.config.class");

        if r1 == null goto label01;

        $r18 = staticinvoke <java.util.logging.LogManager: java.lang.Object getInstanceByClass(java.lang.String)>(r1);

        if $r18 != null goto label07;

     label01:
        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.config.file");

        if r2 != null goto label02;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = <java.io.File: java.lang.String separator>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib");

        $r14 = <java.io.File: java.lang.String separator>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("logging.properties");

        r2 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        r3 = null;

     label03:
        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.lang.String)>(r2);

        r4 = $r7;

     label04:
        r3 = r4;

     label05:
        $r8 = new java.io.BufferedInputStream;

        specialinvoke $r8.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r3);

        virtualinvoke r0.<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>($r8);

     label06:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

     label07:
        return;

     label08:
        $r20 := @caughtexception;

        r6 = $r20;

     label09:
        $r19 = class "java/util/logging/LogManager";

        r3 = virtualinvoke $r19.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("logging.properties");

     label10:
        if r3 != null goto label05;

     label11:
        throw r6;

     label12:
        $r21 := @caughtexception;

        r5 = $r21;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        throw r5;

        catch java.io.IOException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public void readConfiguration(java.io.InputStream) throws java.io.IOException
    {
        java.util.logging.LogManager r0;
        java.io.InputStream r1;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.io.InputStream;

        virtualinvoke r0.<java.util.logging.LogManager: void checkAccess()>();

        specialinvoke r0.<java.util.logging.LogManager: void readConfigurationImpl(java.io.InputStream)>(r1);

        return;
    }

    public void removePropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.util.logging.LogManager r0;
        java.beans.PropertyChangeListener r1;
        java.beans.PropertyChangeSupport $r2;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        virtualinvoke r0.<java.util.logging.LogManager: void checkAccess()>();

        $r2 = r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport listeners>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>(r1);

        return;
    }

    public void reset()
    {
        java.util.logging.LogManager r0;
        java.lang.Throwable r1, $r11;
        java.util.Enumeration r2;
        java.util.logging.Logger r3, r4;
        java.util.Properties $r5;
        boolean $z0;
        java.util.Hashtable $r6;
        java.lang.Object $r7, $r9;
        java.util.logging.Level $r8;
        java.lang.String $r10;

        r0 := @this: java.util.logging.LogManager;

        entermonitor r0;

     label01:
        virtualinvoke r0.<java.util.logging.LogManager: void checkAccess()>();

        $r5 = new java.util.Properties;

        specialinvoke $r5.<java.util.Properties: void <init>()>();

        r0.<java.util.logging.LogManager: java.util.Properties props> = $r5;

        r2 = virtualinvoke r0.<java.util.logging.LogManager: java.util.Enumeration getLoggerNames()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label07;

        $r9 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r10 = (java.lang.String) $r9;

        r4 = virtualinvoke r0.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>($r10);

     label03:
        if r4 == null goto label02;

     label04:
        virtualinvoke r4.<java.util.logging.Logger: void reset()>();

     label05:
        goto label02;

     label06:
        $r11 := @caughtexception;

        r1 = $r11;

        exitmonitor r0;

        throw r1;

     label07:
        $r6 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("");

        r3 = (java.util.logging.Logger) $r7;

     label08:
        if r3 == null goto label10;

     label09:
        $r8 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke r3.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r8);

     label10:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
    }

    void setLevelRecursively(java.util.logging.Logger, java.util.logging.Level)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1, r5, $r8, $r12;
        java.util.logging.Level r2, $r9, $r10;
        java.lang.Throwable r3, $r11;
        int i0, i1, $i2, $i3;
        java.util.Iterator r4;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.util.logging.Logger;

        r2 := @parameter1: java.util.logging.Level;

        entermonitor r0;

     label01:
        i0 = r1.<java.util.logging.Logger: int levelIntVal>;

        r1.<java.util.logging.Logger: java.util.logging.Level levelObjVal> = r2;

     label02:
        if r2 != null goto label11;

     label03:
        $r8 = r1.<java.util.logging.Logger: java.util.logging.Logger parent>;

        if $r8 == null goto label09;

        $r12 = r1.<java.util.logging.Logger: java.util.logging.Logger parent>;

        i1 = $r12.<java.util.logging.Logger: int levelIntVal>;

     label04:
        r1.<java.util.logging.Logger: int levelIntVal> = i1;

     label05:
        $i3 = r1.<java.util.logging.Logger: int levelIntVal>;

        if i0 == $i3 goto label13;

        $r6 = r1.<java.util.logging.Logger: java.util.List children>;

        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.logging.Logger) $r7;

        $r9 = r5.<java.util.logging.Logger: java.util.logging.Level levelObjVal>;

        if $r9 != null goto label06;

        virtualinvoke r0.<java.util.logging.LogManager: void setLevelRecursively(java.util.logging.Logger,java.util.logging.Level)>(r5, null);

     label07:
        goto label06;

     label08:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r0;

        throw r3;

     label09:
        $r10 = <java.util.logging.Level: java.util.logging.Level INFO>;

        i1 = virtualinvoke $r10.<java.util.logging.Level: int intValue()>();

     label10:
        goto label04;

     label11:
        $i2 = virtualinvoke r2.<java.util.logging.Level: int intValue()>();

        r1.<java.util.logging.Logger: int levelIntVal> = $i2;

     label12:
        goto label05;

     label13:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label11 to label12 with label08;
    }

    void setParent(java.util.logging.Logger, java.util.logging.Logger)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1, r2;
        java.lang.Throwable r3, $r6;
        java.util.logging.Level $r4;
        java.util.List $r5;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.util.logging.Logger;

        r2 := @parameter1: java.util.logging.Logger;

        entermonitor r0;

     label1:
        r1.<java.util.logging.Logger: java.util.logging.Logger parent> = r2;

        $r4 = r1.<java.util.logging.Logger: java.util.logging.Level levelObjVal>;

        if $r4 != null goto label2;

        virtualinvoke r0.<java.util.logging.LogManager: void setLevelRecursively(java.util.logging.Logger,java.util.logging.Level)>(r1, null);

     label2:
        $r5 = r2.<java.util.logging.Logger: java.util.List children>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        virtualinvoke r1.<java.util.logging.Logger: void updateDalvikLogHandler()>();

     label3:
        exitmonitor r0;

        return;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r0;

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }
}
