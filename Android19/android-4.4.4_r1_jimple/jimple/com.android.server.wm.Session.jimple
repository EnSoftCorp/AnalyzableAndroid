final class com.android.server.wm.Session extends android.view.IWindowSession$Stub implements android.os.IBinder$DeathRecipient
{
    final com.android.internal.view.IInputMethodClient mClient;
    boolean mClientDead;
    final com.android.internal.view.IInputContext mInputContext;
    int mNumWindow;
    final int mPid;
    final com.android.server.wm.WindowManagerService mService;
    final java.lang.String mStringName;
    android.view.SurfaceSession mSurfaceSession;
    final int mUid;

    public void <init>(com.android.server.wm.WindowManagerService, com.android.internal.view.IInputMethodClient, com.android.internal.view.IInputContext)
    {
        com.android.server.wm.Session r0;
        com.android.server.wm.WindowManagerService r1, $r21, $r25, $r28, $r30, $r31, $r32, $r37, $r39;
        com.android.internal.view.IInputMethodClient r2;
        com.android.internal.view.IInputContext r3;
        java.lang.StringBuilder r4, $r12;
        java.util.HashMap r5;
        java.lang.Throwable r6, r8, $r41, $r42;
        long l0;
        android.os.IBinder r9, $r26;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r13, $r20;
        com.android.internal.view.IInputMethodManager $r24, $r27, $r29, $r35, $r38, $r43;
        boolean $z0;
        android.os.RemoteException $r36, $r40;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.internal.view.IInputMethodClient;

        r3 := @parameter2: com.android.internal.view.IInputContext;

        specialinvoke r0.<android.view.IWindowSession$Stub: void <init>()>();

        r0.<com.android.server.wm.Session: int mNumWindow> = 0;

        r0.<com.android.server.wm.Session: boolean mClientDead> = 0;

        r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService> = r1;

        r0.<com.android.server.wm.Session: com.android.internal.view.IInputMethodClient mClient> = r2;

        r0.<com.android.server.wm.Session: com.android.internal.view.IInputContext mInputContext> = r3;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r0.<com.android.server.wm.Session: int mUid> = $i2;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        r0.<com.android.server.wm.Session: int mPid> = $i1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        r4 = $r12;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session{");

        $i3 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i4 = r0.<com.android.server.wm.Session: int mPid>;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $i7 = r0.<com.android.server.wm.Session: int mUid>;

        if $i7 >= 10000 goto label08;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i12 = r0.<com.android.server.wm.Session: int mUid>;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

     label01:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r20 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.server.wm.Session: java.lang.String mStringName> = $r20;

        $r21 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r5 = $r21.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r5;

     label02:
        $r25 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r24 = $r25.<com.android.server.wm.WindowManagerService: com.android.internal.view.IInputMethodManager mInputMethodManager>;

        if $r24 != null goto label03;

        $r32 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $z0 = $r32.<com.android.server.wm.WindowManagerService: boolean mHaveInputMethods>;

        if $z0 == 0 goto label03;

        r9 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("input_method");

        $r31 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r35 = staticinvoke <com.android.internal.view.IInputMethodManager$Stub: com.android.internal.view.IInputMethodManager asInterface(android.os.IBinder)>(r9);

        $r31.<com.android.server.wm.WindowManagerService: com.android.internal.view.IInputMethodManager mInputMethodManager> = $r35;

     label03:
        exitmonitor r5;

     label04:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        $r28 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r27 = $r28.<com.android.server.wm.WindowManagerService: com.android.internal.view.IInputMethodManager mInputMethodManager>;

        if $r27 == null goto label12;

        $r30 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r29 = $r30.<com.android.server.wm.WindowManagerService: com.android.internal.view.IInputMethodManager mInputMethodManager>;

        $i10 = r0.<com.android.server.wm.Session: int mUid>;

        $i11 = r0.<com.android.server.wm.Session: int mPid>;

        interfaceinvoke $r29.<com.android.internal.view.IInputMethodManager: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)>(r2, r3, $i10, $i11);

     label06:
        $r26 = interfaceinvoke r2.<com.android.internal.view.IInputMethodClient: android.os.IBinder asBinder()>();

        interfaceinvoke $r26.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label08:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":u");

        $i5 = r0.<com.android.server.wm.Session: int mUid>;

        $i6 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i5);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(97);

        $i8 = r0.<com.android.server.wm.Session: int mUid>;

        $i9 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i8);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        goto label01;

     label09:
        $r41 := @caughtexception;

        r6 = $r41;

     label10:
        exitmonitor r5;

     label11:
        throw r6;

     label12:
        interfaceinvoke r2.<com.android.internal.view.IInputMethodClient: void setUsingInputMethod(boolean)>(0);

     label13:
        goto label06;

     label14:
        $r36 := @caughtexception;

     label15:
        $r37 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r38 = $r37.<com.android.server.wm.WindowManagerService: com.android.internal.view.IInputMethodManager mInputMethodManager>;

        if $r38 == null goto label16;

        $r39 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r43 = $r39.<com.android.server.wm.WindowManagerService: com.android.internal.view.IInputMethodManager mInputMethodManager>;

        interfaceinvoke $r43.<com.android.internal.view.IInputMethodManager: void removeClient(com.android.internal.view.IInputMethodClient)>(r2);

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label17:
        $r42 := @caughtexception;

        r8 = $r42;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r8;

     label18:
        $r40 := @caughtexception;

        goto label16;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch android.os.RemoteException from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch android.os.RemoteException from label06 to label07 with label14;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch android.os.RemoteException from label15 to label16 with label18;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    public int add(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, android.graphics.Rect, android.view.InputChannel)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0, i1, $i2;
        android.view.WindowManager$LayoutParams r2;
        android.graphics.Rect r3;
        android.view.InputChannel r4;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.WindowManager$LayoutParams;

        i1 := @parameter3: int;

        r3 := @parameter4: android.graphics.Rect;

        r4 := @parameter5: android.view.InputChannel;

        $i2 = virtualinvoke r0.<com.android.server.wm.Session: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)>(r1, i0, r2, i1, 0, r3, r4);

        return $i2;
    }

    public int addToDisplay(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, android.graphics.Rect, android.view.InputChannel)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0, i1, i2, $i3;
        android.view.WindowManager$LayoutParams r2;
        android.graphics.Rect r3;
        android.view.InputChannel r4;
        com.android.server.wm.WindowManagerService $r5;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.WindowManager$LayoutParams;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.graphics.Rect;

        r4 := @parameter6: android.view.InputChannel;

        $r5 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $i3 = virtualinvoke $r5.<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)>(r0, r1, i0, r2, i1, i2, r3, r4);

        return $i3;
    }

    public int addToDisplayWithoutInputChannel(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, android.graphics.Rect)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0, i1, i2, $i3;
        android.view.WindowManager$LayoutParams r2;
        android.graphics.Rect r3;
        com.android.server.wm.WindowManagerService $r4;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.WindowManager$LayoutParams;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.graphics.Rect;

        $r4 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $i3 = virtualinvoke $r4.<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)>(r0, r1, i0, r2, i1, i2, r3, null);

        return $i3;
    }

    public int addWithoutInputChannel(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, android.graphics.Rect)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0, i1, $i2;
        android.view.WindowManager$LayoutParams r2;
        android.graphics.Rect r3;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.WindowManager$LayoutParams;

        i1 := @parameter3: int;

        r3 := @parameter4: android.graphics.Rect;

        $i2 = virtualinvoke r0.<com.android.server.wm.Session: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)>(r1, i0, r2, i1, 0, r3);

        return $i2;
    }

    public void binderDied()
    {
        com.android.server.wm.Session r0;
        java.util.HashMap r2;
        java.lang.Throwable r3, $r12;
        com.android.server.wm.WindowManagerService $r4, $r6, $r9;
        com.android.internal.view.IInputMethodManager $r5, $r11;
        com.android.internal.view.IInputMethodClient $r7, $r10;
        android.os.IBinder $r8;
        android.os.RemoteException $r13;

        r0 := @this: com.android.server.wm.Session;

     label1:
        $r4 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.internal.view.IInputMethodManager mInputMethodManager>;

        if $r5 == null goto label2;

        $r9 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r11 = $r9.<com.android.server.wm.WindowManagerService: com.android.internal.view.IInputMethodManager mInputMethodManager>;

        $r10 = r0.<com.android.server.wm.Session: com.android.internal.view.IInputMethodClient mClient>;

        interfaceinvoke $r11.<com.android.internal.view.IInputMethodManager: void removeClient(com.android.internal.view.IInputMethodClient)>($r10);

     label2:
        $r6 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r2 = $r6.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r2;

     label3:
        $r7 = r0.<com.android.server.wm.Session: com.android.internal.view.IInputMethodClient mClient>;

        $r8 = interfaceinvoke $r7.<com.android.internal.view.IInputMethodClient: android.os.IBinder asBinder()>();

        interfaceinvoke $r8.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0);

        r0.<com.android.server.wm.Session: boolean mClientDead> = 1;

        virtualinvoke r0.<com.android.server.wm.Session: void killSessionLocked()>();

        exitmonitor r2;

     label4:
        return;

     label5:
        $r12 := @caughtexception;

        r3 = $r12;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $r13 := @caughtexception;

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void dragRecipientEntered(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        return;
    }

    public void dragRecipientExited(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        return;
    }

    void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.Session r0;
        java.io.PrintWriter r1;
        java.lang.String r2;
        int $i0;
        boolean $z0;
        android.view.SurfaceSession $r3;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mNumWindow=");

        $i0 = r0.<com.android.server.wm.Session: int mNumWindow>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mClientDead=");

        $z0 = r0.<com.android.server.wm.Session: boolean mClientDead>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mSurfaceSession=");

        $r3 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r3);

        return;
    }

    public void finishDrawing(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void finishDrawingWindow(com.android.server.wm.Session,android.view.IWindow)>(r0, r1);

        return;
    }

    public void getDisplayFrame(android.view.IWindow, android.graphics.Rect)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        android.graphics.Rect r2;
        com.android.server.wm.WindowManagerService $r3;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.graphics.Rect;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void getWindowDisplayFrame(com.android.server.wm.Session,android.view.IWindow,android.graphics.Rect)>(r0, r1, r2);

        return;
    }

    public boolean getInTouchMode()
    {
        com.android.server.wm.Session r0;
        java.util.HashMap r1;
        java.lang.Throwable r2, $r5;
        boolean z0;
        com.android.server.wm.WindowManagerService $r3, $r4;

        r0 := @this: com.android.server.wm.Session;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        z0 = $r4.<com.android.server.wm.WindowManagerService: boolean mInTouchMode>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.view.IWindowId getWindowId(android.os.IBinder)
    {
        com.android.server.wm.Session r0;
        android.os.IBinder r1;
        com.android.server.wm.WindowManagerService $r2;
        android.view.IWindowId $r3;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: android.view.IWindowId getWindowId(android.os.IBinder)>(r1);

        return $r3;
    }

    void killSessionLocked()
    {
        com.android.server.wm.Session r0;
        java.lang.Exception r1, $r6;
        int $i0;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r2;
        java.util.HashSet $r3;
        android.view.SurfaceSession $r4, $r5, $r9;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12, $r14, $r16;
        java.lang.String $r13, $r15;

        r0 := @this: com.android.server.wm.Session;

        $i0 = r0.<com.android.server.wm.Session: int mNumWindow>;

        if $i0 > 0 goto label3;

        $z0 = r0.<com.android.server.wm.Session: boolean mClientDead>;

        if $z0 == 0 goto label3;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: java.util.HashSet mSessions>;

        virtualinvoke $r3.<java.util.HashSet: boolean remove(java.lang.Object)>(r0);

        $r4 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        if $r4 == null goto label3;

     label1:
        $r5 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        virtualinvoke $r5.<android.view.SurfaceSession: void kill()>();

     label2:
        r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession> = null;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown when killing surface session ");

        $r9 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in session ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r13 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r15);

        goto label2;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public void onRectangleOnScreenRequested(android.os.IBinder, android.graphics.Rect, boolean)
    {
        com.android.server.wm.Session r0;
        android.os.IBinder r1;
        android.graphics.Rect r2;
        boolean z0;
        java.util.HashMap r3;
        java.lang.Throwable r4, r5, $r8, $r9;
        long l0;
        com.android.server.wm.WindowManagerService $r6, $r7;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        $r6 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r3 = $r6.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r3;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r7 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r7.<com.android.server.wm.WindowManagerService: void onRectangleOnScreenRequested(android.os.IBinder,android.graphics.Rect,boolean)>(r1, r2, z0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r3;

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        r5 = $r9;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r5;

     label7:
        $r8 := @caughtexception;

        r4 = $r8;

     label8:
        exitmonitor r3;

     label9:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        com.android.server.wm.Session r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        java.lang.RuntimeException r3, $r4;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.Session;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Parcel;

        r2 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

     label1:
        z0 = specialinvoke r0.<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r1, r2, i1);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $z1 = r3 instanceof java.lang.SecurityException;

        if $z1 != 0 goto label4;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Window Session Crash", r3);

     label4:
        throw r3;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public boolean outOfMemory(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        com.android.server.wm.WindowManagerService $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: boolean outOfMemoryWindow(com.android.server.wm.Session,android.view.IWindow)>(r0, r1);

        return $z0;
    }

    public void performDeferredDestroy(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void performDeferredDestroyWindow(com.android.server.wm.Session,android.view.IWindow)>(r0, r1);

        return;
    }

    public boolean performDrag(android.view.IWindow, android.os.IBinder, float, float, float, float, android.content.ClipData)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        android.os.IBinder r2, $r14, $r19;
        float f0, f1, f2, f3, f4, f5;
        android.content.ClipData r3;
        java.util.HashMap r4;
        java.lang.Throwable r5, r10, $r58, $r59;
        com.android.server.wm.WindowState r6;
        android.view.Display r7;
        android.view.SurfaceControl r8;
        com.android.server.wm.WindowManagerService $r9, $r11, $r12, $r16, $r18, $r21, $r23, $r27, $r28, $r29, $r33, $r35, $r36, $r38, $r40, $r42, $r45, $r47, $r51, $r52;
        com.android.server.wm.DragState $r13, $r15, $r24, $r25, $r32, $r34, $r37, $r39, $r41, $r43, $r44, $r46, $r50;
        com.android.server.wm.WindowManagerService$H $r17;
        com.android.server.wm.DisplayContent $r20;
        com.android.server.wm.InputMonitor $r22, $r53;
        android.view.InputChannel $r26, $r30;
        boolean $z0;
        com.android.server.input.InputManagerService $r31;
        int $i0, $i2;
        java.lang.StringBuilder $r48, $r49, $r56;
        java.lang.IllegalStateException $r54, $r55;
        java.lang.String $r57;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.os.IBinder;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        r3 := @parameter6: android.content.ClipData;

        $r9 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r4 = $r9.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r4;

     label01:
        $r11 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r13 = $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        if $r13 != null goto label05;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "No drag prepared");

        $r55 = new java.lang.IllegalStateException;

        specialinvoke $r55.<java.lang.IllegalStateException: void <init>(java.lang.String)>("performDrag() without prepareDrag()");

        throw $r55;

     label02:
        $r58 := @caughtexception;

        r5 = $r58;

     label03:
        exitmonitor r4;

     label04:
        throw r5;

     label05:
        $r12 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r15 = $r12.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        $r14 = $r15.<com.android.server.wm.DragState: android.os.IBinder mToken>;

        if r2 == $r14 goto label06;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Performing mismatched drag");

        $r54 = new java.lang.IllegalStateException;

        specialinvoke $r54.<java.lang.IllegalStateException: void <init>(java.lang.String)>("performDrag() does not match prepareDrag()");

        throw $r54;

     label06:
        $r16 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r6 = virtualinvoke $r16.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(null, r1, 0);

     label07:
        if r6 != null goto label10;

     label08:
        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad requesting window ");

        $r56 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r57);

        exitmonitor r4;

     label09:
        return 0;

     label10:
        $r18 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r17 = $r18.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r19 = interfaceinvoke r1.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r17.<com.android.server.wm.WindowManagerService$H: void removeMessages(int,java.lang.Object)>(20, $r19);

        $r20 = r6.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent mDisplayContent>;

        r7 = virtualinvoke $r20.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $r23 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r24 = $r23.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r24.<com.android.server.wm.DragState: void register(android.view.Display)>(r7);

        $r21 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r22 = $r21.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r22.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        $r27 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r31 = $r27.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $r30 = r6.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        $r28 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r25 = $r28.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        $r26 = $r25.<com.android.server.wm.DragState: android.view.InputChannel mServerChannel>;

        $z0 = virtualinvoke $r31.<com.android.server.input.InputManagerService: boolean transferTouchFocus(android.view.InputChannel,android.view.InputChannel)>($r30, $r26);

        if $z0 != 0 goto label12;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Unable to transfer touch focus");

        $r47 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r50 = $r47.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r50.<com.android.server.wm.DragState: void unregister()>();

        $r51 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r51.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState> = null;

        $r52 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r53 = $r52.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r53.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        exitmonitor r4;

     label11:
        return 0;

     label12:
        $r29 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r34 = $r29.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        $r34.<com.android.server.wm.DragState: android.content.ClipData mData> = r3;

        $r35 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r32 = $r35.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        $r32.<com.android.server.wm.DragState: float mCurrentX> = f0;

        $r33 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r39 = $r33.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        $r39.<com.android.server.wm.DragState: float mCurrentY> = f1;

        $r38 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r37 = $r38.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r37.<com.android.server.wm.DragState: void broadcastDragStartedLw(float,float)>(f0, f1);

        $r36 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r43 = $r36.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        $r43.<com.android.server.wm.DragState: float mThumbOffsetX> = f2;

        $r42 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r41 = $r42.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        $r41.<com.android.server.wm.DragState: float mThumbOffsetY> = f3;

        $r40 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r46 = $r40.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        r8 = $r46.<com.android.server.wm.DragState: android.view.SurfaceControl mSurfaceControl>;

        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label13:
        f4 = f0 - f2;

        f5 = f1 - f3;

     label14:
        virtualinvoke r8.<android.view.SurfaceControl: void setPosition(float,float)>(f4, f5);

        virtualinvoke r8.<android.view.SurfaceControl: void setAlpha(float)>(0.7071F);

        $r45 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r44 = $r45.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        $i0 = virtualinvoke $r44.<com.android.server.wm.DragState: int getDragLayerLw()>();

        virtualinvoke r8.<android.view.SurfaceControl: void setLayer(int)>($i0);

        $i2 = virtualinvoke r7.<android.view.Display: int getLayerStack()>();

        virtualinvoke r8.<android.view.SurfaceControl: void setLayerStack(int)>($i2);

        virtualinvoke r8.<android.view.SurfaceControl: void show()>();

     label15:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        exitmonitor r4;

     label16:
        return 1;

     label17:
        $r59 := @caughtexception;

        r10 = $r59;

     label18:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

     label19:
        throw r10;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
        catch java.lang.Throwable from label12 to label13 with label02;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label02;
        catch java.lang.Throwable from label18 to label19 with label02;
    }

    public boolean performHapticFeedback(android.view.IWindow, int, boolean)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0;
        boolean z0, z1;
        java.util.HashMap r2;
        java.lang.Throwable r3, r4, $r10, $r11;
        long l1;
        com.android.server.wm.WindowManagerService $r5, $r6, $r7;
        android.view.WindowManagerPolicy $r8;
        com.android.server.wm.WindowState $r9;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r5 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r2 = $r5.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r2;

     label1:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r6 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r8 = $r6.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r7 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r9 = virtualinvoke $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r0, r1, 1);

        z1 = interfaceinvoke $r8.<android.view.WindowManagerPolicy: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>($r9, i0, z0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r2;

     label4:
        return z1;

     label5:
        $r11 := @caughtexception;

        r4 = $r11;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

     label7:
        $r10 := @caughtexception;

        r3 = $r10;

     label8:
        exitmonitor r2;

     label9:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.os.IBinder prepareDrag(android.view.IWindow, int, int, int, android.view.Surface)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0, i1, i2;
        android.view.Surface r2;
        android.view.SurfaceSession $r3;
        com.android.server.wm.WindowManagerService $r4;
        android.os.IBinder $r5;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: android.view.Surface;

        $r4 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r3 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowManagerService: android.os.IBinder prepareDragSurface(android.view.IWindow,android.view.SurfaceSession,int,int,int,android.view.Surface)>(r1, $r3, i0, i1, i2, r2);

        return $r5;
    }

    public int relayout(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, int, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.content.res.Configuration, android.view.Surface)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0, i1, i2, i3, i4, $i5;
        android.view.WindowManager$LayoutParams r2;
        android.graphics.Rect r3, r4, r5, r6;
        android.content.res.Configuration r7;
        android.view.Surface r8;
        com.android.server.wm.WindowManagerService $r9;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.WindowManager$LayoutParams;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        r3 := @parameter7: android.graphics.Rect;

        r4 := @parameter8: android.graphics.Rect;

        r5 := @parameter9: android.graphics.Rect;

        r6 := @parameter10: android.graphics.Rect;

        r7 := @parameter11: android.content.res.Configuration;

        r8 := @parameter12: android.view.Surface;

        $r9 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $i5 = virtualinvoke $r9.<com.android.server.wm.WindowManagerService: int relayoutWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.content.res.Configuration,android.view.Surface)>(r0, r1, i0, r2, i1, i2, i3, i4, r3, r4, r5, r6, r7, r8);

        return $i5;
    }

    public void remove(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void removeWindow(com.android.server.wm.Session,android.view.IWindow)>(r0, r1);

        return;
    }

    public void reportDropResult(android.view.IWindow, boolean)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        boolean z0;
        android.os.IBinder r2, $r10, $r14;
        java.util.HashMap r3;
        java.lang.Throwable r4, r5, $r30, $r31;
        long l0;
        com.android.server.wm.WindowManagerService $r6, $r7, $r9, $r13, $r16, $r18, $r20;
        com.android.server.wm.DragState $r8, $r11, $r17, $r19;
        com.android.server.wm.WindowManagerService$H $r12;
        com.android.server.wm.WindowState $r15;
        java.lang.StringBuilder $r21, $r22, $r23, $r25, $r26, $r27;
        java.lang.String $r24, $r29;
        java.lang.IllegalStateException $r28;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        z0 := @parameter1: boolean;

        r2 = interfaceinvoke r1.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r6 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r3 = $r6.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r3;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r7 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        if $r8 != null goto label05;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Drop result given but no drag in progress");

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r3;

     label04:
        return;

     label05:
        $r9 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r11 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        $r10 = $r11.<com.android.server.wm.DragState: android.os.IBinder mToken>;

        if $r10 == r2 goto label11;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid drop-result claim by ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r29);

        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("reportDropResult() by non-recipient");

        throw $r28;

     label06:
        $r30 := @caughtexception;

        r5 = $r30;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r5;

     label08:
        $r31 := @caughtexception;

        r4 = $r31;

     label09:
        exitmonitor r3;

     label10:
        throw r4;

     label11:
        $r13 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r12 = $r13.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r14 = interfaceinvoke r1.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r12.<com.android.server.wm.WindowManagerService$H: void removeMessages(int,java.lang.Object)>(21, $r14);

        $r16 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r15 = virtualinvoke $r16.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(null, r1, 0);

        if $r15 != null goto label14;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad result-reporting window ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r24);

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r3;

     label13:
        return;

     label14:
        $r18 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r17 = $r18.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        $r17.<com.android.server.wm.DragState: boolean mDragResult> = z0;

        $r20 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r19 = $r20.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r19.<com.android.server.wm.DragState: void endDragLw()>();

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r3;

     label16:
        return;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label11 to label12 with label06;
        catch java.lang.Throwable from label12 to label13 with label08;
        catch java.lang.Throwable from label14 to label15 with label06;
        catch java.lang.Throwable from label15 to label16 with label08;
    }

    public android.os.Bundle sendWallpaperCommand(android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle, boolean)
    {
        com.android.server.wm.Session r0;
        android.os.IBinder r1;
        java.lang.String r2;
        int i0, i1, i2;
        android.os.Bundle r3, r7;
        boolean z0;
        java.util.HashMap r4;
        java.lang.Throwable r5, r6, $r12, $r13;
        long l3;
        com.android.server.wm.WindowManagerService $r8, $r9, $r11;
        com.android.server.wm.WindowState $r10;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.Bundle;

        z0 := @parameter6: boolean;

        $r8 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r4 = $r8.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r4;

     label1:
        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r11 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r9 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>(r0, r1, 1);

        r7 = virtualinvoke $r11.<com.android.server.wm.WindowManagerService: android.os.Bundle sendWindowWallpaperCommandLocked(com.android.server.wm.WindowState,java.lang.String,int,int,int,android.os.Bundle,boolean)>($r10, r2, i0, i1, i2, r3, z0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        exitmonitor r4;

     label4:
        return r7;

     label5:
        $r13 := @caughtexception;

        r6 = $r13;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r6;

     label7:
        $r12 := @caughtexception;

        r5 = $r12;

     label8:
        exitmonitor r4;

     label9:
        throw r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setInTouchMode(boolean)
    {
        com.android.server.wm.Session r0;
        boolean z0;
        java.util.HashMap r1;
        java.lang.Throwable r2, $r5;
        com.android.server.wm.WindowManagerService $r3, $r4;

        r0 := @this: com.android.server.wm.Session;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r4.<com.android.server.wm.WindowManagerService: boolean mInTouchMode> = z0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setInsets(android.view.IWindow, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Region)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0;
        android.graphics.Rect r2, r3;
        android.graphics.Region r4;
        com.android.server.wm.WindowManagerService $r5;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.graphics.Rect;

        r3 := @parameter3: android.graphics.Rect;

        r4 := @parameter4: android.graphics.Region;

        $r5 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService: void setInsetsWindow(com.android.server.wm.Session,android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>(r0, r1, i0, r2, r3, r4);

        return;
    }

    public void setTransparentRegion(android.view.IWindow, android.graphics.Region)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        android.graphics.Region r2;
        com.android.server.wm.WindowManagerService $r3;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.graphics.Region;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void setTransparentRegionWindow(com.android.server.wm.Session,android.view.IWindow,android.graphics.Region)>(r0, r1, r2);

        return;
    }

    public void setUniverseTransform(android.os.IBinder, float, float, float, float, float, float, float)
    {
        com.android.server.wm.Session r0;
        android.os.IBinder r1;
        float f0, f1, f2, f3, f4, f5, f6;
        java.util.HashMap r2;
        java.lang.Throwable r3, r4, $r9, $r10;
        long l0;
        com.android.server.wm.WindowManagerService $r5, $r6, $r8;
        com.android.server.wm.WindowState $r7;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.os.IBinder;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        f4 := @parameter5: float;

        f5 := @parameter6: float;

        f6 := @parameter7: float;

        $r5 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r2 = $r5.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r2;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r8 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r6 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>(r0, r1, 1);

        virtualinvoke $r8.<com.android.server.wm.WindowManagerService: void setUniverseTransformLocked(com.android.server.wm.WindowState,float,float,float,float,float,float,float)>($r7, f0, f1, f2, f3, f4, f5, f6);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label4:
        return;

     label5:
        $r10 := @caughtexception;

        r4 = $r10;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label7:
        $r9 := @caughtexception;

        r3 = $r9;

     label8:
        exitmonitor r2;

     label9:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setWallpaperPosition(android.os.IBinder, float, float, float, float)
    {
        com.android.server.wm.Session r0;
        android.os.IBinder r1;
        float f0, f1, f2, f3;
        java.util.HashMap r2;
        java.lang.Throwable r3, r4, $r9, $r10;
        long l0;
        com.android.server.wm.WindowManagerService $r5, $r6, $r7;
        com.android.server.wm.WindowState $r8;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.os.IBinder;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        $r5 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r2 = $r5.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r2;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r7 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r6 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r8 = virtualinvoke $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>(r0, r1, 1);

        virtualinvoke $r7.<com.android.server.wm.WindowManagerService: void setWindowWallpaperPositionLocked(com.android.server.wm.WindowState,float,float,float,float)>($r8, f0, f1, f2, f3);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label4:
        return;

     label5:
        $r10 := @caughtexception;

        r4 = $r10;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label7:
        $r9 := @caughtexception;

        r3 = $r9;

     label8:
        exitmonitor r2;

     label9:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.String toString()
    {
        com.android.server.wm.Session r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.wm.Session;

        $r1 = r0.<com.android.server.wm.Session: java.lang.String mStringName>;

        return $r1;
    }

    public void wallpaperCommandComplete(android.os.IBinder, android.os.Bundle)
    {
        com.android.server.wm.Session r0;
        android.os.IBinder r1;
        android.os.Bundle r2;
        com.android.server.wm.WindowManagerService $r3;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.Bundle;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>(r1, r2);

        return;
    }

    public void wallpaperOffsetsComplete(android.os.IBinder)
    {
        com.android.server.wm.Session r0;
        android.os.IBinder r1;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void wallpaperOffsetsComplete(android.os.IBinder)>(r1);

        return;
    }

    void windowAddedLocked()
    {
        com.android.server.wm.Session r0;
        android.view.SurfaceSession $r1, $r2;
        int $i0, $i1;
        com.android.server.wm.WindowManagerService $r3;
        java.util.HashSet $r4;

        r0 := @this: com.android.server.wm.Session;

        $r1 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        if $r1 != null goto label1;

        $r2 = new android.view.SurfaceSession;

        specialinvoke $r2.<android.view.SurfaceSession: void <init>()>();

        r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession> = $r2;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: java.util.HashSet mSessions>;

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>(r0);

     label1:
        $i0 = r0.<com.android.server.wm.Session: int mNumWindow>;

        $i1 = 1 + $i0;

        r0.<com.android.server.wm.Session: int mNumWindow> = $i1;

        return;
    }

    void windowRemovedLocked()
    {
        com.android.server.wm.Session r0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.Session;

        $i0 = r0.<com.android.server.wm.Session: int mNumWindow>;

        $i1 = -1 + $i0;

        r0.<com.android.server.wm.Session: int mNumWindow> = $i1;

        virtualinvoke r0.<com.android.server.wm.Session: void killSessionLocked()>();

        return;
    }
}
