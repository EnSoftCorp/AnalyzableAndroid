public class com.android.uiautomator.core.UiDevice extends java.lang.Object
{
    private static final long KEY_PRESS_EVENT_TIMEOUT;
    private static final java.lang.String LOG_TAG;
    private static com.android.uiautomator.core.UiDevice sDevice;
    private boolean mInWatcherContext;
    private com.android.uiautomator.core.UiAutomatorBridge mUiAutomationBridge;
    private final java.util.HashMap mWatchers;
    private final java.util.List mWatchersTriggers;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.uiautomator.core.UiDevice: long KEY_PRESS_EVENT_TIMEOUT> = 1000L;

        $r0 = class "com/android/uiautomator/core/UiDevice";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.uiautomator.core.UiDevice: java.lang.String LOG_TAG> = $r1;

        return;
    }

    private void <init>()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.util.HashMap $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.uiautomator.core.UiDevice: java.util.HashMap mWatchers> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.uiautomator.core.UiDevice: java.util.List mWatchersTriggers> = $r2;

        r0.<com.android.uiautomator.core.UiDevice: boolean mInWatcherContext> = 0;

        return;
    }

    public static com.android.uiautomator.core.UiDevice getInstance()
    {
        com.android.uiautomator.core.UiDevice $r0, $r1, $r2;

        $r0 = <com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiDevice sDevice>;

        if $r0 != null goto label1;

        $r2 = new com.android.uiautomator.core.UiDevice;

        specialinvoke $r2.<com.android.uiautomator.core.UiDevice: void <init>()>();

        <com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiDevice sDevice> = $r2;

     label1:
        $r1 = <com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiDevice sDevice>;

        return $r1;
    }

    private void setWatcherTriggered(java.lang.String)
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        boolean $z0;
        java.util.List $r3;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r2);

        $z0 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: boolean hasWatcherTriggered(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.uiautomator.core.UiDevice: java.util.List mWatchersTriggers>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void clearLastTraversedText()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.QueryController $r3;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.QueryController getQueryController()>();

        virtualinvoke $r3.<com.android.uiautomator.core.QueryController: void clearLastTraversedText()>();

        return;
    }

    public boolean click(int, int)
    {
        com.android.uiautomator.core.UiDevice r0;
        int i0, i1, $i2, $i3;
        java.lang.Object[] r1;
        java.lang.Integer $r2, $r3;
        com.android.uiautomator.core.UiAutomatorBridge $r4;
        com.android.uiautomator.core.InteractionController $r5;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r1[1] = $r3;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>(r1);

        $i2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: int getDisplayWidth()>();

        if i0 >= $i2 goto label1;

        $i3 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: int getDisplayHeight()>();

        if i1 < $i3 goto label2;

     label1:
        return 0;

     label2:
        $r4 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r5 = virtualinvoke $r4.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r5.<com.android.uiautomator.core.InteractionController: boolean clickNoSync(int,int)>(i0, i1);

        return $z0;
    }

    public boolean drag(int, int, int, int, int)
    {
        com.android.uiautomator.core.UiDevice r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object[] r1;
        java.lang.Integer $r2, $r3, $r4, $r5, $r7;
        com.android.uiautomator.core.UiAutomatorBridge $r6;
        boolean $z0;
        com.android.uiautomator.core.InteractionController $r8;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r1 = newarray (java.lang.Object)[5];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        r1[2] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        r1[3] = $r5;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        r1[4] = $r7;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>(r1);

        $r6 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r8 = virtualinvoke $r6.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r8.<com.android.uiautomator.core.InteractionController: boolean swipe(int,int,int,int,int,boolean)>(i0, i1, i2, i3, i4, 1);

        return $z0;
    }

    public void dumpWindowHierarchy(java.lang.String)
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.String r1;
        android.view.accessibility.AccessibilityNodeInfo r2;
        android.view.Display r3;
        android.graphics.Point r4, $r9;
        java.lang.Object[] $r5;
        com.android.uiautomator.core.UiAutomatorBridge $r6, $r8;
        com.android.uiautomator.core.QueryController $r7;
        java.io.File $r10, $r11, $r12;
        int $i0, $i1, $i2;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        r1 := @parameter0: java.lang.String;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r5);

        $r6 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r7 = virtualinvoke $r6.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.QueryController getQueryController()>();

        r2 = virtualinvoke $r7.<com.android.uiautomator.core.QueryController: android.view.accessibility.AccessibilityNodeInfo getAccessibilityRootNode()>();

        if r2 == null goto label1;

        $r8 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        r3 = virtualinvoke $r8.<com.android.uiautomator.core.UiAutomatorBridge: android.view.Display getDefaultDisplay()>();

        $r9 = new android.graphics.Point;

        specialinvoke $r9.<android.graphics.Point: void <init>()>();

        r4 = $r9;

        virtualinvoke r3.<android.view.Display: void getSize(android.graphics.Point)>(r4);

        $r10 = new java.io.File;

        $r11 = new java.io.File;

        $r12 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "local/tmp");

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, r1);

        $i0 = virtualinvoke r3.<android.view.Display: int getRotation()>();

        $i1 = r4.<android.graphics.Point: int x>;

        $i2 = r4.<android.graphics.Point: int y>;

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo,java.io.File,int,int,int)>(r2, $r10, $i0, $i1, $i2);

     label1:
        return;
    }

    public void freezeRotation() throws android.os.RemoteException
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: void freezeRotation()>();

        return;
    }

    com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()
    {
        com.android.uiautomator.core.UiDevice r0;
        com.android.uiautomator.core.UiAutomatorBridge $r1, $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge mUiAutomationBridge>;

        if $r1 != null goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("UiDevice not initialized");

        throw $r3;

     label1:
        $r2 = r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge mUiAutomationBridge>;

        return $r2;
    }

    public java.lang.String getCurrentActivityName()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.QueryController $r3;
        java.lang.String $r4;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.QueryController getQueryController()>();

        $r4 = virtualinvoke $r3.<com.android.uiautomator.core.QueryController: java.lang.String getCurrentActivityName()>();

        return $r4;
    }

    public java.lang.String getCurrentPackageName()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.QueryController $r3;
        java.lang.String $r4;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.QueryController getQueryController()>();

        $r4 = virtualinvoke $r3.<com.android.uiautomator.core.QueryController: java.lang.String getCurrentPackageName()>();

        return $r4;
    }

    public int getDisplayHeight()
    {
        com.android.uiautomator.core.UiDevice r0;
        android.view.Display r1;
        android.graphics.Point r2, $r5;
        java.lang.Object[] $r3;
        com.android.uiautomator.core.UiAutomatorBridge $r4;
        int $i0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r3);

        $r4 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        r1 = virtualinvoke $r4.<com.android.uiautomator.core.UiAutomatorBridge: android.view.Display getDefaultDisplay()>();

        $r5 = new android.graphics.Point;

        specialinvoke $r5.<android.graphics.Point: void <init>()>();

        r2 = $r5;

        virtualinvoke r1.<android.view.Display: void getSize(android.graphics.Point)>(r2);

        $i0 = r2.<android.graphics.Point: int y>;

        return $i0;
    }

    public int getDisplayRotation()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        int $i0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $i0 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: int getRotation()>();

        return $i0;
    }

    public android.graphics.Point getDisplaySizeDp()
    {
        com.android.uiautomator.core.UiDevice r0;
        android.view.Display r1;
        android.graphics.Point r2, $r6;
        android.util.DisplayMetrics r3, $r7;
        float f0, f1, $f2, $f3, $f4, $f5;
        java.lang.Object[] $r4;
        com.android.uiautomator.core.UiAutomatorBridge $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r4);

        $r5 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        r1 = virtualinvoke $r5.<com.android.uiautomator.core.UiAutomatorBridge: android.view.Display getDefaultDisplay()>();

        $r6 = new android.graphics.Point;

        specialinvoke $r6.<android.graphics.Point: void <init>()>();

        r2 = $r6;

        virtualinvoke r1.<android.view.Display: void getRealSize(android.graphics.Point)>(r2);

        $r7 = new android.util.DisplayMetrics;

        specialinvoke $r7.<android.util.DisplayMetrics: void <init>()>();

        r3 = $r7;

        virtualinvoke r1.<android.view.Display: void getRealMetrics(android.util.DisplayMetrics)>(r3);

        $i0 = r2.<android.graphics.Point: int x>;

        $f3 = (float) $i0;

        $f2 = r3.<android.util.DisplayMetrics: float density>;

        f0 = $f3 / $f2;

        $i1 = r2.<android.graphics.Point: int y>;

        $f5 = (float) $i1;

        $f4 = r3.<android.util.DisplayMetrics: float density>;

        f1 = $f5 / $f4;

        $i2 = staticinvoke <java.lang.Math: int round(float)>(f0);

        r2.<android.graphics.Point: int x> = $i2;

        $i3 = staticinvoke <java.lang.Math: int round(float)>(f1);

        r2.<android.graphics.Point: int y> = $i3;

        return r2;
    }

    public int getDisplayWidth()
    {
        com.android.uiautomator.core.UiDevice r0;
        android.view.Display r1;
        android.graphics.Point r2, $r5;
        java.lang.Object[] $r3;
        com.android.uiautomator.core.UiAutomatorBridge $r4;
        int $i0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r3);

        $r4 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        r1 = virtualinvoke $r4.<com.android.uiautomator.core.UiAutomatorBridge: android.view.Display getDefaultDisplay()>();

        $r5 = new android.graphics.Point;

        specialinvoke $r5.<android.graphics.Point: void <init>()>();

        r2 = $r5;

        virtualinvoke r1.<android.view.Display: void getSize(android.graphics.Point)>(r2);

        $i0 = r2.<android.graphics.Point: int x>;

        return $i0;
    }

    public java.lang.String getLastTraversedText()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.QueryController $r3;
        java.lang.String $r4;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.QueryController getQueryController()>();

        $r4 = virtualinvoke $r3.<com.android.uiautomator.core.QueryController: java.lang.String getLastTraversedText()>();

        return $r4;
    }

    public java.lang.String getProductName()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = <android.os.Build: java.lang.String PRODUCT>;

        return $r2;
    }

    public boolean hasAnyWatcherTriggered()
    {
        com.android.uiautomator.core.UiDevice r0;
        int i0;
        boolean z0;
        java.lang.Object[] $r1;
        java.util.List $r2;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = r0.<com.android.uiautomator.core.UiDevice: java.util.List mWatchersTriggers>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        z0 = 0;

        if i0 <= 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean hasWatcherTriggered(java.lang.String)
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.List $r3;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r2);

        $r3 = r0.<com.android.uiautomator.core.UiDevice: java.util.List mWatchersTriggers>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public void initialize(com.android.uiautomator.core.UiAutomatorBridge)
    {
        com.android.uiautomator.core.UiDevice r0;
        com.android.uiautomator.core.UiAutomatorBridge r1;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        r1 := @parameter0: com.android.uiautomator.core.UiAutomatorBridge;

        r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge mUiAutomationBridge> = r1;

        return;
    }

    boolean isInWatcherContext()
    {
        com.android.uiautomator.core.UiDevice r0;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $z0 = r0.<com.android.uiautomator.core.UiDevice: boolean mInWatcherContext>;

        return $z0;
    }

    public boolean isNaturalOrientation()
    {
        com.android.uiautomator.core.UiDevice r0;
        int i0;
        boolean z0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        i0 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: int getRotation()>();

        if i0 == 0 goto label1;

        z0 = 0;

        if i0 != 2 goto label2;

     label1:
        z0 = 1;

     label2:
        return z0;
    }

    public boolean isScreenOn() throws android.os.RemoteException
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: boolean isScreenOn()>();

        return $z0;
    }

    public boolean openNotification()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: boolean openNotification()>();

        return $z0;
    }

    public boolean openQuickSettings()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: boolean openQuickSettings()>();

        return $z0;
    }

    public boolean pressBack()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: boolean sendKeyAndWaitForEvent(int,int,int,long)>(4, 0, 2048, 1000L);

        return $z0;
    }

    public boolean pressDPadCenter()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)>(23);

        return $z0;
    }

    public boolean pressDPadDown()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)>(20);

        return $z0;
    }

    public boolean pressDPadLeft()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)>(21);

        return $z0;
    }

    public boolean pressDPadRight()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)>(22);

        return $z0;
    }

    public boolean pressDPadUp()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)>(19);

        return $z0;
    }

    public boolean pressDelete()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)>(67);

        return $z0;
    }

    public boolean pressEnter()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)>(66);

        return $z0;
    }

    public boolean pressHome()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: boolean sendKeyAndWaitForEvent(int,int,int,long)>(3, 0, 2048, 1000L);

        return $z0;
    }

    public boolean pressKeyCode(int)
    {
        com.android.uiautomator.core.UiDevice r0;
        int i0;
        java.lang.Object[] r1;
        java.lang.Integer $r2;
        com.android.uiautomator.core.UiAutomatorBridge $r3;
        com.android.uiautomator.core.InteractionController $r4;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        i0 := @parameter0: int;

        r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r1[0] = $r2;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>(r1);

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        $r3 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r4 = virtualinvoke $r3.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r4.<com.android.uiautomator.core.InteractionController: boolean sendKey(int,int)>(i0, 0);

        return $z0;
    }

    public boolean pressKeyCode(int, int)
    {
        com.android.uiautomator.core.UiDevice r0;
        int i0, i1;
        java.lang.Object[] r1;
        java.lang.Integer $r2, $r3;
        com.android.uiautomator.core.UiAutomatorBridge $r4;
        com.android.uiautomator.core.InteractionController $r5;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r1[1] = $r3;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>(r1);

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        $r4 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r5 = virtualinvoke $r4.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r5.<com.android.uiautomator.core.InteractionController: boolean sendKey(int,int)>(i0, i1);

        return $z0;
    }

    public boolean pressMenu()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: boolean sendKeyAndWaitForEvent(int,int,int,long)>(82, 0, 2048, 1000L);

        return $z0;
    }

    public boolean pressRecentApps() throws android.os.RemoteException
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: boolean toggleRecentApps()>();

        return $z0;
    }

    public boolean pressSearch()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)>(84);

        return $z0;
    }

    public void registerWatcher(java.lang.String, com.android.uiautomator.core.UiWatcher)
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.String r1;
        com.android.uiautomator.core.UiWatcher r2;
        java.lang.Object[] $r3;
        boolean $z0;
        java.util.HashMap $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.uiautomator.core.UiWatcher;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r3[1] = r2;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r3);

        $z0 = r0.<com.android.uiautomator.core.UiDevice: boolean mInWatcherContext>;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot register new watcher from within another");

        throw $r6;

     label1:
        $r4 = r0.<com.android.uiautomator.core.UiDevice: java.util.HashMap mWatchers>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void removeWatcher(java.lang.String)
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        boolean $z0;
        java.util.HashMap $r3;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r2);

        $z0 = r0.<com.android.uiautomator.core.UiDevice: boolean mInWatcherContext>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot remove a watcher from within another");

        throw $r5;

     label1:
        $r3 = r0.<com.android.uiautomator.core.UiDevice: java.util.HashMap mWatchers>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void resetWatcherTriggers()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        java.util.List $r2;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = r0.<com.android.uiautomator.core.UiDevice: java.util.List mWatchersTriggers>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        return;
    }

    public void runWatchers()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.util.Iterator r1;
        java.lang.String r2, $r15, $r16;
        com.android.uiautomator.core.UiWatcher r3;
        java.lang.Throwable r4, $r18;
        java.lang.Exception r5, $r13;
        java.lang.Object[] $r6;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r7, $r10;
        java.util.Set $r8;
        java.lang.Object $r9, $r11;
        java.lang.StringBuilder $r12, $r14, $r17;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r6);

        $z0 = r0.<com.android.uiautomator.core.UiDevice: boolean mInWatcherContext>;

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        $r7 = r0.<com.android.uiautomator.core.UiDevice: java.util.HashMap mWatchers>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set keySet()>();

        r1 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label1;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r9;

        $r10 = r0.<com.android.uiautomator.core.UiDevice: java.util.HashMap mWatchers>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.uiautomator.core.UiWatcher) $r11;

        if r3 == null goto label3;

     label4:
        r0.<com.android.uiautomator.core.UiDevice: boolean mInWatcherContext> = 1;

        $z2 = interfaceinvoke r3.<com.android.uiautomator.core.UiWatcher: boolean checkForCondition()>();

        if $z2 == 0 goto label5;

        specialinvoke r0.<com.android.uiautomator.core.UiDevice: void setWatcherTriggered(java.lang.String)>(r2);

     label5:
        r0.<com.android.uiautomator.core.UiDevice: boolean mInWatcherContext> = 0;

        goto label3;

     label6:
        $r13 := @caughtexception;

        r5 = $r13;

     label7:
        $r15 = <com.android.uiautomator.core.UiDevice: java.lang.String LOG_TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exceuting watcher: ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r15, $r16, r5);

     label8:
        r0.<com.android.uiautomator.core.UiDevice: boolean mInWatcherContext> = 0;

        goto label3;

     label9:
        $r18 := @caughtexception;

        r4 = $r18;

        r0.<com.android.uiautomator.core.UiDevice: boolean mInWatcherContext> = 0;

        throw r4;

        catch java.lang.Exception from label4 to label5 with label6;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public void setCompressedLayoutHeirarchy(boolean)
    {
        com.android.uiautomator.core.UiDevice r0;
        boolean z0;
        com.android.uiautomator.core.UiAutomatorBridge $r1;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        virtualinvoke $r1.<com.android.uiautomator.core.UiAutomatorBridge: void setCompressedLayoutHierarchy(boolean)>(z0);

        return;
    }

    public void setOrientationLeft() throws android.os.RemoteException
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: void setRotationLeft()>();

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        return;
    }

    public void setOrientationNatural() throws android.os.RemoteException
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: void setRotationNatural()>();

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        return;
    }

    public void setOrientationRight() throws android.os.RemoteException
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: void setRotationRight()>();

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle()>();

        return;
    }

    public void sleep() throws android.os.RemoteException
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: boolean sleepDevice()>();

        return;
    }

    public boolean swipe(int, int, int, int, int)
    {
        com.android.uiautomator.core.UiDevice r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object[] r1;
        java.lang.Integer $r2, $r3, $r4, $r5, $r7;
        com.android.uiautomator.core.UiAutomatorBridge $r6;
        boolean $z0;
        com.android.uiautomator.core.InteractionController $r8;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r1 = newarray (java.lang.Object)[5];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        r1[2] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        r1[3] = $r5;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        r1[4] = $r7;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>(r1);

        $r6 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r8 = virtualinvoke $r6.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r8.<com.android.uiautomator.core.InteractionController: boolean swipe(int,int,int,int,int)>(i0, i1, i2, i3, i4);

        return $z0;
    }

    public boolean swipe(android.graphics.Point[], int)
    {
        com.android.uiautomator.core.UiDevice r0;
        android.graphics.Point[] r1;
        int i0;
        java.lang.Object[] r2;
        java.lang.Integer $r3;
        com.android.uiautomator.core.UiAutomatorBridge $r4;
        com.android.uiautomator.core.InteractionController $r5;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        r1 := @parameter0: android.graphics.Point[];

        i0 := @parameter1: int;

        r2 = newarray (java.lang.Object)[2];

        r2[0] = r1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r2[1] = $r3;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>(r2);

        $r4 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r5 = virtualinvoke $r4.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r5.<com.android.uiautomator.core.InteractionController: boolean swipe(android.graphics.Point[],int)>(r1, i0);

        return $z0;
    }

    public boolean takeScreenshot(java.io.File)
    {
        com.android.uiautomator.core.UiDevice r0;
        java.io.File r1;
        java.lang.Object[] $r2;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        r1 := @parameter0: java.io.File;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r2);

        $z0 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: boolean takeScreenshot(java.io.File,float,int)>(r1, 1.0F, 90);

        return $z0;
    }

    public boolean takeScreenshot(java.io.File, float, int)
    {
        com.android.uiautomator.core.UiDevice r0;
        java.io.File r1;
        float f0;
        int i0;
        java.lang.Object[] r2;
        java.lang.Float $r3;
        java.lang.Integer $r4;
        com.android.uiautomator.core.UiAutomatorBridge $r5;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        r1 := @parameter0: java.io.File;

        f0 := @parameter1: float;

        i0 := @parameter2: int;

        r2 = newarray (java.lang.Object)[3];

        r2[0] = r1;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        r2[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r2[2] = $r4;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>(r2);

        $r5 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $z0 = virtualinvoke $r5.<com.android.uiautomator.core.UiAutomatorBridge: boolean takeScreenshot(java.io.File,int)>(r1, i0);

        return $z0;
    }

    public void unfreezeRotation() throws android.os.RemoteException
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: void unfreezeRotation()>();

        return;
    }

    public void waitForIdle()
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.Configurator $r2;
        long $l0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = staticinvoke <com.android.uiautomator.core.Configurator: com.android.uiautomator.core.Configurator getInstance()>();

        $l0 = virtualinvoke $r2.<com.android.uiautomator.core.Configurator: long getWaitForIdleTimeout()>();

        virtualinvoke r0.<com.android.uiautomator.core.UiDevice: void waitForIdle(long)>($l0);

        return;
    }

    public void waitForIdle(long)
    {
        com.android.uiautomator.core.UiDevice r0;
        long l0;
        java.lang.Object[] r1;
        java.lang.Long $r2;
        com.android.uiautomator.core.UiAutomatorBridge $r3;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        l0 := @parameter0: long;

        r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r1[0] = $r2;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>(r1);

        $r3 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        virtualinvoke $r3.<com.android.uiautomator.core.UiAutomatorBridge: void waitForIdle(long)>(l0);

        return;
    }

    public boolean waitForWindowUpdate(java.lang.String, long)
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.String r1, $r12, $r15;
        long l0;
        java.lang.Object[] r2;
        com.android.uiautomator.core.UiDevice$1 r3, $r8;
        com.android.uiautomator.core.UiDevice$2 r4, $r9;
        java.lang.Exception r5, $r13;
        java.lang.Long $r7;
        com.android.uiautomator.core.UiAutomatorBridge $r10;
        boolean $z0;
        java.util.concurrent.TimeoutException $r14;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 = newarray (java.lang.Object)[2];

        r2[0] = r1;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r2[1] = $r7;

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>(r2);

        if r1 == null goto label1;

        $r12 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: java.lang.String getCurrentPackageName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r8 = new com.android.uiautomator.core.UiDevice$1;

        specialinvoke $r8.<com.android.uiautomator.core.UiDevice$1: void <init>(com.android.uiautomator.core.UiDevice)>(r0);

        r3 = $r8;

        $r9 = new com.android.uiautomator.core.UiDevice$2;

        specialinvoke $r9.<com.android.uiautomator.core.UiDevice$2: void <init>(com.android.uiautomator.core.UiDevice,java.lang.String)>(r0, r1);

        r4 = $r9;

     label2:
        $r10 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        virtualinvoke $r10.<com.android.uiautomator.core.UiAutomatorBridge: android.view.accessibility.AccessibilityEvent executeCommandAndWaitForAccessibilityEvent(java.lang.Runnable,android.app.UiAutomation$AccessibilityEventFilter,long)>(r3, r4, l0);

     label3:
        return 1;

     label4:
        $r14 := @caughtexception;

        return 0;

     label5:
        $r13 := @caughtexception;

        r5 = $r13;

        $r15 = <com.android.uiautomator.core.UiDevice: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r15, "waitForWindowUpdate: general exception from bridge", r5);

        return 0;

        catch java.util.concurrent.TimeoutException from label2 to label3 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    public void wakeUp() throws android.os.RemoteException
    {
        com.android.uiautomator.core.UiDevice r0;
        java.lang.Object[] $r1;
        com.android.uiautomator.core.UiAutomatorBridge $r2;
        com.android.uiautomator.core.InteractionController $r3;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>();

        $r3 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r3.<com.android.uiautomator.core.InteractionController: boolean wakeDevice()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.os.SystemClock: void sleep(long)>(500L);

     label1:
        return;
    }
}
