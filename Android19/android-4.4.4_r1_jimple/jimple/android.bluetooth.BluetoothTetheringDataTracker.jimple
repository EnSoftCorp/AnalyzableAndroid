public class android.bluetooth.BluetoothTetheringDataTracker extends android.net.BaseNetworkStateTracker
{
    private static final boolean DBG;
    private static final java.lang.String NETWORKTYPE;
    private static final java.lang.String TAG;
    private static final boolean VDBG;
    private static java.lang.String mRevTetheredIface;
    private static android.bluetooth.BluetoothTetheringDataTracker sInstance;
    private java.util.concurrent.atomic.AtomicReference mAsyncChannel;
    private android.bluetooth.BluetoothPan mBluetoothPan;
    private android.bluetooth.BluetoothTetheringDataTracker$BtdtHandler mBtdtHandler;
    private android.os.Handler mCsHandler;
    private java.util.concurrent.atomic.AtomicInteger mDefaultGatewayAddr;
    private java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet;
    private final java.lang.Object mLinkPropertiesLock;
    private final java.lang.Object mNetworkInfoLock;
    private java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet;
    private android.bluetooth.BluetoothProfile$ServiceListener mProfileServiceListener;
    private java.util.concurrent.atomic.AtomicBoolean mTeardownRequested;

    private void <init>()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1, $r2, $r4;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.lang.Object $r5, $r6;
        java.util.concurrent.atomic.AtomicReference $r7;
        android.bluetooth.BluetoothTetheringDataTracker$1 $r8;
        android.net.NetworkInfo $r9, $r12;
        android.net.LinkProperties $r10;
        android.net.LinkCapabilities $r11;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        specialinvoke r0.<android.net.BaseNetworkStateTracker: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicInteger mDefaultGatewayAddr> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.bluetooth.BluetoothTetheringDataTracker: java.lang.Object mLinkPropertiesLock> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<android.bluetooth.BluetoothTetheringDataTracker: java.lang.Object mNetworkInfoLock> = $r6;

        $r7 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicReference mAsyncChannel> = $r7;

        $r8 = new android.bluetooth.BluetoothTetheringDataTracker$1;

        specialinvoke $r8.<android.bluetooth.BluetoothTetheringDataTracker$1: void <init>(android.bluetooth.BluetoothTetheringDataTracker)>(r0);

        r0.<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothProfile$ServiceListener mProfileServiceListener> = $r8;

        $r9 = new android.net.NetworkInfo;

        specialinvoke $r9.<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>(7, 0, "BLUETOOTH_TETHER", "");

        r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo mNetworkInfo> = $r9;

        $r10 = new android.net.LinkProperties;

        specialinvoke $r10.<android.net.LinkProperties: void <init>()>();

        r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties mLinkProperties> = $r10;

        $r11 = new android.net.LinkCapabilities;

        specialinvoke $r11.<android.net.LinkCapabilities: void <init>()>();

        r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkCapabilities mLinkCapabilities> = $r11;

        $r12 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r12.<android.net.NetworkInfo: void setIsAvailable(boolean)>(0);

        virtualinvoke r0.<android.bluetooth.BluetoothTetheringDataTracker: void setTeardownRequested(boolean)>(0);

        return;
    }

    static android.bluetooth.BluetoothPan access$002(android.bluetooth.BluetoothTetheringDataTracker, android.bluetooth.BluetoothPan)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.bluetooth.BluetoothPan r1;

        r0 := @parameter0: android.bluetooth.BluetoothTetheringDataTracker;

        r1 := @parameter1: android.bluetooth.BluetoothPan;

        r0.<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothPan mBluetoothPan> = r1;

        return r1;
    }

    static java.lang.Object access$100(android.bluetooth.BluetoothTetheringDataTracker)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.lang.Object mLinkPropertiesLock>;

        return $r1;
    }

    static android.net.LinkProperties access$200(android.bluetooth.BluetoothTetheringDataTracker)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.net.LinkProperties $r1;

        r0 := @parameter0: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties mLinkProperties>;

        return $r1;
    }

    static android.net.LinkProperties access$302(android.bluetooth.BluetoothTetheringDataTracker, android.net.LinkProperties)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.net.LinkProperties r1;

        r0 := @parameter0: android.bluetooth.BluetoothTetheringDataTracker;

        r1 := @parameter1: android.net.LinkProperties;

        r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties mLinkProperties> = r1;

        return r1;
    }

    static java.lang.Object access$400(android.bluetooth.BluetoothTetheringDataTracker)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.lang.Object mNetworkInfoLock>;

        return $r1;
    }

    static android.net.NetworkInfo access$500(android.bluetooth.BluetoothTetheringDataTracker)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    static android.net.NetworkInfo access$600(android.bluetooth.BluetoothTetheringDataTracker)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    static android.os.Handler access$700(android.bluetooth.BluetoothTetheringDataTracker)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.os.Handler mCsHandler>;

        return $r1;
    }

    static android.net.NetworkInfo access$800(android.bluetooth.BluetoothTetheringDataTracker)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicReference access$900(android.bluetooth.BluetoothTetheringDataTracker)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @parameter0: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicReference mAsyncChannel>;

        return $r1;
    }

    private static short countPrefixLength(byte[])
    {
        byte[] r0;
        short s0;
        int i1, i2, i4, $i5, $i6, $i7;
        byte b3;

        r0 := @parameter0: byte[];

        s0 = 0;

        i1 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label5;

        b3 = r0[i2];

        i4 = 0;

     label2:
        if i4 >= 8 goto label4;

        $i5 = 1 << i4;

        $i6 = b3 & $i5;

        if $i6 == 0 goto label3;

        $i7 = s0 + 1;

        s0 = (short) $i7;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return s0;
    }

    public static android.bluetooth.BluetoothTetheringDataTracker getInstance()
    {
        java.lang.Throwable r0, $r4;
        android.bluetooth.BluetoothTetheringDataTracker r1, $r2, $r3;

        entermonitor class "android/bluetooth/BluetoothTetheringDataTracker";

     label1:
        $r2 = <android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker sInstance>;

        if $r2 != null goto label2;

        $r3 = new android.bluetooth.BluetoothTetheringDataTracker;

        specialinvoke $r3.<android.bluetooth.BluetoothTetheringDataTracker: void <init>()>();

        <android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker sInstance> = $r3;

     label2:
        r1 = <android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker sInstance>;

     label3:
        exitmonitor class "android/bluetooth/BluetoothTetheringDataTracker";

        return r1;

     label4:
        $r4 := @caughtexception;

        r0 = $r4;

        exitmonitor class "android/bluetooth/BluetoothTetheringDataTracker";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.lang.Object Clone() throws java.lang.CloneNotSupportedException
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.lang.CloneNotSupportedException $r1;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = new java.lang.CloneNotSupportedException;

        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>()>();

        throw $r1;
    }

    public void addStackedLink(android.net.LinkProperties)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.net.LinkProperties r1, $r2;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        r1 := @parameter0: android.net.LinkProperties;

        $r2 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r2.<android.net.LinkProperties: boolean addStackedLink(android.net.LinkProperties)>(r1);

        return;
    }

    public void captivePortalCheckComplete()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        return;
    }

    public void captivePortalCheckCompleted(boolean)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        boolean z0;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        z0 := @parameter0: boolean;

        return;
    }

    public void defaultRouteSet(boolean)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    public int getDefaultGatewayAddr()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicInteger mDefaultGatewayAddr>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public android.net.LinkCapabilities getLinkCapabilities()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.net.LinkCapabilities $r1, $r2;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = new android.net.LinkCapabilities;

        $r2 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkCapabilities mLinkCapabilities>;

        specialinvoke $r1.<android.net.LinkCapabilities: void <init>(android.net.LinkCapabilities)>($r2);

        return $r1;
    }

    public android.net.LinkProperties getLinkProperties()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.lang.Object r1;
        android.net.LinkProperties r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.lang.Object mLinkPropertiesLock>;

        entermonitor r1;

     label1:
        $r4 = new android.net.LinkProperties;

        $r5 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties mLinkProperties>;

        specialinvoke $r4.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r5);

        r2 = $r4;

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.net.NetworkInfo getNetworkInfo()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.lang.Object r1;
        android.net.NetworkInfo r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.lang.Object mNetworkInfoLock>;

        entermonitor r1;

     label1:
        $r4 = new android.net.NetworkInfo;

        $r5 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo mNetworkInfo>;

        specialinvoke $r4.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r5);

        r2 = $r4;

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getTcpBufferSizesPropName()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        return "net.tcp.buffersize.wifi";
    }

    public boolean isAvailable()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.lang.Throwable r1, $r3;
        boolean z0;
        android.net.NetworkInfo $r2;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        entermonitor r0;

     label1:
        $r2 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo mNetworkInfo>;

        z0 = virtualinvoke $r2.<android.net.NetworkInfo: boolean isAvailable()>();

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isDefaultRouteSet()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public boolean isPrivateDnsRouteSet()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public boolean isTeardownRequested()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public void privateDnsRouteSet(boolean)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    public boolean reconnect()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        return 1;
    }

    public void removeStackedLink(android.net.LinkProperties)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.net.LinkProperties r1, $r2;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        r1 := @parameter0: android.net.LinkProperties;

        $r2 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r2.<android.net.LinkProperties: boolean removeStackedLink(android.net.LinkProperties)>(r1);

        return;
    }

    public void setDependencyMet(boolean)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        boolean z0;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        z0 := @parameter0: boolean;

        return;
    }

    public void setPolicyDataEnable(boolean)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        boolean z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ignoring setPolicyDataEnable(");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BluetoothTethering", $r5);

        return;
    }

    public boolean setRadio(boolean)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        boolean z0;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        z0 := @parameter0: boolean;

        return 1;
    }

    public void setTeardownRequested(boolean)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    public void setUserDataEnable(boolean)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        boolean z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ignoring setUserDataEnable(");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BluetoothTethering", $r5);

        return;
    }

    public void startMonitoring(android.content.Context, android.os.Handler)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.content.Context r1, $r15;
        android.os.Handler r2, $r10;
        android.bluetooth.BluetoothAdapter r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r12;
        java.lang.String $r7, $r11;
        android.os.Looper $r13;
        android.bluetooth.BluetoothTetheringDataTracker$BtdtHandler $r14;
        android.bluetooth.BluetoothProfile$ServiceListener $r16;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startMonitoring: target: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("BluetoothTethering", $r7);

        r0.<android.bluetooth.BluetoothTetheringDataTracker: android.content.Context mContext> = r1;

        r0.<android.bluetooth.BluetoothTetheringDataTracker: android.os.Handler mCsHandler> = r2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startMonitoring: mCsHandler: ");

        $r10 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.os.Handler mCsHandler>;

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("BluetoothTethering", $r11);

        r3 = staticinvoke <android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()>();

        if r3 == null goto label1;

        $r15 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.content.Context mContext>;

        $r16 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothProfile$ServiceListener mProfileServiceListener>;

        virtualinvoke r3.<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)>($r15, $r16, 5);

     label1:
        $r14 = new android.bluetooth.BluetoothTetheringDataTracker$BtdtHandler;

        $r13 = virtualinvoke r2.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r14.<android.bluetooth.BluetoothTetheringDataTracker$BtdtHandler: void <init>(android.os.Looper,android.bluetooth.BluetoothTetheringDataTracker)>($r13, r0);

        r0.<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker$BtdtHandler mBtdtHandler> = $r14;

        return;
    }

    void startReverseTether(android.net.LinkProperties)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.net.LinkProperties r1, $r5;
        java.lang.Object r2;
        java.lang.Throwable r3, $r9;
        java.lang.String $r4, $r6;
        boolean $z0;
        java.lang.Thread $r7;
        android.bluetooth.BluetoothTetheringDataTracker$2 $r8;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        r1 := @parameter0: android.net.LinkProperties;

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BluetoothTethering", "attempted to reverse tether with empty interface");

        return;

     label2:
        r2 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.lang.Object mLinkPropertiesLock>;

        entermonitor r2;

     label3:
        $r5 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties mLinkProperties>;

        $r6 = virtualinvoke $r5.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        if $r6 == null goto label8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BluetoothTethering", "attempted to reverse tether while already in process");

        exitmonitor r2;

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties mLinkProperties> = r1;

        exitmonitor r2;

     label9:
        $r7 = new java.lang.Thread;

        $r8 = new android.bluetooth.BluetoothTetheringDataTracker$2;

        specialinvoke $r8.<android.bluetooth.BluetoothTetheringDataTracker$2: void <init>(android.bluetooth.BluetoothTetheringDataTracker,android.net.LinkProperties)>(r0, r1);

        specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r8);

        virtualinvoke $r7.<java.lang.Thread: void start()>();

        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label8 to label9 with label5;
    }

    public int startUsingNetworkFeature(java.lang.String, int, int)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return -1;
    }

    void stopReverseTether()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.lang.Object r1, r3;
        java.lang.Throwable r2, r4, $r18, $r19;
        android.net.LinkProperties $r5, $r7, $r9;
        java.lang.String $r6, $r8;
        boolean $z0;
        android.net.NetworkInfo $r10, $r11, $r14, $r16;
        android.net.NetworkInfo$DetailedState $r12;
        android.os.Handler $r13, $r15;
        android.os.Message $r17;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        r1 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.lang.Object mLinkPropertiesLock>;

        entermonitor r1;

     label01:
        $r5 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties mLinkProperties>;

        $r6 = virtualinvoke $r5.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6);

        if $z0 == 0 goto label03;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BluetoothTethering", "attempted to stop reverse tether with nothing tethered");

        exitmonitor r1;

     label02:
        return;

     label03:
        $r7 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties mLinkProperties>;

        $r8 = virtualinvoke $r7.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        staticinvoke <android.net.NetworkUtils: boolean stopDhcp(java.lang.String)>($r8);

        $r9 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r9.<android.net.LinkProperties: void clear()>();

        r3 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.lang.Object mNetworkInfoLock>;

        entermonitor r3;

     label04:
        $r10 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r10.<android.net.NetworkInfo: void setIsAvailable(boolean)>(0);

        $r11 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo mNetworkInfo>;

        $r12 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        virtualinvoke $r11.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r12, null, null);

        $r13 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.os.Handler mCsHandler>;

        if $r13 == null goto label05;

        $r15 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.os.Handler mCsHandler>;

        $r14 = new android.net.NetworkInfo;

        $r16 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo mNetworkInfo>;

        specialinvoke $r14.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r16);

        $r17 = virtualinvoke $r15.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(458752, $r14);

        virtualinvoke $r17.<android.os.Message: void sendToTarget()>();

     label05:
        exitmonitor r3;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r19 := @caughtexception;

        r2 = $r19;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

     label11:
        $r18 := @caughtexception;

        r4 = $r18;

     label12:
        exitmonitor r3;

     label13:
        throw r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public int stopUsingNetworkFeature(java.lang.String, int, int)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return -1;
    }

    public void supplyMessenger(android.os.Messenger)
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        android.os.Messenger r1;
        com.android.internal.util.AsyncChannel $r2;
        android.bluetooth.BluetoothTetheringDataTracker$BtdtHandler $r3;
        android.content.Context $r4;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        r1 := @parameter0: android.os.Messenger;

        if r1 == null goto label1;

        $r2 = new com.android.internal.util.AsyncChannel;

        specialinvoke $r2.<com.android.internal.util.AsyncChannel: void <init>()>();

        $r4 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.content.Context mContext>;

        $r3 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker$BtdtHandler mBtdtHandler>;

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void connect(android.content.Context,android.os.Handler,android.os.Messenger)>($r4, $r3, r1);

     label1:
        return;
    }

    public boolean teardown()
    {
        android.bluetooth.BluetoothTetheringDataTracker r0;
        java.util.Iterator r1;
        android.bluetooth.BluetoothDevice r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        android.bluetooth.BluetoothPan $r4, $r5, $r8;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: android.bluetooth.BluetoothTetheringDataTracker;

        $r3 = r0.<android.bluetooth.BluetoothTetheringDataTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r4 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothPan mBluetoothPan>;

        if $r4 == null goto label2;

        $r5 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothPan mBluetoothPan>;

        $r6 = virtualinvoke $r5.<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()>();

        r1 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.bluetooth.BluetoothDevice) $r7;

        $r8 = r0.<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothPan mBluetoothPan>;

        virtualinvoke $r8.<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)>(r2);

        goto label1;

     label2:
        return 1;
    }

    public static void <clinit>()
    {
        <android.bluetooth.BluetoothTetheringDataTracker: boolean VDBG> = 1;

        <android.bluetooth.BluetoothTetheringDataTracker: java.lang.String TAG> = "BluetoothTethering";

        <android.bluetooth.BluetoothTetheringDataTracker: java.lang.String NETWORKTYPE> = "BLUETOOTH_TETHER";

        <android.bluetooth.BluetoothTetheringDataTracker: boolean DBG> = 1;

        return;
    }
}
