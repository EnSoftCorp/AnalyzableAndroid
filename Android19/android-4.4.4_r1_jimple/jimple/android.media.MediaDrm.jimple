public final class android.media.MediaDrm extends java.lang.Object
{
    private static final int DRM_EVENT;
    public static final int EVENT_KEY_EXPIRED;
    public static final int EVENT_KEY_REQUIRED;
    public static final int EVENT_PROVISION_REQUIRED;
    public static final int EVENT_VENDOR_DEFINED;
    public static final int KEY_TYPE_OFFLINE;
    public static final int KEY_TYPE_RELEASE;
    public static final int KEY_TYPE_STREAMING;
    public static final java.lang.String PROPERTY_ALGORITHMS;
    public static final java.lang.String PROPERTY_DESCRIPTION;
    public static final java.lang.String PROPERTY_DEVICE_UNIQUE_ID;
    public static final java.lang.String PROPERTY_VENDOR;
    public static final java.lang.String PROPERTY_VERSION;
    private static final java.lang.String TAG;
    private android.media.MediaDrm$EventHandler mEventHandler;
    private int mNativeContext;
    private android.media.MediaDrm$OnEventListener mOnEventListener;

    static void <clinit>()
    {
        <android.media.MediaDrm: java.lang.String TAG> = "MediaDrm";

        <android.media.MediaDrm: java.lang.String PROPERTY_VERSION> = "version";

        <android.media.MediaDrm: java.lang.String PROPERTY_VENDOR> = "vendor";

        <android.media.MediaDrm: java.lang.String PROPERTY_DEVICE_UNIQUE_ID> = "deviceUniqueId";

        <android.media.MediaDrm: java.lang.String PROPERTY_DESCRIPTION> = "description";

        <android.media.MediaDrm: java.lang.String PROPERTY_ALGORITHMS> = "algorithms";

        <android.media.MediaDrm: int KEY_TYPE_STREAMING> = 1;

        <android.media.MediaDrm: int KEY_TYPE_RELEASE> = 3;

        <android.media.MediaDrm: int KEY_TYPE_OFFLINE> = 2;

        <android.media.MediaDrm: int EVENT_VENDOR_DEFINED> = 4;

        <android.media.MediaDrm: int EVENT_PROVISION_REQUIRED> = 1;

        <android.media.MediaDrm: int EVENT_KEY_REQUIRED> = 2;

        <android.media.MediaDrm: int EVENT_KEY_EXPIRED> = 3;

        <android.media.MediaDrm: int DRM_EVENT> = 200;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaDrm: void native_init()>();

        return;
    }

    public void <init>(java.util.UUID) throws android.media.UnsupportedSchemeException
    {
        android.media.MediaDrm r0;
        java.util.UUID r1;
        android.os.Looper r2, r3;
        java.lang.ref.WeakReference $r4;
        byte[] $r5;
        android.media.MediaDrm$EventHandler $r6, $r7;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: java.util.UUID;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r2 == null goto label2;

        $r7 = new android.media.MediaDrm$EventHandler;

        specialinvoke $r7.<android.media.MediaDrm$EventHandler: void <init>(android.media.MediaDrm,android.media.MediaDrm,android.os.Looper)>(r0, r0, r2);

        r0.<android.media.MediaDrm: android.media.MediaDrm$EventHandler mEventHandler> = $r7;

     label1:
        $r4 = new java.lang.ref.WeakReference;

        specialinvoke $r4.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $r5 = staticinvoke <android.media.MediaDrm: byte[] getByteArrayFromUUID(java.util.UUID)>(r1);

        specialinvoke r0.<android.media.MediaDrm: void native_setup(java.lang.Object,byte[])>($r4, $r5);

        return;

     label2:
        r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if r3 == null goto label3;

        $r6 = new android.media.MediaDrm$EventHandler;

        specialinvoke $r6.<android.media.MediaDrm$EventHandler: void <init>(android.media.MediaDrm,android.media.MediaDrm,android.os.Looper)>(r0, r0, r3);

        r0.<android.media.MediaDrm: android.media.MediaDrm$EventHandler mEventHandler> = $r6;

        goto label1;

     label3:
        r0.<android.media.MediaDrm: android.media.MediaDrm$EventHandler mEventHandler> = null;

        goto label1;
    }

    static int access$000(android.media.MediaDrm)
    {
        android.media.MediaDrm r0;
        int $i0;

        r0 := @parameter0: android.media.MediaDrm;

        $i0 = r0.<android.media.MediaDrm: int mNativeContext>;

        return $i0;
    }

    static android.media.MediaDrm$OnEventListener access$100(android.media.MediaDrm)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnEventListener $r1;

        r0 := @parameter0: android.media.MediaDrm;

        $r1 = r0.<android.media.MediaDrm: android.media.MediaDrm$OnEventListener mOnEventListener>;

        return $r1;
    }

    static void access$200(android.media.MediaDrm, byte[], java.lang.String)
    {
        android.media.MediaDrm r0;
        byte[] r1;
        java.lang.String r2;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: java.lang.String;

        staticinvoke <android.media.MediaDrm: void setCipherAlgorithmNative(android.media.MediaDrm,byte[],java.lang.String)>(r0, r1, r2);

        return;
    }

    static void access$300(android.media.MediaDrm, byte[], java.lang.String)
    {
        android.media.MediaDrm r0;
        byte[] r1;
        java.lang.String r2;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: java.lang.String;

        staticinvoke <android.media.MediaDrm: void setMacAlgorithmNative(android.media.MediaDrm,byte[],java.lang.String)>(r0, r1, r2);

        return;
    }

    static byte[] access$400(android.media.MediaDrm, byte[], byte[], byte[], byte[])
    {
        android.media.MediaDrm r0;
        byte[] r1, r2, r3, r4, $r5;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        r4 := @parameter4: byte[];

        $r5 = staticinvoke <android.media.MediaDrm: byte[] encryptNative(android.media.MediaDrm,byte[],byte[],byte[],byte[])>(r0, r1, r2, r3, r4);

        return $r5;
    }

    static byte[] access$500(android.media.MediaDrm, byte[], byte[], byte[], byte[])
    {
        android.media.MediaDrm r0;
        byte[] r1, r2, r3, r4, $r5;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        r4 := @parameter4: byte[];

        $r5 = staticinvoke <android.media.MediaDrm: byte[] decryptNative(android.media.MediaDrm,byte[],byte[],byte[],byte[])>(r0, r1, r2, r3, r4);

        return $r5;
    }

    static byte[] access$600(android.media.MediaDrm, byte[], byte[], byte[])
    {
        android.media.MediaDrm r0;
        byte[] r1, r2, r3, $r4;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        $r4 = staticinvoke <android.media.MediaDrm: byte[] signNative(android.media.MediaDrm,byte[],byte[],byte[])>(r0, r1, r2, r3);

        return $r4;
    }

    static boolean access$700(android.media.MediaDrm, byte[], byte[], byte[], byte[])
    {
        android.media.MediaDrm r0;
        byte[] r1, r2, r3, r4;
        boolean $z0;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        r4 := @parameter4: byte[];

        $z0 = staticinvoke <android.media.MediaDrm: boolean verifyNative(android.media.MediaDrm,byte[],byte[],byte[],byte[])>(r0, r1, r2, r3, r4);

        return $z0;
    }

    private static final native byte[] decryptNative(android.media.MediaDrm, byte[], byte[], byte[], byte[]);

    private static final native byte[] encryptNative(android.media.MediaDrm, byte[], byte[], byte[], byte[]);

    private static final byte[] getByteArrayFromUUID(java.util.UUID)
    {
        java.util.UUID r0;
        long l0, l1, $l5, $l11;
        byte[] r1;
        int i2, $i3, $i4, $i6, $i8, $i9, $i10, $i12;
        byte $b7, $b13;

        r0 := @parameter0: java.util.UUID;

        l0 = virtualinvoke r0.<java.util.UUID: long getMostSignificantBits()>();

        l1 = virtualinvoke r0.<java.util.UUID: long getLeastSignificantBits()>();

        r1 = newarray (byte)[16];

        i2 = 0;

     label1:
        if i2 >= 8 goto label2;

        $i3 = 7 - i2;

        $i4 = 8 * $i3;

        $l5 = l0 >>> $i4;

        $i6 = (int) $l5;

        $b7 = (byte) $i6;

        r1[i2] = $b7;

        $i12 = i2 + 8;

        $i8 = 7 - i2;

        $i9 = 8 * $i8;

        $l11 = l1 >>> $i9;

        $i10 = (int) $l11;

        $b13 = (byte) $i10;

        r1[$i12] = $b13;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static final boolean isCryptoSchemeSupported(java.util.UUID)
    {
        java.util.UUID r0;
        byte[] $r1;
        boolean $z0;

        r0 := @parameter0: java.util.UUID;

        $r1 = staticinvoke <android.media.MediaDrm: byte[] getByteArrayFromUUID(java.util.UUID)>(r0);

        $z0 = staticinvoke <android.media.MediaDrm: boolean isCryptoSchemeSupportedNative(byte[],java.lang.String)>($r1, null);

        return $z0;
    }

    public static final boolean isCryptoSchemeSupported(java.util.UUID, java.lang.String)
    {
        java.util.UUID r0;
        java.lang.String r1;
        byte[] $r2;
        boolean $z0;

        r0 := @parameter0: java.util.UUID;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.media.MediaDrm: byte[] getByteArrayFromUUID(java.util.UUID)>(r0);

        $z0 = staticinvoke <android.media.MediaDrm: boolean isCryptoSchemeSupportedNative(byte[],java.lang.String)>($r2, r1);

        return $z0;
    }

    private static final native boolean isCryptoSchemeSupportedNative(byte[], java.lang.String);

    private final native void native_finalize();

    private static final native void native_init();

    private final native void native_setup(java.lang.Object, byte[]);

    private static void postEventFromNative(java.lang.Object, int, int, java.lang.Object)
    {
        java.lang.Object r0, r1, $r5;
        int i0, i1;
        android.media.MediaDrm r2;
        android.os.Message r3;
        java.lang.ref.WeakReference $r4;
        android.media.MediaDrm$EventHandler $r6, $r7, $r8;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $r4 = (java.lang.ref.WeakReference) r0;

        $r5 = virtualinvoke $r4.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r2 = (android.media.MediaDrm) $r5;

        if r2 != null goto label2;

     label1:
        return;

     label2:
        $r6 = r2.<android.media.MediaDrm: android.media.MediaDrm$EventHandler mEventHandler>;

        if $r6 == null goto label1;

        $r7 = r2.<android.media.MediaDrm: android.media.MediaDrm$EventHandler mEventHandler>;

        r3 = virtualinvoke $r7.<android.media.MediaDrm$EventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(200, i0, i1, r1);

        $r8 = r2.<android.media.MediaDrm: android.media.MediaDrm$EventHandler mEventHandler>;

        virtualinvoke $r8.<android.media.MediaDrm$EventHandler: boolean sendMessage(android.os.Message)>(r3);

        return;
    }

    private static final native void setCipherAlgorithmNative(android.media.MediaDrm, byte[], java.lang.String);

    private static final native void setMacAlgorithmNative(android.media.MediaDrm, byte[], java.lang.String);

    private static final native byte[] signNative(android.media.MediaDrm, byte[], byte[], byte[]);

    private static final native boolean verifyNative(android.media.MediaDrm, byte[], byte[], byte[], byte[]);

    public native void closeSession(byte[]);

    protected void finalize()
    {
        android.media.MediaDrm r0;

        r0 := @this: android.media.MediaDrm;

        specialinvoke r0.<android.media.MediaDrm: void native_finalize()>();

        return;
    }

    public android.media.MediaDrm$CryptoSession getCryptoSession(byte[], java.lang.String, java.lang.String)
    {
        android.media.MediaDrm r0;
        byte[] r1;
        java.lang.String r2, r3;
        android.media.MediaDrm$CryptoSession $r4;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = new android.media.MediaDrm$CryptoSession;

        specialinvoke $r4.<android.media.MediaDrm$CryptoSession: void <init>(android.media.MediaDrm,android.media.MediaDrm,byte[],java.lang.String,java.lang.String)>(r0, r0, r1, r2, r3);

        return $r4;
    }

    public native android.media.MediaDrm$KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.HashMap) throws android.media.NotProvisionedException;

    public native byte[] getPropertyByteArray(java.lang.String);

    public native java.lang.String getPropertyString(java.lang.String);

    public native android.media.MediaDrm$ProvisionRequest getProvisionRequest();

    public native java.util.List getSecureStops();

    public native byte[] openSession() throws android.media.NotProvisionedException;

    public native byte[] provideKeyResponse(byte[], byte[]) throws android.media.NotProvisionedException, android.media.DeniedByServerException;

    public native void provideProvisionResponse(byte[]) throws android.media.DeniedByServerException;

    public native java.util.HashMap queryKeyStatus(byte[]);

    public final native void release();

    public native void releaseSecureStops(byte[]);

    public native void removeKeys(byte[]);

    public native void restoreKeys(byte[], byte[]);

    public void setOnEventListener(android.media.MediaDrm$OnEventListener)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnEventListener r1;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnEventListener;

        r0.<android.media.MediaDrm: android.media.MediaDrm$OnEventListener mOnEventListener> = r1;

        return;
    }

    public native void setPropertyByteArray(java.lang.String, byte[]);

    public native void setPropertyString(java.lang.String, java.lang.String);
}
