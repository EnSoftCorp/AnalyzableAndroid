public class com.android.server.wm.WindowAnimator extends java.lang.Object
{
    static final int KEYGUARD_ANIMATING_IN;
    static final int KEYGUARD_ANIMATING_OUT;
    static final int KEYGUARD_NOT_SHOWN;
    static final int KEYGUARD_SHOWN;
    private static final java.lang.String TAG;
    int mAboveUniverseLayer;
    private int mAnimTransactionSequence;
    boolean mAnimating;
    final java.lang.Runnable mAnimationRunnable;
    int mBulkUpdateParams;
    final android.content.Context mContext;
    long mCurrentTime;
    android.util.SparseArray mDisplayContentsAnimators;
    int mForceHiding;
    boolean mInitialized;
    java.lang.Object mLastWindowFreezeSource;
    final android.view.WindowManagerPolicy mPolicy;
    final com.android.server.wm.WindowManagerService mService;
    com.android.server.wm.WindowStateAnimator mUniverseBackground;
    com.android.server.wm.WindowState mWindowDetachedWallpaper;

    void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowAnimator r0;
        com.android.server.wm.WindowManagerService r1;
        android.util.SparseArray $r2;
        android.content.Context $r3;
        android.view.WindowManagerPolicy $r4;
        com.android.server.wm.WindowAnimator$1 $r5;

        r0 := @this: com.android.server.wm.WindowAnimator;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowState mWindowDetachedWallpaper> = null;

        r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowStateAnimator mUniverseBackground> = null;

        r0.<com.android.server.wm.WindowAnimator: int mAboveUniverseLayer> = 0;

        r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams> = 0;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>(int)>(2);

        r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators> = $r2;

        r0.<com.android.server.wm.WindowAnimator: boolean mInitialized> = 0;

        r0.<com.android.server.wm.WindowAnimator: int mForceHiding> = 0;

        r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService> = r1;

        $r3 = r1.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r0.<com.android.server.wm.WindowAnimator: android.content.Context mContext> = $r3;

        $r4 = r1.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        r0.<com.android.server.wm.WindowAnimator: android.view.WindowManagerPolicy mPolicy> = $r4;

        $r5 = new com.android.server.wm.WindowAnimator$1;

        specialinvoke $r5.<com.android.server.wm.WindowAnimator$1: void <init>(com.android.server.wm.WindowAnimator)>(r0);

        r0.<com.android.server.wm.WindowAnimator: java.lang.Runnable mAnimationRunnable> = $r5;

        return;
    }

    static void access$000(com.android.server.wm.WindowAnimator)
    {
        com.android.server.wm.WindowAnimator r0;

        r0 := @parameter0: com.android.server.wm.WindowAnimator;

        specialinvoke r0.<com.android.server.wm.WindowAnimator: void animateLocked()>();

        return;
    }

    private void animateLocked()
    {
        com.android.server.wm.WindowAnimator r0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Throwable r1, $r41;
        java.lang.RuntimeException r2, $r38;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i12, $i13, $i14, $i15, $i16, $i17;
        com.android.server.wm.WindowAnimator$DisplayContentsAnimator r3, $r25;
        com.android.server.wm.ScreenRotationAnimation r4, r6;
        com.android.server.wm.WindowList r5;
        long $l11, $l18;
        android.util.SparseArray $r7, $r11, $r16, $r21, $r27, $r35, $r36;
        com.android.server.wm.WindowManagerService $r8, $r10, $r12, $r13, $r14, $r15, $r17, $r20, $r22, $r24, $r30, $r32, $r33;
        com.android.server.wm.Watermark $r9, $r23;
        java.lang.Object $r18, $r26, $r34, $r37;
        com.android.server.wm.DisplayContent $r19, $r28;
        com.android.server.wm.DisplayMagnifier $r29, $r31;
        com.android.server.wm.WindowState $r39;
        com.android.server.wm.WindowStateAnimator $r40;

        r0 := @this: com.android.server.wm.WindowAnimator;

        $z3 = r0.<com.android.server.wm.WindowAnimator: boolean mInitialized>;

        if $z3 != 0 goto label02;

     label01:
        return;

     label02:
        $l11 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.wm.WindowAnimator: long mCurrentTime> = $l11;

        r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams> = 8;

        z0 = r0.<com.android.server.wm.WindowAnimator: boolean mAnimating>;

        r0.<com.android.server.wm.WindowAnimator: boolean mAnimating> = 0;

        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

        staticinvoke <android.view.SurfaceControl: void setAnimationTransaction()>();

     label03:
        $r7 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        i4 = virtualinvoke $r7.<android.util.SparseArray: int size()>();

     label04:
        i5 = 0;

     label05:
        if i5 >= i4 goto label24;

     label06:
        $r35 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        i6 = virtualinvoke $r35.<android.util.SparseArray: int keyAt(int)>(i5);

        specialinvoke r0.<com.android.server.wm.WindowAnimator: void updateAppWindowsLocked(int)>(i6);

        $r36 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        $r37 = virtualinvoke $r36.<android.util.SparseArray: java.lang.Object valueAt(int)>(i5);

        r3 = (com.android.server.wm.WindowAnimator$DisplayContentsAnimator) $r37;

        r4 = r3.<com.android.server.wm.WindowAnimator$DisplayContentsAnimator: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation>;

     label07:
        if r4 == null goto label09;

     label08:
        $z10 = virtualinvoke r4.<com.android.server.wm.ScreenRotationAnimation: boolean isAnimating()>();

        if $z10 == 0 goto label09;

        $l18 = r0.<com.android.server.wm.WindowAnimator: long mCurrentTime>;

        $z9 = virtualinvoke r4.<com.android.server.wm.ScreenRotationAnimation: boolean stepAnimationLocked(long)>($l18);

        if $z9 == 0 goto label14;

        r0.<com.android.server.wm.WindowAnimator: boolean mAnimating> = 1;

     label09:
        specialinvoke r0.<com.android.server.wm.WindowAnimator: void performAnimationsLocked(int)>(i6);

        $r33 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        r5 = virtualinvoke $r33.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getWindowListLocked(int)>(i6);

        i7 = virtualinvoke r5.<com.android.server.wm.WindowList: int size()>();

     label10:
        i9 = 0;

     label11:
        if i9 >= i7 goto label23;

     label12:
        $r34 = virtualinvoke r5.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i9);

        $r39 = (com.android.server.wm.WindowState) $r34;

        $r40 = $r39.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r40.<com.android.server.wm.WindowStateAnimator: void prepareSurfaceLocked(boolean)>(1);

     label13:
        i9 = i9 + 1;

        goto label11;

     label14:
        $i16 = r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $i17 = 1 | $i16;

        r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams> = $i17;

        virtualinvoke r4.<com.android.server.wm.ScreenRotationAnimation: void kill()>();

        r3.<com.android.server.wm.WindowAnimator$DisplayContentsAnimator: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation> = null;

     label15:
        goto label09;

     label16:
        $r38 := @caughtexception;

        r2 = $r38;

     label17:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowAnimator", "Unhandled exception in Window Manager", r2);

     label18:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

     label19:
        z1 = 0;

        $r12 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r11 = $r12.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i0 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

        i1 = 0;

     label20:
        if i1 >= i0 goto label37;

        $r15 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r16 = $r15.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r18 = virtualinvoke $r16.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r19 = (com.android.server.wm.DisplayContent) $r18;

        $i12 = virtualinvoke $r19.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        i3 = virtualinvoke r0.<com.android.server.wm.WindowAnimator: int getPendingLayoutChanges(int)>($i12);

        $i14 = i3 & 4;

        if $i14 == 0 goto label21;

        $i15 = r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $i13 = 32 | $i15;

        r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams> = $i13;

     label21:
        if i3 == 0 goto label22;

        z1 = 1;

     label22:
        i1 = i1 + 1;

        goto label20;

     label23:
        i5 = i5 + 1;

        goto label05;

     label24:
        i8 = 0;

     label25:
        if i8 >= i4 goto label33;

     label26:
        $r21 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        i10 = virtualinvoke $r21.<android.util.SparseArray: int keyAt(int)>(i8);

        specialinvoke r0.<com.android.server.wm.WindowAnimator: void testTokenMayBeDrawnLocked(int)>(i10);

        $r27 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        $r26 = virtualinvoke $r27.<android.util.SparseArray: java.lang.Object valueAt(int)>(i8);

        $r25 = (com.android.server.wm.WindowAnimator$DisplayContentsAnimator) $r26;

        r6 = $r25.<com.android.server.wm.WindowAnimator$DisplayContentsAnimator: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation>;

     label27:
        if r6 == null goto label29;

     label28:
        virtualinvoke r6.<com.android.server.wm.ScreenRotationAnimation: void updateSurfacesInTransaction()>();

     label29:
        $z8 = r0.<com.android.server.wm.WindowAnimator: boolean mAnimating>;

        $r24 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r28 = virtualinvoke $r24.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i10);

        $z7 = virtualinvoke $r28.<com.android.server.wm.DisplayContent: boolean animateDimLayers()>();

        $z6 = $z8 | $z7;

        r0.<com.android.server.wm.WindowAnimator: boolean mAnimating> = $z6;

        $r32 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r31 = $r32.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayMagnifier mDisplayMagnifier>;

        if $r31 == null goto label41;

     label30:
        if i10 != 0 goto label41;

     label31:
        $r30 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r29 = $r30.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayMagnifier mDisplayMagnifier>;

        virtualinvoke $r29.<com.android.server.wm.DisplayMagnifier: void drawMagnifiedRegionBorderIfNeededLocked()>();

     label32:
        goto label41;

     label33:
        $z4 = r0.<com.android.server.wm.WindowAnimator: boolean mAnimating>;

        if $z4 == 0 goto label34;

        $r22 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r22.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

     label34:
        $r8 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r8.<com.android.server.wm.WindowManagerService: void setFocusedStackLayer()>();

        $r10 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r9 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.Watermark mWatermark>;

        if $r9 == null goto label35;

        $r20 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r23 = $r20.<com.android.server.wm.WindowManagerService: com.android.server.wm.Watermark mWatermark>;

        virtualinvoke $r23.<com.android.server.wm.Watermark: void drawIfNeeded()>();

     label35:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        goto label19;

     label36:
        $r41 := @caughtexception;

        r1 = $r41;

        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw r1;

     label37:
        i2 = r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        z2 = 0;

        if i2 == 0 goto label38;

        $r17 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        z2 = virtualinvoke $r17.<com.android.server.wm.WindowManagerService: boolean copyAnimToLayoutParamsLocked()>();

     label38:
        if z1 != 0 goto label39;

        if z2 == 0 goto label40;

     label39:
        $r14 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r14.<com.android.server.wm.WindowManagerService: void requestTraversalLocked()>();

     label40:
        $z5 = r0.<com.android.server.wm.WindowAnimator: boolean mAnimating>;

        if $z5 != 0 goto label01;

        if z0 == 0 goto label01;

        $r13 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r13.<com.android.server.wm.WindowManagerService: void requestTraversalLocked()>();

        return;

     label41:
        i8 = i8 + 1;

        goto label25;

        catch java.lang.RuntimeException from label03 to label04 with label16;
        catch java.lang.Throwable from label03 to label04 with label36;
        catch java.lang.RuntimeException from label06 to label07 with label16;
        catch java.lang.Throwable from label06 to label07 with label36;
        catch java.lang.RuntimeException from label08 to label09 with label16;
        catch java.lang.Throwable from label08 to label09 with label36;
        catch java.lang.RuntimeException from label09 to label10 with label16;
        catch java.lang.Throwable from label09 to label10 with label36;
        catch java.lang.RuntimeException from label12 to label13 with label16;
        catch java.lang.Throwable from label12 to label13 with label36;
        catch java.lang.RuntimeException from label14 to label15 with label16;
        catch java.lang.Throwable from label14 to label15 with label36;
        catch java.lang.Throwable from label17 to label18 with label36;
        catch java.lang.RuntimeException from label26 to label27 with label16;
        catch java.lang.Throwable from label26 to label27 with label36;
        catch java.lang.RuntimeException from label28 to label29 with label16;
        catch java.lang.Throwable from label28 to label29 with label36;
        catch java.lang.RuntimeException from label29 to label30 with label16;
        catch java.lang.Throwable from label29 to label30 with label36;
        catch java.lang.RuntimeException from label31 to label32 with label16;
        catch java.lang.Throwable from label31 to label32 with label36;
        catch java.lang.RuntimeException from label33 to label34 with label16;
        catch java.lang.Throwable from label33 to label34 with label36;
        catch java.lang.RuntimeException from label34 to label35 with label16;
        catch java.lang.Throwable from label34 to label35 with label36;
    }

    static java.lang.String bulkUpdateParamsToString(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder r0, $r1;
        java.lang.String $r2;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(128);

        r0 = $r1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" UPDATE_ROTATION");

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WALLPAPER_MAY_CHANGE");

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FORCE_HIDING_CHANGED");

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ORIENTATION_CHANGE_COMPLETE");

     label4:
        $i5 = i0 & 16;

        if $i5 == 0 goto label5;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TURN_ON_SCREEN");

     label5:
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private java.lang.String forceHidingToString()
    {
        com.android.server.wm.WindowAnimator r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.wm.WindowAnimator;

        $i0 = r0.<com.android.server.wm.WindowAnimator: int mForceHiding>;

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KEYGUARD STATE UNKNOWN ");

        $i1 = r0.<com.android.server.wm.WindowAnimator: int mForceHiding>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label2:
        return "KEYGUARD_NOT_SHOWN";

     label3:
        return "KEYGUARD_ANIMATING_IN";

     label4:
        return "KEYGUARD_SHOWN";

     label5:
        return "KEYGUARD_ANIMATING_OUT";
    }

    private com.android.server.wm.WindowAnimator$DisplayContentsAnimator getDisplayContentsAnimatorLocked(int)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0;
        com.android.server.wm.WindowAnimator$DisplayContentsAnimator r1, $r4;
        android.util.SparseArray $r2, $r5;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wm.WindowAnimator$DisplayContentsAnimator) $r3;

        if r1 != null goto label1;

        $r4 = new com.android.server.wm.WindowAnimator$DisplayContentsAnimator;

        specialinvoke $r4.<com.android.server.wm.WindowAnimator$DisplayContentsAnimator: void <init>(com.android.server.wm.WindowAnimator,com.android.server.wm.WindowAnimator$1)>(r0, null);

        r1 = $r4;

        $r5 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

     label1:
        return r1;
    }

    private void performAnimationsLocked(int)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wm.WindowAnimator: void updateWindowsLocked(int)>(i0);

        specialinvoke r0.<com.android.server.wm.WindowAnimator: void updateWallpaperLocked(int)>(i0);

        return;
    }

    private void testTokenMayBeDrawnLocked(int)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0, i1, i2, i3, i4;
        java.util.ArrayList r1, $r11;
        com.android.server.wm.AppTokenList r2;
        com.android.server.wm.AppWindowToken r3;
        com.android.server.wm.AppWindowAnimator r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7;
        com.android.server.wm.WindowManagerService $r5, $r10, $r12;
        com.android.server.wm.DisplayContent $r6;
        java.lang.Object $r7, $r9;
        com.android.server.wm.Task $r8;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        $r5 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        r1 = virtualinvoke $r6.<com.android.server.wm.DisplayContent: java.util.ArrayList getTasks()>();

        i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label6;

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r8 = (com.android.server.wm.Task) $r7;

        r2 = $r8.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        i3 = virtualinvoke r2.<com.android.server.wm.AppTokenList: int size()>();

        i4 = 0;

     label2:
        if i4 >= i3 goto label5;

        $r9 = virtualinvoke r2.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i4);

        r3 = (com.android.server.wm.AppWindowToken) $r9;

        r4 = r3.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        z0 = r3.<com.android.server.wm.AppWindowToken: boolean allDrawn>;

        $z1 = r4.<com.android.server.wm.AppWindowAnimator: boolean allDrawn>;

        if z0 == $z1 goto label3;

        r4.<com.android.server.wm.AppWindowAnimator: boolean allDrawn> = z0;

        if z0 == 0 goto label3;

        $z2 = r4.<com.android.server.wm.AppWindowAnimator: boolean freezingScreen>;

        if $z2 == 0 goto label4;

        virtualinvoke r4.<com.android.server.wm.AppWindowAnimator: boolean showAllWindowsLocked()>();

        $r12 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r12.<com.android.server.wm.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,boolean,boolean)>(r3, 0, 1);

        virtualinvoke r0.<com.android.server.wm.WindowAnimator: void setAppLayoutChanges(com.android.server.wm.AppWindowAnimator,int,java.lang.String)>(r4, 4, "testTokenMayBeDrawnLocked: freezingScreen");

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        virtualinvoke r0.<com.android.server.wm.WindowAnimator: void setAppLayoutChanges(com.android.server.wm.AppWindowAnimator,int,java.lang.String)>(r4, 8, "testTokenMayBeDrawnLocked");

        $r10 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: java.util.ArrayList mOpeningApps>;

        $z3 = virtualinvoke $r11.<java.util.ArrayList: boolean contains(java.lang.Object)>(r3);

        if $z3 != 0 goto label3;

        $z5 = r0.<com.android.server.wm.WindowAnimator: boolean mAnimating>;

        $z4 = virtualinvoke r4.<com.android.server.wm.AppWindowAnimator: boolean showAllWindowsLocked()>();

        $z7 = $z5 | $z4;

        r0.<com.android.server.wm.WindowAnimator: boolean mAnimating> = $z7;

        goto label3;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return;
    }

    private void updateAppWindowsLocked(int)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0, i1, i2, i3, i4, i5, i6;
        com.android.server.wm.DisplayContent r1;
        java.util.ArrayList r2;
        com.android.server.wm.AppTokenList r3, r5;
        com.android.server.wm.AppWindowAnimator r4, r6;
        boolean z0, z1, $z2, $z3;
        com.android.server.wm.WindowManagerService $r7;
        java.lang.Object $r8, $r17, $r20;
        android.view.animation.Animation $r9, $r16, $r19, $r24, $r28, $r29;
        com.android.server.wm.AppWindowToken $r10, $r12, $r21, $r25;
        long $l7, $l8;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r23, $r26, $r27, $r31;
        java.lang.String $r18, $r30;
        com.android.server.wm.Task $r22;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        $r7 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        r1 = virtualinvoke $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: java.util.ArrayList getTasks()>();

        i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i2 = 0;

     label01:
        if i2 >= i1 goto label08;

        $r17 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r22 = (com.android.server.wm.Task) $r17;

        r5 = $r22.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        i5 = virtualinvoke r5.<com.android.server.wm.AppTokenList: int size()>();

        i6 = 0;

     label02:
        if i6 >= i5 goto label07;

        $r20 = virtualinvoke r5.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i6);

        $r21 = (com.android.server.wm.AppWindowToken) $r20;

        r6 = $r21.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r24 = r6.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        if $r24 == null goto label05;

        $r28 = r6.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        $r29 = <com.android.server.wm.AppWindowAnimator: android.view.animation.Animation sDummyAnimation>;

        if $r28 == $r29 goto label05;

        z1 = 1;

     label03:
        $l8 = r0.<com.android.server.wm.WindowAnimator: long mCurrentTime>;

        $z3 = virtualinvoke r6.<com.android.server.wm.AppWindowAnimator: boolean stepAnimationLocked(long)>($l8);

        if $z3 == 0 goto label06;

        r0.<com.android.server.wm.WindowAnimator: boolean mAnimating> = 1;

     label04:
        i6 = i6 + 1;

        goto label02;

     label05:
        z1 = 0;

        goto label03;

     label06:
        if z1 == 0 goto label04;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("appToken ");

        $r25 = r6.<com.android.server.wm.AppWindowAnimator: com.android.server.wm.AppWindowToken mAppToken>;

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" done");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.server.wm.WindowAnimator: void setAppLayoutChanges(com.android.server.wm.AppWindowAnimator,int,java.lang.String)>(r6, 4, $r30);

        goto label04;

     label07:
        i2 = i2 + 1;

        goto label01;

     label08:
        r3 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTokenList mExitingAppTokens>;

        i3 = virtualinvoke r3.<com.android.server.wm.AppTokenList: int size()>();

        i4 = 0;

     label09:
        if i4 >= i3 goto label14;

        $r8 = virtualinvoke r3.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i4);

        $r10 = (com.android.server.wm.AppWindowToken) $r8;

        r4 = $r10.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r9 = r4.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        if $r9 == null goto label12;

        $r16 = r4.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        $r19 = <com.android.server.wm.AppWindowAnimator: android.view.animation.Animation sDummyAnimation>;

        if $r16 == $r19 goto label12;

        z0 = 1;

     label10:
        $l7 = r0.<com.android.server.wm.WindowAnimator: long mCurrentTime>;

        $z2 = virtualinvoke r4.<com.android.server.wm.AppWindowAnimator: boolean stepAnimationLocked(long)>($l7);

        if $z2 == 0 goto label13;

        r0.<com.android.server.wm.WindowAnimator: boolean mAnimating> = 1;

     label11:
        i4 = i4 + 1;

        goto label09;

     label12:
        z0 = 0;

        goto label10;

     label13:
        if z0 == 0 goto label11;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exiting appToken ");

        $r12 = r4.<com.android.server.wm.AppWindowAnimator: com.android.server.wm.AppWindowToken mAppToken>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" done");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.server.wm.WindowAnimator: void setAppLayoutChanges(com.android.server.wm.AppWindowAnimator,int,java.lang.String)>(r4, 4, $r18);

        goto label11;

     label14:
        return;
    }

    private void updateWallpaperLocked(int)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        com.android.server.wm.WindowList r1;
        com.android.server.wm.WindowState r2, r3, $r9;
        com.android.server.wm.WindowStateAnimator r4;
        com.android.server.wm.AppWindowAnimator r5;
        com.android.server.wm.WindowManagerService $r6, $r8;
        com.android.server.wm.DisplayContent $r7;
        android.view.SurfaceControl $r10;
        java.lang.Object $r11;
        android.view.animation.Animation $r12, $r13, $r14, $r16, $r18, $r19;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.TaskStack $r15, $r17;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        $r6 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        virtualinvoke $r7.<com.android.server.wm.DisplayContent: void resetAnimationBackgroundAnimator()>();

        $r8 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        r1 = virtualinvoke $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getWindowListLocked(int)>(i0);

        r2 = null;

        $i5 = virtualinvoke r1.<com.android.server.wm.WindowList: int size()>();

        i1 = -1 + $i5;

     label1:
        if i1 < 0 goto label8;

        $r11 = virtualinvoke r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.wm.WindowState) $r11;

        r4 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r10 = r4.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        if $r10 != null goto label3;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        i2 = r4.<com.android.server.wm.WindowStateAnimator: int mAttrFlags>;

        $z0 = r4.<com.android.server.wm.WindowStateAnimator: boolean mAnimating>;

        if $z0 == 0 goto label6;

        $r16 = r4.<com.android.server.wm.WindowStateAnimator: android.view.animation.Animation mAnimation>;

        if $r16 == null goto label5;

        $i9 = i2 & 1048576;

        if $i9 == 0 goto label4;

        $r19 = r4.<com.android.server.wm.WindowStateAnimator: android.view.animation.Animation mAnimation>;

        $z3 = virtualinvoke $r19.<android.view.animation.Animation: boolean getDetachWallpaper()>();

        if $z3 == 0 goto label4;

        r2 = r3;

     label4:
        $r18 = r4.<com.android.server.wm.WindowStateAnimator: android.view.animation.Animation mAnimation>;

        i4 = virtualinvoke $r18.<android.view.animation.Animation: int getBackgroundColor()>();

        if i4 == 0 goto label5;

        $r17 = virtualinvoke r3.<com.android.server.wm.WindowState: com.android.server.wm.TaskStack getStack()>();

        virtualinvoke $r17.<com.android.server.wm.TaskStack: void setAnimationBackground(com.android.server.wm.WindowStateAnimator,int)>(r4, i4);

     label5:
        r0.<com.android.server.wm.WindowAnimator: boolean mAnimating> = 1;

     label6:
        r5 = r4.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        if r5 == null goto label2;

        $r12 = r5.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        if $r12 == null goto label2;

        $z1 = r5.<com.android.server.wm.AppWindowAnimator: boolean animating>;

        if $z1 == 0 goto label2;

        $i8 = i2 & 1048576;

        if $i8 == 0 goto label7;

        $r14 = r5.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        $z2 = virtualinvoke $r14.<android.view.animation.Animation: boolean getDetachWallpaper()>();

        if $z2 == 0 goto label7;

        r2 = r3;

     label7:
        $r13 = r5.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        i3 = virtualinvoke $r13.<android.view.animation.Animation: int getBackgroundColor()>();

        if i3 == 0 goto label2;

        $r15 = virtualinvoke r3.<com.android.server.wm.WindowState: com.android.server.wm.TaskStack getStack()>();

        virtualinvoke $r15.<com.android.server.wm.TaskStack: void setAnimationBackground(com.android.server.wm.WindowStateAnimator,int)>(r4, i3);

        goto label2;

     label8:
        $r9 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowState mWindowDetachedWallpaper>;

        if $r9 == r2 goto label9;

        r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowState mWindowDetachedWallpaper> = r2;

        $i7 = r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $i6 = 2 | $i7;

        r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams> = $i6;

     label9:
        return;
    }

    private void updateWindowsLocked(int)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0, i1, i2, i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        com.android.server.wm.WindowList r1;
        java.util.ArrayList r2, r30;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z14, $z15;
        android.view.animation.Animation r3;
        com.android.server.wm.WindowStateAnimator r4, r6;
        com.android.server.wm.WindowState r5, r9, $r28;
        com.android.server.wm.AppWindowToken r7;
        com.android.server.wm.AppWindowAnimator r8;
        byte b5;
        com.android.server.wm.WindowManagerService $r10, $r16, $r21, $r22, $r23, $r25, $r26, $r27, $r29;
        android.view.WindowManagerPolicy $r11, $r17, $r19;
        java.lang.Object $r12, $r14;
        android.view.SurfaceControl $r13, $r15;
        long $l16;
        android.view.WindowManager$LayoutParams $r18, $r20;
        android.view.WindowManagerPolicy$WindowState r31, r32;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        $i4 = r0.<com.android.server.wm.WindowAnimator: int mAnimTransactionSequence>;

        $i6 = 1 + $i4;

        r0.<com.android.server.wm.WindowAnimator: int mAnimTransactionSequence> = $i6;

        $r10 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        r1 = virtualinvoke $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getWindowListLocked(int)>(i0);

        r2 = null;

        z0 = 0;

        r0.<com.android.server.wm.WindowAnimator: int mForceHiding> = 0;

        $i7 = virtualinvoke r1.<com.android.server.wm.WindowList: int size()>();

        i1 = -1 + $i7;

     label01:
        if i1 < 0 goto label23;

        $r14 = virtualinvoke r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r5 = (com.android.server.wm.WindowState) $r14;

        r6 = r5.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        i3 = r6.<com.android.server.wm.WindowStateAnimator: int mAttrFlags>;

        $r15 = r6.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        if $r15 == null goto label04;

        z1 = r6.<com.android.server.wm.WindowStateAnimator: boolean mWasAnimating>;

        $l16 = r0.<com.android.server.wm.WindowAnimator: long mCurrentTime>;

        z2 = virtualinvoke r6.<com.android.server.wm.WindowStateAnimator: boolean stepAnimationLocked(long)>($l16);

        if z1 == 0 goto label02;

        $z14 = r6.<com.android.server.wm.WindowStateAnimator: boolean mAnimating>;

        if $z14 != 0 goto label02;

        $r29 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r28 = $r29.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if $r28 != r5 goto label02;

        $i36 = r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $i35 = 2 | $i36;

        r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams> = $i35;

        virtualinvoke r0.<com.android.server.wm.WindowAnimator: void setPendingLayoutChanges(int,int)>(0, 4);

        $r27 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $i34 = virtualinvoke r0.<com.android.server.wm.WindowAnimator: int getPendingLayoutChanges(int)>(0);

        virtualinvoke $r27.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("updateWindowsAndWallpaperLocked 2", $i34);

     label02:
        $r17 = r0.<com.android.server.wm.WindowAnimator: android.view.WindowManagerPolicy mPolicy>;

        $r18 = r5.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        r31 = (android.view.WindowManagerPolicy$WindowState) r5;

        $z7 = interfaceinvoke $r17.<android.view.WindowManagerPolicy: boolean doesForceHide(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(r31, $r18);

        if $z7 == 0 goto label13;

        if z1 != 0 goto label03;

        if z2 == 0 goto label03;

        $i32 = r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $i33 = 4 | $i32;

        r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams> = $i33;

        virtualinvoke r0.<com.android.server.wm.WindowAnimator: void setPendingLayoutChanges(int,int)>(i0, 4);

        $r26 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $i31 = virtualinvoke r0.<com.android.server.wm.WindowAnimator: int getPendingLayoutChanges(int)>(i0);

        virtualinvoke $r26.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("updateWindowsAndWallpaperLocked 3", $i31);

        $r25 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r25.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 1;

     label03:
        $z10 = virtualinvoke r5.<com.android.server.wm.WindowState: boolean isReadyForDisplay()>();

        if $z10 == 0 goto label04;

        if z2 == 0 goto label10;

        $z15 = r6.<com.android.server.wm.WindowStateAnimator: boolean mAnimationIsEntrance>;

        if $z15 == 0 goto label09;

        r0.<com.android.server.wm.WindowAnimator: int mForceHiding> = 1;

     label04:
        r7 = r5.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $i9 = r6.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i9 != 3 goto label06;

        if r7 == null goto label05;

        $z6 = r7.<com.android.server.wm.AppWindowToken: boolean allDrawn>;

        if $z6 == 0 goto label06;

     label05:
        $z5 = virtualinvoke r6.<com.android.server.wm.WindowStateAnimator: boolean performShowLocked()>();

        if $z5 == 0 goto label06;

        virtualinvoke r0.<com.android.server.wm.WindowAnimator: void setPendingLayoutChanges(int,int)>(i0, 8);

        $r16 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $i17 = virtualinvoke r0.<com.android.server.wm.WindowAnimator: int getPendingLayoutChanges(int)>(i0);

        virtualinvoke $r16.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("updateWindowsAndWallpaperLocked 5", $i17);

     label06:
        r8 = r6.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        if r8 == null goto label08;

        $r13 = r8.<com.android.server.wm.AppWindowAnimator: android.view.SurfaceControl thumbnail>;

        if $r13 == null goto label08;

        $i13 = r8.<com.android.server.wm.AppWindowAnimator: int thumbnailTransactionSeq>;

        $i12 = r0.<com.android.server.wm.WindowAnimator: int mAnimTransactionSequence>;

        if $i13 == $i12 goto label07;

        $i15 = r0.<com.android.server.wm.WindowAnimator: int mAnimTransactionSequence>;

        r8.<com.android.server.wm.AppWindowAnimator: int thumbnailTransactionSeq> = $i15;

        r8.<com.android.server.wm.AppWindowAnimator: int thumbnailLayer> = 0;

     label07:
        $i11 = r8.<com.android.server.wm.AppWindowAnimator: int thumbnailLayer>;

        $i10 = r6.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        if $i11 >= $i10 goto label08;

        $i14 = r6.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        r8.<com.android.server.wm.AppWindowAnimator: int thumbnailLayer> = $i14;

     label08:
        i1 = i1 + -1;

        goto label01;

     label09:
        r0.<com.android.server.wm.WindowAnimator: int mForceHiding> = 3;

        goto label04;

     label10:
        $z11 = virtualinvoke r5.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z11 == 0 goto label12;

        b5 = 2;

     label11:
        r0.<com.android.server.wm.WindowAnimator: int mForceHiding> = b5;

        goto label04;

     label12:
        b5 = 0;

        goto label11;

     label13:
        $r19 = r0.<com.android.server.wm.WindowAnimator: android.view.WindowManagerPolicy mPolicy>;

        $r20 = r5.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        r32 = (android.view.WindowManagerPolicy$WindowState) r5;

        $z8 = interfaceinvoke $r19.<android.view.WindowManagerPolicy: boolean canBeForceHidden(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(r32, $r20);

        if $z8 == 0 goto label04;

        $i18 = r6.<com.android.server.wm.WindowStateAnimator: int mAttrFlags>;

        $i21 = 524288 & $i18;

        if $i21 != 0 goto label18;

        z4 = 1;

     label14:
        $i20 = r0.<com.android.server.wm.WindowAnimator: int mForceHiding>;

        if $i20 != 1 goto label15;

        $z9 = virtualinvoke r6.<com.android.server.wm.WindowStateAnimator: boolean isAnimating()>();

        if $z9 == 0 goto label16;

        if z4 != 0 goto label16;

     label15:
        $i19 = r0.<com.android.server.wm.WindowAnimator: int mForceHiding>;

        if $i19 != 2 goto label19;

        if z4 == 0 goto label19;

     label16:
        z3 = virtualinvoke r5.<com.android.server.wm.WindowState: boolean hideLw(boolean,boolean)>(0, 0);

     label17:
        if z3 == 0 goto label04;

        $i24 = 1048576 & i3;

        if $i24 == 0 goto label04;

        $i23 = r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $i22 = 2 | $i23;

        r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams> = $i22;

        virtualinvoke r0.<com.android.server.wm.WindowAnimator: void setPendingLayoutChanges(int,int)>(0, 4);

        $r21 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $i27 = virtualinvoke r0.<com.android.server.wm.WindowAnimator: int getPendingLayoutChanges(int)>(0);

        virtualinvoke $r21.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("updateWindowsAndWallpaperLocked 4", $i27);

        goto label04;

     label18:
        z4 = 0;

        goto label14;

     label19:
        z3 = virtualinvoke r5.<com.android.server.wm.WindowState: boolean showLw(boolean,boolean)>(0, 0);

        if z3 == 0 goto label17;

        $i28 = r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $i29 = 4 & $i28;

        if $i29 == 0 goto label21;

        $z12 = virtualinvoke r5.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z12 == 0 goto label21;

        if r2 != null goto label20;

        r30 = new java.util.ArrayList;

        specialinvoke r30.<java.util.ArrayList: void <init>()>();

        r2 = r30;

     label20:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        $i30 = 1048576 & i3;

        if $i30 == 0 goto label21;

        z0 = 1;

     label21:
        $r22 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        r9 = $r22.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        if r9 == null goto label22;

        $i26 = r9.<com.android.server.wm.WindowState: int mLayer>;

        $i25 = r5.<com.android.server.wm.WindowState: int mLayer>;

        if $i26 >= $i25 goto label17;

     label22:
        $r23 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r23.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 1;

        goto label17;

     label23:
        if r2 == null goto label26;

        $i8 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i2 = -1 + $i8;

     label24:
        if i2 < 0 goto label26;

        $r11 = r0.<com.android.server.wm.WindowAnimator: android.view.WindowManagerPolicy mPolicy>;

        r3 = interfaceinvoke $r11.<android.view.WindowManagerPolicy: android.view.animation.Animation createForceHideEnterAnimation(boolean)>(z0);

        if r3 == null goto label25;

        $r12 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r4 = (com.android.server.wm.WindowStateAnimator) $r12;

        virtualinvoke r4.<com.android.server.wm.WindowStateAnimator: void setAnimation(android.view.animation.Animation)>(r3);

        r4.<com.android.server.wm.WindowStateAnimator: boolean mAnimationIsEntrance> = 1;

     label25:
        i2 = i2 + -1;

        goto label24;

     label26:
        return;
    }

    void addDisplayLocked(int)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowAnimator$DisplayContentsAnimator getDisplayContentsAnimatorLocked(int)>(i0);

        if i0 != 0 goto label1;

        r0.<com.android.server.wm.WindowAnimator: boolean mInitialized> = 1;

     label1:
        return;
    }

    public void dumpLocked(java.io.PrintWriter, java.lang.String, boolean)
    {
        com.android.server.wm.WindowAnimator r0;
        java.io.PrintWriter r1;
        java.lang.String r2, r3, r4, $r19, $r20, $r21, $r22;
        boolean z0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11;
        com.android.server.wm.WindowAnimator$DisplayContentsAnimator r5;
        com.android.server.wm.WindowList r6;
        com.android.server.wm.WindowStateAnimator r7, $r16, $r17;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13;
        android.util.SparseArray $r14, $r23, $r25, $r26;
        com.android.server.wm.WindowState $r15, $r18, $r31;
        long $l8;
        java.lang.Object $r24, $r29;
        com.android.server.wm.WindowManagerService $r27;
        com.android.server.wm.ScreenRotationAnimation $r28, $r30;

        r0 := @this: com.android.server.wm.WindowAnimator;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r4 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = 0;

     label01:
        $r14 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        $i3 = virtualinvoke $r14.<android.util.SparseArray: int size()>();

        if i0 >= $i3 goto label06;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("DisplayContentsAnimator #");

        $r25 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        $i10 = virtualinvoke $r25.<android.util.SparseArray: int keyAt(int)>(i0);

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i10);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        $r23 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        $r24 = virtualinvoke $r23.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        r5 = (com.android.server.wm.WindowAnimator$DisplayContentsAnimator) $r24;

        $r27 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r26 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        $i11 = virtualinvoke $r26.<android.util.SparseArray: int keyAt(int)>(i0);

        r6 = virtualinvoke $r27.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getWindowListLocked(int)>($i11);

        i1 = virtualinvoke r6.<com.android.server.wm.WindowList: int size()>();

        i2 = 0;

     label02:
        if i2 >= i1 goto label03;

        $r29 = virtualinvoke r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        $r31 = (com.android.server.wm.WindowState) $r29;

        r7 = $r31.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Window #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>(r7);

        i2 = i2 + 1;

        goto label02;

     label03:
        $r30 = r5.<com.android.server.wm.WindowAnimator$DisplayContentsAnimator: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation>;

        if $r30 == null goto label05;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("mScreenRotationAnimation:");

        $r28 = r5.<com.android.server.wm.WindowAnimator$DisplayContentsAnimator: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation>;

        virtualinvoke $r28.<com.android.server.wm.ScreenRotationAnimation: void printTo(java.lang.String,java.io.PrintWriter)>(r4, r1);

     label04:
        i0 = i0 + 1;

        goto label01;

     label05:
        if z0 == 0 goto label04;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("no ScreenRotationAnimation ");

        goto label04;

     label06:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        if z0 == 0 goto label07;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mAnimTransactionSequence=");

        $i9 = r0.<com.android.server.wm.WindowAnimator: int mAnimTransactionSequence>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i9);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mForceHiding=");

        $r22 = specialinvoke r0.<com.android.server.wm.WindowAnimator: java.lang.String forceHidingToString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r22);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mCurrentTime=");

        $l8 = r0.<com.android.server.wm.WindowAnimator: long mCurrentTime>;

        $r21 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l8);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r21);

     label07:
        $i4 = r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        if $i4 == 0 goto label08;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mBulkUpdateParams=0x");

        $i6 = r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r19);

        $i7 = r0.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $r20 = staticinvoke <com.android.server.wm.WindowAnimator: java.lang.String bulkUpdateParamsToString(int)>($i7);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r20);

     label08:
        $r15 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowState mWindowDetachedWallpaper>;

        if $r15 == null goto label09;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mWindowDetachedWallpaper=");

        $r18 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowState mWindowDetachedWallpaper>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r18);

     label09:
        $r17 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowStateAnimator mUniverseBackground>;

        if $r17 == null goto label10;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mUniverseBackground=");

        $r16 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowStateAnimator mUniverseBackground>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mAboveUniverseLayer=");

        $i5 = r0.<com.android.server.wm.WindowAnimator: int mAboveUniverseLayer>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i5);

     label10:
        return;
    }

    int getPendingLayoutChanges(int)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0, $i1;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        $i1 = $r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        return $i1;
    }

    com.android.server.wm.ScreenRotationAnimation getScreenRotationAnimationLocked(int)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0;
        com.android.server.wm.WindowAnimator$DisplayContentsAnimator $r1;
        com.android.server.wm.ScreenRotationAnimation $r2;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowAnimator$DisplayContentsAnimator getDisplayContentsAnimatorLocked(int)>(i0);

        $r2 = $r1.<com.android.server.wm.WindowAnimator$DisplayContentsAnimator: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation>;

        return $r2;
    }

    void hideWallpapersLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowAnimator r0;
        com.android.server.wm.WindowState r1, r2, r3, r6;
        java.util.ArrayList r4;
        int i0, i1, $i2, $i3;
        com.android.server.wm.WindowToken r5;
        com.android.server.wm.WindowStateAnimator r7;
        com.android.server.wm.WindowManagerService $r8, $r9, $r10, $r15;
        java.lang.Object $r11, $r14;
        com.android.server.wm.WindowList $r12, $r13;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowAnimator;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r8 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        r2 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $r9 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        r3 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        $r10 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        r4 = $r10.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        if r2 != r1 goto label1;

        if r3 == null goto label2;

     label1:
        if r2 != null goto label7;

     label2:
        $i2 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        i0 = -1 + $i2;

     label3:
        if i0 < 0 goto label7;

        $r11 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.wm.WindowToken) $r11;

        $r12 = r5.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $i3 = virtualinvoke $r12.<com.android.server.wm.WindowList: int size()>();

        i1 = -1 + $i3;

     label4:
        if i1 < 0 goto label6;

        $r13 = r5.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $r14 = virtualinvoke $r13.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r6 = (com.android.server.wm.WindowState) $r14;

        r7 = r6.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z0 = r7.<com.android.server.wm.WindowStateAnimator: boolean mLastHidden>;

        if $z0 != 0 goto label5;

        virtualinvoke r7.<com.android.server.wm.WindowStateAnimator: void hide()>();

        $r15 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r15.<com.android.server.wm.WindowManagerService: void dispatchWallpaperVisibility(com.android.server.wm.WindowState,boolean)>(r6, 0);

        virtualinvoke r0.<com.android.server.wm.WindowAnimator: void setPendingLayoutChanges(int,int)>(0, 4);

     label5:
        i1 = i1 + -1;

        goto label4;

     label6:
        r5.<com.android.server.wm.WindowToken: boolean hidden> = 1;

        i0 = i0 + -1;

        goto label3;

     label7:
        return;
    }

    void removeDisplayLocked(int)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0;
        com.android.server.wm.WindowAnimator$DisplayContentsAnimator r1;
        android.util.SparseArray $r2, $r4;
        java.lang.Object $r3;
        com.android.server.wm.ScreenRotationAnimation $r5, $r6;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wm.WindowAnimator$DisplayContentsAnimator) $r3;

        if r1 == null goto label1;

        $r5 = r1.<com.android.server.wm.WindowAnimator$DisplayContentsAnimator: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation>;

        if $r5 == null goto label1;

        $r6 = r1.<com.android.server.wm.WindowAnimator$DisplayContentsAnimator: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation>;

        virtualinvoke $r6.<com.android.server.wm.ScreenRotationAnimation: void kill()>();

        r1.<com.android.server.wm.WindowAnimator$DisplayContentsAnimator: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation> = null;

     label1:
        $r4 = r0.<com.android.server.wm.WindowAnimator: android.util.SparseArray mDisplayContentsAnimators>;

        virtualinvoke $r4.<android.util.SparseArray: void delete(int)>(i0);

        return;
    }

    void setAppLayoutChanges(com.android.server.wm.AppWindowAnimator, int, java.lang.String)
    {
        com.android.server.wm.WindowAnimator r0;
        com.android.server.wm.AppWindowAnimator r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String r2;
        android.util.SparseIntArray r3, $r5;
        com.android.server.wm.WindowList r4;
        com.android.server.wm.AppWindowToken $r6;
        java.lang.Object $r7;
        com.android.server.wm.WindowState $r8;
        com.android.server.wm.WindowManagerService $r9;

        r0 := @this: com.android.server.wm.WindowAnimator;

        r1 := @parameter0: com.android.server.wm.AppWindowAnimator;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r5 = new android.util.SparseIntArray;

        specialinvoke $r5.<android.util.SparseIntArray: void <init>(int)>(2);

        r3 = $r5;

        $r6 = r1.<com.android.server.wm.AppWindowAnimator: com.android.server.wm.AppWindowToken mAppToken>;

        r4 = $r6.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        $i3 = virtualinvoke r4.<com.android.server.wm.WindowList: int size()>();

        i1 = -1 + $i3;

     label1:
        if i1 < 0 goto label3;

        $r7 = virtualinvoke r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r8 = (com.android.server.wm.WindowState) $r7;

        i2 = virtualinvoke $r8.<com.android.server.wm.WindowState: int getDisplayId()>();

        $i4 = virtualinvoke r3.<android.util.SparseIntArray: int indexOfKey(int)>(i2);

        if $i4 >= 0 goto label2;

        virtualinvoke r0.<com.android.server.wm.WindowAnimator: void setPendingLayoutChanges(int,int)>(i2, i0);

        $r9 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        $i5 = virtualinvoke r0.<com.android.server.wm.WindowAnimator: int getPendingLayoutChanges(int)>(i2);

        virtualinvoke $r9.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>(r2, $i5);

        virtualinvoke r3.<android.util.SparseIntArray: void put(int,int)>(i2, i0);

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return;
    }

    void setPendingLayoutChanges(int, int)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0, i1, $i2, $i3;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowManagerService mService>;

        r1 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        $i2 = r1.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i3 = i1 | $i2;

        r1.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i3;

        return;
    }

    void setScreenRotationAnimationLocked(int, com.android.server.wm.ScreenRotationAnimation)
    {
        com.android.server.wm.WindowAnimator r0;
        int i0;
        com.android.server.wm.ScreenRotationAnimation r1;
        com.android.server.wm.WindowAnimator$DisplayContentsAnimator $r2;

        r0 := @this: com.android.server.wm.WindowAnimator;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.ScreenRotationAnimation;

        $r2 = specialinvoke r0.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowAnimator$DisplayContentsAnimator getDisplayContentsAnimatorLocked(int)>(i0);

        $r2.<com.android.server.wm.WindowAnimator$DisplayContentsAnimator: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation> = r1;

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.WindowAnimator: java.lang.String TAG> = "WindowAnimator";

        <com.android.server.wm.WindowAnimator: int KEYGUARD_SHOWN> = 2;

        <com.android.server.wm.WindowAnimator: int KEYGUARD_NOT_SHOWN> = 0;

        <com.android.server.wm.WindowAnimator: int KEYGUARD_ANIMATING_OUT> = 3;

        <com.android.server.wm.WindowAnimator: int KEYGUARD_ANIMATING_IN> = 1;

        return;
    }
}
