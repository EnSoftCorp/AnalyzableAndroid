public class com.android.server.DevicePolicyManagerService extends android.app.admin.IDevicePolicyManager$Stub
{
    protected static final java.lang.String ACTION_EXPIRED_PASSWORD_NOTIFICATION;
    private static final boolean DBG;
    private static final java.lang.String DEVICE_POLICIES_XML;
    private static final long EXPIRATION_GRACE_PERIOD_MS;
    private static final int MONITORING_CERT_NOTIFICATION_ID;
    private static final long MS_PER_DAY;
    private static final int REQUEST_EXPIRE_PASSWORD;
    public static final java.lang.String SYSTEM_PROP_DISABLE_CAMERA;
    private static final java.lang.String TAG;
    final android.content.Context mContext;
    private com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner;
    android.os.Handler mHandler;
    private boolean mHasFeature;
    android.os.IPowerManager mIPowerManager;
    android.view.IWindowManager mIWindowManager;
    android.app.NotificationManager mNotificationManager;
    android.content.BroadcastReceiver mReceiver;
    final android.util.SparseArray mUserData;
    final android.os.PowerManager$WakeLock mWakeLock;

    public void <init>(android.content.Context)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.Context r1;
        android.content.IntentFilter r2, r3, $r11, $r15;
        android.util.SparseArray $r4;
        android.os.Handler $r5, $r12, $r18;
        com.android.server.DevicePolicyManagerService$1 $r6;
        android.content.pm.PackageManager $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        android.os.PowerManager $r9;
        android.os.PowerManager$WakeLock $r10;
        android.content.BroadcastReceiver $r13, $r20;
        android.os.UserHandle $r14, $r17;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.admin.IDevicePolicyManager$Stub: void <init>()>();

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.DevicePolicyManagerService: android.util.SparseArray mUserData> = $r4;

        $r5 = new android.os.Handler;

        specialinvoke $r5.<android.os.Handler: void <init>()>();

        r0.<com.android.server.DevicePolicyManagerService: android.os.Handler mHandler> = $r5;

        $r6 = new com.android.server.DevicePolicyManagerService$1;

        specialinvoke $r6.<com.android.server.DevicePolicyManagerService$1: void <init>(com.android.server.DevicePolicyManagerService)>(r0);

        r0.<com.android.server.DevicePolicyManagerService: android.content.BroadcastReceiver mReceiver> = $r6;

        r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext> = r1;

        $r7 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r7.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.device_admin");

        r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature> = $z0;

        $r8 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r9 = (android.os.PowerManager) $r8;

        $r10 = virtualinvoke $r9.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "DPM");

        r0.<com.android.server.DevicePolicyManagerService: android.os.PowerManager$WakeLock mWakeLock> = $r10;

        $z1 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        $r11 = new android.content.IntentFilter;

        specialinvoke $r11.<android.content.IntentFilter: void <init>()>();

        r2 = $r11;

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BOOT_COMPLETED");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.server.ACTION_EXPIRED_PASSWORD_NOTIFICATION");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STARTED");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.security.STORAGE_CHANGED");

        $r13 = r0.<com.android.server.DevicePolicyManagerService: android.content.BroadcastReceiver mReceiver>;

        $r14 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r12 = r0.<com.android.server.DevicePolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r13, $r14, r2, null, $r12);

        $r15 = new android.content.IntentFilter;

        specialinvoke $r15.<android.content.IntentFilter: void <init>()>();

        r3 = $r15;

        virtualinvoke r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_CHANGED");

        virtualinvoke r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE");

        virtualinvoke r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke r3.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r20 = r0.<com.android.server.DevicePolicyManagerService: android.content.BroadcastReceiver mReceiver>;

        $r17 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r18 = r0.<com.android.server.DevicePolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r20, $r17, r3, null, $r18);

        return;
    }

    static void access$000(com.android.server.DevicePolicyManagerService, com.android.server.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.DevicePolicyManagerService r0;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;

        r0 := @parameter0: com.android.server.DevicePolicyManagerService;

        r1 := @parameter1: com.android.server.DevicePolicyManagerService$DevicePolicyData;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void handlePasswordExpirationNotification(com.android.server.DevicePolicyManagerService$DevicePolicyData)>(r1);

        return;
    }

    static void access$100(com.android.server.DevicePolicyManagerService, android.content.Intent)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.Intent r1;

        r0 := @parameter0: com.android.server.DevicePolicyManagerService;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void manageMonitoringCertificateNotification(android.content.Intent)>(r1);

        return;
    }

    static void access$200(com.android.server.DevicePolicyManagerService, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void handlePackagesChanged(int)>(i0);

        return;
    }

    static void access$300(com.android.server.DevicePolicyManagerService, com.android.server.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.DevicePolicyManagerService r0;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;

        r0 := @parameter0: com.android.server.DevicePolicyManagerService;

        r1 := @parameter1: com.android.server.DevicePolicyManagerService$DevicePolicyData;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void resetGlobalProxyLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)>(r1);

        return;
    }

    static void access$400(com.android.server.DevicePolicyManagerService, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        return;
    }

    private void enableIfNecessary(java.lang.String, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0, $i1;
        android.content.pm.IPackageManager r3;
        android.content.pm.ApplicationInfo $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        r3 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r4 = interfaceinvoke r3.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r1, 32768, i0);

        $i1 = $r4.<android.content.pm.ApplicationInfo: int enabledSetting>;

        if $i1 != 4 goto label2;

        interfaceinvoke r3.<android.content.pm.IPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>(r1, 0, 1, i0, "DevicePolicyManager");

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void enforceCrossUserPermission(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        android.content.Context $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid userId ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        if i0 != $i2 goto label3;

     label2:
        return;

     label3:
        if i1 == 1000 goto label2;

        if i1 == 0 goto label2;

        $r1 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", "Must be system or have INTERACT_ACROSS_USERS_FULL permission");

        return;
    }

    private int getEncryptionStatus()
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.crypto.state", "unsupported");

        $r2 = "encrypted";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return 3;

     label1:
        $r3 = "unencrypted";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private android.os.IPowerManager getIPowerManager()
    {
        com.android.server.DevicePolicyManagerService r0;
        android.os.IPowerManager $r1, $r2, $r4;
        android.os.IBinder $r3;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.DevicePolicyManagerService: android.os.IPowerManager mIPowerManager>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("power");

        $r4 = staticinvoke <android.os.IPowerManager$Stub: android.os.IPowerManager asInterface(android.os.IBinder)>($r3);

        r0.<com.android.server.DevicePolicyManagerService: android.os.IPowerManager mIPowerManager> = $r4;

     label1:
        $r2 = r0.<com.android.server.DevicePolicyManagerService: android.os.IPowerManager mIPowerManager>;

        return $r2;
    }

    private android.app.NotificationManager getNotificationManager()
    {
        com.android.server.DevicePolicyManagerService r0;
        android.app.NotificationManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.DevicePolicyManagerService: android.app.NotificationManager mNotificationManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r5 = (android.app.NotificationManager) $r4;

        r0.<com.android.server.DevicePolicyManagerService: android.app.NotificationManager mNotificationManager> = $r5;

     label1:
        $r2 = r0.<com.android.server.DevicePolicyManagerService: android.app.NotificationManager mNotificationManager>;

        return $r2;
    }

    private long getPasswordExpirationLocked(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i3, i4;
        long l1, l2, $l7, $l9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3, r4;
        java.util.ArrayList $r5, $r6;
        byte $b5, $b6, $b8;
        java.lang.Object $r7;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        l1 = 0L;

        if r1 == null goto label2;

        r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r4 == null goto label1;

        l1 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

     label1:
        return l1;

     label2:
        l2 = 0L;

        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r5 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i3 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i4 = 0;

     label3:
        if i4 >= i3 goto label6;

        $r6 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r3 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r7;

        $b5 = l2 cmp 0L;

        if $b5 == 0 goto label4;

        $l7 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $b6 = $l7 cmp 0L;

        if $b6 == 0 goto label5;

        $l9 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $b8 = l2 cmp $l9;

        if $b8 <= 0 goto label5;

     label4:
        l2 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

     label5:
        i4 = i4 + 1;

        goto label3;

     label6:
        return l2;
    }

    private android.view.IWindowManager getWindowManager()
    {
        com.android.server.DevicePolicyManagerService r0;
        android.view.IWindowManager $r1, $r2, $r4;
        android.os.IBinder $r3;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.DevicePolicyManagerService: android.view.IWindowManager mIWindowManager>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r4 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r3);

        r0.<com.android.server.DevicePolicyManagerService: android.view.IWindowManager mIWindowManager> = $r4;

     label1:
        $r2 = r0.<com.android.server.DevicePolicyManagerService: android.view.IWindowManager mIWindowManager>;

        return $r2;
    }

    private void handlePackagesChanged(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i1, $i2, $i3;
        boolean z0;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;
        android.content.pm.IPackageManager r2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3;
        java.util.ArrayList $r5, $r6, $r10;
        java.lang.Object $r7;
        java.lang.String $r8;
        android.app.admin.DeviceAdminInfo $r9, $r12, $r16;
        android.content.pm.PackageInfo $r11;
        android.content.ComponentName $r14, $r19;
        java.util.HashMap $r15;
        android.content.pm.ActivityInfo $r18;
        android.os.RemoteException $r20;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 = 0;

        r1 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r5 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $i2 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i1 = -1 + $i2;

     label1:
        if i1 < 0 goto label6;

        $r6 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r7;

     label2:
        $r9 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r9.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $r11 = interfaceinvoke r2.<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>($r8, 0, i0);

        if $r11 == null goto label3;

        $r16 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r19 = virtualinvoke $r16.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r18 = interfaceinvoke r2.<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>($r19, 0, i0);

        if $r18 != null goto label5;

     label3:
        z0 = 1;

     label4:
        $r10 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r10.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        $r15 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r12 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r14 = virtualinvoke $r12.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r14);

     label5:
        i1 = i1 + -1;

        goto label1;

     label6:
        if z0 == 0 goto label7;

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void validatePasswordOwnerLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)>(r1);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void syncDeviceCapabilitiesLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)>(r1);

        $i3 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>($i3);

     label7:
        return;

     label8:
        $r20 := @caughtexception;

        goto label5;

        catch android.os.RemoteException from label2 to label3 with label8;
        catch android.os.RemoteException from label4 to label5 with label8;
    }

    private void handlePasswordExpirationNotification(com.android.server.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.DevicePolicyManagerService r0;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;
        java.lang.Throwable r2, $r9;
        long l0, $l4, $l6, $l7, $l8;
        int i1, i2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3;
        java.util.ArrayList $r4, $r6;
        android.content.Context $r5;
        java.lang.Object $r7;
        boolean $z0;
        android.app.admin.DeviceAdminInfo $r8;
        byte $b3, $b5, $b9;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.DevicePolicyManagerService$DevicePolicyData;

        entermonitor r0;

     label01:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label02:
        if i1 > 0 goto label13;

     label03:
        exitmonitor r0;

     label04:
        return;

     label05:
        if i2 >= i1 goto label08;

     label06:
        $r6 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r3 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r7;

        $r8 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z0 = virtualinvoke $r8.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(6);

        if $z0 == 0 goto label14;

        $l4 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b3 = $l4 cmp 0L;

        if $b3 <= 0 goto label14;

        $l6 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $b5 = $l6 cmp 0L;

        if $b5 <= 0 goto label14;

        $l8 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $l7 = $l8 - 432000000L;

        $b9 = l0 cmp $l7;

        if $b9 < 0 goto label14;

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String)>(r3, "android.app.action.ACTION_PASSWORD_EXPIRING");

     label07:
        goto label14;

     label08:
        $r5 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,com.android.server.DevicePolicyManagerService$DevicePolicyData)>($r5, r1);

        exitmonitor r0;

     label09:
        return;

     label10:
        $r9 := @caughtexception;

        r2 = $r9;

     label11:
        exitmonitor r0;

     label12:
        throw r2;

     label13:
        i2 = 0;

        goto label05;

     label14:
        i2 = i2 + 1;

        goto label05;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private boolean isDeviceProvisioned()
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0;
        boolean z0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "device_provisioned", 0);

        z0 = 0;

        if i0 <= 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    private boolean isEncryptionSupported()
    {
        com.android.server.DevicePolicyManagerService r0;
        int $i0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        $i0 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: int getEncryptionStatus()>();

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isExtStorageEncrypted()
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        $r1 = "";

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("vold.decrypt");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void loadSettingsLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        java.io.File r2;
        java.io.FileInputStream r3, r5, r112;
        java.lang.IndexOutOfBoundsException r4, $r86, $r107;
        com.android.internal.widget.LockPatternUtils r6, r116;
        java.io.IOException r8, $r81, $r100, $r101;
        org.xmlpull.v1.XmlPullParserException r10, $r66, $r108, r114;
        java.lang.NumberFormatException r11, $r99, $r106;
        java.lang.NullPointerException r12, $r71, $r103;
        org.xmlpull.v1.XmlPullParser r13;
        java.lang.String r14, r15, r17, $r23, $r27, $r29, $r32, $r34, $r35, $r36, $r37, $r38, $r39, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r55, $r67, $r73, $r79, $r84, $r93, $r98, $r102;
        java.lang.RuntimeException r16, $r105;
        android.app.admin.DeviceAdminInfo r18, $r51;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r20, r118;
        com.android.internal.util.JournaledFile $r22;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.content.Context $r26;
        java.lang.StringBuilder $r28, $r30, $r31, $r33, $r41, $r42, $r57, $r62, $r63, $r64, $r68, $r69, $r74, $r75, $r76, $r77, $r78, $r82, $r83, $r85, $r89, $r90, $r91, $r92, $r94, $r95, $r96, $r97, $r109, $r110, r113, r115, r117, r119, r120, r121, r122, r123, r124;
        java.util.HashMap $r52;
        android.content.ComponentName $r54, $r60;
        java.util.ArrayList $r59;
        java.io.FileNotFoundException $r72, $r104;
        java.lang.Throwable r125;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.DevicePolicyManagerService$DevicePolicyData;

        i0 := @parameter1: int;

        $r22 = staticinvoke <com.android.server.DevicePolicyManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>(i0);

        r2 = virtualinvoke $r22.<com.android.internal.util.JournaledFile: java.io.File chooseForRead()>();

     label01:
        r112 = new java.io.FileInputStream;

        specialinvoke r112.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        r3 = r112;

     label02:
        r13 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r3, null);

     label03:
        i1 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: int next()>();

     label04:
        if i1 == 1 goto label05;

        if i1 != 2 goto label03;

     label05:
        r14 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r23 = "policies";

        $z0 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z0 != 0 goto label12;

        r114 = new org.xmlpull.v1.XmlPullParserException;

        r113 = new java.lang.StringBuilder;

        specialinvoke r113.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Settings do not start with policies tag: found ");

        $r68 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r114.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r67);

        r125 = (java.lang.Throwable) r114;

        throw r125;

     label06:
        $r71 := @caughtexception;

        r12 = $r71;

        r5 = r3;

     label07:
        r115 = new java.lang.StringBuilder;

        specialinvoke r115.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r83 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r82 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r85 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r84 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r84);

     label08:
        if r5 == null goto label10;

     label09:
        virtualinvoke r5.<java.io.FileInputStream: void close()>();

     label10:
        r116 = new com.android.internal.widget.LockPatternUtils;

        $r26 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke r116.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>($r26);

        r6 = r116;

        $i6 = virtualinvoke r6.<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()>();

        $i5 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        if $i6 >= $i5 goto label11;

        r117 = new java.lang.StringBuilder;

        specialinvoke r117.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Active password quality 0x");

        $i7 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match actual quality 0x");

        $i8 = virtualinvoke r6.<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()>();

        $r29 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r32);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality> = 0;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength> = 0;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase> = 0;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase> = 0;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters> = 0;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric> = 0;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols> = 0;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter> = 0;

     label11:
        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void validatePasswordOwnerLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)>(r1);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void syncDeviceCapabilitiesLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)>(r1);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void updateMaximumTimeToLockLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)>(r1);

        return;

     label12:
        interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: int next()>();

        i3 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label13:
        i2 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: int next()>();

     label14:
        if i2 == 1 goto label41;

        if i2 != 3 goto label16;

     label15:
        $i21 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i21 <= i3 goto label41;

     label16:
        if i2 == 3 goto label13;

        if i2 == 4 goto label13;

     label17:
        r15 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r36 = "admin";

        $z3 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z3 == 0 goto label27;

        r17 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

     label18:
        $r54 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r17);

        r18 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int)>($r54, i0);

     label19:
        if r18 == null goto label13;

     label20:
        r118 = new com.android.server.DevicePolicyManagerService$ActiveAdmin;

        specialinvoke r118.<com.android.server.DevicePolicyManagerService$ActiveAdmin: void <init>(android.app.admin.DeviceAdminInfo)>(r18);

        r20 = r118;

        virtualinvoke r20.<com.android.server.DevicePolicyManagerService$ActiveAdmin: void readFromXml(org.xmlpull.v1.XmlPullParser)>(r13);

        $r52 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r51 = r20.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r60 = virtualinvoke $r51.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke $r52.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r60, r20);

        $r59 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r59.<java.util.ArrayList: boolean add(java.lang.Object)>(r20);

     label21:
        goto label13;

     label22:
        $r105 := @caughtexception;

        r16 = $r105;

     label23:
        r119 = new java.lang.StringBuilder;

        specialinvoke r119.<java.lang.StringBuilder: void <init>()>();

        $r110 = virtualinvoke r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed loading admin ");

        $r109 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r102 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", $r102, r16);

     label24:
        goto label13;

     label25:
        $r106 := @caughtexception;

        r11 = $r106;

        r5 = r3;

     label26:
        r120 = new java.lang.StringBuilder;

        specialinvoke r120.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r93);

        goto label08;

     label27:
        $r37 = "failed-password-attempts";

        $z4 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z4 == 0 goto label31;

        $r55 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i20 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r55);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = $i20;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r13);

     label28:
        goto label13;

     label29:
        $r108 := @caughtexception;

        r10 = $r108;

        r5 = r3;

     label30:
        r121 = new java.lang.StringBuilder;

        specialinvoke r121.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r74 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r73 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r73);

        goto label08;

     label31:
        $r34 = "password-owner";

        $z1 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z1 == 0 goto label33;

        $r48 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i17 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r48);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = $i17;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r13);

     label32:
        goto label13;

     label33:
        $r35 = "active-password";

        $z2 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z2 == 0 goto label37;

        $r39 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "quality");

        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r39);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality> = $i11;

        $r45 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "length");

        $i14 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r45);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength> = $i14;

        $r46 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "uppercase");

        $i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r46);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase> = $i15;

        $r43 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "lowercase");

        $i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r43);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase> = $i12;

        $r44 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "letters");

        $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r44);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters> = $i13;

        $r49 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "numeric");

        $i18 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r49);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric> = $i18;

        $r50 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "symbols");

        $i19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r50);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols> = $i19;

        $r47 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "nonletter");

        $i16 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r47);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter> = $i16;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r13);

     label34:
        goto label13;

     label35:
        $r100 := @caughtexception;

        r8 = $r100;

        r5 = r3;

     label36:
        r122 = new java.lang.StringBuilder;

        specialinvoke r122.<java.lang.StringBuilder: void <init>()>();

        $r94 = virtualinvoke r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r98);

        goto label08;

     label37:
        r123 = new java.lang.StringBuilder;

        specialinvoke r123.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown tag: ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r38 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r38);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r13);

     label38:
        goto label13;

     label39:
        $r86 := @caughtexception;

        r4 = $r86;

        r5 = r3;

     label40:
        r124 = new java.lang.StringBuilder;

        specialinvoke r124.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r78 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r77 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r79 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r79);

        goto label08;

     label41:
        r5 = r3;

        goto label08;

     label42:
        $r101 := @caughtexception;

        goto label10;

     label43:
        $r107 := @caughtexception;

        r4 = $r107;

        r5 = null;

        goto label40;

     label44:
        $r81 := @caughtexception;

        r8 = $r81;

        r5 = null;

        goto label36;

     label45:
        $r72 := @caughtexception;

        r5 = null;

        goto label08;

     label46:
        $r66 := @caughtexception;

        r10 = $r66;

        r5 = null;

        goto label30;

     label47:
        $r99 := @caughtexception;

        r11 = $r99;

        r5 = null;

        goto label26;

     label48:
        $r103 := @caughtexception;

        r12 = $r103;

        r5 = null;

        goto label07;

     label49:
        $r104 := @caughtexception;

        r5 = r3;

        goto label08;

        catch java.lang.NullPointerException from label01 to label02 with label48;
        catch java.lang.NumberFormatException from label01 to label02 with label47;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label46;
        catch java.io.FileNotFoundException from label01 to label02 with label45;
        catch java.io.IOException from label01 to label02 with label44;
        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label43;
        catch java.lang.NullPointerException from label02 to label03 with label06;
        catch java.lang.NumberFormatException from label02 to label03 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label29;
        catch java.io.FileNotFoundException from label02 to label03 with label49;
        catch java.io.IOException from label02 to label03 with label35;
        catch java.lang.IndexOutOfBoundsException from label02 to label03 with label39;
        catch java.lang.NullPointerException from label03 to label04 with label06;
        catch java.lang.NumberFormatException from label03 to label04 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label29;
        catch java.io.FileNotFoundException from label03 to label04 with label49;
        catch java.io.IOException from label03 to label04 with label35;
        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label39;
        catch java.lang.NullPointerException from label05 to label06 with label06;
        catch java.lang.NumberFormatException from label05 to label06 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label29;
        catch java.io.FileNotFoundException from label05 to label06 with label49;
        catch java.io.IOException from label05 to label06 with label35;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label39;
        catch java.io.IOException from label09 to label10 with label42;
        catch java.lang.NullPointerException from label12 to label13 with label06;
        catch java.lang.NumberFormatException from label12 to label13 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label29;
        catch java.io.FileNotFoundException from label12 to label13 with label49;
        catch java.io.IOException from label12 to label13 with label35;
        catch java.lang.IndexOutOfBoundsException from label12 to label13 with label39;
        catch java.lang.NullPointerException from label13 to label14 with label06;
        catch java.lang.NumberFormatException from label13 to label14 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label29;
        catch java.io.FileNotFoundException from label13 to label14 with label49;
        catch java.io.IOException from label13 to label14 with label35;
        catch java.lang.IndexOutOfBoundsException from label13 to label14 with label39;
        catch java.lang.NullPointerException from label15 to label16 with label06;
        catch java.lang.NumberFormatException from label15 to label16 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label29;
        catch java.io.FileNotFoundException from label15 to label16 with label49;
        catch java.io.IOException from label15 to label16 with label35;
        catch java.lang.IndexOutOfBoundsException from label15 to label16 with label39;
        catch java.lang.NullPointerException from label17 to label18 with label06;
        catch java.lang.NumberFormatException from label17 to label18 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label29;
        catch java.io.FileNotFoundException from label17 to label18 with label49;
        catch java.io.IOException from label17 to label18 with label35;
        catch java.lang.IndexOutOfBoundsException from label17 to label18 with label39;
        catch java.lang.RuntimeException from label18 to label19 with label22;
        catch java.lang.NullPointerException from label18 to label19 with label06;
        catch java.lang.NumberFormatException from label18 to label19 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label29;
        catch java.io.FileNotFoundException from label18 to label19 with label49;
        catch java.io.IOException from label18 to label19 with label35;
        catch java.lang.IndexOutOfBoundsException from label18 to label19 with label39;
        catch java.lang.RuntimeException from label20 to label21 with label22;
        catch java.lang.NullPointerException from label20 to label21 with label06;
        catch java.lang.NumberFormatException from label20 to label21 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label20 to label21 with label29;
        catch java.io.FileNotFoundException from label20 to label21 with label49;
        catch java.io.IOException from label20 to label21 with label35;
        catch java.lang.IndexOutOfBoundsException from label20 to label21 with label39;
        catch java.lang.NullPointerException from label23 to label24 with label06;
        catch java.lang.NumberFormatException from label23 to label24 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label23 to label24 with label29;
        catch java.io.FileNotFoundException from label23 to label24 with label49;
        catch java.io.IOException from label23 to label24 with label35;
        catch java.lang.IndexOutOfBoundsException from label23 to label24 with label39;
        catch java.lang.NullPointerException from label27 to label28 with label06;
        catch java.lang.NumberFormatException from label27 to label28 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label27 to label28 with label29;
        catch java.io.FileNotFoundException from label27 to label28 with label49;
        catch java.io.IOException from label27 to label28 with label35;
        catch java.lang.IndexOutOfBoundsException from label27 to label28 with label39;
        catch java.lang.NullPointerException from label31 to label32 with label06;
        catch java.lang.NumberFormatException from label31 to label32 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label31 to label32 with label29;
        catch java.io.FileNotFoundException from label31 to label32 with label49;
        catch java.io.IOException from label31 to label32 with label35;
        catch java.lang.IndexOutOfBoundsException from label31 to label32 with label39;
        catch java.lang.NullPointerException from label33 to label34 with label06;
        catch java.lang.NumberFormatException from label33 to label34 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label33 to label34 with label29;
        catch java.io.FileNotFoundException from label33 to label34 with label49;
        catch java.io.IOException from label33 to label34 with label35;
        catch java.lang.IndexOutOfBoundsException from label33 to label34 with label39;
        catch java.lang.NullPointerException from label37 to label38 with label06;
        catch java.lang.NumberFormatException from label37 to label38 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label37 to label38 with label29;
        catch java.io.FileNotFoundException from label37 to label38 with label49;
        catch java.io.IOException from label37 to label38 with label35;
        catch java.lang.IndexOutOfBoundsException from label37 to label38 with label39;
    }

    private void lockNowUnchecked()
    {
        com.android.server.DevicePolicyManagerService r0;
        long l0, $l1;
        java.lang.Throwable r2, $r6;
        android.os.IPowerManager $r3;
        android.view.IWindowManager $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: android.os.IPowerManager getIPowerManager()>();

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        interfaceinvoke $r3.<android.os.IPowerManager: void goToSleep(long,int)>($l1, 1);

        $r4 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: android.view.IWindowManager getWindowManager()>();

        interfaceinvoke $r4.<android.view.IWindowManager: void lockNow(android.os.Bundle)>(null);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label4:
        $r5 := @caughtexception;

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static com.android.internal.util.JournaledFile makeJournaledFile(int)
    {
        int i0;
        java.lang.String r0, $r9;
        java.io.File $r1, $r2, $r4, $r5;
        com.android.internal.util.JournaledFile $r3;
        java.lang.StringBuilder $r6, $r7, $r8;

        i0 := @parameter0: int;

        if i0 != 0 goto label2;

        r0 = "/data/system/device_policies.xml";

     label1:
        $r3 = new com.android.internal.util.JournaledFile;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r0);

        $r5 = new java.io.File;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r9);

        specialinvoke $r3.<com.android.internal.util.JournaledFile: void <init>(java.io.File,java.io.File)>($r4, $r5);

        return $r3;

     label2:
        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "device_policies.xml");

        r0 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label1;
    }

    private void manageMonitoringCertificateNotification(android.content.Intent)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.Intent r1, r4, $r14;
        android.app.NotificationManager r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String r3, $r11, $r23, $r29, $r37, $r38;
        int i0;
        android.app.PendingIntent r5;
        android.app.Notification r6;
        java.util.Iterator r7, r10;
        android.content.Context r8, $r12, $r17, $r18, $r20, $r32, $r42;
        java.lang.Object[] r9;
        android.os.UserHandle $r15, $r28, $r34, $r45;
        android.app.Notification$Builder $r19, $r21, $r22, $r24, $r25, $r26, $r27;
        android.os.UserManager $r30, $r40;
        java.util.List $r31, $r39;
        java.lang.Object $r33, $r36, $r41, $r43;
        android.content.pm.UserInfo $r35, $r44;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: android.app.NotificationManager getNotificationManager()>();

        $z1 = staticinvoke <android.app.admin.DevicePolicyManager: boolean hasAnyCaCertsInstalled()>();

        if $z1 != 0 goto label2;

        $r37 = virtualinvoke r1.<android.content.Intent: java.lang.String getAction()>();

        $z4 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>("android.security.STORAGE_CHANGED");

        if $z4 == 0 goto label9;

        $r42 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r41 = virtualinvoke $r42.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r40 = (android.os.UserManager) $r41;

        $r39 = virtualinvoke $r40.<android.os.UserManager: java.util.List getUsers()>();

        r10 = interfaceinvoke $r39.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z5 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label9;

        $r43 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r44 = (android.content.pm.UserInfo) $r43;

        $r45 = virtualinvoke $r44.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        virtualinvoke r2.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, 17039536, $r45);

        goto label1;

     label2:
        $r11 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: java.lang.String getDeviceOwner()>();

        if $r11 == null goto label6;

        z0 = 1;

     label3:
        if z0 == 0 goto label7;

        r8 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        r9 = newarray (java.lang.Object)[1];

        $r38 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: java.lang.String getDeviceOwnerName()>();

        r9[0] = $r38;

        r3 = virtualinvoke r8.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17039538, r9);

        i0 = 17302956;

     label4:
        $r14 = new android.content.Intent;

        specialinvoke $r14.<android.content.Intent: void <init>(java.lang.String)>("com.android.settings.MONITORING_CERT_INFO");

        r4 = $r14;

        virtualinvoke r4.<android.content.Intent: android.content.Intent setFlags(int)>(268468224);

        virtualinvoke r4.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>("com.android.settings");

        $r17 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r15 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        r5 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r17, 0, r4, 134217728, null, $r15);

        $r19 = new android.app.Notification$Builder;

        $r18 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke $r19.<android.app.Notification$Builder: void <init>(android.content.Context)>($r18);

        $r21 = virtualinvoke $r19.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(i0);

        $r20 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r23 = virtualinvoke $r20.<android.content.Context: java.lang.String getString(int)>(17039536);

        $r22 = virtualinvoke $r21.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>($r23);

        $r26 = virtualinvoke $r22.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r3);

        $r27 = virtualinvoke $r26.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>(r5);

        $r24 = virtualinvoke $r27.<android.app.Notification$Builder: android.app.Notification$Builder setPriority(int)>(1);

        $r25 = virtualinvoke $r24.<android.app.Notification$Builder: android.app.Notification$Builder setShowWhen(boolean)>(0);

        r6 = virtualinvoke $r25.<android.app.Notification$Builder: android.app.Notification build()>();

        $r29 = virtualinvoke r1.<android.content.Intent: java.lang.String getAction()>();

        $z2 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("android.security.STORAGE_CHANGED");

        if $z2 == 0 goto label8;

        $r32 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r33 = virtualinvoke $r32.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r30 = (android.os.UserManager) $r33;

        $r31 = virtualinvoke $r30.<android.os.UserManager: java.util.List getUsers()>();

        r7 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label9;

        $r36 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r35 = (android.content.pm.UserInfo) $r36;

        $r34 = virtualinvoke $r35.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        virtualinvoke r2.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(null, 17039536, r6, $r34);

        goto label5;

     label6:
        z0 = 0;

        goto label3;

     label7:
        $r12 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        r3 = virtualinvoke $r12.<android.content.Context: java.lang.String getString(int)>(17039537);

        i0 = 17301642;

        goto label4;

     label8:
        $r28 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke r2.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(null, 17039536, r6, $r28);

     label9:
        return;
    }

    private static java.security.cert.X509Certificate parseCert(byte[]) throws java.security.cert.CertificateException, java.io.IOException
    {
        byte[] r0;
        java.security.cert.CertificateFactory $r1;
        java.io.ByteArrayInputStream $r2;
        java.security.cert.Certificate $r3;
        java.security.cert.X509Certificate $r4;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r3 = virtualinvoke $r1.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r2);

        $r4 = (java.security.cert.X509Certificate) $r3;

        return $r4;
    }

    private void resetGlobalProxyLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.DevicePolicyManagerService r0;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;
        int i0, i1;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;
        java.lang.String $r6, $r7;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.DevicePolicyManagerService$DevicePolicyData;

        $r3 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r5;

        $z0 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy>;

        if $z0 == 0 goto label2;

        $r7 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec>;

        $r6 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList>;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveGlobalProxyLocked(java.lang.String,java.lang.String)>($r7, $r6);

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveGlobalProxyLocked(java.lang.String,java.lang.String)>(null, null);

        return;
    }

    private void saveGlobalProxyLocked(java.lang.String, java.lang.String)
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.String r1, r2, r4, $r8, $r10, $r12, $r16, $r17, $r18;
        java.lang.String[] r3;
        int i0, i1, $i2;
        android.content.ContentResolver r5;
        android.net.ProxyProperties r6, $r11;
        android.content.Context $r9;
        boolean $z0;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.NumberFormatException $r19;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r2 != null goto label1;

        r2 = "";

     label1:
        if r1 != null goto label2;

        r1 = "";

     label2:
        $r8 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        r3 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        i0 = 8080;

        $i2 = lengthof r3;

        if $i2 <= 1 goto label5;

     label3:
        $r17 = r3[1];

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

     label4:
        i0 = i1;

     label5:
        r4 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        $r9 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        r5 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r11 = new android.net.ProxyProperties;

        $r10 = r3[0];

        specialinvoke $r11.<android.net.ProxyProperties: void <init>(java.lang.String,int,java.lang.String)>($r10, i0, r4);

        r6 = $r11;

        $z0 = virtualinvoke r6.<android.net.ProxyProperties: boolean isValid()>();

        if $z0 != 0 goto label6;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid proxy properties, ignoring: ");

        $r16 = virtualinvoke r6.<android.net.ProxyProperties: java.lang.String toString()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r18);

        return;

     label6:
        $r12 = r3[0];

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r5, "global_http_proxy_host", $r12);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r5, "global_http_proxy_port", i0);

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r5, "global_http_proxy_exclusion_list", r4);

        return;

     label7:
        $r19 := @caughtexception;

        goto label5;

        catch java.lang.NumberFormatException from label3 to label4 with label7;
    }

    private void saveSettingsLocked(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;
        com.android.internal.util.JournaledFile r2;
        java.io.FileOutputStream r3, r4, $r11;
        com.android.internal.util.FastXmlSerializer r5, $r10;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r8;
        java.io.File $r12;
        java.util.ArrayList $r13, $r40;
        java.lang.Boolean $r14;
        java.lang.String $r17, $r20, $r22, $r23, $r24, $r26, $r30, $r31, $r37, $r41, $r45;
        android.content.ComponentName $r46;
        android.app.admin.DeviceAdminInfo $r47;
        java.lang.Object $r49;
        java.io.IOException $r50, $r51, $r52;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r2 = staticinvoke <com.android.server.DevicePolicyManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>(i0);

        r3 = null;

     label01:
        $r11 = new java.io.FileOutputStream;

        $r12 = virtualinvoke r2.<com.android.internal.util.JournaledFile: java.io.File chooseForWrite()>();

        specialinvoke $r11.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r12, 0);

        r4 = $r11;

     label02:
        $r10 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r10.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r5 = $r10;

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r4, "utf-8");

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r14);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "policies");

        $r13 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

     label03:
        i2 = 0;

     label04:
        if i2 >= i1 goto label09;

     label05:
        $r40 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r49 = virtualinvoke $r40.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r8 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r49;

     label06:
        if r8 == null goto label21;

     label07:
        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "admin");

        $r47 = r8.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r46 = virtualinvoke $r47.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r45 = virtualinvoke $r46.<android.content.ComponentName: java.lang.String flattenToString()>();

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r45);

        virtualinvoke r8.<com.android.server.DevicePolicyManagerService$ActiveAdmin: void writeToXml(org.xmlpull.v1.XmlSerializer)>(r5);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "admin");

     label08:
        goto label21;

     label09:
        $i4 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i4 < 0 goto label10;

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "password-owner");

        $i22 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        $r41 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i22);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r41);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "password-owner");

     label10:
        $i5 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        if $i5 == 0 goto label11;

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "failed-password-attempts");

        $i20 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        $r37 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i20);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r37);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "failed-password-attempts");

     label11:
        $i3 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        if $i3 != 0 goto label12;

        $i19 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength>;

        if $i19 != 0 goto label12;

        $i18 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase>;

        if $i18 != 0 goto label12;

        $i15 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase>;

        if $i15 != 0 goto label12;

        $i14 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters>;

        if $i14 != 0 goto label12;

        $i17 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric>;

        if $i17 != 0 goto label12;

        $i16 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols>;

        if $i16 != 0 goto label12;

        $i21 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter>;

        if $i21 == 0 goto label13;

     label12:
        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "active-password");

        $i6 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "quality", $r17);

        $i7 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i7);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "length", $r20);

        $i8 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i8);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "uppercase", $r22);

        $i9 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i9);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "lowercase", $r24);

        $i10 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i10);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "letters", $r23);

        $i12 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric>;

        $r26 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i12);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "numeric", $r26);

        $i11 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols>;

        $r31 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i11);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "symbols", $r31);

        $i13 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter>;

        $r30 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i13);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "nonletter", $r30);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "active-password");

     label13:
        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "policies");

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

        virtualinvoke r2.<com.android.internal.util.JournaledFile: void commit()>();

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void sendChangedNotification(int)>(i0);

     label14:
        return;

     label15:
        $r52 := @caughtexception;

     label16:
        if r3 == null goto label18;

     label17:
        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label18:
        virtualinvoke r2.<com.android.internal.util.JournaledFile: void rollback()>();

        return;

     label19:
        $r50 := @caughtexception;

        goto label18;

     label20:
        $r51 := @caughtexception;

        r3 = r4;

        goto label16;

     label21:
        i2 = i2 + 1;

        goto label04;

        catch java.io.IOException from label01 to label02 with label15;
        catch java.io.IOException from label02 to label03 with label20;
        catch java.io.IOException from label05 to label06 with label20;
        catch java.io.IOException from label07 to label08 with label20;
        catch java.io.IOException from label09 to label10 with label20;
        catch java.io.IOException from label10 to label11 with label20;
        catch java.io.IOException from label11 to label12 with label20;
        catch java.io.IOException from label12 to label13 with label20;
        catch java.io.IOException from label13 to label14 with label20;
        catch java.io.IOException from label17 to label18 with label19;
    }

    private void sendChangedNotification(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0;
        android.content.Intent r1, $r3;
        long l1;
        java.lang.Throwable r2, $r7;
        android.os.UserHandle $r5;
        android.content.Context $r6;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED");

        r1 = $r3;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r6 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = new android.os.UserHandle;

        specialinvoke $r5.<android.os.UserHandle: void <init>(int)>(i0);

        virtualinvoke $r6.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void setEncryptionRequested(boolean)
    {
        com.android.server.DevicePolicyManagerService r0;
        boolean z0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        return;
    }

    private void updatePasswordExpirationsLocked(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i1, i2;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        long l3, l4, $l6;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        android.app.admin.DeviceAdminInfo $r6;
        byte $b5;
        boolean $z0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r3 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i1 <= 0 goto label6;

        i2 = 0;

     label1:
        if i2 >= i1 goto label5;

        $r4 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r2 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r5;

        $r6 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z0 = virtualinvoke $r6.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(6);

        if $z0 == 0 goto label3;

        l3 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b5 = l3 cmp 0L;

        if $b5 <= 0 goto label4;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l4 = l3 + $l6;

     label2:
        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate> = l4;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        l4 = 0L;

        goto label2;

     label5:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label6:
        return;
    }

    static void validateQualityConstant(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 0: goto label2;
            case 32768: goto label2;
            case 65536: goto label2;
            case 131072: goto label2;
            case 262144: goto label2;
            case 327680: goto label2;
            case 393216: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid quality constant: 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        return;
    }

    private void wipeDeviceOrUserLocked(int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i1;
        com.android.server.DevicePolicyManagerService$3 $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 0 goto label1;

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void wipeDataLocked(int)>(i0);

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void lockNowUnchecked()>();

        $r2 = r0.<com.android.server.DevicePolicyManagerService: android.os.Handler mHandler>;

        $r1 = new com.android.server.DevicePolicyManagerService$3;

        specialinvoke $r1.<com.android.server.DevicePolicyManagerService$3: void <init>(com.android.server.DevicePolicyManagerService,int)>(r0, i1);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.DevicePolicyManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        android.util.PrintWriterPrinter r4, $r9;
        java.lang.Throwable r5, $r29;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r6;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r7;
        android.content.Context $r8;
        android.util.SparseArray $r10, $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r16, $r23, $r24, $r25, $r26, $r28;
        java.lang.String $r15, $r20, $r27;
        java.util.ArrayList $r17, $r18;
        android.content.ComponentName $r19;
        java.lang.Object $r21;
        android.app.admin.DeviceAdminInfo $r22;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r8 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r8.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i4 == 0 goto label01;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump DevicePolicyManagerService from from pid=");

        $i8 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i9 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        return;

     label01:
        $r9 = new android.util.PrintWriterPrinter;

        specialinvoke $r9.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>(r2);

        r4 = $r9;

        entermonitor r0;

     label02:
        interfaceinvoke r4.<android.util.Printer: void println(java.lang.String)>("Current Device Policy Manager state:");

        $r10 = r0.<com.android.server.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        i0 = virtualinvoke $r10.<android.util.SparseArray: int size()>();

     label03:
        i1 = 0;

     label04:
        if i1 >= i0 goto label14;

     label05:
        $r11 = r0.<com.android.server.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $i5 = virtualinvoke $r11.<android.util.SparseArray: int keyAt(int)>(i1);

        r6 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i5);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Enabled Device Admins (User ");

        $i6 = r6.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("):");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<android.util.Printer: void println(java.lang.String)>($r15);

        $r17 = r6.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

     label06:
        i3 = 0;

     label07:
        if i3 >= i2 goto label12;

     label08:
        $r18 = r6.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r21 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r21;

     label09:
        if r7 == null goto label19;

     label10:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $r22 = r7.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r19 = virtualinvoke $r22.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r20 = virtualinvoke $r19.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r20);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r7.<com.android.server.DevicePolicyManagerService$ActiveAdmin: void dump(java.lang.String,java.io.PrintWriter)>("    ", r2);

     label11:
        goto label19;

     label12:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mPasswordOwner=");

        $i7 = r6.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i7);

     label13:
        i1 = i1 + 1;

        goto label04;

     label14:
        exitmonitor r0;

     label15:
        return;

     label16:
        $r29 := @caughtexception;

        r5 = $r29;

     label17:
        exitmonitor r0;

     label18:
        throw r5;

     label19:
        i3 = i3 + 1;

        goto label07;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.content.Intent r2, r34;
        java.util.List r3;
        android.app.admin.DeviceAdminInfo r4, r37;
        java.io.IOException r5, $r25;
        org.xmlpull.v1.XmlPullParserException r6, $r21;
        boolean $z0;
        android.content.Context $r9, $r16;
        android.content.pm.PackageManager $r10;
        java.lang.StringBuilder $r13, $r14, $r22, $r23, $r24, $r26, $r28, $r29, $r32, $r33, r35, r38, r39;
        java.lang.String $r15, $r27, $r31;
        android.content.pm.ResolveInfo $r18;
        java.lang.Object $r19;
        java.lang.IllegalArgumentException r36;
        java.lang.Throwable r40;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r34 = new android.content.Intent;

        specialinvoke r34.<android.content.Intent: void <init>()>();

        r2 = r34;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r1);

        $r9 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r3 = virtualinvoke $r10.<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int,int)>(r2, 32896, i0);

        if r3 == null goto label2;

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i1 > 0 goto label3;

     label2:
        r36 = new java.lang.IllegalArgumentException;

        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown admin: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw r36;

     label3:
        r37 = new android.app.admin.DeviceAdminInfo;

        $r16 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r19 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r18 = (android.content.pm.ResolveInfo) $r19;

        specialinvoke r37.<android.app.admin.DeviceAdminInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>($r16, $r18);

        r4 = r37;

     label4:
        return r4;

     label5:
        $r21 := @caughtexception;

        r6 = $r21;

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad device admin requested for user=");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        r40 = (java.lang.Throwable) r6;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", $r27, r40);

        return null;

     label6:
        $r25 := @caughtexception;

        r5 = $r25;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad device admin requested for user=");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", $r31, r5);

        return null;

        catch org.xmlpull.v1.XmlPullParserException from label3 to label4 with label5;
        catch java.io.IOException from label3 to label4 with label6;
    }

    com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName, int) throws java.lang.SecurityException
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1, $r20;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3;
        java.util.ArrayList $r4, $r11;
        java.lang.SecurityException $r5, $r18, $r27, $r35;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r21, $r22, $r25, $r26, $r28, $r29, $r31, $r32, $r33, $r34, $r37, $r39, $r40;
        java.lang.String $r12, $r24, $r30, $r36, $r38;
        java.lang.Object $r13, $r15;
        boolean $z0, $z1;
        android.app.admin.DeviceAdminInfo $r14, $r17, $r19, $r23;
        java.util.HashMap $r16;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        if r1 == null goto label3;

        $r16 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r15 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r15;

        if r3 != null goto label1;

        $r35 = new java.lang.SecurityException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No active admin ");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.SecurityException: void <init>(java.lang.String)>($r38);

        throw $r35;

     label1:
        $i7 = virtualinvoke r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        if $i7 == i1 goto label2;

        $r27 = new java.lang.SecurityException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not owned by uid ");

        $i8 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r37 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.SecurityException: void <init>(java.lang.String)>($r36);

        throw $r27;

     label2:
        $r17 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z1 = virtualinvoke $r17.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(i0);

        if $z1 != 0 goto label5;

        $r18 = new java.lang.SecurityException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        $r19 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r20 = virtualinvoke $r19.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" did not specify uses-policy for: ");

        $r23 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r24 = virtualinvoke $r23.<android.app.admin.DeviceAdminInfo: java.lang.String getTagForPolicy(int)>(i0);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>($r30);

        throw $r18;

     label3:
        $r4 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i3 = 0;

     label4:
        if i3 >= i2 goto label7;

        $r11 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r13 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r3 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r13;

        $i6 = virtualinvoke r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        if $i6 != i1 goto label6;

        $r14 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z0 = virtualinvoke $r14.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(i0);

        if $z0 == 0 goto label6;

     label5:
        return r3;

     label6:
        i3 = i3 + 1;

        goto label4;

     label7:
        $r5 = new java.lang.SecurityException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No active admin owned by uid ");

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for policy #");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r5;
    }

    com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.DevicePolicyManagerService$DevicePolicyData $r3;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        java.lang.String $r6, $r9, $r10, $r13;
        android.app.admin.DeviceAdminInfo $r7, $r11;
        android.content.pm.ActivityInfo $r8, $r12;
        boolean $z0, $z1;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r4 = $r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r5;

        if r2 == null goto label1;

        $r6 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r7 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>();

        $r9 = $r8.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getClassName()>();

        $r11 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r12 = virtualinvoke $r11.<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>();

        $r13 = $r12.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label1;

        return r2;

     label1:
        return null;
    }

    public java.util.List getActiveAdmins(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i1, i2;
        java.lang.Throwable r1, $r12;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        java.util.ArrayList r3, $r4, $r5, $r6;
        boolean $z0;
        java.lang.Object $r7;
        android.app.admin.DeviceAdminInfo $r8;
        com.android.server.DevicePolicyManagerService$ActiveAdmin $r9;
        android.content.ComponentName $r10;
        java.util.List $r11;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        $r11 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r11;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

     label02:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r4 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label03:
        if i1 > 0 goto label09;

     label04:
        exitmonitor r0;

     label05:
        return null;

     label06:
        $r12 := @caughtexception;

        r1 = $r12;

     label07:
        exitmonitor r0;

     label08:
        throw r1;

     label09:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i1);

        r3 = $r5;

     label10:
        i2 = 0;

     label11:
        if i2 >= i1 goto label14;

     label12:
        $r6 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r9 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r7;

        $r8 = $r9.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r10 = virtualinvoke $r8.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

     label13:
        i2 = i2 + 1;

        goto label11;

     label14:
        exitmonitor r0;

     label15:
        return r3;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch java.lang.Throwable from label14 to label15 with label06;
    }

    public boolean getCameraDisabled(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        java.lang.Throwable r3, $r9;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, $r7;
        boolean z0, $z1, $z2;
        java.util.ArrayList $r5, $r6;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z1 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return 0;

     label01:
        entermonitor r0;

        if r1 == null goto label10;

     label02:
        r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        z0 = 0;

        if r4 == null goto label05;

     label04:
        z0 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

     label05:
        exitmonitor r0;

     label06:
        return z0;

     label07:
        $r9 := @caughtexception;

        r3 = $r9;

     label08:
        exitmonitor r0;

     label09:
        throw r3;

     label10:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r5 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

     label11:
        i2 = 0;

     label12:
        if i2 >= i1 goto label15;

     label13:
        $r6 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r7 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $z2 = $r7.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        if $z2 == 0 goto label17;

        exitmonitor r0;

     label14:
        return 1;

     label15:
        exitmonitor r0;

     label16:
        return 0;

     label17:
        i2 = i2 + 1;

        goto label12;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
        catch java.lang.Throwable from label13 to label14 with label07;
        catch java.lang.Throwable from label15 to label16 with label07;
    }

    public int getCurrentFailedPasswordAttempts(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i1;
        java.lang.Throwable r1, $r4;
        com.android.server.DevicePolicyManagerService$DevicePolicyData $r3;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, 1);

        $r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        i1 = $r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        exitmonitor r0;

     label2:
        return i1;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getDeviceOwner()
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.Throwable r1, $r5;
        java.lang.String r2;
        boolean $z0;
        com.android.server.DevicePolicyManagerService$DeviceOwner $r3, $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        entermonitor r0;

     label2:
        $r3 = r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner>;

        if $r3 == null goto label7;

        $r4 = r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner>;

        r2 = virtualinvoke $r4.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String getPackageName()>();

        exitmonitor r0;

     label3:
        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

     label7:
        exitmonitor r0;

     label8:
        return null;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public java.lang.String getDeviceOwnerName()
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.Throwable r1, $r6;
        java.lang.String r2;
        boolean $z0;
        android.content.Context $r3;
        com.android.server.DevicePolicyManagerService$DeviceOwner $r4, $r5;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USERS", null);

        entermonitor r0;

     label2:
        $r4 = r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner>;

        if $r4 == null goto label7;

        $r5 = r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner>;

        r2 = virtualinvoke $r5.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String getName()>();

        exitmonitor r0;

     label3:
        return r2;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

     label7:
        exitmonitor r0;

     label8:
        return null;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public android.content.ComponentName getGlobalProxyAdmin(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i1, i2;
        java.lang.Throwable r1, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3;
        android.content.ComponentName r4;
        boolean $z0, $z1;
        java.util.ArrayList $r5, $r6;
        java.lang.Object $r7;
        android.app.admin.DeviceAdminInfo $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

     label02:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $r5 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

     label03:
        i2 = 0;

     label04:
        if i2 >= i1 goto label11;

     label05:
        $r6 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r3 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r7;

        $z1 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy>;

        if $z1 == 0 goto label10;

        $r8 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        r4 = virtualinvoke $r8.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        exitmonitor r0;

     label06:
        return r4;

     label07:
        $r9 := @caughtexception;

        r1 = $r9;

     label08:
        exitmonitor r0;

     label09:
        throw r1;

     label10:
        i2 = i2 + 1;

        goto label04;

     label11:
        exitmonitor r0;

     label12:
        return null;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
    }

    public int getKeyguardDisabledFeatures(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, i4, $i5;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        java.lang.Throwable r3, $r9;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, $r8;
        boolean $z0;
        java.util.ArrayList $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        if r1 == null goto label10;

     label02:
        r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        i4 = 0;

        if r4 == null goto label05;

     label04:
        i4 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

     label05:
        exitmonitor r0;

     label06:
        return i4;

     label07:
        $r9 := @caughtexception;

        r3 = $r9;

     label08:
        exitmonitor r0;

     label09:
        throw r3;

     label10:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r5 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

     label11:
        i2 = 0;

        i3 = 0;

     label12:
        if i3 >= i1 goto label15;

     label13:
        $r7 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r6 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r8 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r6;

        $i5 = $r8.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        i2 = i2 | $i5;

     label14:
        i3 = i3 + 1;

        goto label12;

     label15:
        exitmonitor r0;

     label16:
        return i2;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
        catch java.lang.Throwable from label13 to label14 with label07;
        catch java.lang.Throwable from label15 to label16 with label07;
    }

    public int getMaximumFailedPasswordsForWipe(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, i4, $i5, $i6;
        java.lang.Throwable r2, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, r5;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

     label02:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

     label03:
        i1 = 0;

        if r1 == null goto label12;

     label04:
        r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label05:
        i2 = 0;

        if r4 == null goto label07;

     label06:
        i2 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

     label07:
        exitmonitor r0;

     label08:
        return i2;

     label09:
        $r9 := @caughtexception;

        r2 = $r9;

     label10:
        exitmonitor r0;

     label11:
        throw r2;

     label12:
        $r6 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label13:
        i4 = 0;

     label14:
        if i4 >= i3 goto label21;

     label15:
        $r7 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r5 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

     label16:
        if i1 != 0 goto label19;

     label17:
        i1 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

     label18:
        goto label23;

     label19:
        $i5 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if $i5 == 0 goto label23;

        $i6 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if i1 <= $i6 goto label23;

        i1 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

     label20:
        goto label23;

     label21:
        exitmonitor r0;

     label22:
        return i1;

     label23:
        i4 = i4 + 1;

        goto label14;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
        catch java.lang.Throwable from label15 to label16 with label09;
        catch java.lang.Throwable from label17 to label18 with label09;
        catch java.lang.Throwable from label19 to label20 with label09;
        catch java.lang.Throwable from label21 to label22 with label09;
    }

    public long getMaximumTimeToLock(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i2, i3;
        long l1, l4, $l7, $l9;
        java.lang.Throwable r2, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, r5;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        byte $b5, $b6, $b8;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0L;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        l1 = 0L;

        if r1 == null goto label07;

     label02:
        r5 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        if r5 == null goto label21;

     label04:
        l4 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

     label05:
        exitmonitor r0;

     label06:
        return l4;

     label07:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label08:
        i3 = 0;

     label09:
        if i3 >= i2 goto label16;

     label10:
        $r7 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

     label11:
        $b5 = l1 cmp 0L;

        if $b5 != 0 goto label14;

     label12:
        l1 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

     label13:
        goto label22;

     label14:
        $l7 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        $b6 = $l7 cmp 0L;

        if $b6 == 0 goto label22;

        $l9 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        $b8 = l1 cmp $l9;

        if $b8 <= 0 goto label22;

        l1 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

     label15:
        goto label22;

     label16:
        exitmonitor r0;

     label17:
        return l1;

     label18:
        $r9 := @caughtexception;

        r2 = $r9;

     label19:
        exitmonitor r0;

     label20:
        throw r2;

     label21:
        l4 = 0L;

        goto label05;

     label22:
        i3 = i3 + 1;

        goto label09;

        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public long getPasswordExpiration(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.Throwable r2, $r3;
        long l1;
        boolean $z0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0L;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

     label2:
        l1 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: long getPasswordExpirationLocked(android.content.ComponentName,int)>(r1, i0);

        exitmonitor r0;

     label3:
        return l1;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r0;

     label6:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public long getPasswordExpirationTimeout(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i2, i3;
        long l1, l4, $l7, $l9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3, r5;
        java.lang.Throwable r4, $r9;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        byte $b5, $b6, $b8;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0L;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        if r1 == null goto label11;

     label02:
        r5 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        if r5 == null goto label10;

     label04:
        l4 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

     label05:
        exitmonitor r0;

     label06:
        return l4;

     label07:
        $r9 := @caughtexception;

        r4 = $r9;

     label08:
        exitmonitor r0;

     label09:
        throw r4;

     label10:
        l4 = 0L;

        goto label05;

     label11:
        l1 = 0L;

     label12:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label13:
        i3 = 0;

     label14:
        if i3 >= i2 goto label20;

     label15:
        $r7 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r3 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

     label16:
        $b5 = l1 cmp 0L;

        if $b5 == 0 goto label18;

     label17:
        $l7 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b6 = $l7 cmp 0L;

        if $b6 == 0 goto label22;

        $l9 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b8 = l1 cmp $l9;

        if $b8 <= 0 goto label22;

     label18:
        l1 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

     label19:
        goto label22;

     label20:
        exitmonitor r0;

     label21:
        return l1;

     label22:
        i3 = i3 + 1;

        goto label14;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label12 to label13 with label07;
        catch java.lang.Throwable from label15 to label16 with label07;
        catch java.lang.Throwable from label17 to label18 with label07;
        catch java.lang.Throwable from label18 to label19 with label07;
        catch java.lang.Throwable from label20 to label21 with label07;
    }

    public int getPasswordHistoryLength(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Throwable r2, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, r5;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

     label02:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

     label03:
        i1 = 0;

        if r1 == null goto label12;

     label04:
        r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label05:
        i2 = 0;

        if r4 == null goto label07;

     label06:
        i2 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

     label07:
        exitmonitor r0;

     label08:
        return i2;

     label09:
        $r9 := @caughtexception;

        r2 = $r9;

     label10:
        exitmonitor r0;

     label11:
        throw r2;

     label12:
        $r6 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label13:
        i4 = 0;

     label14:
        if i4 >= i3 goto label17;

     label15:
        $r7 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r5 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $i5 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

        if i1 >= $i5 goto label19;

        i1 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

     label16:
        goto label19;

     label17:
        exitmonitor r0;

     label18:
        return i1;

     label19:
        i4 = i4 + 1;

        goto label14;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
        catch java.lang.Throwable from label15 to label16 with label09;
        catch java.lang.Throwable from label17 to label18 with label09;
    }

    public int getPasswordMinimumLength(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Throwable r2, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, r5;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

     label02:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

     label03:
        i1 = 0;

        if r1 == null goto label12;

     label04:
        r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label05:
        i2 = 0;

        if r4 == null goto label07;

     label06:
        i2 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLength>;

     label07:
        exitmonitor r0;

     label08:
        return i2;

     label09:
        $r9 := @caughtexception;

        r2 = $r9;

     label10:
        exitmonitor r0;

     label11:
        throw r2;

     label12:
        $r6 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label13:
        i4 = 0;

     label14:
        if i4 >= i3 goto label17;

     label15:
        $r7 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r5 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $i5 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLength>;

        if i1 >= $i5 goto label19;

        i1 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLength>;

     label16:
        goto label19;

     label17:
        exitmonitor r0;

     label18:
        return i1;

     label19:
        i4 = i4 + 1;

        goto label14;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
        catch java.lang.Throwable from label15 to label16 with label09;
        catch java.lang.Throwable from label17 to label18 with label09;
    }

    public int getPasswordMinimumLetters(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Throwable r2, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, r5;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        i1 = 0;

        if r1 == null goto label07;

     label02:
        r5 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        if r5 == null goto label17;

     label04:
        i4 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLetters>;

     label05:
        exitmonitor r0;

     label06:
        return i4;

     label07:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label08:
        i3 = 0;

     label09:
        if i3 >= i2 goto label12;

     label10:
        $r7 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $i5 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLetters>;

        if i1 >= $i5 goto label18;

        i1 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLetters>;

     label11:
        goto label18;

     label12:
        exitmonitor r0;

     label13:
        return i1;

     label14:
        $r9 := @caughtexception;

        r2 = $r9;

     label15:
        exitmonitor r0;

     label16:
        throw r2;

     label17:
        i4 = 0;

        goto label05;

     label18:
        i3 = i3 + 1;

        goto label09;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public int getPasswordMinimumLowerCase(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Throwable r2, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, r5;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        i1 = 0;

        if r1 == null goto label07;

     label02:
        r5 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        if r5 == null goto label17;

     label04:
        i4 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLowerCase>;

     label05:
        exitmonitor r0;

     label06:
        return i4;

     label07:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label08:
        i3 = 0;

     label09:
        if i3 >= i2 goto label12;

     label10:
        $r7 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $i5 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLowerCase>;

        if i1 >= $i5 goto label18;

        i1 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLowerCase>;

     label11:
        goto label18;

     label12:
        exitmonitor r0;

     label13:
        return i1;

     label14:
        $r9 := @caughtexception;

        r2 = $r9;

     label15:
        exitmonitor r0;

     label16:
        throw r2;

     label17:
        i4 = 0;

        goto label05;

     label18:
        i3 = i3 + 1;

        goto label09;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public int getPasswordMinimumNonLetter(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Throwable r2, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, r5;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        i1 = 0;

        if r1 == null goto label07;

     label02:
        r5 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        if r5 == null goto label17;

     label04:
        i4 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNonLetter>;

     label05:
        exitmonitor r0;

     label06:
        return i4;

     label07:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label08:
        i3 = 0;

     label09:
        if i3 >= i2 goto label12;

     label10:
        $r7 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $i5 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNonLetter>;

        if i1 >= $i5 goto label18;

        i1 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNonLetter>;

     label11:
        goto label18;

     label12:
        exitmonitor r0;

     label13:
        return i1;

     label14:
        $r9 := @caughtexception;

        r2 = $r9;

     label15:
        exitmonitor r0;

     label16:
        throw r2;

     label17:
        i4 = 0;

        goto label05;

     label18:
        i3 = i3 + 1;

        goto label09;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public int getPasswordMinimumNumeric(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Throwable r2, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, r5;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        i1 = 0;

        if r1 == null goto label07;

     label02:
        r5 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        if r5 == null goto label17;

     label04:
        i4 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNumeric>;

     label05:
        exitmonitor r0;

     label06:
        return i4;

     label07:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label08:
        i3 = 0;

     label09:
        if i3 >= i2 goto label12;

     label10:
        $r7 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $i5 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNumeric>;

        if i1 >= $i5 goto label18;

        i1 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNumeric>;

     label11:
        goto label18;

     label12:
        exitmonitor r0;

     label13:
        return i1;

     label14:
        $r9 := @caughtexception;

        r2 = $r9;

     label15:
        exitmonitor r0;

     label16:
        throw r2;

     label17:
        i4 = 0;

        goto label05;

     label18:
        i3 = i3 + 1;

        goto label09;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public int getPasswordMinimumSymbols(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Throwable r2, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, r5;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        i1 = 0;

        if r1 == null goto label07;

     label02:
        r5 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        if r5 == null goto label17;

     label04:
        i4 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordSymbols>;

     label05:
        exitmonitor r0;

     label06:
        return i4;

     label07:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label08:
        i3 = 0;

     label09:
        if i3 >= i2 goto label12;

     label10:
        $r7 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $i5 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordSymbols>;

        if i1 >= $i5 goto label18;

        i1 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordSymbols>;

     label11:
        goto label18;

     label12:
        exitmonitor r0;

     label13:
        return i1;

     label14:
        $r9 := @caughtexception;

        r2 = $r9;

     label15:
        exitmonitor r0;

     label16:
        throw r2;

     label17:
        i4 = 0;

        goto label05;

     label18:
        i3 = i3 + 1;

        goto label09;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public int getPasswordMinimumUpperCase(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Throwable r2, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, r5;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        i1 = 0;

        if r1 == null goto label07;

     label02:
        r5 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        if r5 == null goto label17;

     label04:
        i4 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordUpperCase>;

     label05:
        exitmonitor r0;

     label06:
        return i4;

     label07:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label08:
        i3 = 0;

     label09:
        if i3 >= i2 goto label12;

     label10:
        $r7 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $i5 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordUpperCase>;

        if i1 >= $i5 goto label18;

        i1 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordUpperCase>;

     label11:
        goto label18;

     label12:
        exitmonitor r0;

     label13:
        return i1;

     label14:
        $r9 := @caughtexception;

        r2 = $r9;

     label15:
        exitmonitor r0;

     label16:
        throw r2;

     label17:
        i4 = 0;

        goto label05;

     label18:
        i3 = i3 + 1;

        goto label09;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public int getPasswordQuality(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Throwable r2, $r9;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, r5;
        boolean $z0;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        i1 = 0;

     label02:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

     label03:
        if r1 == null goto label09;

     label04:
        r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label05:
        if r4 == null goto label19;

     label06:
        i2 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int passwordQuality>;

     label07:
        exitmonitor r0;

     label08:
        return i2;

     label09:
        $r6 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label10:
        i4 = 0;

     label11:
        if i4 >= i3 goto label14;

     label12:
        $r7 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r5 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $i5 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int passwordQuality>;

        if i1 >= $i5 goto label20;

        i1 = r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int passwordQuality>;

     label13:
        goto label20;

     label14:
        exitmonitor r0;

     label15:
        return i1;

     label16:
        $r9 := @caughtexception;

        r2 = $r9;

     label17:
        exitmonitor r0;

     label18:
        throw r2;

     label19:
        i2 = 0;

        goto label07;

     label20:
        i4 = i4 + 1;

        goto label11;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void getRemoveWarning(android.content.ComponentName, android.os.RemoteCallback, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1, $r10;
        android.os.RemoteCallback r2;
        int i0;
        java.lang.Throwable r3, $r16;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4;
        android.content.Intent r5, $r8;
        boolean $z0;
        android.content.Context $r7, $r14;
        android.app.admin.DeviceAdminInfo $r9;
        android.os.UserHandle $r11;
        com.android.server.DevicePolicyManagerService$4 $r13;
        android.os.RemoteException $r15;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.RemoteCallback;

        i0 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        $r7 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        entermonitor r0;

     label02:
        r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        if r4 != null goto label10;

     label04:
        virtualinvoke r2.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(null);

     label05:
        exitmonitor r0;

     label06:
        return;

     label07:
        $r16 := @caughtexception;

        r3 = $r16;

     label08:
        exitmonitor r0;

     label09:
        throw r3;

     label10:
        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.DEVICE_ADMIN_DISABLE_REQUESTED");

        r5 = $r8;

        $r9 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r10 = virtualinvoke $r9.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r5.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r10);

        $r14 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r11 = new android.os.UserHandle;

        specialinvoke $r11.<android.os.UserHandle: void <init>(int)>(i0);

        $r13 = new com.android.server.DevicePolicyManagerService$4;

        specialinvoke $r13.<com.android.server.DevicePolicyManagerService$4: void <init>(com.android.server.DevicePolicyManagerService,android.os.RemoteCallback)>(r0, r2);

        virtualinvoke $r14.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r5, $r11, null, $r13, null, -1, null, null);

        exitmonitor r0;

     label11:
        return;

     label12:
        $r15 := @caughtexception;

        goto label05;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch android.os.RemoteException from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }

    public boolean getStorageEncryption(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        java.lang.Throwable r3, $r9;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r4, $r7;
        boolean z0, $z1, $z2;
        java.util.ArrayList $r5, $r6;
        java.lang.Object $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z1 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        if r1 == null goto label11;

     label02:
        r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        if r4 == null goto label10;

     label04:
        z0 = r4.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

     label05:
        exitmonitor r0;

     label06:
        return z0;

     label07:
        $r9 := @caughtexception;

        r3 = $r9;

     label08:
        exitmonitor r0;

     label09:
        throw r3;

     label10:
        z0 = 0;

        goto label05;

     label11:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r5 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

     label12:
        i2 = 0;

     label13:
        if i2 >= i1 goto label16;

     label14:
        $r6 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r7 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $z2 = $r7.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        if $z2 == 0 goto label18;

        exitmonitor r0;

     label15:
        return 1;

     label16:
        exitmonitor r0;

     label17:
        return 0;

     label18:
        i2 = i2 + 1;

        goto label13;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
        catch java.lang.Throwable from label14 to label15 with label07;
        catch java.lang.Throwable from label16 to label17 with label07;
    }

    public int getStorageEncryptionStatus(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        $i1 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: int getEncryptionStatus()>();

        return $i1;
    }

    com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0;
        java.lang.Throwable r1, $r7;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2, $r5;
        android.util.SparseArray $r3, $r6;
        java.lang.Object $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.DevicePolicyManagerService$DevicePolicyData) $r4;

     label2:
        if r2 != null goto label4;

     label3:
        $r5 = new com.android.server.DevicePolicyManagerService$DevicePolicyData;

        specialinvoke $r5.<com.android.server.DevicePolicyManagerService$DevicePolicyData: void <init>(int)>(i0);

        r2 = $r5;

        $r6 = r0.<com.android.server.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        virtualinvoke $r6.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r2);

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void loadSettingsLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData,int)>(r2, i0);

     label4:
        exitmonitor r0;

     label5:
        return r2;

     label6:
        $r7 := @caughtexception;

        r1 = $r7;

     label7:
        exitmonitor r0;

     label8:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean hasGrantedPolicy(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1;
        java.lang.Throwable r2, $r10;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3;
        boolean z0, $z1;
        android.app.admin.DeviceAdminInfo $r4;
        java.lang.SecurityException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z1 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

     label2:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i1);

     label3:
        if r3 != null goto label8;

     label4:
        $r5 = new java.lang.SecurityException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No active admin ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label5:
        $r10 := @caughtexception;

        r2 = $r10;

     label6:
        exitmonitor r0;

     label7:
        throw r2;

     label8:
        $r4 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        z0 = virtualinvoke $r4.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(i0);

        exitmonitor r0;

     label9:
        return z0;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label8 to label9 with label5;
    }

    public boolean installCaCert(byte[]) throws android.os.RemoteException
    {
        com.android.server.DevicePolicyManagerService r0;
        byte[] r1, r4;
        java.io.IOException r2, $r16;
        java.security.cert.CertificateException r3, $r15;
        java.lang.InterruptedException r5, $r12;
        android.security.KeyChain$KeyChainConnection r6;
        java.lang.Throwable r7, $r17;
        android.content.Context $r8, $r11;
        java.security.cert.Certificate[] $r9;
        java.security.cert.X509Certificate $r10;
        android.security.IKeyChainService $r13;
        java.lang.Thread $r14;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: byte[];

        $r8 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r8.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_CA_CERTIFICATES", null);

     label01:
        $r9 = newarray (java.security.cert.Certificate)[1];

        $r10 = staticinvoke <com.android.server.DevicePolicyManagerService: java.security.cert.X509Certificate parseCert(byte[])>(r1);

        $r9[0] = $r10;

        r4 = staticinvoke <android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])>($r9);

     label02:
        $r11 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        r6 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bind(android.content.Context)>($r11);

     label03:
        $r13 = virtualinvoke r6.<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>();

        interfaceinvoke $r13.<android.security.IKeyChainService: void installCaCertificate(byte[])>(r4);

     label04:
        if r6 == null goto label06;

     label05:
        virtualinvoke r6.<android.security.KeyChain$KeyChainConnection: void close()>();

     label06:
        return 1;

     label07:
        $r15 := @caughtexception;

        r3 = $r15;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Problem converting cert", r3);

        return 0;

     label08:
        $r16 := @caughtexception;

        r2 = $r16;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Problem reading cert", r2);

        return 0;

     label09:
        $r17 := @caughtexception;

        r7 = $r17;

        if r6 == null goto label11;

     label10:
        virtualinvoke r6.<android.security.KeyChain$KeyChainConnection: void close()>();

     label11:
        throw r7;

     label12:
        $r12 := @caughtexception;

        r5 = $r12;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "installCaCertsToKeyChain(): ", r5);

        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r14.<java.lang.Thread: void interrupt()>();

        return 0;

        catch java.security.cert.CertificateException from label01 to label02 with label07;
        catch java.io.IOException from label01 to label02 with label08;
        catch java.lang.InterruptedException from label02 to label03 with label12;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.InterruptedException from label05 to label06 with label12;
        catch java.lang.InterruptedException from label10 to label11 with label12;
        catch java.lang.InterruptedException from label11 to label12 with label12;
    }

    public boolean isActivePasswordSufficient(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        boolean z0, $z1;
        java.lang.Throwable r1, $r4;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 = 1;

        $z1 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return 1;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

     label02:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, 0);

        $i1 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        $i2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int)>(null, i0);

        if $i1 < $i2 goto label03;

        $i3 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength>;

        $i4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int)>(null, i0);

        if $i3 >= $i4 goto label05;

     label03:
        exitmonitor r0;

     label04:
        return 0;

     label05:
        $i5 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        if $i5 == 393216 goto label10;

        exitmonitor r0;

     label06:
        return 1;

     label07:
        $r4 := @caughtexception;

        r1 = $r4;

     label08:
        exitmonitor r0;

     label09:
        throw r1;

     label10:
        $i6 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase>;

        $i7 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(null, i0);

        if $i6 < $i7 goto label13;

        $i9 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase>;

        $i8 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(null, i0);

        if $i9 < $i8 goto label13;

        $i11 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters>;

        $i10 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int)>(null, i0);

        if $i11 < $i10 goto label13;

        $i13 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric>;

        $i12 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(null, i0);

        if $i13 < $i12 goto label13;

        $i15 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols>;

        $i14 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(null, i0);

        if $i15 < $i14 goto label13;

        $i17 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter>;

        $i16 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(null, i0);

        if $i17 < $i16 goto label13;

     label11:
        exitmonitor r0;

     label12:
        return z0;

     label13:
        z0 = 0;

        goto label11;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
    }

    public boolean isAdminActive(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.Throwable r2, $r4;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3;
        boolean z0, $z1;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z1 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

     label2:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label3:
        z0 = 0;

        if r3 == null goto label4;

        z0 = 1;

     label4:
        exitmonitor r0;

     label5:
        return z0;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

     label7:
        exitmonitor r0;

     label8:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean isDeviceOwner(java.lang.String)
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.String r1, $r5;
        java.lang.Throwable r2, $r6;
        com.android.server.DevicePolicyManagerService$DeviceOwner r3, $r4;
        boolean z0, z1, $z2;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $z2 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z2 != 0 goto label01;

        return 0;

     label01:
        entermonitor r0;

     label02:
        r3 = r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner>;

     label03:
        z0 = 0;

        if r3 == null goto label06;

     label04:
        $r4 = r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner>;

        $r5 = virtualinvoke $r4.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String getPackageName()>();

        z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

     label05:
        z0 = 0;

        if z1 == 0 goto label06;

        z0 = 1;

     label06:
        exitmonitor r0;

     label07:
        return z0;

     label08:
        $r6 := @caughtexception;

        r2 = $r6;

     label09:
        exitmonitor r0;

     label10:
        throw r2;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void loadDeviceOwner()
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.Throwable r1, $r3;
        boolean $z0;
        com.android.server.DevicePolicyManagerService$DeviceOwner $r2;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        entermonitor r0;

     label1:
        $z0 = staticinvoke <com.android.server.DevicePolicyManagerService$DeviceOwner: boolean isRegistered()>();

        if $z0 == 0 goto label2;

        $r2 = new com.android.server.DevicePolicyManagerService$DeviceOwner;

        specialinvoke $r2.<com.android.server.DevicePolicyManagerService$DeviceOwner: void <init>()>();

        r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner> = $r2;

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r1 = $r3;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void lockNow()
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.Throwable r1, $r3;
        boolean $z0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        entermonitor r0;

     label2:
        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, 3);

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void lockNowUnchecked()>();

        exitmonitor r0;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r1 = $r3;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean packageHasActiveAdmins(java.lang.String, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.String r1, $r8;
        int i0, i1, i2;
        java.lang.Throwable r2, $r10;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        boolean $z0, $z1;
        java.util.ArrayList $r4, $r5;
        java.lang.Object $r6;
        com.android.server.DevicePolicyManagerService$ActiveAdmin $r7;
        android.app.admin.DeviceAdminInfo $r9;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

     label02:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r4 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label03:
        i2 = 0;

     label04:
        if i2 >= i1 goto label11;

     label05:
        $r5 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r7 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r6;

        $r9 = $r7.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r9.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label10;

        exitmonitor r0;

     label06:
        return 1;

     label07:
        $r10 := @caughtexception;

        r2 = $r10;

     label08:
        exitmonitor r0;

     label09:
        throw r2;

     label10:
        i2 = i2 + 1;

        goto label04;

     label11:
        exitmonitor r0;

     label12:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
    }

    public void removeActiveAdmin(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i2, $i3;
        java.lang.Throwable r2, r4, $r10, $r11;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3;
        long l1;
        boolean $z0, $z1;
        com.android.server.DevicePolicyManagerService$DeviceOwner $r5, $r9;
        java.lang.String $r6, $r8;
        android.content.Context $r7;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

     label02:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

     label03:
        if r3 != null goto label09;

     label04:
        exitmonitor r0;

     label05:
        return;

     label06:
        $r10 := @caughtexception;

        r2 = $r10;

     label07:
        exitmonitor r0;

     label08:
        throw r2;

     label09:
        $i2 = virtualinvoke r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i2 == $i3 goto label12;

        $r5 = r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner>;

        if $r5 == null goto label11;

        $r6 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r9 = r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner>;

        $r8 = virtualinvoke $r9.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label11;

        exitmonitor r0;

     label10:
        return;

     label11:
        $r7 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEVICE_ADMINS", null);

     label12:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label13:
        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void removeActiveAdminLocked(android.content.ComponentName,int)>(r1, i0);

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r0;

     label15:
        return;

     label16:
        $r11 := @caughtexception;

        r4 = $r11;

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label18:
        throw r4;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label11 to label12 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label06;
        catch java.lang.Throwable from label17 to label18 with label06;
    }

    void removeActiveAdminLocked(android.content.ComponentName, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.DevicePolicyManagerService$2 $r3;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r2 == null goto label1;

        $r3 = new com.android.server.DevicePolicyManagerService$2;

        specialinvoke $r3.<com.android.server.DevicePolicyManagerService$2: void <init>(com.android.server.DevicePolicyManagerService,com.android.server.DevicePolicyManagerService$ActiveAdmin,android.content.ComponentName)>(r0, r2, r1);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.content.BroadcastReceiver)>(r2, "android.app.action.DEVICE_ADMIN_DISABLED", $r3);

     label1:
        return;
    }

    void removeUserData(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0;
        java.lang.Throwable r1, $r14;
        java.io.File r2, $r6, $r7;
        android.util.SparseArray $r3, $r13;
        java.lang.Object $r4;
        com.android.server.DevicePolicyManagerService$DevicePolicyData $r5;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        entermonitor r0;

        if i0 != 0 goto label3;

     label1:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", "Tried to remove device policy file for user 0! Ignoring.");

        exitmonitor r0;

     label2:
        return;

     label3:
        $r3 = r0.<com.android.server.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r5 = (com.android.server.DevicePolicyManagerService$DevicePolicyData) $r4;

        if $r5 == null goto label4;

        $r13 = r0.<com.android.server.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        virtualinvoke $r13.<android.util.SparseArray: void remove(int)>(i0);

     label4:
        $r6 = new java.io.File;

        $r7 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "device_policies.xml");

        r2 = $r6;

        virtualinvoke r2.<java.io.File: boolean delete()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed device policy file ");

        $r10 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r12);

        exitmonitor r0;

     label5:
        return;

     label6:
        $r14 := @caughtexception;

        r1 = $r14;

     label7:
        exitmonitor r0;

     label8:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void reportFailedPasswordAttempt(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i2, $i3, $i4, $i5;
        java.lang.Throwable r1, r3, $r5, $r6;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        long l1;
        android.content.Context $r4;
        boolean $z0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        $r4 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        entermonitor r0;

     label01:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $i3 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        $i4 = 1 + $i3;

        r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = $i4;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 == 0 goto label06;

        i2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>(null, i0);

     label03:
        if i2 <= 0 goto label05;

     label04:
        $i5 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        if $i5 < i2 goto label05;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void wipeDeviceOrUserLocked(int,int)>(0, i0);

     label05:
        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int,int)>("android.app.action.ACTION_PASSWORD_FAILED", 1, i0);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r0;

     label07:
        return;

     label08:
        $r6 := @caughtexception;

        r3 = $r6;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r3;

     label10:
        $r5 := @caughtexception;

        r1 = $r5;

     label11:
        exitmonitor r0;

     label12:
        throw r1;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void reportSuccessfulPasswordAttempt(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, $i2, $i3;
        java.lang.Throwable r1, r3, $r5, $r6;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        long l1;
        android.content.Context $r4;
        boolean $z0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        $r4 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        entermonitor r0;

     label01:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $i2 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        if $i2 != 0 goto label02;

        $i3 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i3 < 0 goto label05;

     label02:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = 0;

        r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = -1;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 == 0 goto label04;

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int,int)>("android.app.action.ACTION_PASSWORD_SUCCEEDED", 1, i0);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label05:
        exitmonitor r0;

     label06:
        return;

     label07:
        $r6 := @caughtexception;

        r3 = $r6;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r3;

     label09:
        $r5 := @caughtexception;

        r1 = $r5;

     label10:
        exitmonitor r0;

     label11:
        throw r1;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean resetPassword(java.lang.String, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.String r1, $r11, $r17, $r23, $r36, $r41, $r43, $r46, $r52, $r53, $r57;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i20, $i22, $i23, $i24, $i26, $i27, $i28, $i36;
        java.lang.Throwable r2, r4, r5, $r54, $r55, $r61;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r3;
        long l19;
        char c21;
        boolean $z0;
        android.content.Context $r7;
        com.android.internal.widget.LockPatternUtils $r8;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r37, $r38, $r39, $r40, $r42, $r44, $r45, $r47, $r48, $r49, $r50, $r51, $r56, $r58, $r59, $r60;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

     label02:
        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, 2);

        i2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int)>(null, i1);

     label03:
        if i2 == 0 goto label12;

     label04:
        i3 = staticinvoke <com.android.internal.widget.LockPatternUtils: int computePasswordQuality(java.lang.String)>(r1);

     label05:
        if i3 >= i2 goto label11;

        if i2 == 393216 goto label11;

     label06:
        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: password quality 0x");

        $r57 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required quality 0x");

        $r52 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i2);

        $r51 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r53);

        exitmonitor r0;

     label07:
        return 0;

     label08:
        $r54 := @caughtexception;

        r2 = $r54;

     label09:
        exitmonitor r0;

     label10:
        throw r2;

     label11:
        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i3, i2);

     label12:
        i4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int)>(null, i1);

        $i22 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i22 >= i4 goto label53;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: password length ");

        $i36 = virtualinvoke r1.<java.lang.String: int length()>();

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i36);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required length ");

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r46);

        exitmonitor r0;

     label13:
        return 0;

     label14:
        $i28 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 >= $i28 goto label16;

        c21 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

     label15:
        if c21 < 65 goto label55;

        if c21 > 90 goto label55;

        i6 = i6 + 1;

        i11 = i11 + 1;

        goto label54;

     label16:
        i12 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int)>(null, i1);

     label17:
        if i6 >= i12 goto label20;

     label18:
        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of letters ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r45 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of letters ");

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r43);

        exitmonitor r0;

     label19:
        return 0;

     label20:
        i13 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(null, i1);

     label21:
        if i9 >= i13 goto label24;

     label22:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of numerical digits ");

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of numerical digits ");

        $r40 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r41);

        exitmonitor r0;

     label23:
        return 0;

     label24:
        i14 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(null, i1);

     label25:
        if i7 >= i14 goto label28;

     label26:
        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of lowercase letters ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of lowercase letters ");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r36 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r36);

        exitmonitor r0;

     label27:
        return 0;

     label28:
        i15 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(null, i1);

     label29:
        if i11 >= i15 goto label32;

     label30:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of uppercase letters ");

        $r22 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of uppercase letters ");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i15);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r23);

        exitmonitor r0;

     label31:
        return 0;

     label32:
        i16 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(null, i1);

     label33:
        if i10 >= i16 goto label36;

     label34:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of special symbols ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r15 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of special symbols ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r17);

        exitmonitor r0;

     label35:
        return 0;

     label36:
        i17 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(null, i1);

     label37:
        if i8 >= i17 goto label40;

     label38:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of non-letter characters ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of non-letter characters ");

        $r10 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r11);

        exitmonitor r0;

     label39:
        return 0;

     label40:
        exitmonitor r0;

     label41:
        i18 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $i23 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i23 < 0 goto label42;

        $i26 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i26 == i18 goto label42;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", "resetPassword: already set by another uid and not entered by user");

        return 0;

     label42:
        l19 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label43:
        $r8 = new com.android.internal.widget.LockPatternUtils;

        $r7 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke $r8.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>($r7);

        virtualinvoke $r8.<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean,int)>(r1, i2, 0, i1);

        entermonitor r0;

     label44:
        $i24 = i0 & 1;

        if $i24 == 0 goto label48;

        i20 = i18;

     label45:
        $i27 = r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i27 == i20 goto label46;

        r3.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = i20;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label46:
        exitmonitor r0;

     label47:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l19);

        return 1;

     label48:
        i20 = -1;

        goto label45;

     label49:
        $r61 := @caughtexception;

        r4 = $r61;

     label50:
        exitmonitor r0;

     label51:
        throw r4;

     label52:
        $r55 := @caughtexception;

        r5 = $r55;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l19);

        throw r5;

     label53:
        if i2 != 393216 goto label40;

        i5 = 0;

        i6 = 0;

        i7 = 0;

        i8 = 0;

        i9 = 0;

        i10 = 0;

        i11 = 0;

        goto label14;

     label54:
        i5 = i5 + 1;

        goto label14;

     label55:
        if c21 < 97 goto label56;

        if c21 > 122 goto label56;

        i6 = i6 + 1;

        i7 = i7 + 1;

        goto label54;

     label56:
        if c21 < 48 goto label57;

        if c21 > 57 goto label57;

        i9 = i9 + 1;

        i8 = i8 + 1;

        goto label54;

     label57:
        i10 = i10 + 1;

        i8 = i8 + 1;

        goto label54;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label11 to label12 with label08;
        catch java.lang.Throwable from label12 to label13 with label08;
        catch java.lang.Throwable from label14 to label15 with label08;
        catch java.lang.Throwable from label16 to label17 with label08;
        catch java.lang.Throwable from label18 to label19 with label08;
        catch java.lang.Throwable from label20 to label21 with label08;
        catch java.lang.Throwable from label22 to label23 with label08;
        catch java.lang.Throwable from label24 to label25 with label08;
        catch java.lang.Throwable from label26 to label27 with label08;
        catch java.lang.Throwable from label28 to label29 with label08;
        catch java.lang.Throwable from label30 to label31 with label08;
        catch java.lang.Throwable from label32 to label33 with label08;
        catch java.lang.Throwable from label34 to label35 with label08;
        catch java.lang.Throwable from label36 to label37 with label08;
        catch java.lang.Throwable from label38 to label39 with label08;
        catch java.lang.Throwable from label40 to label41 with label08;
        catch java.lang.Throwable from label43 to label44 with label52;
        catch java.lang.Throwable from label45 to label46 with label49;
        catch java.lang.Throwable from label46 to label47 with label49;
        catch java.lang.Throwable from label50 to label51 with label49;
        catch java.lang.Throwable from label51 to label52 with label52;
    }

    void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin, java.lang.String)
    {
        com.android.server.DevicePolicyManagerService r0;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r1;
        java.lang.String r2;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.DevicePolicyManagerService$ActiveAdmin;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.content.BroadcastReceiver)>(r1, r2, null);

        return;
    }

    void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin, java.lang.String, android.content.BroadcastReceiver)
    {
        com.android.server.DevicePolicyManagerService r0;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r1;
        java.lang.String r2;
        android.content.BroadcastReceiver r3;
        android.content.Intent r4, $r5;
        android.app.admin.DeviceAdminInfo $r6;
        android.content.ComponentName $r7;
        boolean $z0;
        android.os.UserHandle $r9, $r12;
        android.content.Context $r10, $r11;
        android.os.Handler $r13;
        long $l0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.DevicePolicyManagerService$ActiveAdmin;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.BroadcastReceiver;

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>(r2);

        r4 = $r5;

        $r6 = r1.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r7 = virtualinvoke $r6.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r4.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r7);

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android.app.action.ACTION_PASSWORD_EXPIRING");

        if $z0 == 0 goto label1;

        $l0 = r1.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("expiration", $l0);

     label1:
        if r3 == null goto label2;

        $r11 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke r1.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        $r13 = r0.<com.android.server.DevicePolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r11.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r4, $r12, null, r3, $r13, -1, null, null);

        return;

     label2:
        $r10 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r9 = <android.os.UserHandle: android.os.UserHandle OWNER>;

        virtualinvoke $r10.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r4, $r9);

        return;
    }

    void sendAdminCommandLocked(java.lang.String, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0, i1, i2, i3;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3;
        java.util.ArrayList $r4, $r5;
        java.lang.Object $r6;
        android.app.admin.DeviceAdminInfo $r7;
        boolean $z0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $r4 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i2 <= 0 goto label3;

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        $r5 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r3 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r6;

        $r7 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z0 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(i0);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String)>(r3, r1);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public void setActiveAdmin(android.content.ComponentName, boolean, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1, $r21;
        boolean z0, $z1, $z3;
        int i0, i2, i3, i4;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        android.app.admin.DeviceAdminInfo r3, $r20;
        java.lang.Throwable r4, r6, $r26, $r29;
        long l1;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r5, $r9, $r17, $r19;
        android.content.Context $r7;
        java.util.HashMap $r8;
        java.util.ArrayList $r10, $r13, $r14, $r18;
        java.lang.String $r15, $r28;
        java.lang.Object $r16;
        java.lang.StringBuilder $r22, $r23, $r27;
        java.lang.IllegalArgumentException $r24, $r25;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $z1 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return;

     label01:
        $r7 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEVICE_ADMINS", null);

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int)>(r1, i0);

        if r3 != null goto label02;

        $r25 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad admin: ");

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r25;

     label02:
        entermonitor r0;

     label03:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        if z0 != 0 goto label11;

     label05:
        $r19 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if $r19 == null goto label11;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Admin is already added");

        throw $r24;

     label06:
        $r29 := @caughtexception;

        r6 = $r29;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r6;

     label08:
        $r26 := @caughtexception;

        r4 = $r26;

     label09:
        exitmonitor r0;

     label10:
        throw r4;

     label11:
        $r9 = new com.android.server.DevicePolicyManagerService$ActiveAdmin;

        specialinvoke $r9.<com.android.server.DevicePolicyManagerService$ActiveAdmin: void <init>(android.app.admin.DeviceAdminInfo)>(r3);

        r5 = $r9;

        $r8 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

     label12:
        i2 = -1;

        if z0 == 0 goto label18;

     label13:
        $r14 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i3 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

     label14:
        i4 = 0;

     label15:
        if i4 >= i3 goto label18;

     label16:
        $r18 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r16 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r17 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r16;

        $r20 = $r17.<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r21 = virtualinvoke $r20.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $z3 = virtualinvoke $r21.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label23;

     label17:
        i2 = i4;

     label18:
        if i2 != -1 goto label24;

     label19:
        $r13 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        $r15 = virtualinvoke r3.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enableIfNecessary(java.lang.String,int)>($r15, i0);

     label20:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String)>(r5, "android.app.action.DEVICE_ADMIN_ENABLED");

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r0;

     label22:
        return;

     label23:
        i4 = i4 + 1;

        goto label15;

     label24:
        $r10 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r10.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i2, r5);

     label25:
        goto label20;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label11 to label12 with label06;
        catch java.lang.Throwable from label13 to label14 with label06;
        catch java.lang.Throwable from label16 to label17 with label06;
        catch java.lang.Throwable from label19 to label20 with label06;
        catch java.lang.Throwable from label20 to label21 with label06;
        catch java.lang.Throwable from label21 to label22 with label08;
        catch java.lang.Throwable from label24 to label25 with label06;
    }

    public void setActivePasswordState(int, int, int, int, int, int, int, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;
        java.lang.Throwable r2, r3, $r6, $r7;
        long l9;
        boolean $z0;
        android.content.Context $r4, $r5;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        i8 := @parameter8: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i8);

        $r4 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        r1 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i8);

        staticinvoke <com.android.server.DevicePolicyManagerService: void validateQualityConstant(int)>(i0);

        entermonitor r0;

     label02:
        $i10 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        if $i10 != i0 goto label03;

        $i11 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength>;

        if $i11 != i1 goto label03;

        $i13 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        if $i13 != 0 goto label03;

        $i12 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters>;

        if $i12 != i2 goto label03;

        $i15 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase>;

        if $i15 != i3 goto label03;

        $i14 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase>;

        if $i14 != i4 goto label03;

        $i17 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric>;

        if $i17 != i5 goto label03;

        $i16 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols>;

        if $i16 != i6 goto label03;

        $i18 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter>;

        if $i18 == i7 goto label06;

     label03:
        l9 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality> = i0;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength> = i1;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters> = i2;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase> = i4;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase> = i3;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric> = i5;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols> = i6;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter> = i7;

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = 0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i8);

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void updatePasswordExpirationsLocked(int)>(i8);

        $r5 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,com.android.server.DevicePolicyManagerService$DevicePolicyData)>($r5, r1);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int,int)>("android.app.action.ACTION_PASSWORD_CHANGED", 0, i8);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l9);

     label06:
        exitmonitor r0;

     label07:
        return;

     label08:
        $r6 := @caughtexception;

        r2 = $r6;

     label09:
        exitmonitor r0;

     label10:
        throw r2;

     label11:
        $r7 := @caughtexception;

        r3 = $r7;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l9);

     label13:
        throw r3;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label13 with label08;
    }

    public void setCameraDisabled(android.content.ComponentName, boolean, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean z0, $z1, $z2;
        int i0;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r6;
        com.android.server.DevicePolicyManagerService$DevicePolicyData $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $z1 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        if r1 != null goto label6;

     label2:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

     label6:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 8);

        $z2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        if $z2 == z0 goto label7;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera> = z0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label7:
        $r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void syncDeviceCapabilitiesLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)>($r4);

        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public boolean setDeviceOwner(java.lang.String, java.lang.String)
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.String r1, r2, $r9, $r20, $r22;
        java.lang.Throwable r3, $r26;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r13, $r15, $r16, $r18, $r19, $r21, $r23;
        android.content.Context $r10;
        android.content.pm.PackageManager $r11;
        com.android.server.DevicePolicyManagerService$DeviceOwner $r12, $r17, $r24, $r25;
        java.lang.IllegalStateException $r14;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        if r1 == null goto label02;

        $r10 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = staticinvoke <com.android.server.DevicePolicyManagerService$DeviceOwner: boolean isInstalled(java.lang.String,android.content.pm.PackageManager)>(r1, $r11);

        if $z1 != 0 goto label03;

     label02:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid package name ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for device owner");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label03:
        entermonitor r0;

     label04:
        $r12 = r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner>;

        if $r12 != null goto label09;

        $z3 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: boolean isDeviceProvisioned()>();

        if $z3 != 0 goto label09;

        $r24 = new com.android.server.DevicePolicyManagerService$DeviceOwner;

        specialinvoke $r24.<com.android.server.DevicePolicyManagerService$DeviceOwner: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner> = $r24;

        $r25 = r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner>;

        virtualinvoke $r25.<com.android.server.DevicePolicyManagerService$DeviceOwner: void writeOwnerFile()>();

        exitmonitor r0;

     label05:
        return 1;

     label06:
        $r26 := @caughtexception;

        r3 = $r26;

     label07:
        exitmonitor r0;

     label08:
        throw r3;

     label09:
        $r14 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to set device owner to ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", owner=");

        $r17 = r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DeviceOwner mDeviceOwner>;

        $r20 = virtualinvoke $r17.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String getPackageName()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", device_provisioned=");

        $z2 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: boolean isDeviceProvisioned()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

     label10:
        throw $r14;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
    }

    protected void setExpirationAlarmCheckLocked(android.content.Context, com.android.server.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.Context r1;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r2;
        long l0, l1, l2, l3, l4, l5;
        java.lang.Throwable r3, $r9;
        android.app.PendingIntent r4;
        android.app.AlarmManager r5;
        int $i6, $i10;
        byte $b7, $b8, $b9, $b11;
        java.lang.Object $r6;
        android.content.Intent $r7;
        android.os.UserHandle $r8;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.DevicePolicyManagerService$DevicePolicyData;

        $i6 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        l0 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: long getPasswordExpirationLocked(android.content.ComponentName,int)>(null, $i6);

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = l0 - l1;

        $b7 = l0 cmp 0L;

        if $b7 != 0 goto label6;

        l4 = 0L;

     label1:
        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r6 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        r5 = (android.app.AlarmManager) $r6;

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.ACTION_EXPIRED_PASSWORD_NOTIFICATION");

        $r8 = new android.os.UserHandle;

        $i10 = r2.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        specialinvoke $r8.<android.os.UserHandle: void <init>(int)>($i10);

        r4 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcastAsUser(android.content.Context,int,android.content.Intent,int,android.os.UserHandle)>(r1, 5571, $r7, 1207959552, $r8);

        virtualinvoke r5.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>(r4);

     label3:
        $b11 = l4 cmp 0L;

        if $b11 == 0 goto label5;

     label4:
        virtualinvoke r5.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(1, l4, r4);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        return;

     label6:
        $b9 = l2 cmp 0L;

        if $b9 > 0 goto label7;

        l4 = l1 + 86400000L;

        goto label1;

     label7:
        l3 = l2 % 86400000L;

        $b8 = l3 cmp 0L;

        if $b8 != 0 goto label8;

        l3 = 86400000L;

     label8:
        l4 = l1 + l3;

        goto label1;

     label9:
        $r9 := @caughtexception;

        r3 = $r9;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        throw r3;

        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
    }

    public android.content.ComponentName setGlobalProxy(android.content.ComponentName, java.lang.String, java.lang.String, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1, r8;
        java.lang.String r2, r3, $r14;
        int i0, $i2;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r4;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r5, $r17;
        java.util.Iterator r6;
        long l1;
        java.lang.Throwable r7, $r21;
        boolean $z0, $z1, $z2, $z3;
        java.util.HashMap $r9, $r19;
        java.util.Set $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r15;
        java.lang.Object $r16, $r18;
        java.lang.NullPointerException $r20;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        if r1 != null goto label06;

     label02:
        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r20;

     label03:
        $r21 := @caughtexception;

        r7 = $r21;

     label04:
        exitmonitor r0;

     label05:
        throw r7;

     label06:
        r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        r5 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 5);

        $r9 = r4.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.util.Set keySet()>();

        r6 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r18 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.content.ComponentName) $r18;

        $r19 = r4.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r16 = virtualinvoke $r19.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        $r17 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r16;

        $z2 = $r17.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy>;

        if $z2 == 0 goto label07;

        $z3 = virtualinvoke r8.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label07;

        exitmonitor r0;

     label08:
        return r8;

     label09:
        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i2 == 0 goto label11;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only the owner is allowed to set the global proxy. User ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not permitted.");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r14);

        exitmonitor r0;

     label10:
        return null;

     label11:
        if r2 != null goto label15;

     label12:
        r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy> = 0;

        r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec> = null;

        r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList> = null;

     label13:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void resetGlobalProxyLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)>(r4);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r0;

     label14:
        return null;

     label15:
        r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy> = 1;

        r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec> = r2;

        r5.<com.android.server.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList> = r3;

     label16:
        goto label13;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label09 to label10 with label03;
        catch java.lang.Throwable from label12 to label13 with label03;
        catch java.lang.Throwable from label13 to label14 with label03;
        catch java.lang.Throwable from label15 to label16 with label03;
    }

    public void setKeyguardDisabledFeatures(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r6;
        boolean $z0;
        com.android.server.DevicePolicyManagerService$DevicePolicyData $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label6;

     label2:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

     label6:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 9);

        $i2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        if $i2 == i0 goto label7;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures> = i0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label7:
        $r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void syncDeviceCapabilitiesLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)>($r4);

        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public void setMaximumFailedPasswordsForWipe(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        java.lang.Throwable r2, $r5;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3;
        boolean $z0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

     label2:
        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 4);

        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 1);

        $i2 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if $i2 == i0 goto label3;

        r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe> = i0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label3:
        exitmonitor r0;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

     label6:
        exitmonitor r0;

     label7:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setMaximumTimeToLock(android.content.ComponentName, long, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        long l0, $l2;
        int i1;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r6;
        boolean $z0;
        byte $b3;
        com.android.server.DevicePolicyManagerService$DevicePolicyData $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label6;

     label2:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

     label6:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 3);

        $l2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label7;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock> = l0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        $r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void updateMaximumTimeToLockLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)>($r4);

     label7:
        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public void setPasswordExpirationTimeout(android.content.ComponentName, long, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        long l0, l2, $l7;
        int i1;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r14;
        boolean $z0;
        byte $b3, $b4, $b5;
        com.android.server.DevicePolicyManagerService$DevicePolicyData $r4;
        android.content.Context $r5;
        java.lang.StringBuilder $r6, $r7, $r10;
        java.util.Date $r8;
        java.text.DateFormat $r9;
        java.lang.String $r11, $r12;
        java.lang.IllegalArgumentException $r13;
        java.lang.NullPointerException $r15;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label06;

     label02:
        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r15;

     label03:
        $r14 := @caughtexception;

        r3 = $r14;

     label04:
        exitmonitor r0;

     label05:
        throw r3;

     label06:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label08;

     label07:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Timeout must be >= 0 ms");

        throw $r13;

     label08:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 6);

     label09:
        $b4 = l0 cmp 0L;

        if $b4 <= 0 goto label16;

     label10:
        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = l0 + $l7;

     label11:
        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate> = l2;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout> = l0;

     label12:
        $b5 = l0 cmp 0L;

        if $b5 <= 0 goto label14;

     label13:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setPasswordExpiration(): password will expire on ");

        $r9 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)>(2, 2);

        $r8 = new java.util.Date;

        specialinvoke $r8.<java.util.Date: void <init>(long)>(l2);

        $r11 = virtualinvoke $r9.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r12);

     label14:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        $r5 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,com.android.server.DevicePolicyManagerService$DevicePolicyData)>($r5, $r4);

        exitmonitor r0;

     label15:
        return;

     label16:
        l2 = 0L;

        goto label11;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.lang.Throwable from label10 to label11 with label03;
        catch java.lang.Throwable from label11 to label12 with label03;
        catch java.lang.Throwable from label13 to label14 with label03;
        catch java.lang.Throwable from label14 to label15 with label03;
    }

    public void setPasswordHistoryLength(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label6;

     label2:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

     label6:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

        if $i2 == i0 goto label7;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength> = i0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label7:
        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public void setPasswordMinimumLength(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label6;

     label2:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

     label6:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLength>;

        if $i2 == i0 goto label7;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLength> = i0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label7:
        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public void setPasswordMinimumLetters(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label6;

     label2:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

     label6:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLetters>;

        if $i2 == i0 goto label7;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLetters> = i0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label7:
        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public void setPasswordMinimumLowerCase(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r5;
        java.lang.NullPointerException $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label5;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        r3 = $r5;

     label3:
        exitmonitor r0;

     label4:
        throw r3;

     label5:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLowerCase>;

        if $i2 == i0 goto label6;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLowerCase> = i0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label6:
        exitmonitor r0;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
        catch java.lang.Throwable from label6 to label7 with label2;
    }

    public void setPasswordMinimumNonLetter(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label6;

     label2:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

     label6:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNonLetter>;

        if $i2 == i0 goto label7;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNonLetter> = i0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label7:
        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public void setPasswordMinimumNumeric(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label6;

     label2:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

     label6:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNumeric>;

        if $i2 == i0 goto label7;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNumeric> = i0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label7:
        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public void setPasswordMinimumSymbols(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label6;

     label2:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

     label6:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordSymbols>;

        if $i2 == i0 goto label7;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordSymbols> = i0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label7:
        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public void setPasswordMinimumUpperCase(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label6;

     label2:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

     label6:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordUpperCase>;

        if $i2 == i0 goto label7;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordUpperCase> = i0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label7:
        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public void setPasswordQuality(android.content.ComponentName, int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <com.android.server.DevicePolicyManagerService: void validateQualityConstant(int)>(i0);

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

        if r1 != null goto label6;

     label2:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r3;

     label6:
        r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int passwordQuality>;

        if $i2 == i0 goto label7;

        r2.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int passwordQuality> = i0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label7:
        exitmonitor r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public int setStorageEncryption(android.content.ComponentName, boolean, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int i0, i1, i2, i3, $i4, $i6;
        java.lang.Throwable r2, $r15;
        com.android.server.DevicePolicyManagerService$ActiveAdmin r3, $r13;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        java.util.ArrayList $r10, $r11;
        java.lang.Object $r12;
        java.lang.NullPointerException $r14;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $z2 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z2 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        entermonitor r0;

        if r1 != null goto label06;

     label02:
        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r14;

     label03:
        $r15 := @caughtexception;

        r2 = $r15;

     label04:
        exitmonitor r0;

     label05:
        throw r2;

     label06:
        if i0 != 0 goto label08;

     label07:
        $i6 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i6 == 0 goto label10;

     label08:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only owner is allowed to set storage encryption. User ");

        $i4 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not permitted.");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r9);

        exitmonitor r0;

     label09:
        return 0;

     label10:
        r3 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 7);

        $z3 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: boolean isEncryptionSupported()>();

        if $z3 != 0 goto label12;

        exitmonitor r0;

     label11:
        return 0;

     label12:
        $z4 = r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        if $z4 == z0 goto label13;

        r3.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested> = z0;

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label13:
        r4 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

     label14:
        z1 = 0;

     label15:
        $r10 = r4.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

     label16:
        i2 = 0;

     label17:
        if i2 >= i1 goto label20;

     label18:
        $r11 = r4.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r13 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r12;

        $z5 = $r13.<com.android.server.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        z1 = z1 | $z5;

     label19:
        i2 = i2 + 1;

        goto label17;

     label20:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void setEncryptionRequested(boolean)>(z1);

     label21:
        if z1 == 0 goto label24;

        i3 = 3;

     label22:
        exitmonitor r0;

     label23:
        return i3;

     label24:
        i3 = 1;

        goto label22;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.lang.Throwable from label10 to label11 with label03;
        catch java.lang.Throwable from label12 to label13 with label03;
        catch java.lang.Throwable from label13 to label14 with label03;
        catch java.lang.Throwable from label15 to label16 with label03;
        catch java.lang.Throwable from label18 to label19 with label03;
        catch java.lang.Throwable from label20 to label21 with label03;
        catch java.lang.Throwable from label22 to label23 with label03;
    }

    void syncDeviceCapabilitiesLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.DevicePolicyManagerService r0;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;
        boolean z0, z1;
        long l0;
        java.lang.String r2;
        java.lang.Throwable r3, $r4;
        int $i1;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.DevicePolicyManagerService$DevicePolicyData;

        z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("sys.secpolicy.camera.disabled", 0);

        $i1 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        z1 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName,int)>(null, $i1);

        if z1 == z0 goto label3;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if z1 == 0 goto label4;

        r2 = "1";

     label1:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.secpolicy.camera.disabled", r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label3:
        return;

     label4:
        r2 = "0";

        goto label1;

     label5:
        $r4 := @caughtexception;

        r3 = $r4;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public void systemReady()
    {
        com.android.server.DevicePolicyManagerService r0;
        java.lang.Throwable r1, $r3;
        boolean $z0;
        com.android.server.DevicePolicyManagerService$DevicePolicyData $r2;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        entermonitor r0;

     label2:
        $r2 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void loadSettingsLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData,int)>($r2, 0);

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: void loadDeviceOwner()>();

        exitmonitor r0;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r1 = $r3;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void uninstallCaCert(byte[])
    {
        com.android.server.DevicePolicyManagerService r0;
        byte[] r1;
        com.android.org.conscrypt.TrustedCertificateStore r2, r21;
        java.io.IOException r3, $r15;
        java.security.cert.CertificateException r4, $r18;
        java.lang.String r5;
        java.lang.InterruptedException r6, $r19;
        android.security.KeyChain$KeyChainConnection r7;
        android.security.IKeyChainService r8;
        java.lang.Throwable r9, $r16, r22;
        android.os.RemoteException r10, $r17;
        android.content.Context $r11, $r14;
        java.security.cert.X509Certificate $r13;
        java.lang.Thread $r20;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: byte[];

        $r11 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_CA_CERTIFICATES", null);

        r21 = new com.android.org.conscrypt.TrustedCertificateStore;

        specialinvoke r21.<com.android.org.conscrypt.TrustedCertificateStore: void <init>()>();

        r2 = r21;

     label01:
        $r13 = staticinvoke <com.android.server.DevicePolicyManagerService: java.security.cert.X509Certificate parseCert(byte[])>(r1);

        r5 = virtualinvoke r2.<com.android.org.conscrypt.TrustedCertificateStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)>($r13);

     label02:
        $r14 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        r7 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bind(android.content.Context)>($r14);

        r8 = virtualinvoke r7.<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>();

     label03:
        interfaceinvoke r8.<android.security.IKeyChainService: boolean deleteCaCertificate(java.lang.String)>(r5);

     label04:
        virtualinvoke r7.<android.security.KeyChain$KeyChainConnection: void close()>();

     label05:
        return;

     label06:
        $r18 := @caughtexception;

        r4 = $r18;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Problem creating X509Certificate", r4);

        return;

     label07:
        $r15 := @caughtexception;

        r3 = $r15;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Problem reading certificate", r3);

        return;

     label08:
        $r17 := @caughtexception;

        r10 = $r17;

     label09:
        r22 = (java.lang.Throwable) r10;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "from CaCertUninstaller: ", r22);

     label10:
        virtualinvoke r7.<android.security.KeyChain$KeyChainConnection: void close()>();

     label11:
        goto label05;

     label12:
        $r19 := @caughtexception;

        r6 = $r19;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "CaCertUninstaller: ", r6);

        $r20 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r20.<java.lang.Thread: void interrupt()>();

        return;

     label13:
        $r16 := @caughtexception;

        r9 = $r16;

     label14:
        virtualinvoke r7.<android.security.KeyChain$KeyChainConnection: void close()>();

     label15:
        throw r9;

        catch java.security.cert.CertificateException from label01 to label02 with label06;
        catch java.io.IOException from label01 to label02 with label07;
        catch java.lang.InterruptedException from label02 to label03 with label12;
        catch android.os.RemoteException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.InterruptedException from label04 to label05 with label12;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.InterruptedException from label10 to label11 with label12;
        catch java.lang.InterruptedException from label14 to label15 with label12;
    }

    void updateMaximumTimeToLockLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.DevicePolicyManagerService r0;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;
        long l0, l1, $l3;
        java.lang.Throwable r2, $r8, r9;
        android.os.RemoteException r3, $r7;
        int $i2, $i6;
        byte $b4, $b5;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        android.os.IPowerManager $r6;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.DevicePolicyManagerService$DevicePolicyData;

        $i2 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        l0 = virtualinvoke r0.<com.android.server.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int)>(null, $i2);

        $l3 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: long mLastMaximumTimeToLock>;

        $b4 = $l3 cmp l0;

        if $b4 != 0 goto label01;

        return;

     label01:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $b5 = l0 cmp 0L;

        if $b5 > 0 goto label05;

        l0 = 2147483647L;

     label02:
        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: long mLastMaximumTimeToLock> = l0;

     label03:
        $r6 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: android.os.IPowerManager getIPowerManager()>();

        $i6 = (int) l0;

        interfaceinvoke $r6.<android.os.IPowerManager: void setMaximumScreenOffTimeoutFromDeviceAdmin(int)>($i6);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label05:
        $r4 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r5, "stay_on_while_plugged_in", 0);

     label06:
        goto label02;

     label07:
        $r8 := @caughtexception;

        r2 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

     label08:
        $r7 := @caughtexception;

        r3 = $r7;

     label09:
        r9 = (java.lang.Throwable) r3;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failure talking with power manager", r9);

     label10:
        goto label04;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch android.os.RemoteException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
    }

    void validatePasswordOwnerLocked(com.android.server.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.DevicePolicyManagerService r0;
        com.android.server.DevicePolicyManagerService$DevicePolicyData r1;
        int i0, $i1, $i2, $i3, $i5, $i6;
        boolean z0;
        java.util.ArrayList $r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r8;
        com.android.server.DevicePolicyManagerService$ActiveAdmin $r10;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.DevicePolicyManagerService$DevicePolicyData;

        $i1 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i1 < 0 goto label3;

        $r2 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i0 = -1 + $i2;

     label1:
        z0 = 0;

        if i0 < 0 goto label2;

        $r9 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r10 = (com.android.server.DevicePolicyManagerService$ActiveAdmin) $r8;

        $i5 = virtualinvoke $r10.<com.android.server.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        $i6 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i5 != $i6 goto label4;

        z0 = 1;

     label2:
        if z0 != 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Previous password owner ");

        $i3 = r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer active; disabling");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r7);

        r1.<com.android.server.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = -1;

     label3:
        return;

     label4:
        i0 = i0 + -1;

        goto label1;
    }

    public void wipeData(int, int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i1;
        java.lang.Throwable r1, r2, $r4, $r5;
        long l2;
        boolean $z0;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<com.android.server.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        entermonitor r0;

     label02:
        virtualinvoke r0.<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, 4);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService: void wipeDeviceOrUserLocked(int,int)>(i0, i1);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r0;

     label05:
        return;

     label06:
        $r4 := @caughtexception;

        r1 = $r4;

     label07:
        exitmonitor r0;

     label08:
        throw r1;

     label09:
        $r5 := @caughtexception;

        r2 = $r5;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label11:
        throw r2;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label06;
    }

    void wipeDataLocked(int)
    {
        com.android.server.DevicePolicyManagerService r0;
        int i0, i1;
        boolean z0, z1, $z2, $z3, $z4;
        android.content.Intent r1, $r4;
        java.io.IOException r2, $r11;
        android.content.Context $r3, $r10;
        android.content.ComponentName $r6;
        android.os.PowerManager$WakeLock $r7;

        r0 := @this: com.android.server.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z2 = staticinvoke <android.os.Environment: boolean isExternalStorageRemovable()>();

        if $z2 != 0 goto label4;

        $z4 = specialinvoke r0.<com.android.server.DevicePolicyManagerService: boolean isExtStorageEncrypted()>();

        if $z4 == 0 goto label4;

        z0 = 1;

     label1:
        i1 = i0 & 1;

        z1 = 0;

        if i1 == 0 goto label2;

        z1 = 1;

     label2:
        if z0 != 0 goto label3;

        if z1 == 0 goto label5;

     label3:
        $z3 = staticinvoke <android.os.Environment: boolean isExternalStorageEmulated()>();

        if $z3 != 0 goto label5;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("com.android.internal.os.storage.FORMAT_AND_FACTORY_RESET");

        r1 = $r4;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("always_reset", 1);

        $r6 = <com.android.internal.os.storage.ExternalStorageFormatter: android.content.ComponentName COMPONENT_NAME>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r6);

        $r7 = r0.<com.android.server.DevicePolicyManagerService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r7.<android.os.PowerManager$WakeLock: void acquire(long)>(10000L);

        $r10 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: android.content.ComponentName startService(android.content.Intent)>(r1);

        return;

     label4:
        z0 = 0;

        goto label1;

     label5:
        $r3 = r0.<com.android.server.DevicePolicyManagerService: android.content.Context mContext>;

        staticinvoke <android.os.RecoverySystem: void rebootWipeUserData(android.content.Context)>($r3);

     label6:
        return;

     label7:
        $r11 := @caughtexception;

        r2 = $r11;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed requesting data wipe", r2);

        return;

        catch java.io.IOException from label5 to label6 with label7;
    }

    public static void <clinit>()
    {
        <com.android.server.DevicePolicyManagerService: java.lang.String TAG> = "DevicePolicyManagerService";

        <com.android.server.DevicePolicyManagerService: java.lang.String SYSTEM_PROP_DISABLE_CAMERA> = "sys.secpolicy.camera.disabled";

        <com.android.server.DevicePolicyManagerService: int REQUEST_EXPIRE_PASSWORD> = 5571;

        <com.android.server.DevicePolicyManagerService: long MS_PER_DAY> = 86400000L;

        <com.android.server.DevicePolicyManagerService: int MONITORING_CERT_NOTIFICATION_ID> = 17039536;

        <com.android.server.DevicePolicyManagerService: long EXPIRATION_GRACE_PERIOD_MS> = 432000000L;

        <com.android.server.DevicePolicyManagerService: java.lang.String DEVICE_POLICIES_XML> = "device_policies.xml";

        <com.android.server.DevicePolicyManagerService: boolean DBG> = 0;

        <com.android.server.DevicePolicyManagerService: java.lang.String ACTION_EXPIRED_PASSWORD_NOTIFICATION> = "com.android.server.ACTION_EXPIRED_PASSWORD_NOTIFICATION";

        return;
    }
}
