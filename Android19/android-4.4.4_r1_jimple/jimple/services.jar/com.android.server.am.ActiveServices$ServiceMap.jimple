class com.android.server.am.ActiveServices$ServiceMap extends android.os.Handler
{
    static final int MSG_BG_START_TIMEOUT;
    final java.util.ArrayList mDelayedStartList;
    final android.util.ArrayMap mServicesByIntent;
    final android.util.ArrayMap mServicesByName;
    final java.util.ArrayList mStartingBackground;
    final int mUserId;
    final com.android.server.am.ActiveServices this$0;

    void <init>(com.android.server.am.ActiveServices, android.os.Looper, int)
    {
        com.android.server.am.ActiveServices$ServiceMap r0;
        com.android.server.am.ActiveServices r1;
        android.os.Looper r2;
        int i0;
        android.util.ArrayMap $r3, $r4;
        java.util.ArrayList $r5, $r6;

        r0 := @this: com.android.server.am.ActiveServices$ServiceMap;

        r1 := @parameter0: com.android.server.am.ActiveServices;

        r2 := @parameter1: android.os.Looper;

        i0 := @parameter2: int;

        r0.<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ActiveServices this$0> = r1;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r2);

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.am.ActiveServices$ServiceMap: android.util.ArrayMap mServicesByName> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.am.ActiveServices$ServiceMap: android.util.ArrayMap mServicesByIntent> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mDelayedStartList> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mStartingBackground> = $r6;

        r0.<com.android.server.am.ActiveServices$ServiceMap: int mUserId> = i0;

        return;
    }

    void ensureNotStartingBackground(com.android.server.am.ServiceRecord)
    {
        com.android.server.am.ActiveServices$ServiceMap r0;
        com.android.server.am.ServiceRecord r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.am.ActiveServices$ServiceMap;

        r1 := @parameter0: com.android.server.am.ServiceRecord;

        $r2 = r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mStartingBackground>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.am.ActiveServices$ServiceMap: void rescheduleDelayedStarts()>();

     label1:
        $r3 = r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mDelayedStartList>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label2:
        return;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.server.am.ActiveServices$ServiceMap r0;
        android.os.Message r1;
        com.android.server.am.ActivityManagerService r2;
        java.lang.Throwable r3, $r5;
        int $i0;
        com.android.server.am.ActiveServices $r4;

        r0 := @this: com.android.server.am.ActiveServices$ServiceMap;

        r1 := @parameter0: android.os.Message;

        $i0 = r1.<android.os.Message: int what>;

        tableswitch($i0)
        {
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r4 = r0.<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ActiveServices this$0>;

        r2 = $r4.<com.android.server.am.ActiveServices: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r2;

     label3:
        virtualinvoke r0.<com.android.server.am.ActiveServices$ServiceMap: void rescheduleDelayedStarts()>();

        exitmonitor r2;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void rescheduleDelayedStarts()
    {
        com.android.server.am.ActiveServices$ServiceMap r0;
        long l0, l3, $l9, $l16;
        int i1, i2, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13;
        com.android.server.am.ServiceRecord r1, r2, r3;
        java.util.ArrayList $r4, $r5, $r6, $r7, $r10, $r15, $r17, $r18, $r21, $r31, $r36;
        com.android.server.am.ActiveServices $r8, $r9, $r14, $r19;
        com.android.server.am.ActivityManagerService $r11;
        java.lang.Object $r12, $r16, $r20, $r35;
        android.os.Message $r13;
        byte $b10, $b15;
        java.lang.StringBuilder $r23, $r26, $r27, $r28, $r29, $r30, $r33, $r34, $r38, $r39;
        com.android.server.am.ServiceRecord$StartItem $r24;
        android.content.Intent $r25;
        boolean $z1, $z2;
        java.lang.String $r32, $r40;

        r0 := @this: com.android.server.am.ActiveServices$ServiceMap;

        virtualinvoke r0.<com.android.server.am.ActiveServices$ServiceMap: void removeMessages(int)>(1);

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        i1 = 0;

        $r4 = r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mStartingBackground>;

        i2 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label1:
        if i1 >= i2 goto label3;

        $r31 = r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mStartingBackground>;

        $r35 = virtualinvoke $r31.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.am.ServiceRecord) $r35;

        $l16 = r3.<com.android.server.am.ServiceRecord: long startingBgTimeout>;

        $b15 = $l16 cmp l0;

        if $b15 > 0 goto label2;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waited long enough for: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ActivityManager", $r40);

        $r36 = r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mStartingBackground>;

        virtualinvoke $r36.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        i2 = i2 + -1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mDelayedStartList>;

        $i4 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if $i4 <= 0 goto label5;

        $r15 = r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mStartingBackground>;

        $i11 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        $r14 = r0.<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ActiveServices this$0>;

        $i12 = $r14.<com.android.server.am.ActiveServices: int mMaxStartingBackground>;

        if $i11 >= $i12 goto label5;

        $r18 = r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mDelayedStartList>;

        $r16 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object remove(int)>(0);

        r2 = (com.android.server.am.ServiceRecord) $r16;

        $r17 = r2.<com.android.server.am.ServiceRecord: java.util.ArrayList pendingStarts>;

        $i13 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

        if $i13 > 0 goto label4;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**** NO PENDING STARTS! ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" startReq=");

        $z2 = r2.<com.android.server.am.ServiceRecord: boolean startRequested>;

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" delayedStop=");

        $z1 = r2.<com.android.server.am.ServiceRecord: boolean delayedStop>;

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityManager", $r32);

     label4:
        r2.<com.android.server.am.ServiceRecord: boolean delayed> = 0;

        $r19 = r0.<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ActiveServices this$0>;

        $r21 = r2.<com.android.server.am.ServiceRecord: java.util.ArrayList pendingStarts>;

        $r20 = virtualinvoke $r21.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r24 = (com.android.server.am.ServiceRecord$StartItem) $r20;

        $r25 = $r24.<com.android.server.am.ServiceRecord$StartItem: android.content.Intent intent>;

        virtualinvoke $r19.<com.android.server.am.ActiveServices: android.content.ComponentName startServiceInnerLocked(com.android.server.am.ActiveServices$ServiceMap,android.content.Intent,com.android.server.am.ServiceRecord,boolean,boolean)>(r0, $r25, r2, 0, 1);

        goto label3;

     label5:
        $r6 = r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mStartingBackground>;

        $i5 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if $i5 <= 0 goto label7;

        $r10 = r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mStartingBackground>;

        $r12 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r1 = (com.android.server.am.ServiceRecord) $r12;

        $l9 = r1.<com.android.server.am.ServiceRecord: long startingBgTimeout>;

        $b10 = $l9 cmp l0;

        if $b10 <= 0 goto label9;

        l3 = r1.<com.android.server.am.ServiceRecord: long startingBgTimeout>;

     label6:
        $r13 = virtualinvoke r0.<com.android.server.am.ActiveServices$ServiceMap: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r0.<com.android.server.am.ActiveServices$ServiceMap: boolean sendMessageAtTime(android.os.Message,long)>($r13, l3);

     label7:
        $r7 = r0.<com.android.server.am.ActiveServices$ServiceMap: java.util.ArrayList mStartingBackground>;

        $i6 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        $r8 = r0.<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ActiveServices this$0>;

        $i7 = $r8.<com.android.server.am.ActiveServices: int mMaxStartingBackground>;

        if $i6 >= $i7 goto label8;

        $r9 = r0.<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ActiveServices this$0>;

        $r11 = $r9.<com.android.server.am.ActiveServices: com.android.server.am.ActivityManagerService mAm>;

        $i8 = r0.<com.android.server.am.ActiveServices$ServiceMap: int mUserId>;

        virtualinvoke $r11.<com.android.server.am.ActivityManagerService: void backgroundServicesFinishedLocked(int)>($i8);

     label8:
        return;

     label9:
        l3 = l0;

        goto label6;
    }

    public static void <clinit>()
    {
        <com.android.server.am.ActiveServices$ServiceMap: int MSG_BG_START_TIMEOUT> = 1;

        return;
    }
}
