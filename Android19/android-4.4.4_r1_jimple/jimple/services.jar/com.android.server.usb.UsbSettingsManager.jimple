class com.android.server.usb.UsbSettingsManager extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private static final java.io.File sSingleUserSettingsFile;
    private final java.util.HashMap mAccessoryPermissionMap;
    private final java.util.HashMap mAccessoryPreferenceMap;
    private final android.content.Context mContext;
    private final java.util.HashMap mDevicePermissionMap;
    private final java.util.HashMap mDevicePreferenceMap;
    private final java.lang.Object mLock;
    private final android.content.pm.PackageManager mPackageManager;
    com.android.server.usb.UsbSettingsManager$MyPackageMonitor mPackageMonitor;
    private final android.util.AtomicFile mSettingsFile;
    private final android.os.UserHandle mUser;
    private final android.content.Context mUserContext;

    static void <clinit>()
    {
        java.io.File $r0;

        <com.android.server.usb.UsbSettingsManager: java.lang.String TAG> = "UsbSettingsManager";

        <com.android.server.usb.UsbSettingsManager: boolean DEBUG> = 0;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>("/data/system/usb_device_manager.xml");

        <com.android.server.usb.UsbSettingsManager: java.io.File sSingleUserSettingsFile> = $r0;

        return;
    }

    public void <init>(android.content.Context, android.os.UserHandle)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.content.Context r1, $r12, $r13, $r19;
        android.os.UserHandle r2, $r18;
        java.lang.Object r4, $r10;
        java.lang.Throwable r5, $r22;
        java.util.HashMap $r6, $r7, $r8, $r9;
        com.android.server.usb.UsbSettingsManager$MyPackageMonitor $r11, $r21;
        android.content.pm.PackageManager $r14;
        android.util.AtomicFile $r15;
        int $i0;
        java.io.File $r16, $r17;
        boolean $z0;
        android.content.pm.PackageManager$NameNotFoundException $r20;
        java.lang.RuntimeException $r23;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePermissionMap> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPermissionMap> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap> = $r9;

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock> = $r10;

        $r11 = new com.android.server.usb.UsbSettingsManager$MyPackageMonitor;

        specialinvoke $r11.<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void <init>(com.android.server.usb.UsbSettingsManager,com.android.server.usb.UsbSettingsManager$1)>(r0, null);

        r0.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbSettingsManager$MyPackageMonitor mPackageMonitor> = $r11;

     label1:
        $r12 = virtualinvoke r1.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>("android", 0, r2);

        r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mUserContext> = $r12;

     label2:
        r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mContext> = r1;

        $r13 = r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mUserContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.usb.UsbSettingsManager: android.content.pm.PackageManager mPackageManager> = $r14;

        r0.<com.android.server.usb.UsbSettingsManager: android.os.UserHandle mUser> = r2;

        $r15 = new android.util.AtomicFile;

        $r16 = new java.io.File;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $r17 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>($i0);

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, "usb_device_manager.xml");

        specialinvoke $r15.<android.util.AtomicFile: void <init>(java.io.File)>($r16);

        r0.<com.android.server.usb.UsbSettingsManager: android.util.AtomicFile mSettingsFile> = $r15;

        r4 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r4;

     label3:
        $r18 = <android.os.UserHandle: android.os.UserHandle OWNER>;

        $z0 = virtualinvoke $r18.<android.os.UserHandle: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void upgradeSingleUserLocked()>();

     label4:
        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void readSettingsLocked()>();

        exitmonitor r4;

     label5:
        $r21 = r0.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbSettingsManager$MyPackageMonitor mPackageMonitor>;

        $r19 = r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mUserContext>;

        virtualinvoke $r21.<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void register(android.content.Context,android.os.Looper,boolean)>($r19, null, 1);

        return;

     label6:
        $r20 := @caughtexception;

        $r23 = new java.lang.RuntimeException;

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String)>("Missing android package");

        throw $r23;

     label7:
        $r22 := @caughtexception;

        r5 = $r22;

     label8:
        exitmonitor r4;

     label9:
        throw r5;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    static void access$000(com.android.server.usb.UsbSettingsManager, java.lang.String)
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void handlePackageUpdate(java.lang.String)>(r1);

        return;
    }

    private boolean clearCompatibleMatchesLocked(java.lang.String, com.android.server.usb.UsbSettingsManager$AccessoryFilter)
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.lang.String r1;
        com.android.server.usb.UsbSettingsManager$AccessoryFilter r2, r4;
        boolean z0, $z1, $z2;
        java.util.Iterator r3;
        java.util.HashMap $r5, $r8;
        java.util.Set $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.usb.UsbSettingsManager$AccessoryFilter;

        z0 = 0;

        $r5 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.usb.UsbSettingsManager$AccessoryFilter) $r7;

        $z2 = virtualinvoke r2.<com.android.server.usb.UsbSettingsManager$AccessoryFilter: boolean matches(com.android.server.usb.UsbSettingsManager$AccessoryFilter)>(r4);

        if $z2 == 0 goto label1;

        $r8 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r4);

        z0 = 1;

        goto label1;

     label2:
        return z0;
    }

    private boolean clearCompatibleMatchesLocked(java.lang.String, com.android.server.usb.UsbSettingsManager$DeviceFilter)
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.lang.String r1;
        com.android.server.usb.UsbSettingsManager$DeviceFilter r2, r4;
        boolean z0, $z1, $z2;
        java.util.Iterator r3;
        java.util.HashMap $r5, $r8;
        java.util.Set $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.usb.UsbSettingsManager$DeviceFilter;

        z0 = 0;

        $r5 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.usb.UsbSettingsManager$DeviceFilter) $r7;

        $z2 = virtualinvoke r2.<com.android.server.usb.UsbSettingsManager$DeviceFilter: boolean matches(com.android.server.usb.UsbSettingsManager$DeviceFilter)>(r4);

        if $z2 == 0 goto label1;

        $r8 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r4);

        z0 = 1;

        goto label1;

     label2:
        return z0;
    }

    private boolean clearPackageDefaultsLocked(java.lang.String)
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.lang.String r1;
        java.lang.Object r2, r6, r7, $r13, $r20;
        java.lang.Throwable r3, $r22;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.Object[] r4, r5;
        int i0, i1, $i2, $i3;
        java.util.HashMap $r8, $r9, $r10, $r12, $r15, $r17, $r18, $r19;
        java.util.Set $r11, $r16;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r8 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        z0 = virtualinvoke $r8.<java.util.HashMap: boolean containsValue(java.lang.Object)>(r1);

     label02:
        z1 = 0;

        if z0 == 0 goto label07;

     label03:
        $r17 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        $r16 = virtualinvoke $r17.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke $r16.<java.util.Set: java.lang.Object[] toArray()>();

     label04:
        i0 = 0;

     label05:
        $i3 = lengthof r4;

        if i0 >= $i3 goto label07;

        r7 = r4[i0];

        $r19 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        $r20 = virtualinvoke $r19.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z4 == 0 goto label16;

        $r18 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        virtualinvoke $r18.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r7);

     label06:
        z1 = 1;

        goto label16;

     label07:
        $r9 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $z2 = virtualinvoke $r9.<java.util.HashMap: boolean containsValue(java.lang.Object)>(r1);

        if $z2 == 0 goto label11;

        $r10 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.util.Set keySet()>();

        r5 = interfaceinvoke $r11.<java.util.Set: java.lang.Object[] toArray()>();

     label08:
        i1 = 0;

     label09:
        $i2 = lengthof r5;

        if i1 >= $i2 goto label11;

        r6 = r5[i1];

        $r12 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z3 == 0 goto label17;

        $r15 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r6);

     label10:
        z1 = 1;

        goto label17;

     label11:
        exitmonitor r2;

     label12:
        return z1;

     label13:
        $r22 := @caughtexception;

        r3 = $r22;

     label14:
        exitmonitor r2;

     label15:
        throw r3;

     label16:
        i0 = i0 + 1;

        goto label05;

     label17:
        i1 = i1 + 1;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private final java.util.ArrayList getAccessoryMatchesLocked(android.hardware.usb.UsbAccessory, android.content.Intent)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbAccessory r1;
        android.content.Intent r2;
        java.util.ArrayList r3, $r6;
        java.util.List r4;
        int i0, i1;
        android.content.pm.ResolveInfo r5;
        android.content.pm.PackageManager $r7;
        java.lang.Object $r8;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r2 := @parameter1: android.content.Intent;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = $r6;

        $r7 = r0.<com.android.server.usb.UsbSettingsManager: android.content.pm.PackageManager mPackageManager>;

        r4 = virtualinvoke $r7.<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>(r2, 128);

        i0 = interfaceinvoke r4.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r8 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (android.content.pm.ResolveInfo) $r8;

        $r9 = virtualinvoke r2.<android.content.Intent: java.lang.String getAction()>();

        $z0 = specialinvoke r0.<com.android.server.usb.UsbSettingsManager: boolean packageMatchesLocked(android.content.pm.ResolveInfo,java.lang.String,android.hardware.usb.UsbDevice,android.hardware.usb.UsbAccessory)>(r5, $r9, null, r1);

        if $z0 == 0 goto label2;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r3;
    }

    private final java.util.ArrayList getDeviceMatchesLocked(android.hardware.usb.UsbDevice, android.content.Intent)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbDevice r1;
        android.content.Intent r2;
        java.util.ArrayList r3, $r6;
        java.util.List r4;
        int i0, i1;
        android.content.pm.ResolveInfo r5;
        android.content.pm.PackageManager $r7;
        java.lang.Object $r8;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 := @parameter1: android.content.Intent;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = $r6;

        $r7 = r0.<com.android.server.usb.UsbSettingsManager: android.content.pm.PackageManager mPackageManager>;

        r4 = virtualinvoke $r7.<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>(r2, 128);

        i0 = interfaceinvoke r4.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r8 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (android.content.pm.ResolveInfo) $r8;

        $r9 = virtualinvoke r2.<android.content.Intent: java.lang.String getAction()>();

        $z0 = specialinvoke r0.<com.android.server.usb.UsbSettingsManager: boolean packageMatchesLocked(android.content.pm.ResolveInfo,java.lang.String,android.hardware.usb.UsbDevice,android.hardware.usb.UsbAccessory)>(r5, $r9, r1, null);

        if $z0 == 0 goto label2;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r3;
    }

    private void handlePackageUpdate(java.lang.String)
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.lang.String r1, $r13;
        java.lang.Object r2;
        boolean z0, $z1, $z2;
        java.lang.Throwable r3, $r15, r17;
        android.content.pm.PackageManager$NameNotFoundException r4, $r11;
        android.content.pm.PackageInfo r5;
        android.content.pm.ActivityInfo[] r6;
        int i0, $i1;
        android.content.pm.PackageManager $r7;
        android.content.pm.ActivityInfo $r8, $r9;
        java.lang.StringBuilder $r12, $r14, r16;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r2;

        z0 = 0;

     label01:
        $r7 = r0.<com.android.server.usb.UsbSettingsManager: android.content.pm.PackageManager mPackageManager>;

        r5 = virtualinvoke $r7.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r1, 129);

     label02:
        r6 = r5.<android.content.pm.PackageInfo: android.content.pm.ActivityInfo[] activities>;

     label03:
        if r6 != null goto label12;

     label04:
        exitmonitor r2;

     label05:
        return;

     label06:
        $r11 := @caughtexception;

        r4 = $r11;

     label07:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handlePackageUpdate could not find package ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r17 = (java.lang.Throwable) r4;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbSettingsManager", $r13, r17);

        exitmonitor r2;

     label08:
        return;

     label09:
        $r15 := @caughtexception;

        r3 = $r15;

     label10:
        exitmonitor r2;

     label11:
        throw r3;

     label12:
        i0 = 0;

     label13:
        $i1 = lengthof r6;

        if i0 >= $i1 goto label17;

        $r8 = r6[i0];

        $z1 = specialinvoke r0.<com.android.server.usb.UsbSettingsManager: boolean handlePackageUpdateLocked(java.lang.String,android.content.pm.ActivityInfo,java.lang.String)>(r1, $r8, "android.hardware.usb.action.USB_DEVICE_ATTACHED");

        if $z1 == 0 goto label15;

     label14:
        z0 = 1;

     label15:
        $r9 = r6[i0];

        $z2 = specialinvoke r0.<com.android.server.usb.UsbSettingsManager: boolean handlePackageUpdateLocked(java.lang.String,android.content.pm.ActivityInfo,java.lang.String)>(r1, $r9, "android.hardware.usb.action.USB_ACCESSORY_ATTACHED");

        if $z2 == 0 goto label21;

     label16:
        z0 = 1;

        goto label21;

     label17:
        if z0 == 0 goto label19;

     label18:
        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void writeSettingsLocked()>();

     label19:
        exitmonitor r2;

     label20:
        return;

     label21:
        i0 = i0 + 1;

        goto label13;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label06;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
        catch java.lang.Throwable from label15 to label16 with label09;
        catch java.lang.Throwable from label18 to label19 with label09;
        catch java.lang.Throwable from label19 to label20 with label09;
    }

    private boolean handlePackageUpdateLocked(java.lang.String, android.content.pm.ActivityInfo, java.lang.String)
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.lang.String r1, r3, r8, $r10, $r11, $r17, $r19;
        android.content.pm.ActivityInfo r2;
        android.content.res.XmlResourceParser r4, r7;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.Throwable r5, $r15;
        java.lang.Exception r6, $r14;
        android.content.pm.PackageManager $r9;
        int $i0;
        com.android.server.usb.UsbSettingsManager$AccessoryFilter $r12;
        com.android.server.usb.UsbSettingsManager$DeviceFilter $r13;
        java.lang.StringBuilder $r16, $r18, $r20;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.ActivityInfo;

        r3 := @parameter2: java.lang.String;

        r4 = null;

        z0 = 0;

     label01:
        $r9 = r0.<com.android.server.usb.UsbSettingsManager: android.content.pm.PackageManager mPackageManager>;

        r7 = virtualinvoke r2.<android.content.pm.ActivityInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>($r9, r3);

     label02:
        r4 = r7;

        if r4 != null goto label04;

        if r4 == null goto label03;

        interfaceinvoke r4.<android.content.res.XmlResourceParser: void close()>();

     label03:
        return 0;

     label04:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r4);

     label05:
        $i0 = interfaceinvoke r4.<android.content.res.XmlResourceParser: int getEventType()>();

        if $i0 == 1 goto label18;

        r8 = interfaceinvoke r4.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $r10 = "usb-device";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z2 == 0 goto label14;

        $r13 = staticinvoke <com.android.server.usb.UsbSettingsManager$DeviceFilter: com.android.server.usb.UsbSettingsManager$DeviceFilter read(org.xmlpull.v1.XmlPullParser)>(r4);

        $z4 = specialinvoke r0.<com.android.server.usb.UsbSettingsManager: boolean clearCompatibleMatchesLocked(java.lang.String,com.android.server.usb.UsbSettingsManager$DeviceFilter)>(r1, $r13);

        if $z4 == 0 goto label07;

     label06:
        z0 = 1;

     label07:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r4);

     label08:
        goto label05;

     label09:
        $r14 := @caughtexception;

        r6 = $r14;

     label10:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load component info ");

        $r17 = virtualinvoke r2.<android.content.pm.ActivityInfo: java.lang.String toString()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbSettingsManager", $r19, r6);

     label11:
        if r4 == null goto label13;

     label12:
        interfaceinvoke r4.<android.content.res.XmlResourceParser: void close()>();

     label13:
        return z0;

     label14:
        $r11 = "usb-accessory";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z3 == 0 goto label07;

        $r12 = staticinvoke <com.android.server.usb.UsbSettingsManager$AccessoryFilter: com.android.server.usb.UsbSettingsManager$AccessoryFilter read(org.xmlpull.v1.XmlPullParser)>(r4);

        z1 = specialinvoke r0.<com.android.server.usb.UsbSettingsManager: boolean clearCompatibleMatchesLocked(java.lang.String,com.android.server.usb.UsbSettingsManager$AccessoryFilter)>(r1, $r12);

     label15:
        if z1 == 0 goto label07;

        z0 = 1;

        goto label07;

     label16:
        $r15 := @caughtexception;

        r5 = $r15;

        if r4 == null goto label17;

        interfaceinvoke r4.<android.content.res.XmlResourceParser: void close()>();

     label17:
        throw r5;

     label18:
        if r4 == null goto label13;

        goto label12;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Exception from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Exception from label14 to label15 with label09;
        catch java.lang.Throwable from label14 to label15 with label16;
    }

    private boolean packageMatchesLocked(android.content.pm.ResolveInfo, java.lang.String, android.hardware.usb.UsbDevice, android.hardware.usb.UsbAccessory)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.content.pm.ResolveInfo r1;
        java.lang.String r2, r9, $r11, $r13, $r18, $r23, $r25;
        android.hardware.usb.UsbDevice r3;
        android.hardware.usb.UsbAccessory r4;
        android.content.pm.ActivityInfo r5;
        android.content.res.XmlResourceParser r6;
        java.lang.Throwable r7, $r20;
        java.lang.Exception r8, $r21;
        boolean z0, z1, $z2, $z3;
        android.content.pm.PackageManager $r10;
        int $i0;
        com.android.server.usb.UsbSettingsManager$AccessoryFilter $r12;
        com.android.server.usb.UsbSettingsManager$DeviceFilter $r14;
        java.lang.StringBuilder $r15, $r16, $r17, $r19, $r22, $r24;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.content.pm.ResolveInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.hardware.usb.UsbDevice;

        r4 := @parameter3: android.hardware.usb.UsbAccessory;

        r5 = r1.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r6 = null;

     label01:
        $r10 = r0.<com.android.server.usb.UsbSettingsManager: android.content.pm.PackageManager mPackageManager>;

        r6 = virtualinvoke r5.<android.content.pm.ActivityInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>($r10, r2);

     label02:
        if r6 != null goto label07;

     label03:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no meta-data for ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("UsbSettingsManager", $r18);

     label04:
        if r6 == null goto label06;

     label05:
        interfaceinvoke r6.<android.content.res.XmlResourceParser: void close()>();

     label06:
        return 0;

     label07:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r6);

     label08:
        $i0 = interfaceinvoke r6.<android.content.res.XmlResourceParser: int getEventType()>();

        if $i0 == 1 goto label24;

        r9 = interfaceinvoke r6.<android.content.res.XmlResourceParser: java.lang.String getName()>();

     label09:
        if r3 == null goto label13;

     label10:
        $r13 = "usb-device";

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z3 == 0 goto label13;

        $r14 = staticinvoke <com.android.server.usb.UsbSettingsManager$DeviceFilter: com.android.server.usb.UsbSettingsManager$DeviceFilter read(org.xmlpull.v1.XmlPullParser)>(r6);

        z1 = virtualinvoke $r14.<com.android.server.usb.UsbSettingsManager$DeviceFilter: boolean matches(android.hardware.usb.UsbDevice)>(r3);

     label11:
        if z1 == 0 goto label17;

        if r6 == null goto label12;

        interfaceinvoke r6.<android.content.res.XmlResourceParser: void close()>();

     label12:
        return 1;

     label13:
        if r4 == null goto label17;

     label14:
        $r11 = "usb-accessory";

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z2 == 0 goto label17;

        $r12 = staticinvoke <com.android.server.usb.UsbSettingsManager$AccessoryFilter: com.android.server.usb.UsbSettingsManager$AccessoryFilter read(org.xmlpull.v1.XmlPullParser)>(r6);

        z0 = virtualinvoke $r12.<com.android.server.usb.UsbSettingsManager$AccessoryFilter: boolean matches(android.hardware.usb.UsbAccessory)>(r4);

     label15:
        if z0 == 0 goto label17;

        if r6 == null goto label16;

        interfaceinvoke r6.<android.content.res.XmlResourceParser: void close()>();

     label16:
        return 1;

     label17:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r6);

     label18:
        goto label08;

     label19:
        $r21 := @caughtexception;

        r8 = $r21;

     label20:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load component info ");

        $r25 = virtualinvoke r1.<android.content.pm.ResolveInfo: java.lang.String toString()>();

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbSettingsManager", $r23, r8);

     label21:
        if r6 == null goto label06;

        goto label05;

     label22:
        $r20 := @caughtexception;

        r7 = $r20;

        if r6 == null goto label23;

        interfaceinvoke r6.<android.content.res.XmlResourceParser: void close()>();

     label23:
        throw r7;

     label24:
        if r6 == null goto label06;

        goto label05;

        catch java.lang.Exception from label01 to label02 with label19;
        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Exception from label03 to label04 with label19;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Exception from label07 to label08 with label19;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Exception from label08 to label09 with label19;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Exception from label10 to label11 with label19;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Exception from label14 to label15 with label19;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
    }

    private void readPreference(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.usb.UsbSettingsManager r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, i1;
        java.lang.String r2, $r5, $r6, $r7, $r8, $r12, $r14;
        com.android.server.usb.UsbSettingsManager$AccessoryFilter r3;
        com.android.server.usb.UsbSettingsManager$DeviceFilter r4;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r10, $r11;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>();

        i1 = 0;

     label1:
        r2 = null;

        if i1 >= i0 goto label2;

        $r12 = "package";

        $r14 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>(i1);

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 == 0 goto label4;

        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>(i1);

     label2:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r1);

        $r5 = "usb-device";

        $r6 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label5;

        r4 = staticinvoke <com.android.server.usb.UsbSettingsManager$DeviceFilter: com.android.server.usb.UsbSettingsManager$DeviceFilter read(org.xmlpull.v1.XmlPullParser)>(r1);

        $r11 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r2);

     label3:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r1);

        return;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        $r7 = "usb-accessory";

        $r8 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        r3 = staticinvoke <com.android.server.usb.UsbSettingsManager$AccessoryFilter: com.android.server.usb.UsbSettingsManager$AccessoryFilter read(org.xmlpull.v1.XmlPullParser)>(r1);

        $r10 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

        goto label3;
    }

    private void readSettingsLocked()
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.io.FileInputStream r1;
        java.lang.Throwable r2, $r12;
        java.lang.Exception r3, $r11;
        org.xmlpull.v1.XmlPullParser r5;
        java.util.HashMap $r6, $r7;
        android.util.AtomicFile $r8, $r13;
        int $i0;
        java.lang.String $r9, $r10;
        boolean $z0;
        java.io.FileNotFoundException $r14;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        $r6 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        virtualinvoke $r6.<java.util.HashMap: void clear()>();

        $r7 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        virtualinvoke $r7.<java.util.HashMap: void clear()>();

        r1 = null;

     label01:
        $r8 = r0.<com.android.server.usb.UsbSettingsManager: android.util.AtomicFile mSettingsFile>;

        r1 = virtualinvoke $r8.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        r5 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r1, null);

        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r5);

     label02:
        $i0 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i0 == 1 goto label05;

        $r9 = "preference";

        $r10 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label06;

        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void readPreference(org.xmlpull.v1.XmlPullParser)>(r5);

     label03:
        goto label02;

     label04:
        $r14 := @caughtexception;

     label05:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label06:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r5);

     label07:
        goto label02;

     label08:
        $r11 := @caughtexception;

        r3 = $r11;

     label09:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbSettingsManager", "error reading settings file, deleting to start fresh", r3);

        $r13 = r0.<com.android.server.usb.UsbSettingsManager: android.util.AtomicFile mSettingsFile>;

        virtualinvoke $r13.<android.util.AtomicFile: void delete()>();

     label10:
        goto label05;

     label11:
        $r12 := @caughtexception;

        r2 = $r12;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw r2;

        catch java.io.FileNotFoundException from label01 to label02 with label04;
        catch java.lang.Exception from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.io.FileNotFoundException from label02 to label03 with label04;
        catch java.lang.Exception from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.io.FileNotFoundException from label06 to label07 with label04;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    private void requestPermissionDialog(android.content.Intent, java.lang.String, android.app.PendingIntent)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.content.Intent r1;
        java.lang.String r2, $r24, $r30;
        android.app.PendingIntent r3;
        int i0, $i2;
        long l1;
        java.lang.Throwable r5, $r31;
        android.content.pm.ApplicationInfo $r7;
        android.content.pm.PackageManager $r8;
        android.os.UserHandle $r13;
        java.lang.IllegalArgumentException $r15, $r22;
        android.content.Context $r16;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r23, $r25, $r26, $r27, $r28;
        android.content.pm.PackageManager$NameNotFoundException $r21;
        android.content.ActivityNotFoundException $r29;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.app.PendingIntent;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

     label1:
        $r8 = r0.<com.android.server.usb.UsbSettingsManager: android.content.pm.PackageManager mPackageManager>;

        $r7 = virtualinvoke $r8.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r2, 0);

        $i2 = $r7.<android.content.pm.ApplicationInfo: int uid>;

        if $i2 == i0 goto label3;

        $r15 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("package ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match caller\'s uid ");

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r15;

     label2:
        $r21 := @caughtexception;

        $r22 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("package ");

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r22;

     label3:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.usb.UsbPermissionActivity");

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.INTENT", r3);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("package", r2);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.UID", i0);

     label4:
        $r16 = r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mUserContext>;

        $r13 = r0.<com.android.server.usb.UsbSettingsManager: android.os.UserHandle mUser>;

        virtualinvoke $r16.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r13);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label6:
        $r29 := @caughtexception;

     label7:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbSettingsManager", "unable to start UsbPermissionActivity");

     label8:
        goto label5;

     label9:
        $r31 := @caughtexception;

        r5 = $r31;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r5;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label2;
        catch android.content.ActivityNotFoundException from label4 to label5 with label6;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    private void resolveActivity(android.content.Intent, java.util.ArrayList, java.lang.String, android.hardware.usb.UsbDevice, android.hardware.usb.UsbAccessory)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.content.Intent r1, r7, r14, r64, r66;
        java.util.ArrayList r2;
        java.lang.String r3, r15, $r33, $r34, $r48, $r62;
        android.hardware.usb.UsbDevice r4;
        android.hardware.usb.UsbAccessory r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        android.content.pm.ResolveInfo r6, r10, r12;
        android.content.ActivityNotFoundException r9, $r59, $r61, $r63;
        android.content.pm.ActivityInfo r11, $r28, $r35, $r37, $r41, $r43, $r44, $r46, $r47;
        android.content.pm.ApplicationInfo r13, $r36, $r40, $r53;
        android.content.Context $r21, $r38, $r60;
        android.os.UserHandle $r24, $r39, $r57;
        android.os.Parcelable $r25, r69;
        java.lang.Object $r27, $r42, $r45;
        boolean $z0;
        java.lang.StringBuilder $r55, $r56, r67;
        android.content.ComponentName r65;
        java.lang.Throwable r68;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.util.ArrayList;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.hardware.usb.UsbDevice;

        r5 := @parameter4: android.hardware.usb.UsbAccessory;

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if i0 != 0 goto label04;

        if r5 == null goto label02;

        r15 = virtualinvoke r5.<android.hardware.usb.UsbAccessory: java.lang.String getUri()>();

        if r15 == null goto label02;

        $i6 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i6 <= 0 goto label02;

        r64 = new android.content.Intent;

        specialinvoke r64.<android.content.Intent: void <init>()>();

        r14 = r64;

        virtualinvoke r14.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.usb.UsbAccessoryUriActivity");

        virtualinvoke r14.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke r14.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("accessory", r5);

        virtualinvoke r14.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("uri", r15);

     label01:
        $r60 = r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mUserContext>;

        $r57 = r0.<com.android.server.usb.UsbSettingsManager: android.os.UserHandle mUser>;

        virtualinvoke $r60.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r14, $r57);

     label02:
        return;

     label03:
        $r63 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbSettingsManager", "unable to start UsbAccessoryUriActivity");

        return;

     label04:
        r6 = null;

        if i0 != 1 goto label05;

        r6 = null;

        if r3 != null goto label05;

        $r42 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r12 = (android.content.pm.ResolveInfo) $r42;

        r11 = r12.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r6 = null;

        if r11 == null goto label05;

        $r43 = r12.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r13 = $r43.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r6 = null;

        if r13 == null goto label05;

        $r44 = r12.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r53 = $r44.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i5 = $r53.<android.content.pm.ApplicationInfo: int flags>;

        i2 = 1 & $i5;

        r6 = null;

        if i2 == 0 goto label05;

        r6 = r12;

     label05:
        if r6 != null goto label07;

        if r3 == null goto label07;

        i1 = 0;

     label06:
        if i1 >= i0 goto label07;

        $r45 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r10 = (android.content.pm.ResolveInfo) $r45;

        $r46 = r10.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r46 == null goto label11;

        $r47 = r10.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r48 = $r47.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r48);

        if $z0 == 0 goto label11;

        r6 = r10;

     label07:
        if r6 == null goto label13;

        if r4 == null goto label12;

        $r41 = r6.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r40 = $r41.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r40.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke r0.<com.android.server.usb.UsbSettingsManager: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>(r4, $i3);

     label08:
        r65 = new android.content.ComponentName;

        $r28 = r6.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r33 = $r28.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r35 = r6.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r34 = $r35.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke r65.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r33, $r34);

        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r65);

        $r38 = r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mUserContext>;

        $r39 = r0.<com.android.server.usb.UsbSettingsManager: android.os.UserHandle mUser>;

        virtualinvoke $r38.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r39);

     label09:
        return;

     label10:
        $r61 := @caughtexception;

        r9 = $r61;

        r68 = (java.lang.Throwable) r9;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbSettingsManager", "startActivity failed", r68);

        return;

     label11:
        i1 = i1 + 1;

        goto label06;

     label12:
        if r5 == null goto label08;

        $r37 = r6.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r36 = $r37.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r36.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke r0.<com.android.server.usb.UsbSettingsManager: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>(r5, $i4);

        goto label08;

     label13:
        r66 = new android.content.Intent;

        specialinvoke r66.<android.content.Intent: void <init>()>();

        r7 = r66;

        virtualinvoke r7.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        if i0 != 1 goto label18;

        virtualinvoke r7.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.usb.UsbConfirmActivity");

        $r27 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r25 = (android.os.Parcelable) $r27;

        virtualinvoke r7.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("rinfo", $r25);

        if r4 == null goto label17;

        virtualinvoke r7.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("device", r4);

     label14:
        $r21 = r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mUserContext>;

        $r24 = r0.<com.android.server.usb.UsbSettingsManager: android.os.UserHandle mUser>;

        virtualinvoke $r21.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r7, $r24);

     label15:
        return;

     label16:
        $r59 := @caughtexception;

        r67 = new java.lang.StringBuilder;

        specialinvoke r67.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to start activity ");

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r62 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbSettingsManager", $r62);

        return;

     label17:
        virtualinvoke r7.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("accessory", r5);

        goto label14;

     label18:
        virtualinvoke r7.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.usb.UsbResolverActivity");

        virtualinvoke r7.<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>("rlist", r2);

        r69 = (android.os.Parcelable) r1;

        virtualinvoke r7.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.INTENT", r69);

        goto label14;

        catch android.content.ActivityNotFoundException from label01 to label02 with label03;
        catch android.content.ActivityNotFoundException from label08 to label09 with label10;
        catch android.content.ActivityNotFoundException from label14 to label15 with label16;
    }

    private void upgradeSingleUserLocked()
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.io.FileInputStream r1, r2, r21;
        java.lang.Throwable r3, $r17, $r20, r22;
        org.xmlpull.v1.XmlPullParserException r4, $r16, $r18;
        java.io.IOException r5, $r15, $r19;
        org.xmlpull.v1.XmlPullParser r6;
        java.io.File $r7, $r11, $r12;
        boolean $z0, $z2;
        java.util.HashMap $r8, $r9;
        int $i0;
        java.lang.String $r13, $r14;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        $r7 = <com.android.server.usb.UsbSettingsManager: java.io.File sSingleUserSettingsFile>;

        $z0 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label09;

        $r8 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        virtualinvoke $r8.<java.util.HashMap: void clear()>();

        $r9 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

        r1 = null;

     label01:
        r21 = new java.io.FileInputStream;

        $r11 = <com.android.server.usb.UsbSettingsManager: java.io.File sSingleUserSettingsFile>;

        specialinvoke r21.<java.io.FileInputStream: void <init>(java.io.File)>($r11);

        r2 = r21;

     label02:
        r6 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r6.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r2, null);

        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r6);

     label03:
        $i0 = interfaceinvoke r6.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i0 == 1 goto label17;

        $r14 = "preference";

        $r13 = interfaceinvoke r6.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z2 == 0 goto label10;

        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void readPreference(org.xmlpull.v1.XmlPullParser)>(r6);

     label04:
        goto label03;

     label05:
        $r19 := @caughtexception;

        r5 = $r19;

        r1 = r2;

     label06:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbSettingsManager", "Failed to read single-user settings", r5);

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

     label08:
        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void writeSettingsLocked()>();

        $r12 = <com.android.server.usb.UsbSettingsManager: java.io.File sSingleUserSettingsFile>;

        virtualinvoke $r12.<java.io.File: boolean delete()>();

     label09:
        return;

     label10:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r6);

     label11:
        goto label03;

     label12:
        $r18 := @caughtexception;

        r4 = $r18;

        r1 = r2;

     label13:
        r22 = (java.lang.Throwable) r4;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbSettingsManager", "Failed to read single-user settings", r22);

     label14:
        goto label07;

     label15:
        $r17 := @caughtexception;

        r3 = $r17;

     label16:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw r3;

     label17:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        goto label08;

     label18:
        $r20 := @caughtexception;

        r3 = $r20;

        r1 = r2;

        goto label16;

     label19:
        $r16 := @caughtexception;

        r4 = $r16;

        r1 = null;

        goto label13;

     label20:
        $r15 := @caughtexception;

        r5 = $r15;

        r1 = null;

        goto label06;

        catch java.io.IOException from label01 to label02 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label19;
        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.io.IOException from label02 to label03 with label05;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label12;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.io.IOException from label03 to label04 with label05;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label12;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.io.IOException from label10 to label11 with label05;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    private void writeSettingsLocked()
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.io.FileOutputStream r1;
        java.io.IOException r2, $r33;
        com.android.internal.util.FastXmlSerializer r3, $r9;
        java.util.Iterator r4, r5;
        com.android.server.usb.UsbSettingsManager$AccessoryFilter r6;
        com.android.server.usb.UsbSettingsManager$DeviceFilter r7;
        android.util.AtomicFile $r8, $r16, $r32;
        java.lang.Boolean $r11;
        java.util.Set $r12, $r14;
        java.util.HashMap $r13, $r15, $r21, $r27;
        boolean $z0, $z1;
        java.lang.Object $r19, $r20, $r23, $r30;
        java.lang.String $r24, $r31;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 = null;

     label01:
        $r8 = r0.<com.android.server.usb.UsbSettingsManager: android.util.AtomicFile mSettingsFile>;

        r1 = virtualinvoke $r8.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        $r9 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r9.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r3 = $r9;

        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r1, "utf-8");

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r11);

        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "settings");

        $r13 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        $r12 = virtualinvoke $r13.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r23 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.android.server.usb.UsbSettingsManager$DeviceFilter) $r23;

        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "preference");

        $r27 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        $r30 = virtualinvoke $r27.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        $r31 = (java.lang.String) $r30;

        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "package", $r31);

        virtualinvoke r7.<com.android.server.usb.UsbSettingsManager$DeviceFilter: void write(org.xmlpull.v1.XmlSerializer)>(r3);

        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "preference");

     label03:
        goto label02;

     label04:
        $r33 := @caughtexception;

        r2 = $r33;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbSettingsManager", "Failed to write settings", r2);

        if r1 == null goto label05;

        $r32 = r0.<com.android.server.usb.UsbSettingsManager: android.util.AtomicFile mSettingsFile>;

        virtualinvoke $r32.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r1);

     label05:
        return;

     label06:
        $r15 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $r14 = virtualinvoke $r15.<java.util.HashMap: java.util.Set keySet()>();

        r5 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.android.server.usb.UsbSettingsManager$AccessoryFilter) $r19;

        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "preference");

        $r21 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $r20 = virtualinvoke $r21.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        $r24 = (java.lang.String) $r20;

        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "package", $r24);

        virtualinvoke r6.<com.android.server.usb.UsbSettingsManager$AccessoryFilter: void write(org.xmlpull.v1.XmlSerializer)>(r3);

        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "preference");

     label08:
        goto label07;

     label09:
        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "settings");

        virtualinvoke r3.<com.android.internal.util.FastXmlSerializer: void endDocument()>();

        $r16 = r0.<com.android.server.usb.UsbSettingsManager: android.util.AtomicFile mSettingsFile>;

        virtualinvoke $r16.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r1);

     label10:
        return;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label06 to label07 with label04;
        catch java.io.IOException from label07 to label08 with label04;
        catch java.io.IOException from label09 to label10 with label04;
    }

    public void accessoryAttached(android.hardware.usb.UsbAccessory)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbAccessory r1;
        android.content.Intent r2, $r7;
        java.lang.Object r3, $r12;
        java.lang.Throwable r4, $r13;
        java.util.ArrayList r5;
        java.lang.String r6;
        com.android.server.usb.UsbSettingsManager$AccessoryFilter $r10;
        java.util.HashMap $r11;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("android.hardware.usb.action.USB_ACCESSORY_ATTACHED");

        r2 = $r7;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("accessory", r1);

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        r3 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        r5 = specialinvoke r0.<com.android.server.usb.UsbSettingsManager: java.util.ArrayList getAccessoryMatchesLocked(android.hardware.usb.UsbAccessory,android.content.Intent)>(r1, r2);

        $r11 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $r10 = new com.android.server.usb.UsbSettingsManager$AccessoryFilter;

        specialinvoke $r10.<com.android.server.usb.UsbSettingsManager$AccessoryFilter: void <init>(android.hardware.usb.UsbAccessory)>(r1);

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

        r6 = (java.lang.String) $r12;

        exitmonitor r3;

     label2:
        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void resolveActivity(android.content.Intent,java.util.ArrayList,java.lang.String,android.hardware.usb.UsbDevice,android.hardware.usb.UsbAccessory)>(r2, r5, r6, null, r1);

        return;

     label3:
        $r13 := @caughtexception;

        r4 = $r13;

     label4:
        exitmonitor r3;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void accessoryDetached(android.hardware.usb.UsbAccessory)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbAccessory r1;
        android.content.Intent r2, $r5;
        java.util.HashMap $r3;
        android.os.UserHandle $r7;
        android.content.Context $r8;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        $r3 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPermissionMap>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.hardware.usb.action.USB_ACCESSORY_DETACHED");

        r2 = $r5;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("accessory", r1);

        $r8 = r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mContext>;

        $r7 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r8.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r2, $r7);

        return;
    }

    public void checkPermission(android.hardware.usb.UsbAccessory)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbAccessory r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        $z0 = virtualinvoke r0.<com.android.server.usb.UsbSettingsManager: boolean hasPermission(android.hardware.usb.UsbAccessory)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.SecurityException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User has not given permission to accessory ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        return;
    }

    public void checkPermission(android.hardware.usb.UsbDevice)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbDevice r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        $z0 = virtualinvoke r0.<com.android.server.usb.UsbSettingsManager: boolean hasPermission(android.hardware.usb.UsbDevice)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.SecurityException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User has not given permission to device ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        return;
    }

    public void clearDefaults(java.lang.String)
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $z0 = specialinvoke r0.<com.android.server.usb.UsbSettingsManager: boolean clearPackageDefaultsLocked(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void writeSettingsLocked()>();

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void deviceAttached(android.hardware.usb.UsbDevice)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbDevice r1;
        android.content.Intent r2, $r7;
        java.lang.Object r3, $r12;
        java.lang.Throwable r4, $r13;
        java.util.ArrayList r5;
        java.lang.String r6;
        com.android.server.usb.UsbSettingsManager$DeviceFilter $r10;
        java.util.HashMap $r11;
        android.content.Context $r14;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("android.hardware.usb.action.USB_DEVICE_ATTACHED");

        r2 = $r7;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("device", r1);

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        r3 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        r5 = specialinvoke r0.<com.android.server.usb.UsbSettingsManager: java.util.ArrayList getDeviceMatchesLocked(android.hardware.usb.UsbDevice,android.content.Intent)>(r1, r2);

        $r11 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        $r10 = new com.android.server.usb.UsbSettingsManager$DeviceFilter;

        specialinvoke $r10.<com.android.server.usb.UsbSettingsManager$DeviceFilter: void <init>(android.hardware.usb.UsbDevice)>(r1);

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

        r6 = (java.lang.String) $r12;

        exitmonitor r3;

     label2:
        $r14 = r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mUserContext>;

        virtualinvoke $r14.<android.content.Context: void sendBroadcast(android.content.Intent)>(r2);

        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void resolveActivity(android.content.Intent,java.util.ArrayList,java.lang.String,android.hardware.usb.UsbDevice,android.hardware.usb.UsbAccessory)>(r2, r5, r6, r1, null);

        return;

     label3:
        $r13 := @caughtexception;

        r4 = $r13;

     label4:
        exitmonitor r3;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void deviceDetached(android.hardware.usb.UsbDevice)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbDevice r1;
        android.content.Intent r2, $r6;
        java.util.HashMap $r3;
        java.lang.String $r4;
        android.os.UserHandle $r8;
        android.content.Context $r9;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        $r3 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePermissionMap>;

        $r4 = virtualinvoke r1.<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("android.hardware.usb.action.USB_DEVICE_DETACHED");

        r2 = $r6;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("device", r1);

        $r9 = r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mContext>;

        $r8 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r9.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r2, $r8);

        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter)
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.Object r3, $r25, $r27, $r31, $r40, $r44, $r54, $r59, $r60;
        java.lang.Throwable r4, $r66;
        java.util.Iterator r5, r6, r7, r8;
        com.android.server.usb.UsbSettingsManager$AccessoryFilter r9;
        com.android.server.usb.UsbSettingsManager$DeviceFilter r10;
        android.hardware.usb.UsbAccessory r11;
        android.util.SparseBooleanArray r12, r14;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.String r13, $r30, $r32, $r39, $r45, $r47, $r50, $r53, $r57, $r67, $r69;
        java.util.Set $r15, $r17, $r19, $r22;
        java.util.HashMap $r16, $r18, $r20, $r21, $r26, $r41, $r46, $r58;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r23, $r24, $r28, $r29, $r33, $r34, $r35, $r36, $r37, $r38, $r42, $r43, $r48, $r49, $r51, $r52, $r55, $r56, $r61, $r62, $r63, $r64, $r65, $r68;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Device permissions:");

        $r16 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePermissionMap>;

        $r15 = virtualinvoke $r16.<java.util.HashMap: java.util.Set keySet()>();

        r5 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r60 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r60;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r56 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r57);

        $r58 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePermissionMap>;

        $r59 = virtualinvoke $r58.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r13);

        r14 = (android.util.SparseBooleanArray) $r59;

        i2 = virtualinvoke r14.<android.util.SparseBooleanArray: int size()>();

     label03:
        i3 = 0;

     label04:
        if i3 >= i2 goto label07;

     label05:
        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $i5 = virtualinvoke r14.<android.util.SparseBooleanArray: int keyAt(int)>(i3);

        $r69 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        $r65 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r67 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r67);

     label06:
        i3 = i3 + 1;

        goto label04;

     label07:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("");

     label08:
        goto label02;

     label09:
        $r66 := @caughtexception;

        r4 = $r66;

     label10:
        exitmonitor r3;

     label11:
        throw r4;

     label12:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Accessory permissions:");

        $r18 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPermissionMap>;

        $r17 = virtualinvoke $r18.<java.util.HashMap: java.util.Set keySet()>();

        r6 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label20;

        $r44 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.hardware.usb.UsbAccessory) $r44;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r49 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r47);

        $r46 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPermissionMap>;

        $r54 = virtualinvoke $r46.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (android.util.SparseBooleanArray) $r54;

        i0 = virtualinvoke r12.<android.util.SparseBooleanArray: int size()>();

     label14:
        i1 = 0;

     label15:
        if i1 >= i0 goto label18;

     label16:
        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $i4 = virtualinvoke r12.<android.util.SparseBooleanArray: int keyAt(int)>(i1);

        $r50 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        $r51 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r53);

     label17:
        i1 = i1 + 1;

        goto label15;

     label18:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("");

     label19:
        goto label13;

     label20:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Device preferences:");

        $r20 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        $r19 = virtualinvoke $r20.<java.util.HashMap: java.util.Set keySet()>();

        r7 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label21:
        $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label23;

        $r31 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.android.server.usb.UsbSettingsManager$DeviceFilter) $r31;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r41 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        $r40 = virtualinvoke $r41.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r10);

        $r39 = (java.lang.String) $r40;

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r45 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r45);

     label22:
        goto label21;

     label23:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Accessory preferences:");

        $r21 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $r22 = virtualinvoke $r21.<java.util.HashMap: java.util.Set keySet()>();

        r8 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();

     label24:
        $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label26;

        $r25 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.android.server.usb.UsbSettingsManager$AccessoryFilter) $r25;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r26 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $r27 = virtualinvoke $r26.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r9);

        $r32 = (java.lang.String) $r27;

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r30);

     label25:
        goto label24;

     label26:
        exitmonitor r3;

     label27:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
        catch java.lang.Throwable from label16 to label17 with label09;
        catch java.lang.Throwable from label18 to label19 with label09;
        catch java.lang.Throwable from label20 to label21 with label09;
        catch java.lang.Throwable from label21 to label22 with label09;
        catch java.lang.Throwable from label23 to label24 with label09;
        catch java.lang.Throwable from label24 to label25 with label09;
        catch java.lang.Throwable from label26 to label27 with label09;
    }

    public void grantAccessoryPermission(android.hardware.usb.UsbAccessory, int)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbAccessory r1;
        int i0;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r10;
        android.util.SparseBooleanArray r4, $r7;
        java.util.HashMap $r5, $r8;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        i0 := @parameter1: int;

        r2 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPermissionMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (android.util.SparseBooleanArray) $r6;

     label2:
        if r4 != null goto label4;

     label3:
        $r7 = new android.util.SparseBooleanArray;

        specialinvoke $r7.<android.util.SparseBooleanArray: void <init>(int)>(1);

        r4 = $r7;

        $r8 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPermissionMap>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label4:
        virtualinvoke r4.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        exitmonitor r2;

     label5:
        return;

     label6:
        $r10 := @caughtexception;

        r3 = $r10;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void grantDevicePermission(android.hardware.usb.UsbDevice, int)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbDevice r1;
        int i0;
        java.lang.Object r2, $r7;
        java.lang.Throwable r3, $r11;
        java.lang.String r4;
        android.util.SparseBooleanArray r5, $r8;
        java.util.HashMap $r6, $r9;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        i0 := @parameter1: int;

        r2 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        r4 = virtualinvoke r1.<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>();

        $r6 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePermissionMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (android.util.SparseBooleanArray) $r7;

     label2:
        if r5 != null goto label4;

     label3:
        $r8 = new android.util.SparseBooleanArray;

        specialinvoke $r8.<android.util.SparseBooleanArray: void <init>(int)>(1);

        r5 = $r8;

        $r9 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePermissionMap>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

     label4:
        virtualinvoke r5.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        exitmonitor r2;

     label5:
        return;

     label6:
        $r11 := @caughtexception;

        r3 = $r11;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean hasDefaults(java.lang.String)
    {
        com.android.server.usb.UsbSettingsManager r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r8;
        java.util.HashMap $r4, $r6;
        java.util.Collection $r5, $r7;
        boolean $z0, $z1;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Collection values()>();

        $z0 = interfaceinvoke $r5.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        exitmonitor r2;

     label2:
        return 1;

     label3:
        $r6 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Collection values()>();

        $z1 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label8;

        exitmonitor r2;

     label4:
        return 1;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        exitmonitor r2;

     label9:
        return 0;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label8 to label9 with label5;
    }

    public boolean hasPermission(android.hardware.usb.UsbAccessory)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbAccessory r1;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r7;
        int i0;
        android.util.SparseBooleanArray r4;
        boolean z0;
        java.util.HashMap $r5;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r2 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

     label02:
        if i0 != 1000 goto label05;

     label03:
        exitmonitor r2;

     label04:
        return 1;

     label05:
        $r5 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPermissionMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (android.util.SparseBooleanArray) $r6;

     label06:
        if r4 != null goto label12;

     label07:
        exitmonitor r2;

     label08:
        return 0;

     label09:
        $r7 := @caughtexception;

        r3 = $r7;

     label10:
        exitmonitor r2;

     label11:
        throw r3;

     label12:
        z0 = virtualinvoke r4.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        exitmonitor r2;

     label13:
        return z0;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }

    public boolean hasPermission(android.hardware.usb.UsbDevice)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbDevice r1;
        java.lang.Object r2, $r7;
        java.lang.Throwable r3, $r8;
        int i0;
        android.util.SparseBooleanArray r4;
        boolean z0;
        java.util.HashMap $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

     label02:
        if i0 != 1000 goto label05;

     label03:
        exitmonitor r2;

     label04:
        return 1;

     label05:
        $r5 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePermissionMap>;

        $r6 = virtualinvoke r1.<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>();

        $r7 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        r4 = (android.util.SparseBooleanArray) $r7;

     label06:
        if r4 != null goto label12;

     label07:
        exitmonitor r2;

     label08:
        return 0;

     label09:
        $r8 := @caughtexception;

        r3 = $r8;

     label10:
        exitmonitor r2;

     label11:
        throw r3;

     label12:
        z0 = virtualinvoke r4.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        exitmonitor r2;

     label13:
        return z0;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }

    public void requestPermission(android.hardware.usb.UsbAccessory, java.lang.String, android.app.PendingIntent)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbAccessory r1;
        java.lang.String r2;
        android.app.PendingIntent r3;
        android.content.Intent r4, $r6;
        boolean $z0;
        android.content.Context $r10;
        android.app.PendingIntent$CanceledException $r11;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.app.PendingIntent;

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>()>();

        r4 = $r6;

        $z0 = virtualinvoke r0.<com.android.server.usb.UsbSettingsManager: boolean hasPermission(android.hardware.usb.UsbAccessory)>(r1);

        if $z0 == 0 goto label3;

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("accessory", r1);

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("permission", 1);

     label1:
        $r10 = r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mUserContext>;

        virtualinvoke r3.<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>($r10, 0, r4);

     label2:
        return;

     label3:
        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("accessory", r1);

        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void requestPermissionDialog(android.content.Intent,java.lang.String,android.app.PendingIntent)>(r4, r2, r3);

        return;

     label4:
        $r11 := @caughtexception;

        return;

        catch android.app.PendingIntent$CanceledException from label1 to label2 with label4;
    }

    public void requestPermission(android.hardware.usb.UsbDevice, java.lang.String, android.app.PendingIntent)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbDevice r1;
        java.lang.String r2;
        android.app.PendingIntent r3;
        android.content.Intent r4, $r6;
        boolean $z0;
        android.content.Context $r10;
        android.app.PendingIntent$CanceledException $r11;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.app.PendingIntent;

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>()>();

        r4 = $r6;

        $z0 = virtualinvoke r0.<com.android.server.usb.UsbSettingsManager: boolean hasPermission(android.hardware.usb.UsbDevice)>(r1);

        if $z0 == 0 goto label3;

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("device", r1);

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("permission", 1);

     label1:
        $r10 = r0.<com.android.server.usb.UsbSettingsManager: android.content.Context mUserContext>;

        virtualinvoke r3.<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>($r10, 0, r4);

     label2:
        return;

     label3:
        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("device", r1);

        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void requestPermissionDialog(android.content.Intent,java.lang.String,android.app.PendingIntent)>(r4, r2, r3);

        return;

     label4:
        $r11 := @caughtexception;

        return;

        catch android.app.PendingIntent$CanceledException from label1 to label2 with label4;
    }

    public void setAccessoryPackage(android.hardware.usb.UsbAccessory, java.lang.String)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbAccessory r1;
        java.lang.String r2;
        com.android.server.usb.UsbSettingsManager$AccessoryFilter r3, $r6;
        java.lang.Object r4, $r8, $r13;
        java.lang.Throwable r5, $r12;
        boolean z0, $z1;
        java.util.HashMap $r7, $r9, $r11;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r2 := @parameter1: java.lang.String;

        $r6 = new com.android.server.usb.UsbSettingsManager$AccessoryFilter;

        specialinvoke $r6.<com.android.server.usb.UsbSettingsManager$AccessoryFilter: void <init>(android.hardware.usb.UsbAccessory)>(r1);

        r3 = $r6;

        r4 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r4;

        if r2 != null goto label07;

     label01:
        $r11 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $r13 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r3);

        if $r13 == null goto label16;

     label02:
        z0 = 1;

     label03:
        if z0 == 0 goto label05;

     label04:
        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void writeSettingsLocked()>();

     label05:
        exitmonitor r4;

     label06:
        return;

     label07:
        $r7 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label15;

     label08:
        z0 = 1;

     label09:
        if z0 == 0 goto label03;

     label10:
        $r9 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mAccessoryPreferenceMap>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

     label11:
        goto label03;

     label12:
        $r12 := @caughtexception;

        r5 = $r12;

     label13:
        exitmonitor r4;

     label14:
        throw r5;

     label15:
        z0 = 0;

        goto label09;

     label16:
        z0 = 0;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void setDevicePackage(android.hardware.usb.UsbDevice, java.lang.String)
    {
        com.android.server.usb.UsbSettingsManager r0;
        android.hardware.usb.UsbDevice r1;
        java.lang.String r2;
        com.android.server.usb.UsbSettingsManager$DeviceFilter r3, $r6;
        java.lang.Object r4, $r8, $r13;
        java.lang.Throwable r5, $r12;
        boolean z0, $z1;
        java.util.HashMap $r7, $r9, $r11;

        r0 := @this: com.android.server.usb.UsbSettingsManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 := @parameter1: java.lang.String;

        $r6 = new com.android.server.usb.UsbSettingsManager$DeviceFilter;

        specialinvoke $r6.<com.android.server.usb.UsbSettingsManager$DeviceFilter: void <init>(android.hardware.usb.UsbDevice)>(r1);

        r3 = $r6;

        r4 = r0.<com.android.server.usb.UsbSettingsManager: java.lang.Object mLock>;

        entermonitor r4;

        if r2 != null goto label07;

     label01:
        $r11 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        $r13 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r3);

        if $r13 == null goto label16;

     label02:
        z0 = 1;

     label03:
        if z0 == 0 goto label05;

     label04:
        specialinvoke r0.<com.android.server.usb.UsbSettingsManager: void writeSettingsLocked()>();

     label05:
        exitmonitor r4;

     label06:
        return;

     label07:
        $r7 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label15;

     label08:
        z0 = 1;

     label09:
        if z0 == 0 goto label03;

     label10:
        $r9 = r0.<com.android.server.usb.UsbSettingsManager: java.util.HashMap mDevicePreferenceMap>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

     label11:
        goto label03;

     label12:
        $r12 := @caughtexception;

        r5 = $r12;

     label13:
        exitmonitor r4;

     label14:
        throw r5;

     label15:
        z0 = 0;

        goto label09;

     label16:
        z0 = 0;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }
}
