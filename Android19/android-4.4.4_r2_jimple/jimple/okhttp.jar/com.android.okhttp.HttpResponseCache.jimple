public final class com.android.okhttp.HttpResponseCache extends java.net.ResponseCache
{
    private static final char[] DIGITS;
    private static final int ENTRY_BODY;
    private static final int ENTRY_COUNT;
    private static final int ENTRY_METADATA;
    private static final int VERSION;
    private final com.android.okhttp.internal.DiskLruCache cache;
    private int hitCount;
    private int networkCount;
    final com.android.okhttp.OkResponseCache okResponseCache;
    private int requestCount;
    private int writeAbortCount;
    private int writeSuccessCount;

    static void <clinit>()
    {
        char[] $r0;

        <com.android.okhttp.HttpResponseCache: int VERSION> = 201105;

        <com.android.okhttp.HttpResponseCache: int ENTRY_METADATA> = 0;

        <com.android.okhttp.HttpResponseCache: int ENTRY_COUNT> = 2;

        <com.android.okhttp.HttpResponseCache: int ENTRY_BODY> = 1;

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 97;

        $r0[11] = 98;

        $r0[12] = 99;

        $r0[13] = 100;

        $r0[14] = 101;

        $r0[15] = 102;

        <com.android.okhttp.HttpResponseCache: char[] DIGITS> = $r0;

        return;
    }

    public void <init>(java.io.File, long) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        java.io.File r1;
        long l0;
        com.android.okhttp.HttpResponseCache$1 $r2;
        com.android.okhttp.internal.DiskLruCache $r3;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        specialinvoke r0.<java.net.ResponseCache: void <init>()>();

        $r2 = new com.android.okhttp.HttpResponseCache$1;

        specialinvoke $r2.<com.android.okhttp.HttpResponseCache$1: void <init>(com.android.okhttp.HttpResponseCache)>(r0);

        r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.OkResponseCache okResponseCache> = $r2;

        $r3 = staticinvoke <com.android.okhttp.internal.DiskLruCache: com.android.okhttp.internal.DiskLruCache open(java.io.File,int,int,long)>(r1, 201105, 2, l0);

        r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache> = $r3;

        return;
    }

    private void abortQuietly(com.android.okhttp.internal.DiskLruCache$Editor)
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache$Editor r1;
        java.io.IOException $r3;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: com.android.okhttp.internal.DiskLruCache$Editor;

        if r1 == null goto label2;

     label1:
        virtualinvoke r1.<com.android.okhttp.internal.DiskLruCache$Editor: void abort()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static boolean access$000(com.android.okhttp.HttpResponseCache, java.lang.String, java.net.URI)
    {
        com.android.okhttp.HttpResponseCache r0;
        java.lang.String r1;
        java.net.URI r2;
        boolean $z0;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.net.URI;

        $z0 = specialinvoke r0.<com.android.okhttp.HttpResponseCache: boolean maybeRemove(java.lang.String,java.net.URI)>(r1, r2);

        return $z0;
    }

    static void access$100(com.android.okhttp.HttpResponseCache, java.net.CacheResponse, java.net.HttpURLConnection) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        java.net.CacheResponse r1;
        java.net.HttpURLConnection r2;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache;

        r1 := @parameter1: java.net.CacheResponse;

        r2 := @parameter2: java.net.HttpURLConnection;

        specialinvoke r0.<com.android.okhttp.HttpResponseCache: void update(java.net.CacheResponse,java.net.HttpURLConnection)>(r1, r2);

        return;
    }

    static java.io.InputStream access$1000(com.android.okhttp.internal.DiskLruCache$Snapshot)
    {
        com.android.okhttp.internal.DiskLruCache$Snapshot r0;
        java.io.InputStream $r1;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache$Snapshot;

        $r1 = staticinvoke <com.android.okhttp.HttpResponseCache: java.io.InputStream newBodyInputStream(com.android.okhttp.internal.DiskLruCache$Snapshot)>(r0);

        return $r1;
    }

    static void access$200(com.android.okhttp.HttpResponseCache)
    {
        com.android.okhttp.HttpResponseCache r0;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache;

        specialinvoke r0.<com.android.okhttp.HttpResponseCache: void trackConditionalCacheHit()>();

        return;
    }

    static void access$300(com.android.okhttp.HttpResponseCache, com.android.okhttp.ResponseSource)
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.ResponseSource r1;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache;

        r1 := @parameter1: com.android.okhttp.ResponseSource;

        specialinvoke r0.<com.android.okhttp.HttpResponseCache: void trackResponse(com.android.okhttp.ResponseSource)>(r1);

        return;
    }

    static int access$808(com.android.okhttp.HttpResponseCache)
    {
        com.android.okhttp.HttpResponseCache r0;
        int i0, $i1;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache;

        i0 = r0.<com.android.okhttp.HttpResponseCache: int writeSuccessCount>;

        $i1 = i0 + 1;

        r0.<com.android.okhttp.HttpResponseCache: int writeSuccessCount> = $i1;

        return i0;
    }

    static int access$908(com.android.okhttp.HttpResponseCache)
    {
        com.android.okhttp.HttpResponseCache r0;
        int i0, $i1;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache;

        i0 = r0.<com.android.okhttp.HttpResponseCache: int writeAbortCount>;

        $i1 = i0 + 1;

        r0.<com.android.okhttp.HttpResponseCache: int writeAbortCount> = $i1;

        return i0;
    }

    private static java.lang.String bytesToHexString(byte[])
    {
        byte[] r0;
        char[] r1, r2;
        int i0, i1, i2, i4, $i5, $i6;
        byte b3, $b7, $b8, $b10;
        java.lang.String $r3;
        char $c9, $c11;

        r0 := @parameter0: byte[];

        r1 = <com.android.okhttp.HttpResponseCache: char[] DIGITS>;

        $i5 = lengthof r0;

        $i6 = 2 * $i5;

        r2 = newarray (char)[$i6];

        i0 = lengthof r0;

        i1 = 0;

        i2 = 0;

     label1:
        if i1 >= i0 goto label2;

        b3 = r0[i1];

        i4 = i2 + 1;

        $b7 = b3 >> 4;

        $b8 = 15 & $b7;

        $c9 = r1[$b8];

        r2[i2] = $c9;

        i2 = i4 + 1;

        $b10 = b3 & 15;

        $c11 = r1[$b10];

        r2[i4] = $c11;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r2);

        return $r3;
    }

    private com.android.okhttp.internal.http.HttpEngine getHttpEngine(java.net.URLConnection)
    {
        com.android.okhttp.HttpResponseCache r0;
        java.net.URLConnection r1;
        boolean $z0, $z1;
        com.android.okhttp.internal.http.HttpsURLConnectionImpl $r2;
        com.android.okhttp.internal.http.HttpEngine $r3, $r5;
        com.android.okhttp.internal.http.HttpURLConnectionImpl $r4;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: java.net.URLConnection;

        $z0 = r1 instanceof com.android.okhttp.internal.http.HttpURLConnectionImpl;

        if $z0 == 0 goto label1;

        $r4 = (com.android.okhttp.internal.http.HttpURLConnectionImpl) r1;

        $r5 = virtualinvoke $r4.<com.android.okhttp.internal.http.HttpURLConnectionImpl: com.android.okhttp.internal.http.HttpEngine getHttpEngine()>();

        return $r5;

     label1:
        $z1 = r1 instanceof com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        if $z1 == 0 goto label2;

        $r2 = (com.android.okhttp.internal.http.HttpsURLConnectionImpl) r1;

        $r3 = virtualinvoke $r2.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpEngine getHttpEngine()>();

        return $r3;

     label2:
        return null;
    }

    private boolean maybeRemove(java.lang.String, java.net.URI)
    {
        com.android.okhttp.HttpResponseCache r0;
        java.lang.String r1, $r5;
        java.net.URI r2;
        boolean $z0, $z2, $z3;
        com.android.okhttp.internal.DiskLruCache $r4;
        java.io.IOException $r6;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.net.URI;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("POST");

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("PUT");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("DELETE");

        if $z3 == 0 goto label3;

     label1:
        $r4 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $r5 = specialinvoke r0.<com.android.okhttp.HttpResponseCache: java.lang.String uriToKey(java.net.URI)>(r2);

        virtualinvoke $r4.<com.android.okhttp.internal.DiskLruCache: boolean remove(java.lang.String)>($r5);

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r6 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label4;
    }

    private static java.io.InputStream newBodyInputStream(com.android.okhttp.internal.DiskLruCache$Snapshot)
    {
        com.android.okhttp.internal.DiskLruCache$Snapshot r0;
        com.android.okhttp.HttpResponseCache$2 $r1;
        java.io.InputStream $r2;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache$Snapshot;

        $r1 = new com.android.okhttp.HttpResponseCache$2;

        $r2 = virtualinvoke r0.<com.android.okhttp.internal.DiskLruCache$Snapshot: java.io.InputStream getInputStream(int)>(1);

        specialinvoke $r1.<com.android.okhttp.HttpResponseCache$2: void <init>(java.io.InputStream,com.android.okhttp.internal.DiskLruCache$Snapshot)>($r2, r0);

        return $r1;
    }

    private void trackConditionalCacheHit()
    {
        com.android.okhttp.HttpResponseCache r0;
        java.lang.Throwable r1, $r2;
        int $i0, $i1;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        entermonitor r0;

     label1:
        $i0 = r0.<com.android.okhttp.HttpResponseCache: int hitCount>;

        $i1 = 1 + $i0;

        r0.<com.android.okhttp.HttpResponseCache: int hitCount> = $i1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void trackResponse(com.android.okhttp.ResponseSource)
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.ResponseSource r1;
        java.lang.Throwable r2, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r3;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: com.android.okhttp.ResponseSource;

        entermonitor r0;

     label1:
        $i1 = r0.<com.android.okhttp.HttpResponseCache: int requestCount>;

        $i2 = 1 + $i1;

        r0.<com.android.okhttp.HttpResponseCache: int requestCount> = $i2;

        $r3 = <com.android.okhttp.HttpResponseCache$3: int[] $SwitchMap$com$squareup$okhttp$ResponseSource>;

        $i3 = virtualinvoke r1.<com.android.okhttp.ResponseSource: int ordinal()>();

        i0 = $r3[$i3];

     label2:
        tableswitch(i0)
        {
            case 1: goto label4;
            case 2: goto label7;
            case 3: goto label7;
            default: goto label3;
        };

     label3:
        exitmonitor r0;

        return;

     label4:
        $i6 = r0.<com.android.okhttp.HttpResponseCache: int hitCount>;

        $i7 = 1 + $i6;

        r0.<com.android.okhttp.HttpResponseCache: int hitCount> = $i7;

     label5:
        goto label3;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

     label7:
        $i4 = r0.<com.android.okhttp.HttpResponseCache: int networkCount>;

        $i5 = 1 + $i4;

        r0.<com.android.okhttp.HttpResponseCache: int networkCount> = $i5;

     label8:
        goto label3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void update(java.net.CacheResponse, java.net.HttpURLConnection) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        java.net.CacheResponse r1;
        java.net.HttpURLConnection r2;
        com.android.okhttp.internal.http.HttpEngine r3;
        java.net.URI r4;
        com.android.okhttp.internal.http.ResponseHeaders r5;
        com.android.okhttp.HttpResponseCache$Entry r6, $r10;
        com.android.okhttp.internal.DiskLruCache$Snapshot r7;
        com.android.okhttp.internal.DiskLruCache$Editor r8;
        com.android.okhttp.internal.http.RequestHeaders $r11;
        com.android.okhttp.internal.http.RawHeaders $r12, $r13;
        java.util.Set $r14;
        com.android.okhttp.HttpResponseCache$EntrySecureCacheResponse $r15;
        boolean $z0;
        com.android.okhttp.HttpResponseCache$EntryCacheResponse $r16;
        java.io.IOException $r17;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: java.net.CacheResponse;

        r2 := @parameter1: java.net.HttpURLConnection;

        r3 = specialinvoke r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.http.HttpEngine getHttpEngine(java.net.URLConnection)>(r2);

        r4 = virtualinvoke r3.<com.android.okhttp.internal.http.HttpEngine: java.net.URI getUri()>();

        r5 = virtualinvoke r3.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.ResponseHeaders getResponseHeaders()>();

        $r10 = new com.android.okhttp.HttpResponseCache$Entry;

        $r11 = virtualinvoke r3.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.RequestHeaders getRequestHeaders()>();

        $r12 = virtualinvoke $r11.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders getHeaders()>();

        $r14 = virtualinvoke r5.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Set getVaryFields()>();

        $r13 = virtualinvoke $r12.<com.android.okhttp.internal.http.RawHeaders: com.android.okhttp.internal.http.RawHeaders getAll(java.util.Set)>($r14);

        specialinvoke $r10.<com.android.okhttp.HttpResponseCache$Entry: void <init>(java.net.URI,com.android.okhttp.internal.http.RawHeaders,java.net.HttpURLConnection)>(r4, $r13, r2);

        r6 = $r10;

        $z0 = r1 instanceof com.android.okhttp.HttpResponseCache$EntryCacheResponse;

        if $z0 == 0 goto label6;

        $r16 = (com.android.okhttp.HttpResponseCache$EntryCacheResponse) r1;

        r7 = staticinvoke <com.android.okhttp.HttpResponseCache$EntryCacheResponse: com.android.okhttp.internal.DiskLruCache$Snapshot access$500(com.android.okhttp.HttpResponseCache$EntryCacheResponse)>($r16);

     label1:
        r8 = null;

     label2:
        r8 = virtualinvoke r7.<com.android.okhttp.internal.DiskLruCache$Snapshot: com.android.okhttp.internal.DiskLruCache$Editor edit()>();

     label3:
        if r8 == null goto label5;

     label4:
        virtualinvoke r6.<com.android.okhttp.HttpResponseCache$Entry: void writeTo(com.android.okhttp.internal.DiskLruCache$Editor)>(r8);

        virtualinvoke r8.<com.android.okhttp.internal.DiskLruCache$Editor: void commit()>();

     label5:
        return;

     label6:
        $r15 = (com.android.okhttp.HttpResponseCache$EntrySecureCacheResponse) r1;

        r7 = staticinvoke <com.android.okhttp.HttpResponseCache$EntrySecureCacheResponse: com.android.okhttp.internal.DiskLruCache$Snapshot access$600(com.android.okhttp.HttpResponseCache$EntrySecureCacheResponse)>($r15);

        goto label1;

     label7:
        $r17 := @caughtexception;

        specialinvoke r0.<com.android.okhttp.HttpResponseCache: void abortQuietly(com.android.okhttp.internal.DiskLruCache$Editor)>(r8);

        return;

        catch java.io.IOException from label2 to label3 with label7;
        catch java.io.IOException from label4 to label5 with label7;
    }

    private java.lang.String uriToKey(java.net.URI)
    {
        com.android.okhttp.HttpResponseCache r0;
        java.net.URI r1;
        java.io.UnsupportedEncodingException r2, $r9;
        java.security.NoSuchAlgorithmException r3, $r11;
        java.lang.String r4, $r6;
        java.security.MessageDigest $r5;
        byte[] $r7, $r8;
        java.lang.AssertionError $r10, $r12;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: java.net.URI;

     label1:
        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $r6 = virtualinvoke r1.<java.net.URI: java.lang.String toString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r8 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r7);

        r4 = staticinvoke <com.android.okhttp.HttpResponseCache: java.lang.String bytesToHexString(byte[])>($r8);

     label2:
        return r4;

     label3:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);

        throw $r12;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r10;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: void close()>();

        return;
    }

    public void delete() throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: void delete()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: void flush()>();

        return;
    }

    public java.net.CacheResponse get(java.net.URI, java.lang.String, java.util.Map)
    {
        com.android.okhttp.HttpResponseCache r0;
        java.net.URI r1;
        java.lang.String r2, r4;
        java.util.Map r3;
        com.android.okhttp.internal.DiskLruCache$Snapshot r6;
        com.android.okhttp.HttpResponseCache$Entry r7, $r9;
        com.android.okhttp.internal.DiskLruCache $r8;
        java.io.InputStream $r10;
        boolean $z0, $z1;
        com.android.okhttp.HttpResponseCache$EntryCacheResponse $r11;
        java.io.IOException $r12;
        com.android.okhttp.HttpResponseCache$EntrySecureCacheResponse $r13;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        r4 = specialinvoke r0.<com.android.okhttp.HttpResponseCache: java.lang.String uriToKey(java.net.URI)>(r1);

     label1:
        $r8 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        r6 = virtualinvoke $r8.<com.android.okhttp.internal.DiskLruCache: com.android.okhttp.internal.DiskLruCache$Snapshot get(java.lang.String)>(r4);

     label2:
        if r6 != null goto label3;

        return null;

     label3:
        $r9 = new com.android.okhttp.HttpResponseCache$Entry;

        $r10 = virtualinvoke r6.<com.android.okhttp.internal.DiskLruCache$Snapshot: java.io.InputStream getInputStream(int)>(0);

        specialinvoke $r9.<com.android.okhttp.HttpResponseCache$Entry: void <init>(java.io.InputStream)>($r10);

        r7 = $r9;

     label4:
        $z0 = virtualinvoke r7.<com.android.okhttp.HttpResponseCache$Entry: boolean matches(java.net.URI,java.lang.String,java.util.Map)>(r1, r2, r3);

        if $z0 != 0 goto label6;

        virtualinvoke r6.<com.android.okhttp.internal.DiskLruCache$Snapshot: void close()>();

        return null;

     label5:
        $r12 := @caughtexception;

        return null;

     label6:
        $z1 = staticinvoke <com.android.okhttp.HttpResponseCache$Entry: boolean access$400(com.android.okhttp.HttpResponseCache$Entry)>(r7);

        if $z1 == 0 goto label7;

        $r13 = new com.android.okhttp.HttpResponseCache$EntrySecureCacheResponse;

        specialinvoke $r13.<com.android.okhttp.HttpResponseCache$EntrySecureCacheResponse: void <init>(com.android.okhttp.HttpResponseCache$Entry,com.android.okhttp.internal.DiskLruCache$Snapshot)>(r7, r6);

        return $r13;

     label7:
        $r11 = new com.android.okhttp.HttpResponseCache$EntryCacheResponse;

        specialinvoke $r11.<com.android.okhttp.HttpResponseCache$EntryCacheResponse: void <init>(com.android.okhttp.HttpResponseCache$Entry,com.android.okhttp.internal.DiskLruCache$Snapshot)>(r7, r6);

        return $r11;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public java.io.File getDirectory()
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;
        java.io.File $r2;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: java.io.File getDirectory()>();

        return $r2;
    }

    public int getHitCount()
    {
        com.android.okhttp.HttpResponseCache r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        entermonitor r0;

     label1:
        i0 = r0.<com.android.okhttp.HttpResponseCache: int hitCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long getMaxSize()
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;
        long $l0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $l0 = virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: long getMaxSize()>();

        return $l0;
    }

    public int getNetworkCount()
    {
        com.android.okhttp.HttpResponseCache r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        entermonitor r0;

     label1:
        i0 = r0.<com.android.okhttp.HttpResponseCache: int networkCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getRequestCount()
    {
        com.android.okhttp.HttpResponseCache r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        entermonitor r0;

     label1:
        i0 = r0.<com.android.okhttp.HttpResponseCache: int requestCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long getSize()
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;
        long $l0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $l0 = virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: long size()>();

        return $l0;
    }

    public int getWriteAbortCount()
    {
        com.android.okhttp.HttpResponseCache r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        entermonitor r0;

     label1:
        i0 = r0.<com.android.okhttp.HttpResponseCache: int writeAbortCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getWriteSuccessCount()
    {
        com.android.okhttp.HttpResponseCache r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        entermonitor r0;

     label1:
        i0 = r0.<com.android.okhttp.HttpResponseCache: int writeSuccessCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isClosed()
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;
        boolean $z0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $z0 = virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: boolean isClosed()>();

        return $z0;
    }

    public java.net.CacheRequest put(java.net.URI, java.net.URLConnection) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        java.net.URI r1;
        java.net.URLConnection r2;
        java.net.HttpURLConnection r3;
        java.lang.String r4, $r17;
        com.android.okhttp.internal.http.HttpEngine r5;
        com.android.okhttp.internal.http.ResponseHeaders r6;
        com.android.okhttp.HttpResponseCache$Entry r7, $r12;
        com.android.okhttp.internal.DiskLruCache$Editor r8;
        com.android.okhttp.HttpResponseCache$CacheRequestImpl r10, $r19;
        boolean $z0, $z1, $z2, $z3;
        com.android.okhttp.internal.http.RequestHeaders $r11;
        java.util.Set $r13;
        com.android.okhttp.internal.http.RawHeaders $r14, $r16;
        com.android.okhttp.internal.DiskLruCache $r15;
        java.io.IOException $r18;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: java.net.URLConnection;

        $z0 = r2 instanceof java.net.HttpURLConnection;

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        r3 = (java.net.HttpURLConnection) r2;

        r4 = virtualinvoke r3.<java.net.HttpURLConnection: java.lang.String getRequestMethod()>();

        $z1 = specialinvoke r0.<com.android.okhttp.HttpResponseCache: boolean maybeRemove(java.lang.String,java.net.URI)>(r4, r1);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("GET");

        if $z2 == 0 goto label1;

        r5 = specialinvoke r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.http.HttpEngine getHttpEngine(java.net.URLConnection)>(r3);

        if r5 == null goto label1;

        r6 = virtualinvoke r5.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.ResponseHeaders getResponseHeaders()>();

        $z3 = virtualinvoke r6.<com.android.okhttp.internal.http.ResponseHeaders: boolean hasVaryAll()>();

        if $z3 != 0 goto label1;

        $r12 = new com.android.okhttp.HttpResponseCache$Entry;

        $r11 = virtualinvoke r5.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.RequestHeaders getRequestHeaders()>();

        $r14 = virtualinvoke $r11.<com.android.okhttp.internal.http.RequestHeaders: com.android.okhttp.internal.http.RawHeaders getHeaders()>();

        $r13 = virtualinvoke r6.<com.android.okhttp.internal.http.ResponseHeaders: java.util.Set getVaryFields()>();

        $r16 = virtualinvoke $r14.<com.android.okhttp.internal.http.RawHeaders: com.android.okhttp.internal.http.RawHeaders getAll(java.util.Set)>($r13);

        specialinvoke $r12.<com.android.okhttp.HttpResponseCache$Entry: void <init>(java.net.URI,com.android.okhttp.internal.http.RawHeaders,java.net.HttpURLConnection)>(r1, $r16, r3);

        r7 = $r12;

        r8 = null;

     label3:
        $r15 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $r17 = specialinvoke r0.<com.android.okhttp.HttpResponseCache: java.lang.String uriToKey(java.net.URI)>(r1);

        r8 = virtualinvoke $r15.<com.android.okhttp.internal.DiskLruCache: com.android.okhttp.internal.DiskLruCache$Editor edit(java.lang.String)>($r17);

     label4:
        if r8 == null goto label1;

     label5:
        virtualinvoke r7.<com.android.okhttp.HttpResponseCache$Entry: void writeTo(com.android.okhttp.internal.DiskLruCache$Editor)>(r8);

        $r19 = new com.android.okhttp.HttpResponseCache$CacheRequestImpl;

        specialinvoke $r19.<com.android.okhttp.HttpResponseCache$CacheRequestImpl: void <init>(com.android.okhttp.HttpResponseCache,com.android.okhttp.internal.DiskLruCache$Editor)>(r0, r8);

        r10 = $r19;

     label6:
        return r10;

     label7:
        $r18 := @caughtexception;

        specialinvoke r0.<com.android.okhttp.HttpResponseCache: void abortQuietly(com.android.okhttp.internal.DiskLruCache$Editor)>(r8);

        return null;

        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }
}
