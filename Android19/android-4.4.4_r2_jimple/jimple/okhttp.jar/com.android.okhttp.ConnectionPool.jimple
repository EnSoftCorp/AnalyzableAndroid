public class com.android.okhttp.ConnectionPool extends java.lang.Object
{
    private static final long DEFAULT_KEEP_ALIVE_DURATION_MS;
    private static final int MAX_CONNECTIONS_TO_CLEANUP;
    private static final com.android.okhttp.ConnectionPool systemDefault;
    private final java.util.LinkedList connections;
    private final java.util.concurrent.Callable connectionsCleanupCallable;
    private final java.util.concurrent.ExecutorService executorService;
    private final long keepAliveDurationNs;
    private final int maxIdleConnections;

    static void <clinit>()
    {
        java.lang.String r0, r1, r2;
        long l0;
        com.android.okhttp.ConnectionPool $r3, $r4, $r5;
        int $i1;
        boolean $z0;

        <com.android.okhttp.ConnectionPool: int MAX_CONNECTIONS_TO_CLEANUP> = 2;

        <com.android.okhttp.ConnectionPool: long DEFAULT_KEEP_ALIVE_DURATION_MS> = 300000L;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.keepAlive");

        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.keepAliveDuration");

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.maxConnections");

        if r1 == null goto label2;

        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1);

     label1:
        if r0 == null goto label3;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r0);

        if $z0 != 0 goto label3;

        $r5 = new com.android.okhttp.ConnectionPool;

        specialinvoke $r5.<com.android.okhttp.ConnectionPool: void <init>(int,long)>(0, l0);

        <com.android.okhttp.ConnectionPool: com.android.okhttp.ConnectionPool systemDefault> = $r5;

        return;

     label2:
        l0 = 300000L;

        goto label1;

     label3:
        if r2 == null goto label4;

        $r4 = new com.android.okhttp.ConnectionPool;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        specialinvoke $r4.<com.android.okhttp.ConnectionPool: void <init>(int,long)>($i1, l0);

        <com.android.okhttp.ConnectionPool: com.android.okhttp.ConnectionPool systemDefault> = $r4;

        return;

     label4:
        $r3 = new com.android.okhttp.ConnectionPool;

        specialinvoke $r3.<com.android.okhttp.ConnectionPool: void <init>(int,long)>(5, l0);

        <com.android.okhttp.ConnectionPool: com.android.okhttp.ConnectionPool systemDefault> = $r3;

        return;
    }

    public void <init>(int, long)
    {
        com.android.okhttp.ConnectionPool r0;
        int i0;
        long l1, $l2, $l3;
        java.util.LinkedList $r1;
        java.util.concurrent.ThreadPoolExecutor $r2;
        java.util.concurrent.LinkedBlockingQueue $r3;
        java.util.concurrent.TimeUnit $r4;
        java.util.concurrent.ThreadFactory $r5;
        com.android.okhttp.ConnectionPool$1 $r6;

        r0 := @this: com.android.okhttp.ConnectionPool;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections> = $r1;

        $r2 = new java.util.concurrent.ThreadPoolExecutor;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r3 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        $r5 = staticinvoke <com.android.okhttp.internal.Util: java.util.concurrent.ThreadFactory daemonThreadFactory(java.lang.String)>("OkHttp ConnectionPool");

        specialinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 1, 60L, $r4, $r3, $r5);

        r0.<com.android.okhttp.ConnectionPool: java.util.concurrent.ExecutorService executorService> = $r2;

        $r6 = new com.android.okhttp.ConnectionPool$1;

        specialinvoke $r6.<com.android.okhttp.ConnectionPool$1: void <init>(com.android.okhttp.ConnectionPool)>(r0);

        r0.<com.android.okhttp.ConnectionPool: java.util.concurrent.Callable connectionsCleanupCallable> = $r6;

        r0.<com.android.okhttp.ConnectionPool: int maxIdleConnections> = i0;

        $l2 = l1 * 1000L;

        $l3 = 1000L * $l2;

        r0.<com.android.okhttp.ConnectionPool: long keepAliveDurationNs> = $l3;

        return;
    }

    static java.util.LinkedList access$000(com.android.okhttp.ConnectionPool)
    {
        com.android.okhttp.ConnectionPool r0;
        java.util.LinkedList $r1;

        r0 := @parameter0: com.android.okhttp.ConnectionPool;

        $r1 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        return $r1;
    }

    static long access$100(com.android.okhttp.ConnectionPool)
    {
        com.android.okhttp.ConnectionPool r0;
        long $l0;

        r0 := @parameter0: com.android.okhttp.ConnectionPool;

        $l0 = r0.<com.android.okhttp.ConnectionPool: long keepAliveDurationNs>;

        return $l0;
    }

    static int access$200(com.android.okhttp.ConnectionPool)
    {
        com.android.okhttp.ConnectionPool r0;
        int $i0;

        r0 := @parameter0: com.android.okhttp.ConnectionPool;

        $i0 = r0.<com.android.okhttp.ConnectionPool: int maxIdleConnections>;

        return $i0;
    }

    public static com.android.okhttp.ConnectionPool getDefault()
    {
        com.android.okhttp.ConnectionPool $r0;

        $r0 = <com.android.okhttp.ConnectionPool: com.android.okhttp.ConnectionPool systemDefault>;

        return $r0;
    }

    private void waitForCleanupCallableToRun()
    {
        com.android.okhttp.ConnectionPool r0;
        com.android.okhttp.ConnectionPool$2 $r2;
        java.util.concurrent.ExecutorService $r3;
        java.util.concurrent.Future $r4;
        java.lang.Exception $r6;
        java.lang.AssertionError $r7;

        r0 := @this: com.android.okhttp.ConnectionPool;

     label1:
        $r3 = r0.<com.android.okhttp.ConnectionPool: java.util.concurrent.ExecutorService executorService>;

        $r2 = new com.android.okhttp.ConnectionPool$2;

        specialinvoke $r2.<com.android.okhttp.ConnectionPool$2: void <init>(com.android.okhttp.ConnectionPool)>(r0);

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r2);

        interfaceinvoke $r4.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void evictAll()
    {
        com.android.okhttp.ConnectionPool r0;
        java.util.ArrayList r1, $r4;
        java.lang.Throwable r2, $r9;
        java.util.Iterator r3;
        java.util.LinkedList $r5, $r6;
        boolean $z0;
        java.lang.Object $r7;
        com.android.okhttp.Connection $r8;

        r0 := @this: com.android.okhttp.ConnectionPool;

        entermonitor r0;

     label1:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        r1 = $r4;

        $r6 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        virtualinvoke $r6.<java.util.LinkedList: void clear()>();

        exitmonitor r0;

     label2:
        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.android.okhttp.Connection) $r7;

        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>($r8);

        goto label3;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

     label5:
        exitmonitor r0;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public com.android.okhttp.Connection get(com.android.okhttp.Address)
    {
        com.android.okhttp.ConnectionPool r0;
        com.android.okhttp.Address r1, $r15;
        java.lang.Throwable r2, $r24;
        java.util.ListIterator r3;
        boolean z0, z1, $z2, $z3, $z4;
        com.android.okhttp.Connection r4, r5;
        java.net.SocketException r6, $r17;
        java.util.LinkedList $r7, $r8, $r12;
        int $i0;
        java.util.concurrent.ExecutorService $r9;
        java.util.concurrent.Callable $r10;
        com.android.okhttp.Route $r13;
        java.lang.Object $r14;
        long $l1, $l2, $l3, $l5;
        byte $b4;
        java.net.Socket $r16;
        com.android.okhttp.internal.Platform $r18, $r21;
        java.lang.StringBuilder $r19, $r20, $r22;
        java.lang.String $r23;

        r0 := @this: com.android.okhttp.ConnectionPool;

        r1 := @parameter0: com.android.okhttp.Address;

        entermonitor r0;

     label01:
        $r8 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $r7 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $i0 = virtualinvoke $r7.<java.util.LinkedList: int size()>();

        r3 = virtualinvoke $r8.<java.util.LinkedList: java.util.ListIterator listIterator(int)>($i0);

     label02:
        z0 = interfaceinvoke r3.<java.util.ListIterator: boolean hasPrevious()>();

     label03:
        r4 = null;

        if z0 == 0 goto label08;

     label04:
        $r14 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object previous()>();

        r5 = (com.android.okhttp.Connection) $r14;

        $r13 = virtualinvoke r5.<com.android.okhttp.Connection: com.android.okhttp.Route getRoute()>();

        $r15 = virtualinvoke $r13.<com.android.okhttp.Route: com.android.okhttp.Address getAddress()>();

        $z3 = virtualinvoke $r15.<com.android.okhttp.Address: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label02;

        $z4 = virtualinvoke r5.<com.android.okhttp.Connection: boolean isAlive()>();

        if $z4 == 0 goto label02;

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $l3 = virtualinvoke r5.<com.android.okhttp.Connection: long getIdleStartTimeNs()>();

        $l5 = $l1 - $l3;

        $l2 = r0.<com.android.okhttp.ConnectionPool: long keepAliveDurationNs>;

        $b4 = $l5 cmp $l2;

        if $b4 >= 0 goto label02;

        interfaceinvoke r3.<java.util.ListIterator: void remove()>();

        z1 = virtualinvoke r5.<com.android.okhttp.Connection: boolean isSpdy()>();

     label05:
        if z1 != 0 goto label07;

     label06:
        $r18 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $r16 = virtualinvoke r5.<com.android.okhttp.Connection: java.net.Socket getSocket()>();

        virtualinvoke $r18.<com.android.okhttp.internal.Platform: void tagSocket(java.net.Socket)>($r16);

     label07:
        r4 = r5;

     label08:
        if r4 == null goto label10;

     label09:
        $z2 = virtualinvoke r4.<com.android.okhttp.Connection: boolean isSpdy()>();

        if $z2 == 0 goto label10;

        $r12 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        virtualinvoke $r12.<java.util.LinkedList: void addFirst(java.lang.Object)>(r4);

     label10:
        $r9 = r0.<com.android.okhttp.ConnectionPool: java.util.concurrent.ExecutorService executorService>;

        $r10 = r0.<com.android.okhttp.ConnectionPool: java.util.concurrent.Callable connectionsCleanupCallable>;

        interfaceinvoke $r9.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r10);

     label11:
        exitmonitor r0;

        return r4;

     label12:
        $r17 := @caughtexception;

        r6 = $r17;

     label13:
        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>(r5);

        $r21 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to tagSocket(): ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<com.android.okhttp.internal.Platform: void logW(java.lang.String)>($r23);

     label14:
        goto label02;

     label15:
        $r24 := @caughtexception;

        r2 = $r24;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.net.SocketException from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    public int getConnectionCount()
    {
        com.android.okhttp.ConnectionPool r0;
        java.lang.Throwable r1, $r3;
        int i0;
        java.util.LinkedList $r2;

        r0 := @this: com.android.okhttp.ConnectionPool;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        i0 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    java.util.List getConnections()
    {
        com.android.okhttp.ConnectionPool r0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable r2, $r5;
        java.util.LinkedList $r4;

        r0 := @this: com.android.okhttp.ConnectionPool;

        specialinvoke r0.<com.android.okhttp.ConnectionPool: void waitForCleanupCallableToRun()>();

        entermonitor r0;

     label1:
        $r3 = new java.util.ArrayList;

        $r4 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        r1 = $r3;

        exitmonitor r0;

     label2:
        return r1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getHttpConnectionCount()
    {
        com.android.okhttp.ConnectionPool r0;
        int i0;
        java.lang.Throwable r1, $r6;
        java.util.Iterator r2;
        boolean z0, $z1;
        java.util.LinkedList $r3;
        java.lang.Object $r4;
        com.android.okhttp.Connection $r5;

        r0 := @this: com.android.okhttp.ConnectionPool;

        entermonitor r0;

        i0 = 0;

     label1:
        $r3 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        r2 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.okhttp.Connection) $r4;

        z0 = virtualinvoke $r5.<com.android.okhttp.Connection: boolean isSpdy()>();

     label3:
        if z0 != 0 goto label2;

        i0 = i0 + 1;

        goto label2;

     label4:
        exitmonitor r0;

        return i0;

     label5:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public int getSpdyConnectionCount()
    {
        com.android.okhttp.ConnectionPool r0;
        int i0;
        java.lang.Throwable r1, $r6;
        java.util.Iterator r2;
        boolean z0, $z1;
        java.util.LinkedList $r3;
        java.lang.Object $r4;
        com.android.okhttp.Connection $r5;

        r0 := @this: com.android.okhttp.ConnectionPool;

        entermonitor r0;

        i0 = 0;

     label1:
        $r3 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        r2 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.okhttp.Connection) $r4;

        z0 = virtualinvoke $r5.<com.android.okhttp.Connection: boolean isSpdy()>();

     label3:
        if z0 == 0 goto label2;

        i0 = i0 + 1;

        goto label2;

     label4:
        exitmonitor r0;

        return i0;

     label5:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public void maybeShare(com.android.okhttp.Connection)
    {
        com.android.okhttp.ConnectionPool r0;
        com.android.okhttp.Connection r1;
        java.lang.Throwable r2, $r7;
        java.util.concurrent.Callable $r3;
        java.util.concurrent.ExecutorService $r4;
        boolean $z0, $z1;
        java.util.LinkedList $r6;

        r0 := @this: com.android.okhttp.ConnectionPool;

        r1 := @parameter0: com.android.okhttp.Connection;

        $r4 = r0.<com.android.okhttp.ConnectionPool: java.util.concurrent.ExecutorService executorService>;

        $r3 = r0.<com.android.okhttp.ConnectionPool: java.util.concurrent.Callable connectionsCleanupCallable>;

        interfaceinvoke $r4.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r3);

        $z0 = virtualinvoke r1.<com.android.okhttp.Connection: boolean isSpdy()>();

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        $z1 = virtualinvoke r1.<com.android.okhttp.Connection: boolean isAlive()>();

        if $z1 == 0 goto label1;

        entermonitor r0;

     label3:
        $r6 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        virtualinvoke $r6.<java.util.LinkedList: void addFirst(java.lang.Object)>(r1);

        exitmonitor r0;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

     label6:
        exitmonitor r0;

     label7:
        throw r2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void recycle(com.android.okhttp.Connection)
    {
        com.android.okhttp.ConnectionPool r0;
        com.android.okhttp.Connection r1;
        java.net.SocketException r2, $r10;
        java.lang.Throwable r3, $r16;
        boolean $z0, $z1;
        com.android.okhttp.internal.Platform $r4, $r11;
        java.net.Socket $r5;
        java.util.LinkedList $r6;
        java.util.concurrent.Callable $r7;
        java.util.concurrent.ExecutorService $r8;
        java.lang.StringBuilder $r12, $r13, $r15;
        java.lang.String $r14;

        r0 := @this: com.android.okhttp.ConnectionPool;

        r1 := @parameter0: com.android.okhttp.Connection;

        $z0 = virtualinvoke r1.<com.android.okhttp.Connection: boolean isSpdy()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r1.<com.android.okhttp.Connection: boolean isAlive()>();

        if $z1 != 0 goto label2;

        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>(r1);

        return;

     label2:
        $r4 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $r5 = virtualinvoke r1.<com.android.okhttp.Connection: java.net.Socket getSocket()>();

        virtualinvoke $r4.<com.android.okhttp.internal.Platform: void untagSocket(java.net.Socket)>($r5);

     label3:
        entermonitor r0;

     label4:
        $r6 = r0.<com.android.okhttp.ConnectionPool: java.util.LinkedList connections>;

        virtualinvoke $r6.<java.util.LinkedList: void addFirst(java.lang.Object)>(r1);

        virtualinvoke r1.<com.android.okhttp.Connection: void resetIdleStartTime()>();

        exitmonitor r0;

     label5:
        $r8 = r0.<com.android.okhttp.ConnectionPool: java.util.concurrent.ExecutorService executorService>;

        $r7 = r0.<com.android.okhttp.ConnectionPool: java.util.concurrent.Callable connectionsCleanupCallable>;

        interfaceinvoke $r8.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r7);

        return;

     label6:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to untagSocket(): ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<com.android.okhttp.internal.Platform: void logW(java.lang.String)>($r14);

        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>(r1);

        return;

     label7:
        $r16 := @caughtexception;

        r3 = $r16;

     label8:
        exitmonitor r0;

     label9:
        throw r3;

        catch java.net.SocketException from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }
}
