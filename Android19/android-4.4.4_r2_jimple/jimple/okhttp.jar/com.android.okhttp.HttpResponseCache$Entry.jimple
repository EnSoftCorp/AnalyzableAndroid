final class com.android.okhttp.HttpResponseCache$Entry extends java.lang.Object
{
    private final java.lang.String cipherSuite;
    private final java.security.cert.Certificate[] localCertificates;
    private final java.security.cert.Certificate[] peerCertificates;
    private final java.lang.String requestMethod;
    private final com.android.okhttp.internal.http.RawHeaders responseHeaders;
    private final java.lang.String uri;
    private final com.android.okhttp.internal.http.RawHeaders varyHeaders;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        java.io.InputStream r1;
        com.android.okhttp.internal.StrictLineReader r2, $r5;
        java.lang.Throwable r3, $r24;
        int i0, i1, i2, i3, $i4;
        java.lang.String r4, $r7, $r8, $r11, $r14, $r22, $r23, $r25;
        java.nio.charset.Charset $r6;
        com.android.okhttp.internal.http.RawHeaders $r9, $r10, $r12, $r21, $r26;
        boolean $z0;
        java.security.cert.Certificate[] $r13, $r16;
        java.io.IOException $r15;
        java.lang.StringBuilder $r17, $r18, $r19, $r20;

        r0 := @this: com.android.okhttp.HttpResponseCache$Entry;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label01:
        $r5 = new com.android.okhttp.internal.StrictLineReader;

        $r6 = <com.android.okhttp.internal.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r5.<com.android.okhttp.internal.StrictLineReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r1, $r6);

        r2 = $r5;

        $r7 = virtualinvoke r2.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String uri> = $r7;

        $r8 = virtualinvoke r2.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String requestMethod> = $r8;

        $r9 = new com.android.okhttp.internal.http.RawHeaders;

        specialinvoke $r9.<com.android.okhttp.internal.http.RawHeaders: void <init>()>();

        r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders varyHeaders> = $r9;

        i0 = virtualinvoke r2.<com.android.okhttp.internal.StrictLineReader: int readInt()>();

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r26 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders varyHeaders>;

        $r23 = virtualinvoke r2.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        virtualinvoke $r26.<com.android.okhttp.internal.http.RawHeaders: void addLine(java.lang.String)>($r23);

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        $r10 = new com.android.okhttp.internal.http.RawHeaders;

        specialinvoke $r10.<com.android.okhttp.internal.http.RawHeaders: void <init>()>();

        r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders responseHeaders> = $r10;

        $r12 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders responseHeaders>;

        $r11 = virtualinvoke r2.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        virtualinvoke $r12.<com.android.okhttp.internal.http.RawHeaders: void setStatusLine(java.lang.String)>($r11);

        i2 = virtualinvoke r2.<com.android.okhttp.internal.StrictLineReader: int readInt()>();

     label07:
        i3 = 0;

     label08:
        if i3 >= i2 goto label11;

     label09:
        $r21 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders responseHeaders>;

        $r25 = virtualinvoke r2.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        virtualinvoke $r21.<com.android.okhttp.internal.http.RawHeaders: void addLine(java.lang.String)>($r25);

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        $z0 = specialinvoke r0.<com.android.okhttp.HttpResponseCache$Entry: boolean isHttps()>();

        if $z0 == 0 goto label15;

        r4 = virtualinvoke r2.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        $i4 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i4 <= 0 goto label13;

        $r15 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \"\" but was \"");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label12:
        $r24 := @caughtexception;

        r3 = $r24;

        virtualinvoke r1.<java.io.InputStream: void close()>();

        throw r3;

     label13:
        $r14 = virtualinvoke r2.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String cipherSuite> = $r14;

        $r13 = specialinvoke r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] readCertArray(com.android.okhttp.internal.StrictLineReader)>(r2);

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] peerCertificates> = $r13;

        $r16 = specialinvoke r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] readCertArray(com.android.okhttp.internal.StrictLineReader)>(r2);

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] localCertificates> = $r16;

     label14:
        virtualinvoke r1.<java.io.InputStream: void close()>();

        return;

     label15:
        r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String cipherSuite> = null;

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] peerCertificates> = null;

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] localCertificates> = null;

     label16:
        goto label14;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label15 to label16 with label12;
    }

    public void <init>(java.net.URI, com.android.okhttp.internal.http.RawHeaders, java.net.HttpURLConnection) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        java.net.URI r1;
        com.android.okhttp.internal.http.RawHeaders r2, $r11;
        java.net.HttpURLConnection r3;
        javax.net.ssl.SSLSocket r4;
        java.security.cert.Certificate[] r6, r7, $r17;
        java.lang.String $r8, $r9, $r13;
        java.util.Map $r10;
        javax.net.ssl.SSLSession $r12, $r14, $r15;
        javax.net.ssl.SSLPeerUnverifiedException $r16;

        r0 := @this: com.android.okhttp.HttpResponseCache$Entry;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: com.android.okhttp.internal.http.RawHeaders;

        r3 := @parameter2: java.net.HttpURLConnection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r8 = virtualinvoke r1.<java.net.URI: java.lang.String toString()>();

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String uri> = $r8;

        r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders varyHeaders> = r2;

        $r9 = virtualinvoke r3.<java.net.HttpURLConnection: java.lang.String getRequestMethod()>();

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String requestMethod> = $r9;

        $r10 = virtualinvoke r3.<java.net.HttpURLConnection: java.util.Map getHeaderFields()>();

        $r11 = staticinvoke <com.android.okhttp.internal.http.RawHeaders: com.android.okhttp.internal.http.RawHeaders fromMultimap(java.util.Map,boolean)>($r10, 1);

        r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders responseHeaders> = $r11;

        r4 = specialinvoke r0.<com.android.okhttp.HttpResponseCache$Entry: javax.net.ssl.SSLSocket getSslSocket(java.net.HttpURLConnection)>(r3);

        if r4 == null goto label4;

        $r12 = virtualinvoke r4.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $r13 = interfaceinvoke $r12.<javax.net.ssl.SSLSession: java.lang.String getCipherSuite()>();

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String cipherSuite> = $r13;

     label1:
        $r14 = virtualinvoke r4.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        r7 = interfaceinvoke $r14.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

     label2:
        r6 = r7;

     label3:
        r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] peerCertificates> = r6;

        $r15 = virtualinvoke r4.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $r17 = interfaceinvoke $r15.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getLocalCertificates()>();

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] localCertificates> = $r17;

        return;

     label4:
        r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String cipherSuite> = null;

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] peerCertificates> = null;

        r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] localCertificates> = null;

        return;

     label5:
        $r16 := @caughtexception;

        r6 = null;

        goto label3;

        catch javax.net.ssl.SSLPeerUnverifiedException from label1 to label2 with label5;
    }

    static com.android.okhttp.internal.http.RawHeaders access$1100(com.android.okhttp.HttpResponseCache$Entry)
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        com.android.okhttp.internal.http.RawHeaders $r1;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache$Entry;

        $r1 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders responseHeaders>;

        return $r1;
    }

    static java.lang.String access$1200(com.android.okhttp.HttpResponseCache$Entry)
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache$Entry;

        $r1 = r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String cipherSuite>;

        return $r1;
    }

    static java.security.cert.Certificate[] access$1300(com.android.okhttp.HttpResponseCache$Entry)
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        java.security.cert.Certificate[] $r1;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache$Entry;

        $r1 = r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] peerCertificates>;

        return $r1;
    }

    static java.security.cert.Certificate[] access$1400(com.android.okhttp.HttpResponseCache$Entry)
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        java.security.cert.Certificate[] $r1;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache$Entry;

        $r1 = r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] localCertificates>;

        return $r1;
    }

    static boolean access$400(com.android.okhttp.HttpResponseCache$Entry)
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        boolean $z0;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache$Entry;

        $z0 = specialinvoke r0.<com.android.okhttp.HttpResponseCache$Entry: boolean isHttps()>();

        return $z0;
    }

    private javax.net.ssl.SSLSocket getSslSocket(java.net.HttpURLConnection)
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        java.net.HttpURLConnection r1;
        com.android.okhttp.internal.http.HttpEngine r2;
        boolean $z0, $z1;
        com.android.okhttp.internal.http.HttpURLConnectionImpl $r3;
        com.android.okhttp.internal.http.HttpsEngine $r4;
        javax.net.ssl.SSLSocket $r5;
        com.android.okhttp.internal.http.HttpsURLConnectionImpl $r6;

        r0 := @this: com.android.okhttp.HttpResponseCache$Entry;

        r1 := @parameter0: java.net.HttpURLConnection;

        $z0 = r1 instanceof com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        if $z0 == 0 goto label2;

        $r6 = (com.android.okhttp.internal.http.HttpsURLConnectionImpl) r1;

        r2 = virtualinvoke $r6.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpEngine getHttpEngine()>();

     label1:
        $z1 = r2 instanceof com.android.okhttp.internal.http.HttpsEngine;

        if $z1 == 0 goto label3;

        $r4 = (com.android.okhttp.internal.http.HttpsEngine) r2;

        $r5 = virtualinvoke $r4.<com.android.okhttp.internal.http.HttpsEngine: javax.net.ssl.SSLSocket getSslSocket()>();

        return $r5;

     label2:
        $r3 = (com.android.okhttp.internal.http.HttpURLConnectionImpl) r1;

        r2 = virtualinvoke $r3.<com.android.okhttp.internal.http.HttpURLConnectionImpl: com.android.okhttp.internal.http.HttpEngine getHttpEngine()>();

        goto label1;

     label3:
        return null;
    }

    private boolean isHttps()
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.android.okhttp.HttpResponseCache$Entry;

        $r1 = r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String uri>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("https://");

        return $z0;
    }

    private java.security.cert.Certificate[] readCertArray(com.android.okhttp.internal.StrictLineReader) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        com.android.okhttp.internal.StrictLineReader r1;
        int i0, i1, $i2;
        java.security.cert.CertificateException r2, $r10;
        java.security.cert.CertificateFactory r3;
        java.security.cert.Certificate[] r4;
        java.io.ByteArrayInputStream $r5;
        java.lang.String $r6, $r11;
        byte[] $r7, $r8;
        java.security.cert.Certificate $r9;
        java.io.IOException $r12;

        r0 := @this: com.android.okhttp.HttpResponseCache$Entry;

        r1 := @parameter0: com.android.okhttp.internal.StrictLineReader;

        i0 = virtualinvoke r1.<com.android.okhttp.internal.StrictLineReader: int readInt()>();

        if i0 != -1 goto label2;

        r4 = null;

     label1:
        return r4;

     label2:
        r3 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        r4 = newarray (java.security.cert.Certificate)[i0];

     label3:
        i1 = 0;

     label4:
        $i2 = lengthof r4;

        if i1 >= $i2 goto label1;

        $r5 = new java.io.ByteArrayInputStream;

        $r6 = virtualinvoke r1.<com.android.okhttp.internal.StrictLineReader: java.lang.String readLine()>();

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $r8 = staticinvoke <com.android.okhttp.internal.Base64: byte[] decode(byte[])>($r7);

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        $r9 = virtualinvoke r3.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r5);

        r4[i1] = $r9;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        $r10 := @caughtexception;

        r2 = $r10;

        $r12 = new java.io.IOException;

        $r11 = virtualinvoke r2.<java.security.cert.CertificateException: java.lang.String getMessage()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r12;

        catch java.security.cert.CertificateException from label2 to label3 with label6;
        catch java.security.cert.CertificateException from label4 to label5 with label6;
    }

    private void writeCertArray(java.io.Writer, java.security.cert.Certificate[]) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        java.io.Writer r1;
        java.security.cert.Certificate[] r2;
        java.security.cert.CertificateEncodingException r3, $r17;
        int i0, i1, $i2;
        java.lang.String r4, $r6, $r9, $r14, $r18;
        java.lang.StringBuilder $r5, $r7, $r8, $r12, $r13, $r15;
        java.security.cert.Certificate $r10;
        byte[] $r11;
        java.io.IOException $r16;

        r0 := @this: com.android.okhttp.HttpResponseCache$Entry;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.security.cert.Certificate[];

        if r2 != null goto label2;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("-1\n");

     label1:
        return;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $i2 = lengthof r2;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r9);

        i0 = lengthof r2;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label1;

     label5:
        $r10 = r2[i1];

        $r11 = virtualinvoke $r10.<java.security.cert.Certificate: byte[] getEncoded()>();

        r4 = staticinvoke <com.android.okhttp.internal.Base64: java.lang.String encode(byte[])>($r11);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r14);

     label6:
        i1 = i1 + 1;

        goto label4;

     label7:
        $r17 := @caughtexception;

        r3 = $r17;

        $r16 = new java.io.IOException;

        $r18 = virtualinvoke r3.<java.security.cert.CertificateEncodingException: java.lang.String getMessage()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r16;

        catch java.security.cert.CertificateEncodingException from label2 to label3 with label7;
        catch java.security.cert.CertificateEncodingException from label5 to label6 with label7;
    }

    public boolean matches(java.net.URI, java.lang.String, java.util.Map)
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        java.net.URI r1;
        java.lang.String r2, $r4, $r5, $r6;
        java.util.Map r3, $r10;
        boolean z0, z1, z2, z3;
        com.android.okhttp.internal.http.ResponseHeaders $r7;
        com.android.okhttp.internal.http.RawHeaders $r8, $r9;

        r0 := @this: com.android.okhttp.HttpResponseCache$Entry;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        $r4 = r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String uri>;

        $r5 = virtualinvoke r1.<java.net.URI: java.lang.String toString()>();

        z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        z1 = 0;

        if z0 == 0 goto label1;

        $r6 = r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String requestMethod>;

        z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        z1 = 0;

        if z2 == 0 goto label1;

        $r7 = new com.android.okhttp.internal.http.ResponseHeaders;

        $r8 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders responseHeaders>;

        specialinvoke $r7.<com.android.okhttp.internal.http.ResponseHeaders: void <init>(java.net.URI,com.android.okhttp.internal.http.RawHeaders)>(r1, $r8);

        $r9 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders varyHeaders>;

        $r10 = virtualinvoke $r9.<com.android.okhttp.internal.http.RawHeaders: java.util.Map toMultimap(boolean)>(0);

        z3 = virtualinvoke $r7.<com.android.okhttp.internal.http.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)>($r10, r3);

        z1 = 0;

        if z3 == 0 goto label1;

        z1 = 1;

     label1:
        return z1;
    }

    public void writeTo(com.android.okhttp.internal.DiskLruCache$Editor) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache$Entry r0;
        com.android.okhttp.internal.DiskLruCache$Editor r1;
        java.io.BufferedWriter r2, $r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.io.OutputStreamWriter $r4;
        java.io.OutputStream $r5;
        java.nio.charset.Charset $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12, $r14, $r15, $r16, $r19, $r22, $r25, $r26, $r28, $r30, $r32, $r33, $r37, $r38, $r39, $r41, $r45, $r46, $r49, $r50, $r55, $r57, $r58, $r60, $r61;
        java.lang.String $r8, $r11, $r13, $r17, $r20, $r21, $r27, $r31, $r34, $r35, $r40, $r44, $r47, $r51, $r53, $r56, $r59, $r63;
        com.android.okhttp.internal.http.RawHeaders $r18, $r23, $r24, $r29, $r36, $r48, $r52, $r54, $r62;
        boolean $z0;
        java.security.cert.Certificate[] $r42, $r43;

        r0 := @this: com.android.okhttp.HttpResponseCache$Entry;

        r1 := @parameter0: com.android.okhttp.internal.DiskLruCache$Editor;

        $r3 = new java.io.BufferedWriter;

        $r4 = new java.io.OutputStreamWriter;

        $r5 = virtualinvoke r1.<com.android.okhttp.internal.DiskLruCache$Editor: java.io.OutputStream newOutputStream(int)>(0);

        $r6 = <com.android.okhttp.internal.Util: java.nio.charset.Charset UTF_8>;

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r5, $r6);

        specialinvoke $r3.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r4);

        r2 = $r3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String uri>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String requestMethod>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r17);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders varyHeaders>;

        $i2 = virtualinvoke $r18.<com.android.okhttp.internal.http.RawHeaders: int length()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r21);

        i0 = 0;

     label1:
        $r23 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders varyHeaders>;

        $i3 = virtualinvoke $r23.<com.android.okhttp.internal.http.RawHeaders: int length()>();

        if i0 >= $i3 goto label2;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r54 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders varyHeaders>;

        $r53 = virtualinvoke $r54.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getFieldName(int)>(i0);

        $r60 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r62 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders varyHeaders>;

        $r63 = virtualinvoke $r62.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getValue(int)>(i0);

        $r57 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r59);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r24 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders responseHeaders>;

        $r27 = virtualinvoke $r24.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getStatusLine()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r31);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders responseHeaders>;

        $i4 = virtualinvoke $r29.<com.android.okhttp.internal.http.RawHeaders: int length()>();

        $r34 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r35);

        i1 = 0;

     label3:
        $r36 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders responseHeaders>;

        $i5 = virtualinvoke $r36.<com.android.okhttp.internal.http.RawHeaders: int length()>();

        if i1 >= $i5 goto label4;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r48 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders responseHeaders>;

        $r47 = virtualinvoke $r48.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getFieldName(int)>(i1);

        $r46 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r52 = r0.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.internal.http.RawHeaders responseHeaders>;

        $r51 = virtualinvoke $r52.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getValue(int)>(i1);

        $r50 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r56 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r56);

        i1 = i1 + 1;

        goto label3;

     label4:
        $z0 = specialinvoke r0.<com.android.okhttp.HttpResponseCache$Entry: boolean isHttps()>();

        if $z0 == 0 goto label5;

        virtualinvoke r2.<java.io.Writer: void write(int)>(10);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = r0.<com.android.okhttp.HttpResponseCache$Entry: java.lang.String cipherSuite>;

        $r37 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r44 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r44);

        $r43 = r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] peerCertificates>;

        specialinvoke r0.<com.android.okhttp.HttpResponseCache$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])>(r2, $r43);

        $r42 = r0.<com.android.okhttp.HttpResponseCache$Entry: java.security.cert.Certificate[] localCertificates>;

        specialinvoke r0.<com.android.okhttp.HttpResponseCache$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])>(r2, $r42);

     label5:
        virtualinvoke r2.<java.io.Writer: void close()>();

        return;
    }
}
