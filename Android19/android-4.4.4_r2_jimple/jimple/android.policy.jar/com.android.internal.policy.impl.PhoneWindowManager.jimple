public class com.android.internal.policy.impl.PhoneWindowManager extends java.lang.Object implements android.view.WindowManagerPolicy
{
    static final int APPLICATION_MEDIA_OVERLAY_SUBLAYER;
    static final int APPLICATION_MEDIA_SUBLAYER;
    static final int APPLICATION_PANEL_SUBLAYER;
    static final int APPLICATION_SUB_PANEL_SUBLAYER;
    private static final int BRIGHTNESS_STEPS;
    static final boolean DEBUG;
    static final boolean DEBUG_INPUT;
    static final boolean DEBUG_LAYOUT;
    static final boolean DEBUG_STARTING_WINDOW;
    private static final int DISMISS_KEYGUARD_CONTINUE;
    private static final int DISMISS_KEYGUARD_NONE;
    private static final int DISMISS_KEYGUARD_START;
    static final int DOUBLE_TAP_HOME_NOTHING;
    static final int DOUBLE_TAP_HOME_RECENT_SYSTEM_UI;
    static final boolean ENABLE_CAR_DOCK_HOME_CAPTURE;
    static final boolean ENABLE_DESK_DOCK_HOME_CAPTURE;
    private static final float KEYGUARD_SCREENSHOT_CHORD_DELAY_MULTIPLIER;
    static final int LONG_PRESS_HOME_ASSIST;
    static final int LONG_PRESS_HOME_NOTHING;
    static final int LONG_PRESS_HOME_RECENT_SYSTEM_UI;
    static final int LONG_PRESS_POWER_GLOBAL_ACTIONS;
    static final int LONG_PRESS_POWER_NOTHING;
    static final int LONG_PRESS_POWER_SHUT_OFF;
    static final int LONG_PRESS_POWER_SHUT_OFF_NO_CONFIRM;
    private static final int MSG_DISABLE_POINTER_LOCATION;
    private static final int MSG_DISPATCH_MEDIA_KEY_REPEAT_WITH_WAKE_LOCK;
    private static final int MSG_DISPATCH_MEDIA_KEY_WITH_WAKE_LOCK;
    private static final int MSG_ENABLE_POINTER_LOCATION;
    static final boolean PRINT_ANIM;
    static final int RECENT_APPS_BEHAVIOR_DISMISS;
    static final int RECENT_APPS_BEHAVIOR_DISMISS_AND_SWITCH;
    static final int RECENT_APPS_BEHAVIOR_EXIT_TOUCH_MODE_AND_SHOW;
    static final int RECENT_APPS_BEHAVIOR_SHOW_OR_DISMISS;
    private static final long SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS;
    static final boolean SHOW_PROCESSES_ON_ALT_MENU;
    static final boolean SHOW_STARTING_ANIMATIONS;
    public static final java.lang.String SYSTEM_DIALOG_REASON_ASSIST;
    public static final java.lang.String SYSTEM_DIALOG_REASON_GLOBAL_ACTIONS;
    public static final java.lang.String SYSTEM_DIALOG_REASON_HOME_KEY;
    public static final java.lang.String SYSTEM_DIALOG_REASON_KEY;
    public static final java.lang.String SYSTEM_DIALOG_REASON_RECENT_APPS;
    static final int SYSTEM_UI_CHANGING_LAYOUT;
    static final java.lang.String TAG;
    private static final int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK;
    static final boolean localLOGV;
    static final android.graphics.Rect mTmpContentFrame;
    static final android.graphics.Rect mTmpDecorFrame;
    static final android.graphics.Rect mTmpDisplayFrame;
    static final android.graphics.Rect mTmpNavigationFrame;
    static final android.graphics.Rect mTmpOverscanFrame;
    static final android.graphics.Rect mTmpParentFrame;
    static final android.graphics.Rect mTmpVisibleFrame;
    static android.util.SparseArray sApplicationLaunchKeyCategories;
    boolean mAccelerometerDefault;
    int mAllowAllRotations;
    boolean mAllowLockscreenWhenOn;
    java.util.HashSet mAppsToBeHidden;
    boolean mAssistKeyLongPressed;
    android.app.ProgressDialog mBootMsgDialog;
    android.os.PowerManager$WakeLock mBroadcastWakeLock;
    boolean mCanHideNavigationBar;
    boolean mCarDockEnablesAccelerometer;
    android.content.Intent mCarDockIntent;
    int mCarDockRotation;
    private final java.lang.Runnable mClearHideNavigationFlag;
    boolean mConsumeSearchKeyUp;
    int mContentBottom;
    int mContentLeft;
    int mContentRight;
    int mContentTop;
    android.content.Context mContext;
    int mCurBottom;
    int mCurLeft;
    int mCurRight;
    int mCurTop;
    int mCurrentAppOrientation;
    private int mCurrentUserId;
    int mDemoHdmiRotation;
    boolean mDemoHdmiRotationLock;
    boolean mDeskDockEnablesAccelerometer;
    android.content.Intent mDeskDockIntent;
    int mDeskDockRotation;
    int mDismissKeyguard;
    android.view.Display mDisplay;
    int mDockBottom;
    int mDockLayer;
    int mDockLeft;
    int mDockMode;
    android.content.BroadcastReceiver mDockReceiver;
    int mDockRight;
    int mDockTop;
    private int mDoubleTapOnHomeBehavior;
    android.content.BroadcastReceiver mDreamReceiver;
    boolean mDreamingLockscreen;
    boolean mEnableShiftMenuBugReports;
    int mEndcallBehavior;
    private final android.util.SparseArray mFallbackActions;
    android.view.IApplicationToken mFocusedApp;
    android.view.WindowManagerPolicy$WindowState mFocusedWindow;
    int mForceClearedSystemUiFlags;
    private boolean mForceDefaultOrientation;
    boolean mForceStatusBar;
    boolean mForceStatusBarFromKeyguard;
    boolean mForcingShowNavBar;
    int mForcingShowNavBarLayer;
    com.android.internal.policy.impl.GlobalActions mGlobalActions;
    private com.android.internal.policy.impl.GlobalKeyManager mGlobalKeyManager;
    private android.os.UEventObserver mHDMIObserver;
    android.os.Handler mHandler;
    boolean mHasNavigationBar;
    boolean mHasSoftInput;
    boolean mHaveBuiltInKeyboard;
    boolean mHavePendingMediaKeyRepeatWithWakeLock;
    boolean mHdmiPlugged;
    boolean mHeadless;
    boolean mHideLockScreen;
    android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow;
    final android.view.InputEventReceiver$Factory mHideNavInputEventReceiverFactory;
    boolean mHomeConsumed;
    boolean mHomeDoubleTapPending;
    private final java.lang.Runnable mHomeDoubleTapTimeoutRunnable;
    android.content.Intent mHomeIntent;
    boolean mHomePressed;
    private com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation;
    int mIncallPowerBehavior;
    long[] mKeyboardTapVibePattern;
    android.view.WindowManagerPolicy$WindowState mKeyguard;
    com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate;
    private android.view.WindowManagerPolicy$WindowState mKeyguardScrim;
    int mLandscapeRotation;
    boolean mLanguageSwitchKeyPressed;
    boolean mLastFocusNeedsMenu;
    android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow;
    android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow;
    int mLastSystemUiFlags;
    boolean mLidControlsSleep;
    int mLidKeyboardAccessibility;
    int mLidNavigationAccessibility;
    int mLidOpenRotation;
    int mLidState;
    private final java.lang.Object mLock;
    int mLockScreenTimeout;
    boolean mLockScreenTimerActive;
    private int mLongPressOnHomeBehavior;
    int mLongPressOnPowerBehavior;
    long[] mLongPressVibePattern;
    android.content.BroadcastReceiver mMultiuserReceiver;
    android.view.WindowManagerPolicy$WindowState mNavigationBar;
    boolean mNavigationBarCanMove;
    private final com.android.internal.policy.impl.BarController mNavigationBarController;
    int[] mNavigationBarHeightForRotation;
    boolean mNavigationBarOnBottom;
    int[] mNavigationBarWidthForRotation;
    com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener;
    boolean mOrientationSensorEnabled;
    int mOverscanBottom;
    int mOverscanLeft;
    int mOverscanRight;
    int mOverscanScreenHeight;
    int mOverscanScreenLeft;
    int mOverscanScreenTop;
    int mOverscanScreenWidth;
    int mOverscanTop;
    boolean mPendingPowerKeyUpCanceled;
    int mPointerLocationMode;
    com.android.internal.policy.impl.PhoneWindowManager$PointerLocationPointerEventListener mPointerLocationPointerEventListener;
    com.android.internal.widget.PointerLocationView mPointerLocationView;
    int mPortraitRotation;
    volatile boolean mPowerKeyHandled;
    private long mPowerKeyTime;
    private boolean mPowerKeyTriggered;
    private final java.lang.Runnable mPowerLongPress;
    android.os.PowerManager mPowerManager;
    boolean mPreloadedRecentApps;
    com.android.internal.policy.impl.RecentApplicationsDialog mRecentAppsDialog;
    int mRecentAppsDialogHeldModifiers;
    int mResettingSystemUiFlags;
    int mRestrictedOverscanScreenHeight;
    int mRestrictedOverscanScreenLeft;
    int mRestrictedOverscanScreenTop;
    int mRestrictedOverscanScreenWidth;
    int mRestrictedScreenHeight;
    int mRestrictedScreenLeft;
    int mRestrictedScreenTop;
    int mRestrictedScreenWidth;
    boolean mSafeMode;
    long[] mSafeModeDisabledVibePattern;
    long[] mSafeModeEnabledVibePattern;
    com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout;
    boolean mScreenOnEarly;
    boolean mScreenOnFully;
    private boolean mScreenshotChordEnabled;
    android.content.ServiceConnection mScreenshotConnection;
    final java.lang.Object mScreenshotLock;
    private final java.lang.Runnable mScreenshotRunnable;
    final java.lang.Runnable mScreenshotTimeout;
    boolean mSearchKeyShortcutPending;
    android.app.SearchManager mSearchManager;
    int mSeascapeRotation;
    final java.lang.Object mServiceAquireLock;
    com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver mSettingsObserver;
    com.android.internal.policy.impl.ShortcutManager mShortcutManager;
    boolean mShowingDream;
    boolean mShowingLockscreen;
    int mStableBottom;
    int mStableFullscreenBottom;
    int mStableFullscreenLeft;
    int mStableFullscreenRight;
    int mStableFullscreenTop;
    int mStableLeft;
    int mStableRight;
    int mStableTop;
    android.view.WindowManagerPolicy$WindowState mStatusBar;
    private final com.android.internal.policy.impl.BarController mStatusBarController;
    int mStatusBarHeight;
    int mStatusBarLayer;
    com.android.internal.statusbar.IStatusBarService mStatusBarService;
    boolean mSystemBooted;
    int mSystemBottom;
    private com.android.internal.policy.impl.SystemGesturesPointerEventListener mSystemGestures;
    int mSystemLeft;
    boolean mSystemReady;
    int mSystemRight;
    int mSystemTop;
    android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState;
    boolean mTopIsFullscreen;
    boolean mTouchExplorationEnabled;
    boolean mTranslucentDecorEnabled;
    int mUiMode;
    int mUndockedHdmiRotation;
    int mUnrestrictedScreenHeight;
    int mUnrestrictedScreenLeft;
    int mUnrestrictedScreenTop;
    int mUnrestrictedScreenWidth;
    int mUpsideDownRotation;
    int mUserRotation;
    int mUserRotationMode;
    android.os.Vibrator mVibrator;
    long[] mVirtualKeyVibePattern;
    private boolean mVolumeDownKeyConsumedByScreenshotChord;
    private long mVolumeDownKeyTime;
    private boolean mVolumeDownKeyTriggered;
    private boolean mVolumeUpKeyTriggered;
    private android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard;
    android.view.IWindowManager mWindowManager;
    android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs;

    static void <clinit>()
    {
        android.util.SparseArray $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        android.graphics.Rect $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int[] $r14;

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String TAG> = "WindowManager";

        <com.android.internal.policy.impl.PhoneWindowManager: int SYSTEM_UI_CHANGING_LAYOUT> = -1073741818;

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_RECENT_APPS> = "recentapps";

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_KEY> = "reason";

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_HOME_KEY> = "homekey";

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_GLOBAL_ACTIONS> = "globalactions";

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_ASSIST> = "assist";

        <com.android.internal.policy.impl.PhoneWindowManager: boolean SHOW_STARTING_ANIMATIONS> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean SHOW_PROCESSES_ON_ALT_MENU> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: long SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS> = 150L;

        <com.android.internal.policy.impl.PhoneWindowManager: int RECENT_APPS_BEHAVIOR_SHOW_OR_DISMISS> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int RECENT_APPS_BEHAVIOR_EXIT_TOUCH_MODE_AND_SHOW> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int RECENT_APPS_BEHAVIOR_DISMISS_AND_SWITCH> = 3;

        <com.android.internal.policy.impl.PhoneWindowManager: int RECENT_APPS_BEHAVIOR_DISMISS> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean PRINT_ANIM> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_ENABLE_POINTER_LOCATION> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_DISPATCH_MEDIA_KEY_WITH_WAKE_LOCK> = 3;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_DISPATCH_MEDIA_KEY_REPEAT_WITH_WAKE_LOCK> = 4;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_DISABLE_POINTER_LOCATION> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_POWER_SHUT_OFF_NO_CONFIRM> = 3;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_POWER_SHUT_OFF> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_POWER_NOTHING> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_POWER_GLOBAL_ACTIONS> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_HOME_RECENT_SYSTEM_UI> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_HOME_NOTHING> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_HOME_ASSIST> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: float KEYGUARD_SCREENSHOT_CHORD_DELAY_MULTIPLIER> = 2.5F;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean ENABLE_DESK_DOCK_HOME_CAPTURE> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean ENABLE_CAR_DOCK_HOME_CAPTURE> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int DOUBLE_TAP_HOME_RECENT_SYSTEM_UI> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int DOUBLE_TAP_HOME_NOTHING> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int DISMISS_KEYGUARD_START> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int DISMISS_KEYGUARD_NONE> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int DISMISS_KEYGUARD_CONTINUE> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean DEBUG_STARTING_WINDOW> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean DEBUG_LAYOUT> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean DEBUG_INPUT> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean DEBUG> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int BRIGHTNESS_STEPS> = 10;

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_SUB_PANEL_SUBLAYER> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_PANEL_SUBLAYER> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_MEDIA_SUBLAYER> = -2;

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_MEDIA_OVERLAY_SUBLAYER> = -1;

        $r0 = new android.util.SparseArray;

        specialinvoke $r0.<android.util.SparseArray: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories> = $r0;

        $r1 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r1.<android.util.SparseArray: void append(int,java.lang.Object)>(64, "android.intent.category.APP_BROWSER");

        $r2 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r2.<android.util.SparseArray: void append(int,java.lang.Object)>(65, "android.intent.category.APP_EMAIL");

        $r3 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r3.<android.util.SparseArray: void append(int,java.lang.Object)>(207, "android.intent.category.APP_CONTACTS");

        $r4 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r4.<android.util.SparseArray: void append(int,java.lang.Object)>(208, "android.intent.category.APP_CALENDAR");

        $r5 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r5.<android.util.SparseArray: void append(int,java.lang.Object)>(209, "android.intent.category.APP_MUSIC");

        $r6 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r6.<android.util.SparseArray: void append(int,java.lang.Object)>(210, "android.intent.category.APP_CALCULATOR");

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpParentFrame> = $r7;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDisplayFrame> = $r8;

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpOverscanFrame> = $r9;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpContentFrame> = $r10;

        $r11 = new android.graphics.Rect;

        specialinvoke $r11.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpVisibleFrame> = $r11;

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDecorFrame> = $r12;

        $r13 = new android.graphics.Rect;

        specialinvoke $r13.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame> = $r13;

        $r14 = newarray (int)[2];

        $r14[0] = 2003;

        $r14[1] = 2010;

        <com.android.internal.policy.impl.PhoneWindowManager: int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK> = $r14;

        return;
    }

    public void <init>()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int[] $r3, $r4;
        java.lang.Object r21, r22, r33;
        java.util.HashSet r23;
        android.util.SparseArray r24;
        com.android.internal.policy.impl.PhoneWindowManager$1 r25;
        com.android.internal.policy.impl.BarController r26, r27;
        com.android.internal.policy.impl.PhoneWindowManager$2 r28;
        com.android.internal.policy.impl.PhoneWindowManager$3 r29;
        com.android.internal.policy.impl.PhoneWindowManager$4 r30;
        com.android.internal.policy.impl.PhoneWindowManager$8 r31;
        com.android.internal.policy.impl.PhoneWindowManager$9 r32;
        com.android.internal.policy.impl.PhoneWindowManager$12 r34;
        com.android.internal.policy.impl.PhoneWindowManager$14 r35;
        com.android.internal.policy.impl.PhoneWindowManager$15 r36;
        com.android.internal.policy.impl.PhoneWindowManager$16 r37;
        com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout r38;
        android.view.InputEventReceiver$Factory r39;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r21 = new java.lang.Object;

        specialinvoke r21.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock> = r21;

        r22 = new java.lang.Object;

        specialinvoke r22.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mServiceAquireLock> = r22;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mEnableShiftMenuBugReports> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar> = null;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar> = null;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCanHideNavigationBar> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarCanMove> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarOnBottom> = 1;

        $r3 = newarray (int)[4];

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation> = $r3;

        $r4 = newarray (int)[4];

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation> = $r4;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard> = null;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow> = null;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow> = null;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState> = -1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceDefaultOrientation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAllowAllRotations> = -1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnPowerBehavior> = -1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation> = -1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTouchExplorationEnabled> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTranslucentDecorEnabled> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPointerLocationMode> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForceClearedSystemUiFlags> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLastFocusNeedsMenu> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow> = null;

        r23 = new java.util.HashSet;

        specialinvoke r23.<java.util.HashSet: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden> = r23;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom> = 0;

        r24 = new android.util.SparseArray;

        specialinvoke r24.<android.util.SparseArray: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray mFallbackActions> = r24;

        r25 = new com.android.internal.policy.impl.PhoneWindowManager$1;

        specialinvoke r25.<com.android.internal.policy.impl.PhoneWindowManager$1: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.UEventObserver mHDMIObserver> = r25;

        r26 = new com.android.internal.policy.impl.BarController;

        specialinvoke r26.<com.android.internal.policy.impl.BarController: void <init>(java.lang.String,int,int,int,int,int)>("StatusBar", 67108864, 268435456, 1073741824, 1, 67108864);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController> = r26;

        r27 = new com.android.internal.policy.impl.BarController;

        specialinvoke r27.<com.android.internal.policy.impl.BarController: void <init>(java.lang.String,int,int,int,int,int)>("NavigationBar", 134217728, 536870912, -2147483648, 2, 134217728);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController> = r27;

        r28 = new com.android.internal.policy.impl.PhoneWindowManager$2;

        specialinvoke r28.<com.android.internal.policy.impl.PhoneWindowManager$2: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mPowerLongPress> = r28;

        r29 = new com.android.internal.policy.impl.PhoneWindowManager$3;

        specialinvoke r29.<com.android.internal.policy.impl.PhoneWindowManager$3: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotRunnable> = r29;

        r30 = new com.android.internal.policy.impl.PhoneWindowManager$4;

        specialinvoke r30.<com.android.internal.policy.impl.PhoneWindowManager$4: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mHomeDoubleTapTimeoutRunnable> = r30;

        r31 = new com.android.internal.policy.impl.PhoneWindowManager$8;

        specialinvoke r31.<com.android.internal.policy.impl.PhoneWindowManager$8: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mClearHideNavigationFlag> = r31;

        r32 = new com.android.internal.policy.impl.PhoneWindowManager$9;

        specialinvoke r32.<com.android.internal.policy.impl.PhoneWindowManager$9: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r39 = (android.view.InputEventReceiver$Factory) r32;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.InputEventReceiver$Factory mHideNavInputEventReceiverFactory> = r39;

        r33 = new java.lang.Object;

        specialinvoke r33.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mScreenshotLock> = r33;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.ServiceConnection mScreenshotConnection> = null;

        r34 = new com.android.internal.policy.impl.PhoneWindowManager$12;

        specialinvoke r34.<com.android.internal.policy.impl.PhoneWindowManager$12: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotTimeout> = r34;

        r35 = new com.android.internal.policy.impl.PhoneWindowManager$14;

        specialinvoke r35.<com.android.internal.policy.impl.PhoneWindowManager$14: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mDockReceiver> = r35;

        r36 = new com.android.internal.policy.impl.PhoneWindowManager$15;

        specialinvoke r36.<com.android.internal.policy.impl.PhoneWindowManager$15: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mDreamReceiver> = r36;

        r37 = new com.android.internal.policy.impl.PhoneWindowManager$16;

        specialinvoke r37.<com.android.internal.policy.impl.PhoneWindowManager$16: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mMultiuserReceiver> = r37;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.ProgressDialog mBootMsgDialog> = null;

        r38 = new com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout;

        specialinvoke r38.<com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout> = r38;

        return;
    }

    static void access$000(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void enablePointerLocation()>();

        return;
    }

    static void access$100(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void disablePointerLocation()>();

        return;
    }

    static void access$1000(com.android.internal.policy.impl.PhoneWindowManager, android.os.IBinder, android.view.WindowManagerPolicy$ScreenOnListener)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.IBinder r1;
        android.view.WindowManagerPolicy$ScreenOnListener r2;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: android.view.WindowManagerPolicy$ScreenOnListener;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void waitForKeyguardWindowDrawn(android.os.IBinder,android.view.WindowManagerPolicy$ScreenOnListener)>(r1, r2);

        return;
    }

    static void access$1100(com.android.internal.policy.impl.PhoneWindowManager, android.view.WindowManagerPolicy$ScreenOnListener)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$ScreenOnListener r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter1: android.view.WindowManagerPolicy$ScreenOnListener;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void finishScreenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)>(r1);

        return;
    }

    static void access$200(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void performAuditoryFeedbackForAccessibilityIfNeed()>();

        return;
    }

    static void access$300(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void takeScreenshot()>();

        return;
    }

    static void access$500(com.android.internal.policy.impl.PhoneWindowManager, android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter1: android.view.WindowManagerPolicy$WindowState;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void requestTransientBars(android.view.WindowManagerPolicy$WindowState)>(r1);

        return;
    }

    static java.lang.Runnable access$700(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mClearHideNavigationFlag>;

        return $r1;
    }

    static java.lang.Object access$800(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        return $r1;
    }

    static int access$900(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()>();

        return $i0;
    }

    private void applyLidSwitchState()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0;
        boolean $z0;
        android.os.PowerManager $r1;
        long $l1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        if $i0 != 0 goto label1;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidControlsSleep>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r1.<android.os.PowerManager: void goToSleep(long)>($l1);

     label1:
        return;
    }

    private void applyStableConstraints(int, int, android.graphics.Rect)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        android.graphics.Rect r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        $i2 = i0 & 256;

        if $i2 == 0 goto label4;

        $i3 = i1 & 1024;

        if $i3 == 0 goto label5;

        $i16 = r1.<android.graphics.Rect: int left>;

        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenLeft>;

        if $i16 >= $i17 goto label1;

        $i26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenLeft>;

        r1.<android.graphics.Rect: int left> = $i26;

     label1:
        $i18 = r1.<android.graphics.Rect: int top>;

        $i19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenTop>;

        if $i18 >= $i19 goto label2;

        $i27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenTop>;

        r1.<android.graphics.Rect: int top> = $i27;

     label2:
        $i20 = r1.<android.graphics.Rect: int right>;

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight>;

        if $i20 <= $i21 goto label3;

        $i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight>;

        r1.<android.graphics.Rect: int right> = $i24;

     label3:
        $i22 = r1.<android.graphics.Rect: int bottom>;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom>;

        if $i22 <= $i23 goto label4;

        $i25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom>;

        r1.<android.graphics.Rect: int bottom> = $i25;

     label4:
        return;

     label5:
        $i5 = r1.<android.graphics.Rect: int left>;

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        if $i5 >= $i4 goto label6;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        r1.<android.graphics.Rect: int left> = $i14;

     label6:
        $i7 = r1.<android.graphics.Rect: int top>;

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        if $i7 >= $i6 goto label7;

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        r1.<android.graphics.Rect: int top> = $i15;

     label7:
        $i9 = r1.<android.graphics.Rect: int right>;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        if $i9 <= $i8 goto label8;

        $i13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        r1.<android.graphics.Rect: int right> = $i13;

     label8:
        $i11 = r1.<android.graphics.Rect: int bottom>;

        $i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        if $i11 <= $i10 goto label4;

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        r1.<android.graphics.Rect: int bottom> = $i12;

        return;
    }

    private boolean areTranslucentBarsAllowed()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTranslucentDecorEnabled>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTouchExplorationEnabled>;

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static void awakenDreams()
    {
        android.service.dreams.IDreamManager r0;
        android.os.RemoteException $r2;

        r0 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: android.service.dreams.IDreamManager getDreamManager()>();

        if r0 == null goto label2;

     label1:
        interfaceinvoke r0.<android.service.dreams.IDreamManager: void awaken()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean canHideNavigationBar()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTouchExplorationEnabled>;

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void cancelPendingPowerKeyAction()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1;
        java.lang.Runnable $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyHandled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mPowerLongPress>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

     label1:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered>;

        if $z1 == 0 goto label2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPendingPowerKeyUpCanceled> = 1;

     label2:
        return;
    }

    private void cancelPendingScreenshotChordAction()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Runnable $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotRunnable>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        return;
    }

    private void cancelPreloadRecentApps()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.RemoteException r1, $r3;
        com.android.internal.statusbar.IStatusBarService r2;
        boolean $z0;
        java.lang.Throwable r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPreloadedRecentApps>;

        if $z0 == 0 goto label4;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPreloadedRecentApps> = 0;

     label1:
        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()>();

     label2:
        if r2 == null goto label4;

     label3:
        interfaceinvoke r2.<com.android.internal.statusbar.IStatusBarService: void cancelPreloadRecentApps()>();

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        r1 = $r3;

        r4 = (java.lang.Throwable) r1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "RemoteException when showing recent apps", r4);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService> = null;

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private void clearClearableFlagsLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        i0 = 7 | $i1;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        if i0 == $i2 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags> = i0;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowManagerFuncs: void reevaluateStatusBarVisibility()>();

     label1:
        return;
    }

    private void disablePointerLocation()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.PhoneWindowManager$PointerLocationPointerEventListener $r1, $r7;
        com.android.internal.widget.PointerLocationView $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.view.WindowManager $r6;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r8;
        android.view.WindowManagerPolicy$PointerEventListener r9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$PointerLocationPointerEventListener mPointerLocationPointerEventListener>;

        if $r1 == null goto label1;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$PointerLocationPointerEventListener mPointerLocationPointerEventListener>;

        r9 = (android.view.WindowManagerPolicy$PointerEventListener) $r7;

        interfaceinvoke $r8.<android.view.WindowManagerPolicy$WindowManagerFuncs: void unregisterPointerEventListener(android.view.WindowManagerPolicy$PointerEventListener)>(r9);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$PointerLocationPointerEventListener mPointerLocationPointerEventListener> = null;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r6 = (android.view.WindowManager) $r4;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        interfaceinvoke $r6.<android.view.WindowManager: void removeView(android.view.View)>($r5);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView> = null;

     label2:
        return;
    }

    private void enablePointerLocation()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1, r15;
        android.view.WindowManager r2;
        com.android.internal.widget.PointerLocationView $r3, $r6, $r10, r14;
        android.content.Context $r5, $r8;
        boolean $z0;
        java.lang.Object $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.internal.policy.impl.PhoneWindowManager$PointerLocationPointerEventListener $r12, r16;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r13;
        android.view.WindowManagerPolicy$PointerEventListener r17;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        if $r3 != null goto label2;

        r14 = new com.android.internal.widget.PointerLocationView;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke r14.<com.android.internal.widget.PointerLocationView: void <init>(android.content.Context)>($r5);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView> = r14;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        virtualinvoke $r6.<com.android.internal.widget.PointerLocationView: void setPrintCoords(boolean)>(0);

        r15 = new android.view.WindowManager$LayoutParams;

        specialinvoke r15.<android.view.WindowManager$LayoutParams: void <init>(int,int)>(-1, -1);

        r1 = r15;

        r1.<android.view.WindowManager$LayoutParams: int type> = 2015;

        r1.<android.view.WindowManager$LayoutParams: int flags> = 1304;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isHighEndGfx()>();

        if $z0 == 0 goto label1;

        $i2 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i4 = 16777216 | $i2;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i4;

        $i3 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i5 = 2 | $i3;

        r1.<android.view.WindowManager$LayoutParams: int privateFlags> = $i5;

     label1:
        r1.<android.view.WindowManager$LayoutParams: int format> = -3;

        virtualinvoke r1.<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>("PointerLocation");

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r2 = (android.view.WindowManager) $r9;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int inputFeatures>;

        $i1 = 2 | $i0;

        r1.<android.view.WindowManager$LayoutParams: int inputFeatures> = $i1;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        interfaceinvoke r2.<android.view.WindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r10, r1);

        r16 = new com.android.internal.policy.impl.PhoneWindowManager$PointerLocationPointerEventListener;

        specialinvoke r16.<com.android.internal.policy.impl.PhoneWindowManager$PointerLocationPointerEventListener: void <init>(com.android.internal.policy.impl.PhoneWindowManager,com.android.internal.policy.impl.PhoneWindowManager$1)>(r0, null);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$PointerLocationPointerEventListener mPointerLocationPointerEventListener> = r16;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$PointerLocationPointerEventListener mPointerLocationPointerEventListener>;

        r17 = (android.view.WindowManagerPolicy$PointerEventListener) $r12;

        interfaceinvoke $r13.<android.view.WindowManagerPolicy$WindowManagerFuncs: void registerPointerEventListener(android.view.WindowManagerPolicy$PointerEventListener)>(r17);

     label2:
        return;
    }

    private void finishScreenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$ScreenOnListener r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r6;
        android.view.IWindowManager $r5;
        android.os.RemoteException $r7;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$ScreenOnListener;

        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully> = 1;

        exitmonitor r2;

     label2:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r5.<android.view.IWindowManager: void setEventDispatching(boolean)>(1);

     label3:
        if r1 == null goto label4;

        interfaceinvoke r1.<android.view.WindowManagerPolicy$ScreenOnListener: void onScreenOn()>();

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $r7 := @caughtexception;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch android.os.RemoteException from label2 to label3 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    static android.media.IAudioService getAudioService()
    {
        android.media.IAudioService r0;
        android.os.IBinder $r1;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("audio");

        r0 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r1);

        if r0 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "Unable to find IAudioService interface.");

     label1:
        return r0;
    }

    static android.service.dreams.IDreamManager getDreamManager()
    {
        android.os.IBinder $r0;
        android.service.dreams.IDreamManager $r1;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("dreams");

        $r1 = staticinvoke <android.service.dreams.IDreamManager$Stub: android.service.dreams.IDreamManager asInterface(android.os.IBinder)>($r0);

        return $r1;
    }

    static long[] getLongIntArray(android.content.res.Resources, int)
    {
        android.content.res.Resources r0;
        int i0, i1, $i2, $i3, $i4;
        int[] r1;
        long[] r2;
        long $l5;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<android.content.res.Resources: int[] getIntArray(int)>(i0);

        if r1 != null goto label2;

        r2 = null;

     label1:
        return r2;

     label2:
        $i2 = lengthof r1;

        r2 = newarray (long)[$i2];

        i1 = 0;

     label3:
        $i3 = lengthof r1;

        if i1 >= $i3 goto label1;

        $i4 = r1[i1];

        $l5 = (long) $i4;

        r2[i1] = $l5;

        i1 = i1 + 1;

        goto label3;
    }

    private long getScreenshotChordLongPressDelay()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1;
        boolean $z0;
        long $l0, $l1, $l2;
        float $f0, $f1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if $z0 == 0 goto label1;

        $l1 = staticinvoke <android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>();

        $f0 = (float) $l1;

        $f1 = 2.5F * $f0;

        $l2 = (long) $f1;

        return $l2;

     label1:
        $l0 = staticinvoke <android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>();

        return $l0;
    }

    private android.app.SearchManager getSearchManager()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.app.SearchManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.SearchManager mSearchManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("search");

        $r5 = (android.app.SearchManager) $r4;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.SearchManager mSearchManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.SearchManager mSearchManager>;

        return $r2;
    }

    static com.android.internal.telephony.ITelephony getTelephonyService()
    {
        android.os.IBinder $r0;
        com.android.internal.telephony.ITelephony $r1;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("phone");

        $r1 = staticinvoke <com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>($r0);

        return $r1;
    }

    private void handleDoubleTapOnHome()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        if $i0 != 1 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeConsumed> = 1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void toggleRecentApps()>();

     label1:
        return;
    }

    private void handleLongPressOnHome()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i0 == 0 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeConsumed> = 1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>(null, 0, 0);

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i1 != 1 goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void toggleRecentApps()>();

     label1:
        return;

     label2:
        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i2 != 2 goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistAction()>();

        return;
    }

    private boolean interceptFallback(android.view.WindowManagerPolicy$WindowState, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        android.view.KeyEvent r2;
        int i0, $i1, $i2;
        long $l3;
        byte $b4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)>(r2, i0, 1);

        $i2 = 1 & $i1;

        if $i2 == 0 goto label1;

        $l3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)>(r1, r2, i0);

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void interceptPowerKeyDown(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        android.os.Handler $r1;
        java.lang.Runnable $r2;
        long $l0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyHandled> = z0;

        if z0 != 0 goto label1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mPowerLongPress>;

        $l0 = staticinvoke <android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>();

        virtualinvoke $r1.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r2, $l0);

     label1:
        return;
    }

    private boolean interceptPowerKeyUp(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, z1, z2;
        java.lang.Runnable $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyHandled>;

        z2 = 0;

        if z1 != 0 goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mPowerLongPress>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        z2 = 0;

        if z0 != 0 goto label1;

        z2 = 1;

     label1:
        return z2;
    }

    private void interceptScreenshotChord()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        long l0, $l1, $l2, $l4, $l5, $l7;
        boolean $z0, $z1, $z2, $z3;
        byte $b3, $b6;
        android.os.Handler $r1;
        java.lang.Runnable $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenshotChordEnabled>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered>;

        if $z1 == 0 goto label1;

        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered>;

        if $z2 == 0 goto label1;

        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeUpKeyTriggered>;

        if $z3 != 0 goto label1;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long mVolumeDownKeyTime>;

        $l2 = 150L + $l1;

        $b3 = l0 cmp $l2;

        if $b3 > 0 goto label1;

        $l4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long mPowerKeyTime>;

        $l5 = 150L + $l4;

        $b6 = l0 cmp $l5;

        if $b6 > 0 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyConsumedByScreenshotChord> = 1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingPowerKeyAction()>();

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotRunnable>;

        $l7 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: long getScreenshotChordLongPressDelay()>();

        virtualinvoke $r1.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r2, $l7);

     label1:
        return;
    }

    private boolean isAnyPortrait(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        if i0 == $i1 goto label1;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation>;

        if i0 != $i2 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isGlobalAccessibilityGestureEnabled()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "enable_accessibility_global_gesture_enabled", 0);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isHidden(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2, i3;
        boolean z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        z0 = 1;

        tableswitch(i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            default: goto label1;
        };

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        if $i2 == 0 goto label2;

        return 0;

     label4:
        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        i3 = (int) 1;

        if $i1 == i3 goto label2;

        return 0;
    }

    private boolean isImmersiveMode(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2;
        android.view.WindowManagerPolicy$WindowState $r1;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r1 == null goto label1;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        $i2 = i0 & 6144;

        if $i2 == 0 goto label1;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean canHideNavigationBar()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isLandscapeOrSeascape(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        if i0 == $i1 goto label1;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation>;

        if i0 != $i2 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isWakeKeyWhenScreenOff(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 24: goto label2;
            case 25: goto label2;
            case 27: goto label3;
            case 79: goto label3;
            case 85: goto label3;
            case 86: goto label3;
            case 87: goto label3;
            case 88: goto label3;
            case 89: goto label3;
            case 90: goto label3;
            case 91: goto label3;
            case 126: goto label3;
            case 127: goto label3;
            case 130: goto label3;
            case 164: goto label2;
            case 222: goto label3;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i1 != 0 goto label1;

        return 0;

     label3:
        return 0;
    }

    private boolean keyguardIsShowingTq()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowingAndNotHidden()>();

        return $z0;
    }

    private void launchAssistAction()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Intent r1;
        android.content.ActivityNotFoundException r2, $r10;
        android.content.Context $r3, $r5, $r9;
        java.lang.Object $r4;
        android.app.SearchManager $r6;
        android.os.UserHandle $r8;
        java.lang.Throwable r11;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("assist");

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("search");

        $r6 = (android.app.SearchManager) $r4;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r1 = virtualinvoke $r6.<android.app.SearchManager: android.content.Intent getAssistIntent(android.content.Context,boolean,int)>($r5, 1, -2);

        if r1 == null goto label2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setFlags(int)>(872415232);

     label1:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r8 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r9.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r8);

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

        r11 = (java.lang.Throwable) r2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "No activity to handle assist action.", r11);

        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    private void launchAssistLongPressAction()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Intent r1, r9;
        android.content.ActivityNotFoundException r2, $r8;
        android.app.SearchManager r3;
        android.os.UserHandle $r6;
        android.content.Context $r7;
        java.lang.Throwable r10;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>(null, 0, 0);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("assist");

        r9 = new android.content.Intent;

        specialinvoke r9.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SEARCH_LONG_PRESS");

        r1 = r9;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

     label1:
        r3 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.SearchManager getSearchManager()>();

     label2:
        if r3 == null goto label4;

     label3:
        virtualinvoke r3.<android.app.SearchManager: void stopSearch()>();

     label4:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r6 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r7.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r6);

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        r2 = $r8;

        r10 = (java.lang.Throwable) r2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "No activity to handle assist long press action.", r10);

        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label6;
        catch android.content.ActivityNotFoundException from label3 to label4 with label6;
        catch android.content.ActivityNotFoundException from label4 to label5 with label6;
    }

    private void offsetInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.graphics.Rect $r2, $r3, $r4, $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $r2 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getContentFrameLw()>();

        $i2 = $r2.<android.graphics.Rect: int top>;

        $r3 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getGivenContentInsetsLw()>();

        $i3 = $r3.<android.graphics.Rect: int top>;

        i0 = $i2 + $i3;

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        if $i4 <= i0 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom> = i0;

     label1:
        $r4 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getVisibleFrameLw()>();

        $i5 = $r4.<android.graphics.Rect: int top>;

        $r5 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getGivenVisibleInsetsLw()>();

        $i6 = $r5.<android.graphics.Rect: int top>;

        i1 = $i5 + $i6;

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        if $i7 <= i1 goto label2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom> = i1;

     label2:
        return;
    }

    private void performAuditoryFeedbackForAccessibilityIfNeed()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.media.Ringtone r1;
        boolean $z0, $z1;
        android.content.Context $r2, $r6;
        java.lang.Object $r3;
        android.media.AudioManager $r4;
        android.net.Uri $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isGlobalAccessibilityGestureEnabled()>();

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r4 = (android.media.AudioManager) $r3;

        $z1 = virtualinvoke $r4.<android.media.AudioManager: boolean isSilentMode()>();

        if $z1 != 0 goto label1;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = <android.provider.Settings$System: android.net.Uri DEFAULT_NOTIFICATION_URI>;

        r1 = staticinvoke <android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>($r6, $r5);

        virtualinvoke r1.<android.media.Ringtone: void setStreamType(int)>(3);

        virtualinvoke r1.<android.media.Ringtone: void play()>();

        return;
    }

    private void preloadRecentApps()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.RemoteException r1, $r3;
        com.android.internal.statusbar.IStatusBarService r2;
        java.lang.Throwable r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPreloadedRecentApps> = 1;

     label1:
        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()>();

     label2:
        if r2 == null goto label4;

     label3:
        interfaceinvoke r2.<com.android.internal.statusbar.IStatusBarService: void preloadRecentApps()>();

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        r1 = $r3;

        r4 = (java.lang.Throwable) r1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "RemoteException when preloading recent apps", r4);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService> = null;

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private void readConfigurationDependentBehaviors()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context $r1, $r3;
        android.content.res.Resources $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694760);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior> = $i0;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i1 < 0 goto label1;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i5 <= 2 goto label2;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior> = 0;

     label2:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r4.<android.content.res.Resources: int getInteger(int)>(17694761);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior> = $i2;

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        if $i3 < 0 goto label3;

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        if $i4 <= 1 goto label4;

     label3:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior> = 0;

     label4:
        return;
    }

    private int readRotation(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        android.content.res.Resources$NotFoundException $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        i1 = virtualinvoke $r3.<android.content.res.Resources: int getInteger(int)>(i0);

     label2:
        lookupswitch(i1)
        {
            case 0: goto label4;
            case 90: goto label5;
            case 180: goto label6;
            case 270: goto label7;
            default: goto label3;
        };

     label3:
        return -1;

     label4:
        return 0;

     label5:
        return 1;

     label6:
        return 2;

     label7:
        return 3;

     label8:
        $r4 := @caughtexception;

        goto label3;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label8;
    }

    private void requestTransientBars(android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r4;
        java.lang.Object r2;
        java.lang.Throwable r3, $r11;
        boolean z0, z1, $z2;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r5;
        com.android.internal.policy.impl.BarController $r6, $r7, $r9, $r10;
        com.android.internal.policy.impl.ImmersiveModeConfirmation $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        r2 = interfaceinvoke $r5.<android.view.WindowManagerPolicy$WindowManagerFuncs: java.lang.Object getWindowManagerLock()>();

        entermonitor r2;

     label01:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        z0 = virtualinvoke $r6.<com.android.internal.policy.impl.BarController: boolean checkShowTransientBarLw()>();

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        z1 = virtualinvoke $r7.<com.android.internal.policy.impl.BarController: boolean checkShowTransientBarLw()>();

     label02:
        if z0 != 0 goto label03;

        if z1 == 0 goto label15;

     label03:
        if z0 == 0 goto label08;

     label04:
        r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

     label05:
        $z2 = z0 ^ z1;

        if $z2 == 0 goto label10;

        if r4 == r1 goto label10;

     label06:
        exitmonitor r2;

     label07:
        return;

     label08:
        r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

     label09:
        goto label05;

     label10:
        if z0 == 0 goto label12;

     label11:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        virtualinvoke $r9.<com.android.internal.policy.impl.BarController: void showTransient()>();

     label12:
        if z1 == 0 goto label14;

     label13:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r10.<com.android.internal.policy.impl.BarController: void showTransient()>();

     label14:
        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation>;

        virtualinvoke $r8.<com.android.internal.policy.impl.ImmersiveModeConfirmation: void confirmCurrentPrompt()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()>();

     label15:
        exitmonitor r2;

     label16:
        return;

     label17:
        $r11 := @caughtexception;

        r3 = $r11;

     label18:
        exitmonitor r2;

     label19:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    static void sendCloseSystemWindows(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        boolean $z0;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void closeSystemDialogs(java.lang.String)>(r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void takeScreenshot()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r15;
        android.content.ComponentName r3, r16;
        android.content.Intent r4, r17;
        com.android.internal.policy.impl.PhoneWindowManager$13 r5, r18;
        android.content.ServiceConnection $r6, r19, r20;
        android.os.UserHandle $r11;
        android.content.Context $r12;
        boolean $z0;
        java.lang.Runnable $r13;
        android.os.Handler $r14;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mScreenshotLock>;

        entermonitor r1;

     label1:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.ServiceConnection mScreenshotConnection>;

        if $r6 == null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r16 = new android.content.ComponentName;

        specialinvoke r16.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.screenshot.TakeScreenshotService");

        r3 = r16;

        r17 = new android.content.Intent;

        specialinvoke r17.<android.content.Intent: void <init>()>();

        r4 = r17;

        virtualinvoke r4.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r3);

        r18 = new com.android.internal.policy.impl.PhoneWindowManager$13;

        specialinvoke r18.<com.android.internal.policy.impl.PhoneWindowManager$13: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r5 = r18;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r11 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        r19 = (android.content.ServiceConnection) r5;

        $z0 = virtualinvoke $r12.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r4, r19, 1, $r11);

        if $z0 == 0 goto label4;

        r20 = (android.content.ServiceConnection) r5;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.ServiceConnection mScreenshotConnection> = r20;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotTimeout>;

        virtualinvoke $r14.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r13, 10000L);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r15 := @caughtexception;

        r2 = $r15;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void toggleRecentApps()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.RemoteException r1, $r3;
        com.android.internal.statusbar.IStatusBarService r2;
        java.lang.Throwable r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPreloadedRecentApps> = 0;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("recentapps");

     label1:
        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()>();

     label2:
        if r2 == null goto label4;

     label3:
        interfaceinvoke r2.<com.android.internal.statusbar.IStatusBarService: void toggleRecentApps()>();

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        r1 = $r3;

        r4 = (java.lang.Throwable) r1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "RemoteException when showing recent apps", r4);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService> = null;

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private void updateLockScreenTimeout()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout r1, $r3, $r5;
        java.lang.Throwable r2, $r9;
        boolean z0, $z1, $z2, $z4, $z5;
        android.os.Handler $r4, $r6;
        int $i0;
        long $l1;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r7, $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        entermonitor r1;

     label01:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAllowLockscreenWhenOn>;

        if $z1 == 0 goto label14;

        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly>;

        if $z4 == 0 goto label14;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r8 == null goto label14;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z5 = virtualinvoke $r7.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isSecure()>();

        if $z5 == 0 goto label14;

     label02:
        z0 = 1;

     label03:
        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLockScreenTimerActive>;

        if $z2 == z0 goto label07;

     label04:
        if z0 == 0 goto label09;

     label05:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLockScreenTimeout>;

        $l1 = (long) $i0;

        virtualinvoke $r6.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r5, $l1);

     label06:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLockScreenTimerActive> = z0;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3);

     label10:
        goto label06;

     label11:
        $r9 := @caughtexception;

        r2 = $r9;

     label12:
        exitmonitor r1;

     label13:
        throw r2;

     label14:
        z0 = 0;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private int updateSystemBarsLw(android.view.WindowManagerPolicy$WindowState, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r2, $r5, $r8, $r10, $r11, $r15, $r18;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, $z11, $z12, $z13, $z14, $z15;
        java.lang.String r3;
        com.android.internal.policy.impl.BarController $r4, $r6, $r9, $r12, $r13, $r14;
        android.view.WindowManager$LayoutParams $r7, $r17;
        com.android.internal.policy.impl.ImmersiveModeConfirmation $r16;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        if $r5 == null goto label18;

        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        $z15 = interfaceinvoke $r18.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z15 == 0 goto label18;

        $z14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        if $z14 != 0 goto label18;

        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

     label01:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        i2 = virtualinvoke $r4.<com.android.internal.policy.impl.BarController: int applyTranslucentFlagLw(android.view.WindowManagerPolicy$WindowState,int,int)>(r2, i1, i0);

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        i3 = virtualinvoke $r6.<com.android.internal.policy.impl.BarController: int applyTranslucentFlagLw(android.view.WindowManagerPolicy$WindowState,int,int)>(r2, i2, i0);

        $r7 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i5 = $r7.<android.view.WindowManager$LayoutParams: int type>;

        if $i5 != 2000 goto label19;

        z0 = 1;

     label02:
        if z0 == 0 goto label03;

        $i13 = 1073735673 & i3;

        $i10 = i0 & -1073735674;

        i3 = $i13 | $i10;

     label03:
        $z11 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean areTranslucentBarsAllowed()>();

        if $z11 != 0 goto label04;

        i3 = i3 & 1073741823;

     label04:
        $i6 = 4096 & i3;

        if $i6 == 0 goto label20;

        z1 = 1;

     label05:
        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r8 == null goto label21;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        $r17 = interfaceinvoke $r15.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i12 = $r17.<android.view.WindowManager$LayoutParams: int flags>;

        $i11 = 1024 & $i12;

        if $i11 == 0 goto label21;

        z2 = 1;

     label06:
        $i8 = i3 & 4;

        if $i8 == 0 goto label22;

        z3 = 1;

     label07:
        $i7 = i3 & 2;

        if $i7 == 0 goto label23;

        z4 = 1;

     label08:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r10 == null goto label24;

        if z2 != 0 goto label10;

        if z3 == 0 goto label09;

        if z1 != 0 goto label10;

     label09:
        if z0 == 0 goto label24;

     label10:
        z5 = 1;

     label11:
        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r11 == null goto label25;

        if z4 == 0 goto label25;

        if z1 == 0 goto label25;

        z6 = 1;

     label12:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z12 = virtualinvoke $r9.<com.android.internal.policy.impl.BarController: boolean isTransientShowRequested()>();

        if $z12 == 0 goto label26;

        if z5 != 0 goto label26;

        if z3 == 0 goto label26;

        z7 = 1;

     label13:
        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        $z13 = virtualinvoke $r13.<com.android.internal.policy.impl.BarController: boolean isTransientShowRequested()>();

        if $z13 == 0 goto label27;

        if z6 != 0 goto label27;

        z8 = 1;

     label14:
        if z7 != 0 goto label15;

        if z8 == 0 goto label16;

     label15:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void clearClearableFlagsLw()>();

     label16:
        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        i4 = virtualinvoke $r12.<com.android.internal.policy.impl.BarController: int updateVisibilityLw(boolean,int,int)>(z5, i0, i3);

        z9 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isImmersiveMode(int)>(i0);

        z10 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isImmersiveMode(int)>(i4);

        if r1 == null goto label17;

        if z9 == z10 goto label17;

        r3 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: java.lang.String getOwningPackage()>();

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation>;

        virtualinvoke $r16.<com.android.internal.policy.impl.ImmersiveModeConfirmation: void immersiveModeChanged(java.lang.String,boolean)>(r3, z10);

     label17:
        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        $i9 = virtualinvoke $r14.<com.android.internal.policy.impl.BarController: int updateVisibilityLw(boolean,int,int)>(z6, i0, i4);

        return $i9;

     label18:
        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        goto label01;

     label19:
        z0 = 0;

        goto label02;

     label20:
        z1 = 0;

        goto label05;

     label21:
        z2 = 0;

        goto label06;

     label22:
        z3 = 0;

        goto label07;

     label23:
        z4 = 0;

        goto label08;

     label24:
        z5 = 0;

        goto label11;

     label25:
        z6 = 0;

        goto label12;

     label26:
        z7 = 0;

        goto label13;

     label27:
        z8 = 0;

        goto label14;
    }

    private int updateSystemUiVisibilityLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, $r2, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean z0, $z1, $z2, $z4;
        android.view.WindowManager$LayoutParams $r3;
        android.view.IApplicationToken $r5, $r8, $r9;
        android.os.Handler $r6;
        com.android.internal.policy.impl.PhoneWindowManager$23 $r7;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mFocusedWindow>;

        if $r2 == null goto label2;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mFocusedWindow>;

     label1:
        if r1 != null goto label3;

        return 0;

     label2:
        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        goto label1;

     label3:
        $r3 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i3 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 != 2004 goto label4;

        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        if $z4 != 1 goto label4;

        return 0;

     label4:
        $i4 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getSystemUiVisibility()>();

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        $i6 = -1 ^ $i5;

        $i9 = $i4 & $i6;

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForceClearedSystemUiFlags>;

        $i8 = -1 ^ $i7;

        i0 = $i9 & $i8;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForcingShowNavBar>;

        if $z1 == 0 goto label5;

        $i13 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForcingShowNavBarLayer>;

        if $i13 >= $i12 goto label5;

        i0 = i0 & -8;

     label5:
        $i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        i1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemBarsLw(android.view.WindowManagerPolicy$WindowState,int,int)>(r1, $i10, i0);

        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        i2 = i1 ^ $i11;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        z0 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean getNeedsMenuLw(android.view.WindowManagerPolicy$WindowState)>($r4);

        if i2 != 0 goto label6;

        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLastFocusNeedsMenu>;

        if $z2 != z0 goto label6;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IApplicationToken mFocusedApp>;

        $r8 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.IApplicationToken getAppToken()>();

        if $r9 != $r8 goto label6;

        return 0;

     label6:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags> = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLastFocusNeedsMenu> = z0;

        $r5 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.IApplicationToken getAppToken()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IApplicationToken mFocusedApp> = $r5;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r7 = new com.android.internal.policy.impl.PhoneWindowManager$23;

        specialinvoke $r7.<com.android.internal.policy.impl.PhoneWindowManager$23: void <init>(com.android.internal.policy.impl.PhoneWindowManager,int,boolean)>(r0, i1, z0);

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        return i2;
    }

    private void waitForKeyguard(android.view.WindowManagerPolicy$ScreenOnListener)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$ScreenOnListener r1;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r2, $r3, $r5;
        com.android.internal.policy.impl.PhoneWindowManager$17 $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$ScreenOnListener;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r2 == null goto label3;

        if r1 == null goto label1;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $r4 = new com.android.internal.policy.impl.PhoneWindowManager$17;

        specialinvoke $r4.<com.android.internal.policy.impl.PhoneWindowManager$17: void <init>(com.android.internal.policy.impl.PhoneWindowManager,android.view.WindowManagerPolicy$ScreenOnListener)>(r0, r1);

        virtualinvoke $r5.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void onScreenTurnedOn(com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate$ShowListener)>($r4);

        return;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r3.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void onScreenTurnedOn(com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate$ShowListener)>(null);

     label2:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void finishScreenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)>(r1);

        return;

     label3:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "No keyguard interface!");

        goto label2;
    }

    private void waitForKeyguardWindowDrawn(android.os.IBinder, android.view.WindowManagerPolicy$ScreenOnListener)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.IBinder r1;
        android.view.WindowManagerPolicy$ScreenOnListener r2;
        java.lang.StringBuilder $r5, $r6, r12;
        java.lang.String $r7;
        boolean $z0, $z1;
        android.view.IWindowManager $r9;
        android.os.RemoteException $r10;
        com.android.internal.policy.impl.PhoneWindowManager$18 r11;
        android.os.IRemoteCallback r13;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.WindowManagerPolicy$ScreenOnListener;

        if r1 == null goto label4;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        if $z0 != 0 goto label4;

     label1:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

        r11 = new com.android.internal.policy.impl.PhoneWindowManager$18;

        specialinvoke r11.<com.android.internal.policy.impl.PhoneWindowManager$18: void <init>(com.android.internal.policy.impl.PhoneWindowManager,android.view.WindowManagerPolicy$ScreenOnListener)>(r0, r2);

        r13 = (android.os.IRemoteCallback) r11;

        $z1 = interfaceinvoke $r9.<android.view.IWindowManager: boolean waitForWindowDrawn(android.os.IBinder,android.os.IRemoteCallback)>(r1, r13);

        if $z1 == 0 goto label3;

     label2:
        return;

     label3:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "No lock screen! waitForWindowDrawn false");

     label4:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No lock screen! windowToken=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r7);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void finishScreenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)>(r2);

        return;

     label5:
        $r10 := @caughtexception;

        goto label4;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public android.view.View addStartingWindow(android.os.IBinder, java.lang.String, int, android.content.res.CompatibilityInfo, java.lang.CharSequence, int, int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.IBinder r1;
        java.lang.String r2, $r24, $r33, $r35;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        android.content.res.CompatibilityInfo r3;
        java.lang.CharSequence r4, $r17;
        android.view.WindowManager r5;
        android.view.View r6, r11;
        java.lang.Throwable r7, $r29;
        java.lang.RuntimeException r8, $r27;
        android.content.Context r9;
        android.view.Window r10;
        android.content.res.TypedArray r12, $r19;
        android.view.WindowManager$LayoutParams r14;
        boolean z0, z1, z2, $z3;
        android.view.ViewParent r15, r16, $r23, $r26, $r30, $r36;
        android.content.res.Resources $r18;
        java.lang.StringBuilder $r20, $r21, $r22, $r28, $r32, $r34, $r37, $r38, $r39;
        java.lang.Object $r25;
        android.view.WindowManager$BadTokenException $r31;
        android.content.pm.PackageManager$NameNotFoundException $r40;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.content.res.CompatibilityInfo;

        r4 := @parameter4: java.lang.CharSequence;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        i4 := @parameter8: int;

        if r2 != null goto label02;

        r11 = null;

     label01:
        return r11;

     label02:
        r5 = null;

        r6 = null;

     label03:
        r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        i5 = virtualinvoke r9.<android.content.Context: int getThemeResId()>();

     label04:
        if i0 != i5 goto label05;

        if i1 == 0 goto label06;

     label05:
        r9 = virtualinvoke r9.<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>(r2, 0);

        virtualinvoke r9.<android.content.Context: void setTheme(int)>(i0);

     label06:
        r10 = staticinvoke <com.android.internal.policy.PolicyManager: android.view.Window makeNewWindow(android.content.Context)>(r9);

        r12 = virtualinvoke r10.<android.view.Window: android.content.res.TypedArray getWindowStyle()>();

        $z3 = virtualinvoke r12.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(12, 0);

        if $z3 != 0 goto label08;

        z0 = virtualinvoke r12.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(14, 0);

     label07:
        if z0 == 0 goto label09;

     label08:
        r11 = null;

        goto label01;

     label09:
        $r18 = virtualinvoke r9.<android.content.Context: android.content.res.Resources getResources()>();

        $r17 = virtualinvoke $r18.<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>(i1, r4);

        virtualinvoke r10.<android.view.Window: void setTitle(java.lang.CharSequence)>($r17);

        virtualinvoke r10.<android.view.Window: void setType(int)>(3);

        $i6 = i4 | 16;

        $i10 = 8 | $i6;

        $i12 = 131072 | $i10;

        $i9 = i4 | 16;

        $i8 = 8 | $i9;

        $i7 = 131072 | $i8;

        virtualinvoke r10.<android.view.Window: void setFlags(int,int)>($i12, $i7);

        virtualinvoke r10.<android.view.Window: void setDefaultIcon(int)>(i2);

        virtualinvoke r10.<android.view.Window: void setDefaultLogo(int)>(i3);

        virtualinvoke r10.<android.view.Window: void setLayout(int,int)>(-1, -1);

        r14 = virtualinvoke r10.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        r14.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = r1;

        r14.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = r2;

        $r19 = virtualinvoke r10.<android.view.Window: android.content.res.TypedArray getWindowStyle()>();

        $i11 = virtualinvoke $r19.<android.content.res.TypedArray: int getResourceId(int,int)>(8, 0);

        r14.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i11;

        $i16 = r14.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i15 = 1 | $i16;

        r14.<android.view.WindowManager$LayoutParams: int privateFlags> = $i15;

        $i14 = r14.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i13 = 16 | $i14;

        r14.<android.view.WindowManager$LayoutParams: int privateFlags> = $i13;

        z2 = virtualinvoke r3.<android.content.res.CompatibilityInfo: boolean supportsScreen()>();

     label10:
        r6 = null;

        r5 = null;

        if z2 != 0 goto label12;

     label11:
        $i17 = r14.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i18 = 128 | $i17;

        r14.<android.view.WindowManager$LayoutParams: int privateFlags> = $i18;

     label12:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r14.<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>($r24);

        $r25 = virtualinvoke r9.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r5 = (android.view.WindowManager) $r25;

        r6 = virtualinvoke r10.<android.view.Window: android.view.View getDecorView()>();

        z1 = virtualinvoke r10.<android.view.Window: boolean isFloating()>();

     label13:
        if z1 == 0 goto label14;

        r11 = null;

        if r6 == null goto label01;

        r16 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        r11 = null;

        if r16 != null goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r5.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r6);

        return null;

     label14:
        interfaceinvoke r5.<android.view.WindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r6, r14);

        r15 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

     label15:
        if r15 == null goto label17;

        r11 = r6;

     label16:
        if r6 == null goto label01;

        $r23 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        if $r23 != null goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r5.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r6);

        return r11;

     label17:
        r11 = null;

        goto label16;

     label18:
        $r31 := @caughtexception;

     label19:
        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already running, starting window not displayed");

        $r35 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r35);

     label20:
        if r6 == null goto label21;

        $r36 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        if $r36 != null goto label21;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r5.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r6);

     label21:
        return null;

     label22:
        $r27 := @caughtexception;

        r8 = $r27;

     label23:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed creating starting window");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r33, r8);

     label24:
        if r6 == null goto label21;

        $r30 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        if $r30 != null goto label21;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r5.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r6);

        goto label21;

     label25:
        $r29 := @caughtexception;

        r7 = $r29;

        if r6 == null goto label26;

        $r26 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        if $r26 != null goto label26;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r5.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r6);

     label26:
        throw r7;

     label27:
        $r40 := @caughtexception;

        goto label06;

        catch android.view.WindowManager$BadTokenException from label03 to label04 with label18;
        catch java.lang.RuntimeException from label03 to label04 with label22;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label27;
        catch android.view.WindowManager$BadTokenException from label05 to label06 with label18;
        catch java.lang.RuntimeException from label05 to label06 with label22;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch android.view.WindowManager$BadTokenException from label06 to label07 with label18;
        catch java.lang.RuntimeException from label06 to label07 with label22;
        catch java.lang.Throwable from label06 to label07 with label25;
        catch android.view.WindowManager$BadTokenException from label09 to label10 with label18;
        catch java.lang.RuntimeException from label09 to label10 with label22;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch android.view.WindowManager$BadTokenException from label11 to label12 with label18;
        catch java.lang.RuntimeException from label11 to label12 with label22;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch android.view.WindowManager$BadTokenException from label12 to label13 with label18;
        catch java.lang.RuntimeException from label12 to label13 with label22;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch android.view.WindowManager$BadTokenException from label14 to label15 with label18;
        catch java.lang.RuntimeException from label14 to label15 with label22;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label19 to label20 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
    }

    public void adjustConfigurationLw(android.content.res.Configuration, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.res.Configuration r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.content.res.Configuration;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i0 & 1;

        if $i2 == 0 goto label6;

        z0 = 1;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHaveBuiltInKeyboard> = z0;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void readConfigurationDependentBehaviors()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void readLidState()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void applyLidSwitchState()>();

        $i3 = r1.<android.content.res.Configuration: int keyboard>;

        if $i3 == 1 goto label2;

        if i0 != 1 goto label3;

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidKeyboardAccessibility>;

        $z3 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isHidden(int)>($i6);

        if $z3 == 0 goto label3;

     label2:
        r1.<android.content.res.Configuration: int hardKeyboardHidden> = 2;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput>;

        if $z1 != 0 goto label3;

        r1.<android.content.res.Configuration: int keyboardHidden> = 2;

     label3:
        $i4 = r1.<android.content.res.Configuration: int navigation>;

        if $i4 == 1 goto label4;

        if i1 != 1 goto label5;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidNavigationAccessibility>;

        $z2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isHidden(int)>($i5);

        if $z2 == 0 goto label5;

     label4:
        r1.<android.content.res.Configuration: int navigationHidden> = 2;

     label5:
        return;

     label6:
        z0 = 0;

        goto label1;
    }

    public int adjustSystemUiVisibilityLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        com.android.internal.policy.impl.BarController $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        virtualinvoke $r1.<com.android.internal.policy.impl.BarController: void adjustSystemUiVisibilityLw(int,int)>($i1, i0);

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        virtualinvoke $r2.<com.android.internal.policy.impl.BarController: void adjustSystemUiVisibilityLw(int,int)>($i2, i0);

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        $i4 = i0 & $i3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags> = $i4;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        $i6 = -1 ^ $i5;

        $i9 = i0 & $i6;

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForceClearedSystemUiFlags>;

        $i8 = -1 ^ $i7;

        $i10 = $i9 & $i8;

        return $i10;
    }

    public void adjustWindowParamsLw(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int type>;

        lookupswitch($i0)
        {
            case 2006: goto label2;
            case 2015: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $i1 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = 24 | $i1;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i2;

        $i3 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i4 = -262145 & $i3;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i4;

        return;
    }

    public boolean allowAppAnimationsLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        $z1 = interfaceinvoke $r2.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z1 == 0 goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        $z2 = interfaceinvoke $r3.<android.view.WindowManagerPolicy$WindowState: boolean isAnimatingLw()>();

        if $z2 == 0 goto label2;

     label1:
        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingDream>;

        if $z0 == 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public void applyPostLayoutPolicyLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, $r3, $r4, $r10;
        android.view.WindowManager$LayoutParams r2;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7, $z9, $z10, $z11, $z13, $z14, $z15;
        byte b0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        android.view.IApplicationToken $r5, $r9;
        java.util.HashSet $r6, $r7, $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r3 != null goto label01;

        $z14 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z14 == 0 goto label01;

        $i20 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i20 != 2011 goto label01;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForcingShowNavBar> = 1;

        $i19 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForcingShowNavBarLayer> = $i19;

     label01:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r4 != null goto label15;

        $z6 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleOrBehindKeyguardLw()>();

        if $z6 == 0 goto label15;

        $z7 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isGoneForLayoutLw()>();

        if $z7 != 0 goto label15;

        $i1 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i3 = 2048 & $i1;

        if $i3 == 0 goto label02;

        $i17 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i17 != 2004 goto label16;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard> = 1;

     label02:
        $i2 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != 2004 goto label03;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingLockscreen> = 1;

     label03:
        $i5 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i5 < 1 goto label17;

        $i18 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i18 > 99 goto label17;

        z0 = 1;

     label04:
        $i4 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i4 != 2023 goto label06;

        $z10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDreamingLockscreen>;

        if $z10 == 0 goto label05;

        $z11 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z11 == 0 goto label06;

        $z15 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean hasDrawnLw()>();

        if $z15 == 0 goto label06;

     label05:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingDream> = 1;

        z0 = 1;

     label06:
        $i7 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i6 = 524288 & $i7;

        if $i6 == 0 goto label18;

        z1 = 1;

     label07:
        $i9 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i8 = 4194304 & $i9;

        if $i8 == 0 goto label19;

        z2 = 1;

     label08:
        if z0 == 0 goto label15;

        if z1 != 0 goto label09;

        if z2 == 0 goto label20;

        $z13 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isKeyguardSecure()>();

        if $z13 != 0 goto label20;

     label09:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden>;

        $r5 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.IApplicationToken getAppToken()>();

        virtualinvoke $r6.<java.util.HashSet: boolean remove(java.lang.Object)>($r5);

     label10:
        $i10 = r2.<android.view.WindowManager$LayoutParams: int x>;

        if $i10 != 0 goto label15;

        $i12 = r2.<android.view.WindowManager$LayoutParams: int y>;

        if $i12 != 0 goto label15;

        $i11 = r2.<android.view.WindowManager$LayoutParams: int width>;

        if $i11 != -1 goto label15;

        $i13 = r2.<android.view.WindowManager$LayoutParams: int height>;

        if $i13 != -1 goto label15;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState> = r1;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden>;

        $z9 = virtualinvoke $r7.<java.util.HashSet: boolean isEmpty()>();

        if $z9 == 0 goto label14;

        if z1 == 0 goto label11;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard> = 0;

     label11:
        if z2 == 0 goto label14;

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard>;

        if $i15 != 0 goto label14;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard>;

        if $r10 != r1 goto label21;

        b0 = 2;

     label12:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard> = b0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard> = r1;

        z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingLockscreen>;

        z4 = 0;

        if z3 == 0 goto label13;

        z5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isKeyguardSecure()>();

        z4 = 0;

        if z5 == 0 goto label13;

        z4 = 1;

     label13:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard> = z4;

     label14:
        $i16 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i14 = 1 & $i16;

        if $i14 == 0 goto label15;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAllowLockscreenWhenOn> = 1;

     label15:
        return;

     label16:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBar> = 1;

        goto label02;

     label17:
        z0 = 0;

        goto label04;

     label18:
        z1 = 0;

        goto label07;

     label19:
        z2 = 0;

        goto label08;

     label20:
        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden>;

        $r9 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.IApplicationToken getAppToken()>();

        virtualinvoke $r8.<java.util.HashSet: boolean add(java.lang.Object)>($r9);

        goto label10;

     label21:
        b0 = 1;

        goto label12;
    }

    public void beginLayoutLw(boolean, int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14, z15, z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z29, $z30, $z34, $z36;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87;
        com.android.internal.policy.impl.SystemGesturesPointerEventListener r1, r2;
        android.graphics.Rect r3, r4, r5, r6, r7, $r20, $r23, $r24, $r26, $r28, $r29, $r30, $r31, $r32, $r37, $r38, $r41, $r45;
        android.view.WindowManagerPolicy$WindowState r8, $r10, $r11, $r12, $r13, $r15, $r16, $r21, $r34, $r35, $r43;
        android.view.WindowManagerPolicy$FakeWindow $r9, $r47, $r48, $r52;
        com.android.internal.policy.impl.BarController $r14, $r17, $r19, $r22, $r25, $r27, $r33, $r39, $r40, $r42, $r44, $r49;
        int[] $r18, $r36;
        android.view.InputEventReceiver$Factory $r46;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r50;
        android.os.Looper $r51;
        android.os.Handler $r53;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if z0 == 0 goto label27;

        tableswitch(i2)
        {
            case 1: goto label24;
            case 2: goto label25;
            case 3: goto label26;
            default: goto label01;
        };

     label01:
        i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

     label02:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenLeft> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenTop> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenWidth> = i0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth> = i0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenHeight> = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight> = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemLeft> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemTop> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemRight> = i0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemBottom> = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft> = i4;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop> = i6;

        $i38 = i0 - i4;

        $i39 = $i38 - i5;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth> = $i39;

        $i40 = i1 - i6;

        $i41 = $i40 - i3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight> = $i41;

        $i34 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft> = $i34;

        $i35 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop> = $i35;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.SystemGesturesPointerEventListener mSystemGestures>;

        i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        r1.<com.android.internal.policy.impl.SystemGesturesPointerEventListener: int screenWidth> = i7;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth> = i7;

        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.SystemGesturesPointerEventListener mSystemGestures>;

        i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        r2.<com.android.internal.policy.impl.SystemGesturesPointerEventListener: int screenHeight> = i8;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight> = i8;

        i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft> = i9;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenLeft> = i9;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft> = i9;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft> = i9;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft> = i9;

        i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop> = i10;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenTop> = i10;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop> = i10;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop> = i10;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop> = i10;

        i11 = i0 - i5;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight> = i11;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight> = i11;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight> = i11;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight> = i11;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight> = i11;

        i12 = i1 - i3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom> = i12;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom> = i12;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom> = i12;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom> = i12;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom> = i12;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer> = 268435456;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarLayer> = -1;

        r3 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpParentFrame>;

        r5 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDisplayFrame>;

        r4 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpOverscanFrame>;

        r7 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpVisibleFrame>;

        r6 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDecorFrame>;

        i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r7.<android.graphics.Rect: int left> = i14;

        r4.<android.graphics.Rect: int left> = i14;

        r5.<android.graphics.Rect: int left> = i14;

        r3.<android.graphics.Rect: int left> = i14;

        i13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r7.<android.graphics.Rect: int top> = i13;

        r4.<android.graphics.Rect: int top> = i13;

        r5.<android.graphics.Rect: int top> = i13;

        r3.<android.graphics.Rect: int top> = i13;

        i16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r7.<android.graphics.Rect: int right> = i16;

        r4.<android.graphics.Rect: int right> = i16;

        r5.<android.graphics.Rect: int right> = i16;

        r3.<android.graphics.Rect: int right> = i16;

        i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r7.<android.graphics.Rect: int bottom> = i15;

        r4.<android.graphics.Rect: int bottom> = i15;

        r5.<android.graphics.Rect: int bottom> = i15;

        r3.<android.graphics.Rect: int bottom> = i15;

        virtualinvoke r6.<android.graphics.Rect: void setEmpty()>();

        if z0 == 0 goto label23;

        i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        $i36 = i17 & 2;

        if $i36 != 0 goto label28;

        z1 = 1;

     label03:
        $i37 = -2147483648 & i17;

        if $i37 == 0 goto label29;

        z3 = 1;

     label04:
        $i43 = i17 & 2048;

        if $i43 == 0 goto label30;

        z2 = 1;

     label05:
        $i44 = i17 & 4096;

        if $i44 == 0 goto label31;

        z5 = 1;

     label06:
        if z2 != 0 goto label07;

        if z5 == 0 goto label32;

     label07:
        z4 = 1;

     label08:
        if z5 != 0 goto label33;

        z8 = 1;

     label09:
        $z18 = z3 & z8;

        $z19 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean areTranslucentBarsAllowed()>();

        z9 = $z18 & $z19;

        if z1 != 0 goto label10;

        if z4 == 0 goto label34;

     label10:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow>;

        if $r9 == null goto label11;

        $r48 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow>;

        interfaceinvoke $r48.<android.view.WindowManagerPolicy$FakeWindow: void dismiss()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow> = null;

     label11:
        $z17 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean canHideNavigationBar()>();

        if $z17 != 0 goto label35;

        z6 = 1;

     label12:
        z7 = z1 | z6;

        r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        z10 = 0;

        if r8 == null goto label17;

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        z15 = virtualinvoke $r19.<com.android.internal.policy.impl.BarController: boolean isTransientShowing()>();

        $z27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarCanMove>;

        if $z27 == 0 goto label13;

        if i0 >= i1 goto label36;

     label13:
        z14 = 1;

     label14:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarOnBottom> = z14;

        $z26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarOnBottom>;

        if $z26 == 0 goto label39;

        $i71 = i1 - i3;

        $r36 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        $i70 = $r36[i2];

        i33 = $i71 - $i70;

        $r37 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i72 = i1 - i3;

        virtualinvoke $r37.<android.graphics.Rect: void set(int,int,int,int)>(0, i33, i0, $i72);

        $r38 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        i32 = $r38.<android.graphics.Rect: int top>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom> = i32;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom> = i32;

        if z15 == 0 goto label37;

        $r49 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r49.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

     label15:
        if z7 == 0 goto label16;

        if z9 != 0 goto label16;

        $r43 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $z34 = interfaceinvoke $r43.<android.view.WindowManagerPolicy$WindowState: boolean isAnimatingLw()>();

        if $z34 != 0 goto label16;

        $r42 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        $z36 = virtualinvoke $r42.<com.android.internal.policy.impl.BarController: boolean wasRecentlyTranslucent()>();

        if $z36 != 0 goto label16;

        $r45 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i86 = $r45.<android.graphics.Rect: int top>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemBottom> = $i86;

     label16:
        i26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop> = i26;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop> = i26;

        i31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom> = i31;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom> = i31;

        i30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft> = i30;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft> = i30;

        i29 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight> = i29;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight> = i29;

        $r21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $i67 = interfaceinvoke $r21.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarLayer> = $i67;

        $r34 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $r31 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $r32 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $r29 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $r30 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $r20 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        interfaceinvoke $r34.<android.view.WindowManagerPolicy$WindowState: void computeFrameLw(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r31, $r32, $r29, $r30, $r20, r6);

        $r33 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        z16 = virtualinvoke $r33.<com.android.internal.policy.impl.BarController: boolean checkHiddenLw()>();

        z10 = 0;

        if z16 == 0 goto label17;

        z10 = 1;

     label17:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r10 == null goto label22;

        i18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r4.<android.graphics.Rect: int left> = i18;

        r5.<android.graphics.Rect: int left> = i18;

        r3.<android.graphics.Rect: int left> = i18;

        i20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r4.<android.graphics.Rect: int top> = i20;

        r5.<android.graphics.Rect: int top> = i20;

        r3.<android.graphics.Rect: int top> = i20;

        $i49 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i50 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        i21 = $i49 + $i50;

        r4.<android.graphics.Rect: int right> = i21;

        r5.<android.graphics.Rect: int right> = i21;

        r3.<android.graphics.Rect: int right> = i21;

        $i51 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i52 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        i19 = $i51 + $i52;

        r4.<android.graphics.Rect: int bottom> = i19;

        r5.<android.graphics.Rect: int bottom> = i19;

        r3.<android.graphics.Rect: int bottom> = i19;

        $i46 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        r7.<android.graphics.Rect: int left> = $i46;

        $i45 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        r7.<android.graphics.Rect: int top> = $i45;

        $i48 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        r7.<android.graphics.Rect: int right> = $i48;

        $i47 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        r7.<android.graphics.Rect: int bottom> = $i47;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $i57 = interfaceinvoke $r11.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarLayer> = $i57;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        interfaceinvoke $r12.<android.view.WindowManagerPolicy$WindowState: void computeFrameLw(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r3, r5, r7, r7, r7, r6);

        $i54 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i58 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarHeight>;

        $i53 = $i54 + $i58;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop> = $i53;

        $i56 = 67108864 & i17;

        if $i56 == 0 goto label43;

        z11 = 1;

     label18:
        $i55 = 1073741824 & i17;

        if $i55 == 0 goto label44;

        z12 = 1;

     label19:
        $z23 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean areTranslucentBarsAllowed()>();

        z13 = z12 & $z23;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z22 = interfaceinvoke $r16.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z22 == 0 goto label20;

        if z11 != 0 goto label20;

        $i60 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i59 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarHeight>;

        $i66 = $i60 + $i59;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop> = $i66;

        i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop> = i22;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop> = i22;

        i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom> = i23;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom> = i23;

        i25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft> = i25;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft> = i25;

        i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight> = i24;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight> = i24;

     label20:
        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z21 = interfaceinvoke $r15.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z21 == 0 goto label21;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z25 = interfaceinvoke $r13.<android.view.WindowManagerPolicy$WindowState: boolean isAnimatingLw()>();

        if $z25 != 0 goto label21;

        if z11 != 0 goto label21;

        if z13 != 0 goto label21;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z24 = virtualinvoke $r17.<com.android.internal.policy.impl.BarController: boolean wasRecentlyTranslucent()>();

        if $z24 != 0 goto label21;

        $i61 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i63 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarHeight>;

        $i62 = $i61 + $i63;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemTop> = $i62;

     label21:
        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z20 = virtualinvoke $r14.<com.android.internal.policy.impl.BarController: boolean checkHiddenLw()>();

        if $z20 == 0 goto label22;

        z10 = 1;

     label22:
        if z10 == 0 goto label23;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()>();

     label23:
        return;

     label24:
        i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        goto label02;

     label25:
        i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        goto label02;

     label26:
        i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        goto label02;

     label27:
        i3 = 0;

        i4 = 0;

        i5 = 0;

        i6 = 0;

        goto label02;

     label28:
        z1 = 0;

        goto label03;

     label29:
        z3 = 0;

        goto label04;

     label30:
        z2 = 0;

        goto label05;

     label31:
        z5 = 0;

        goto label06;

     label32:
        z4 = 0;

        goto label08;

     label33:
        z8 = 0;

        goto label09;

     label34:
        $r52 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow>;

        if $r52 != null goto label11;

        $r50 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $r53 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r51 = virtualinvoke $r53.<android.os.Handler: android.os.Looper getLooper()>();

        $r46 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.InputEventReceiver$Factory mHideNavInputEventReceiverFactory>;

        $r47 = interfaceinvoke $r50.<android.view.WindowManagerPolicy$WindowManagerFuncs: android.view.WindowManagerPolicy$FakeWindow addFakeWindow(android.os.Looper,android.view.InputEventReceiver$Factory,java.lang.String,int,int,int,boolean,boolean,boolean)>($r51, $r46, "hidden nav", 2022, 0, 0, 0, 0, 1);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow> = $r47;

        goto label11;

     label35:
        z6 = 0;

        goto label12;

     label36:
        z14 = 0;

        goto label14;

     label37:
        if z7 == 0 goto label38;

        $r44 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r44.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        $r41 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i81 = $r41.<android.graphics.Rect: int top>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom> = $i81;

        $i85 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        $i80 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i84 = $i85 - $i80;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight> = $i84;

        $i82 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        $i83 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenTop>;

        $i87 = $i82 - $i83;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenHeight> = $i87;

        goto label15;

     label38:
        $r39 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r39.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(0);

        goto label15;

     label39:
        $i64 = i0 - i5;

        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        $i65 = $r18[i2];

        i28 = $i64 - $i65;

        $r24 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i68 = i0 - i5;

        virtualinvoke $r24.<android.graphics.Rect: void set(int,int,int,int)>(i28, 0, $i68, i1);

        $r23 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        i27 = $r23.<android.graphics.Rect: int left>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight> = i27;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight> = i27;

        if z15 == 0 goto label41;

        $r40 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r40.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

     label40:
        if z7 == 0 goto label16;

        if z9 != 0 goto label16;

        $r35 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $z29 = interfaceinvoke $r35.<android.view.WindowManagerPolicy$WindowState: boolean isAnimatingLw()>();

        if $z29 != 0 goto label16;

        $r25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        $z30 = virtualinvoke $r25.<com.android.internal.policy.impl.BarController: boolean wasRecentlyTranslucent()>();

        if $z30 != 0 goto label16;

        $r26 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i69 = $r26.<android.graphics.Rect: int left>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemRight> = $i69;

        goto label16;

     label41:
        if z7 == 0 goto label42;

        $r27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r27.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        $r28 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i73 = $r28.<android.graphics.Rect: int left>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight> = $i73;

        $i75 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        $i74 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i76 = $i75 - $i74;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth> = $i76;

        $i78 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        $i77 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenLeft>;

        $i79 = $i78 - $i77;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenWidth> = $i79;

        goto label40;

     label42:
        $r22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r22.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(0);

        goto label40;

     label43:
        z11 = 0;

        goto label18;

     label44:
        z12 = 0;

        goto label19;
    }

    public void beginPostLayoutPolicyLw(int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1;
        java.util.HashSet $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState> = null;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden>;

        virtualinvoke $r1.<java.util.HashSet: void clear()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBar> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForcingShowNavBar> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForcingShowNavBarLayer> = -1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAllowLockscreenWhenOn> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingLockscreen> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingDream> = 0;

        return;
    }

    public boolean canBeForceHidden(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        android.view.WindowManager$LayoutParams r2;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        $i0 = r2.<android.view.WindowManager$LayoutParams: int type>;

        lookupswitch($i0)
        {
            case 2000: goto label2;
            case 2004: goto label2;
            case 2013: goto label2;
            case 2019: goto label2;
            case 2023: goto label2;
            case 2025: goto label2;
            case 2029: goto label2;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean canMagnifyWindow(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 2011: goto label2;
            case 2012: goto label2;
            case 2019: goto label2;
            case 2027: goto label2;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public int checkAddPermission(android.view.WindowManager$LayoutParams, int[])
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        int[] r2;
        int i0, $i1;
        java.lang.String r3;
        android.content.Context $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        r2 := @parameter1: int[];

        i0 = r1.<android.view.WindowManager$LayoutParams: int type>;

        r2[0] = -1;

        if i0 < 2000 goto label1;

        if i0 <= 2999 goto label2;

     label1:
        return 0;

     label2:
        r3 = null;

        lookupswitch(i0)
        {
            case 2002: goto label5;
            case 2003: goto label5;
            case 2005: goto label4;
            case 2006: goto label5;
            case 2007: goto label5;
            case 2010: goto label5;
            case 2011: goto label4;
            case 2013: goto label4;
            case 2023: goto label4;
            case 2030: goto label4;
            default: goto label3;
        };

     label3:
        r3 = "android.permission.INTERNAL_SYSTEM_WINDOW";

     label4:
        if r3 == null goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r3);

        if $i1 == 0 goto label1;

        return -8;

     label5:
        r3 = "android.permission.SYSTEM_ALERT_WINDOW";

        r2[0] = 24;

        goto label4;
    }

    public boolean checkShowToOwnerOnly(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        int $i0, $i1, $i2, $i3;
        android.content.Context $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int type>;

        lookupswitch($i0)
        {
            case 3: goto label3;
            case 2000: goto label3;
            case 2001: goto label3;
            case 2002: goto label3;
            case 2004: goto label3;
            case 2007: goto label3;
            case 2008: goto label3;
            case 2009: goto label3;
            case 2014: goto label3;
            case 2017: goto label3;
            case 2018: goto label3;
            case 2019: goto label3;
            case 2020: goto label3;
            case 2021: goto label3;
            case 2022: goto label3;
            case 2024: goto label3;
            case 2025: goto label3;
            case 2026: goto label3;
            case 2027: goto label3;
            case 2028: goto label3;
            case 2029: goto label3;
            case 2030: goto label3;
            default: goto label1;
        };

     label1:
        $i2 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i3 = 16 & $i2;

        if $i3 != 0 goto label3;

     label2:
        return 1;

     label3:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW");

        if $i1 != 0 goto label2;

        return 0;
    }

    public android.view.animation.Animation createForceHideEnterAnimation(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        android.content.Context r1;
        int i0;
        android.view.animation.Animation $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        if z0 == 0 goto label2;

        i0 = 17432618;

     label1:
        $r2 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>(r1, i0);

        return $r2;

     label2:
        i0 = 17432615;

        goto label1;
    }

    android.content.Intent createHomeDockIntent()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Intent r1, r4, $r9;
        android.content.pm.ResolveInfo r2;
        android.content.pm.ActivityInfo r3;
        int $i0, $i1, $i2;
        android.content.Context $r5;
        android.content.pm.PackageManager $r6;
        android.os.Bundle $r7, $r8;
        boolean $z0;
        java.lang.String $r10, $r11;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUiMode>;

        if $i0 != 3 goto label2;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mCarDockIntent>;

     label1:
        if r1 != null goto label4;

        return null;

     label2:
        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUiMode>;

        if $i1 != 2 goto label3;

     label3:
        r1 = null;

        goto label1;

     label4:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentUserId>;

        r2 = virtualinvoke $r6.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent,int,int)>(r1, 65664, $i2);

        r3 = null;

        if r2 == null goto label5;

        r3 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

     label5:
        if r3 == null goto label6;

        $r7 = r3.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        if $r7 == null goto label6;

        $r8 = r3.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        $z0 = virtualinvoke $r8.<android.os.Bundle: boolean getBoolean(java.lang.String)>("android.dock_home");

        if $z0 == 0 goto label6;

        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>(android.content.Intent)>(r1);

        r4 = $r9;

        $r10 = r3.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r11 = r3.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke r4.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r10, $r11);

        return r4;

     label6:
        return null;
    }

    public void dismissKeyguardLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindowManager$19 $r3;
        android.os.Handler $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = new com.android.internal.policy.impl.PhoneWindowManager$19;

        specialinvoke $r3.<com.android.internal.policy.impl.PhoneWindowManager$19: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

     label1:
        return;
    }

    void dispatchMediaKeyRepeatWithWakeLock(android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.KeyEvent r1, $r2;
        long $l0;
        int $i1, $i2;
        android.os.PowerManager$WakeLock $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock> = 0;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i2 = 128 | $i1;

        $r2 = staticinvoke <android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>(r1, $l0, 1, $i2);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)>($r2);

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

        return;
    }

    void dispatchMediaKeyWithWakeLock(android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.KeyEvent r1;
        android.os.Message r2;
        boolean $z0;
        int $i0, $i1, $i2;
        android.os.PowerManager$WakeLock $r3, $r7;
        android.os.Handler $r4, $r5, $r6;
        long $l3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock>;

        if $z0 == 0 goto label1;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r6.<android.os.Handler: void removeMessages(int)>(4);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock> = 0;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r7.<android.os.PowerManager$WakeLock: void release()>();

     label1:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)>(r1);

        $i0 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i0 != 0 goto label2;

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 != 0 goto label2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock> = 1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        r2 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(4, r1);

        virtualinvoke r2.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $i2 = staticinvoke <android.view.ViewConfiguration: int getKeyRepeatTimeout()>();

        $l3 = (long) $i2;

        virtualinvoke $r5.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r2, $l3);

        return;

     label2:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

        return;
    }

    void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.KeyEvent r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        $z0 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z0 == 0 goto label2;

        r2 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: android.media.IAudioService getAudioService()>();

        if r2 == null goto label2;

     label1:
        interfaceinvoke r2.<android.media.IAudioService: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)>(r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatchMediaKeyEvent threw exception ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WindowManager", $r8);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        android.view.KeyEvent r2, r3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        android.view.KeyCharacterMap r4;
        boolean z0, $z1;
        android.view.KeyCharacterMap$FallbackAction r5;
        java.lang.Object $r6;
        android.util.SparseArray $r7, $r8, $r9;
        long $l8, $l9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        $i5 = virtualinvoke r2.<android.view.KeyEvent: int getFlags()>();

        i1 = 1024 & $i5;

        r3 = null;

        if i1 != 0 goto label4;

        r4 = virtualinvoke r2.<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>();

        i2 = virtualinvoke r2.<android.view.KeyEvent: int getKeyCode()>();

        i3 = virtualinvoke r2.<android.view.KeyEvent: int getMetaState()>();

        $i6 = virtualinvoke r2.<android.view.KeyEvent: int getAction()>();

        if $i6 != 0 goto label5;

        $i18 = virtualinvoke r2.<android.view.KeyEvent: int getRepeatCount()>();

        if $i18 != 0 goto label5;

        z0 = 1;

     label1:
        if z0 == 0 goto label6;

        r5 = virtualinvoke r4.<android.view.KeyCharacterMap: android.view.KeyCharacterMap$FallbackAction getFallbackAction(int,int)>(i2, i3);

     label2:
        r3 = null;

        if r5 == null goto label4;

        $i7 = virtualinvoke r2.<android.view.KeyEvent: int getFlags()>();

        i4 = 1024 | $i7;

        $l9 = virtualinvoke r2.<android.view.KeyEvent: long getDownTime()>();

        $l8 = virtualinvoke r2.<android.view.KeyEvent: long getEventTime()>();

        $i11 = virtualinvoke r2.<android.view.KeyEvent: int getAction()>();

        $i10 = r5.<android.view.KeyCharacterMap$FallbackAction: int keyCode>;

        $i13 = virtualinvoke r2.<android.view.KeyEvent: int getRepeatCount()>();

        $i12 = r5.<android.view.KeyCharacterMap$FallbackAction: int metaState>;

        $i15 = virtualinvoke r2.<android.view.KeyEvent: int getDeviceId()>();

        $i14 = virtualinvoke r2.<android.view.KeyEvent: int getScanCode()>();

        $i16 = virtualinvoke r2.<android.view.KeyEvent: int getSource()>();

        r3 = staticinvoke <android.view.KeyEvent: android.view.KeyEvent obtain(long,long,int,int,int,int,int,int,int,int,java.lang.String)>($l9, $l8, $i11, $i10, $i13, $i12, $i15, $i14, i4, $i16, null);

        $z1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)>(r1, r3, i0);

        if $z1 != 0 goto label3;

        virtualinvoke r3.<android.view.KeyEvent: void recycle()>();

        r3 = null;

     label3:
        if z0 == 0 goto label7;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray mFallbackActions>;

        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r5);

     label4:
        return r3;

     label5:
        z0 = 0;

        goto label1;

     label6:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray mFallbackActions>;

        $r6 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r5 = (android.view.KeyCharacterMap$FallbackAction) $r6;

        goto label2;

     label7:
        $i17 = virtualinvoke r2.<android.view.KeyEvent: int getAction()>();

        if $i17 != 1 goto label4;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray mFallbackActions>;

        virtualinvoke $r8.<android.util.SparseArray: void remove(int)>(i2);

        virtualinvoke r5.<android.view.KeyCharacterMap$FallbackAction: void recycle()>();

        return r3;
    }

    public boolean doesForceHide(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        android.view.WindowManager$LayoutParams r2;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        $i0 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 2004 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void dump(java.lang.String, java.io.PrintWriter, java.lang.String[])
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.String r1, $r4, $r5, $r6;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80;
        android.view.WindowManagerPolicy$WindowState $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27;
        android.view.IApplicationToken $r10, $r24;
        com.android.internal.policy.impl.BarController $r17, $r18;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mSafeMode=");

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSafeMode>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mSystemReady=");

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemReady>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mSystemBooted=");

        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemBooted>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z2);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLidState=");

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLidOpenRotation=");

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidOpenRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mHdmiPlugged=");

        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z3);

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        if $i2 != 0 goto label01;

        $i79 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        if $i79 != 0 goto label01;

        $i80 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForceClearedSystemUiFlags>;

        if $i80 == 0 goto label02;

     label01:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLastSystemUiFlags=0x");

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mResettingSystemUiFlags=0x");

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r5);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mForceClearedSystemUiFlags=0x");

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForceClearedSystemUiFlags>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

     label02:
        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLastFocusNeedsMenu>;

        if $z4 == 0 goto label03;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLastFocusNeedsMenu=");

        $z25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLastFocusNeedsMenu>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z25);

     label03:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mUiMode=");

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUiMode>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i7);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mDockMode=");

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i6);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mCarDockRotation=");

        $i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCarDockRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i9);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mDeskDockRotation=");

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDeskDockRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i8);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mUserRotationMode=");

        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i11);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mUserRotation=");

        $i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i10);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mAllowAllRotations=");

        $i13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAllowAllRotations>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i13);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mCurrentAppOrientation=");

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i12);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mCarDockEnablesAccelerometer=");

        $z6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCarDockEnablesAccelerometer>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z6);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mDeskDockEnablesAccelerometer=");

        $z5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDeskDockEnablesAccelerometer>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z5);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLidKeyboardAccessibility=");

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidKeyboardAccessibility>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i15);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLidNavigationAccessibility=");

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidNavigationAccessibility>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLidControlsSleep=");

        $z7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidControlsSleep>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z7);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLongPressOnPowerBehavior=");

        $i16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnPowerBehavior>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i16);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mHasSoftInput=");

        $z10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z10);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mScreenOnEarly=");

        $z11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z11);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mScreenOnFully=");

        $z8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z8);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mOrientationSensorEnabled=");

        $z9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z9);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mOverscanScreen=(");

        $i19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i19);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i20);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(") ");

        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i17);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $i18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i18);

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        if $i23 != 0 goto label04;

        $i76 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        if $i76 != 0 goto label04;

        $i78 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        if $i78 != 0 goto label04;

        $i77 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        if $i77 == 0 goto label05;

     label04:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mOverscan left=");

        $i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i24);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" top=");

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i21);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" right=");

        $i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i22);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" bottom=");

        $i27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i27);

     label05:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mRestrictedOverscanScreen=(");

        $i28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i28);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i25);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(") ");

        $i26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenWidth>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i26);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $i32 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenHeight>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i32);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mUnrestrictedScreen=(");

        $i31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i31);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i30);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(") ");

        $i29 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i29);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $i36 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i36);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mRestrictedScreen=(");

        $i35 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i35);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i34 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i34);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(") ");

        $i33 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i33);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $i40 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i40);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mStableFullscreen=(");

        $i39 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i39);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i38 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i38);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i37 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i37);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i44 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i44);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mStable=(");

        $i43 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i43);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i42 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i42);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i41 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i41);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i49 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i49);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mSystem=(");

        $i50 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i50);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i51 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i51);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i52 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i52);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i45 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i45);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mCur=(");

        $i46 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i46);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i47 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i47);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i48 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i48);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i57 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i57);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mContent=(");

        $i58 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i58);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i59 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i59);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i60 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i60);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i53 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i53);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mDock=(");

        $i54 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i54);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i55 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i55);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i56 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i56);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i62 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i62);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mDockLayer=");

        $i61 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i61);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mStatusBarLayer=");

        $i63 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarLayer>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i63);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mShowingLockscreen=");

        $z14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingLockscreen>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mShowingDream=");

        $z13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingDream>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z13);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mDreamingLockscreen=");

        $z12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDreamingLockscreen>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z12);

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow>;

        if $r8 == null goto label06;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLastInputMethodWindow=");

        $r27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r27);

     label06:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow>;

        if $r7 == null goto label07;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLastInputMethodTargetWindow=");

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r19);

     label07:
        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r13 == null goto label08;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mStatusBar=");

        $r20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r20);

     label08:
        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r12 == null goto label09;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mNavigationBar=");

        $r21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r21);

     label09:
        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        if $r15 == null goto label10;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mKeyguard=");

        $r22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r22);

     label10:
        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mFocusedWindow>;

        if $r14 == null goto label11;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mFocusedWindow=");

        $r23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mFocusedWindow>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r23);

     label11:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IApplicationToken mFocusedApp>;

        if $r10 == null goto label12;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mFocusedApp=");

        $r24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IApplicationToken mFocusedApp>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r24);

     label12:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard>;

        if $r9 == null goto label13;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mWinDismissingKeyguard=");

        $r25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r25);

     label13:
        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r11 == null goto label14;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mTopFullscreenOpaqueWindowState=");

        $r26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r26);

     label14:
        $z15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForcingShowNavBar>;

        if $z15 == 0 goto label15;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mForcingShowNavBar=");

        $z23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForcingShowNavBar>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z23);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mForcingShowNavBarLayer=");

        $i72 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForcingShowNavBarLayer>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i72);

     label15:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mTopIsFullscreen=");

        $z20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTopIsFullscreen>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z20);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mHideLockScreen=");

        $z21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z21);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mForceStatusBar=");

        $z18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBar>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z18);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mForceStatusBarFromKeyguard=");

        $z19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z19);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mDismissKeyguard=");

        $i64 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i64);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mWinDismissingKeyguard=");

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard>;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.Object)>($r16);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mHomePressed=");

        $z16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomePressed>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z16);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mAllowLockscreenWhenOn=");

        $z17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAllowLockscreenWhenOn>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z17);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLockScreenTimeout=");

        $i71 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLockScreenTimeout>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i71);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLockScreenTimerActive=");

        $z22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLockScreenTimerActive>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z22);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mEndcallBehavior=");

        $i69 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mEndcallBehavior>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i69);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mIncallPowerBehavior=");

        $i70 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mIncallPowerBehavior>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i70);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLongPressOnHomeBehavior=");

        $i67 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i67);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLandscapeRotation=");

        $i68 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i68);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mSeascapeRotation=");

        $i65 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i65);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mPortraitRotation=");

        $i66 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i66);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mUpsideDownRotation=");

        $i75 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i75);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mDemoHdmiRotation=");

        $i74 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDemoHdmiRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i74);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mDemoHdmiRotationLock=");

        $z24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDemoHdmiRotationLock>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z24);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mUndockedHdmiRotation=");

        $i73 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUndockedHdmiRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i73);

        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        virtualinvoke $r18.<com.android.internal.policy.impl.BarController: void dump(java.io.PrintWriter,java.lang.String)>(r2, r1);

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r17.<com.android.internal.policy.impl.BarController: void dump(java.io.PrintWriter,java.lang.String)>(r2, r1);

        return;
    }

    public void enableKeyguard(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void setKeyguardEnabled(boolean)>(z0);

     label1:
        return;
    }

    public void enableScreenAfterBoot()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void readLidState()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void applyLidSwitchState()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateRotation(boolean)>(1);

        return;
    }

    public void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$OnKeyguardExitResult r1;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$OnKeyguardExitResult;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r3.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)>(r1);

     label1:
        return;
    }

    public void finishLayoutLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        return;
    }

    public int finishPostLayoutPolicyLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        android.view.WindowManagerPolicy$WindowState r2, r3, $r4, $r5, $r6, $r8, $r12, $r13, $r21, $r26;
        byte b0;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z13, $z14, $z15, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        int $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r7, $r9, $r14, $r17;
        android.os.Handler $r10, $r16;
        com.android.internal.policy.impl.PhoneWindowManager$11 $r11;
        com.android.internal.policy.impl.PhoneWindowManager$10 $r15;
        com.android.internal.policy.impl.BarController $r18, $r19, $r20, $r22, $r23, $r24, $r25;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r4 == null goto label12;

        $r26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        r1 = interfaceinvoke $r26.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

     label01:
        $z5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingDream>;

        if $z5 != 0 goto label02;

        $z24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingLockscreen>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDreamingLockscreen> = $z24;

     label02:
        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        b0 = 0;

        z0 = 0;

        if r2 == null goto label06;

        $z17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBar>;

        if $z17 != 0 goto label03;

        $z21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard>;

        if $z21 == 0 goto label14;

     label03:
        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        z1 = virtualinvoke $r18.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        b0 = 0;

        if z1 == 0 goto label04;

        b0 = 1;

     label04:
        $z20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTopIsFullscreen>;

        if $z20 == 0 goto label13;

        $r21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z22 = interfaceinvoke $r21.<android.view.WindowManagerPolicy$WindowState: boolean isAnimatingLw()>();

        if $z22 == 0 goto label13;

        z0 = 1;

     label05:
        $z19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard>;

        if $z19 == 0 goto label06;

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z18 = virtualinvoke $r19.<com.android.internal.policy.impl.BarController: boolean isTransientShowing()>();

        if $z18 == 0 goto label06;

        $r20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        virtualinvoke $r20.<com.android.internal.policy.impl.BarController: int updateVisibilityLw(boolean,int,int)>(0, $i7, $i8);

     label06:
        $z6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTopIsFullscreen>;

        if $z6 == z0 goto label08;

        if z0 != 0 goto label07;

        b0 = b0 | 1;

     label07:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTopIsFullscreen> = z0;

     label08:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        if $r5 == null goto label10;

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard>;

        if $i3 == 0 goto label20;

        $z14 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isKeyguardSecure()>();

        if $z14 != 0 goto label20;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        $z13 = interfaceinvoke $r13.<android.view.WindowManagerPolicy$WindowState: boolean hideLw(boolean)>(1);

        if $z13 == 0 goto label09;

        b0 = b0 | 7;

     label09:
        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z15 = virtualinvoke $r17.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if $z15 == 0 goto label10;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r15 = new com.android.internal.policy.impl.PhoneWindowManager$10;

        specialinvoke $r15.<com.android.internal.policy.impl.PhoneWindowManager$10: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        virtualinvoke $r16.<android.os.Handler: boolean post(java.lang.Runnable)>($r15);

     label10:
        $i2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()>();

        $i1 = -1073741818 & $i2;

        if $i1 == 0 goto label11;

        b0 = b0 | 1;

     label11:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateLockScreenTimeout()>();

        return b0;

     label12:
        r1 = null;

        goto label01;

     label13:
        z0 = 0;

        goto label05;

     label14:
        r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        b0 = 0;

        z0 = 0;

        if r3 == null goto label06;

        $i9 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i10 = 1024 & $i9;

        if $i10 != 0 goto label15;

        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        $i12 = 4 & $i11;

        if $i12 == 0 goto label17;

     label15:
        z0 = 1;

     label16:
        $r23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z23 = virtualinvoke $r23.<com.android.internal.policy.impl.BarController: boolean isTransientShowing()>();

        if $z23 == 0 goto label18;

        $r25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        z4 = virtualinvoke $r25.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        b0 = 0;

        if z4 == 0 goto label06;

        b0 = 1;

        goto label06;

     label17:
        z0 = 0;

        goto label16;

     label18:
        if z0 == 0 goto label19;

        $r24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        z3 = virtualinvoke $r24.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(0);

        b0 = 0;

        if z3 == 0 goto label06;

        b0 = 1;

        goto label06;

     label19:
        $r22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        z2 = virtualinvoke $r22.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        b0 = 0;

        if z2 == 0 goto label06;

        b0 = 1;

        goto label06;

     label20:
        $z7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        if $z7 == 0 goto label22;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        $z10 = interfaceinvoke $r12.<android.view.WindowManagerPolicy$WindowState: boolean hideLw(boolean)>(1);

        if $z10 == 0 goto label21;

        b0 = b0 | 7;

     label21:
        $z11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingDream>;

        if $z11 != 0 goto label10;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r14.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void setHidden(boolean)>(1);

        goto label10;

     label22:
        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard>;

        if $i4 == 0 goto label24;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard>;

        if $i5 != 1 goto label10;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        $z9 = interfaceinvoke $r8.<android.view.WindowManagerPolicy$WindowState: boolean showLw(boolean)>(1);

        if $z9 == 0 goto label23;

        b0 = b0 | 7;

     label23:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r9.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void setHidden(boolean)>(0);

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r11 = new com.android.internal.policy.impl.PhoneWindowManager$11;

        specialinvoke $r11.<com.android.internal.policy.impl.PhoneWindowManager$11: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        virtualinvoke $r10.<android.os.Handler: boolean post(java.lang.Runnable)>($r11);

        goto label10;

     label24:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard> = null;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        $z8 = interfaceinvoke $r6.<android.view.WindowManagerPolicy$WindowState: boolean showLw(boolean)>(1);

        if $z8 == 0 goto label25;

        b0 = b0 | 7;

     label25:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r7.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void setHidden(boolean)>(0);

        goto label10;
    }

    public int focusChangedLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r2;
        int $i0, $i1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManagerPolicy$WindowState;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mFocusedWindow> = r2;

        $i0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()>();

        $i1 = -1073741818 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int getAboveUniverseLayer()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int windowTypeToLayerLw(int)>(2010);

        return $i0;
    }

    public int getConfigDisplayHeight(int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int getNonDecorDisplayHeight(int,int,int)>(i0, i1, i2);

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarHeight>;

        $i5 = $i3 - $i4;

        return $i5;
    }

    public int getConfigDisplayWidth(int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, i2, $i3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int getNonDecorDisplayWidth(int,int,int)>(i0, i1, i2);

        return $i3;
    }

    public void getContentInsetHintLw(android.view.WindowManager$LayoutParams, android.graphics.Rect)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        android.graphics.Rect r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        r2 := @parameter1: android.graphics.Rect;

        i0 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i5 = r1.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        $i4 = r1.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        i1 = $i5 | $i4;

        $i6 = i0 & 65792;

        if $i6 != 65792 goto label8;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean canHideNavigationBar()>();

        if $z0 == 0 goto label2;

        $i42 = i1 & 512;

        if $i42 == 0 goto label2;

        $i40 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i43 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        i2 = $i40 + $i43;

        $i44 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i41 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        i3 = $i44 + $i41;

     label1:
        $i11 = i1 & 256;

        if $i11 == 0 goto label4;

        $i26 = i0 & 1024;

        if $i26 == 0 goto label3;

        $i37 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenLeft>;

        $i36 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenTop>;

        $i32 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight>;

        $i39 = i2 - $i32;

        $i33 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom>;

        $i38 = i3 - $i33;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i37, $i36, $i39, $i38);

        return;

     label2:
        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        i2 = $i8 + $i7;

        $i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        i3 = $i10 + $i9;

        goto label1;

     label3:
        $i35 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        $i34 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        $i30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        $i29 = i2 - $i30;

        $i31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        $i28 = i3 - $i31;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i35, $i34, $i29, $i28);

        return;

     label4:
        $i13 = i0 & 1024;

        if $i13 != 0 goto label5;

        $i12 = 33554432 & i0;

        if $i12 == 0 goto label6;

     label5:
        virtualinvoke r2.<android.graphics.Rect: void setEmpty()>();

        return;

     label6:
        $i15 = i1 & 1028;

        if $i15 != 0 goto label7;

        $i27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        $i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        $i20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        $i25 = i2 - $i20;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        $i22 = i3 - $i23;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i27, $i24, $i25, $i22);

        return;

     label7:
        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        $i18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        $i19 = i2 - $i14;

        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        $i16 = i3 - $i17;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i21, $i18, $i19, $i16);

        return;

     label8:
        virtualinvoke r2.<android.graphics.Rect: void setEmpty()>();

        return;
    }

    public void getContentRectLw(android.graphics.Rect)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.graphics.Rect;

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public int getMaxWallpaperLayer()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int windowTypeToLayerLw(int)>(2000);

        return $i0;
    }

    public int getNonDecorDisplayHeight(int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, i2, $i3;
        boolean $z0, $z1;
        int[] $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarCanMove>;

        if $z1 == 0 goto label1;

        if i0 >= i1 goto label2;

     label1:
        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        $i3 = $r1[i2];

        i1 = i1 - $i3;

     label2:
        return i1;
    }

    public int getNonDecorDisplayWidth(int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, i2, $i3;
        boolean $z0, $z1;
        int[] $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarCanMove>;

        if $z1 == 0 goto label1;

        if i0 <= i1 goto label1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        $i3 = $r1[i2];

        i0 = i0 - $i3;

     label1:
        return i0;
    }

    com.android.internal.statusbar.IStatusBarService getStatusBarService()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r7;
        com.android.internal.statusbar.IStatusBarService r3, $r4, $r6;
        android.os.IBinder $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mServiceAquireLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService>;

        if $r4 != null goto label2;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("statusbar");

        $r6 = staticinvoke <com.android.internal.statusbar.IStatusBarService$Stub: com.android.internal.statusbar.IStatusBarService asInterface(android.os.IBinder)>($r5);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService> = $r6;

     label2:
        r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService>;

        exitmonitor r1;

     label3:
        return r3;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getSystemDecorLayerLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState $r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r1 == null goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $i1 = interfaceinvoke $r4.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        return $i1;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $i0 = interfaceinvoke $r3.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        return $i0;

     label2:
        return 0;
    }

    public int getUserRotationMode()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "accelerometer_rotation", 0, -2);

        if $i0 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    boolean goHome()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Intent r2, $r6, $r7;
        int i0, $i1, $i2;
        android.app.IActivityManager $r3, $r4, $r11;
        android.content.Context $r5, $r10;
        android.content.ContentResolver $r8, $r13;
        java.lang.String $r9, $r12;
        android.os.RemoteException $r14;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

     label1:
        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.uts-test-mode", 0);

        if $i1 != 1 goto label4;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WindowManager", "UTS-TEST-MODE");

     label2:
        $r4 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r9 = virtualinvoke $r7.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r8);

        $i2 = interfaceinvoke $r4.<android.app.IActivityManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)>(null, null, $r6, $r9, null, null, 0, 1, null, null, null, -2);

        if $i2 != 1 goto label9;

     label3:
        return 0;

     label4:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void stopAppSwitches()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows()>();

        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent createHomeDockIntent()>();

     label5:
        if r2 == null goto label2;

     label6:
        $r11 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r13 = virtualinvoke $r10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r12 = virtualinvoke r2.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r13);

        i0 = interfaceinvoke $r11.<android.app.IActivityManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)>(null, null, r2, $r12, null, null, 0, 1, null, null, null, -2);

     label7:
        if i0 != 1 goto label2;

        return 0;

     label8:
        $r14 := @caughtexception;

     label9:
        return 1;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label2 to label3 with label8;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    void handleVolumeKey(int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1;
        byte b2;
        android.media.IAudioService r1;
        java.lang.Throwable r2, $r10;
        android.os.RemoteException r3, $r11;
        android.os.PowerManager$WakeLock $r4, $r7, $r12, $r17;
        android.content.Context $r5, $r8;
        java.lang.String $r6, $r9, $r16;
        java.lang.StringBuilder $r13, $r14, $r15;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        b2 = 1;

        r1 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: android.media.IAudioService getAudioService()>();

        if r1 != null goto label01;

        return;

     label01:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void acquire()>();

     label02:
        if i0 != 3 goto label06;

        if i1 != 24 goto label05;

     label03:
        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustLocalOrRemoteStreamVolume(int,int,java.lang.String)>(i0, b2, $r9);

     label04:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r7.<android.os.PowerManager$WakeLock: void release()>();

        return;

     label05:
        b2 = -1;

        goto label03;

     label06:
        if i1 != 24 goto label12;

     label07:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustStreamVolume(int,int,int,java.lang.String)>(i0, b2, 0, $r6);

     label08:
        goto label04;

     label09:
        $r11 := @caughtexception;

        r3 = $r11;

     label10:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IAudioService.adjust*StreamVolume() threw RemoteException ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r16);

     label11:
        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r17.<android.os.PowerManager$WakeLock: void release()>();

        return;

     label12:
        b2 = -1;

        goto label07;

     label13:
        $r10 := @caughtexception;

        r2 = $r10;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r12.<android.os.PowerManager$WakeLock: void release()>();

        throw r2;

        catch android.os.RemoteException from label01 to label02 with label09;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch android.os.RemoteException from label03 to label04 with label09;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
    }

    public boolean hasNavigationBar()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar>;

        return $z0;
    }

    public void hideBootMessages()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.PhoneWindowManager$22 $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r1 = new com.android.internal.policy.impl.PhoneWindowManager$22;

        specialinvoke $r1.<com.android.internal.policy.impl.PhoneWindowManager$22: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public boolean inKeyguardRestrictedKeyInputMode()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isInputRestricted()>();

        return $z0;
    }

    public void init(android.content.Context, android.view.IWindowManager, android.view.WindowManagerPolicy$WindowManagerFuncs)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context r1, $r15, $r44, $r46, $r48, $r50, $r51, $r57, $r66, $r77, $r78, $r82, $r87, $r88, $r91, $r94;
        android.view.IWindowManager r2;
        android.view.WindowManagerPolicy$WindowManagerFuncs r3, $r68;
        android.content.IntentFilter r5, r7, r8, r104, r105, r106;
        android.content.Intent r6, $r23, $r27, $r28, $r33, $r34, $r36, r101, r102, r103;
        java.lang.String $r9, $r10, $r42, $r43, $r54, $r55, $r63, $r64;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.os.Handler $r12, $r18, $r19;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r14, r98;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver $r17, r99;
        android.content.res.Resources $r21, $r45, $r47, $r49, $r52, $r56, $r58, $r74, $r79, $r83, $r84, $r89, $r93;
        com.android.internal.policy.impl.ShortcutManager $r22, r100;
        android.os.PowerManager$WakeLock $r38;
        android.os.PowerManager $r39, $r40, $r90;
        java.lang.Object $r41, $r80;
        android.content.BroadcastReceiver $r59, $r65, $r71;
        com.android.internal.policy.impl.SystemGesturesPointerEventListener $r69, r108;
        long[] $r75, $r76, $r85, $r86, $r95;
        android.os.Vibrator $r81;
        android.os.RemoteException $r96;
        com.android.internal.policy.impl.PhoneWindowManager$PolicyHandler r97;
        com.android.internal.policy.impl.PhoneWindowManager$6 r107;
        com.android.internal.policy.impl.ImmersiveModeConfirmation r109;
        com.android.internal.policy.impl.GlobalKeyManager r110;
        android.view.WindowManagerPolicy$PointerEventListener r111;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.IWindowManager;

        r3 := @parameter2: android.view.WindowManagerPolicy$WindowManagerFuncs;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext> = r1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager> = r2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs> = r3;

        $r10 = "1";

        $r9 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.config.headless", "0");

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHeadless> = $z0;

        r97 = new com.android.internal.policy.impl.PhoneWindowManager$PolicyHandler;

        specialinvoke r97.<com.android.internal.policy.impl.PhoneWindowManager$PolicyHandler: void <init>(com.android.internal.policy.impl.PhoneWindowManager,com.android.internal.policy.impl.PhoneWindowManager$1)>(r0, null);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler> = r97;

        r98 = new com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        specialinvoke r98.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void <init>(com.android.internal.policy.impl.PhoneWindowManager,android.content.Context,android.os.Handler)>(r0, $r15, $r12);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener> = r98;

     label1:
        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        $i0 = interfaceinvoke r2.<android.view.IWindowManager: int getRotation()>();

        virtualinvoke $r14.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void setCurrentRotation(int)>($i0);

     label2:
        r99 = new com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver;

        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        specialinvoke r99.<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void <init>(com.android.internal.policy.impl.PhoneWindowManager,android.os.Handler)>(r0, $r18);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver mSettingsObserver> = r99;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver mSettingsObserver>;

        virtualinvoke $r17.<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void observe()>();

        r100 = new com.android.internal.policy.impl.ShortcutManager;

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        specialinvoke r100.<com.android.internal.policy.impl.ShortcutManager: void <init>(android.content.Context,android.os.Handler)>(r1, $r19);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ShortcutManager mShortcutManager> = r100;

        $r22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ShortcutManager mShortcutManager>;

        virtualinvoke $r22.<com.android.internal.policy.impl.ShortcutManager: void observe()>();

        $r21 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r21.<android.content.res.Resources: int getInteger(int)>(17694743);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUiMode> = $i1;

        r101 = new android.content.Intent;

        specialinvoke r101.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MAIN", null);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent> = r101;

        $r23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        virtualinvoke $r23.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        $r28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        virtualinvoke $r28.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        r102 = new android.content.Intent;

        specialinvoke r102.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MAIN", null);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mCarDockIntent> = r102;

        $r27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mCarDockIntent>;

        virtualinvoke $r27.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.CAR_DOCK");

        $r33 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mCarDockIntent>;

        virtualinvoke $r33.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        r103 = new android.content.Intent;

        specialinvoke r103.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MAIN", null);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mDeskDockIntent> = r103;

        $r36 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mDeskDockIntent>;

        virtualinvoke $r36.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DESK_DOCK");

        $r34 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mDeskDockIntent>;

        virtualinvoke $r34.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        $r41 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r40 = (android.os.PowerManager) $r41;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager> = $r40;

        $r39 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $r38 = virtualinvoke $r39.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "PhoneWindowManager.mBroadcastWakeLock");

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock> = $r38;

        $r43 = "1";

        $r42 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.debuggable");

        $z1 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r42);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mEnableShiftMenuBugReports> = $z1;

        $i2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int readRotation(int)>(17694739);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidOpenRotation> = $i2;

        $i5 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int readRotation(int)>(17694741);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCarDockRotation> = $i5;

        $i4 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int readRotation(int)>(17694740);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDeskDockRotation> = $i4;

        $i3 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int readRotation(int)>(17694742);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUndockedHdmiRotation> = $i3;

        $r44 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r47 = virtualinvoke $r44.<android.content.Context: android.content.res.Resources getResources()>();

        $z2 = virtualinvoke $r47.<android.content.res.Resources: boolean getBoolean(int)>(17891361);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCarDockEnablesAccelerometer> = $z2;

        $r46 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r45 = virtualinvoke $r46.<android.content.Context: android.content.res.Resources getResources()>();

        $z3 = virtualinvoke $r45.<android.content.res.Resources: boolean getBoolean(int)>(17891360);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDeskDockEnablesAccelerometer> = $z3;

        $r51 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r52 = virtualinvoke $r51.<android.content.Context: android.content.res.Resources getResources()>();

        $i7 = virtualinvoke $r52.<android.content.res.Resources: int getInteger(int)>(17694746);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidKeyboardAccessibility> = $i7;

        $r48 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r49 = virtualinvoke $r48.<android.content.Context: android.content.res.Resources getResources()>();

        $i6 = virtualinvoke $r49.<android.content.res.Resources: int getInteger(int)>(17694747);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidNavigationAccessibility> = $i6;

        $r50 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r56 = virtualinvoke $r50.<android.content.Context: android.content.res.Resources getResources()>();

        $z5 = virtualinvoke $r56.<android.content.res.Resources: boolean getBoolean(int)>(17891362);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidControlsSleep> = $z5;

        $r57 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r58 = virtualinvoke $r57.<android.content.Context: android.content.res.Resources getResources()>();

        $z4 = virtualinvoke $r58.<android.content.res.Resources: boolean getBoolean(int)>(17891371);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTranslucentDecorEnabled> = $z4;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void readConfigurationDependentBehaviors()>();

        r104 = new android.content.IntentFilter;

        specialinvoke r104.<android.content.IntentFilter: void <init>()>();

        r5 = r104;

        $r54 = <android.app.UiModeManager: java.lang.String ACTION_ENTER_CAR_MODE>;

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>($r54);

        $r55 = <android.app.UiModeManager: java.lang.String ACTION_EXIT_CAR_MODE>;

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>($r55);

        $r64 = <android.app.UiModeManager: java.lang.String ACTION_ENTER_DESK_MODE>;

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>($r64);

        $r63 = <android.app.UiModeManager: java.lang.String ACTION_EXIT_DESK_MODE>;

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>($r63);

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DOCK_EVENT");

        $r65 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mDockReceiver>;

        r6 = virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r65, r5);

        if r6 == null goto label3;

        $i8 = virtualinvoke r6.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.intent.extra.DOCK_STATE", 0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode> = $i8;

     label3:
        r105 = new android.content.IntentFilter;

        specialinvoke r105.<android.content.IntentFilter: void <init>()>();

        r7 = r105;

        virtualinvoke r7.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STARTED");

        virtualinvoke r7.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STOPPED");

        $r59 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mDreamReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r59, r7);

        r106 = new android.content.IntentFilter;

        specialinvoke r106.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_SWITCHED");

        r8 = r106;

        $r71 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mMultiuserReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r71, r8);

        r108 = new com.android.internal.policy.impl.SystemGesturesPointerEventListener;

        r107 = new com.android.internal.policy.impl.PhoneWindowManager$6;

        specialinvoke r107.<com.android.internal.policy.impl.PhoneWindowManager$6: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        specialinvoke r108.<com.android.internal.policy.impl.SystemGesturesPointerEventListener: void <init>(android.content.Context,com.android.internal.policy.impl.SystemGesturesPointerEventListener$Callbacks)>(r1, r107);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.SystemGesturesPointerEventListener mSystemGestures> = r108;

        r109 = new com.android.internal.policy.impl.ImmersiveModeConfirmation;

        $r66 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke r109.<com.android.internal.policy.impl.ImmersiveModeConfirmation: void <init>(android.content.Context)>($r66);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation> = r109;

        $r68 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $r69 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.SystemGesturesPointerEventListener mSystemGestures>;

        r111 = (android.view.WindowManagerPolicy$PointerEventListener) $r69;

        interfaceinvoke $r68.<android.view.WindowManagerPolicy$WindowManagerFuncs: void registerPointerEventListener(android.view.WindowManagerPolicy$PointerEventListener)>(r111);

        $r80 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("vibrator");

        $r81 = (android.os.Vibrator) $r80;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Vibrator mVibrator> = $r81;

        $r78 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r79 = virtualinvoke $r78.<android.content.Context: android.content.res.Resources getResources()>();

        $r76 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r79, 17235993);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mLongPressVibePattern> = $r76;

        $r77 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r74 = virtualinvoke $r77.<android.content.Context: android.content.res.Resources getResources()>();

        $r75 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r74, 17235994);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mVirtualKeyVibePattern> = $r75;

        $r88 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r89 = virtualinvoke $r88.<android.content.Context: android.content.res.Resources getResources()>();

        $r86 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r89, 17235995);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mKeyboardTapVibePattern> = $r86;

        $r87 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r84 = virtualinvoke $r87.<android.content.Context: android.content.res.Resources getResources()>();

        $r85 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r84, 17235996);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mSafeModeDisabledVibePattern> = $r85;

        $r82 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r83 = virtualinvoke $r82.<android.content.Context: android.content.res.Resources getResources()>();

        $r95 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r83, 17235997);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mSafeModeEnabledVibePattern> = $r95;

        $r94 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r93 = virtualinvoke $r94.<android.content.Context: android.content.res.Resources getResources()>();

        $z7 = virtualinvoke $r93.<android.content.res.Resources: boolean getBoolean(int)>(17891357);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenshotChordEnabled> = $z7;

        r110 = new com.android.internal.policy.impl.GlobalKeyManager;

        $r91 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke r110.<com.android.internal.policy.impl.GlobalKeyManager: void <init>(android.content.Context)>($r91);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalKeyManager mGlobalKeyManager> = r110;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void initializeHdmiState()>();

        $r90 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $z6 = virtualinvoke $r90.<android.os.PowerManager: boolean isScreenOn()>();

        if $z6 == 0 goto label4;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)>(null);

        return;

     label4:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)>(2);

        return;

     label5:
        $r96 := @caughtexception;

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    void initializeHdmiState()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, z1, z2, z3, $z4;
        java.io.FileReader r1, r2, $r12;
        java.io.IOException r3, $r16, $r18, $r27, $r28, $r29, $r32;
        java.lang.Throwable r4, $r30, $r31;
        java.lang.NumberFormatException r7, $r22, $r24;
        char[] r9;
        int i0, i1, $i2, i5;
        java.io.File $r10;
        android.os.UEventObserver $r13;
        java.lang.String $r14, $r20, $r26;
        java.lang.StringBuilder $r15, $r17, $r19, $r21, $r23, $r25;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 = 1;

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>("/sys/devices/virtual/switch/hdmi/state");

        z1 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        z2 = 0;

        if z1 == 0 goto label08;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.UEventObserver mHDMIObserver>;

        virtualinvoke $r13.<android.os.UEventObserver: void startObserving(java.lang.String)>("DEVPATH=/devices/virtual/switch/hdmi");

        r1 = null;

     label01:
        $r12 = new java.io.FileReader;

        specialinvoke $r12.<java.io.FileReader: void <init>(java.lang.String)>("/sys/class/switch/hdmi/state");

        r2 = $r12;

     label02:
        r9 = newarray (char)[15];

        i1 = virtualinvoke r2.<java.io.FileReader: int read(char[])>(r9);

     label03:
        z2 = 0;

        i5 = (int) 1;

        if i1 <= i5 goto label06;

     label04:
        $r14 = new java.lang.String;

        $i2 = i1 - 1;

        specialinvoke $r14.<java.lang.String: void <init>(char[],int,int)>(r9, 0, $i2);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r14);

     label05:
        if i0 == 0 goto label11;

        z2 = 1;

     label06:
        if r2 == null goto label08;

     label07:
        virtualinvoke r2.<java.io.FileReader: void close()>();

     label08:
        if z2 != 0 goto label28;

        z3 = 1;

     label09:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged> = z3;

        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged>;

        if $z4 != 0 goto label29;

     label10:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setHdmiPlugged(boolean)>(z0);

        return;

     label11:
        z2 = 0;

        goto label06;

     label12:
        $r18 := @caughtexception;

        r3 = $r18;

     label13:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t read hdmi state from /sys/class/switch/hdmi/state: ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r20);

     label14:
        z2 = 0;

        if r1 == null goto label08;

     label15:
        virtualinvoke r1.<java.io.FileReader: void close()>();

     label16:
        z2 = 0;

        goto label08;

     label17:
        $r29 := @caughtexception;

        z2 = 0;

        goto label08;

     label18:
        $r22 := @caughtexception;

        r7 = $r22;

     label19:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t read hdmi state from /sys/class/switch/hdmi/state: ");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r26);

     label20:
        z2 = 0;

        if r1 == null goto label08;

     label21:
        virtualinvoke r1.<java.io.FileReader: void close()>();

     label22:
        z2 = 0;

        goto label08;

     label23:
        $r32 := @caughtexception;

        z2 = 0;

        goto label08;

     label24:
        $r31 := @caughtexception;

        r4 = $r31;

     label25:
        if r1 == null goto label27;

     label26:
        virtualinvoke r1.<java.io.FileReader: void close()>();

     label27:
        throw r4;

     label28:
        z3 = 0;

        goto label09;

     label29:
        z0 = 0;

        goto label10;

     label30:
        $r28 := @caughtexception;

        goto label08;

     label31:
        $r27 := @caughtexception;

        goto label27;

     label32:
        $r30 := @caughtexception;

        r4 = $r30;

        r1 = r2;

        goto label25;

     label33:
        $r24 := @caughtexception;

        r7 = $r24;

        r1 = r2;

        goto label19;

     label34:
        $r16 := @caughtexception;

        r3 = $r16;

        r1 = r2;

        goto label13;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.NumberFormatException from label01 to label02 with label18;
        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.io.IOException from label02 to label03 with label34;
        catch java.lang.NumberFormatException from label02 to label03 with label33;
        catch java.lang.Throwable from label02 to label03 with label32;
        catch java.io.IOException from label04 to label05 with label34;
        catch java.lang.NumberFormatException from label04 to label05 with label33;
        catch java.lang.Throwable from label04 to label05 with label32;
        catch java.io.IOException from label07 to label08 with label30;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.io.IOException from label26 to label27 with label31;
    }

    public long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        android.view.KeyEvent r2;
        int i0, i1, i2, i3, i4, i6, i7, i8, i11, i12, i13, i14, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i40, $i41, $i42, $i43, $i44, $i47, $i48, $i50;
        boolean z0, z1, z2, $z3, $z5, $z6, $z7, $z9, $z10, $z11, $z12, $z14, $z15, $z16, $z17, $z18, $z19, $z21, $z22, $z23;
        byte b5, b9, b10, $b52;
        android.content.Intent r3, r5, r7, r12, r13, r85, r86;
        java.lang.String r4, $r50, $r51, $r65, $r66, $r74, $r83, $r84;
        android.content.ActivityNotFoundException r6, r9, r11, $r69, $r72, $r81;
        android.view.KeyCharacterMap r8, r10;
        android.view.WindowManager$LayoutParams r14;
        android.os.RemoteException r15, $r79;
        com.android.internal.telephony.ITelephony r16;
        long l15, l16, $l49, $l53, $l54;
        android.content.ContentResolver $r17, $r22, $r27, $r31;
        android.content.Context $r18, $r21, $r25, $r28, $r29, $r32, $r38, $r42, $r46, $r60;
        android.os.PowerManager $r19, $r20, $r23;
        android.os.UserHandle $r26, $r39, $r43, $r52, $r59;
        com.android.internal.policy.impl.GlobalKeyManager $r30;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r33;
        android.util.SparseArray $r35;
        java.lang.Object $r36;
        com.android.internal.policy.impl.ShortcutManager $r37, $r41;
        java.lang.Runnable $r45, $r54, $r62, $r63;
        android.os.Handler $r47, $r55, $r61, $r64;
        java.lang.StringBuilder $r48, $r49, $r67, $r68, $r71, $r75, $r76, $r77, $r78, $r82, r87, r88, r89, r90;
        int[] $r56, $r57;
        java.lang.Throwable r91, r92, r93, r94;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardOn()>();

        i1 = virtualinvoke r2.<android.view.KeyEvent: int getKeyCode()>();

        i2 = virtualinvoke r2.<android.view.KeyEvent: int getRepeatCount()>();

        i3 = virtualinvoke r2.<android.view.KeyEvent: int getMetaState()>();

        i4 = virtualinvoke r2.<android.view.KeyEvent: int getFlags()>();

        $i17 = virtualinvoke r2.<android.view.KeyEvent: int getAction()>();

        if $i17 != 0 goto label02;

        z1 = 1;

     label01:
        z2 = virtualinvoke r2.<android.view.KeyEvent: boolean isCanceled()>();

        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenshotChordEnabled>;

        if $z3 == 0 goto label05;

        $i47 = i4 & 1024;

        if $i47 != 0 goto label05;

        $z23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered>;

        if $z23 == 0 goto label03;

        $z21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered>;

        if $z21 != 0 goto label03;

        l16 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l54 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long mVolumeDownKeyTime>;

        l15 = 150L + $l54;

        $b52 = l16 cmp l15;

        if $b52 >= 0 goto label03;

        $l53 = l15 - l16;

        return $l53;

     label02:
        z1 = 0;

        goto label01;

     label03:
        if i1 != 25 goto label05;

        $z22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyConsumedByScreenshotChord>;

        if $z22 == 0 goto label05;

        if z1 != 0 goto label04;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyConsumedByScreenshotChord> = 0;

     label04:
        return -1L;

     label05:
        if i1 != 3 goto label26;

        if z1 != 0 goto label14;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPreloadRecentApps()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomePressed> = 0;

        $z17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeConsumed>;

        if $z17 == 0 goto label06;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeConsumed> = 0;

        return -1L;

     label06:
        if z2 == 0 goto label07;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "Ignoring HOME; event canceled.");

        return -1L;

     label07:
        r16 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getTelephonyService()>();

     label08:
        if r16 == null goto label12;

     label09:
        $z19 = interfaceinvoke r16.<com.android.internal.telephony.ITelephony: boolean isRinging()>();

        if $z19 == 0 goto label12;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "Ignoring HOME; there\'s a ringing incoming call.");

     label10:
        return -1L;

     label11:
        $r79 := @caughtexception;

        r15 = $r79;

        r91 = (java.lang.Throwable) r15;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "RemoteException from getPhoneInterface()", r91);

     label12:
        $i48 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        if $i48 == 0 goto label13;

        $r61 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r62 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mHomeDoubleTapTimeoutRunnable>;

        virtualinvoke $r61.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r62);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeDoubleTapPending> = 1;

        $r64 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r63 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mHomeDoubleTapTimeoutRunnable>;

        $i50 = staticinvoke <android.view.ViewConfiguration: int getDoubleTapTimeout()>();

        $l49 = (long) $i50;

        virtualinvoke $r64.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r63, $l49);

        return -1L;

     label13:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()>();

        return -1L;

     label14:
        if r1 == null goto label17;

        r14 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

     label15:
        if r14 == null goto label21;

        i13 = r14.<android.view.WindowManager$LayoutParams: int type>;

        if i13 == 2004 goto label16;

        if i13 == 2029 goto label16;

        if i13 != 2009 goto label18;

     label16:
        return 0L;

     label17:
        r14 = null;

        goto label15;

     label18:
        $r56 = <com.android.internal.policy.impl.PhoneWindowManager: int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK>;

        i14 = lengthof $r56;

        i12 = 0;

     label19:
        if i12 >= i14 goto label21;

        $r57 = <com.android.internal.policy.impl.PhoneWindowManager: int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK>;

        $i41 = $r57[i12];

        if i13 != $i41 goto label20;

        return -1L;

     label20:
        i12 = i12 + 1;

        goto label19;

     label21:
        if i2 != 0 goto label25;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomePressed> = 1;

        $z18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeDoubleTapPending>;

        if $z18 == 0 goto label23;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeDoubleTapPending> = 0;

        $r55 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r54 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mHomeDoubleTapTimeoutRunnable>;

        virtualinvoke $r55.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r54);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void handleDoubleTapOnHome()>();

     label22:
        return -1L;

     label23:
        $i44 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i44 == 1 goto label24;

        $i40 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        if $i40 != 1 goto label22;

     label24:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void preloadRecentApps()>();

        goto label22;

     label25:
        $i42 = virtualinvoke r2.<android.view.KeyEvent: int getFlags()>();

        $i43 = 128 & $i42;

        if $i43 == 0 goto label22;

        if z0 != 0 goto label22;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void handleLongPressOnHome()>();

        goto label22;

     label26:
        if i1 != 82 goto label27;

        if z1 == 0 goto label46;

        if i2 != 0 goto label46;

        $z16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mEnableShiftMenuBugReports>;

        if $z16 == 0 goto label46;

        $i38 = i3 & 1;

        if $i38 != 1 goto label46;

        r85 = new android.content.Intent;

        specialinvoke r85.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.BUG_REPORT");

        r13 = r85;

        $r60 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r59 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r60.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r13, $r59, null, null, null, 0, null, null);

        return -1L;

     label27:
        if i1 != 84 goto label30;

        if z1 == 0 goto label29;

        if i2 != 0 goto label28;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSearchKeyShortcutPending> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mConsumeSearchKeyUp> = 0;

     label28:
        return 0L;

     label29:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSearchKeyShortcutPending> = 0;

        $z14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mConsumeSearchKeyUp>;

        if $z14 == 0 goto label28;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mConsumeSearchKeyUp> = 0;

        return -1L;

     label30:
        if i1 != 187 goto label33;

        if z0 != 0 goto label31;

        if z1 == 0 goto label32;

        if i2 != 0 goto label32;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void preloadRecentApps()>();

     label31:
        return -1L;

     label32:
        if z1 != 0 goto label31;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void toggleRecentApps()>();

        goto label31;

     label33:
        if i1 != 219 goto label38;

        if z1 == 0 goto label36;

        if i2 != 0 goto label35;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAssistKeyLongPressed> = 0;

     label34:
        return -1L;

     label35:
        if i2 != 1 goto label34;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAssistKeyLongPressed> = 1;

        if z0 != 0 goto label34;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistLongPressAction()>();

        goto label34;

     label36:
        $z15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAssistKeyLongPressed>;

        if $z15 == 0 goto label37;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAssistKeyLongPressed> = 0;

        goto label34;

     label37:
        if z0 != 0 goto label34;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistAction()>();

        goto label34;

     label38:
        if i1 != 120 goto label40;

        if z1 == 0 goto label39;

        if i2 != 0 goto label39;

        $r47 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r45 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotRunnable>;

        virtualinvoke $r47.<android.os.Handler: boolean post(java.lang.Runnable)>($r45);

     label39:
        return -1L;

     label40:
        if i1 == 221 goto label41;

        if i1 != 220 goto label46;

     label41:
        if z1 == 0 goto label44;

        if i1 != 221 goto label45;

        b5 = 1;

     label42:
        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r17 = virtualinvoke $r18.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i18 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r17, "screen_brightness_mode", 0, -3);

        if $i18 == 0 goto label43;

        $r32 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r31 = virtualinvoke $r32.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r31, "screen_brightness_mode", 0, -3);

     label43:
        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        i6 = virtualinvoke $r19.<android.os.PowerManager: int getMinimumScreenBrightnessSetting()>();

        $r20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        i7 = virtualinvoke $r20.<android.os.PowerManager: int getMaximumScreenBrightnessSetting()>();

        $i19 = i7 - i6;

        $i20 = 10 + $i19;

        $i21 = -1 + $i20;

        $i22 = $i21 / 10;

        $i26 = b5 * $i22;

        $r21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r22 = virtualinvoke $r21.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $i23 = virtualinvoke $r23.<android.os.PowerManager: int getDefaultScreenBrightnessSetting()>();

        $i24 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r22, "screen_brightness", $i23, -3);

        $i25 = $i26 + $i24;

        $i27 = staticinvoke <java.lang.Math: int min(int,int)>(i7, $i25);

        i8 = staticinvoke <java.lang.Math: int max(int,int)>(i6, $i27);

        $r28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r27 = virtualinvoke $r28.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r27, "screen_brightness", i8, -3);

        r86 = new android.content.Intent;

        specialinvoke r86.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SHOW_BRIGHTNESS_DIALOG");

        r3 = r86;

        $r25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r26 = <android.os.UserHandle: android.os.UserHandle CURRENT_OR_SELF>;

        virtualinvoke $r25.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r3, $r26);

     label44:
        return -1L;

     label45:
        b5 = -1;

        goto label42;

     label46:
        $z7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSearchKeyShortcutPending>;

        if $z7 == 0 goto label51;

        r10 = virtualinvoke r2.<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>();

        $z12 = virtualinvoke r10.<android.view.KeyCharacterMap: boolean isPrintingKey(int)>(i1);

        if $z12 == 0 goto label51;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mConsumeSearchKeyUp> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSearchKeyShortcutPending> = 0;

        if z1 == 0 goto label48;

        if i2 != 0 goto label48;

        if z0 != 0 goto label48;

        $r41 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ShortcutManager mShortcutManager>;

        r12 = virtualinvoke $r41.<com.android.internal.policy.impl.ShortcutManager: android.content.Intent getIntent(android.view.KeyCharacterMap,int,int)>(r10, i1, i3);

        if r12 == null goto label50;

        virtualinvoke r12.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

     label47:
        $r46 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r52 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r46.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r12, $r52);

     label48:
        return -1L;

     label49:
        $r72 := @caughtexception;

        r11 = $r72;

        r87 = new java.lang.StringBuilder;

        specialinvoke r87.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping shortcut key combination because the activity to which it is registered was not found: SEARCH+");

        $r66 = staticinvoke <android.view.KeyEvent: java.lang.String keyCodeToString(int)>(i1);

        $r67 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r65 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        r92 = (java.lang.Throwable) r11;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r65, r92);

        goto label48;

     label50:
        r88 = new java.lang.StringBuilder;

        specialinvoke r88.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping unregistered shortcut key combination: SEARCH+");

        $r50 = staticinvoke <android.view.KeyEvent: java.lang.String keyCodeToString(int)>(i1);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r51);

        goto label48;

     label51:
        if z1 == 0 goto label55;

        if i2 != 0 goto label55;

        if z0 != 0 goto label55;

        $i37 = 65536 & i3;

        if $i37 == 0 goto label55;

        r8 = virtualinvoke r2.<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>();

        $z11 = virtualinvoke r8.<android.view.KeyCharacterMap: boolean isPrintingKey(int)>(i1);

        if $z11 == 0 goto label55;

        $r37 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ShortcutManager mShortcutManager>;

        $i36 = -458753 & i3;

        r7 = virtualinvoke $r37.<com.android.internal.policy.impl.ShortcutManager: android.content.Intent getIntent(android.view.KeyCharacterMap,int,int)>(r8, i1, $i36);

        if r7 == null goto label55;

        virtualinvoke r7.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

     label52:
        $r42 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r43 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r42.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r7, $r43);

     label53:
        return -1L;

     label54:
        $r69 := @caughtexception;

        r9 = $r69;

        r89 = new java.lang.StringBuilder;

        specialinvoke r89.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping shortcut key combination because the activity to which it is registered was not found: META+");

        $r83 = staticinvoke <android.view.KeyEvent: java.lang.String keyCodeToString(int)>(i1);

        $r82 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r83);

        $r84 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        r93 = (java.lang.Throwable) r9;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r84, r93);

        goto label53;

     label55:
        if z1 == 0 goto label59;

        if i2 != 0 goto label59;

        if z0 != 0 goto label59;

        $r35 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        $r36 = virtualinvoke $r35.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r4 = (java.lang.String) $r36;

        if r4 == null goto label59;

        r5 = staticinvoke <android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>("android.intent.action.MAIN", r4);

        virtualinvoke r5.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

     label56:
        $r38 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r39 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r38.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r5, $r39);

     label57:
        return -1L;

     label58:
        $r81 := @caughtexception;

        r6 = $r81;

        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping application launch key because the activity to which it is registered was not found: keyCode=");

        $r78 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r77 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", category=");

        $r75 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r74 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        r94 = (java.lang.Throwable) r6;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r74, r94);

        goto label57;

     label59:
        if z1 == 0 goto label61;

        if i2 != 0 goto label61;

        if i1 != 61 goto label61;

        $i29 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRecentAppsDialogHeldModifiers>;

        if $i29 != 0 goto label63;

        if z0 != 0 goto label63;

        $i35 = virtualinvoke r2.<android.view.KeyEvent: int getModifiers()>();

        i11 = -194 & $i35;

        $z9 = staticinvoke <android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>(i11, 2);

        if $z9 != 0 goto label60;

        $z10 = staticinvoke <android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>(i11, 65536);

        if $z10 == 0 goto label63;

     label60:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRecentAppsDialogHeldModifiers> = i11;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void showOrHideRecentAppsDialog(int)>(1);

        return -1L;

     label61:
        if z1 != 0 goto label63;

        $i30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRecentAppsDialogHeldModifiers>;

        if $i30 == 0 goto label63;

        $i31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRecentAppsDialogHeldModifiers>;

        $i28 = i3 & $i31;

        if $i28 != 0 goto label63;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRecentAppsDialogHeldModifiers> = 0;

        if z0 == 0 goto label66;

        b9 = 2;

     label62:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void showOrHideRecentAppsDialog(int)>(b9);

     label63:
        if z1 == 0 goto label68;

        if i2 != 0 goto label68;

        if i1 == 204 goto label64;

        if i1 != 62 goto label68;

        $i33 = i3 & 28672;

        if $i33 == 0 goto label68;

     label64:
        $i34 = i3 & 193;

        if $i34 == 0 goto label67;

        b10 = -1;

     label65:
        $r33 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $i32 = virtualinvoke r2.<android.view.KeyEvent: int getDeviceId()>();

        interfaceinvoke $r33.<android.view.WindowManagerPolicy$WindowManagerFuncs: void switchKeyboardLayout(int,int)>($i32, b10);

        return -1L;

     label66:
        b9 = 3;

        goto label62;

     label67:
        b10 = 1;

        goto label65;

     label68:
        $z5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLanguageSwitchKeyPressed>;

        if $z5 == 0 goto label70;

        if z1 != 0 goto label70;

        if i1 == 204 goto label69;

        if i1 != 62 goto label70;

     label69:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLanguageSwitchKeyPressed> = 0;

        return -1L;

     label70:
        $r30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalKeyManager mGlobalKeyManager>;

        $r29 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $z6 = virtualinvoke $r30.<com.android.internal.policy.impl.GlobalKeyManager: boolean handleGlobalKey(android.content.Context,int,android.view.KeyEvent)>($r29, i1, r2);

        if $z6 == 0 goto label71;

        return -1L;

     label71:
        return 0L;

        catch android.os.RemoteException from label07 to label08 with label11;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch android.content.ActivityNotFoundException from label47 to label48 with label49;
        catch android.content.ActivityNotFoundException from label52 to label53 with label54;
        catch android.content.ActivityNotFoundException from label56 to label57 with label58;
    }

    public int interceptKeyBeforeQueueing(android.view.KeyEvent, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.KeyEvent r1, r26;
        int i0, i1, i4, $i5, $i6, $i7, $i10, $i12, $i15, $i16, $i18, $i22, $i23, $i24, $i25, $i27, $i29, $i30, $i31, $i32;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14, $z15, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33;
        byte b2, b3, $b8, $b9, $b14, $b17, $b20, $b26, $b28, $b34;
        android.os.Message r2;
        com.android.internal.telephony.ITelephony r3, r5, r7, r10, r12;
        android.os.RemoteException r4, r6, r8, r9, r11, $r20, $r21, $r22, $r24, $r25;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r13, $r14, $r23;
        android.os.PowerManager$WakeLock $r15;
        com.android.internal.policy.impl.GlobalKeyManager $r16;
        android.os.Handler $r17;
        long $l11, $l13, $l21;
        com.android.internal.policy.impl.ImmersiveModeConfirmation $r19;
        java.lang.Throwable r27, r28, r29, r30, r31;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemBooted>;

        if $z15 != 0 goto label02;

        b2 = 0;

     label01:
        return b2;

     label02:
        $i6 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i6 != 0 goto label16;

        z1 = 1;

     label03:
        z2 = virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $i5 = 16777216 & i0;

        if $i5 == 0 goto label17;

        z3 = 1;

     label04:
        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r13 != null goto label18;

     label05:
        if i1 != 26 goto label06;

        i0 = i0 | 1;

     label06:
        $i7 = i0 & 3;

        if $i7 == 0 goto label20;

        z4 = 1;

     label07:
        if z1 == 0 goto label08;

        $i31 = 256 & i0;

        if $i31 == 0 goto label08;

        $i32 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i32 != 0 goto label08;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>(null, 1, 0);

     label08:
        if z0 == 0 goto label09;

        $z32 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHeadless>;

        if $z32 == 0 goto label10;

     label09:
        if z3 == 0 goto label21;

        if z4 != 0 goto label21;

     label10:
        b2 = 1;

     label11:
        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalKeyManager mGlobalKeyManager>;

        $z17 = virtualinvoke $r16.<com.android.internal.policy.impl.GlobalKeyManager: boolean shouldHandleGlobalKey(int,android.view.KeyEvent)>(i1, r1);

        if $z17 != 0 goto label01;

        lookupswitch(i1)
        {
            case 5: goto label13;
            case 6: goto label35;
            case 24: goto label22;
            case 25: goto label22;
            case 26: goto label45;
            case 79: goto label67;
            case 85: goto label64;
            case 86: goto label67;
            case 87: goto label67;
            case 88: goto label67;
            case 89: goto label67;
            case 90: goto label67;
            case 91: goto label67;
            case 126: goto label64;
            case 127: goto label64;
            case 130: goto label67;
            case 164: goto label22;
            case 222: goto label67;
            default: goto label12;
        };

     label12:
        return b2;

     label13:
        if z1 == 0 goto label01;

        r12 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getTelephonyService()>();

        if r12 == null goto label01;

     label14:
        $z33 = interfaceinvoke r12.<com.android.internal.telephony.ITelephony: boolean isRinging()>();

        if $z33 == 0 goto label01;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "interceptKeyBeforeQueueing: CALL key-down while ringing: Answer the call!");

        interfaceinvoke r12.<com.android.internal.telephony.ITelephony: void answerRingingCall()>();

     label15:
        $b34 = b2 & -2;

        return $b34;

     label16:
        z1 = 0;

        goto label03;

     label17:
        z3 = 0;

        goto label04;

     label18:
        if z0 == 0 goto label19;

        $r23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r23.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowingAndNotHidden()>();

        goto label05;

     label19:
        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r14.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        goto label05;

     label20:
        z4 = 0;

        goto label07;

     label21:
        b2 = 0;

        if z1 == 0 goto label11;

        b2 = 0;

        if z4 == 0 goto label11;

        z5 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isWakeKeyWhenScreenOff(int)>(i1);

        b2 = 0;

        if z5 == 0 goto label11;

        b2 = 2;

        goto label11;

     label22:
        if i1 != 25 goto label27;

        if z1 == 0 goto label26;

        if z0 == 0 goto label23;

        $z30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered>;

        if $z30 != 0 goto label23;

        $i25 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i22 = 1024 & $i25;

        if $i22 != 0 goto label23;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered> = 1;

        $l21 = virtualinvoke r1.<android.view.KeyEvent: long getDownTime()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long mVolumeDownKeyTime> = $l21;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyConsumedByScreenshotChord> = 0;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingPowerKeyAction()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void interceptScreenshotChord()>();

     label23:
        if z1 == 0 goto label01;

        r10 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getTelephonyService()>();

        if r10 == null goto label34;

     label24:
        $z28 = interfaceinvoke r10.<com.android.internal.telephony.ITelephony: boolean isRinging()>();

        if $z28 == 0 goto label29;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "interceptKeyBeforeQueueing: VOLUME key-down while ringing: Silence ringer!");

        interfaceinvoke r10.<com.android.internal.telephony.ITelephony: void silenceRinger()>();

     label25:
        $b17 = b2 & -2;

        return $b17;

     label26:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered> = 0;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

        goto label23;

     label27:
        if i1 != 24 goto label23;

        if z1 == 0 goto label28;

        if z0 == 0 goto label23;

        $z26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeUpKeyTriggered>;

        if $z26 != 0 goto label23;

        $i18 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i24 = 1024 & $i18;

        if $i24 != 0 goto label23;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeUpKeyTriggered> = 1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingPowerKeyAction()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

        goto label23;

     label28:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeUpKeyTriggered> = 0;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

        goto label23;

     label29:
        $z27 = interfaceinvoke r10.<com.android.internal.telephony.ITelephony: boolean isOffhook()>();

        if $z27 == 0 goto label34;

     label30:
        $b20 = b2 & 1;

        if $b20 != 0 goto label34;

     label31:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void handleVolumeKey(int,int)>(0, i1);

     label32:
        return b2;

     label33:
        $r24 := @caughtexception;

        r9 = $r24;

        r27 = (java.lang.Throwable) r9;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "ITelephony threw RemoteException", r27);

     label34:
        $z24 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isMusicActive()>();

        if $z24 == 0 goto label01;

        $b14 = b2 & 1;

        if $b14 != 0 goto label01;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void handleVolumeKey(int,int)>(3, i1);

        return b2;

     label35:
        b2 = b2 & -2;

        if z1 == 0 goto label43;

        r7 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getTelephonyService()>();

        z13 = 0;

        if r7 == null goto label38;

     label36:
        z14 = interfaceinvoke r7.<com.android.internal.telephony.ITelephony: boolean endCall()>();

     label37:
        z13 = z14;

     label38:
        if z0 == 0 goto label39;

        if z13 == 0 goto label42;

     label39:
        z12 = 1;

     label40:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void interceptPowerKeyDown(boolean)>(z12);

        return b2;

     label41:
        $r20 := @caughtexception;

        r8 = $r20;

        r28 = (java.lang.Throwable) r8;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "ITelephony threw RemoteException", r28);

        z13 = 0;

        goto label38;

     label42:
        z12 = 0;

        goto label40;

     label43:
        $z29 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptPowerKeyUp(boolean)>(z2);

        if $z29 == 0 goto label01;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mEndcallBehavior>;

        $i29 = 1 & $i23;

        if $i29 == 0 goto label44;

        $z31 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean goHome()>();

        if $z31 != 0 goto label01;

     label44:
        $i30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mEndcallBehavior>;

        $i27 = 2 & $i30;

        if $i27 == 0 goto label01;

        $b28 = b2 & -3;

        $b26 = 4 | $b28;

        return $b26;

     label45:
        b3 = b2 & -2;

        if z1 == 0 goto label59;

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation>;

        $l11 = virtualinvoke r1.<android.view.KeyEvent: long getDownTime()>();

        $i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        $z21 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isImmersiveMode(int)>($i10);

        virtualinvoke $r19.<com.android.internal.policy.impl.ImmersiveModeConfirmation: void onPowerKeyDown(boolean,long,boolean)>(z0, $l11, $z21);

        if z0 == 0 goto label46;

        $z25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered>;

        if $z25 != 0 goto label46;

        $i15 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i16 = 1024 & $i15;

        if $i16 != 0 goto label46;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered> = 1;

        $l13 = virtualinvoke r1.<android.view.KeyEvent: long getDownTime()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long mPowerKeyTime> = $l13;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void interceptScreenshotChord()>();

     label46:
        r5 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getTelephonyService()>();

        z9 = 0;

        if r5 == null goto label48;

     label47:
        $z20 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: boolean isRinging()>();

        if $z20 == 0 goto label51;

        interfaceinvoke r5.<com.android.internal.telephony.ITelephony: void silenceRinger()>();

     label48:
        if z0 == 0 goto label49;

        if z9 != 0 goto label49;

        $z22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered>;

        if $z22 != 0 goto label49;

        $z23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeUpKeyTriggered>;

        if $z23 == 0 goto label58;

     label49:
        z8 = 1;

     label50:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void interceptPowerKeyDown(boolean)>(z8);

        return b3;

     label51:
        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mIncallPowerBehavior>;

        i4 = 2 & $i12;

     label52:
        z9 = 0;

        if i4 == 0 goto label48;

     label53:
        z10 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: boolean isOffhook()>();

     label54:
        z9 = 0;

        if z10 == 0 goto label48;

     label55:
        z11 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: boolean endCall()>();

     label56:
        z9 = z11;

        goto label48;

     label57:
        $r25 := @caughtexception;

        r6 = $r25;

        r29 = (java.lang.Throwable) r6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "ITelephony threw RemoteException", r29);

        z9 = 0;

        goto label48;

     label58:
        z8 = 0;

        goto label50;

     label59:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered> = 0;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

        if z2 != 0 goto label60;

        $z19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPendingPowerKeyUpCanceled>;

        if $z19 == 0 goto label63;

     label60:
        z7 = 1;

     label61:
        $z18 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptPowerKeyUp(boolean)>(z7);

        if $z18 == 0 goto label62;

        $b9 = b3 & -3;

        b3 = 4 | $b9;

     label62:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPendingPowerKeyUpCanceled> = 0;

        return b3;

     label63:
        z7 = 0;

        goto label61;

     label64:
        if z1 == 0 goto label67;

        r3 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getTelephonyService()>();

        if r3 == null goto label67;

     label65:
        z6 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean isIdle()>();

     label66:
        if z6 == 0 goto label01;

     label67:
        $b8 = b2 & 1;

        if $b8 != 0 goto label01;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r15.<android.os.PowerManager$WakeLock: void acquire()>();

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        r26 = new android.view.KeyEvent;

        specialinvoke r26.<android.view.KeyEvent: void <init>(android.view.KeyEvent)>(r1);

        r2 = virtualinvoke $r17.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(3, r26);

        virtualinvoke r2.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r2.<android.os.Message: void sendToTarget()>();

        return b2;

     label68:
        $r21 := @caughtexception;

        r4 = $r21;

        r30 = (java.lang.Throwable) r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "ITelephony threw RemoteException", r30);

        goto label67;

     label69:
        $r22 := @caughtexception;

        r11 = $r22;

        r31 = (java.lang.Throwable) r11;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "ITelephony threw RemoteException", r31);

        return b2;

        catch android.os.RemoteException from label14 to label15 with label69;
        catch android.os.RemoteException from label24 to label25 with label33;
        catch android.os.RemoteException from label29 to label30 with label33;
        catch android.os.RemoteException from label31 to label32 with label33;
        catch android.os.RemoteException from label36 to label37 with label41;
        catch android.os.RemoteException from label47 to label48 with label57;
        catch android.os.RemoteException from label51 to label52 with label57;
        catch android.os.RemoteException from label53 to label54 with label57;
        catch android.os.RemoteException from label55 to label56 with label57;
        catch android.os.RemoteException from label65 to label66 with label68;
    }

    public int interceptMotionBeforeQueueingWhenScreenOff(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i2;
        boolean z0;
        byte b1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $i2 = i0 & 3;

        if $i2 == 0 goto label3;

        z0 = 1;

     label1:
        b1 = 0;

        if z0 == 0 goto label2;

        b1 = 2;

     label2:
        return b1;

     label3:
        z0 = 0;

        goto label1;
    }

    public boolean isDefaultOrientationForced()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceDefaultOrientation>;

        return $z0;
    }

    boolean isDeviceProvisioned()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        boolean z0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "device_provisioned", 0);

        z0 = 0;

        if i0 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean isKeyguardLocked()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardOn()>();

        return $z0;
    }

    public boolean isKeyguardSecure()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isSecure()>();

        return $z0;
    }

    boolean isMusicActive()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.media.AudioManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        r1 = (android.media.AudioManager) $r3;

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "isMusicActive: couldn\'t get AudioManager reference");

        return 0;

     label1:
        $z0 = virtualinvoke r1.<android.media.AudioManager: boolean isLocalOrRemoteMusicActive()>();

        return $z0;
    }

    public boolean isScreenOnEarly()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly>;

        return $z0;
    }

    public boolean isScreenOnFully()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully>;

        return $z0;
    }

    public boolean isTopLevelWindow(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        if i0 < 1000 goto label1;

        if i0 > 1999 goto label1;

        if i0 != 1003 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void keepScreenOnStartedLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        return;
    }

    public void keepScreenOnStoppedLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;
        boolean $z0;
        android.os.PowerManager $r3;
        long $l1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowingAndNotHidden()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r3.<android.os.PowerManager: void userActivity(long,boolean)>($l1, 0);

     label1:
        return;
    }

    boolean keyguardOn()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardIsShowingTq()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean inKeyguardRestrictedKeyInputMode()>();

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    void launchHomeFromHotKey()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r2, $r4, $r6, $r7;
        boolean $z0, $z1, $z2;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r8;
        com.android.internal.policy.impl.PhoneWindowManager$7 r9;
        android.view.WindowManagerPolicy$OnKeyguardExitResult r10;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r2 == null goto label1;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z2 = virtualinvoke $r7.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowingAndNotHidden()>();

        if $z2 == 0 goto label1;

        return;

     label1:
        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        if $z0 != 0 goto label2;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z1 = virtualinvoke $r4.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isInputRestricted()>();

        if $z1 == 0 goto label2;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        r9 = new com.android.internal.policy.impl.PhoneWindowManager$7;

        specialinvoke r9.<com.android.internal.policy.impl.PhoneWindowManager$7: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r10 = (android.view.WindowManagerPolicy$OnKeyguardExitResult) r9;

        virtualinvoke $r6.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)>(r10);

        return;

     label2:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void stopAppSwitches()>();

     label3:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("homekey");

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void startDockOrHome()>();

        return;

     label4:
        $r8 := @caughtexception;

        goto label3;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void layoutWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams, android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r3, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        android.view.WindowManager$LayoutParams r2;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245;
        android.graphics.Rect r4, r5, r6, r7, r8, r9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        r3 := @parameter2: android.view.WindowManagerPolicy$WindowState;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if r1 == $r10 goto label01;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if r1 != $r11 goto label02;

     label01:
        return;

     label02:
        z0 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isDefaultDisplay()>();

        if z0 == 0 goto label08;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow>;

        if r1 != $r16 goto label08;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow>;

        if $r15 == null goto label08;

        z1 = 1;

     label03:
        if z1 == 0 goto label04;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow>;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void offsetInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState)>($r17);

     label04:
        i0 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        i1 = r2.<android.view.WindowManager$LayoutParams: int softInputMode>;

        i2 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getSystemUiVisibility()>();

        r4 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpParentFrame>;

        r5 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDisplayFrame>;

        r6 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpOverscanFrame>;

        r7 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpContentFrame>;

        r8 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpVisibleFrame>;

        r9 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDecorFrame>;

        virtualinvoke r9.<android.graphics.Rect: void setEmpty()>();

        if z0 == 0 goto label09;

        $z11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar>;

        if $z11 == 0 goto label09;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r14 == null goto label09;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $z10 = interfaceinvoke $r13.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z10 == 0 goto label09;

        z2 = 1;

     label05:
        i3 = i1 & 240;

        if z0 != 0 goto label11;

        if r3 == null goto label10;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState,int,int,android.view.WindowManagerPolicy$WindowState,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, i0, i3, r3, 1, r4, r5, r6, r7, r8);

     label06:
        $i95 = i0 & 512;

        if $i95 == 0 goto label07;

        $i93 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i93 == 2010 goto label07;

        r8.<android.graphics.Rect: int top> = -10000;

        r8.<android.graphics.Rect: int left> = -10000;

        r7.<android.graphics.Rect: int top> = -10000;

        r7.<android.graphics.Rect: int left> = -10000;

        r6.<android.graphics.Rect: int top> = -10000;

        r6.<android.graphics.Rect: int left> = -10000;

        r5.<android.graphics.Rect: int top> = -10000;

        r5.<android.graphics.Rect: int left> = -10000;

        r8.<android.graphics.Rect: int bottom> = 10000;

        r8.<android.graphics.Rect: int right> = 10000;

        r7.<android.graphics.Rect: int bottom> = 10000;

        r7.<android.graphics.Rect: int right> = 10000;

        r6.<android.graphics.Rect: int bottom> = 10000;

        r6.<android.graphics.Rect: int right> = 10000;

        r5.<android.graphics.Rect: int bottom> = 10000;

        r5.<android.graphics.Rect: int right> = 10000;

     label07:
        interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: void computeFrameLw(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r4, r5, r6, r7, r8, r9);

        $i94 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i94 != 2011 goto label01;

        $z7 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleOrBehindKeyguardLw()>();

        if $z7 == 0 goto label01;

        $z6 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean getGivenInsetsPendingLw()>();

        if $z6 != 0 goto label01;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setLastInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)>(null, null);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void offsetInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState)>(r1);

        return;

     label08:
        z1 = 0;

        goto label03;

     label09:
        z2 = 0;

        goto label05;

     label10:
        i73 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r7.<android.graphics.Rect: int left> = i73;

        r6.<android.graphics.Rect: int left> = i73;

        r5.<android.graphics.Rect: int left> = i73;

        r4.<android.graphics.Rect: int left> = i73;

        i76 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r7.<android.graphics.Rect: int top> = i76;

        r6.<android.graphics.Rect: int top> = i76;

        r5.<android.graphics.Rect: int top> = i76;

        r4.<android.graphics.Rect: int top> = i76;

        $i245 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i244 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        i75 = $i245 + $i244;

        r7.<android.graphics.Rect: int right> = i75;

        r6.<android.graphics.Rect: int right> = i75;

        r5.<android.graphics.Rect: int right> = i75;

        r4.<android.graphics.Rect: int right> = i75;

        $i243 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i242 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        i72 = $i243 + $i242;

        r7.<android.graphics.Rect: int bottom> = i72;

        r6.<android.graphics.Rect: int bottom> = i72;

        r5.<android.graphics.Rect: int bottom> = i72;

        r4.<android.graphics.Rect: int bottom> = i72;

        goto label06;

     label11:
        $i83 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i83 != 2011 goto label12;

        i65 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r8.<android.graphics.Rect: int left> = i65;

        r7.<android.graphics.Rect: int left> = i65;

        r6.<android.graphics.Rect: int left> = i65;

        r5.<android.graphics.Rect: int left> = i65;

        r4.<android.graphics.Rect: int left> = i65;

        i64 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r8.<android.graphics.Rect: int top> = i64;

        r7.<android.graphics.Rect: int top> = i64;

        r6.<android.graphics.Rect: int top> = i64;

        r5.<android.graphics.Rect: int top> = i64;

        r4.<android.graphics.Rect: int top> = i64;

        i67 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r8.<android.graphics.Rect: int right> = i67;

        r7.<android.graphics.Rect: int right> = i67;

        r6.<android.graphics.Rect: int right> = i67;

        r5.<android.graphics.Rect: int right> = i67;

        r4.<android.graphics.Rect: int right> = i67;

        $i238 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i241 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        i66 = $i238 + $i241;

        r6.<android.graphics.Rect: int bottom> = i66;

        r5.<android.graphics.Rect: int bottom> = i66;

        r4.<android.graphics.Rect: int bottom> = i66;

        i74 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        r8.<android.graphics.Rect: int bottom> = i74;

        r7.<android.graphics.Rect: int bottom> = i74;

        r2.<android.view.WindowManager$LayoutParams: int gravity> = 80;

        $i239 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer> = $i239;

        goto label06;

     label12:
        $i81 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemLeft>;

        r9.<android.graphics.Rect: int left> = $i81;

        $i82 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemTop>;

        r9.<android.graphics.Rect: int top> = $i82;

        $i79 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemRight>;

        r9.<android.graphics.Rect: int right> = $i79;

        $i80 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemBottom>;

        r9.<android.graphics.Rect: int bottom> = $i80;

        $i77 = r2.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i78 = 512 & $i77;

        if $i78 == 0 goto label18;

        z3 = 1;

     label13:
        $i90 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i90 < 1 goto label19;

        $i240 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i240 > 99 goto label19;

        z5 = 1;

     label14:
        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if r1 != $r12 goto label20;

        $z12 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isAnimatingLw()>();

        if $z12 != 0 goto label20;

        z4 = 1;

     label15:
        if z5 == 0 goto label17;

        if z3 != 0 goto label17;

        if z4 != 0 goto label17;

        $i216 = i2 & 4;

        if $i216 != 0 goto label16;

        $i236 = i0 & 1024;

        if $i236 != 0 goto label16;

        $i237 = 67108864 & i0;

        if $i237 != 0 goto label16;

        $i235 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        r9.<android.graphics.Rect: int top> = $i235;

     label16:
        $i233 = 134217728 & i0;

        if $i233 != 0 goto label17;

        $i234 = i2 & 2;

        if $i234 != 0 goto label17;

        $i231 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        r9.<android.graphics.Rect: int bottom> = $i231;

        $i232 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        r9.<android.graphics.Rect: int right> = $i232;

     label17:
        $i88 = 65792 & i0;

        if $i88 != 65792 goto label38;

        if r3 == null goto label21;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState,int,int,android.view.WindowManagerPolicy$WindowState,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, i0, i3, r3, 1, r4, r5, r6, r7, r8);

        goto label06;

     label18:
        z3 = 0;

        goto label13;

     label19:
        z5 = 0;

        goto label14;

     label20:
        z4 = 0;

        goto label15;

     label21:
        $i158 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i158 == 2014 goto label22;

        $i189 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i189 != 2017 goto label31;

     label22:
        if z2 == 0 goto label28;

        i48 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

     label23:
        r6.<android.graphics.Rect: int left> = i48;

        r5.<android.graphics.Rect: int left> = i48;

        r4.<android.graphics.Rect: int left> = i48;

        i49 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r6.<android.graphics.Rect: int top> = i49;

        r5.<android.graphics.Rect: int top> = i49;

        r4.<android.graphics.Rect: int top> = i49;

        if z2 == 0 goto label29;

        $i188 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i187 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        i50 = $i188 + $i187;

     label24:
        r6.<android.graphics.Rect: int right> = i50;

        r5.<android.graphics.Rect: int right> = i50;

        r4.<android.graphics.Rect: int right> = i50;

        if z2 == 0 goto label30;

        $i194 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i193 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        i51 = $i194 + $i193;

     label25:
        r6.<android.graphics.Rect: int bottom> = i51;

        r5.<android.graphics.Rect: int bottom> = i51;

        r4.<android.graphics.Rect: int bottom> = i51;

     label26:
        $i180 = i0 & 1024;

        if $i180 != 0 goto label36;

        if i3 == 16 goto label35;

        $i197 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r7.<android.graphics.Rect: int left> = $i197;

        $i198 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r7.<android.graphics.Rect: int top> = $i198;

        $i191 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r7.<android.graphics.Rect: int right> = $i191;

        $i192 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r7.<android.graphics.Rect: int bottom> = $i192;

     label27:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void applyStableConstraints(int,int,android.graphics.Rect)>(i2, i0, r7);

        if i3 == 48 goto label37;

        $i175 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        r8.<android.graphics.Rect: int left> = $i175;

        $i174 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        r8.<android.graphics.Rect: int top> = $i174;

        $i169 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        r8.<android.graphics.Rect: int right> = $i169;

        $i168 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        r8.<android.graphics.Rect: int bottom> = $i168;

        goto label06;

     label28:
        i48 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        goto label23;

     label29:
        $i156 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i159 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        i50 = $i156 + $i159;

        goto label24;

     label30:
        $i181 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i157 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        i51 = $i181 + $i157;

        goto label25;

     label31:
        $i190 = 33554432 & i0;

        if $i190 == 0 goto label32;

        $i222 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i222 < 1 goto label32;

        $i219 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i219 > 1999 goto label32;

        i69 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r6.<android.graphics.Rect: int left> = i69;

        r5.<android.graphics.Rect: int left> = i69;

        r4.<android.graphics.Rect: int left> = i69;

        i68 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r6.<android.graphics.Rect: int top> = i68;

        r5.<android.graphics.Rect: int top> = i68;

        r4.<android.graphics.Rect: int top> = i68;

        $i217 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i220 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        i71 = $i217 + $i220;

        r6.<android.graphics.Rect: int right> = i71;

        r5.<android.graphics.Rect: int right> = i71;

        r4.<android.graphics.Rect: int right> = i71;

        $i215 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i218 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        i70 = $i215 + $i218;

        r6.<android.graphics.Rect: int bottom> = i70;

        r5.<android.graphics.Rect: int bottom> = i70;

        r4.<android.graphics.Rect: int bottom> = i70;

        goto label26;

     label32:
        $z9 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean canHideNavigationBar()>();

        if $z9 == 0 goto label34;

        $i205 = i2 & 512;

        if $i205 == 0 goto label34;

        $i204 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i204 == 2004 goto label33;

        $i224 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i224 < 1 goto label34;

        $i221 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i221 > 1999 goto label34;

     label33:
        i56 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r5.<android.graphics.Rect: int left> = i56;

        r4.<android.graphics.Rect: int left> = i56;

        i57 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r5.<android.graphics.Rect: int top> = i57;

        r4.<android.graphics.Rect: int top> = i57;

        $i202 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i203 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        i58 = $i202 + $i203;

        r5.<android.graphics.Rect: int right> = i58;

        r4.<android.graphics.Rect: int right> = i58;

        $i200 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i201 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        i59 = $i200 + $i201;

        r5.<android.graphics.Rect: int bottom> = i59;

        r4.<android.graphics.Rect: int bottom> = i59;

        $i199 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r6.<android.graphics.Rect: int left> = $i199;

        $i229 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r6.<android.graphics.Rect: int top> = $i229;

        $i227 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i230 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i228 = $i227 + $i230;

        r6.<android.graphics.Rect: int right> = $i228;

        $i226 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i225 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i223 = $i226 + $i225;

        r6.<android.graphics.Rect: int bottom> = $i223;

        goto label26;

     label34:
        i60 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenLeft>;

        r5.<android.graphics.Rect: int left> = i60;

        r4.<android.graphics.Rect: int left> = i60;

        i61 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenTop>;

        r5.<android.graphics.Rect: int top> = i61;

        r4.<android.graphics.Rect: int top> = i61;

        $i185 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenLeft>;

        $i184 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenWidth>;

        i62 = $i185 + $i184;

        r5.<android.graphics.Rect: int right> = i62;

        r4.<android.graphics.Rect: int right> = i62;

        $i214 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenTop>;

        $i186 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenHeight>;

        i63 = $i214 + $i186;

        r5.<android.graphics.Rect: int bottom> = i63;

        r4.<android.graphics.Rect: int bottom> = i63;

        $i213 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r6.<android.graphics.Rect: int left> = $i213;

        $i212 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r6.<android.graphics.Rect: int top> = $i212;

        $i210 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i211 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i209 = $i210 + $i211;

        r6.<android.graphics.Rect: int right> = $i209;

        $i207 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i208 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i206 = $i207 + $i208;

        r6.<android.graphics.Rect: int bottom> = $i206;

        goto label26;

     label35:
        $i171 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        r7.<android.graphics.Rect: int left> = $i171;

        $i170 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        r7.<android.graphics.Rect: int top> = $i170;

        $i195 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        r7.<android.graphics.Rect: int right> = $i195;

        $i196 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        r7.<android.graphics.Rect: int bottom> = $i196;

        goto label27;

     label36:
        $i183 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        r7.<android.graphics.Rect: int left> = $i183;

        $i182 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = $i182;

        $i176 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i177 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        $i179 = $i176 + $i177;

        r7.<android.graphics.Rect: int right> = $i179;

        $i173 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i178 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        $i172 = $i173 + $i178;

        r7.<android.graphics.Rect: int bottom> = $i172;

        goto label27;

     label37:
        virtualinvoke r8.<android.graphics.Rect: void set(android.graphics.Rect)>(r7);

        goto label06;

     label38:
        $i89 = i0 & 256;

        if $i89 != 0 goto label39;

        $i136 = i2 & 1536;

        if $i136 == 0 goto label60;

     label39:
        $i86 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i86 == 2014 goto label40;

        $i98 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i98 != 2017 goto label48;

     label40:
        if z2 == 0 goto label45;

        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

     label41:
        r7.<android.graphics.Rect: int left> = i5;

        r6.<android.graphics.Rect: int left> = i5;

        r5.<android.graphics.Rect: int left> = i5;

        r4.<android.graphics.Rect: int left> = i5;

        i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = i4;

        r6.<android.graphics.Rect: int top> = i4;

        r5.<android.graphics.Rect: int top> = i4;

        r4.<android.graphics.Rect: int top> = i4;

        if z2 == 0 goto label46;

        $i99 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i100 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        i7 = $i99 + $i100;

     label42:
        r7.<android.graphics.Rect: int right> = i7;

        r6.<android.graphics.Rect: int right> = i7;

        r5.<android.graphics.Rect: int right> = i7;

        r4.<android.graphics.Rect: int right> = i7;

        if z2 == 0 goto label47;

        $i101 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i102 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        i6 = $i101 + $i102;

     label43:
        r7.<android.graphics.Rect: int bottom> = i6;

        r6.<android.graphics.Rect: int bottom> = i6;

        r5.<android.graphics.Rect: int bottom> = i6;

        r4.<android.graphics.Rect: int bottom> = i6;

     label44:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void applyStableConstraints(int,int,android.graphics.Rect)>(i2, i0, r7);

        if i3 == 48 goto label59;

        $i92 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        r8.<android.graphics.Rect: int left> = $i92;

        $i91 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        r8.<android.graphics.Rect: int top> = $i91;

        $i104 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        r8.<android.graphics.Rect: int right> = $i104;

        $i103 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        r8.<android.graphics.Rect: int bottom> = $i103;

        goto label06;

     label45:
        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        goto label41;

     label46:
        $i84 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i87 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        i7 = $i84 + $i87;

        goto label42;

     label47:
        $i96 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i85 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        i6 = $i96 + $i85;

        goto label43;

     label48:
        $i97 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i97 == 2019 goto label49;

        $i117 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i117 != 2024 goto label50;

     label49:
        i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r6.<android.graphics.Rect: int left> = i9;

        r5.<android.graphics.Rect: int left> = i9;

        r4.<android.graphics.Rect: int left> = i9;

        i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r6.<android.graphics.Rect: int top> = i8;

        r5.<android.graphics.Rect: int top> = i8;

        r4.<android.graphics.Rect: int top> = i8;

        $i112 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i113 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        i11 = $i112 + $i113;

        r6.<android.graphics.Rect: int right> = i11;

        r5.<android.graphics.Rect: int right> = i11;

        r4.<android.graphics.Rect: int right> = i11;

        $i114 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i115 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        i10 = $i114 + $i115;

        r6.<android.graphics.Rect: int bottom> = i10;

        r5.<android.graphics.Rect: int bottom> = i10;

        r4.<android.graphics.Rect: int bottom> = i10;

        goto label44;

     label50:
        $i116 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i116 == 2015 goto label51;

        $i137 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i137 != 2021 goto label52;

     label51:
        $i119 = i0 & 1024;

        if $i119 == 0 goto label52;

        i35 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r7.<android.graphics.Rect: int left> = i35;

        r6.<android.graphics.Rect: int left> = i35;

        r5.<android.graphics.Rect: int left> = i35;

        r4.<android.graphics.Rect: int left> = i35;

        i34 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r7.<android.graphics.Rect: int top> = i34;

        r6.<android.graphics.Rect: int top> = i34;

        r5.<android.graphics.Rect: int top> = i34;

        r4.<android.graphics.Rect: int top> = i34;

        $i148 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i149 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        i33 = $i148 + $i149;

        r7.<android.graphics.Rect: int right> = i33;

        r6.<android.graphics.Rect: int right> = i33;

        r5.<android.graphics.Rect: int right> = i33;

        r4.<android.graphics.Rect: int right> = i33;

        $i138 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i139 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        i32 = $i138 + $i139;

        r7.<android.graphics.Rect: int bottom> = i32;

        r6.<android.graphics.Rect: int bottom> = i32;

        r5.<android.graphics.Rect: int bottom> = i32;

        r4.<android.graphics.Rect: int bottom> = i32;

        goto label44;

     label52:
        $i118 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i118 == 2021 goto label53;

        $i110 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i110 != 2025 goto label54;

     label53:
        i13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r7.<android.graphics.Rect: int left> = i13;

        r6.<android.graphics.Rect: int left> = i13;

        r5.<android.graphics.Rect: int left> = i13;

        r4.<android.graphics.Rect: int left> = i13;

        i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r7.<android.graphics.Rect: int top> = i12;

        r6.<android.graphics.Rect: int top> = i12;

        r5.<android.graphics.Rect: int top> = i12;

        r4.<android.graphics.Rect: int top> = i12;

        $i105 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i106 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        i15 = $i105 + $i106;

        r7.<android.graphics.Rect: int right> = i15;

        r6.<android.graphics.Rect: int right> = i15;

        r5.<android.graphics.Rect: int right> = i15;

        r4.<android.graphics.Rect: int right> = i15;

        $i107 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i108 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        i14 = $i107 + $i108;

        r7.<android.graphics.Rect: int bottom> = i14;

        r6.<android.graphics.Rect: int bottom> = i14;

        r5.<android.graphics.Rect: int bottom> = i14;

        r4.<android.graphics.Rect: int bottom> = i14;

        goto label44;

     label54:
        $i109 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i109 != 2013 goto label55;

        i30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r7.<android.graphics.Rect: int left> = i30;

        r6.<android.graphics.Rect: int left> = i30;

        r5.<android.graphics.Rect: int left> = i30;

        r4.<android.graphics.Rect: int left> = i30;

        i31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = i31;

        r6.<android.graphics.Rect: int top> = i31;

        r5.<android.graphics.Rect: int top> = i31;

        r4.<android.graphics.Rect: int top> = i31;

        $i144 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i145 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        i28 = $i144 + $i145;

        r7.<android.graphics.Rect: int right> = i28;

        r6.<android.graphics.Rect: int right> = i28;

        r5.<android.graphics.Rect: int right> = i28;

        r4.<android.graphics.Rect: int right> = i28;

        $i150 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i151 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        i29 = $i150 + $i151;

        r7.<android.graphics.Rect: int bottom> = i29;

        r6.<android.graphics.Rect: int bottom> = i29;

        r5.<android.graphics.Rect: int bottom> = i29;

        r4.<android.graphics.Rect: int bottom> = i29;

        goto label44;

     label55:
        $i111 = 33554432 & i0;

        if $i111 == 0 goto label56;

        $i124 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i124 < 1 goto label56;

        $i125 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i125 > 1999 goto label56;

        i26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r7.<android.graphics.Rect: int left> = i26;

        r6.<android.graphics.Rect: int left> = i26;

        r5.<android.graphics.Rect: int left> = i26;

        r4.<android.graphics.Rect: int left> = i26;

        i27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r7.<android.graphics.Rect: int top> = i27;

        r6.<android.graphics.Rect: int top> = i27;

        r5.<android.graphics.Rect: int top> = i27;

        r4.<android.graphics.Rect: int top> = i27;

        $i127 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i126 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        i24 = $i127 + $i126;

        r7.<android.graphics.Rect: int right> = i24;

        r6.<android.graphics.Rect: int right> = i24;

        r5.<android.graphics.Rect: int right> = i24;

        r4.<android.graphics.Rect: int right> = i24;

        $i146 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i147 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        i25 = $i146 + $i147;

        r7.<android.graphics.Rect: int bottom> = i25;

        r6.<android.graphics.Rect: int bottom> = i25;

        r5.<android.graphics.Rect: int bottom> = i25;

        r4.<android.graphics.Rect: int bottom> = i25;

        goto label44;

     label56:
        $z8 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean canHideNavigationBar()>();

        if $z8 == 0 goto label58;

        $i132 = i2 & 512;

        if $i132 == 0 goto label58;

        $i133 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i133 == 2005 goto label57;

        $i122 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i122 < 1 goto label58;

        $i123 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i123 > 1999 goto label58;

     label57:
        i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r7.<android.graphics.Rect: int left> = i22;

        r6.<android.graphics.Rect: int left> = i22;

        r5.<android.graphics.Rect: int left> = i22;

        r4.<android.graphics.Rect: int left> = i22;

        i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = i23;

        r6.<android.graphics.Rect: int top> = i23;

        r5.<android.graphics.Rect: int top> = i23;

        r4.<android.graphics.Rect: int top> = i23;

        $i135 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i134 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        i20 = $i135 + $i134;

        r7.<android.graphics.Rect: int right> = i20;

        r6.<android.graphics.Rect: int right> = i20;

        r5.<android.graphics.Rect: int right> = i20;

        r4.<android.graphics.Rect: int right> = i20;

        $i121 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i120 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        i21 = $i121 + $i120;

        r7.<android.graphics.Rect: int bottom> = i21;

        r6.<android.graphics.Rect: int bottom> = i21;

        r5.<android.graphics.Rect: int bottom> = i21;

        r4.<android.graphics.Rect: int bottom> = i21;

        goto label44;

     label58:
        i18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        r7.<android.graphics.Rect: int left> = i18;

        r6.<android.graphics.Rect: int left> = i18;

        r5.<android.graphics.Rect: int left> = i18;

        r4.<android.graphics.Rect: int left> = i18;

        i19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = i19;

        r6.<android.graphics.Rect: int top> = i19;

        r5.<android.graphics.Rect: int top> = i19;

        r4.<android.graphics.Rect: int top> = i19;

        $i129 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i128 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        i16 = $i129 + $i128;

        r7.<android.graphics.Rect: int right> = i16;

        r6.<android.graphics.Rect: int right> = i16;

        r5.<android.graphics.Rect: int right> = i16;

        r4.<android.graphics.Rect: int right> = i16;

        $i131 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i130 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        i17 = $i131 + $i130;

        r7.<android.graphics.Rect: int bottom> = i17;

        r6.<android.graphics.Rect: int bottom> = i17;

        r5.<android.graphics.Rect: int bottom> = i17;

        r4.<android.graphics.Rect: int bottom> = i17;

        goto label44;

     label59:
        virtualinvoke r8.<android.graphics.Rect: void set(android.graphics.Rect)>(r7);

        goto label06;

     label60:
        if r3 == null goto label61;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState,int,int,android.view.WindowManagerPolicy$WindowState,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, i0, i3, r3, 0, r4, r5, r6, r7, r8);

        goto label06;

     label61:
        $i143 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i143 != 2014 goto label62;

        i52 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        r7.<android.graphics.Rect: int left> = i52;

        r6.<android.graphics.Rect: int left> = i52;

        r5.<android.graphics.Rect: int left> = i52;

        r4.<android.graphics.Rect: int left> = i52;

        i53 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = i53;

        r6.<android.graphics.Rect: int top> = i53;

        r5.<android.graphics.Rect: int top> = i53;

        r4.<android.graphics.Rect: int top> = i53;

        $i155 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i154 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        i54 = $i155 + $i154;

        r7.<android.graphics.Rect: int right> = i54;

        r6.<android.graphics.Rect: int right> = i54;

        r5.<android.graphics.Rect: int right> = i54;

        r4.<android.graphics.Rect: int right> = i54;

        $i153 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i152 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        i55 = $i153 + $i152;

        r7.<android.graphics.Rect: int bottom> = i55;

        r6.<android.graphics.Rect: int bottom> = i55;

        r5.<android.graphics.Rect: int bottom> = i55;

        r4.<android.graphics.Rect: int bottom> = i55;

        goto label06;

     label62:
        $i142 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i142 == 2005 goto label63;

        $i141 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i141 == 2003 goto label63;

        $i140 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i140 != 2020 goto label64;

     label63:
        i39 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        r7.<android.graphics.Rect: int left> = i39;

        r6.<android.graphics.Rect: int left> = i39;

        r5.<android.graphics.Rect: int left> = i39;

        r4.<android.graphics.Rect: int left> = i39;

        i38 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        r7.<android.graphics.Rect: int top> = i38;

        r6.<android.graphics.Rect: int top> = i38;

        r5.<android.graphics.Rect: int top> = i38;

        r4.<android.graphics.Rect: int top> = i38;

        i37 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        r7.<android.graphics.Rect: int right> = i37;

        r6.<android.graphics.Rect: int right> = i37;

        r5.<android.graphics.Rect: int right> = i37;

        r4.<android.graphics.Rect: int right> = i37;

        i36 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        r7.<android.graphics.Rect: int bottom> = i36;

        r6.<android.graphics.Rect: int bottom> = i36;

        r5.<android.graphics.Rect: int bottom> = i36;

        r4.<android.graphics.Rect: int bottom> = i36;

        goto label06;

     label64:
        $i162 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        r4.<android.graphics.Rect: int left> = $i162;

        $i163 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        r4.<android.graphics.Rect: int top> = $i163;

        $i160 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        r4.<android.graphics.Rect: int right> = $i160;

        $i161 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        r4.<android.graphics.Rect: int bottom> = $i161;

        if i3 == 16 goto label66;

        i47 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r7.<android.graphics.Rect: int left> = i47;

        r6.<android.graphics.Rect: int left> = i47;

        r5.<android.graphics.Rect: int left> = i47;

        i46 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r7.<android.graphics.Rect: int top> = i46;

        r6.<android.graphics.Rect: int top> = i46;

        r5.<android.graphics.Rect: int top> = i46;

        i45 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r7.<android.graphics.Rect: int right> = i45;

        r6.<android.graphics.Rect: int right> = i45;

        r5.<android.graphics.Rect: int right> = i45;

        i44 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r7.<android.graphics.Rect: int bottom> = i44;

        r6.<android.graphics.Rect: int bottom> = i44;

        r5.<android.graphics.Rect: int bottom> = i44;

     label65:
        if i3 == 48 goto label67;

        $i166 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        r8.<android.graphics.Rect: int left> = $i166;

        $i167 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        r8.<android.graphics.Rect: int top> = $i167;

        $i164 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        r8.<android.graphics.Rect: int right> = $i164;

        $i165 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        r8.<android.graphics.Rect: int bottom> = $i165;

        goto label06;

     label66:
        i43 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        r7.<android.graphics.Rect: int left> = i43;

        r6.<android.graphics.Rect: int left> = i43;

        r5.<android.graphics.Rect: int left> = i43;

        i42 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        r7.<android.graphics.Rect: int top> = i42;

        r6.<android.graphics.Rect: int top> = i42;

        r5.<android.graphics.Rect: int top> = i42;

        i41 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        r7.<android.graphics.Rect: int right> = i41;

        r6.<android.graphics.Rect: int right> = i41;

        r5.<android.graphics.Rect: int right> = i41;

        i40 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        r7.<android.graphics.Rect: int bottom> = i40;

        r6.<android.graphics.Rect: int bottom> = i40;

        r5.<android.graphics.Rect: int bottom> = i40;

        goto label65;

     label67:
        virtualinvoke r8.<android.graphics.Rect: void set(android.graphics.Rect)>(r7);

        goto label06;
    }

    public void lockNow(android.os.Bundle)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.Bundle r1;
        android.content.Context $r2;
        com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout $r3, $r5, $r7;
        android.os.Handler $r4, $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3);

        if r1 == null goto label1;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r7.<com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout: void setLockOptions(android.os.Bundle)>(r1);

     label1:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        return;
    }

    boolean needSensorRunningLp()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if $i0 == 4 goto label1;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if $i1 == 10 goto label1;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if $i2 == 7 goto label1;

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if $i3 != 6 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCarDockEnablesAccelerometer>;

        if $z0 == 0 goto label3;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i8 == 2 goto label1;

     label3:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDeskDockEnablesAccelerometer>;

        if $z1 == 0 goto label4;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i5 == 1 goto label1;

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i6 == 3 goto label1;

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i7 == 4 goto label1;

     label4:
        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode>;

        if $i4 != 1 goto label1;

        return 0;
    }

    public void notifyLidSwitchChanged(long, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        long l0, $l3, $l4;
        boolean z0, $z1, $z2;
        byte b1;
        int $i2;
        android.os.PowerManager $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHeadless>;

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        if z0 == 0 goto label4;

        b1 = 1;

     label3:
        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        if b1 == $i2 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState> = b1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void applyLidSwitchState()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateRotation(boolean)>(1);

        if z0 == 0 goto label5;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r2.<android.os.PowerManager: void wakeUp(long)>($l4);

        return;

     label4:
        b1 = 0;

        goto label3;

     label5:
        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidControlsSleep>;

        if $z2 != 0 goto label1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r1.<android.os.PowerManager: void userActivity(long,boolean)>($l3, 0);

        return;
    }

    public boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        int i0, i1, $i2, $i3;
        boolean z0, z1, $z2, $z3;
        long[] r2;
        java.lang.String r3;
        android.os.Vibrator $r4, $r8, $r9;
        android.content.Context $r5, $r7;
        android.content.ContentResolver $r6;
        long $l4;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r10;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Vibrator mVibrator>;

        $z2 = virtualinvoke $r4.<android.os.Vibrator: boolean hasVibrator()>();

        if $z2 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r6, "haptic_feedback_enabled", 0, -2);

        if $i2 != 0 goto label10;

        z1 = 1;

     label03:
        if z0 != 0 goto label04;

        if z1 != 0 goto label01;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z3 = virtualinvoke $r10.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowingAndNotHidden()>();

        if $z3 != 0 goto label01;

     label04:
        lookupswitch(i0)
        {
            case 0: goto label06;
            case 1: goto label11;
            case 3: goto label12;
            case 10000: goto label13;
            case 10001: goto label14;
            default: goto label05;
        };

     label05:
        return 0;

     label06:
        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mLongPressVibePattern>;

     label07:
        if r1 == null goto label15;

        i1 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getOwningUid()>();

        r3 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: java.lang.String getOwningPackage()>();

     label08:
        $i3 = lengthof r2;

        if $i3 != 1 goto label16;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Vibrator mVibrator>;

        $l4 = r2[0];

        virtualinvoke $r9.<android.os.Vibrator: void vibrate(int,java.lang.String,long)>(i1, r3, $l4);

     label09:
        return 1;

     label10:
        z1 = 0;

        goto label03;

     label11:
        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mVirtualKeyVibePattern>;

        goto label07;

     label12:
        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mKeyboardTapVibePattern>;

        goto label07;

     label13:
        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mSafeModeDisabledVibePattern>;

        goto label07;

     label14:
        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mSafeModeEnabledVibePattern>;

        goto label07;

     label15:
        i1 = staticinvoke <android.os.Process: int myUid()>();

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r3 = virtualinvoke $r7.<android.content.Context: java.lang.String getOpPackageName()>();

        goto label08;

     label16:
        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Vibrator mVibrator>;

        virtualinvoke $r8.<android.os.Vibrator: void vibrate(int,java.lang.String,long[],int)>(i1, r3, r2, -1);

        goto label09;
    }

    public int prepareAddWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, $r3, $r6, $r8, $r11, $r14, $r15;
        android.view.WindowManager$LayoutParams r2;
        byte b0;
        int $i1;
        android.content.Context $r4, $r5, $r9, $r10, $r12;
        com.android.internal.policy.impl.BarController $r7, $r13;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        b0 = -7;

        $i1 = r2.<android.view.WindowManager$LayoutParams: int type>;

        lookupswitch($i1)
        {
            case 2000: goto label03;
            case 2004: goto label10;
            case 2014: goto label08;
            case 2017: goto label09;
            case 2019: goto label05;
            case 2024: goto label07;
            case 2029: goto label11;
            default: goto label01;
        };

     label01:
        b0 = 0;

     label02:
        return b0;

     label03:
        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r12.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", "PhoneWindowManager");

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r14 == null goto label04;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z1 = interfaceinvoke $r15.<android.view.WindowManagerPolicy$WindowState: boolean isAlive()>();

        if $z1 != 0 goto label02;

     label04:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar> = r1;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        virtualinvoke $r13.<com.android.internal.policy.impl.BarController: void setWindow(android.view.WindowManagerPolicy$WindowState)>(r1);

        goto label01;

     label05:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", "PhoneWindowManager");

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r6 == null goto label06;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $z0 = interfaceinvoke $r8.<android.view.WindowManagerPolicy$WindowState: boolean isAlive()>();

        if $z0 != 0 goto label02;

     label06:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar> = r1;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r7.<com.android.internal.policy.impl.BarController: void setWindow(android.view.WindowManagerPolicy$WindowState)>(r1);

        goto label01;

     label07:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", "PhoneWindowManager");

        goto label01;

     label08:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", "PhoneWindowManager");

        goto label01;

     label09:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r9.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", "PhoneWindowManager");

        goto label01;

     label10:
        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        if $r11 != null goto label02;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard> = r1;

        goto label01;

     label11:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguardScrim>;

        if $r3 != null goto label02;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguardScrim> = r1;

        goto label01;
    }

    void readLidState()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r1;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $i0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowManagerFuncs: int getLidState()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState> = $i0;

        return;
    }

    public void removeStartingWindow(android.os.IBinder, android.view.View)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.IBinder r1;
        android.view.View r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.view.WindowManager $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.View;

        if r2 == null goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r5 = (android.view.WindowManager) $r4;

        interfaceinvoke $r5.<android.view.WindowManager: void removeView(android.view.View)>(r2);

     label1:
        return;
    }

    public void removeWindowLw(android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, $r2, $r3, $r4, $r5;
        com.android.internal.policy.impl.BarController $r6, $r8;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r7;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r2 != r1 goto label3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar> = null;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        virtualinvoke $r8.<com.android.internal.policy.impl.BarController: void setWindow(android.view.WindowManagerPolicy$WindowState)>(null);

     label1:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r5 != r1 goto label2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar> = null;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r6.<com.android.internal.policy.impl.BarController: void setWindow(android.view.WindowManagerPolicy$WindowState)>(null);

     label2:
        return;

     label3:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        if $r3 != r1 goto label4;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WindowManager", "Removing keyguard window (Did it crash?)");

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard> = null;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r7.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void showScrim()>();

        goto label1;

     label4:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguardScrim>;

        if $r4 != r1 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WindowManager", "Removing keyguard scrim");

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguardScrim> = null;

        goto label1;
    }

    public int rotationForOrientationLw(int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.Object r1;
        java.lang.Throwable r2, $r6;
        byte b10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r3;
        android.content.res.Resources $r4;
        android.content.Context $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceDefaultOrientation>;

        if $z0 == 0 goto label01;

        return 0;

     label01:
        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        i2 = virtualinvoke $r3.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: int getProposedRotation()>();

     label03:
        if i2 >= 0 goto label04;

        i2 = i1;

     label04:
        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        if $i12 != 1 goto label12;

        $i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidOpenRotation>;

        if $i24 < 0 goto label12;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidOpenRotation>;

     label05:
        goto label69;

     label06:
        if i3 < 0 goto label67;

     label07:
        exitmonitor r1;

     label08:
        return i3;

     label09:
        $r6 := @caughtexception;

        r2 = $r6;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

     label12:
        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i11 != 2 goto label17;

        $z16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCarDockEnablesAccelerometer>;

        if $z16 != 0 goto label13;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCarDockRotation>;

        if $i23 < 0 goto label17;

     label13:
        $z15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCarDockEnablesAccelerometer>;

        if $z15 == 0 goto label15;

     label14:
        i3 = i2;

        goto label70;

     label15:
        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCarDockRotation>;

     label16:
        goto label70;

     label17:
        $i13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i13 == 1 goto label18;

        $i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i22 == 3 goto label18;

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i21 != 4 goto label23;

     label18:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDeskDockEnablesAccelerometer>;

        if $z1 != 0 goto label19;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDeskDockRotation>;

        if $i14 < 0 goto label23;

     label19:
        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDeskDockEnablesAccelerometer>;

        if $z3 == 0 goto label21;

     label20:
        i3 = i2;

        goto label71;

     label21:
        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDeskDockRotation>;

     label22:
        goto label71;

     label23:
        $z12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged>;

        if $z12 == 0 goto label25;

        $z14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDemoHdmiRotationLock>;

        if $z14 == 0 goto label25;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDemoHdmiRotation>;

     label24:
        goto label69;

     label25:
        $z11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged>;

        if $z11 == 0 goto label72;

        $i19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i19 != 0 goto label72;

        $i18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUndockedHdmiRotation>;

        if $i18 < 0 goto label72;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUndockedHdmiRotation>;

     label26:
        goto label69;

     label27:
        $i16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode>;

        if $i16 != 0 goto label73;

     label28:
        if i0 == 2 goto label29;

        if i0 == -1 goto label29;

        if i0 == 11 goto label29;

        if i0 == 12 goto label29;

        if i0 == 13 goto label29;

        goto label73;

     label29:
        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAllowAllRotations>;

        if $i15 >= 0 goto label32;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $z13 = virtualinvoke $r4.<android.content.res.Resources: boolean getBoolean(int)>(17891358);

        if $z13 == 0 goto label75;

     label30:
        b10 = 1;

     label31:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAllowAllRotations> = b10;

     label32:
        if i2 != 2 goto label74;

     label33:
        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAllowAllRotations>;

        if $i17 == 1 goto label74;

     label34:
        if i0 == 10 goto label74;

        if i0 != 13 goto label76;

        goto label74;

     label35:
        $i20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode>;

        if $i20 != 1 goto label77;

     label36:
        if i0 == 5 goto label77;

     label37:
        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotation>;

     label38:
        goto label69;

     label39:
        $z9 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isAnyPortrait(int)>(i3);

        if $z9 == 0 goto label41;

        exitmonitor r1;

     label40:
        return i3;

     label41:
        i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        exitmonitor r1;

     label42:
        return i9;

     label43:
        $z10 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isLandscapeOrSeascape(int)>(i3);

        if $z10 == 0 goto label45;

        exitmonitor r1;

     label44:
        return i3;

     label45:
        i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        exitmonitor r1;

     label46:
        return i8;

     label47:
        $z2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isAnyPortrait(int)>(i3);

        if $z2 == 0 goto label49;

        exitmonitor r1;

     label48:
        return i3;

     label49:
        i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation>;

        exitmonitor r1;

     label50:
        return i7;

     label51:
        $z4 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isLandscapeOrSeascape(int)>(i3);

        if $z4 == 0 goto label53;

        exitmonitor r1;

     label52:
        return i3;

     label53:
        i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation>;

        exitmonitor r1;

     label54:
        return i6;

     label55:
        $z7 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isLandscapeOrSeascape(int)>(i3);

        if $z7 == 0 goto label57;

        exitmonitor r1;

     label56:
        return i3;

     label57:
        $z8 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isLandscapeOrSeascape(int)>(i1);

        if $z8 == 0 goto label59;

        exitmonitor r1;

     label58:
        return i1;

     label59:
        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        exitmonitor r1;

     label60:
        return i5;

     label61:
        $z5 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isAnyPortrait(int)>(i3);

        if $z5 == 0 goto label63;

        exitmonitor r1;

     label62:
        return i3;

     label63:
        $z6 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isAnyPortrait(int)>(i1);

        if $z6 == 0 goto label65;

        exitmonitor r1;

     label64:
        return i1;

     label65:
        i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        exitmonitor r1;

     label66:
        return i4;

     label67:
        exitmonitor r1;

     label68:
        return 0;

     label69:
        tableswitch(i0)
        {
            case 0: goto label43;
            case 1: goto label39;
            case 2: goto label06;
            case 3: goto label06;
            case 4: goto label06;
            case 5: goto label06;
            case 6: goto label55;
            case 7: goto label61;
            case 8: goto label51;
            case 9: goto label47;
            case 10: goto label06;
            case 11: goto label55;
            case 12: goto label61;
            default: goto label06;
        };

     label70:
        goto label69;

     label71:
        goto label69;

     label72:
        if i0 != 14 goto label27;

        i3 = i1;

        goto label69;

     label73:
        if i0 == 4 goto label29;

        if i0 == 10 goto label29;

        if i0 == 6 goto label29;

        if i0 != 7 goto label35;

        goto label29;

     label74:
        i3 = i2;

        goto label69;

     label75:
        b10 = 0;

        goto label31;

     label76:
        i3 = i1;

        goto label69;

     label77:
        i3 = -1;

        goto label69;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
        catch java.lang.Throwable from label15 to label16 with label09;
        catch java.lang.Throwable from label17 to label18 with label09;
        catch java.lang.Throwable from label18 to label19 with label09;
        catch java.lang.Throwable from label19 to label20 with label09;
        catch java.lang.Throwable from label21 to label22 with label09;
        catch java.lang.Throwable from label23 to label24 with label09;
        catch java.lang.Throwable from label25 to label26 with label09;
        catch java.lang.Throwable from label27 to label28 with label09;
        catch java.lang.Throwable from label29 to label30 with label09;
        catch java.lang.Throwable from label31 to label32 with label09;
        catch java.lang.Throwable from label33 to label34 with label09;
        catch java.lang.Throwable from label35 to label36 with label09;
        catch java.lang.Throwable from label37 to label38 with label09;
        catch java.lang.Throwable from label39 to label40 with label09;
        catch java.lang.Throwable from label41 to label42 with label09;
        catch java.lang.Throwable from label43 to label44 with label09;
        catch java.lang.Throwable from label45 to label46 with label09;
        catch java.lang.Throwable from label47 to label48 with label09;
        catch java.lang.Throwable from label49 to label50 with label09;
        catch java.lang.Throwable from label51 to label52 with label09;
        catch java.lang.Throwable from label53 to label54 with label09;
        catch java.lang.Throwable from label55 to label56 with label09;
        catch java.lang.Throwable from label57 to label58 with label09;
        catch java.lang.Throwable from label59 to label60 with label09;
        catch java.lang.Throwable from label61 to label62 with label09;
        catch java.lang.Throwable from label63 to label64 with label09;
        catch java.lang.Throwable from label65 to label66 with label09;
        catch java.lang.Throwable from label67 to label68 with label09;
    }

    public boolean rotationHasCompatibleMetricsLw(int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        tableswitch(i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label3;
            case 7: goto label2;
            case 8: goto label3;
            case 9: goto label2;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isAnyPortrait(int)>(i1);

        return $z0;

     label3:
        $z1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isLandscapeOrSeascape(int)>(i1);

        return $z1;
    }

    public void screenTurnedOff(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        java.lang.Object r1, r3;
        java.lang.Throwable r2, r4, $r7, $r8;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r5, $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(70000, 0);

        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully> = 0;

        exitmonitor r1;

     label02:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r5 == null goto label03;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r6.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void onScreenTurnedOff(int)>(i0);

     label03:
        r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r3;

     label04:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateLockScreenTimeout()>();

        exitmonitor r3;

     label05:
        return;

     label06:
        $r8 := @caughtexception;

        r2 = $r8;

     label07:
        exitmonitor r1;

     label08:
        throw r2;

     label09:
        $r7 := @caughtexception;

        r4 = $r7;

     label10:
        exitmonitor r3;

     label11:
        throw r4;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$ScreenOnListener r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$ScreenOnListener;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(70000, 1);

        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly> = 1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateLockScreenTimeout()>();

        exitmonitor r2;

     label2:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void waitForKeyguard(android.view.WindowManagerPolicy$ScreenOnListener)>(r1);

        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int selectAnimationLw(android.view.WindowManagerPolicy$WindowState, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, $r2, $r3;
        int i0, $i1;
        android.view.WindowManager$LayoutParams $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if r1 != $r2 goto label04;

        if i0 == 2 goto label01;

        if i0 != 4 goto label02;

     label01:
        return 17432603;

     label02:
        if i0 == 1 goto label03;

        if i0 != 3 goto label12;

     label03:
        return 17432602;

     label04:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if r1 != $r3 goto label12;

        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarOnBottom>;

        if $z2 == 0 goto label08;

        if i0 == 2 goto label05;

        if i0 != 4 goto label06;

     label05:
        return 17432597;

     label06:
        if i0 == 1 goto label07;

        if i0 != 3 goto label12;

     label07:
        return 17432596;

     label08:
        if i0 == 2 goto label09;

        if i0 != 4 goto label10;

     label09:
        return 17432601;

     label10:
        if i0 == 1 goto label11;

        if i0 != 3 goto label12;

     label11:
        return 17432600;

     label12:
        if i0 != 5 goto label13;

        $z1 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean hasAppShownWindows()>();

        if $z1 == 0 goto label14;

        return 17432593;

     label13:
        $r4 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i1 = $r4.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 2023 goto label14;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDreamingLockscreen>;

        if $z0 == 0 goto label14;

        if i0 != 1 goto label14;

        return -1;

     label14:
        return 0;
    }

    public void selectRotationAnimationLw(int[])
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int[] r1;
        android.view.WindowManagerPolicy$WindowState $r2, $r3;
        boolean $z0;
        android.view.WindowManager$LayoutParams $r4;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: int[];

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r2 == null goto label4;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTopIsFullscreen>;

        if $z0 == 0 goto label4;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        $r4 = interfaceinvoke $r3.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i0 = $r4.<android.view.WindowManager$LayoutParams: int rotationAnimation>;

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        r1[1] = 0;

        r1[0] = 0;

        return;

     label2:
        r1[0] = 17432633;

        r1[1] = 17432631;

        return;

     label3:
        r1[0] = 17432632;

        r1[1] = 17432631;

        return;

     label4:
        r1[1] = 0;

        r1[0] = 0;

        return;
    }

    void sendCloseSystemWindows()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r1, null);

        return;
    }

    void sendCloseSystemWindows(java.lang.String)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.String r1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r2, r1);

        return;
    }

    void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState, int, int, android.view.WindowManagerPolicy$WindowState, boolean, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        boolean z0;
        android.graphics.Rect r3, r4, r5, r6, r7, r8, $r9, $r10, $r11;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.view.WindowManagerPolicy$WindowState;

        z0 := @parameter4: boolean;

        r3 := @parameter5: android.graphics.Rect;

        r4 := @parameter6: android.graphics.Rect;

        r5 := @parameter7: android.graphics.Rect;

        r6 := @parameter8: android.graphics.Rect;

        r7 := @parameter9: android.graphics.Rect;

        $i7 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer>;

        if $i7 <= $i6 goto label03;

        $i21 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer>;

        if $i21 >= $i24 goto label03;

        i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r7.<android.graphics.Rect: int left> = i2;

        r6.<android.graphics.Rect: int left> = i2;

        r5.<android.graphics.Rect: int left> = i2;

        r4.<android.graphics.Rect: int left> = i2;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r7.<android.graphics.Rect: int top> = i3;

        r6.<android.graphics.Rect: int top> = i3;

        r5.<android.graphics.Rect: int top> = i3;

        r4.<android.graphics.Rect: int top> = i3;

        i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r7.<android.graphics.Rect: int right> = i4;

        r6.<android.graphics.Rect: int right> = i4;

        r5.<android.graphics.Rect: int right> = i4;

        r4.<android.graphics.Rect: int right> = i4;

        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r7.<android.graphics.Rect: int bottom> = i5;

        r6.<android.graphics.Rect: int bottom> = i5;

        r5.<android.graphics.Rect: int bottom> = i5;

        r4.<android.graphics.Rect: int bottom> = i5;

     label01:
        $i10 = i0 & 256;

        if $i10 != 0 goto label02;

        r4 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getFrameLw()>();

     label02:
        virtualinvoke r3.<android.graphics.Rect: void set(android.graphics.Rect)>(r4);

        return;

     label03:
        if i1 == 16 goto label07;

        $r11 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getOverscanFrameLw()>();

        virtualinvoke r6.<android.graphics.Rect: void set(android.graphics.Rect)>($r11);

     label04:
        if z0 == 0 goto label11;

        r8 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getDisplayFrameLw()>();

     label05:
        virtualinvoke r4.<android.graphics.Rect: void set(android.graphics.Rect)>(r8);

        if z0 == 0 goto label06;

        r6 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getOverscanFrameLw()>();

     label06:
        virtualinvoke r5.<android.graphics.Rect: void set(android.graphics.Rect)>(r6);

        $r10 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getVisibleFrameLw()>();

        virtualinvoke r7.<android.graphics.Rect: void set(android.graphics.Rect)>($r10);

        goto label01;

     label07:
        $r9 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getContentFrameLw()>();

        virtualinvoke r6.<android.graphics.Rect: void set(android.graphics.Rect)>($r9);

        $i8 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer>;

        if $i8 >= $i9 goto label04;

        $i11 = r6.<android.graphics.Rect: int left>;

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        if $i11 >= $i12 goto label08;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        r6.<android.graphics.Rect: int left> = $i23;

     label08:
        $i13 = r6.<android.graphics.Rect: int top>;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        if $i13 >= $i14 goto label09;

        $i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        r6.<android.graphics.Rect: int top> = $i22;

     label09:
        $i15 = r6.<android.graphics.Rect: int right>;

        $i16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        if $i15 <= $i16 goto label10;

        $i18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        r6.<android.graphics.Rect: int right> = $i18;

     label10:
        $i20 = r6.<android.graphics.Rect: int bottom>;

        $i19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        if $i20 <= $i19 goto label04;

        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        r6.<android.graphics.Rect: int bottom> = $i17;

        goto label04;

     label11:
        r8 = r6;

        goto label05;
    }

    public void setCurrentOrientationLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if i0 == $i1 goto label2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation> = i0;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setCurrentUserLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r2, $r5;
        com.android.internal.statusbar.IStatusBarService $r3, $r4;
        android.os.RemoteException $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentUserId> = i0;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r5.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void setCurrentUser(int)>(i0);

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService>;

        if $r3 == null goto label3;

     label2:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService>;

        interfaceinvoke $r4.<com.android.internal.statusbar.IStatusBarService: void setCurrentUser(int)>(i0);

     label3:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setLastInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)>(null, null);

        return;

     label4:
        $r6 := @caughtexception;

        goto label3;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setDisplayOverscan(android.view.Display, int, int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.Display r1;
        int i0, i1, i2, i3, $i4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.Display;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $i4 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        if $i4 != 0 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft> = i0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop> = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight> = i2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom> = i3;

     label1:
        return;
    }

    void setHdmiPlugged(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, $z1;
        android.content.Intent r1, $r2;
        android.os.UserHandle $r5;
        android.content.Context $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged>;

        if $z1 == z0 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged> = z0;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateRotation(boolean,boolean)>(1, 1);

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.HDMI_PLUGGED");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("state", z0);

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r6.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

     label1:
        return;
    }

    public void setInitialDisplaySize(android.view.Display, int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.Display r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, $i18, $i19, $i20, $i21, $i22, $i23;
        android.content.res.Resources r2;
        int[] r3, r4, r5, r6, r7, r8, r9, r10;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.String r11, $r14, $r15, $r16, $r17, $r18, $r19;
        android.content.Context $r12, $r13;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.Display;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        if $r13 == null goto label01;

        $i18 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        if $i18 == 0 goto label02;

     label01:
        return;

     label02:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.Display mDisplay> = r1;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r2 = virtualinvoke $r12.<android.content.Context: android.content.res.Resources getResources()>();

        if i0 <= i1 goto label09;

        i3 = i1;

        i4 = i0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation> = 2;

        $z9 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17891359);

        if $z9 == 0 goto label08;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation> = 3;

     label03:
        $i19 = virtualinvoke r2.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104908);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarHeight> = $i19;

        r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation>;

        i7 = virtualinvoke r2.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104909);

        r4[i6] = i7;

        r3[i5] = i7;

        r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation>;

        i9 = virtualinvoke r2.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104910);

        r6[i10] = i9;

        r5[i8] = i9;

        r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation>;

        r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        i13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation>;

        i16 = virtualinvoke r2.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104911);

        r10[i14] = i16;

        r9[i13] = i16;

        r8[i12] = i16;

        r7[i11] = i16;

        $i21 = i3 * 160;

        i15 = $i21 / i2;

        $i20 = i4 * 160;

        i17 = $i20 / i2;

        if i15 >= 600 goto label11;

        z0 = 1;

     label04:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarCanMove> = z0;

        $z3 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17891396);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar> = $z3;

        r11 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("qemu.hw.mainkeys");

        $r15 = "1";

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z4 == 0 goto label12;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar> = 0;

     label05:
        $r17 = "portrait";

        $r16 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.demo.hdmirotation");

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z5 == 0 goto label13;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDemoHdmiRotation> = $i23;

     label06:
        $z8 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.demo.hdmirotationlock", 0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDemoHdmiRotationLock> = $z8;

        if i17 < 960 goto label14;

        if i15 < 720 goto label14;

        $z7 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17891415);

        if $z7 == 0 goto label14;

        $r18 = "true";

        $r19 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("config.override_forced_orient");

        $z10 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z10 != 0 goto label14;

        z1 = 1;

     label07:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceDefaultOrientation> = z1;

        return;

     label08:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation> = 3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation> = 1;

        goto label03;

     label09:
        i3 = i0;

        i4 = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation> = 2;

        $z2 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17891359);

        if $z2 == 0 goto label10;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation> = 3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation> = 1;

        goto label03;

     label10:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation> = 3;

        goto label03;

     label11:
        z0 = 0;

        goto label04;

     label12:
        $r14 = "0";

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z6 == 0 goto label05;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar> = 1;

        goto label05;

     label13:
        $i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDemoHdmiRotation> = $i22;

        goto label06;

     label14:
        z1 = 0;

        goto label07;
    }

    public void setLastInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManagerPolicy$WindowState;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow> = r1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow> = r2;

        return;
    }

    public void setRotationLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void setCurrentRotation(int)>(i0);

        return;
    }

    public void setSafeMode(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        short s0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSafeMode> = z0;

        if z0 == 0 goto label2;

        s0 = 10001;

     label1:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>(null, s0, 1);

        return;

     label2:
        s0 = 10000;

        goto label1;
    }

    public void setTouchExplorationEnabled(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTouchExplorationEnabled> = z0;

        return;
    }

    public void setUserRotationMode(int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1;
        android.content.ContentResolver r1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if i0 != 1 goto label1;

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "user_rotation", i1, -2);

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accelerometer_rotation", 0, -2);

        return;

     label1:
        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accelerometer_rotation", 1, -2);

        return;
    }

    public void showBootMessage(java.lang.CharSequence, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.CharSequence r1;
        boolean z0, $z1;
        com.android.internal.policy.impl.PhoneWindowManager$21 $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: java.lang.CharSequence;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHeadless>;

        if $z1 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r2 = new com.android.internal.policy.impl.PhoneWindowManager$21;

        specialinvoke $r2.<com.android.internal.policy.impl.PhoneWindowManager$21: void <init>(com.android.internal.policy.impl.PhoneWindowManager,java.lang.CharSequence)>(r0, r1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    void showGlobalActionsDialog()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, $z1;
        com.android.internal.policy.impl.GlobalActions $r1, $r2, $r4;
        android.os.PowerManager $r3;
        long $l0;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r5;
        android.content.Context $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalActions mGlobalActions>;

        if $r1 != null goto label1;

        $r4 = new com.android.internal.policy.impl.GlobalActions;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        specialinvoke $r4.<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)>($r6, $r5);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalActions mGlobalActions> = $r4;

     label1:
        z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardIsShowingTq()>();

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalActions mGlobalActions>;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isDeviceProvisioned()>();

        virtualinvoke $r2.<com.android.internal.policy.impl.GlobalActions: void showDialog(boolean,boolean)>(z0, $z1);

        if z0 == 0 goto label2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r3.<android.os.PowerManager: void userActivity(long,boolean)>($l0, 0);

     label2:
        return;
    }

    void showOrHideRecentAppsDialog(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        com.android.internal.policy.impl.PhoneWindowManager$5 $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r1 = new com.android.internal.policy.impl.PhoneWindowManager$5;

        specialinvoke $r1.<com.android.internal.policy.impl.PhoneWindowManager$5: void <init>(com.android.internal.policy.impl.PhoneWindowManager,int)>(r0, i0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    void startDockOrHome()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Intent r1, $r4;
        android.os.UserHandle $r3, $r6;
        android.content.Context $r5, $r7;
        android.content.ActivityNotFoundException $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void awakenDreams()>();

        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent createHomeDockIntent()>();

        if r1 == null goto label4;

     label1:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r6 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r7.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r6);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

     label4:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        $r3 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r5.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>($r4, $r3);

        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    public int subWindowTypeToLayerLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1000: goto label2;
            case 1001: goto label3;
            case 1002: goto label5;
            case 1003: goto label2;
            case 1004: goto label4;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown sub-window type: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WindowManager", $r4);

        return 0;

     label2:
        return 1;

     label3:
        return -2;

     label4:
        return -1;

     label5:
        return 2;
    }

    public void systemBooted()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r3, $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r4.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void onBootCompleted()>();

     label1:
        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemBooted> = 1;

        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void systemReady()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r8;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindowManager$20 $r3;
        android.os.Handler $r4;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r5, $r7;
        android.content.Context $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHeadless>;

        if $z0 != 0 goto label1;

        $r5 = new com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke $r5.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void <init>(android.content.Context,com.android.internal.widget.LockPatternUtils)>($r6, null);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate> = $r5;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r7.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void onSystemReady()>();

     label1:
        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemReady> = 1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = new com.android.internal.policy.impl.PhoneWindowManager$20;

        specialinvoke $r3.<com.android.internal.policy.impl.PhoneWindowManager$20: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        exitmonitor r1;

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void updateOrientationListenerLp()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r1, $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        $z2 = virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: boolean canDetectOrientation()>();

        if $z2 != 0 goto label2;

     label1:
        return;

     label2:
        z0 = 1;

        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly>;

        if $z3 == 0 goto label3;

        $z5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean needSensorRunningLp()>();

        if $z5 == 0 goto label3;

        z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled>;

        z0 = 0;

        if z1 != 0 goto label3;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        virtualinvoke $r3.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void enable()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled> = 1;

     label3:
        if z0 == 0 goto label1;

        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled>;

        if $z4 == 0 goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void disable()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled> = 0;

        return;
    }

    void updateRotation(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r2.<android.view.IWindowManager: void updateRotation(boolean,boolean)>(z0, 0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void updateRotation(boolean, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, z1;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r2.<android.view.IWindowManager: void updateRotation(boolean,boolean)>(z0, z1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void updateSettings()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        byte b0, b3;
        android.content.ContentResolver r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r9;
        int i1, i2, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean z0, z1, $z2, $z3;
        java.lang.String r4;
        android.os.Handler r5;
        android.content.Context $r6;
        com.android.internal.policy.impl.ImmersiveModeConfirmation $r7, $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        b0 = 2;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r1 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $i6 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "end_button_behavior", 2, -2);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mEndcallBehavior> = $i6;

        $i7 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "incall_power_button_behavior", 1, -2);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mIncallPowerBehavior> = $i7;

        i1 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "user_rotation", 0, -2);

        i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotation>;

     label02:
        z0 = 0;

        if i2 == i1 goto label05;

     label03:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotation> = i1;

     label04:
        z0 = 1;

     label05:
        $i9 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accelerometer_rotation", 0, -2);

        if $i9 == 0 goto label23;

     label06:
        b3 = 0;

     label07:
        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode>;

        if $i8 == b3 goto label10;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode> = b3;

     label08:
        z0 = 1;

     label09:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

     label10:
        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemReady>;

        if $z2 == 0 goto label13;

        i5 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "pointer_location", 0, -2);

        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPointerLocationMode>;

        if $i11 == i5 goto label13;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPointerLocationMode> = i5;

        r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

     label11:
        if i5 == 0 goto label12;

        b0 = 1;

     label12:
        virtualinvoke r5.<android.os.Handler: boolean sendEmptyMessage(int)>(b0);

     label13:
        $i10 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screen_off_timeout", 0, -2);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLockScreenTimeout> = $i10;

        r4 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r1, "default_input_method", -2);

     label14:
        z1 = 0;

        if r4 == null goto label17;

     label15:
        i4 = virtualinvoke r4.<java.lang.String: int length()>();

     label16:
        z1 = 0;

        if i4 <= 0 goto label17;

        z1 = 1;

     label17:
        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput>;

        if $z3 == z1 goto label19;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput> = z1;

     label18:
        z0 = 1;

     label19:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation>;

        if $r7 == null goto label20;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation>;

        virtualinvoke $r8.<com.android.internal.policy.impl.ImmersiveModeConfirmation: void loadSetting()>();

     label20:
        exitmonitor r2;

     label21:
        if z0 == 0 goto label22;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateRotation(boolean)>(1);

     label22:
        return;

     label23:
        b3 = 1;

        goto label07;

     label24:
        $r9 := @caughtexception;

        r3 = $r9;

     label25:
        exitmonitor r2;

     label26:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch java.lang.Throwable from label10 to label11 with label24;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch java.lang.Throwable from label17 to label18 with label24;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    public void userActivity()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout r1, $r3, $r5;
        java.lang.Throwable r2, $r7;
        boolean $z0;
        android.os.Handler $r4, $r6;
        int $i0;
        long $l1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLockScreenTimerActive>;

        if $z0 == 0 goto label2;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3);

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLockScreenTimeout>;

        $l1 = (long) $i0;

        virtualinvoke $r6.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r5, $l1);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean validateRotationAnimationLw(int, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, $i2, $i3;
        boolean z0;
        int[] r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        tableswitch(i0)
        {
            case 17432632: goto label2;
            case 17432633: goto label2;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        if z0 == 0 goto label3;

        return 0;

     label3:
        r1 = newarray (int)[2];

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void selectRotationAnimationLw(int[])>(r1);

        $i2 = r1[0];

        if i0 != $i2 goto label4;

        $i3 = r1[1];

        if i1 == $i3 goto label1;

     label4:
        return 0;
    }

    public int windowTypeToLayerLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        if i0 < 1 goto label02;

        if i0 > 99 goto label02;

     label01:
        return 2;

     label02:
        tableswitch(i0)
        {
            case 2000: goto label18;
            case 2001: goto label06;
            case 2002: goto label05;
            case 2003: goto label11;
            case 2004: goto label15;
            case 2005: goto label08;
            case 2006: goto label21;
            case 2007: goto label09;
            case 2008: goto label07;
            case 2009: goto label16;
            case 2010: goto label24;
            case 2011: goto label12;
            case 2012: goto label13;
            case 2013: goto label01;
            case 2014: goto label19;
            case 2015: goto label28;
            case 2016: goto label27;
            case 2017: goto label17;
            case 2018: goto label30;
            case 2019: goto label22;
            case 2020: goto label20;
            case 2021: goto label29;
            case 2022: goto label31;
            case 2023: goto label10;
            case 2024: goto label23;
            case 2025: goto label04;
            case 2026: goto label26;
            case 2027: goto label25;
            case 2028: goto label07;
            case 2029: goto label14;
            case 2030: goto label01;
            default: goto label03;
        };

     label03:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown window type: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WindowManager", $r4);

        return 2;

     label04:
        return 1;

     label05:
        return 3;

     label06:
        return 4;

     label07:
        return 5;

     label08:
        return 6;

     label09:
        return 7;

     label10:
        return 8;

     label11:
        return 9;

     label12:
        return 10;

     label13:
        return 11;

     label14:
        return 12;

     label15:
        return 13;

     label16:
        return 14;

     label17:
        return 15;

     label18:
        return 16;

     label19:
        return 17;

     label20:
        return 18;

     label21:
        return 19;

     label22:
        return 20;

     label23:
        return 21;

     label24:
        return 22;

     label25:
        return 23;

     label26:
        return 24;

     label27:
        return 25;

     label28:
        return 26;

     label29:
        return 27;

     label30:
        return 28;

     label31:
        return 29;
    }
}
