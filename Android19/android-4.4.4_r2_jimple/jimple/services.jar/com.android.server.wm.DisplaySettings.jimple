public class com.android.server.wm.DisplaySettings extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final java.util.HashMap mEntries;
    private final android.util.AtomicFile mFile;

    public void <init>(android.content.Context)
    {
        com.android.server.wm.DisplaySettings r0;
        android.content.Context r1;
        java.util.HashMap $r2;
        android.util.AtomicFile $r3;
        java.io.File $r4, $r5, $r6;

        r0 := @this: com.android.server.wm.DisplaySettings;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries> = $r2;

        r0.<com.android.server.wm.DisplaySettings: android.content.Context mContext> = r1;

        $r3 = new android.util.AtomicFile;

        $r4 = new java.io.File;

        $r5 = new java.io.File;

        $r6 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "system");

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "display_settings.xml");

        specialinvoke $r3.<android.util.AtomicFile: void <init>(java.io.File)>($r4);

        r0.<com.android.server.wm.DisplaySettings: android.util.AtomicFile mFile> = $r3;

        return;
    }

    private int getIntAttribute(org.xmlpull.v1.XmlPullParser, java.lang.String)
    {
        com.android.server.wm.DisplaySettings r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2, r4;
        int i0, i1;
        java.lang.NumberFormatException $r5;

        r0 := @this: com.android.server.wm.DisplaySettings;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: java.lang.String;

     label1:
        r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, r2);

     label2:
        i0 = 0;

        if r4 == null goto label5;

     label3:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

     label4:
        i0 = i1;

     label5:
        return i0;

     label6:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label6;
        catch java.lang.NumberFormatException from label3 to label4 with label6;
    }

    private void readDisplay(org.xmlpull.v1.XmlPullParser) throws java.lang.NumberFormatException, org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.wm.DisplaySettings r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2;
        com.android.server.wm.DisplaySettings$Entry r3, $r4;
        int $i0, $i1, $i2, $i3;
        java.util.HashMap $r5;

        r0 := @this: com.android.server.wm.DisplaySettings;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        if r2 == null goto label1;

        $r4 = new com.android.server.wm.DisplaySettings$Entry;

        specialinvoke $r4.<com.android.server.wm.DisplaySettings$Entry: void <init>(java.lang.String)>(r2);

        r3 = $r4;

        $i0 = specialinvoke r0.<com.android.server.wm.DisplaySettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "overscanLeft");

        r3.<com.android.server.wm.DisplaySettings$Entry: int overscanLeft> = $i0;

        $i1 = specialinvoke r0.<com.android.server.wm.DisplaySettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "overscanTop");

        r3.<com.android.server.wm.DisplaySettings$Entry: int overscanTop> = $i1;

        $i2 = specialinvoke r0.<com.android.server.wm.DisplaySettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "overscanRight");

        r3.<com.android.server.wm.DisplaySettings$Entry: int overscanRight> = $i2;

        $i3 = specialinvoke r0.<com.android.server.wm.DisplaySettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "overscanBottom");

        r3.<com.android.server.wm.DisplaySettings$Entry: int overscanBottom> = $i3;

        $r5 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label1:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

        return;
    }

    public void getOverscanLocked(java.lang.String, android.graphics.Rect)
    {
        com.android.server.wm.DisplaySettings r0;
        java.lang.String r1;
        android.graphics.Rect r2;
        com.android.server.wm.DisplaySettings$Entry r3;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.wm.DisplaySettings;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.graphics.Rect;

        $r4 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.wm.DisplaySettings$Entry) $r5;

        if r3 == null goto label1;

        $i0 = r3.<com.android.server.wm.DisplaySettings$Entry: int overscanLeft>;

        r2.<android.graphics.Rect: int left> = $i0;

        $i1 = r3.<com.android.server.wm.DisplaySettings$Entry: int overscanTop>;

        r2.<android.graphics.Rect: int top> = $i1;

        $i2 = r3.<com.android.server.wm.DisplaySettings$Entry: int overscanRight>;

        r2.<android.graphics.Rect: int right> = $i2;

        $i3 = r3.<com.android.server.wm.DisplaySettings$Entry: int overscanBottom>;

        r2.<android.graphics.Rect: int bottom> = $i3;

        return;

     label1:
        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        return;
    }

    public void readSettingsLocked()
    {
        com.android.server.wm.DisplaySettings r0;
        java.io.FileInputStream r2;
        java.lang.Throwable r3, $r73;
        java.lang.IndexOutOfBoundsException r5, $r78;
        java.io.IOException r7, $r37, $r38, $r47, $r48, $r49, $r54, $r62, $r63, $r72;
        org.xmlpull.v1.XmlPullParserException r9, $r36;
        java.lang.NumberFormatException r11, $r42;
        java.lang.NullPointerException r13, $r71;
        java.lang.IllegalStateException r14, $r27, $r57;
        int i0, i1, i2, $i4;
        org.xmlpull.v1.XmlPullParser r17;
        android.util.AtomicFile $r18, $r29;
        java.lang.StringBuilder $r21, $r23, $r25, $r30, $r31, $r33, $r34, $r39, $r40, $r41, $r43, $r44, $r50, $r51, $r56, $r58, $r59, $r64, $r66, $r67, $r68, $r69, $r74, $r75, $r76;
        java.lang.String $r22, $r24, $r26, $r32, $r45, $r52, $r60, $r65, $r79, $r81;
        boolean $z0;
        java.io.FileNotFoundException $r28;
        java.io.File $r35;
        java.util.HashMap $r46, $r53, $r55, $r61, $r70, $r77, $r80;

        r0 := @this: com.android.server.wm.DisplaySettings;

     label01:
        $r18 = r0.<com.android.server.wm.DisplaySettings: android.util.AtomicFile mFile>;

        r2 = virtualinvoke $r18.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r17 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r2, null);

     label03:
        i0 = interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: int next()>();

     label04:
        if i0 == 2 goto label05;

        if i0 != 1 goto label03;

     label05:
        if i0 == 2 goto label13;

     label06:
        $r27 = new java.lang.IllegalStateException;

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no start tag found");

        throw $r27;

     label07:
        $r57 := @caughtexception;

        r14 = $r57;

     label08:
        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r65);

     label09:
        $r61 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        virtualinvoke $r61.<java.util.HashMap: void clear()>();

     label10:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label11:
        return;

     label12:
        $r28 := @caughtexception;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No existing display settings ");

        $r29 = r0.<com.android.server.wm.DisplaySettings: android.util.AtomicFile mFile>;

        $r35 = virtualinvoke $r29.<android.util.AtomicFile: java.io.File getBaseFile()>();

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; starting empty");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r32);

        return;

     label13:
        i2 = interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label14:
        i1 = interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: int next()>();

     label15:
        if i1 == 1 goto label34;

        if i1 != 3 goto label17;

     label16:
        $i4 = interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i4 <= i2 goto label34;

     label17:
        if i1 == 3 goto label14;

        if i1 == 4 goto label14;

     label18:
        $r22 = interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("display");

        if $z0 == 0 goto label26;

        specialinvoke r0.<com.android.server.wm.DisplaySettings: void readDisplay(org.xmlpull.v1.XmlPullParser)>(r17);

     label19:
        goto label14;

     label20:
        $r71 := @caughtexception;

        r13 = $r71;

     label21:
        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r79 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r79);

     label22:
        $r77 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        virtualinvoke $r77.<java.util.HashMap: void clear()>();

     label23:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label24:
        return;

     label25:
        $r47 := @caughtexception;

        return;

     label26:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown element under <display-settings>: ");

        $r26 = interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r24);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r17);

     label27:
        goto label14;

     label28:
        $r42 := @caughtexception;

        r11 = $r42;

     label29:
        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        $r51 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r52);

     label30:
        $r53 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        virtualinvoke $r53.<java.util.HashMap: void clear()>();

     label31:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label32:
        return;

     label33:
        $r62 := @caughtexception;

        return;

     label34:
        goto label35;

     label35:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label36:
        return;

     label37:
        $r54 := @caughtexception;

        return;

     label38:
        $r36 := @caughtexception;

        r9 = $r36;

     label39:
        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r45);

     label40:
        $r46 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        virtualinvoke $r46.<java.util.HashMap: void clear()>();

     label41:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label42:
        return;

     label43:
        $r63 := @caughtexception;

        return;

     label44:
        $r49 := @caughtexception;

        r7 = $r49;

     label45:
        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r60);

     label46:
        $r55 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        virtualinvoke $r55.<java.util.HashMap: void clear()>();

     label47:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label48:
        return;

     label49:
        $r72 := @caughtexception;

        return;

     label50:
        $r78 := @caughtexception;

        r5 = $r78;

     label51:
        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r81 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r81);

     label52:
        $r80 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        virtualinvoke $r80.<java.util.HashMap: void clear()>();

     label53:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label54:
        return;

     label55:
        $r37 := @caughtexception;

        return;

     label56:
        $r73 := @caughtexception;

        r3 = $r73;

        $r70 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        virtualinvoke $r70.<java.util.HashMap: void clear()>();

     label57:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label58:
        throw r3;

     label59:
        $r38 := @caughtexception;

        return;

     label60:
        $r48 := @caughtexception;

        goto label58;

        catch java.io.FileNotFoundException from label01 to label02 with label12;
        catch java.lang.IllegalStateException from label02 to label03 with label07;
        catch java.lang.NullPointerException from label02 to label03 with label20;
        catch java.lang.NumberFormatException from label02 to label03 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label38;
        catch java.io.IOException from label02 to label03 with label44;
        catch java.lang.IndexOutOfBoundsException from label02 to label03 with label50;
        catch java.lang.Throwable from label02 to label03 with label56;
        catch java.lang.IllegalStateException from label03 to label04 with label07;
        catch java.lang.NullPointerException from label03 to label04 with label20;
        catch java.lang.NumberFormatException from label03 to label04 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label38;
        catch java.io.IOException from label03 to label04 with label44;
        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label50;
        catch java.lang.Throwable from label03 to label04 with label56;
        catch java.lang.IllegalStateException from label06 to label07 with label07;
        catch java.lang.NullPointerException from label06 to label07 with label20;
        catch java.lang.NumberFormatException from label06 to label07 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label38;
        catch java.io.IOException from label06 to label07 with label44;
        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label50;
        catch java.lang.Throwable from label06 to label07 with label56;
        catch java.lang.Throwable from label08 to label09 with label56;
        catch java.io.IOException from label10 to label11 with label59;
        catch java.lang.IllegalStateException from label13 to label14 with label07;
        catch java.lang.NullPointerException from label13 to label14 with label20;
        catch java.lang.NumberFormatException from label13 to label14 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label38;
        catch java.io.IOException from label13 to label14 with label44;
        catch java.lang.IndexOutOfBoundsException from label13 to label14 with label50;
        catch java.lang.Throwable from label13 to label14 with label56;
        catch java.lang.IllegalStateException from label14 to label15 with label07;
        catch java.lang.NullPointerException from label14 to label15 with label20;
        catch java.lang.NumberFormatException from label14 to label15 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label38;
        catch java.io.IOException from label14 to label15 with label44;
        catch java.lang.IndexOutOfBoundsException from label14 to label15 with label50;
        catch java.lang.Throwable from label14 to label15 with label56;
        catch java.lang.IllegalStateException from label16 to label17 with label07;
        catch java.lang.NullPointerException from label16 to label17 with label20;
        catch java.lang.NumberFormatException from label16 to label17 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label16 to label17 with label38;
        catch java.io.IOException from label16 to label17 with label44;
        catch java.lang.IndexOutOfBoundsException from label16 to label17 with label50;
        catch java.lang.Throwable from label16 to label17 with label56;
        catch java.lang.IllegalStateException from label18 to label19 with label07;
        catch java.lang.NullPointerException from label18 to label19 with label20;
        catch java.lang.NumberFormatException from label18 to label19 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label38;
        catch java.io.IOException from label18 to label19 with label44;
        catch java.lang.IndexOutOfBoundsException from label18 to label19 with label50;
        catch java.lang.Throwable from label18 to label19 with label56;
        catch java.lang.Throwable from label21 to label22 with label56;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.lang.IllegalStateException from label26 to label27 with label07;
        catch java.lang.NullPointerException from label26 to label27 with label20;
        catch java.lang.NumberFormatException from label26 to label27 with label28;
        catch org.xmlpull.v1.XmlPullParserException from label26 to label27 with label38;
        catch java.io.IOException from label26 to label27 with label44;
        catch java.lang.IndexOutOfBoundsException from label26 to label27 with label50;
        catch java.lang.Throwable from label26 to label27 with label56;
        catch java.lang.Throwable from label29 to label30 with label56;
        catch java.io.IOException from label31 to label32 with label33;
        catch java.io.IOException from label35 to label36 with label37;
        catch java.lang.Throwable from label39 to label40 with label56;
        catch java.io.IOException from label41 to label42 with label43;
        catch java.lang.Throwable from label45 to label46 with label56;
        catch java.io.IOException from label47 to label48 with label49;
        catch java.lang.Throwable from label51 to label52 with label56;
        catch java.io.IOException from label53 to label54 with label55;
        catch java.io.IOException from label57 to label58 with label60;
    }

    public void setOverscanLocked(java.lang.String, int, int, int, int)
    {
        com.android.server.wm.DisplaySettings r0;
        java.lang.String r1;
        int i0, i1, i2, i3;
        com.android.server.wm.DisplaySettings$Entry r2, $r5;
        java.util.HashMap $r3, $r6, $r8;
        java.lang.Object $r4;

        r0 := @this: com.android.server.wm.DisplaySettings;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        if i0 != 0 goto label1;

        if i1 != 0 goto label1;

        if i2 != 0 goto label1;

        if i3 != 0 goto label1;

        $r8 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;

     label1:
        $r3 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.wm.DisplaySettings$Entry) $r4;

        if r2 != null goto label2;

        $r5 = new com.android.server.wm.DisplaySettings$Entry;

        specialinvoke $r5.<com.android.server.wm.DisplaySettings$Entry: void <init>(java.lang.String)>(r1);

        r2 = $r5;

        $r6 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label2:
        r2.<com.android.server.wm.DisplaySettings$Entry: int overscanLeft> = i0;

        r2.<com.android.server.wm.DisplaySettings$Entry: int overscanTop> = i1;

        r2.<com.android.server.wm.DisplaySettings$Entry: int overscanRight> = i2;

        r2.<com.android.server.wm.DisplaySettings$Entry: int overscanBottom> = i3;

        return;
    }

    public void writeSettingsLocked()
    {
        com.android.server.wm.DisplaySettings r0;
        java.io.IOException r1, r4, $r28, $r30;
        java.io.FileOutputStream r2;
        com.android.internal.util.FastXmlSerializer r3, $r8;
        java.util.Iterator r5;
        com.android.server.wm.DisplaySettings$Entry r6;
        android.util.AtomicFile $r7, $r15, $r29;
        java.lang.Boolean $r9;
        java.util.HashMap $r10;
        java.util.Collection $r12;
        boolean $z0;
        java.lang.Object $r14;
        java.lang.String $r16, $r20, $r22, $r25, $r27, $r34;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.StringBuilder $r31, $r32, $r33;

        r0 := @this: com.android.server.wm.DisplaySettings;

     label01:
        $r7 = r0.<com.android.server.wm.DisplaySettings: android.util.AtomicFile mFile>;

        r2 = virtualinvoke $r7.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label02:
        $r8 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r8.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r3 = $r8;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r2, "utf-8");

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r9);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "display-settings");

        $r10 = r0.<com.android.server.wm.DisplaySettings: java.util.HashMap mEntries>;

        $r12 = virtualinvoke $r10.<java.util.HashMap: java.util.Collection values()>();

        r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.android.server.wm.DisplaySettings$Entry) $r14;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "display");

        $r16 = r6.<com.android.server.wm.DisplaySettings$Entry: java.lang.String name>;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r16);

        $i0 = r6.<com.android.server.wm.DisplaySettings$Entry: int overscanLeft>;

        if $i0 == 0 goto label04;

        $i7 = r6.<com.android.server.wm.DisplaySettings$Entry: int overscanLeft>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i7);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "overscanLeft", $r27);

     label04:
        $i2 = r6.<com.android.server.wm.DisplaySettings$Entry: int overscanTop>;

        if $i2 == 0 goto label05;

        $i6 = r6.<com.android.server.wm.DisplaySettings$Entry: int overscanTop>;

        $r25 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "overscanTop", $r25);

     label05:
        $i1 = r6.<com.android.server.wm.DisplaySettings$Entry: int overscanRight>;

        if $i1 == 0 goto label06;

        $i5 = r6.<com.android.server.wm.DisplaySettings$Entry: int overscanRight>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "overscanRight", $r22);

     label06:
        $i3 = r6.<com.android.server.wm.DisplaySettings$Entry: int overscanBottom>;

        if $i3 == 0 goto label07;

        $i4 = r6.<com.android.server.wm.DisplaySettings$Entry: int overscanBottom>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "overscanBottom", $r20);

     label07:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "display");

     label08:
        goto label03;

     label09:
        $r30 := @caughtexception;

        r4 = $r30;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failed to write display settings, restoring backup.", r4);

        $r29 = r0.<com.android.server.wm.DisplaySettings: android.util.AtomicFile mFile>;

        virtualinvoke $r29.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r2);

        return;

     label10:
        $r28 := @caughtexception;

        r1 = $r28;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write display settings: ");

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r34);

        return;

     label11:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "display-settings");

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r15 = r0.<com.android.server.wm.DisplaySettings: android.util.AtomicFile mFile>;

        virtualinvoke $r15.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r2);

     label12:
        return;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label02 to label03 with label09;
        catch java.io.IOException from label03 to label04 with label09;
        catch java.io.IOException from label04 to label05 with label09;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.io.IOException from label06 to label07 with label09;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label11 to label12 with label09;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.DisplaySettings: java.lang.String TAG> = "WindowManager";

        return;
    }
}
