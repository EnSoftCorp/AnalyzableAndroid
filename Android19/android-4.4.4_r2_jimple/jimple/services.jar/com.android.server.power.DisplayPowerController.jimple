final class com.android.server.power.DisplayPowerController extends java.lang.Object
{
    private static final long BRIGHTENING_LIGHT_DEBOUNCE;
    private static final float BRIGHTENING_LIGHT_HYSTERESIS;
    private static final int BRIGHTNESS_RAMP_RATE_FAST;
    private static final int BRIGHTNESS_RAMP_RATE_SLOW;
    private static final long DARKENING_LIGHT_DEBOUNCE;
    private static final float DARKENING_LIGHT_HYSTERESIS;
    private static boolean DEBUG;
    private static final boolean DEBUG_PRETEND_LIGHT_SENSOR_ABSENT;
    private static final boolean DEBUG_PRETEND_PROXIMITY_SENSOR_ABSENT;
    private static final int ELECTRON_BEAM_OFF_ANIMATION_DURATION_MILLIS;
    private static final int ELECTRON_BEAM_ON_ANIMATION_DURATION_MILLIS;
    private static final int LIGHT_SENSOR_RATE_MILLIS;
    private static final long LONG_TERM_AVERAGE_LIGHT_TIME_CONSTANT;
    private static final int MSG_LIGHT_SENSOR_DEBOUNCED;
    private static final int MSG_PROXIMITY_SENSOR_DEBOUNCED;
    private static final int MSG_UPDATE_POWER_STATE;
    private static final int PROXIMITY_NEGATIVE;
    private static final int PROXIMITY_POSITIVE;
    private static final int PROXIMITY_SENSOR_NEGATIVE_DEBOUNCE_DELAY;
    private static final int PROXIMITY_SENSOR_POSITIVE_DEBOUNCE_DELAY;
    private static final int PROXIMITY_UNKNOWN;
    private static final float SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT_MAX_GAMMA;
    private static final int SCREEN_DIM_MINIMUM_REDUCTION;
    private static final long SHORT_TERM_AVERAGE_LIGHT_TIME_CONSTANT;
    private static final int SYNTHETIC_LIGHT_SENSOR_RATE_MILLIS;
    private static final java.lang.String TAG;
    private static final float TWILIGHT_ADJUSTMENT_MAX_GAMMA;
    private static final long TWILIGHT_ADJUSTMENT_TIME;
    private static final float TYPICAL_PROXIMITY_THRESHOLD;
    private static final boolean USE_ELECTRON_BEAM_ON_ANIMATION;
    private static final boolean USE_SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT;
    private static final boolean USE_TWILIGHT_ADJUSTMENT;
    private float mAmbientLux;
    private boolean mAmbientLuxValid;
    private final android.animation.Animator$AnimatorListener mAnimatorListener;
    private float mBrighteningLuxThreshold;
    private android.os.Handler mCallbackHandler;
    private final com.android.server.power.DisplayPowerController$Callbacks mCallbacks;
    private final java.lang.Runnable mCleanListener;
    private float mDarkeningLuxThreshold;
    private int mDebounceLuxDirection;
    private long mDebounceLuxTime;
    private final com.android.server.power.DisplayBlanker mDisplayBlanker;
    private final com.android.server.display.DisplayManagerService mDisplayManager;
    private boolean mDisplayReadyLocked;
    private final com.android.server.power.SuspendBlocker mDisplaySuspendBlocker;
    private boolean mElectronBeamFadesConfig;
    private android.animation.ObjectAnimator mElectronBeamOffAnimator;
    private android.animation.ObjectAnimator mElectronBeamOnAnimator;
    private final com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler;
    private float mLastObservedLux;
    private long mLastObservedLuxTime;
    private float mLastScreenAutoBrightnessGamma;
    private android.hardware.Sensor mLightSensor;
    private long mLightSensorEnableTime;
    private boolean mLightSensorEnabled;
    private final android.hardware.SensorEventListener mLightSensorListener;
    private int mLightSensorWarmUpTimeConfig;
    private final com.android.server.LightsService mLights;
    private final java.lang.Object mLock;
    private final com.android.server.power.Notifier mNotifier;
    private final java.lang.Runnable mOnProximityNegativeRunnable;
    private final java.lang.Runnable mOnProximityPositiveRunnable;
    private final java.lang.Runnable mOnStateChangedRunnable;
    private int mPendingProximity;
    private long mPendingProximityDebounceTime;
    private boolean mPendingRequestChangedLocked;
    private com.android.server.power.DisplayPowerRequest mPendingRequestLocked;
    private boolean mPendingUpdatePowerStateLocked;
    private boolean mPendingWaitForNegativeProximityLocked;
    private com.android.server.power.DisplayPowerRequest mPowerRequest;
    private com.android.server.power.DisplayPowerState mPowerState;
    private int mProximity;
    private android.hardware.Sensor mProximitySensor;
    private boolean mProximitySensorEnabled;
    private final android.hardware.SensorEventListener mProximitySensorListener;
    private float mProximityThreshold;
    private int mRecentLightSamples;
    private float mRecentLongTermAverageLux;
    private float mRecentShortTermAverageLux;
    private int mScreenAutoBrightness;
    private android.util.Spline mScreenAutoBrightnessSpline;
    private final int mScreenBrightnessDimConfig;
    private com.android.server.power.RampAnimator mScreenBrightnessRampAnimator;
    private final int mScreenBrightnessRangeMaximum;
    private final int mScreenBrightnessRangeMinimum;
    private boolean mScreenOffBecauseOfProximity;
    private long mScreenOnBlockStartRealTime;
    private boolean mScreenOnWasBlocked;
    private final android.hardware.SensorManager mSensorManager;
    private final com.android.server.TwilightService mTwilight;
    private boolean mTwilightChanged;
    private final com.android.server.TwilightService$TwilightListener mTwilightListener;
    private boolean mUseSoftwareAutoBrightnessConfig;
    private boolean mUsingScreenAutoBrightness;
    private boolean mWaitingForNegativeProximity;

    static void <clinit>()
    {
        boolean $z0, $z1;

        <com.android.server.power.DisplayPowerController: float TYPICAL_PROXIMITY_THRESHOLD> = 5.0F;

        <com.android.server.power.DisplayPowerController: long TWILIGHT_ADJUSTMENT_TIME> = 7200000L;

        <com.android.server.power.DisplayPowerController: float TWILIGHT_ADJUSTMENT_MAX_GAMMA> = 1.5F;

        <com.android.server.power.DisplayPowerController: java.lang.String TAG> = "DisplayPowerController";

        <com.android.server.power.DisplayPowerController: int SYNTHETIC_LIGHT_SENSOR_RATE_MILLIS> = 2000;

        <com.android.server.power.DisplayPowerController: long SHORT_TERM_AVERAGE_LIGHT_TIME_CONSTANT> = 1000L;

        <com.android.server.power.DisplayPowerController: int SCREEN_DIM_MINIMUM_REDUCTION> = 10;

        <com.android.server.power.DisplayPowerController: float SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT_MAX_GAMMA> = 3.0F;

        <com.android.server.power.DisplayPowerController: int PROXIMITY_UNKNOWN> = -1;

        <com.android.server.power.DisplayPowerController: int PROXIMITY_SENSOR_POSITIVE_DEBOUNCE_DELAY> = 0;

        <com.android.server.power.DisplayPowerController: int PROXIMITY_SENSOR_NEGATIVE_DEBOUNCE_DELAY> = 250;

        <com.android.server.power.DisplayPowerController: int PROXIMITY_POSITIVE> = 1;

        <com.android.server.power.DisplayPowerController: int PROXIMITY_NEGATIVE> = 0;

        <com.android.server.power.DisplayPowerController: int MSG_UPDATE_POWER_STATE> = 1;

        <com.android.server.power.DisplayPowerController: int MSG_PROXIMITY_SENSOR_DEBOUNCED> = 2;

        <com.android.server.power.DisplayPowerController: int MSG_LIGHT_SENSOR_DEBOUNCED> = 3;

        <com.android.server.power.DisplayPowerController: long LONG_TERM_AVERAGE_LIGHT_TIME_CONSTANT> = 5000L;

        <com.android.server.power.DisplayPowerController: int LIGHT_SENSOR_RATE_MILLIS> = 1000;

        <com.android.server.power.DisplayPowerController: int ELECTRON_BEAM_ON_ANIMATION_DURATION_MILLIS> = 250;

        <com.android.server.power.DisplayPowerController: int ELECTRON_BEAM_OFF_ANIMATION_DURATION_MILLIS> = 400;

        <com.android.server.power.DisplayPowerController: boolean DEBUG_PRETEND_PROXIMITY_SENSOR_ABSENT> = 0;

        <com.android.server.power.DisplayPowerController: boolean DEBUG_PRETEND_LIGHT_SENSOR_ABSENT> = 0;

        <com.android.server.power.DisplayPowerController: float DARKENING_LIGHT_HYSTERESIS> = 0.2F;

        <com.android.server.power.DisplayPowerController: long DARKENING_LIGHT_DEBOUNCE> = 8000L;

        <com.android.server.power.DisplayPowerController: int BRIGHTNESS_RAMP_RATE_SLOW> = 40;

        <com.android.server.power.DisplayPowerController: int BRIGHTNESS_RAMP_RATE_FAST> = 200;

        <com.android.server.power.DisplayPowerController: float BRIGHTENING_LIGHT_HYSTERESIS> = 0.1F;

        <com.android.server.power.DisplayPowerController: long BRIGHTENING_LIGHT_DEBOUNCE> = 4000L;

        <com.android.server.power.DisplayPowerController: boolean DEBUG> = 0;

        $z0 = staticinvoke <android.os.PowerManager: boolean useScreenAutoBrightnessAdjustmentFeature()>();

        <com.android.server.power.DisplayPowerController: boolean USE_SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT> = $z0;

        $z1 = staticinvoke <android.os.PowerManager: boolean useTwilightAdjustmentFeature()>();

        <com.android.server.power.DisplayPowerController: boolean USE_TWILIGHT_ADJUSTMENT> = $z1;

        return;
    }

    public void <init>(android.os.Looper, android.content.Context, com.android.server.power.Notifier, com.android.server.LightsService, com.android.server.TwilightService, android.hardware.SensorManager, com.android.server.display.DisplayManagerService, com.android.server.power.SuspendBlocker, com.android.server.power.DisplayBlanker, com.android.server.power.DisplayPowerController$Callbacks, android.os.Handler)
    {
        com.android.server.power.DisplayPowerController r0;
        android.os.Looper r1;
        android.content.Context r2;
        com.android.server.power.Notifier r3;
        com.android.server.LightsService r4;
        com.android.server.TwilightService r5, $r32;
        android.hardware.SensorManager r6, $r26, $r33;
        com.android.server.display.DisplayManagerService r7;
        com.android.server.power.SuspendBlocker r8;
        com.android.server.power.DisplayBlanker r9;
        com.android.server.power.DisplayPowerController$Callbacks r10;
        android.os.Handler r11;
        android.content.res.Resources r12;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        int[] r13, r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.hardware.Sensor $r25, $r27, $r30, $r31;
        com.android.server.power.DisplayPowerController$DisplayControllerHandler $r28, r56;
        com.android.server.TwilightService$TwilightListener $r29;
        float $f0, $f1;
        android.util.Spline $r34, $r35;
        java.lang.StringBuilder $r36, $r38, $r39, $r40, $r41, $r42, $r44, $r45, $r46, r57;
        java.lang.String $r43;
        java.lang.Object r47;
        com.android.server.power.DisplayPowerController$1 r48;
        com.android.server.power.DisplayPowerController$2 r49;
        com.android.server.power.DisplayPowerController$3 r50;
        com.android.server.power.DisplayPowerController$4 r51;
        com.android.server.power.DisplayPowerController$5 r52;
        com.android.server.power.DisplayPowerController$7 r53;
        com.android.server.power.DisplayPowerController$8 r54;
        com.android.server.power.DisplayPowerController$9 r55;
        android.animation.Animator$AnimatorListener r58;
        android.hardware.SensorEventListener r59, r60;

        r0 := @this: com.android.server.power.DisplayPowerController;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: com.android.server.power.Notifier;

        r4 := @parameter3: com.android.server.LightsService;

        r5 := @parameter4: com.android.server.TwilightService;

        r6 := @parameter5: android.hardware.SensorManager;

        r7 := @parameter6: com.android.server.display.DisplayManagerService;

        r8 := @parameter7: com.android.server.power.SuspendBlocker;

        r9 := @parameter8: com.android.server.power.DisplayBlanker;

        r10 := @parameter9: com.android.server.power.DisplayPowerController$Callbacks;

        r11 := @parameter10: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r47 = new java.lang.Object;

        specialinvoke r47.<java.lang.Object: void <init>()>();

        r0.<com.android.server.power.DisplayPowerController: java.lang.Object mLock> = r47;

        r0.<com.android.server.power.DisplayPowerController: int mProximity> = -1;

        r0.<com.android.server.power.DisplayPowerController: int mPendingProximity> = -1;

        r0.<com.android.server.power.DisplayPowerController: long mPendingProximityDebounceTime> = -1L;

        r0.<com.android.server.power.DisplayPowerController: int mScreenAutoBrightness> = -1;

        r0.<com.android.server.power.DisplayPowerController: float mLastScreenAutoBrightnessGamma> = 1.0F;

        r48 = new com.android.server.power.DisplayPowerController$1;

        specialinvoke r48.<com.android.server.power.DisplayPowerController$1: void <init>(com.android.server.power.DisplayPowerController)>(r0);

        r58 = (android.animation.Animator$AnimatorListener) r48;

        r0.<com.android.server.power.DisplayPowerController: android.animation.Animator$AnimatorListener mAnimatorListener> = r58;

        r49 = new com.android.server.power.DisplayPowerController$2;

        specialinvoke r49.<com.android.server.power.DisplayPowerController$2: void <init>(com.android.server.power.DisplayPowerController)>(r0);

        r0.<com.android.server.power.DisplayPowerController: java.lang.Runnable mCleanListener> = r49;

        r50 = new com.android.server.power.DisplayPowerController$3;

        specialinvoke r50.<com.android.server.power.DisplayPowerController$3: void <init>(com.android.server.power.DisplayPowerController)>(r0);

        r0.<com.android.server.power.DisplayPowerController: java.lang.Runnable mOnStateChangedRunnable> = r50;

        r51 = new com.android.server.power.DisplayPowerController$4;

        specialinvoke r51.<com.android.server.power.DisplayPowerController$4: void <init>(com.android.server.power.DisplayPowerController)>(r0);

        r0.<com.android.server.power.DisplayPowerController: java.lang.Runnable mOnProximityPositiveRunnable> = r51;

        r52 = new com.android.server.power.DisplayPowerController$5;

        specialinvoke r52.<com.android.server.power.DisplayPowerController$5: void <init>(com.android.server.power.DisplayPowerController)>(r0);

        r0.<com.android.server.power.DisplayPowerController: java.lang.Runnable mOnProximityNegativeRunnable> = r52;

        r53 = new com.android.server.power.DisplayPowerController$7;

        specialinvoke r53.<com.android.server.power.DisplayPowerController$7: void <init>(com.android.server.power.DisplayPowerController)>(r0);

        r59 = (android.hardware.SensorEventListener) r53;

        r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorEventListener mProximitySensorListener> = r59;

        r54 = new com.android.server.power.DisplayPowerController$8;

        specialinvoke r54.<com.android.server.power.DisplayPowerController$8: void <init>(com.android.server.power.DisplayPowerController)>(r0);

        r60 = (android.hardware.SensorEventListener) r54;

        r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorEventListener mLightSensorListener> = r60;

        r55 = new com.android.server.power.DisplayPowerController$9;

        specialinvoke r55.<com.android.server.power.DisplayPowerController$9: void <init>(com.android.server.power.DisplayPowerController)>(r0);

        r0.<com.android.server.power.DisplayPowerController: com.android.server.TwilightService$TwilightListener mTwilightListener> = r55;

        r56 = new com.android.server.power.DisplayPowerController$DisplayControllerHandler;

        specialinvoke r56.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: void <init>(com.android.server.power.DisplayPowerController,android.os.Looper)>(r0, r1);

        r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler> = r56;

        r0.<com.android.server.power.DisplayPowerController: com.android.server.power.Notifier mNotifier> = r3;

        r0.<com.android.server.power.DisplayPowerController: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker> = r8;

        r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayBlanker mDisplayBlanker> = r9;

        r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$Callbacks mCallbacks> = r10;

        r0.<com.android.server.power.DisplayPowerController: android.os.Handler mCallbackHandler> = r11;

        r0.<com.android.server.power.DisplayPowerController: com.android.server.LightsService mLights> = r4;

        r0.<com.android.server.power.DisplayPowerController: com.android.server.TwilightService mTwilight> = r5;

        r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorManager mSensorManager> = r6;

        r0.<com.android.server.power.DisplayPowerController: com.android.server.display.DisplayManagerService mDisplayManager> = r7;

        r12 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke r12.<android.content.res.Resources: int getInteger(int)>(17694765);

        $i3 = staticinvoke <com.android.server.power.DisplayPowerController: int clampAbsoluteBrightness(int)>($i1);

        r0.<com.android.server.power.DisplayPowerController: int mScreenBrightnessDimConfig> = $i3;

        $i2 = virtualinvoke r12.<android.content.res.Resources: int getInteger(int)>(17694762);

        $i4 = r0.<com.android.server.power.DisplayPowerController: int mScreenBrightnessDimConfig>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i4);

        $z1 = virtualinvoke r12.<android.content.res.Resources: boolean getBoolean(int)>(17891353);

        r0.<com.android.server.power.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig> = $z1;

        $z2 = r0.<com.android.server.power.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig>;

        if $z2 == 0 goto label2;

        r13 = virtualinvoke r12.<android.content.res.Resources: int[] getIntArray(int)>(17235999);

        r14 = virtualinvoke r12.<android.content.res.Resources: int[] getIntArray(int)>(17236000);

        $r35 = staticinvoke <com.android.server.power.DisplayPowerController: android.util.Spline createAutoBrightnessSpline(int[],int[])>(r13, r14);

        r0.<com.android.server.power.DisplayPowerController: android.util.Spline mScreenAutoBrightnessSpline> = $r35;

        $r34 = r0.<com.android.server.power.DisplayPowerController: android.util.Spline mScreenAutoBrightnessSpline>;

        if $r34 != null goto label6;

        r57 = new java.lang.StringBuilder;

        specialinvoke r57.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in config.xml.  config_autoBrightnessLcdBacklightValues (size ");

        $i8 = lengthof r14;

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be monotic and have exactly one more entry than ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config_autoBrightnessLevels (size ");

        $i10 = lengthof r13;

        $r44 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("which must be strictly increasing.  ");

        $r42 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto-brightness will be disabled.");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DisplayPowerController", $r43);

        r0.<com.android.server.power.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig> = 0;

     label1:
        $i6 = virtualinvoke r12.<android.content.res.Resources: int getInteger(int)>(17694766);

        r0.<com.android.server.power.DisplayPowerController: int mLightSensorWarmUpTimeConfig> = $i6;

     label2:
        $i5 = staticinvoke <com.android.server.power.DisplayPowerController: int clampAbsoluteBrightness(int)>(i0);

        r0.<com.android.server.power.DisplayPowerController: int mScreenBrightnessRangeMinimum> = $i5;

        r0.<com.android.server.power.DisplayPowerController: int mScreenBrightnessRangeMaximum> = 255;

        $z0 = virtualinvoke r12.<android.content.res.Resources: boolean getBoolean(int)>(17891356);

        r0.<com.android.server.power.DisplayPowerController: boolean mElectronBeamFadesConfig> = $z0;

        $r26 = r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r27 = virtualinvoke $r26.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(8);

        r0.<com.android.server.power.DisplayPowerController: android.hardware.Sensor mProximitySensor> = $r27;

        $r25 = r0.<com.android.server.power.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        if $r25 == null goto label3;

        $r31 = r0.<com.android.server.power.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        $f1 = virtualinvoke $r31.<android.hardware.Sensor: float getMaximumRange()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f1, 5.0F);

        r0.<com.android.server.power.DisplayPowerController: float mProximityThreshold> = $f0;

     label3:
        $z3 = r0.<com.android.server.power.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig>;

        if $z3 == 0 goto label4;

        $r33 = r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r30 = virtualinvoke $r33.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(5);

        r0.<com.android.server.power.DisplayPowerController: android.hardware.Sensor mLightSensor> = $r30;

     label4:
        $z4 = r0.<com.android.server.power.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig>;

        if $z4 == 0 goto label5;

        $z5 = <com.android.server.power.DisplayPowerController: boolean USE_TWILIGHT_ADJUSTMENT>;

        if $z5 == 0 goto label5;

        $r32 = r0.<com.android.server.power.DisplayPowerController: com.android.server.TwilightService mTwilight>;

        $r29 = r0.<com.android.server.power.DisplayPowerController: com.android.server.TwilightService$TwilightListener mTwilightListener>;

        $r28 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r32.<com.android.server.TwilightService: void registerListener(com.android.server.TwilightService$TwilightListener,android.os.Handler)>($r29, $r28);

     label5:
        return;

     label6:
        $i7 = r14[0];

        if $i7 >= i0 goto label1;

        i0 = r14[0];

        goto label1;
    }

    static void access$000(com.android.server.power.DisplayPowerController)
    {
        com.android.server.power.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void sendUpdatePowerState()>();

        return;
    }

    static com.android.server.power.DisplayPowerController$Callbacks access$100(com.android.server.power.DisplayPowerController)
    {
        com.android.server.power.DisplayPowerController r0;
        com.android.server.power.DisplayPowerController$Callbacks $r1;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$Callbacks mCallbacks>;

        return $r1;
    }

    static boolean access$1000(com.android.server.power.DisplayPowerController)
    {
        com.android.server.power.DisplayPowerController r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        $z0 = r0.<com.android.server.power.DisplayPowerController: boolean mLightSensorEnabled>;

        return $z0;
    }

    static void access$1100(com.android.server.power.DisplayPowerController, long, float)
    {
        com.android.server.power.DisplayPowerController r0;
        long l0;
        float f0;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void handleLightSensorEvent(long,float)>(l0, f0);

        return;
    }

    static boolean access$1202(com.android.server.power.DisplayPowerController, boolean)
    {
        com.android.server.power.DisplayPowerController r0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        z0 := @parameter1: boolean;

        r0.<com.android.server.power.DisplayPowerController: boolean mTwilightChanged> = z0;

        return z0;
    }

    static com.android.server.power.SuspendBlocker access$200(com.android.server.power.DisplayPowerController)
    {
        com.android.server.power.DisplayPowerController r0;
        com.android.server.power.SuspendBlocker $r1;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        return $r1;
    }

    static void access$300(com.android.server.power.DisplayPowerController, java.io.PrintWriter)
    {
        com.android.server.power.DisplayPowerController r0;
        java.io.PrintWriter r1;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void dumpLocal(java.io.PrintWriter)>(r1);

        return;
    }

    static void access$400(com.android.server.power.DisplayPowerController)
    {
        com.android.server.power.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void updatePowerState()>();

        return;
    }

    static void access$500(com.android.server.power.DisplayPowerController)
    {
        com.android.server.power.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void debounceProximitySensor()>();

        return;
    }

    static void access$600(com.android.server.power.DisplayPowerController)
    {
        com.android.server.power.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void debounceLightSensor()>();

        return;
    }

    static boolean access$700(com.android.server.power.DisplayPowerController)
    {
        com.android.server.power.DisplayPowerController r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        $z0 = r0.<com.android.server.power.DisplayPowerController: boolean mProximitySensorEnabled>;

        return $z0;
    }

    static float access$800(com.android.server.power.DisplayPowerController)
    {
        com.android.server.power.DisplayPowerController r0;
        float $f0;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        $f0 = r0.<com.android.server.power.DisplayPowerController: float mProximityThreshold>;

        return $f0;
    }

    static void access$900(com.android.server.power.DisplayPowerController, long, boolean)
    {
        com.android.server.power.DisplayPowerController r0;
        long l0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.DisplayPowerController;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void handleProximitySensorEvent(long,boolean)>(l0, z0);

        return;
    }

    private void animateScreenBrightness(int, int)
    {
        com.android.server.power.DisplayPowerController r0;
        int i0, i1;
        com.android.server.power.RampAnimator $r1;
        boolean $z0;
        com.android.server.power.Notifier $r2;

        r0 := @this: com.android.server.power.DisplayPowerController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.RampAnimator mScreenBrightnessRampAnimator>;

        $z0 = virtualinvoke $r1.<com.android.server.power.RampAnimator: boolean animateTo(int,int)>(i0, i1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r2.<com.android.server.power.Notifier: void onScreenBrightness(int)>(i0);

     label1:
        return;
    }

    private void applyLightSensorMeasurement(long, float)
    {
        com.android.server.power.DisplayPowerController r0;
        long l0, l1, $l5, $l6, $l7;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        int $i2, $i3, $i4;

        r0 := @this: com.android.server.power.DisplayPowerController;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        $i2 = r0.<com.android.server.power.DisplayPowerController: int mRecentLightSamples>;

        $i3 = 1 + $i2;

        r0.<com.android.server.power.DisplayPowerController: int mRecentLightSamples> = $i3;

        $i4 = r0.<com.android.server.power.DisplayPowerController: int mRecentLightSamples>;

        if $i4 != 1 goto label2;

        r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux> = f0;

        r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux> = f0;

     label1:
        r0.<com.android.server.power.DisplayPowerController: float mLastObservedLux> = f0;

        r0.<com.android.server.power.DisplayPowerController: long mLastObservedLuxTime> = l0;

        return;

     label2:
        $l5 = r0.<com.android.server.power.DisplayPowerController: long mLastObservedLuxTime>;

        l1 = l0 - $l5;

        $f6 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $f1 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $f3 = f0 - $f1;

        $f2 = (float) l1;

        $f5 = $f3 * $f2;

        $l6 = 1000L + l1;

        $f4 = (float) $l6;

        $f7 = $f5 / $f4;

        $f9 = $f6 + $f7;

        r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux> = $f9;

        $f16 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $f8 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $f10 = f0 - $f8;

        $f11 = (float) l1;

        $f14 = $f10 * $f11;

        $l7 = 5000L + l1;

        $f12 = (float) $l7;

        $f13 = $f14 / $f12;

        $f15 = $f16 + $f13;

        r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux> = $f15;

        goto label1;
    }

    private void blockScreenOn()
    {
        com.android.server.power.DisplayPowerController r0;
        boolean $z0, $z1;
        long $l1;

        r0 := @this: com.android.server.power.DisplayPowerController;

        $z0 = r0.<com.android.server.power.DisplayPowerController: boolean mScreenOnWasBlocked>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.power.DisplayPowerController: boolean mScreenOnWasBlocked> = 1;

        $z1 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", "Blocked screen on.");

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.power.DisplayPowerController: long mScreenOnBlockStartRealTime> = $l1;

     label1:
        return;
    }

    private static int clamp(int, int, int)
    {
        int i0, i1, i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 > i1 goto label1;

        return i1;

     label1:
        if i0 < i2 goto label2;

        return i2;

     label2:
        return i0;
    }

    private static int clampAbsoluteBrightness(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.android.server.power.DisplayPowerController: int clamp(int,int,int)>(i0, 0, 255);

        return $i1;
    }

    private int clampScreenBrightness(int)
    {
        com.android.server.power.DisplayPowerController r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.power.DisplayPowerController;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.server.power.DisplayPowerController: int mScreenBrightnessRangeMinimum>;

        $i1 = r0.<com.android.server.power.DisplayPowerController: int mScreenBrightnessRangeMaximum>;

        $i3 = staticinvoke <com.android.server.power.DisplayPowerController: int clamp(int,int,int)>(i0, $i2, $i1);

        return $i3;
    }

    private void clearPendingProximityDebounceTime()
    {
        com.android.server.power.DisplayPowerController r0;
        long $l0;
        byte $b1;
        com.android.server.power.SuspendBlocker $r1;

        r0 := @this: com.android.server.power.DisplayPowerController;

        $l0 = r0.<com.android.server.power.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        r0.<com.android.server.power.DisplayPowerController: long mPendingProximityDebounceTime> = -1L;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r1.<com.android.server.power.SuspendBlocker: void release()>();

     label1:
        return;
    }

    private static android.util.Spline createAutoBrightnessSpline(int[], int[])
    {
        int[] r0, r1;
        java.lang.IllegalArgumentException r2, $r14;
        android.util.Spline r3;
        int i0, i1, $i2, $i3, $i5, $i6, $i8, $i10, $i12;
        float[] r4, r5;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        java.lang.Object[] r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        boolean $z0;
        java.lang.String $r9, $r12;
        byte $b7;
        java.lang.Float $r11, $r13;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

     label01:
        i0 = lengthof r1;

        r4 = newarray (float)[i0];

        r5 = newarray (float)[i0];

        $i2 = r1[0];

        $f1 = staticinvoke <com.android.server.power.DisplayPowerController: float normalizeAbsoluteBrightness(int)>($i2);

        r5[0] = $f1;

     label02:
        i1 = 1;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $i10 = i1 - 1;

        $i8 = r0[$i10];

        $f5 = (float) $i8;

        r4[i1] = $f5;

        $i12 = r1[i1];

        $f6 = staticinvoke <com.android.server.power.DisplayPowerController: float normalizeAbsoluteBrightness(int)>($i12);

        r5[i1] = $f6;

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        r3 = staticinvoke <android.util.Spline: android.util.Spline createMonotoneCubicSpline(float[],float[])>(r4, r5);

        $z0 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z0 == 0 goto label11;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto-brightness spline: ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r9);

     label07:
        f0 = 1.0F;

     label08:
        $i3 = lengthof r0;

        $i6 = -1 + $i3;

        $i5 = r0[$i6];

        $f3 = (float) $i5;

        $f2 = 1.25F * $f3;

        $b7 = f0 cmpg $f2;

        if $b7 >= 0 goto label11;

        r6 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        r6[0] = $r11;

        $f4 = virtualinvoke r3.<android.util.Spline: float interpolate(float)>(f0);

        $r13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);

        r6[1] = $r13;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("  %7.1f: %7.1f", r6);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r12);

     label09:
        f0 = f0 * 1.25F;

        goto label08;

     label10:
        $r14 := @caughtexception;

        r2 = $r14;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayPowerController", "Could not create auto-brightness spline.", r2);

        r3 = null;

     label11:
        return r3;

        catch java.lang.IllegalArgumentException from label01 to label02 with label10;
        catch java.lang.IllegalArgumentException from label04 to label05 with label10;
        catch java.lang.IllegalArgumentException from label06 to label07 with label10;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
    }

    private void debounceLightSensor()
    {
        com.android.server.power.DisplayPowerController r0;
        long l0, $l1, $l2, $l4, $l5;
        boolean $z0, $z1;
        byte $b3;
        float $f0;
        java.lang.StringBuilder $r1, $r2, $r3, $r5;
        java.lang.String $r4;

        r0 := @this: com.android.server.power.DisplayPowerController;

        $z0 = r0.<com.android.server.power.DisplayPowerController: boolean mLightSensorEnabled>;

        if $z0 == 0 goto label3;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<com.android.server.power.DisplayPowerController: long mLastObservedLuxTime>;

        $l2 = 2000L + $l1;

        $b3 = l0 cmp $l2;

        if $b3 < 0 goto label2;

        $z1 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z1 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("debounceLightSensor: Synthesizing light sensor measurement after ");

        $l4 = r0.<com.android.server.power.DisplayPowerController: long mLastObservedLuxTime>;

        $l5 = l0 - $l4;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms.");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r4);

     label1:
        $f0 = r0.<com.android.server.power.DisplayPowerController: float mLastObservedLux>;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void applyLightSensorMeasurement(long,float)>(l0, $f0);

     label2:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void updateAmbientLux(long)>(l0);

     label3:
        return;
    }

    private void debounceProximitySensor()
    {
        com.android.server.power.DisplayPowerController r0;
        long l0, $l2, $l4, $l6;
        android.os.Message r1;
        boolean $z0;
        int $i1, $i7;
        byte $b3, $b5;
        com.android.server.power.DisplayPowerController$DisplayControllerHandler $r2, $r3;

        r0 := @this: com.android.server.power.DisplayPowerController;

        $z0 = r0.<com.android.server.power.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z0 == 0 goto label1;

        $i1 = r0.<com.android.server.power.DisplayPowerController: int mPendingProximity>;

        if $i1 == -1 goto label1;

        $l2 = r0.<com.android.server.power.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label1;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = r0.<com.android.server.power.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b5 = $l4 cmp l0;

        if $b5 > 0 goto label2;

        $i7 = r0.<com.android.server.power.DisplayPowerController: int mPendingProximity>;

        r0.<com.android.server.power.DisplayPowerController: int mProximity> = $i7;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void updatePowerState()>();

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void clearPendingProximityDebounceTime()>();

     label1:
        return;

     label2:
        $r2 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        $l6 = r0.<com.android.server.power.DisplayPowerController: long mPendingProximityDebounceTime>;

        virtualinvoke $r3.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: boolean sendMessageAtTime(android.os.Message,long)>(r1, $l6);

        return;
    }

    private void dumpLocal(java.io.PrintWriter)
    {
        com.android.server.power.DisplayPowerController r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r28, $r30, $r32, $r34, $r36, $r37, $r38, $r40, $r41, $r42, $r44, $r45, $r47, $r50, $r51, $r53, $r54, $r55, $r57, $r58, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r68, $r70, $r72, $r74, $r75, $r76, $r77, $r78, $r80, $r81, $r82, $r83, $r85, $r87, $r89, $r90, $r92, $r93, $r94, $r95, $r97, $r98, $r99, $r102, $r103, $r104, $r106, $r109, $r110, $r113, $r114, $r115, $r119, $r122, $r123, $r125;
        com.android.server.power.DisplayPowerRequest $r4;
        java.lang.String $r6, $r10, $r16, $r18, $r24, $r27, $r29, $r31, $r33, $r35, $r39, $r43, $r46, $r49, $r52, $r56, $r59, $r67, $r69, $r71, $r73, $r79, $r84, $r86, $r88, $r91, $r96, $r100, $r101, $r105, $r112, $r118, $r126;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.hardware.Sensor $r13, $r48;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        int $i0, $i1, $i5, $i7, $i8;
        long $l2, $l3, $l4, $l6;
        com.android.server.power.DisplayPowerState $r107, $r108;
        android.animation.ObjectAnimator $r111, $r120, $r121, $r124;
        com.android.server.TwilightService$TwilightState $r116;
        com.android.server.TwilightService $r117;

        r0 := @this: com.android.server.power.DisplayPowerController;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Display Controller Thread State:");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPowerRequest=");

        $r4 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWaitingForNegativeProximity=");

        $z0 = r0.<com.android.server.power.DisplayPowerController: boolean mWaitingForNegativeProximity>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximitySensor=");

        $r13 = r0.<com.android.server.power.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximitySensorEnabled=");

        $z1 = r0.<com.android.server.power.DisplayPowerController: boolean mProximitySensorEnabled>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximityThreshold=");

        $f0 = r0.<com.android.server.power.DisplayPowerController: float mProximityThreshold>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximity=");

        $i0 = r0.<com.android.server.power.DisplayPowerController: int mProximity>;

        $r27 = staticinvoke <com.android.server.power.DisplayPowerController: java.lang.String proximityToString(int)>($i0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingProximity=");

        $i1 = r0.<com.android.server.power.DisplayPowerController: int mPendingProximity>;

        $r33 = staticinvoke <com.android.server.power.DisplayPowerController: java.lang.String proximityToString(int)>($i1);

        $r34 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r31 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingProximityDebounceTime=");

        $l2 = r0.<com.android.server.power.DisplayPowerController: long mPendingProximityDebounceTime>;

        $r35 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l2);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r39);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenOffBecauseOfProximity=");

        $z2 = r0.<com.android.server.power.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        $r44 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r43);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLightSensor=");

        $r48 = r0.<com.android.server.power.DisplayPowerController: android.hardware.Sensor mLightSensor>;

        $r47 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r46);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLightSensorEnabled=");

        $z3 = r0.<com.android.server.power.DisplayPowerController: boolean mLightSensorEnabled>;

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r49);

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLightSensorEnableTime=");

        $l3 = r0.<com.android.server.power.DisplayPowerController: long mLightSensorEnableTime>;

        $r52 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l3);

        $r58 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r59);

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAmbientLux=");

        $f1 = r0.<com.android.server.power.DisplayPowerController: float mAmbientLux>;

        $r55 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r56);

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAmbientLuxValid=");

        $z4 = r0.<com.android.server.power.DisplayPowerController: boolean mAmbientLuxValid>;

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r67);

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastObservedLux=");

        $f2 = r0.<com.android.server.power.DisplayPowerController: float mLastObservedLux>;

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r73 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r73);

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastObservedLuxTime=");

        $l4 = r0.<com.android.server.power.DisplayPowerController: long mLastObservedLuxTime>;

        $r69 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l4);

        $r68 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r71 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r71);

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mRecentLightSamples=");

        $i5 = r0.<com.android.server.power.DisplayPowerController: int mRecentLightSamples>;

        $r80 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r79 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r79);

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mRecentShortTermAverageLux=");

        $f3 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        $r86 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r86);

        $r87 = new java.lang.StringBuilder;

        specialinvoke $r87.<java.lang.StringBuilder: void <init>()>();

        $r85 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mRecentLongTermAverageLux=");

        $f4 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $r83 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r84);

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDebounceLuxDirection=");

        $i7 = r0.<com.android.server.power.DisplayPowerController: int mDebounceLuxDirection>;

        $r93 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r91 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r91);

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDebounceLuxTime=");

        $l6 = r0.<com.android.server.power.DisplayPowerController: long mDebounceLuxTime>;

        $r88 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l6);

        $r89 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r88);

        $r100 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r100);

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenAutoBrightness=");

        $i8 = r0.<com.android.server.power.DisplayPowerController: int mScreenAutoBrightness>;

        $r97 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r96 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r96);

        $r95 = new java.lang.StringBuilder;

        specialinvoke $r95.<java.lang.StringBuilder: void <init>()>();

        $r94 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUsingScreenAutoBrightness=");

        $z5 = r0.<com.android.server.power.DisplayPowerController: boolean mUsingScreenAutoBrightness>;

        $r106 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r105 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r105);

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        $r103 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastScreenAutoBrightnessGamma=");

        $f5 = r0.<com.android.server.power.DisplayPowerController: float mLastScreenAutoBrightnessGamma>;

        $r102 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f5);

        $r101 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r101);

        $r115 = new java.lang.StringBuilder;

        specialinvoke $r115.<java.lang.StringBuilder: void <init>()>();

        $r114 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mTwilight.getCurrentState()=");

        $r117 = r0.<com.android.server.power.DisplayPowerController: com.android.server.TwilightService mTwilight>;

        $r116 = virtualinvoke $r117.<com.android.server.TwilightService: com.android.server.TwilightService$TwilightState getCurrentState()>();

        $r119 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r116);

        $r118 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r118);

        $r121 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOnAnimator>;

        if $r121 == null goto label1;

        $r122 = new java.lang.StringBuilder;

        specialinvoke $r122.<java.lang.StringBuilder: void <init>()>();

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mElectronBeamOnAnimator.isStarted()=");

        $r124 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOnAnimator>;

        $z7 = virtualinvoke $r124.<android.animation.ObjectAnimator: boolean isStarted()>();

        $r125 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r126);

     label1:
        $r120 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOffAnimator>;

        if $r120 == null goto label2;

        $r110 = new java.lang.StringBuilder;

        specialinvoke $r110.<java.lang.StringBuilder: void <init>()>();

        $r109 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mElectronBeamOffAnimator.isStarted()=");

        $r111 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOffAnimator>;

        $z6 = virtualinvoke $r111.<android.animation.ObjectAnimator: boolean isStarted()>();

        $r113 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r112 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r112);

     label2:
        $r108 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        if $r108 == null goto label3;

        $r107 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        virtualinvoke $r107.<com.android.server.power.DisplayPowerState: void dump(java.io.PrintWriter)>(r1);

     label3:
        return;
    }

    private static float getTwilightGamma(long, long, long)
    {
        long l0, l1, l2, $l7, $l9, $l11, $l12;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        byte $b3, $b4, $b5, $b6, $b8, $b10;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        f0 = 1.5F;

        $b3 = l1 cmp 0L;

        if $b3 < 0 goto label1;

        $b4 = l2 cmp 0L;

        if $b4 < 0 goto label1;

        $b5 = l0 cmp l1;

        if $b5 < 0 goto label1;

        $b6 = l0 cmp l2;

        if $b6 <= 0 goto label3;

     label1:
        f0 = 1.0F;

     label2:
        return f0;

     label3:
        $l7 = l1 + 7200000L;

        $b8 = l0 cmp $l7;

        if $b8 >= 0 goto label4;

        $l12 = l0 - l1;

        $f5 = (float) $l12;

        $f4 = $f5 / 7200000.0F;

        $f6 = staticinvoke <com.android.server.power.DisplayPowerController: float lerp(float,float,float)>(1.0F, 1.5F, $f4);

        return $f6;

     label4:
        $l9 = l2 - 7200000L;

        $b10 = l0 cmp $l9;

        if $b10 <= 0 goto label2;

        $l11 = l2 - l0;

        $f2 = (float) $l11;

        $f1 = $f2 / 7200000.0F;

        $f3 = staticinvoke <com.android.server.power.DisplayPowerController: float lerp(float,float,float)>(1.0F, 1.5F, $f1);

        return $f3;
    }

    private void handleLightSensorEvent(long, float)
    {
        com.android.server.power.DisplayPowerController r0;
        long l0;
        float f0;
        com.android.server.power.DisplayPowerController$DisplayControllerHandler $r1;

        r0 := @this: com.android.server.power.DisplayPowerController;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r1.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: void removeMessages(int)>(3);

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void applyLightSensorMeasurement(long,float)>(l0, f0);

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void updateAmbientLux(long)>(l0);

        return;
    }

    private void handleProximitySensorEvent(long, boolean)
    {
        com.android.server.power.DisplayPowerController r0;
        long l0, $l3, $l4;
        boolean z0, $z1;
        int $i1, $i2;
        com.android.server.power.DisplayPowerController$DisplayControllerHandler $r1;

        r0 := @this: com.android.server.power.DisplayPowerController;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.power.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z1 == 0 goto label1;

        $i1 = r0.<com.android.server.power.DisplayPowerController: int mPendingProximity>;

        if $i1 != 0 goto label2;

        if z0 != 0 goto label2;

     label1:
        return;

     label2:
        $i2 = r0.<com.android.server.power.DisplayPowerController: int mPendingProximity>;

        if $i2 != 1 goto label3;

        if z0 != 0 goto label1;

     label3:
        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r1.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: void removeMessages(int)>(2);

        if z0 == 0 goto label5;

        r0.<com.android.server.power.DisplayPowerController: int mPendingProximity> = 1;

        $l4 = 0L + l0;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setPendingProximityDebounceTime(long)>($l4);

     label4:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void debounceProximitySensor()>();

        return;

     label5:
        r0.<com.android.server.power.DisplayPowerController: int mPendingProximity> = 0;

        $l3 = 250L + l0;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setPendingProximityDebounceTime(long)>($l3);

        goto label4;
    }

    private void initialize()
    {
        com.android.server.power.DisplayPowerController r0;
        com.android.server.display.DisplayManagerService $r3;
        com.android.server.LightsService $r4;
        com.android.server.power.DisplayBlanker $r5;
        com.android.server.LightsService$Light $r6;
        float[] $r7, $r15;
        android.util.FloatProperty $r8, $r17;
        com.android.server.power.DisplayPowerState $r9, $r16, $r24, r27;
        android.animation.ObjectAnimator $r10, $r11, $r14, $r18, $r19, $r23;
        android.animation.Animator$AnimatorListener $r13, $r20;
        android.util.IntProperty $r25;
        com.android.server.power.ElectronBeam r26;
        com.android.server.power.RampAnimator r28;
        android.util.Property r29, r30;

        r0 := @this: com.android.server.power.DisplayPowerController;

        r27 = new com.android.server.power.DisplayPowerState;

        r26 = new com.android.server.power.ElectronBeam;

        $r3 = r0.<com.android.server.power.DisplayPowerController: com.android.server.display.DisplayManagerService mDisplayManager>;

        specialinvoke r26.<com.android.server.power.ElectronBeam: void <init>(com.android.server.display.DisplayManagerService)>($r3);

        $r5 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayBlanker mDisplayBlanker>;

        $r4 = r0.<com.android.server.power.DisplayPowerController: com.android.server.LightsService mLights>;

        $r6 = virtualinvoke $r4.<com.android.server.LightsService: com.android.server.LightsService$Light getLight(int)>(0);

        specialinvoke r27.<com.android.server.power.DisplayPowerState: void <init>(com.android.server.power.ElectronBeam,com.android.server.power.DisplayBlanker,com.android.server.LightsService$Light)>(r26, $r5, $r6);

        r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState> = r27;

        $r9 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        $r8 = <com.android.server.power.DisplayPowerState: android.util.FloatProperty ELECTRON_BEAM_LEVEL>;

        $r7 = newarray (float)[2];

        $r7[0] = 0.0F;

        $r7[1] = 1.0F;

        r29 = (android.util.Property) $r8;

        $r10 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r9, r29, $r7);

        r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOnAnimator> = $r10;

        $r11 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOnAnimator>;

        virtualinvoke $r11.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>(250L);

        $r14 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOnAnimator>;

        $r13 = r0.<com.android.server.power.DisplayPowerController: android.animation.Animator$AnimatorListener mAnimatorListener>;

        virtualinvoke $r14.<android.animation.ObjectAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r13);

        $r16 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        $r17 = <com.android.server.power.DisplayPowerState: android.util.FloatProperty ELECTRON_BEAM_LEVEL>;

        $r15 = newarray (float)[2];

        $r15[0] = 1.0F;

        $r15[1] = 0.0F;

        r30 = (android.util.Property) $r17;

        $r19 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r16, r30, $r15);

        r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOffAnimator> = $r19;

        $r18 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOffAnimator>;

        virtualinvoke $r18.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>(400L);

        $r23 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOffAnimator>;

        $r20 = r0.<com.android.server.power.DisplayPowerController: android.animation.Animator$AnimatorListener mAnimatorListener>;

        virtualinvoke $r23.<android.animation.ObjectAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r20);

        r28 = new com.android.server.power.RampAnimator;

        $r24 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        $r25 = <com.android.server.power.DisplayPowerState: android.util.IntProperty SCREEN_BRIGHTNESS>;

        specialinvoke r28.<com.android.server.power.RampAnimator: void <init>(java.lang.Object,android.util.IntProperty)>($r24, $r25);

        r0.<com.android.server.power.DisplayPowerController: com.android.server.power.RampAnimator mScreenBrightnessRampAnimator> = r28;

        return;
    }

    private static float lerp(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = f1 - f0;

        $f4 = f2 * $f3;

        $f5 = f0 + $f4;

        return $f5;
    }

    private static float normalizeAbsoluteBrightness(int)
    {
        int i0, $i1;
        float $f0, $f1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.android.server.power.DisplayPowerController: int clampAbsoluteBrightness(int)>(i0);

        $f0 = (float) $i1;

        $f1 = $f0 / 255.0F;

        return $f1;
    }

    private static java.lang.String proximityToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case -1: goto label2;
            case 0: goto label3;
            case 1: goto label4;
            default: goto label1;
        };

     label1:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label2:
        return "Unknown";

     label3:
        return "Negative";

     label4:
        return "Positive";
    }

    private void sendOnProximityNegativeWithWakelock()
    {
        com.android.server.power.DisplayPowerController r0;
        com.android.server.power.SuspendBlocker $r1;
        java.lang.Runnable $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.power.DisplayPowerController;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r1.<com.android.server.power.SuspendBlocker: void acquire()>();

        $r3 = r0.<com.android.server.power.DisplayPowerController: android.os.Handler mCallbackHandler>;

        $r2 = r0.<com.android.server.power.DisplayPowerController: java.lang.Runnable mOnProximityNegativeRunnable>;

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void sendOnProximityPositiveWithWakelock()
    {
        com.android.server.power.DisplayPowerController r0;
        com.android.server.power.SuspendBlocker $r1;
        java.lang.Runnable $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.power.DisplayPowerController;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r1.<com.android.server.power.SuspendBlocker: void acquire()>();

        $r3 = r0.<com.android.server.power.DisplayPowerController: android.os.Handler mCallbackHandler>;

        $r2 = r0.<com.android.server.power.DisplayPowerController: java.lang.Runnable mOnProximityPositiveRunnable>;

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void sendOnStateChangedWithWakelock()
    {
        com.android.server.power.DisplayPowerController r0;
        com.android.server.power.SuspendBlocker $r1;
        java.lang.Runnable $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.power.DisplayPowerController;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r1.<com.android.server.power.SuspendBlocker: void acquire()>();

        $r3 = r0.<com.android.server.power.DisplayPowerController: android.os.Handler mCallbackHandler>;

        $r2 = r0.<com.android.server.power.DisplayPowerController: java.lang.Runnable mOnStateChangedRunnable>;

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void sendUpdatePowerState()
    {
        com.android.server.power.DisplayPowerController r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.power.DisplayPowerController;

        r1 = r0.<com.android.server.power.DisplayPowerController: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void sendUpdatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void sendUpdatePowerStateLocked()
    {
        com.android.server.power.DisplayPowerController r0;
        android.os.Message r1;
        boolean $z0;
        com.android.server.power.DisplayPowerController$DisplayControllerHandler $r2, $r3;

        r0 := @this: com.android.server.power.DisplayPowerController;

        $z0 = r0.<com.android.server.power.DisplayPowerController: boolean mPendingUpdatePowerStateLocked>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.power.DisplayPowerController: boolean mPendingUpdatePowerStateLocked> = 1;

        $r2 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r3.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: boolean sendMessage(android.os.Message)>(r1);

     label1:
        return;
    }

    private void setAmbientLux(float)
    {
        com.android.server.power.DisplayPowerController r0;
        float f0, $f1, $f2, $f3, $f4;

        r0 := @this: com.android.server.power.DisplayPowerController;

        f0 := @parameter0: float;

        r0.<com.android.server.power.DisplayPowerController: float mAmbientLux> = f0;

        $f1 = r0.<com.android.server.power.DisplayPowerController: float mAmbientLux>;

        $f2 = 1.1F * $f1;

        r0.<com.android.server.power.DisplayPowerController: float mBrighteningLuxThreshold> = $f2;

        $f3 = r0.<com.android.server.power.DisplayPowerController: float mAmbientLux>;

        $f4 = 0.8F * $f3;

        r0.<com.android.server.power.DisplayPowerController: float mDarkeningLuxThreshold> = $f4;

        return;
    }

    private void setLightSensorEnabled(boolean, boolean)
    {
        com.android.server.power.DisplayPowerController r0;
        boolean z0, z1, $z2, $z3;
        com.android.server.power.DisplayPowerController$DisplayControllerHandler $r1, $r4;
        android.hardware.SensorEventListener $r2, $r6;
        android.hardware.SensorManager $r3, $r7;
        long $l0;
        android.hardware.Sensor $r5;

        r0 := @this: com.android.server.power.DisplayPowerController;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        if z0 == 0 goto label3;

        $z3 = r0.<com.android.server.power.DisplayPowerController: boolean mLightSensorEnabled>;

        if $z3 != 0 goto label1;

        z1 = 1;

        r0.<com.android.server.power.DisplayPowerController: boolean mLightSensorEnabled> = 1;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.power.DisplayPowerController: long mLightSensorEnableTime> = $l0;

        $r7 = r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r6 = r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorEventListener mLightSensorListener>;

        $r5 = r0.<com.android.server.power.DisplayPowerController: android.hardware.Sensor mLightSensor>;

        $r4 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r7.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>($r6, $r5, 1000000, $r4);

     label1:
        if z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void updateAutoBrightness(boolean)>(0);

     label2:
        return;

     label3:
        $z2 = r0.<com.android.server.power.DisplayPowerController: boolean mLightSensorEnabled>;

        if $z2 == 0 goto label1;

        r0.<com.android.server.power.DisplayPowerController: boolean mLightSensorEnabled> = 0;

        r0.<com.android.server.power.DisplayPowerController: boolean mAmbientLuxValid> = 0;

        r0.<com.android.server.power.DisplayPowerController: int mRecentLightSamples> = 0;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r1.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: void removeMessages(int)>(3);

        $r3 = r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r2 = r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorEventListener mLightSensorListener>;

        virtualinvoke $r3.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r2);

        goto label1;
    }

    private void setPendingProximityDebounceTime(long)
    {
        com.android.server.power.DisplayPowerController r0;
        long l0, $l1;
        byte $b2;
        com.android.server.power.SuspendBlocker $r1;

        r0 := @this: com.android.server.power.DisplayPowerController;

        l0 := @parameter0: long;

        $l1 = r0.<com.android.server.power.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label1;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r1.<com.android.server.power.SuspendBlocker: void acquire()>();

     label1:
        r0.<com.android.server.power.DisplayPowerController: long mPendingProximityDebounceTime> = l0;

        return;
    }

    private void setProximitySensorEnabled(boolean)
    {
        com.android.server.power.DisplayPowerController r0;
        boolean z0, $z1, $z2;
        com.android.server.power.DisplayPowerController$DisplayControllerHandler $r1, $r4;
        android.hardware.SensorEventListener $r2, $r6;
        android.hardware.SensorManager $r3, $r7;
        android.hardware.Sensor $r5;

        r0 := @this: com.android.server.power.DisplayPowerController;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        $z2 = r0.<com.android.server.power.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z2 != 0 goto label1;

        r0.<com.android.server.power.DisplayPowerController: boolean mProximitySensorEnabled> = 1;

        $r7 = r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r6 = r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorEventListener mProximitySensorListener>;

        $r5 = r0.<com.android.server.power.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        $r4 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r7.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>($r6, $r5, 3, $r4);

     label1:
        return;

     label2:
        $z1 = r0.<com.android.server.power.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z1 == 0 goto label1;

        r0.<com.android.server.power.DisplayPowerController: boolean mProximitySensorEnabled> = 0;

        r0.<com.android.server.power.DisplayPowerController: int mProximity> = -1;

        r0.<com.android.server.power.DisplayPowerController: int mPendingProximity> = -1;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r1.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: void removeMessages(int)>(2);

        $r3 = r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r2 = r0.<com.android.server.power.DisplayPowerController: android.hardware.SensorEventListener mProximitySensorListener>;

        virtualinvoke $r3.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r2);

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void clearPendingProximityDebounceTime()>();

        return;
    }

    private void setScreenOn(boolean)
    {
        com.android.server.power.DisplayPowerController r0;
        boolean z0, $z1;
        com.android.server.power.DisplayPowerState $r1, $r2;
        com.android.server.power.Notifier $r3, $r4;

        r0 := @this: com.android.server.power.DisplayPowerController;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        $z1 = virtualinvoke $r1.<com.android.server.power.DisplayPowerState: boolean isScreenOn()>();

        if $z1 == z0 goto label1;

        $r2 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        virtualinvoke $r2.<com.android.server.power.DisplayPowerState: void setScreenOn(boolean)>(z0);

        if z0 == 0 goto label2;

        $r4 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r4.<com.android.server.power.Notifier: void onScreenOn()>();

     label1:
        return;

     label2:
        $r3 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r3.<com.android.server.power.Notifier: void onScreenOff()>();

        return;
    }

    private void unblockScreenOn()
    {
        com.android.server.power.DisplayPowerController r0;
        long l0, $l1, $l2;
        boolean $z0, $z1;
        byte $b3;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.power.DisplayPowerController;

        $z0 = r0.<com.android.server.power.DisplayPowerController: boolean mScreenOnWasBlocked>;

        if $z0 == 0 goto label2;

        r0.<com.android.server.power.DisplayPowerController: boolean mScreenOnWasBlocked> = 0;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l2 = r0.<com.android.server.power.DisplayPowerController: long mScreenOnBlockStartRealTime>;

        l0 = $l1 - $l2;

        $b3 = l0 cmp 1000L;

        if $b3 > 0 goto label1;

        $z1 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z1 == 0 goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unblocked screen on after ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r5);

     label2:
        return;
    }

    private void updateAmbientLux(long)
    {
        com.android.server.power.DisplayPowerController r0;
        long l0, l1, l2, l3, $l8, $l12, $l17, $l23, $l25;
        boolean $z0, $z2, $z3, $z5, $z6, $z7, $z9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40;
        byte $b4, $b5, $b7, $b9, $b11, $b14, $b18, $b20, $b26;
        int $i6, $i13, $i16, $i24;
        com.android.server.power.DisplayPowerController$DisplayControllerHandler $r1, $r26, $r44, $r64;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r46, $r47, $r48, $r49, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r62, $r63;
        java.lang.String $r13, $r20, $r34, $r45, $r50, $r61;

        r0 := @this: com.android.server.power.DisplayPowerController;

        l0 := @parameter0: long;

        $z0 = r0.<com.android.server.power.DisplayPowerController: boolean mAmbientLuxValid>;

        if $z0 != 0 goto label06;

        $i24 = r0.<com.android.server.power.DisplayPowerController: int mLightSensorWarmUpTimeConfig>;

        $l25 = (long) $i24;

        $l23 = r0.<com.android.server.power.DisplayPowerController: long mLightSensorEnableTime>;

        l3 = $l25 + $l23;

        $b26 = l0 cmp l3;

        if $b26 >= 0 goto label02;

        $r64 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r64.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: boolean sendEmptyMessageAtTime(int,long)>(3, l3);

     label01:
        return;

     label02:
        $f39 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setAmbientLux(float)>($f39);

        r0.<com.android.server.power.DisplayPowerController: boolean mAmbientLuxValid> = 1;

        r0.<com.android.server.power.DisplayPowerController: int mDebounceLuxDirection> = 0;

        r0.<com.android.server.power.DisplayPowerController: long mDebounceLuxTime> = l0;

        $z9 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z9 == 0 goto label03;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAmbientLux: Initializing: , mRecentShortTermAverageLux=");

        $f40 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $r56 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f40);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRecentLongTermAverageLux=");

        $f37 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f37);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mAmbientLux=");

        $f38 = r0.<com.android.server.power.DisplayPowerController: float mAmbientLux>;

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f38);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r61);

     label03:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void updateAutoBrightness(boolean)>(1);

     label04:
        $f5 = r0.<com.android.server.power.DisplayPowerController: float mLastObservedLux>;

        $f4 = r0.<com.android.server.power.DisplayPowerController: float mBrighteningLuxThreshold>;

        $b7 = $f5 cmpl $f4;

        if $b7 > 0 goto label05;

        $f7 = r0.<com.android.server.power.DisplayPowerController: float mLastObservedLux>;

        $f6 = r0.<com.android.server.power.DisplayPowerController: float mDarkeningLuxThreshold>;

        $b9 = $f7 cmpg $f6;

        if $b9 >= 0 goto label01;

     label05:
        $r1 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        $l8 = 2000L + l0;

        virtualinvoke $r1.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: boolean sendEmptyMessageAtTime(int,long)>(3, $l8);

        return;

     label06:
        $f0 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $f1 = r0.<com.android.server.power.DisplayPowerController: float mBrighteningLuxThreshold>;

        $b4 = $f0 cmpl $f1;

        if $b4 <= 0 goto label10;

        $f26 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $f27 = r0.<com.android.server.power.DisplayPowerController: float mBrighteningLuxThreshold>;

        $b18 = $f26 cmpl $f27;

        if $b18 <= 0 goto label10;

        $i16 = r0.<com.android.server.power.DisplayPowerController: int mDebounceLuxDirection>;

        if $i16 > 0 goto label07;

        r0.<com.android.server.power.DisplayPowerController: int mDebounceLuxDirection> = 1;

        r0.<com.android.server.power.DisplayPowerController: long mDebounceLuxTime> = l0;

        $z7 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z7 == 0 goto label07;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAmbientLux: Possibly brightened, waiting for 4000 ms: mBrighteningLuxThreshold=");

        $f34 = r0.<com.android.server.power.DisplayPowerController: float mBrighteningLuxThreshold>;

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f34);

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRecentShortTermAverageLux=");

        $f35 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f35);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRecentLongTermAverageLux=");

        $f36 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $r48 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f36);

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mAmbientLux=");

        $f33 = r0.<com.android.server.power.DisplayPowerController: float mAmbientLux>;

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f33);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r50);

     label07:
        $l17 = r0.<com.android.server.power.DisplayPowerController: long mDebounceLuxTime>;

        l2 = 4000L + $l17;

        $b20 = l0 cmp l2;

        if $b20 >= 0 goto label08;

        $r44 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r44.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: boolean sendEmptyMessageAtTime(int,long)>(3, l2);

        return;

     label08:
        $f29 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setAmbientLux(float)>($f29);

        $z6 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z6 == 0 goto label09;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAmbientLux: Brightened: mBrighteningLuxThreshold=");

        $f28 = r0.<com.android.server.power.DisplayPowerController: float mBrighteningLuxThreshold>;

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f28);

        $r42 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRecentShortTermAverageLux=");

        $f32 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f32);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRecentLongTermAverageLux=");

        $f31 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f31);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mAmbientLux=");

        $f30 = r0.<com.android.server.power.DisplayPowerController: float mAmbientLux>;

        $r46 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f30);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r45);

     label09:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void updateAutoBrightness(boolean)>(1);

        goto label04;

     label10:
        $f3 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $f2 = r0.<com.android.server.power.DisplayPowerController: float mDarkeningLuxThreshold>;

        $b5 = $f3 cmpg $f2;

        if $b5 >= 0 goto label14;

        $f13 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $f14 = r0.<com.android.server.power.DisplayPowerController: float mDarkeningLuxThreshold>;

        $b14 = $f13 cmpg $f14;

        if $b14 >= 0 goto label14;

        $i13 = r0.<com.android.server.power.DisplayPowerController: int mDebounceLuxDirection>;

        if $i13 < 0 goto label11;

        r0.<com.android.server.power.DisplayPowerController: int mDebounceLuxDirection> = -1;

        r0.<com.android.server.power.DisplayPowerController: long mDebounceLuxTime> = l0;

        $z5 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z5 == 0 goto label11;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAmbientLux: Possibly darkened, waiting for 8000 ms: mDarkeningLuxThreshold=");

        $f22 = r0.<com.android.server.power.DisplayPowerController: float mDarkeningLuxThreshold>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f22);

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRecentShortTermAverageLux=");

        $f25 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f25);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRecentLongTermAverageLux=");

        $f23 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f23);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mAmbientLux=");

        $f24 = r0.<com.android.server.power.DisplayPowerController: float mAmbientLux>;

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f24);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r34);

     label11:
        $l12 = r0.<com.android.server.power.DisplayPowerController: long mDebounceLuxTime>;

        l1 = 8000L + $l12;

        $b11 = l0 cmp l1;

        if $b11 >= 0 goto label12;

        $r26 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r26.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: boolean sendEmptyMessageAtTime(int,long)>(3, l1);

        return;

     label12:
        $f16 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $f17 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $f15 = staticinvoke <java.lang.Math: float max(float,float)>($f16, $f17);

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setAmbientLux(float)>($f15);

        $z3 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z3 == 0 goto label13;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAmbientLux: Darkened: mDarkeningLuxThreshold=");

        $f19 = r0.<com.android.server.power.DisplayPowerController: float mDarkeningLuxThreshold>;

        $r14 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f19);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRecentShortTermAverageLux=");

        $f18 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f18);

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRecentLongTermAverageLux=");

        $f21 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mAmbientLux=");

        $f20 = r0.<com.android.server.power.DisplayPowerController: float mAmbientLux>;

        $r19 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f20);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r20);

     label13:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void updateAutoBrightness(boolean)>(1);

        goto label04;

     label14:
        $i6 = r0.<com.android.server.power.DisplayPowerController: int mDebounceLuxDirection>;

        if $i6 == 0 goto label04;

        r0.<com.android.server.power.DisplayPowerController: int mDebounceLuxDirection> = 0;

        r0.<com.android.server.power.DisplayPowerController: long mDebounceLuxTime> = l0;

        $z2 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z2 == 0 goto label04;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAmbientLux: Canceled debounce: mBrighteningLuxThreshold=");

        $f8 = r0.<com.android.server.power.DisplayPowerController: float mBrighteningLuxThreshold>;

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f8);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mDarkeningLuxThreshold=");

        $f9 = r0.<com.android.server.power.DisplayPowerController: float mDarkeningLuxThreshold>;

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRecentShortTermAverageLux=");

        $f11 = r0.<com.android.server.power.DisplayPowerController: float mRecentShortTermAverageLux>;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f11);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRecentLongTermAverageLux=");

        $f10 = r0.<com.android.server.power.DisplayPowerController: float mRecentLongTermAverageLux>;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f10);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mAmbientLux=");

        $f12 = r0.<com.android.server.power.DisplayPowerController: float mAmbientLux>;

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f12);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r13);

        goto label04;
    }

    private void updateAutoBrightness(boolean)
    {
        com.android.server.power.DisplayPowerController r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        int i0, $i3, $i4, $i5;
        com.android.server.TwilightService$TwilightState r1;
        long l1, $l8, $l9, $l10, $l11;
        android.util.Spline $r2;
        byte $b2, $b12;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r23, $r24, $r27, $r28, $r29;
        java.lang.String $r6, $r14, $r25, $r26;
        com.android.server.TwilightService $r17;
        com.android.server.power.DisplayPowerRequest $r21, $r22;

        r0 := @this: com.android.server.power.DisplayPowerController;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.power.DisplayPowerController: boolean mAmbientLuxValid>;

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<com.android.server.power.DisplayPowerController: android.util.Spline mScreenAutoBrightnessSpline>;

        $f6 = r0.<com.android.server.power.DisplayPowerController: float mAmbientLux>;

        f0 = virtualinvoke $r2.<android.util.Spline: float interpolate(float)>($f6);

        f1 = 1.0F;

        $z2 = <com.android.server.power.DisplayPowerController: boolean USE_SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT>;

        if $z2 == 0 goto label3;

        $r21 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $f9 = $r21.<com.android.server.power.DisplayPowerRequest: float screenAutoBrightnessAdjustment>;

        $b12 = $f9 cmpl 0.0F;

        if $b12 == 0 goto label3;

        $r22 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $f12 = $r22.<com.android.server.power.DisplayPowerRequest: float screenAutoBrightnessAdjustment>;

        $f13 = neg $f12;

        $f10 = staticinvoke <java.lang.Math: float max(float,float)>(-1.0F, $f13);

        $f11 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f10);

        f5 = staticinvoke <android.util.FloatMath: float pow(float,float)>(3.0F, $f11);

        f1 = 1.0F * f5;

        $z8 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z8 == 0 goto label3;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAutoBrightness: adjGamma=");

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f5);

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r26);

     label3:
        $z3 = <com.android.server.power.DisplayPowerController: boolean USE_TWILIGHT_ADJUSTMENT>;

        if $z3 == 0 goto label4;

        $r17 = r0.<com.android.server.power.DisplayPowerController: com.android.server.TwilightService mTwilight>;

        r1 = virtualinvoke $r17.<com.android.server.TwilightService: com.android.server.TwilightService$TwilightState getCurrentState()>();

        if r1 == null goto label4;

        $z6 = virtualinvoke r1.<com.android.server.TwilightService$TwilightState: boolean isNight()>();

        if $z6 == 0 goto label4;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l10 = virtualinvoke r1.<com.android.server.TwilightService$TwilightState: long getYesterdaySunset()>();

        $l9 = virtualinvoke r1.<com.android.server.TwilightService$TwilightState: long getTodaySunrise()>();

        f3 = staticinvoke <com.android.server.power.DisplayPowerController: float getTwilightGamma(long,long,long)>(l1, $l10, $l9);

        $l8 = virtualinvoke r1.<com.android.server.TwilightService$TwilightState: long getTodaySunset()>();

        $l11 = virtualinvoke r1.<com.android.server.TwilightService$TwilightState: long getTomorrowSunrise()>();

        f4 = staticinvoke <com.android.server.power.DisplayPowerController: float getTwilightGamma(long,long,long)>(l1, $l8, $l11);

        $f8 = f3 * f4;

        f1 = f1 * $f8;

        $z7 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z7 == 0 goto label4;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAutoBrightness: earlyGamma=");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f3);

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lateGamma=");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r25);

     label4:
        $b2 = f1 cmpl 1.0F;

        if $b2 == 0 goto label5;

        f2 = f0;

        f0 = staticinvoke <android.util.FloatMath: float pow(float,float)>(f0, f1);

        $z5 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z5 == 0 goto label5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAutoBrightness: gamma=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f1);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", in=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f2);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", out=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r14 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r14);

     label5:
        $f7 = 255.0F * f0;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f7);

        i0 = specialinvoke r0.<com.android.server.power.DisplayPowerController: int clampScreenBrightness(int)>($i3);

        $i4 = r0.<com.android.server.power.DisplayPowerController: int mScreenAutoBrightness>;

        if $i4 == i0 goto label1;

        $z4 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z4 == 0 goto label6;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAutoBrightness: mScreenAutoBrightness=");

        $i5 = r0.<com.android.server.power.DisplayPowerController: int mScreenAutoBrightness>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", newScreenAutoBrightness=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r6);

     label6:
        r0.<com.android.server.power.DisplayPowerController: int mScreenAutoBrightness> = i0;

        r0.<com.android.server.power.DisplayPowerController: float mLastScreenAutoBrightnessGamma> = f1;

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void sendUpdatePowerState()>();

        return;
    }

    private void updatePowerState()
    {
        com.android.server.power.DisplayPowerController r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, z42;
        java.lang.Object r1, r4;
        java.lang.Throwable r2, r5, $r39, $r42;
        com.android.server.power.DisplayPowerState r3, $r16, $r18, $r19, $r23, $r24, $r28;
        int i0, i1, i2, $i3, $i4, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i20, i21, i22, i23, i24, i26;
        com.android.server.power.DisplayPowerRequest $r6, $r7, $r9, $r11, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r40, $r41;
        android.hardware.Sensor $r8, $r10;
        android.animation.ObjectAnimator $r12, $r13, $r15, $r17, $r20, $r21, $r22;
        java.lang.Runnable $r14;
        byte $b6, $b8, $b19;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.server.power.DisplayPowerController;

        z0 = 1;

        z1 = r0.<com.android.server.power.DisplayPowerController: boolean mTwilightChanged>;

        z2 = 0;

        r0.<com.android.server.power.DisplayPowerController: boolean mTwilightChanged> = 0;

        r1 = r0.<com.android.server.power.DisplayPowerController: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r0.<com.android.server.power.DisplayPowerController: boolean mPendingUpdatePowerStateLocked> = 0;

        $r6 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPendingRequestLocked>;

        if $r6 != null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r7 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        if $r7 != null goto label22;

        $r40 = new com.android.server.power.DisplayPowerRequest;

        $r41 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPendingRequestLocked>;

        specialinvoke $r40.<com.android.server.power.DisplayPowerRequest: void <init>(com.android.server.power.DisplayPowerRequest)>($r41);

        r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest> = $r40;

        $z34 = r0.<com.android.server.power.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

        r0.<com.android.server.power.DisplayPowerController: boolean mWaitingForNegativeProximity> = $z34;

        r0.<com.android.server.power.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked> = 0;

        r0.<com.android.server.power.DisplayPowerController: boolean mPendingRequestChangedLocked> = 0;

     label04:
        z4 = 1;

     label05:
        $z8 = r0.<com.android.server.power.DisplayPowerController: boolean mDisplayReadyLocked>;

        if $z8 != 0 goto label34;

     label06:
        z5 = 1;

     label07:
        exitmonitor r1;

     label08:
        if z4 == 0 goto label09;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void initialize()>();

     label09:
        $r8 = r0.<com.android.server.power.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        if $r8 == null goto label37;

        $r31 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $z31 = $r31.<com.android.server.power.DisplayPowerRequest: boolean useProximitySensor>;

        if $z31 == 0 goto label35;

        $r35 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $i17 = $r35.<com.android.server.power.DisplayPowerRequest: int screenState>;

        if $i17 == 0 goto label35;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setProximitySensorEnabled(boolean)>(1);

        $z32 = r0.<com.android.server.power.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z32 != 0 goto label10;

        $i15 = r0.<com.android.server.power.DisplayPowerController: int mProximity>;

        i20 = (int) 1;

        if $i15 != i20 goto label10;

        r0.<com.android.server.power.DisplayPowerController: boolean mScreenOffBecauseOfProximity> = 1;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void sendOnProximityPositiveWithWakelock()>();

     label10:
        $z27 = r0.<com.android.server.power.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z27 == 0 goto label11;

        $i13 = r0.<com.android.server.power.DisplayPowerController: int mProximity>;

        i21 = (int) 1;

        if $i13 == i21 goto label11;

        r0.<com.android.server.power.DisplayPowerController: boolean mScreenOffBecauseOfProximity> = 0;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void sendOnProximityNegativeWithWakelock()>();

     label11:
        $r10 = r0.<com.android.server.power.DisplayPowerController: android.hardware.Sensor mLightSensor>;

        if $r10 == null goto label13;

        $r29 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $z25 = $r29.<com.android.server.power.DisplayPowerRequest: boolean useAutoBrightness>;

        if $z25 == 0 goto label38;

        $r30 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $i10 = $r30.<com.android.server.power.DisplayPowerRequest: int screenState>;

        $z29 = staticinvoke <com.android.server.power.DisplayPowerController: boolean wantScreenOn(int)>($i10);

        if $z29 == 0 goto label38;

        z7 = 1;

     label12:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setLightSensorEnabled(boolean,boolean)>(z7, z1);

     label13:
        $r9 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $i3 = $r9.<com.android.server.power.DisplayPowerRequest: int screenState>;

        $z9 = staticinvoke <com.android.server.power.DisplayPowerController: boolean wantScreenOn(int)>($i3);

        if $z9 == 0 goto label42;

        $i9 = r0.<com.android.server.power.DisplayPowerController: int mScreenAutoBrightness>;

        if $i9 < 0 goto label39;

        $z26 = r0.<com.android.server.power.DisplayPowerController: boolean mLightSensorEnabled>;

        if $z26 == 0 goto label39;

        i0 = r0.<com.android.server.power.DisplayPowerController: int mScreenAutoBrightness>;

        z6 = r0.<com.android.server.power.DisplayPowerController: boolean mUsingScreenAutoBrightness>;

        r0.<com.android.server.power.DisplayPowerController: boolean mUsingScreenAutoBrightness> = 1;

     label14:
        $r27 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $i7 = $r27.<com.android.server.power.DisplayPowerRequest: int screenState>;

        i22 = (int) 1;

        if $i7 != i22 goto label40;

        $i12 = i0 - 10;

        $i11 = r0.<com.android.server.power.DisplayPowerController: int mScreenBrightnessDimConfig>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i12, $i11);

        z6 = 0;

     label15:
        i1 = specialinvoke r0.<com.android.server.power.DisplayPowerController: int clampScreenBrightness(int)>(i0);

        if z6 == 0 goto label41;

        i2 = 40;

     label16:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void animateScreenBrightness(int,int)>(i1, i2);

     label17:
        $z10 = r0.<com.android.server.power.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z10 == 0 goto label43;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setScreenOn(boolean)>(0);

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void unblockScreenOn()>();

     label18:
        if z5 == 0 goto label52;

        $z12 = r0.<com.android.server.power.DisplayPowerController: boolean mScreenOnWasBlocked>;

        if $z12 != 0 goto label52;

        $r12 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOnAnimator>;

        $z15 = virtualinvoke $r12.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z15 != 0 goto label52;

        $r15 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOffAnimator>;

        $z14 = virtualinvoke $r15.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z14 != 0 goto label52;

        $r16 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        $r14 = r0.<com.android.server.power.DisplayPowerController: java.lang.Runnable mCleanListener>;

        $z17 = virtualinvoke $r16.<com.android.server.power.DisplayPowerState: boolean waitUntilClean(java.lang.Runnable)>($r14);

        if $z17 == 0 goto label52;

        r4 = r0.<com.android.server.power.DisplayPowerController: java.lang.Object mLock>;

        entermonitor r4;

     label19:
        $z16 = r0.<com.android.server.power.DisplayPowerController: boolean mPendingRequestChangedLocked>;

        if $z16 != 0 goto label20;

        r0.<com.android.server.power.DisplayPowerController: boolean mDisplayReadyLocked> = 1;

        $z18 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z18 == 0 goto label20;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", "Display ready!");

     label20:
        exitmonitor r4;

     label21:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void sendOnStateChangedWithWakelock()>();

        return;

     label22:
        z3 = r0.<com.android.server.power.DisplayPowerController: boolean mPendingRequestChangedLocked>;

     label23:
        z4 = 0;

        z2 = 0;

        if z3 == 0 goto label05;

     label24:
        $r33 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $f3 = $r33.<com.android.server.power.DisplayPowerRequest: float screenAutoBrightnessAdjustment>;

        $r32 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPendingRequestLocked>;

        $f2 = $r32.<com.android.server.power.DisplayPowerRequest: float screenAutoBrightnessAdjustment>;

        $b19 = $f3 cmpl $f2;

        if $b19 == 0 goto label26;

     label25:
        z1 = 1;

     label26:
        $r38 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $i18 = $r38.<com.android.server.power.DisplayPowerRequest: int screenState>;

        i23 = (int) 1;

        if $i18 != i23 goto label33;

     label27:
        z2 = 1;

     label28:
        $r36 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $r37 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPendingRequestLocked>;

        virtualinvoke $r36.<com.android.server.power.DisplayPowerRequest: void copyFrom(com.android.server.power.DisplayPowerRequest)>($r37);

        $z35 = r0.<com.android.server.power.DisplayPowerController: boolean mWaitingForNegativeProximity>;

        $z33 = r0.<com.android.server.power.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

        $z36 = $z35 | $z33;

        r0.<com.android.server.power.DisplayPowerController: boolean mWaitingForNegativeProximity> = $z36;

        r0.<com.android.server.power.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked> = 0;

        r0.<com.android.server.power.DisplayPowerController: boolean mPendingRequestChangedLocked> = 0;

        r0.<com.android.server.power.DisplayPowerController: boolean mDisplayReadyLocked> = 0;

     label29:
        z4 = 0;

        goto label05;

     label30:
        $r39 := @caughtexception;

        r2 = $r39;

     label31:
        exitmonitor r1;

     label32:
        throw r2;

     label33:
        z2 = 0;

        goto label28;

     label34:
        z5 = 0;

        goto label07;

     label35:
        $z30 = r0.<com.android.server.power.DisplayPowerController: boolean mWaitingForNegativeProximity>;

        if $z30 == 0 goto label36;

        $z28 = r0.<com.android.server.power.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z28 == 0 goto label36;

        $i14 = r0.<com.android.server.power.DisplayPowerController: int mProximity>;

        i24 = (int) 1;

        if $i14 != i24 goto label36;

        $r34 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $i16 = $r34.<com.android.server.power.DisplayPowerRequest: int screenState>;

        if $i16 == 0 goto label36;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setProximitySensorEnabled(boolean)>(1);

        goto label10;

     label36:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setProximitySensorEnabled(boolean)>(0);

        r0.<com.android.server.power.DisplayPowerController: boolean mWaitingForNegativeProximity> = 0;

        goto label10;

     label37:
        r0.<com.android.server.power.DisplayPowerController: boolean mWaitingForNegativeProximity> = 0;

        goto label11;

     label38:
        z7 = 0;

        goto label12;

     label39:
        $r26 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        i0 = $r26.<com.android.server.power.DisplayPowerRequest: int screenBrightness>;

        r0.<com.android.server.power.DisplayPowerController: boolean mUsingScreenAutoBrightness> = 0;

        z6 = 0;

        goto label14;

     label40:
        if z2 == 0 goto label15;

        z6 = 0;

        goto label15;

     label41:
        i2 = 200;

        goto label16;

     label42:
        r0.<com.android.server.power.DisplayPowerController: boolean mUsingScreenAutoBrightness> = 0;

        goto label17;

     label43:
        $r11 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $i4 = $r11.<com.android.server.power.DisplayPowerRequest: int screenState>;

        $z11 = staticinvoke <com.android.server.power.DisplayPowerController: boolean wantScreenOn(int)>($i4);

        if $z11 == 0 goto label45;

        $r21 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOffAnimator>;

        $z22 = virtualinvoke $r21.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z22 != 0 goto label18;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setScreenOn(boolean)>(1);

        $r25 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPowerRequest>;

        $z24 = $r25.<com.android.server.power.DisplayPowerRequest: boolean blockScreenOn>;

        if $z24 == 0 goto label44;

        $r28 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        $f1 = virtualinvoke $r28.<com.android.server.power.DisplayPowerState: float getElectronBeamLevel()>();

        $b8 = $f1 cmpl 0.0F;

        if $b8 != 0 goto label44;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void blockScreenOn()>();

        goto label18;

     label44:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void unblockScreenOn()>();

        $r24 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        virtualinvoke $r24.<com.android.server.power.DisplayPowerState: void setElectronBeamLevel(float)>(1.0F);

        $r23 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        virtualinvoke $r23.<com.android.server.power.DisplayPowerState: void dismissElectronBeam()>();

        goto label18;

     label45:
        specialinvoke r0.<com.android.server.power.DisplayPowerController: void unblockScreenOn()>();

        $r13 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOnAnimator>;

        $z13 = virtualinvoke $r13.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z13 != 0 goto label18;

        $r17 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOffAnimator>;

        $z19 = virtualinvoke $r17.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z19 != 0 goto label18;

        $r18 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        $f0 = virtualinvoke $r18.<com.android.server.power.DisplayPowerState: float getElectronBeamLevel()>();

        $b6 = $f0 cmpl 0.0F;

        if $b6 != 0 goto label46;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void setScreenOn(boolean)>(0);

        goto label18;

     label46:
        r3 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        $z21 = r0.<com.android.server.power.DisplayPowerController: boolean mElectronBeamFadesConfig>;

        if $z21 == 0 goto label47;

        z42 = (boolean) 2;

        z0 = z42;

     label47:
        i26 = (int) z0;

        $z20 = virtualinvoke r3.<com.android.server.power.DisplayPowerState: boolean prepareElectronBeam(int)>(i26);

        if $z20 == 0 goto label48;

        $r19 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerState mPowerState>;

        $z23 = virtualinvoke $r19.<com.android.server.power.DisplayPowerState: boolean isScreenOn()>();

        if $z23 == 0 goto label48;

        $r22 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOffAnimator>;

        virtualinvoke $r22.<android.animation.ObjectAnimator: void start()>();

        goto label18;

     label48:
        $r20 = r0.<com.android.server.power.DisplayPowerController: android.animation.ObjectAnimator mElectronBeamOffAnimator>;

        virtualinvoke $r20.<android.animation.ObjectAnimator: void end()>();

        goto label18;

     label49:
        $r42 := @caughtexception;

        r5 = $r42;

     label50:
        exitmonitor r4;

     label51:
        throw r5;

     label52:
        return;

        catch java.lang.Throwable from label01 to label02 with label30;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.lang.Throwable from label05 to label06 with label30;
        catch java.lang.Throwable from label07 to label08 with label30;
        catch java.lang.Throwable from label19 to label20 with label49;
        catch java.lang.Throwable from label20 to label21 with label49;
        catch java.lang.Throwable from label22 to label23 with label30;
        catch java.lang.Throwable from label24 to label25 with label30;
        catch java.lang.Throwable from label26 to label27 with label30;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label31 to label32 with label30;
        catch java.lang.Throwable from label50 to label51 with label49;
    }

    private static boolean wantScreenOn(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.power.DisplayPowerController r0;
        java.io.PrintWriter r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r52;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r11, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r22, $r24, $r25, $r26, $r28, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r39, $r41, $r43, $r45, $r46, $r47, $r48;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r7, $r12, $r15, $r21, $r23, $r27, $r33, $r38, $r40, $r42, $r51;
        com.android.server.power.DisplayPowerRequest $r10;
        int $i0, $i1, $i2, $i3;
        android.util.Spline $r44;
        com.android.server.power.DisplayPowerController$DisplayControllerHandler $r49;
        com.android.server.power.DisplayPowerController$6 $r50;

        r0 := @this: com.android.server.power.DisplayPowerController;

        r1 := @parameter0: java.io.PrintWriter;

        r2 = r0.<com.android.server.power.DisplayPowerController: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Display Controller Locked State:");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayReadyLocked=");

        $z0 = r0.<com.android.server.power.DisplayPowerController: boolean mDisplayReadyLocked>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingRequestLocked=");

        $r10 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPendingRequestLocked>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingRequestChangedLocked=");

        $z1 = r0.<com.android.server.power.DisplayPowerController: boolean mPendingRequestChangedLocked>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingWaitForNegativeProximityLocked=");

        $z2 = r0.<com.android.server.power.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingUpdatePowerStateLocked=");

        $z3 = r0.<com.android.server.power.DisplayPowerController: boolean mPendingUpdatePowerStateLocked>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        exitmonitor r2;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Display Controller Configuration:");

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessDimConfig=");

        $i0 = r0.<com.android.server.power.DisplayPowerController: int mScreenBrightnessDimConfig>;

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessRangeMinimum=");

        $i1 = r0.<com.android.server.power.DisplayPowerController: int mScreenBrightnessRangeMinimum>;

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r33);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessRangeMaximum=");

        $i2 = r0.<com.android.server.power.DisplayPowerController: int mScreenBrightnessRangeMaximum>;

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r38);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUseSoftwareAutoBrightnessConfig=");

        $z4 = r0.<com.android.server.power.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig>;

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r40);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenAutoBrightnessSpline=");

        $r44 = r0.<com.android.server.power.DisplayPowerController: android.util.Spline mScreenAutoBrightnessSpline>;

        $r43 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r42);

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLightSensorWarmUpTimeConfig=");

        $i3 = r0.<com.android.server.power.DisplayPowerController: int mLightSensorWarmUpTimeConfig>;

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r51 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r51);

        $r49 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerController$DisplayControllerHandler mHandler>;

        $r50 = new com.android.server.power.DisplayPowerController$6;

        specialinvoke $r50.<com.android.server.power.DisplayPowerController$6: void <init>(com.android.server.power.DisplayPowerController,java.io.PrintWriter)>(r0, r1);

        virtualinvoke $r49.<com.android.server.power.DisplayPowerController$DisplayControllerHandler: boolean runWithScissors(java.lang.Runnable,long)>($r50, 1000L);

        return;

     label3:
        $r52 := @caughtexception;

        r3 = $r52;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isProximitySensorAvailable()
    {
        com.android.server.power.DisplayPowerController r0;
        android.hardware.Sensor $r1;

        r0 := @this: com.android.server.power.DisplayPowerController;

        $r1 = r0.<com.android.server.power.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean requestPowerState(com.android.server.power.DisplayPowerRequest, boolean)
    {
        com.android.server.power.DisplayPowerController r0;
        com.android.server.power.DisplayPowerRequest r1, $r4, $r5, $r6, $r8;
        boolean z0, z1, z2, z3, $z4, $z5, $z6;
        java.lang.Object r2;
        java.lang.Throwable r3, $r14;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r13;
        java.lang.String $r12;

        r0 := @this: com.android.server.power.DisplayPowerController;

        r1 := @parameter0: com.android.server.power.DisplayPowerRequest;

        z0 := @parameter1: boolean;

        $z4 = <com.android.server.power.DisplayPowerController: boolean DEBUG>;

        if $z4 == 0 goto label01;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestPowerState: ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", waitForNegativeProximity=");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r12);

     label01:
        r2 = r0.<com.android.server.power.DisplayPowerController: java.lang.Object mLock>;

        entermonitor r2;

        z1 = 0;

        if z0 == 0 goto label06;

     label02:
        z3 = r0.<com.android.server.power.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

     label03:
        z1 = 0;

        if z3 != 0 goto label06;

     label04:
        r0.<com.android.server.power.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked> = 1;

     label05:
        z1 = 1;

     label06:
        $r4 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPendingRequestLocked>;

        if $r4 != null goto label14;

        $r8 = new com.android.server.power.DisplayPowerRequest;

        specialinvoke $r8.<com.android.server.power.DisplayPowerRequest: void <init>(com.android.server.power.DisplayPowerRequest)>(r1);

        r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPendingRequestLocked> = $r8;

     label07:
        z1 = 1;

     label08:
        if z1 == 0 goto label10;

     label09:
        r0.<com.android.server.power.DisplayPowerController: boolean mDisplayReadyLocked> = 0;

     label10:
        if z1 == 0 goto label12;

     label11:
        $z6 = r0.<com.android.server.power.DisplayPowerController: boolean mPendingRequestChangedLocked>;

        if $z6 != 0 goto label12;

        r0.<com.android.server.power.DisplayPowerController: boolean mPendingRequestChangedLocked> = 1;

        specialinvoke r0.<com.android.server.power.DisplayPowerController: void sendUpdatePowerStateLocked()>();

     label12:
        z2 = r0.<com.android.server.power.DisplayPowerController: boolean mDisplayReadyLocked>;

        exitmonitor r2;

     label13:
        return z2;

     label14:
        $r5 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPendingRequestLocked>;

        $z5 = virtualinvoke $r5.<com.android.server.power.DisplayPowerRequest: boolean equals(com.android.server.power.DisplayPowerRequest)>(r1);

        if $z5 != 0 goto label08;

        $r6 = r0.<com.android.server.power.DisplayPowerController: com.android.server.power.DisplayPowerRequest mPendingRequestLocked>;

        virtualinvoke $r6.<com.android.server.power.DisplayPowerRequest: void copyFrom(com.android.server.power.DisplayPowerRequest)>(r1);

     label15:
        z1 = 1;

        goto label08;

     label16:
        $r14 := @caughtexception;

        r3 = $r14;

     label17:
        exitmonitor r2;

     label18:
        throw r3;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }
}
