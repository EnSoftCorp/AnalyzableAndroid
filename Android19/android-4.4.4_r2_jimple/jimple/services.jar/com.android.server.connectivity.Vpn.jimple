public class com.android.server.connectivity.Vpn extends android.net.BaseNetworkStateTracker
{
    private static final boolean LOGD;
    private static final java.lang.String TAG;
    private final com.android.server.ConnectivityService$VpnCallback mCallback;
    private com.android.internal.net.VpnConfig mConfig;
    private final android.net.IConnectivityManager mConnService;
    private com.android.server.connectivity.Vpn$Connection mConnection;
    private volatile boolean mEnableNotif;
    private volatile boolean mEnableTeardown;
    private java.lang.String mInterface;
    private com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner;
    private android.net.INetworkManagementEventObserver mObserver;
    private java.lang.String mPackage;
    private android.app.PendingIntent mStatusIntent;
    private final int mUserId;
    private android.content.BroadcastReceiver mUserIntentReceiver;
    private android.util.SparseBooleanArray mVpnUsers;

    public void <init>(android.content.Context, com.android.server.ConnectivityService$VpnCallback, android.os.INetworkManagementService, android.net.IConnectivityManager, int)
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context r1, $r13;
        com.android.server.ConnectivityService$VpnCallback r2;
        android.os.INetworkManagementService r3;
        android.net.IConnectivityManager r4;
        int i0;
        android.os.RemoteException r5, $r14;
        android.content.IntentFilter r6, r18;
        android.net.INetworkManagementEventObserver $r8, r19;
        android.os.UserHandle $r11;
        android.content.BroadcastReceiver $r12;
        com.android.server.connectivity.Vpn$2 r16;
        com.android.server.connectivity.Vpn$1 r17;
        java.lang.Throwable r20;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.ConnectivityService$VpnCallback;

        r3 := @parameter2: android.os.INetworkManagementService;

        r4 := @parameter3: android.net.IConnectivityManager;

        i0 := @parameter4: int;

        specialinvoke r0.<android.net.BaseNetworkStateTracker: void <init>(int)>(8);

        r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage> = "[Legacy VPN]";

        r0.<com.android.server.connectivity.Vpn: boolean mEnableNotif> = 1;

        r0.<com.android.server.connectivity.Vpn: boolean mEnableTeardown> = 1;

        r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers> = null;

        r0.<com.android.server.connectivity.Vpn: android.content.BroadcastReceiver mUserIntentReceiver> = null;

        r16 = new com.android.server.connectivity.Vpn$2;

        specialinvoke r16.<com.android.server.connectivity.Vpn$2: void <init>(com.android.server.connectivity.Vpn)>(r0);

        r19 = (android.net.INetworkManagementEventObserver) r16;

        r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver> = r19;

        r0.<com.android.server.connectivity.Vpn: android.content.Context mContext> = r1;

        r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback> = r2;

        r0.<com.android.server.connectivity.Vpn: android.net.IConnectivityManager mConnService> = r4;

        r0.<com.android.server.connectivity.Vpn: int mUserId> = i0;

     label1:
        $r8 = r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver>;

        interfaceinvoke r3.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r8);

     label2:
        if i0 != 0 goto label3;

        r17 = new com.android.server.connectivity.Vpn$1;

        specialinvoke r17.<com.android.server.connectivity.Vpn$1: void <init>(com.android.server.connectivity.Vpn)>(r0);

        r0.<com.android.server.connectivity.Vpn: android.content.BroadcastReceiver mUserIntentReceiver> = r17;

        r18 = new android.content.IntentFilter;

        specialinvoke r18.<android.content.IntentFilter: void <init>()>();

        r6 = r18;

        virtualinvoke r6.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke r6.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r13 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r12 = r0.<com.android.server.connectivity.Vpn: android.content.BroadcastReceiver mUserIntentReceiver>;

        $r11 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r13.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r12, $r11, r6, null, null);

     label3:
        return;

     label4:
        $r14 := @caughtexception;

        r5 = $r14;

        r20 = (java.lang.Throwable) r5;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", "Problem registering observer", r20);

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    static void access$000(com.android.server.connectivity.Vpn, int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void onUserAdded(int)>(i0);

        return;
    }

    static void access$100(com.android.server.connectivity.Vpn, int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void onUserRemoved(int)>(i0);

        return;
    }

    static void access$1000(com.android.server.connectivity.Vpn, int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void hideNotification(int)>(i0);

        return;
    }

    static com.android.server.connectivity.Vpn$Connection access$1100(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$Connection $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        return $r1;
    }

    static com.android.server.connectivity.Vpn$Connection access$1102(com.android.server.connectivity.Vpn, com.android.server.connectivity.Vpn$Connection)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$Connection r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: com.android.server.connectivity.Vpn$Connection;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection> = r1;

        return r1;
    }

    static android.content.Context access$1200(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        return $r1;
    }

    static void access$1300(com.android.server.connectivity.Vpn, android.net.NetworkInfo$DetailedState, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo$DetailedState r1;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: android.net.NetworkInfo$DetailedState;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>(r1, r2);

        return;
    }

    static boolean access$1400(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $z0 = r0.<com.android.server.connectivity.Vpn: boolean mEnableTeardown>;

        return $z0;
    }

    static android.net.INetworkManagementEventObserver access$1700(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.INetworkManagementEventObserver $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver>;

        return $r1;
    }

    static android.net.IConnectivityManager access$1800(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.IConnectivityManager $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.IConnectivityManager mConnService>;

        return $r1;
    }

    static android.content.Context access$1900(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        return $r1;
    }

    static android.content.Context access$2000(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        return $r1;
    }

    static int access$2100(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        int $i0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $i0 = r0.<com.android.server.connectivity.Vpn: int mUserId>;

        return $i0;
    }

    static void access$2200(com.android.server.connectivity.Vpn, int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void addVpnUserLocked(int)>(i0);

        return;
    }

    static android.content.Context access$2300(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        return $r1;
    }

    static android.net.NetworkInfo access$2400(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    static android.net.NetworkInfo access$2500(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    static com.android.server.connectivity.Vpn$LegacyVpnRunner access$400(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$LegacyVpnRunner $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        return $r1;
    }

    static com.android.server.connectivity.Vpn$LegacyVpnRunner access$402(com.android.server.connectivity.Vpn, com.android.server.connectivity.Vpn$LegacyVpnRunner)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$LegacyVpnRunner r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: com.android.server.connectivity.Vpn$LegacyVpnRunner;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner> = r1;

        return r1;
    }

    static java.lang.String access$500(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        return $r1;
    }

    static java.lang.String access$502(com.android.server.connectivity.Vpn, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = r1;

        return r1;
    }

    static int access$600(com.android.server.connectivity.Vpn, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;
        int $i0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: java.lang.String;

        $i0 = specialinvoke r0.<com.android.server.connectivity.Vpn: int jniCheck(java.lang.String)>(r1);

        return $i0;
    }

    static android.util.SparseBooleanArray access$700(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.util.SparseBooleanArray $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers>;

        return $r1;
    }

    static android.util.SparseBooleanArray access$702(com.android.server.connectivity.Vpn, android.util.SparseBooleanArray)
    {
        com.android.server.connectivity.Vpn r0;
        android.util.SparseBooleanArray r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: android.util.SparseBooleanArray;

        r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers> = r1;

        return r1;
    }

    static com.android.internal.net.VpnConfig access$800(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        return $r1;
    }

    static com.android.internal.net.VpnConfig access$802(com.android.server.connectivity.Vpn, com.android.internal.net.VpnConfig)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: com.android.internal.net.VpnConfig;

        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = r1;

        return r1;
    }

    static com.android.server.ConnectivityService$VpnCallback access$900(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.ConnectivityService$VpnCallback $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        return $r1;
    }

    private void addVpnUserLocked(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0, i1, i2, i3, i4, $i5, $i6;
        boolean z0, $z1, $z2;
        android.content.pm.PackageManager r1;
        android.content.pm.ApplicationInfo r3;
        java.lang.String r4, $r9, $r13, $r16;
        android.graphics.drawable.Drawable r5;
        android.graphics.Bitmap r6;
        android.graphics.Canvas r7, $r25;
        com.android.internal.net.VpnConfig $r8, $r23;
        java.util.List $r10, $r24;
        android.util.SparseBooleanArray $r11;
        com.android.server.ConnectivityService$VpnCallback $r12;
        android.content.Context $r14, $r19, $r21;
        android.content.pm.IPackageManager $r15;
        java.lang.CharSequence $r17;
        android.content.res.Resources $r18, $r22;
        android.graphics.Bitmap$Config $r20;
        android.os.RemoteException $r26;
        java.lang.IllegalStateException $r27, $r28;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $z1 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isRunningLocked()>();

        if $z1 != 0 goto label1;

        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("VPN is not active");

        throw $r28;

     label1:
        $r8 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r10 = $r8.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        if $r10 == null goto label6;

        $r23 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r24 = $r23.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        $i6 = interfaceinvoke $r24.<java.util.List: int size()>();

        if $i6 == 0 goto label6;

        z0 = 1;

     label2:
        $r12 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        $r9 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        virtualinvoke $r12.<com.android.server.ConnectivityService$VpnCallback: void addUserForwarding(java.lang.String,int,boolean)>($r9, i0, z0);

        $r11 = r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers>;

        virtualinvoke $r11.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        $r13 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("[Legacy VPN]");

        if $z2 != 0 goto label8;

        $r14 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r1 = virtualinvoke $r14.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label3:
        $r15 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r16 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $i5 = r0.<com.android.server.connectivity.Vpn: int mUserId>;

        r3 = interfaceinvoke $r15.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>($r16, 0, $i5);

     label4:
        $r17 = virtualinvoke r3.<android.content.pm.ApplicationInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>(r1);

        r4 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        r5 = virtualinvoke r3.<android.content.pm.ApplicationInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>(r1);

        i1 = virtualinvoke r5.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        r6 = null;

        if i1 <= 0 goto label5;

        i2 = virtualinvoke r5.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        r6 = null;

        if i2 <= 0 goto label5;

        $r19 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r18 = virtualinvoke $r19.<android.content.Context: android.content.res.Resources getResources()>();

        i3 = virtualinvoke $r18.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104901);

        $r21 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r22 = virtualinvoke $r21.<android.content.Context: android.content.res.Resources getResources()>();

        i4 = virtualinvoke $r22.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104902);

        virtualinvoke r5.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, i3, i4);

        $r20 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r6 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i3, i4, $r20);

        $r25 = new android.graphics.Canvas;

        specialinvoke $r25.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r6);

        r7 = $r25;

        virtualinvoke r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r7);

        virtualinvoke r7.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

     label5:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void showNotification(java.lang.String,android.graphics.Bitmap,int)>(r4, r6, i0);

        return;

     label6:
        z0 = 0;

        goto label2;

     label7:
        $r26 := @caughtexception;

        $r27 = new java.lang.IllegalStateException;

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid application");

        throw $r27;

     label8:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void showNotification(java.lang.String,android.graphics.Bitmap,int)>(null, null, i0);

        return;

        catch android.os.RemoteException from label3 to label4 with label7;
    }

    private void enforceControlPermission()
    {
        com.android.server.connectivity.Vpn r0;
        int i0, i2, $i3, $i4;
        long l1;
        java.lang.Throwable r2, $r7;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        android.content.pm.ApplicationInfo $r5;
        java.lang.SecurityException $r6;
        java.lang.Exception $r8;

        r0 := @this: com.android.server.connectivity.Vpn;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i3 != 1000 goto label1;

        return;

     label1:
        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i4);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r3 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r5 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>("com.android.vpndialogs", 0);

        i2 = $r5.<android.content.pm.ApplicationInfo: int uid>;

     label3:
        if i0 != i2 goto label6;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

     label5:
        $r8 := @caughtexception;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Unauthorized Caller");

        throw $r6;

        catch java.lang.Exception from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private static android.net.RouteInfo findIPv4DefaultRoute(android.net.LinkProperties)
    {
        android.net.LinkProperties r0;
        java.util.Iterator r1;
        android.net.RouteInfo r2;
        java.util.Collection $r3;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r4;
        java.lang.Object $r5;
        java.net.InetAddress $r6;

        r0 := @parameter0: android.net.LinkProperties;

        $r3 = virtualinvoke r0.<android.net.LinkProperties: java.util.Collection getAllRoutes()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.net.RouteInfo) $r5;

        $z1 = virtualinvoke r2.<android.net.RouteInfo: boolean isDefaultRoute()>();

        if $z1 == 0 goto label1;

        $r6 = virtualinvoke r2.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $z2 = $r6 instanceof java.net.Inet4Address;

        if $z2 == 0 goto label1;

        return r2;

     label2:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to find IPv4 default gateway");

        throw $r4;
    }

    private void hideNotification(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;
        android.app.NotificationManager r1;
        boolean $z0;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.os.UserHandle $r4;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.connectivity.Vpn: boolean mEnableNotif>;

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent> = null;

        $r2 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        r1 = (android.app.NotificationManager) $r3;

        if r1 == null goto label1;

        $r4 = new android.os.UserHandle;

        specialinvoke $r4.<android.os.UserHandle: void <init>(int)>(i0);

        virtualinvoke r1.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, 17303157, $r4);

        return;
    }

    private boolean isRunningLocked()
    {
        com.android.server.connectivity.Vpn r0;
        android.util.SparseBooleanArray $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private native int jniCheck(java.lang.String);

    private native int jniCreate(int);

    private native java.lang.String jniGetName(int);

    private native void jniReset(java.lang.String);

    private native int jniSetAddresses(java.lang.String, java.lang.String);

    private native int jniSetRoutes(java.lang.String, java.lang.String);

    private void onUserAdded(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;
        java.lang.Throwable r1, $r6;
        boolean z0;
        java.lang.Exception r2, $r7;
        android.content.Context $r3;
        android.os.UserManager $r4;
        android.content.pm.UserInfo $r5;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        entermonitor r0;

     label01:
        $r3 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r3);

        $r5 = virtualinvoke $r4.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        z0 = virtualinvoke $r5.<android.content.pm.UserInfo: boolean isRestricted()>();

     label02:
        if z0 == 0 goto label04;

     label03:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void addVpnUserLocked(int)>(i0);

     label04:
        exitmonitor r0;

     label05:
        return;

     label06:
        $r7 := @caughtexception;

        r2 = $r7;

     label07:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", "Failed to add restricted user to owner", r2);

     label08:
        goto label04;

     label09:
        $r6 := @caughtexception;

        r1 = $r6;

     label10:
        exitmonitor r0;

     label11:
        throw r1;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void onUserRemoved(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;
        java.lang.Throwable r1, $r6;
        boolean z0;
        java.lang.Exception r2, $r7;
        android.content.Context $r3;
        android.os.UserManager $r4;
        android.content.pm.UserInfo $r5;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        entermonitor r0;

     label01:
        $r3 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r3);

        $r5 = virtualinvoke $r4.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        z0 = virtualinvoke $r5.<android.content.pm.UserInfo: boolean isRestricted()>();

     label02:
        if z0 == 0 goto label04;

     label03:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void removeVpnUserLocked(int)>(i0);

     label04:
        exitmonitor r0;

     label05:
        return;

     label06:
        $r7 := @caughtexception;

        r2 = $r7;

     label07:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", "Failed to remove restricted user to owner", r2);

     label08:
        goto label04;

     label09:
        $r6 := @caughtexception;

        r1 = $r6;

     label10:
        exitmonitor r0;

     label11:
        throw r1;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void removeVpnUserLocked(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0, $i1;
        boolean z0, $z1;
        com.android.internal.net.VpnConfig $r1, $r6;
        java.util.List $r2, $r7;
        java.lang.String $r3;
        com.android.server.ConnectivityService$VpnCallback $r4;
        android.util.SparseBooleanArray $r5;
        java.lang.IllegalStateException $r8;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $z1 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isRunningLocked()>();

        if $z1 != 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("VPN is not active");

        throw $r8;

     label1:
        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r2 = $r1.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        if $r2 == null goto label3;

        $r6 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r7 = $r6.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i1 == 0 goto label3;

        z0 = 1;

     label2:
        $r4 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        $r3 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        virtualinvoke $r4.<com.android.server.ConnectivityService$VpnCallback: void clearUserForwarding(java.lang.String,int,boolean)>($r3, i0, z0);

        $r5 = r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void delete(int)>(i0);

        specialinvoke r0.<com.android.server.connectivity.Vpn: void hideNotification(int)>(i0);

        return;

     label3:
        z0 = 0;

        goto label2;
    }

    private void showNotification(java.lang.String, android.graphics.Bitmap, int)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, r4, r7, $r16, $r17;
        android.graphics.Bitmap r2;
        int i0;
        android.app.NotificationManager r3;
        android.content.Context r5, $r8, $r10, $r13, $r18, $r30, $r31;
        java.lang.Object[] r6, $r12;
        boolean $z0;
        android.app.PendingIntent $r9, $r25;
        java.lang.Object $r11;
        com.android.internal.net.VpnConfig $r14, $r15;
        android.app.Notification$Builder $r19, $r20, $r21, $r22, $r23, $r24, $r28, $r29;
        android.app.Notification $r26;
        android.os.UserHandle $r27;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.graphics.Bitmap;

        i0 := @parameter2: int;

        $z0 = r0.<com.android.server.connectivity.Vpn: boolean mEnableNotif>;

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        $r8 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r9 = staticinvoke <com.android.internal.net.VpnConfig: android.app.PendingIntent getIntentForStatusPanel(android.content.Context)>($r8);

        r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent> = $r9;

        $r10 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        r3 = (android.app.NotificationManager) $r11;

        if r3 == null goto label1;

        if r1 != null goto label5;

        $r30 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r4 = virtualinvoke $r30.<android.content.Context: java.lang.String getString(int)>(17040566);

     label3:
        $r14 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r16 = $r14.<com.android.internal.net.VpnConfig: java.lang.String session>;

        if $r16 != null goto label6;

        $r31 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r7 = virtualinvoke $r31.<android.content.Context: java.lang.String getString(int)>(17040568);

     label4:
        $r19 = new android.app.Notification$Builder;

        $r18 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        specialinvoke $r19.<android.app.Notification$Builder: void <init>(android.content.Context)>($r18);

        $r21 = virtualinvoke $r19.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17303157);

        $r20 = virtualinvoke $r21.<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)>(r2);

        $r23 = virtualinvoke $r20.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r4);

        $r22 = virtualinvoke $r23.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r7);

        $r25 = r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent>;

        $r24 = virtualinvoke $r22.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r25);

        $r28 = virtualinvoke $r24.<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)>(0);

        $r29 = virtualinvoke $r28.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        $r26 = virtualinvoke $r29.<android.app.Notification$Builder: android.app.Notification build()>();

        $r27 = new android.os.UserHandle;

        specialinvoke $r27.<android.os.UserHandle: void <init>(int)>(i0);

        virtualinvoke r3.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(null, 17303157, $r26, $r27);

        return;

     label5:
        $r13 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r1;

        r4 = virtualinvoke $r13.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17040567, $r12);

        goto label3;

     label6:
        r5 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r6 = newarray (java.lang.Object)[1];

        $r15 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r17 = $r15.<com.android.internal.net.VpnConfig: java.lang.String session>;

        r6[0] = $r17;

        r7 = virtualinvoke r5.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17040569, r6);

        goto label4;
    }

    private void startLegacyVpn(com.android.internal.net.VpnConfig, java.lang.String[], java.lang.String[])
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig r1;
        java.lang.String[] r2, r3;
        java.lang.Throwable r4, $r8;
        android.net.NetworkInfo$DetailedState $r5;
        com.android.server.connectivity.Vpn$LegacyVpnRunner $r6, $r7;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: com.android.internal.net.VpnConfig;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String[];

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.android.server.connectivity.Vpn: void stopLegacyVpn()>();

        virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean prepare(java.lang.String,java.lang.String)>(null, "[Legacy VPN]");

        $r5 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTING>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r5, "startLegacyVpn");

        $r6 = new com.android.server.connectivity.Vpn$LegacyVpnRunner;

        specialinvoke $r6.<com.android.server.connectivity.Vpn$LegacyVpnRunner: void <init>(com.android.server.connectivity.Vpn,com.android.internal.net.VpnConfig,java.lang.String[],java.lang.String[])>(r0, r1, r2, r3);

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner> = $r6;

        $r7 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        virtualinvoke $r7.<com.android.server.connectivity.Vpn$LegacyVpnRunner: void start()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r0;

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void updateState(android.net.NetworkInfo$DetailedState, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo$DetailedState r1;
        java.lang.String r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        android.net.NetworkInfo $r9, $r10, $r11;
        com.android.server.ConnectivityService$VpnCallback $r12;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: android.net.NetworkInfo$DetailedState;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setting state=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reason=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Vpn", $r8);

        $r9 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r9.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>(r1, r2, null);

        $r12 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        $r10 = new android.net.NetworkInfo;

        $r11 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        specialinvoke $r10.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r11);

        virtualinvoke $r12.<com.android.server.ConnectivityService$VpnCallback: void onStateChanged(android.net.NetworkInfo)>($r10);

        return;
    }

    public android.os.ParcelFileDescriptor establish(com.android.internal.net.VpnConfig)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig r1, r10;
        java.lang.Throwable r2, r8, r19, r23, r24, $r105, $r106, $r113, $r120, $r121;
        android.os.UserManager r3;
        android.os.ParcelFileDescriptor r5, r14;
        android.content.pm.ApplicationInfo r6;
        int i0, i1, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i21, $i22, $i23;
        android.content.Intent r7, r129;
        long l2, l3, l4, l5, $l17;
        android.content.pm.ResolveInfo r11;
        com.android.server.connectivity.Vpn$Connection r12, r22, r140;
        java.lang.String r13, r18, $r31, $r34, $r37, $r39, $r40, $r48, $r49, $r52, $r54, $r58, $r59, $r61, $r67, $r69, $r78, $r80, $r89, $r93, $r97, $r101, $r112, $r115, $r117, $r119, $r122;
        android.util.SparseBooleanArray r15, r144;
        java.lang.RuntimeException r16, $r110;
        java.util.Iterator r20, r25;
        java.lang.StringBuilder r21, $r62, $r63, $r68, $r70, $r75, $r77, $r87, $r88, $r92, $r94, $r95, $r96, $r102, $r107, $r116, $r118, $r123, $r124, r131, r133, r135, r137, r138, r142, r145, r146;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.content.pm.UserInfo r26, $r41;
        android.net.LinkAddress r27;
        android.content.Context $r29, $r30, $r51, $r84;
        android.content.pm.IPackageManager $r32, $r42;
        android.content.pm.ServiceInfo $r38;
        android.net.NetworkInfo$DetailedState $r43, $r66, $r109;
        java.util.List $r47, $r53, $r56, $r57, $r71, $r74, $r83;
        com.android.server.ConnectivityService$VpnCallback $r55, $r60, $r65, $r72, $r73, $r114;
        java.lang.Object $r82, $r85;
        java.lang.Exception $r103, $r104, $r127;
        android.os.RemoteException $r128;
        java.lang.SecurityException r130, r132, r134, r136;
        java.lang.IllegalArgumentException r139;
        android.os.UserHandle r141;
        java.lang.IllegalStateException r143;
        java.lang.AutoCloseable r147;
        android.content.ServiceConnection r148, r149;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: com.android.internal.net.VpnConfig;

        entermonitor r0;

     label01:
        $r30 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r3 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r30);

        $r29 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        virtualinvoke $r29.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label02:
        $r32 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r31 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $i9 = r0.<com.android.server.connectivity.Vpn: int mUserId>;

        r6 = interfaceinvoke $r32.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>($r31, 0, $i9);

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = r6.<android.content.pm.ApplicationInfo: int uid>;

     label03:
        if i0 == i1 goto label06;

        r5 = null;

     label04:
        exitmonitor r0;

        return r5;

     label05:
        $r104 := @caughtexception;

        r5 = null;

        goto label04;

     label06:
        r129 = new android.content.Intent;

        specialinvoke r129.<android.content.Intent: void <init>(java.lang.String)>("android.net.VpnService");

        r7 = r129;

        $r37 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $r34 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        virtualinvoke r7.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r37, $r34);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        $i10 = r0.<com.android.server.connectivity.Vpn: int mUserId>;

        $r41 = virtualinvoke r3.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>($i10);

        $z2 = virtualinvoke $r41.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z2 == 0 goto label13;

        r130 = new java.lang.SecurityException;

        specialinvoke r130.<java.lang.SecurityException: void <init>(java.lang.String)>("Restricted users cannot establish VPNs");

        throw r130;

     label08:
        $r128 := @caughtexception;

     label09:
        r132 = new java.lang.SecurityException;

        r131 = new java.lang.StringBuilder;

        specialinvoke r131.<java.lang.StringBuilder: void <init>()>();

        $r118 = virtualinvoke r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find ");

        $r119 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        $r116 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r119);

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r132.<java.lang.SecurityException: void <init>(java.lang.String)>($r117);

        throw r132;

     label10:
        $r120 := @caughtexception;

        r8 = $r120;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r8;

     label12:
        $r121 := @caughtexception;

        r2 = $r121;

        exitmonitor r0;

        throw r2;

     label13:
        $r42 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $i11 = r0.<com.android.server.connectivity.Vpn: int mUserId>;

        r11 = interfaceinvoke $r42.<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>(r7, null, 0, $i11);

     label14:
        if r11 != null goto label16;

     label15:
        r134 = new java.lang.SecurityException;

        r133 = new java.lang.StringBuilder;

        specialinvoke r133.<java.lang.StringBuilder: void <init>()>();

        $r92 = virtualinvoke r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find ");

        $r93 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        $r94 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r93);

        $r112 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r134.<java.lang.SecurityException: void <init>(java.lang.String)>($r112);

        throw r134;

     label16:
        $r40 = "android.permission.BIND_VPN_SERVICE";

        $r38 = r11.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r39 = $r38.<android.content.pm.ServiceInfo: java.lang.String permission>;

        $z3 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r39);

        if $z3 != 0 goto label17;

        r136 = new java.lang.SecurityException;

        r135 = new java.lang.StringBuilder;

        specialinvoke r135.<java.lang.StringBuilder: void <init>()>();

        $r101 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        $r102 = virtualinvoke r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r101);

        $r87 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not require ");

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.BIND_VPN_SERVICE");

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r136.<java.lang.SecurityException: void <init>(java.lang.String)>($r89);

        throw r136;

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        r10 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        r13 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        r12 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        r15 = r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers>;

        $i13 = r1.<com.android.internal.net.VpnConfig: int mtu>;

        $i14 = specialinvoke r0.<com.android.server.connectivity.Vpn: int jniCreate(int)>($i13);

        r14 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>($i14);

     label18:
        r5 = r14;

     label19:
        $r43 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTING>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r43, "establish");

        $i12 = virtualinvoke r5.<android.os.ParcelFileDescriptor: int getFd()>();

        r18 = specialinvoke r0.<com.android.server.connectivity.Vpn: java.lang.String jniGetName(int)>($i12);

        r137 = new java.lang.StringBuilder;

        specialinvoke r137.<java.lang.StringBuilder: void <init>()>();

        r21 = r137;

        $r47 = r1.<com.android.internal.net.VpnConfig: java.util.List addresses>;

        r20 = interfaceinvoke $r47.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z4 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label27;

        $r82 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r27 = (android.net.LinkAddress) $r82;

        r138 = new java.lang.StringBuilder;

        specialinvoke r138.<java.lang.StringBuilder: void <init>()>();

        $r95 = virtualinvoke r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r97);

     label21:
        goto label20;

     label22:
        $r110 := @caughtexception;

        r16 = $r110;

     label23:
        $r109 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState FAILED>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r109, "establish");

        r147 = (java.lang.AutoCloseable) r5;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r147);

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label24:
        $r114 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        $r115 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        virtualinvoke $r114.<com.android.server.ConnectivityService$VpnCallback: void clearMarkedForwarding(java.lang.String)>($r115);

     label25:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label26:
        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = r10;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection> = r12;

        r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers> = r15;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = r13;

        throw r16;

     label27:
        $r48 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $i15 = specialinvoke r0.<com.android.server.connectivity.Vpn: int jniSetAddresses(java.lang.String,java.lang.String)>(r18, $r48);

        if $i15 >= 1 goto label28;

        r139 = new java.lang.IllegalArgumentException;

        specialinvoke r139.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one address must be specified");

        throw r139;

     label28:
        r140 = new com.android.server.connectivity.Vpn$Connection;

        specialinvoke r140.<com.android.server.connectivity.Vpn$Connection: void <init>(com.android.server.connectivity.Vpn,com.android.server.connectivity.Vpn$1)>(r0, null);

        r22 = r140;

        $r51 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r141 = new android.os.UserHandle;

        $i16 = r0.<com.android.server.connectivity.Vpn: int mUserId>;

        specialinvoke r141.<android.os.UserHandle: void <init>(int)>($i16);

        r148 = (android.content.ServiceConnection) r22;

        $z5 = virtualinvoke $r51.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r7, r148, 1, r141);

        if $z5 != 0 goto label29;

        r143 = new java.lang.IllegalStateException;

        r142 = new java.lang.StringBuilder;

        specialinvoke r142.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot bind ");

        $r78 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        $r80 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r143.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r80);

        throw r143;

     label29:
        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection> = r22;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = r18;

        $r52 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        r1.<com.android.internal.net.VpnConfig: java.lang.String user> = $r52;

        $r49 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        r1.<com.android.internal.net.VpnConfig: java.lang.String interfaze> = $r49;

        $l17 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r1.<com.android.internal.net.VpnConfig: long startTime> = $l17;

        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = r1;

        r144 = new android.util.SparseBooleanArray;

        specialinvoke r144.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers> = r144;

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label30:
        $r60 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        $r59 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        virtualinvoke $r60.<com.android.server.ConnectivityService$VpnCallback: void setMarkedForwarding(java.lang.String)>($r59);

        $r55 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        $r58 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        $r57 = r1.<com.android.internal.net.VpnConfig: java.util.List routes>;

        virtualinvoke $r55.<com.android.server.ConnectivityService$VpnCallback: void setRoutes(java.lang.String,java.util.List)>($r58, $r57);

        $r65 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        $r54 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        $r53 = r1.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        $r56 = r1.<com.android.internal.net.VpnConfig: java.util.List searchDomains>;

        virtualinvoke $r65.<com.android.server.ConnectivityService$VpnCallback: void override(java.lang.String,java.util.List,java.util.List)>($r54, $r53, $r56);

        $i19 = r0.<com.android.server.connectivity.Vpn: int mUserId>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void addVpnUserLocked(int)>($i19);

        $i18 = r0.<com.android.server.connectivity.Vpn: int mUserId>;

        if $i18 != 0 goto label40;

        $r83 = virtualinvoke r3.<android.os.UserManager: java.util.List getUsers()>();

        r25 = interfaceinvoke $r83.<java.util.List: java.util.Iterator iterator()>();

     label31:
        $z7 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label40;

        $r85 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (android.content.pm.UserInfo) $r85;

        z1 = virtualinvoke r26.<android.content.pm.UserInfo: boolean isRestricted()>();

     label32:
        if z1 == 0 goto label31;

     label33:
        $i22 = r26.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void addVpnUserLocked(int)>($i22);

     label34:
        goto label31;

     label35:
        $r103 := @caughtexception;

     label36:
        r145 = new java.lang.StringBuilder;

        specialinvoke r145.<java.lang.StringBuilder: void <init>()>();

        $r107 = virtualinvoke r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to add user ");

        $i23 = r26.<android.content.pm.UserInfo: int id>;

        $r123 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to owner\'s VPN");

        $r122 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("Vpn", $r122);

     label37:
        goto label31;

     label38:
        $r113 := @caughtexception;

        r23 = $r113;

     label39:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        throw r23;

     label40:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

     label41:
        if r12 == null goto label43;

     label42:
        $r84 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r149 = (android.content.ServiceConnection) r12;

        virtualinvoke $r84.<android.content.Context: void unbindService(android.content.ServiceConnection)>(r149);

     label43:
        if r13 == null goto label52;

     label44:
        $z6 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z6 != 0 goto label52;

        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label45:
        i6 = virtualinvoke r15.<android.util.SparseBooleanArray: int size()>();

        $r74 = r10.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        if $r74 == null goto label62;

        $r71 = r10.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        $i21 = interfaceinvoke $r71.<java.util.List: int size()>();

        if $i21 == 0 goto label62;

     label46:
        z0 = 1;

        goto label61;

     label47:
        if i7 >= i6 goto label50;

     label48:
        i8 = virtualinvoke r15.<android.util.SparseBooleanArray: int keyAt(int)>(i7);

        $r72 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        virtualinvoke $r72.<com.android.server.ConnectivityService$VpnCallback: void clearUserForwarding(java.lang.String,int,boolean)>(r13, i8, z0);

     label49:
        i7 = i7 + 1;

        goto label47;

     label50:
        $r73 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        virtualinvoke $r73.<com.android.server.ConnectivityService$VpnCallback: void clearMarkedForwarding(java.lang.String)>(r13);

     label51:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        specialinvoke r0.<com.android.server.connectivity.Vpn: void jniReset(java.lang.String)>(r13);

     label52:
        r146 = new java.lang.StringBuilder;

        specialinvoke r146.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke r146.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Established by ");

        $r61 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r70 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $r69 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        $r68 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vpn", $r67);

        $r66 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState AUTHENTICATING>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r66, "establish");

     label53:
        goto label04;

     label54:
        $r106 := @caughtexception;

        r24 = $r106;

     label55:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        throw r24;

     label56:
        $r105 := @caughtexception;

        r19 = $r105;

     label57:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r19;

     label58:
        $r127 := @caughtexception;

     label59:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label60:
        goto label26;

     label61:
        i7 = 0;

        goto label47;

     label62:
        z0 = 0;

        goto label61;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Exception from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch android.os.RemoteException from label07 to label08 with label08;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch android.os.RemoteException from label13 to label14 with label08;
        catch java.lang.Throwable from label13 to label14 with label10;
        catch android.os.RemoteException from label15 to label16 with label08;
        catch java.lang.Throwable from label15 to label16 with label10;
        catch android.os.RemoteException from label16 to label17 with label08;
        catch java.lang.Throwable from label16 to label17 with label10;
        catch java.lang.Throwable from label17 to label18 with label12;
        catch java.lang.RuntimeException from label19 to label20 with label22;
        catch java.lang.Throwable from label19 to label20 with label12;
        catch java.lang.RuntimeException from label20 to label21 with label22;
        catch java.lang.Throwable from label20 to label21 with label12;
        catch java.lang.Throwable from label23 to label24 with label12;
        catch java.lang.Exception from label24 to label25 with label58;
        catch java.lang.Throwable from label24 to label25 with label56;
        catch java.lang.Throwable from label25 to label26 with label12;
        catch java.lang.Throwable from label26 to label27 with label12;
        catch java.lang.RuntimeException from label27 to label28 with label22;
        catch java.lang.Throwable from label27 to label28 with label12;
        catch java.lang.RuntimeException from label28 to label29 with label22;
        catch java.lang.Throwable from label28 to label29 with label12;
        catch java.lang.RuntimeException from label29 to label30 with label22;
        catch java.lang.Throwable from label29 to label30 with label12;
        catch java.lang.Throwable from label30 to label31 with label38;
        catch java.lang.Throwable from label31 to label32 with label38;
        catch java.lang.Exception from label33 to label34 with label35;
        catch java.lang.Throwable from label33 to label34 with label38;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.RuntimeException from label39 to label40 with label22;
        catch java.lang.Throwable from label39 to label40 with label12;
        catch java.lang.RuntimeException from label40 to label41 with label22;
        catch java.lang.Throwable from label40 to label41 with label12;
        catch java.lang.RuntimeException from label42 to label43 with label22;
        catch java.lang.Throwable from label42 to label43 with label12;
        catch java.lang.RuntimeException from label44 to label45 with label22;
        catch java.lang.Throwable from label44 to label45 with label12;
        catch java.lang.Throwable from label45 to label46 with label54;
        catch java.lang.Throwable from label48 to label49 with label54;
        catch java.lang.Throwable from label50 to label51 with label54;
        catch java.lang.RuntimeException from label51 to label52 with label22;
        catch java.lang.Throwable from label51 to label52 with label12;
        catch java.lang.Throwable from label52 to label53 with label12;
        catch java.lang.RuntimeException from label55 to label56 with label22;
        catch java.lang.Throwable from label55 to label56 with label12;
        catch java.lang.Throwable from label57 to label58 with label12;
        catch java.lang.Throwable from label59 to label60 with label12;
    }

    public com.android.internal.net.VpnConfig getLegacyVpnConfig()
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$LegacyVpnRunner $r1;
        com.android.internal.net.VpnConfig $r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        return $r2;

     label1:
        return null;
    }

    public com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.Throwable r1, $r10;
        com.android.server.connectivity.Vpn$LegacyVpnRunner r2;
        com.android.internal.net.LegacyVpnInfo r3, $r4;
        com.android.internal.net.VpnConfig $r5;
        java.lang.String $r6;
        android.net.NetworkInfo $r7, $r8;
        int $i0;
        boolean $z0;
        android.app.PendingIntent $r9;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        r2 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

     label2:
        if r2 != null goto label4;

        r3 = null;

     label3:
        exitmonitor r0;

        return r3;

     label4:
        $r4 = new com.android.internal.net.LegacyVpnInfo;

        specialinvoke $r4.<com.android.internal.net.LegacyVpnInfo: void <init>()>();

        r3 = $r4;

        $r5 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r6 = $r5.<com.android.internal.net.VpnConfig: java.lang.String user>;

        r3.<com.android.internal.net.LegacyVpnInfo: java.lang.String key> = $r6;

        $r7 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $i0 = staticinvoke <com.android.internal.net.LegacyVpnInfo: int stateFromNetworkInfo(android.net.NetworkInfo)>($r7);

        r3.<com.android.internal.net.LegacyVpnInfo: int state> = $i0;

        $r8 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $z0 = virtualinvoke $r8.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label3;

        $r9 = r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent>;

        r3.<com.android.internal.net.LegacyVpnInfo: android.app.PendingIntent intent> = $r9;

     label5:
        goto label3;

     label6:
        $r10 := @caughtexception;

        r1 = $r10;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public java.lang.String getTcpBufferSizesPropName()
    {
        com.android.server.connectivity.Vpn r0;

        r0 := @this: com.android.server.connectivity.Vpn;

        return "net.tcp.buffersize.unknown";
    }

    public com.android.internal.net.VpnConfig getVpnConfig()
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        return $r1;
    }

    public void interfaceStatusChanged(java.lang.String, boolean)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Throwable r3, $r5;
        android.net.INetworkManagementEventObserver $r4;
        android.os.RemoteException $r6;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        entermonitor r0;

     label1:
        $r4 = r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver>;

        interfaceinvoke $r4.<android.net.INetworkManagementEventObserver: void interfaceStatusChanged(java.lang.String,boolean)>(r1, z0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r0;

        throw r3;

     label4:
        $r6 := @caughtexception;

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isAddressCovered(java.net.InetAddress)
    {
        com.android.server.connectivity.Vpn r0;
        java.net.InetAddress r1;
        java.lang.Throwable r2, $r6;
        android.net.RouteInfo r3;
        boolean z0, $z1;
        com.android.internal.net.VpnConfig $r4;
        java.util.List $r5;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.net.InetAddress;

        entermonitor r0;

     label1:
        $z1 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isRunningLocked()>();

        if $z1 != 0 goto label3;

        exitmonitor r0;

     label2:
        return 0;

     label3:
        $r4 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r5 = $r4.<com.android.internal.net.VpnConfig: java.util.List routes>;

        r3 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo selectBestRoute(java.util.Collection,java.net.InetAddress)>($r5, r1);

     label4:
        z0 = 0;

        if r3 == null goto label5;

        z0 = 1;

     label5:
        exitmonitor r0;

     label6:
        return z0;

     label7:
        $r6 := @caughtexception;

        r2 = $r6;

     label8:
        exitmonitor r0;

     label9:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean prepare(java.lang.String, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, r2, $r8, $r9, $r14, $r19, $r29, $r31, $r34, $r35;
        boolean z0, z1, z2, $z3, $z5;
        java.lang.Throwable r3, r6, $r37, $r38;
        com.android.server.connectivity.Vpn$Connection r4, $r21, $r24;
        long l0;
        int i1, i2, i3, i4;
        java.util.List r7, $r36;
        com.android.server.connectivity.Vpn$LegacyVpnRunner $r11, $r18;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, r40;
        android.net.NetworkInfo$DetailedState $r17;
        android.os.Parcel $r20;
        android.os.IBinder $r22;
        android.content.Context $r23;
        com.android.internal.net.VpnConfig $r25, $r32;
        com.android.server.ConnectivityService$VpnCallback $r26, $r30, $r33;
        android.util.SparseBooleanArray $r27, $r28;
        java.lang.Exception $r39;
        android.content.ServiceConnection r41;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 = 1;

        entermonitor r0;

        if r1 == null goto label04;

     label01:
        $r35 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r35);

     label02:
        if z2 != 0 goto label04;

        z0 = 0;

     label03:
        exitmonitor r0;

        return z0;

     label04:
        if r2 == null goto label03;

     label05:
        $r8 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label06;

        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("[Legacy VPN]");

        if $z5 == 0 goto label03;

     label06:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $r9 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        if $r9 == null goto label16;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        $r26 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        virtualinvoke $r26.<com.android.server.ConnectivityService$VpnCallback: void restore()>();

        $r27 = r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers>;

        i1 = virtualinvoke $r27.<android.util.SparseBooleanArray: int size()>();

        $r25 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        r7 = $r25.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

     label08:
        z1 = 0;

        if r7 == null goto label28;

     label09:
        $r32 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r36 = $r32.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        i2 = interfaceinvoke $r36.<java.util.List: int size()>();

     label10:
        z1 = 0;

        if i2 == 0 goto label28;

        z1 = 1;

        goto label28;

     label11:
        if i4 >= i1 goto label14;

     label12:
        $r28 = r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers>;

        i3 = virtualinvoke $r28.<android.util.SparseBooleanArray: int keyAt(int)>(i4);

        $r33 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        $r34 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        virtualinvoke $r33.<com.android.server.ConnectivityService$VpnCallback: void clearUserForwarding(java.lang.String,int,boolean)>($r34, i3, z1);

        specialinvoke r0.<com.android.server.connectivity.Vpn: void hideNotification(int)>(i3);

     label13:
        i4 = i4 + 1;

        goto label11;

     label14:
        $r30 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        $r31 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        virtualinvoke $r30.<com.android.server.ConnectivityService$VpnCallback: void clearMarkedForwarding(java.lang.String)>($r31);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r29 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void jniReset(java.lang.String)>($r29);

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = null;

        r0.<com.android.server.connectivity.Vpn: android.util.SparseBooleanArray mVpnUsers> = null;

     label16:
        r4 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

     label17:
        if r4 == null goto label25;

     label18:
        $r21 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        $r22 = staticinvoke <com.android.server.connectivity.Vpn$Connection: android.os.IBinder access$200(com.android.server.connectivity.Vpn$Connection)>($r21);

        $r20 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        interfaceinvoke $r22.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(16777215, $r20, null, 1);

     label19:
        $r23 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r24 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        r41 = (android.content.ServiceConnection) $r24;

        virtualinvoke $r23.<android.content.Context: void unbindService(android.content.ServiceConnection)>(r41);

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection> = null;

     label20:
        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Switched from ");

        $r14 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vpn", $r19);

        r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage> = r2;

        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = null;

        $r17 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState IDLE>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r17, "prepare");

     label21:
        goto label03;

     label22:
        $r38 := @caughtexception;

        r3 = $r38;

        exitmonitor r0;

        throw r3;

     label23:
        $r37 := @caughtexception;

        r6 = $r37;

     label24:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r6;

     label25:
        $r11 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        if $r11 == null goto label20;

        $r18 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        virtualinvoke $r18.<com.android.server.connectivity.Vpn$LegacyVpnRunner: void exit()>();

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner> = null;

     label26:
        goto label20;

     label27:
        $r39 := @caughtexception;

        goto label19;

     label28:
        i4 = 0;

        goto label11;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.lang.Throwable from label12 to label13 with label23;
        catch java.lang.Throwable from label14 to label15 with label23;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Exception from label18 to label19 with label27;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label24 to label25 with label22;
        catch java.lang.Throwable from label25 to label26 with label22;
    }

    public void protect(android.os.ParcelFileDescriptor) throws java.lang.Exception
    {
        com.android.server.connectivity.Vpn r0;
        android.os.ParcelFileDescriptor r1;
        int i0, $i2, $i3;
        long l1;
        java.lang.Throwable r2, $r8;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        java.lang.String $r5;
        com.android.server.ConnectivityService$VpnCallback $r6;
        java.lang.SecurityException $r7;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        $r3 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r5 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $i2 = r0.<com.android.server.connectivity.Vpn: int mUserId>;

        i0 = virtualinvoke $r4.<android.content.pm.PackageManager: int getPackageUid(java.lang.String,int)>($r5, $i2);

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i3 == i0 goto label1;

        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("Unauthorized Caller");

        throw $r7;

     label1:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r6 = r0.<com.android.server.connectivity.Vpn: com.android.server.ConnectivityService$VpnCallback mCallback>;

        virtualinvoke $r6.<com.android.server.ConnectivityService$VpnCallback: void protect(android.os.ParcelFileDescriptor)>(r1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public boolean reconnect()
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void setEnableNotifications(boolean)
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0;

        r0 := @this: com.android.server.connectivity.Vpn;

        z0 := @parameter0: boolean;

        r0.<com.android.server.connectivity.Vpn: boolean mEnableNotif> = z0;

        return;
    }

    public void setEnableTeardown(boolean)
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0;

        r0 := @this: com.android.server.connectivity.Vpn;

        z0 := @parameter0: boolean;

        r0.<com.android.server.connectivity.Vpn: boolean mEnableTeardown> = z0;

        return;
    }

    public void startLegacyVpn(com.android.internal.net.VpnProfile, android.security.KeyStore, android.net.LinkProperties)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnProfile r1;
        android.security.KeyStore r2;
        android.net.LinkProperties r3;
        android.net.RouteInfo r4;
        java.lang.String r5, r6, r7, r8, r9, r10, r15, $r19, $r20, $r21, $r23, $r24, $r26, $r27, $r28, $r30, $r31, $r33, $r34, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r55, $r56, $r57, $r58, $r59, $r63, $r65, $r66, $r69, $r71, $r73, $r75, $r76, $r81;
        int i0, i1;
        java.lang.String[] r11, r12, $r32, $r35;
        com.android.internal.net.VpnConfig r13, $r25;
        byte[] r14, r16, r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.net.InetAddress $r18;
        java.lang.IllegalStateException $r22, $r80;
        java.util.List $r29, $r36;
        java.lang.StringBuilder $r53, $r54, $r61, $r62, $r64, $r67, $r70, $r72, $r74, $r77, $r78, $r79;
        java.nio.charset.Charset $r60, $r68, $r82;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: com.android.internal.net.VpnProfile;

        r2 := @parameter1: android.security.KeyStore;

        r3 := @parameter2: android.net.LinkProperties;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $z0 = virtualinvoke r2.<android.security.KeyStore: boolean isUnlocked()>();

        if $z0 != 0 goto label01;

        $r80 = new java.lang.IllegalStateException;

        specialinvoke $r80.<java.lang.IllegalStateException: void <init>(java.lang.String)>("KeyStore isn\'t unlocked");

        throw $r80;

     label01:
        r4 = staticinvoke <com.android.server.connectivity.Vpn: android.net.RouteInfo findIPv4DefaultRoute(android.net.LinkProperties)>(r3);

        $r18 = virtualinvoke r4.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        r5 = virtualinvoke $r18.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r6 = virtualinvoke r4.<android.net.RouteInfo: java.lang.String getInterface()>();

        r7 = "";

        r8 = "";

        r9 = "";

        r10 = "";

        $r19 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert>;

        $z1 = virtualinvoke $r19.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label02;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r69 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert>;

        $r77 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        r7 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r75 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert>;

        $r74 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75);

        $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        r16 = virtualinvoke r2.<android.security.KeyStore: byte[] get(java.lang.String)>($r76);

        if r16 != null goto label06;

        r8 = null;

     label02:
        $r20 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecCaCert>;

        $z2 = virtualinvoke $r20.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label03;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        $r63 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecCaCert>;

        $r72 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r71 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        r17 = virtualinvoke r2.<android.security.KeyStore: byte[] get(java.lang.String)>($r71);

        if r17 != null goto label07;

        r9 = null;

     label03:
        $r21 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecServerCert>;

        $z3 = virtualinvoke $r21.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label04;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r55 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecServerCert>;

        $r64 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        r14 = virtualinvoke r2.<android.security.KeyStore: byte[] get(java.lang.String)>($r65);

        if r14 != null goto label08;

        r10 = null;

     label04:
        if r7 == null goto label05;

        if r8 == null goto label05;

        if r9 == null goto label05;

        if r10 != null goto label09;

     label05:
        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot load credentials");

        throw $r22;

     label06:
        $r81 = new java.lang.String;

        $r82 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r81.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r16, $r82);

        r8 = $r81;

        goto label02;

     label07:
        $r73 = new java.lang.String;

        $r68 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r73.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r17, $r68);

        r9 = $r73;

        goto label03;

     label08:
        $r66 = new java.lang.String;

        $r60 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r66.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r14, $r60);

        r10 = $r66;

        goto label04;

     label09:
        i0 = r1.<com.android.internal.net.VpnProfile: int type>;

        r11 = null;

        tableswitch(i0)
        {
            case 1: goto label14;
            case 2: goto label15;
            case 3: goto label16;
            case 4: goto label17;
            case 5: goto label18;
            default: goto label10;
        };

     label10:
        i1 = r1.<com.android.internal.net.VpnProfile: int type>;

        r12 = null;

        tableswitch(i1)
        {
            case 0: goto label19;
            case 1: goto label22;
            case 2: goto label22;
            default: goto label11;
        };

     label11:
        $r25 = new com.android.internal.net.VpnConfig;

        specialinvoke $r25.<com.android.internal.net.VpnConfig: void <init>()>();

        r13 = $r25;

        r13.<com.android.internal.net.VpnConfig: boolean legacy> = 1;

        $r26 = r1.<com.android.internal.net.VpnProfile: java.lang.String key>;

        r13.<com.android.internal.net.VpnConfig: java.lang.String user> = $r26;

        r13.<com.android.internal.net.VpnConfig: java.lang.String interfaze> = r6;

        $r23 = r1.<com.android.internal.net.VpnProfile: java.lang.String name>;

        r13.<com.android.internal.net.VpnConfig: java.lang.String session> = $r23;

        $r24 = r1.<com.android.internal.net.VpnProfile: java.lang.String routes>;

        virtualinvoke r13.<com.android.internal.net.VpnConfig: void addLegacyRoutes(java.lang.String)>($r24);

        $r28 = r1.<com.android.internal.net.VpnProfile: java.lang.String dnsServers>;

        $z5 = virtualinvoke $r28.<java.lang.String: boolean isEmpty()>();

        if $z5 != 0 goto label12;

        $r30 = r1.<com.android.internal.net.VpnProfile: java.lang.String dnsServers>;

        $r35 = virtualinvoke $r30.<java.lang.String: java.lang.String[] split(java.lang.String)>(" +");

        $r36 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r35);

        r13.<com.android.internal.net.VpnConfig: java.util.List dnsServers> = $r36;

     label12:
        $r27 = r1.<com.android.internal.net.VpnProfile: java.lang.String searchDomains>;

        $z4 = virtualinvoke $r27.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label13;

        $r31 = r1.<com.android.internal.net.VpnProfile: java.lang.String searchDomains>;

        $r32 = virtualinvoke $r31.<java.lang.String: java.lang.String[] split(java.lang.String)>(" +");

        $r29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r32);

        r13.<com.android.internal.net.VpnConfig: java.util.List searchDomains> = $r29;

     label13:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void startLegacyVpn(com.android.internal.net.VpnConfig,java.lang.String[],java.lang.String[])>(r13, r11, r12);

        return;

     label14:
        r11 = newarray (java.lang.String)[6];

        r11[0] = r6;

        $r58 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        r11[1] = $r58;

        r11[2] = "udppsk";

        $r59 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecIdentifier>;

        r11[3] = $r59;

        $r52 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        r11[4] = $r52;

        r11[5] = "1701";

        goto label10;

     label15:
        r11 = newarray (java.lang.String)[8];

        r11[0] = r6;

        $r57 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        r11[1] = $r57;

        r11[2] = "udprsa";

        r11[3] = r7;

        r11[4] = r8;

        r11[5] = r9;

        r11[6] = r10;

        r11[7] = "1701";

        goto label10;

     label16:
        r11 = newarray (java.lang.String)[9];

        r11[0] = r6;

        $r51 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        r11[1] = $r51;

        r11[2] = "xauthpsk";

        $r50 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecIdentifier>;

        r11[3] = $r50;

        $r49 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        r11[4] = $r49;

        $r48 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        r11[5] = $r48;

        $r56 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        r11[6] = $r56;

        r11[7] = "";

        r11[8] = r5;

        goto label10;

     label17:
        r11 = newarray (java.lang.String)[11];

        r11[0] = r6;

        $r46 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        r11[1] = $r46;

        r11[2] = "xauthrsa";

        r11[3] = r7;

        r11[4] = r8;

        r11[5] = r9;

        r11[6] = r10;

        $r45 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        r11[7] = $r45;

        $r44 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        r11[8] = $r44;

        r11[9] = "";

        r11[10] = r5;

        goto label10;

     label18:
        r11 = newarray (java.lang.String)[9];

        r11[0] = r6;

        $r42 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        r11[1] = $r42;

        r11[2] = "hybridrsa";

        r11[3] = r9;

        r11[4] = r10;

        $r41 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        r11[5] = $r41;

        $r47 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        r11[6] = $r47;

        r11[7] = "";

        r11[8] = r5;

        goto label10;

     label19:
        r12 = newarray (java.lang.String)[20];

        r12[0] = r6;

        r12[1] = "pptp";

        $r38 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        r12[2] = $r38;

        r12[3] = "1723";

        r12[4] = "name";

        $r37 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        r12[5] = $r37;

        r12[6] = "password";

        $r43 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        r12[7] = $r43;

        r12[8] = "linkname";

        r12[9] = "vpn";

        r12[10] = "refuse-eap";

        r12[11] = "nodefaultroute";

        r12[12] = "usepeerdns";

        r12[13] = "idle";

        r12[14] = "1800";

        r12[15] = "mtu";

        r12[16] = "1400";

        r12[17] = "mru";

        r12[18] = "1400";

        $z6 = r1.<com.android.internal.net.VpnProfile: boolean mppe>;

        if $z6 == 0 goto label21;

        r15 = "+mppe";

     label20:
        r12[19] = r15;

        goto label11;

     label21:
        r15 = "nomppe";

        goto label20;

     label22:
        r12 = newarray (java.lang.String)[20];

        r12[0] = r6;

        r12[1] = "l2tp";

        $r33 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        r12[2] = $r33;

        r12[3] = "1701";

        $r34 = r1.<com.android.internal.net.VpnProfile: java.lang.String l2tpSecret>;

        r12[4] = $r34;

        r12[5] = "name";

        $r40 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        r12[6] = $r40;

        r12[7] = "password";

        $r39 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        r12[8] = $r39;

        r12[9] = "linkname";

        r12[10] = "vpn";

        r12[11] = "refuse-eap";

        r12[12] = "nodefaultroute";

        r12[13] = "usepeerdns";

        r12[14] = "idle";

        r12[15] = "1800";

        r12[16] = "mtu";

        r12[17] = "1400";

        r12[18] = "mru";

        r12[19] = "1400";

        goto label11;
    }

    protected void startMonitoringInternal()
    {
        com.android.server.connectivity.Vpn r0;

        r0 := @this: com.android.server.connectivity.Vpn;

        return;
    }

    public void stopLegacyVpn()
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.Throwable r1, r2, $r5, $r6;
        com.android.server.connectivity.Vpn$LegacyVpnRunner $r3, $r4;

        r0 := @this: com.android.server.connectivity.Vpn;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        if $r3 == null goto label3;

        $r4 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        virtualinvoke $r4.<com.android.server.connectivity.Vpn$LegacyVpnRunner: void exit()>();

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner> = null;

        entermonitor "LegacyVpnRunner";

     label2:
        exitmonitor "LegacyVpnRunner";

     label3:
        exitmonitor r0;

        return;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

     label5:
        exitmonitor "LegacyVpnRunner";

     label6:
        throw r2;

     label7:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public boolean teardown()
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public static void <clinit>()
    {
        <com.android.server.connectivity.Vpn: java.lang.String TAG> = "Vpn";

        <com.android.server.connectivity.Vpn: boolean LOGD> = 1;

        return;
    }
}
