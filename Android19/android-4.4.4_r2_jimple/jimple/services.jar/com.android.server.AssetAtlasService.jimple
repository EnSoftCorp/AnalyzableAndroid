public class com.android.server.AssetAtlasService extends android.view.IAssetAtlas$Stub
{
    public static final java.lang.String ASSET_ATLAS_SERVICE;
    private static final int ATLAS_MAP_ENTRY_FIELD_COUNT;
    private static final boolean DEBUG_ATLAS;
    private static final boolean DEBUG_ATLAS_TEXTURE;
    private static final int GRAPHIC_BUFFER_USAGE;
    private static final java.lang.String LOG_TAG;
    private static final int MAX_SIZE;
    private static final int MIN_SIZE;
    private static final float PACKING_THRESHOLD;
    private static final int STEP;
    private int[] mAtlasMap;
    private final java.util.concurrent.atomic.AtomicBoolean mAtlasReady;
    private android.view.GraphicBuffer mBuffer;
    private final android.content.Context mContext;
    private final java.lang.String mVersionName;

    public void <init>(android.content.Context)
    {
        com.android.server.AssetAtlasService r0;
        android.content.Context r1;
        java.util.ArrayList r2, $r7;
        int i0, i1, i2, $i3, $i4, $i5;
        android.util.LongSparseArray r3;
        android.graphics.Bitmap r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        java.lang.String $r6;
        android.content.res.Resources $r8;
        com.android.server.AssetAtlasService$1 $r9;
        java.lang.Thread $r10;
        java.lang.Object $r11;
        com.android.server.AssetAtlasService$Renderer $r12;
        android.graphics.drawable.Drawable$ConstantState $r13;
        android.graphics.Bitmap$Config $r14, $r15;

        r0 := @this: com.android.server.AssetAtlasService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.IAssetAtlas$Stub: void <init>()>();

        $r5 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.AssetAtlasService: java.util.concurrent.atomic.AtomicBoolean mAtlasReady> = $r5;

        r0.<com.android.server.AssetAtlasService: android.content.Context mContext> = r1;

        $r6 = staticinvoke <com.android.server.AssetAtlasService: java.lang.String queryVersionName(android.content.Context)>(r1);

        r0.<com.android.server.AssetAtlasService: java.lang.String mVersionName> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(300);

        r2 = $r7;

        i0 = 0;

        $r8 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r3 = virtualinvoke $r8.<android.content.res.Resources: android.util.LongSparseArray getPreloadedDrawables()>();

        i1 = virtualinvoke r3.<android.util.LongSparseArray: int size()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        $r11 = virtualinvoke r3.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i2);

        $r13 = (android.graphics.drawable.Drawable$ConstantState) $r11;

        r4 = virtualinvoke $r13.<android.graphics.drawable.Drawable$ConstantState: android.graphics.Bitmap getBitmap()>();

        if r4 == null goto label2;

        $r15 = virtualinvoke r4.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r14 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        if $r15 != $r14 goto label2;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        $i3 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        $i5 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        $i4 = $i3 * $i5;

        i0 = i0 + $i4;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r9 = new com.android.server.AssetAtlasService$1;

        specialinvoke $r9.<com.android.server.AssetAtlasService$1: void <init>(com.android.server.AssetAtlasService)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r2, $r9);

        $r10 = new java.lang.Thread;

        $r12 = new com.android.server.AssetAtlasService$Renderer;

        specialinvoke $r12.<com.android.server.AssetAtlasService$Renderer: void <init>(com.android.server.AssetAtlasService,java.util.ArrayList,int)>(r0, r2, i0);

        specialinvoke $r10.<java.lang.Thread: void <init>(java.lang.Runnable)>($r12);

        virtualinvoke $r10.<java.lang.Thread: void start()>();

        return;
    }

    static java.lang.String access$000(com.android.server.AssetAtlasService)
    {
        com.android.server.AssetAtlasService r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.AssetAtlasService;

        $r1 = r0.<com.android.server.AssetAtlasService: java.lang.String mVersionName>;

        return $r1;
    }

    static com.android.server.AssetAtlasService$Configuration access$100(com.android.server.AssetAtlasService, java.util.ArrayList, int, java.lang.String)
    {
        com.android.server.AssetAtlasService r0;
        java.util.ArrayList r1;
        int i0;
        java.lang.String r2;
        com.android.server.AssetAtlasService$Configuration $r3;

        r0 := @parameter0: com.android.server.AssetAtlasService;

        r1 := @parameter1: java.util.ArrayList;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $r3 = specialinvoke r0.<com.android.server.AssetAtlasService: com.android.server.AssetAtlasService$Configuration chooseConfiguration(java.util.ArrayList,int,java.lang.String)>(r1, i0, r2);

        return $r3;
    }

    static android.view.GraphicBuffer access$200(com.android.server.AssetAtlasService)
    {
        com.android.server.AssetAtlasService r0;
        android.view.GraphicBuffer $r1;

        r0 := @parameter0: com.android.server.AssetAtlasService;

        $r1 = r0.<com.android.server.AssetAtlasService: android.view.GraphicBuffer mBuffer>;

        return $r1;
    }

    static android.view.GraphicBuffer access$202(com.android.server.AssetAtlasService, android.view.GraphicBuffer)
    {
        com.android.server.AssetAtlasService r0;
        android.view.GraphicBuffer r1;

        r0 := @parameter0: com.android.server.AssetAtlasService;

        r1 := @parameter1: android.view.GraphicBuffer;

        r0.<com.android.server.AssetAtlasService: android.view.GraphicBuffer mBuffer> = r1;

        return r1;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$300(com.android.server.AssetAtlasService)
    {
        com.android.server.AssetAtlasService r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: com.android.server.AssetAtlasService;

        $r1 = r0.<com.android.server.AssetAtlasService: java.util.concurrent.atomic.AtomicBoolean mAtlasReady>;

        return $r1;
    }

    static int[] access$400(com.android.server.AssetAtlasService)
    {
        com.android.server.AssetAtlasService r0;
        int[] $r1;

        r0 := @parameter0: com.android.server.AssetAtlasService;

        $r1 = r0.<com.android.server.AssetAtlasService: int[] mAtlasMap>;

        return $r1;
    }

    static int[] access$402(com.android.server.AssetAtlasService, int[])
    {
        com.android.server.AssetAtlasService r0;
        int[] r1;

        r0 := @parameter0: com.android.server.AssetAtlasService;

        r1 := @parameter1: int[];

        r0.<com.android.server.AssetAtlasService: int[] mAtlasMap> = r1;

        return r1;
    }

    static void access$500()
    {
        staticinvoke <com.android.server.AssetAtlasService: void deleteDataFile()>();

        return;
    }

    static boolean access$600(android.view.GraphicBuffer, int)
    {
        android.view.GraphicBuffer r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: android.view.GraphicBuffer;

        i0 := @parameter1: int;

        $z0 = staticinvoke <com.android.server.AssetAtlasService: boolean nUploadAtlas(android.view.GraphicBuffer,int)>(r0, i0);

        return $z0;
    }

    static int access$700(android.graphics.Canvas, int, int)
    {
        android.graphics.Canvas r0;
        int i0, i1, $i2;

        r0 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <com.android.server.AssetAtlasService: int nAcquireAtlasCanvas(android.graphics.Canvas,int,int)>(r0, i0, i1);

        return $i2;
    }

    static void access$800(android.graphics.Canvas, int)
    {
        android.graphics.Canvas r0;
        int i0;

        r0 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        staticinvoke <com.android.server.AssetAtlasService: void nReleaseAtlasCanvas(android.graphics.Canvas,int)>(r0, i0);

        return;
    }

    private boolean checkBuildIdentifier(java.io.BufferedReader, java.lang.String) throws java.io.IOException
    {
        com.android.server.AssetAtlasService r0;
        java.io.BufferedReader r1;
        java.lang.String r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.AssetAtlasService;

        r1 := @parameter0: java.io.BufferedReader;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.android.server.AssetAtlasService: java.lang.String getBuildIdentifier(java.lang.String)>(r2);

        $r4 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    private com.android.server.AssetAtlasService$Configuration chooseConfiguration(java.util.ArrayList, int, java.lang.String)
    {
        com.android.server.AssetAtlasService r0;
        java.util.ArrayList r1;
        int i0;
        java.lang.String r2;
        java.io.File r3;
        boolean z0;
        com.android.server.AssetAtlasService$Configuration r4;

        r0 := @this: com.android.server.AssetAtlasService;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <com.android.server.AssetAtlasService: java.io.File getDataFile()>();

        z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        r4 = null;

        if z0 == 0 goto label1;

        r4 = specialinvoke r0.<com.android.server.AssetAtlasService: com.android.server.AssetAtlasService$Configuration readConfiguration(java.io.File,java.lang.String)>(r3, r2);

     label1:
        if r4 != null goto label2;

        r4 = staticinvoke <com.android.server.AssetAtlasService: com.android.server.AssetAtlasService$Configuration computeBestConfiguration(java.util.ArrayList,int)>(r1, i0);

        if r4 == null goto label2;

        specialinvoke r0.<com.android.server.AssetAtlasService: void writeConfiguration(com.android.server.AssetAtlasService$Configuration,java.io.File,java.lang.String)>(r4, r3, r2);

     label2:
        return r4;
    }

    private static com.android.server.AssetAtlasService$Configuration computeBestConfiguration(java.util.ArrayList, int)
    {
        java.util.ArrayList r0, $r6;
        int i0, i2, i3, i4, i5, i6, $i8, $i9, $i12, $i14, $i15, $i16;
        long l1, $l10, $l11;
        java.util.List r1;
        java.util.concurrent.CountDownLatch r2, $r8;
        float f0, $f1, $f2, $f3;
        java.lang.Object[] r4;
        com.android.server.AssetAtlasService$WorkerResult r5;
        java.lang.Runtime $r7;
        java.util.concurrent.TimeUnit $r9;
        com.android.server.AssetAtlasService$2 $r10;
        java.lang.String $r11, $r22;
        java.lang.Float $r12;
        com.android.server.AssetAtlasService$Configuration $r13;
        java.lang.Object $r14;
        android.graphics.Atlas$Type $r15;
        java.lang.Thread $r16;
        java.lang.StringBuilder $r17, $r18, $r23;
        com.android.server.AssetAtlasService$ComputeWorker $r19, $r21;
        java.lang.InterruptedException $r20;

        r0 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Atlas", "Computing best atlas configuration...");

        l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r6);

        $r7 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        i2 = virtualinvoke $r7.<java.lang.Runtime: int availableProcessors()>();

        if i2 != 1 goto label2;

        $r21 = new com.android.server.AssetAtlasService$ComputeWorker;

        specialinvoke $r21.<com.android.server.AssetAtlasService$ComputeWorker: void <init>(int,int,int,java.util.List,int,java.util.List,java.util.concurrent.CountDownLatch)>(768, 2048, 64, r0, i0, r1, null);

        virtualinvoke $r21.<com.android.server.AssetAtlasService$ComputeWorker: void run()>();

     label1:
        $r10 = new com.android.server.AssetAtlasService$2;

        specialinvoke $r10.<com.android.server.AssetAtlasService$2: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r1, $r10);

        $l10 = staticinvoke <java.lang.System: long nanoTime()>();

        $l11 = $l10 - l1;

        $f3 = (float) $l11;

        $f1 = $f3 / 1000.0F;

        $f2 = $f1 / 1000.0F;

        f0 = $f2 / 1000.0F;

        r4 = newarray (java.lang.Object)[1];

        $r12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        r4[0] = $r12;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Found best atlas configuration in %.2fs", r4);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Atlas", $r11);

        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r5 = (com.android.server.AssetAtlasService$WorkerResult) $r14;

        $r13 = new com.android.server.AssetAtlasService$Configuration;

        $r15 = r5.<com.android.server.AssetAtlasService$WorkerResult: android.graphics.Atlas$Type type>;

        $i15 = r5.<com.android.server.AssetAtlasService$WorkerResult: int width>;

        $i14 = r5.<com.android.server.AssetAtlasService$WorkerResult: int height>;

        $i12 = r5.<com.android.server.AssetAtlasService$WorkerResult: int count>;

        specialinvoke $r13.<com.android.server.AssetAtlasService$Configuration: void <init>(android.graphics.Atlas$Type,int,int,int)>($r15, $i15, $i14, $i12);

        return $r13;

     label2:
        i3 = 768;

        $i8 = i2 - 1;

        $i9 = 64 * $i8;

        i4 = 2048 - $i9;

        i5 = i2 * 64;

        $r8 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r8.<java.util.concurrent.CountDownLatch: void <init>(int)>(i2);

        r2 = $r8;

        i6 = 0;

     label3:
        if i6 >= i2 goto label4;

        $r16 = new java.lang.Thread;

        $r19 = new com.android.server.AssetAtlasService$ComputeWorker;

        specialinvoke $r19.<com.android.server.AssetAtlasService$ComputeWorker: void <init>(int,int,int,java.util.List,int,java.util.List,java.util.concurrent.CountDownLatch)>(i3, i4, i5, r0, i0, r1, r2);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Atlas Worker #");

        $i16 = i6 + 1;

        $r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r19, $r22);

        virtualinvoke $r16.<java.lang.Thread: void start()>();

        i6 = i6 + 1;

        i3 = i3 + 64;

        i4 = i4 + 64;

        goto label3;

     label4:
        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(10L, $r9);

     label5:
        goto label1;

     label6:
        $r20 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Atlas", "Could not complete configuration computation");

        return null;

        catch java.lang.InterruptedException from label4 to label5 with label6;
    }

    private static void deleteDataFile()
    {
        java.io.File $r0;
        boolean $z0;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Atlas", "Current configuration inconsistent with assets list");

        $r0 = staticinvoke <com.android.server.AssetAtlasService: java.io.File getDataFile()>();

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Atlas", "Could not delete the current configuration");

     label1:
        return;
    }

    private java.lang.String getBuildIdentifier(java.lang.String)
    {
        com.android.server.AssetAtlasService r0;
        java.lang.String r1, $r3, $r9, $r11;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7, $r10;
        java.io.File $r8;
        long $l0;

        r0 := @this: com.android.server.AssetAtlasService;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.build.fingerprint", "");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r8 = specialinvoke r0.<com.android.server.AssetAtlasService: java.io.File getFrameworkResourcesFile()>();

        $l0 = virtualinvoke $r8.<java.io.File: long length()>();

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private static java.io.File getDataFile()
    {
        java.io.File $r0, $r1, $r2;

        $r0 = new java.io.File;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "system");

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "framework_atlas.config");

        return $r0;
    }

    private java.io.File getFrameworkResourcesFile()
    {
        com.android.server.AssetAtlasService r0;
        java.io.File $r1;
        android.content.Context $r2;
        android.content.pm.ApplicationInfo $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.AssetAtlasService;

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.AssetAtlasService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r4 = $r3.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r4);

        return $r1;
    }

    private static native int nAcquireAtlasCanvas(android.graphics.Canvas, int, int);

    private static native void nReleaseAtlasCanvas(android.graphics.Canvas, int);

    private static native boolean nUploadAtlas(android.view.GraphicBuffer, int);

    private static java.lang.String queryVersionName(android.content.Context)
    {
        android.content.Context r0;
        android.content.pm.PackageManager$NameNotFoundException r1, $r6;
        java.lang.String r2, r3;
        android.content.pm.PackageManager $r4;
        android.content.pm.PackageInfo $r5;
        java.lang.Throwable r7;

        r0 := @parameter0: android.content.Context;

     label1:
        r2 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r5 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r2, 0);

        r3 = $r5.<android.content.pm.PackageInfo: java.lang.String versionName>;

     label2:
        return r3;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        r7 = (java.lang.Throwable) r1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Atlas", "Could not get package info", r7);

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private com.android.server.AssetAtlasService$Configuration readConfiguration(java.io.File, java.lang.String)
    {
        com.android.server.AssetAtlasService r0;
        java.io.File r1;
        java.lang.String r2, $r18, $r23, $r31, $r37;
        java.io.BufferedReader r3, r4, $r16;
        java.lang.IllegalArgumentException r5, $r21, $r39;
        java.lang.Throwable r6, $r43, $r44;
        java.io.FileNotFoundException r9, $r27, $r41;
        java.io.IOException r11, $r29, $r35, $r36, $r38, $r40, $r42, $r45;
        com.android.server.AssetAtlasService$Configuration r14, $r19;
        java.io.InputStreamReader $r15;
        boolean $z0;
        java.io.FileInputStream $r17;
        int $i0, $i1, $i2, $i3;
        android.graphics.Atlas$Type $r20;
        java.lang.StringBuilder $r22, $r24, $r25, $r26, $r28, $r30, $r32, $r33, $r34;

        r0 := @this: com.android.server.AssetAtlasService;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        r3 = null;

     label01:
        $r16 = new java.io.BufferedReader;

        $r15 = new java.io.InputStreamReader;

        $r17 = new java.io.FileInputStream;

        specialinvoke $r17.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r15.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r17);

        specialinvoke $r16.<java.io.BufferedReader: void <init>(java.io.Reader)>($r15);

        r4 = $r16;

     label02:
        $z0 = specialinvoke r0.<com.android.server.AssetAtlasService: boolean checkBuildIdentifier(java.io.BufferedReader,java.lang.String)>(r4, r2);

        if $z0 == 0 goto label36;

        $r19 = new com.android.server.AssetAtlasService$Configuration;

        $r18 = virtualinvoke r4.<java.io.BufferedReader: java.lang.String readLine()>();

        $r20 = staticinvoke <android.graphics.Atlas$Type: android.graphics.Atlas$Type valueOf(java.lang.String)>($r18);

        $i0 = staticinvoke <com.android.server.AssetAtlasService: int readInt(java.io.BufferedReader,int,int)>(r4, 768, 2048);

        $i2 = staticinvoke <com.android.server.AssetAtlasService: int readInt(java.io.BufferedReader,int,int)>(r4, 768, 2048);

        $i1 = staticinvoke <com.android.server.AssetAtlasService: int readInt(java.io.BufferedReader,int,int)>(r4, 0, 2147483647);

        $i3 = staticinvoke <com.android.server.AssetAtlasService: int readInt(java.io.BufferedReader,int,int)>(r4, -2147483648, 2147483647);

        specialinvoke $r19.<com.android.server.AssetAtlasService$Configuration: void <init>(android.graphics.Atlas$Type,int,int,int,int)>($r20, $i0, $i2, $i1, $i3);

        r14 = $r19;

     label03:
        if r4 == null goto label35;

     label04:
        virtualinvoke r4.<java.io.BufferedReader: void close()>();

     label05:
        return r14;

     label06:
        $r35 := @caughtexception;

        return r14;

     label07:
        $r21 := @caughtexception;

        r5 = $r21;

     label08:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid parameter value in ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Atlas", $r23, r5);

     label09:
        if r3 == null goto label34;

     label10:
        virtualinvoke r3.<java.io.BufferedReader: void close()>();

     label11:
        return null;

     label12:
        $r36 := @caughtexception;

        return null;

     label13:
        $r27 := @caughtexception;

        r9 = $r27;

     label14:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not read ");

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Atlas", $r31, r9);

     label15:
        if r3 == null goto label34;

     label16:
        virtualinvoke r3.<java.io.BufferedReader: void close()>();

     label17:
        return null;

     label18:
        $r40 := @caughtexception;

        return null;

     label19:
        $r29 := @caughtexception;

        r11 = $r29;

     label20:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not read ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Atlas", $r37, r11);

     label21:
        if r3 == null goto label34;

     label22:
        virtualinvoke r3.<java.io.BufferedReader: void close()>();

     label23:
        return null;

     label24:
        $r45 := @caughtexception;

        return null;

     label25:
        $r44 := @caughtexception;

        r6 = $r44;

     label26:
        if r3 == null goto label28;

     label27:
        virtualinvoke r3.<java.io.BufferedReader: void close()>();

     label28:
        throw r6;

     label29:
        $r38 := @caughtexception;

        goto label28;

     label30:
        $r43 := @caughtexception;

        r6 = $r43;

        r3 = r4;

        goto label26;

     label31:
        $r42 := @caughtexception;

        r11 = $r42;

        r3 = r4;

        goto label20;

     label32:
        $r41 := @caughtexception;

        r9 = $r41;

        r3 = r4;

        goto label14;

     label33:
        $r39 := @caughtexception;

        r5 = $r39;

        r3 = r4;

        goto label08;

     label34:
        return null;

     label35:
        return r14;

     label36:
        r14 = null;

        goto label03;

        catch java.lang.IllegalArgumentException from label01 to label02 with label07;
        catch java.io.FileNotFoundException from label01 to label02 with label13;
        catch java.io.IOException from label01 to label02 with label19;
        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.IllegalArgumentException from label02 to label03 with label33;
        catch java.io.FileNotFoundException from label02 to label03 with label32;
        catch java.io.IOException from label02 to label03 with label31;
        catch java.lang.Throwable from label02 to label03 with label30;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label25;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label20 to label21 with label25;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.io.IOException from label27 to label28 with label29;
    }

    private static int readInt(java.io.BufferedReader, int, int) throws java.io.IOException
    {
        java.io.BufferedReader r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String $r1;

        r0 := @parameter0: java.io.BufferedReader;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i2);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i3);

        return $i4;
    }

    private void writeConfiguration(com.android.server.AssetAtlasService$Configuration, java.io.File, java.lang.String)
    {
        com.android.server.AssetAtlasService r0;
        com.android.server.AssetAtlasService$Configuration r1;
        java.io.File r2;
        java.lang.String r3, $r17, $r18, $r19, $r20, $r21, $r23, $r31, $r37;
        java.io.BufferedWriter r4, r5, $r13;
        java.io.FileNotFoundException r6, $r24, $r35;
        java.lang.Throwable r7, $r22, $r29;
        java.io.IOException r10, $r25, $r30, $r36, $r38, $r39, $r40;
        java.io.FileOutputStream $r14;
        java.io.OutputStreamWriter $r15;
        android.graphics.Atlas$Type $r16;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r26, $r27, $r28, $r32, $r33, $r34;

        r0 := @this: com.android.server.AssetAtlasService;

        r1 := @parameter0: com.android.server.AssetAtlasService$Configuration;

        r2 := @parameter1: java.io.File;

        r3 := @parameter2: java.lang.String;

        r4 = null;

     label01:
        $r13 = new java.io.BufferedWriter;

        $r15 = new java.io.OutputStreamWriter;

        $r14 = new java.io.FileOutputStream;

        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r15.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r14);

        specialinvoke $r13.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r15);

        r5 = $r13;

     label02:
        $r17 = specialinvoke r0.<com.android.server.AssetAtlasService: java.lang.String getBuildIdentifier(java.lang.String)>(r3);

        virtualinvoke r5.<java.io.BufferedWriter: void write(java.lang.String)>($r17);

        virtualinvoke r5.<java.io.BufferedWriter: void newLine()>();

        $r16 = r1.<com.android.server.AssetAtlasService$Configuration: android.graphics.Atlas$Type type>;

        $r18 = virtualinvoke $r16.<android.graphics.Atlas$Type: java.lang.String toString()>();

        virtualinvoke r5.<java.io.BufferedWriter: void write(java.lang.String)>($r18);

        virtualinvoke r5.<java.io.BufferedWriter: void newLine()>();

        $i0 = r1.<com.android.server.AssetAtlasService$Configuration: int width>;

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        virtualinvoke r5.<java.io.BufferedWriter: void write(java.lang.String)>($r19);

        virtualinvoke r5.<java.io.BufferedWriter: void newLine()>();

        $i1 = r1.<com.android.server.AssetAtlasService$Configuration: int height>;

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        virtualinvoke r5.<java.io.BufferedWriter: void write(java.lang.String)>($r20);

        virtualinvoke r5.<java.io.BufferedWriter: void newLine()>();

        $i2 = r1.<com.android.server.AssetAtlasService$Configuration: int count>;

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        virtualinvoke r5.<java.io.BufferedWriter: void write(java.lang.String)>($r21);

        virtualinvoke r5.<java.io.BufferedWriter: void newLine()>();

        $i3 = r1.<com.android.server.AssetAtlasService$Configuration: int flags>;

        $r23 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);

        virtualinvoke r5.<java.io.BufferedWriter: void write(java.lang.String)>($r23);

        virtualinvoke r5.<java.io.BufferedWriter: void newLine()>();

     label03:
        if r5 == null goto label27;

     label04:
        virtualinvoke r5.<java.io.BufferedWriter: void close()>();

     label05:
        return;

     label06:
        $r38 := @caughtexception;

        return;

     label07:
        $r24 := @caughtexception;

        r6 = $r24;

     label08:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not write ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Atlas", $r31, r6);

     label09:
        if r4 == null goto label05;

     label10:
        virtualinvoke r4.<java.io.BufferedWriter: void close()>();

     label11:
        return;

     label12:
        $r25 := @caughtexception;

        return;

     label13:
        $r40 := @caughtexception;

        r10 = $r40;

     label14:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not write ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Atlas", $r37, r10);

     label15:
        if r4 == null goto label05;

     label16:
        virtualinvoke r4.<java.io.BufferedWriter: void close()>();

     label17:
        return;

     label18:
        $r36 := @caughtexception;

        return;

     label19:
        $r22 := @caughtexception;

        r7 = $r22;

     label20:
        if r4 == null goto label22;

     label21:
        virtualinvoke r4.<java.io.BufferedWriter: void close()>();

     label22:
        throw r7;

     label23:
        $r39 := @caughtexception;

        goto label22;

     label24:
        $r29 := @caughtexception;

        r7 = $r29;

        r4 = r5;

        goto label20;

     label25:
        $r30 := @caughtexception;

        r10 = $r30;

        r4 = r5;

        goto label14;

     label26:
        $r35 := @caughtexception;

        r6 = $r35;

        r4 = r5;

        goto label08;

     label27:
        return;

        catch java.io.FileNotFoundException from label01 to label02 with label07;
        catch java.io.IOException from label01 to label02 with label13;
        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.io.FileNotFoundException from label02 to label03 with label26;
        catch java.io.IOException from label02 to label03 with label25;
        catch java.lang.Throwable from label02 to label03 with label24;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.io.IOException from label21 to label22 with label23;
    }

    public android.view.GraphicBuffer getBuffer() throws android.os.RemoteException
    {
        com.android.server.AssetAtlasService r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        android.view.GraphicBuffer $r2;

        r0 := @this: com.android.server.AssetAtlasService;

        $r1 = r0.<com.android.server.AssetAtlasService: java.util.concurrent.atomic.AtomicBoolean mAtlasReady>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.AssetAtlasService: android.view.GraphicBuffer mBuffer>;

        return $r2;

     label1:
        return null;
    }

    public int[] getMap() throws android.os.RemoteException
    {
        com.android.server.AssetAtlasService r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        int[] $r2;

        r0 := @this: com.android.server.AssetAtlasService;

        $r1 = r0.<com.android.server.AssetAtlasService: java.util.concurrent.atomic.AtomicBoolean mAtlasReady>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.AssetAtlasService: int[] mAtlasMap>;

        return $r2;

     label1:
        return null;
    }

    public boolean isCompatible(int)
    {
        com.android.server.AssetAtlasService r0;
        int i0, $i1;

        r0 := @this: com.android.server.AssetAtlasService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Process: int myPpid()>();

        if i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void systemRunning()
    {
        com.android.server.AssetAtlasService r0;

        r0 := @this: com.android.server.AssetAtlasService;

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.AssetAtlasService: int STEP> = 64;

        <com.android.server.AssetAtlasService: float PACKING_THRESHOLD> = 0.8F;

        <com.android.server.AssetAtlasService: int MIN_SIZE> = 768;

        <com.android.server.AssetAtlasService: int MAX_SIZE> = 2048;

        <com.android.server.AssetAtlasService: java.lang.String LOG_TAG> = "Atlas";

        <com.android.server.AssetAtlasService: int GRAPHIC_BUFFER_USAGE> = 256;

        <com.android.server.AssetAtlasService: boolean DEBUG_ATLAS_TEXTURE> = 0;

        <com.android.server.AssetAtlasService: boolean DEBUG_ATLAS> = 1;

        <com.android.server.AssetAtlasService: int ATLAS_MAP_ENTRY_FIELD_COUNT> = 4;

        <com.android.server.AssetAtlasService: java.lang.String ASSET_ATLAS_SERVICE> = "assetatlas";

        return;
    }
}
