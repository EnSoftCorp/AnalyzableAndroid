public class com.android.server.net.NetworkPolicyManagerService extends android.net.INetworkPolicyManager$Stub
{
    private static final java.lang.String ACTION_ALLOW_BACKGROUND;
    private static final java.lang.String ACTION_SNOOZE_WARNING;
    private static final java.lang.String ATTR_APP_ID;
    private static final java.lang.String ATTR_CYCLE_DAY;
    private static final java.lang.String ATTR_CYCLE_TIMEZONE;
    private static final java.lang.String ATTR_INFERRED;
    private static final java.lang.String ATTR_LAST_LIMIT_SNOOZE;
    private static final java.lang.String ATTR_LAST_SNOOZE;
    private static final java.lang.String ATTR_LAST_WARNING_SNOOZE;
    private static final java.lang.String ATTR_LIMIT_BYTES;
    private static final java.lang.String ATTR_METERED;
    private static final java.lang.String ATTR_NETWORK_ID;
    private static final java.lang.String ATTR_NETWORK_TEMPLATE;
    private static final java.lang.String ATTR_POLICY;
    private static final java.lang.String ATTR_RESTRICT_BACKGROUND;
    private static final java.lang.String ATTR_SUBSCRIBER_ID;
    private static final java.lang.String ATTR_UID;
    private static final java.lang.String ATTR_VERSION;
    private static final java.lang.String ATTR_WARNING_BYTES;
    private static final boolean LOGD;
    private static final boolean LOGV;
    private static final int MSG_ADVISE_PERSIST_THRESHOLD;
    private static final int MSG_FOREGROUND_ACTIVITIES_CHANGED;
    private static final int MSG_LIMIT_REACHED;
    private static final int MSG_METERED_IFACES_CHANGED;
    private static final int MSG_PROCESS_DIED;
    private static final int MSG_RESTRICT_BACKGROUND_CHANGED;
    private static final int MSG_RULES_CHANGED;
    private static final int MSG_SCREEN_ON_CHANGED;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_ALLOW_BACKGROUND;
    private static final java.lang.String TAG_APP_POLICY;
    private static final java.lang.String TAG_NETWORK_POLICY;
    private static final java.lang.String TAG_POLICY_LIST;
    private static final java.lang.String TAG_UID_POLICY;
    private static final long TIME_CACHE_MAX_AGE;
    public static final int TYPE_LIMIT;
    public static final int TYPE_LIMIT_SNOOZED;
    public static final int TYPE_WARNING;
    private static final int VERSION_ADDED_INFERRED;
    private static final int VERSION_ADDED_METERED;
    private static final int VERSION_ADDED_NETWORK_ID;
    private static final int VERSION_ADDED_RESTRICT_BACKGROUND;
    private static final int VERSION_ADDED_SNOOZE;
    private static final int VERSION_ADDED_TIMEZONE;
    private static final int VERSION_INIT;
    private static final int VERSION_LATEST;
    private static final int VERSION_SPLIT_SNOOZE;
    private static final int VERSION_SWITCH_APP_ID;
    private static final int VERSION_SWITCH_UID;
    private java.util.HashSet mActiveNotifs;
    private final android.app.IActivityManager mActivityManager;
    private android.net.INetworkManagementEventObserver mAlertObserver;
    private android.content.BroadcastReceiver mAllowReceiver;
    private android.net.IConnectivityManager mConnManager;
    private android.content.BroadcastReceiver mConnReceiver;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;
    private android.os.Handler$Callback mHandlerCallback;
    private final android.os.RemoteCallbackList mListeners;
    private java.util.HashSet mMeteredIfaces;
    private final android.os.INetworkManagementService mNetworkManager;
    private java.util.HashMap mNetworkPolicy;
    private java.util.HashMap mNetworkRules;
    private final android.net.INetworkStatsService mNetworkStats;
    private android.app.INotificationManager mNotifManager;
    private java.util.HashSet mOverLimitNotified;
    private android.content.BroadcastReceiver mPackageReceiver;
    private final android.util.AtomicFile mPolicyFile;
    private final android.os.IPowerManager mPowerManager;
    private android.app.IProcessObserver mProcessObserver;
    private volatile boolean mRestrictBackground;
    private final java.lang.Object mRulesLock;
    private volatile boolean mScreenOn;
    private android.content.BroadcastReceiver mScreenReceiver;
    private android.content.BroadcastReceiver mSnoozeWarningReceiver;
    private android.content.BroadcastReceiver mStatsReceiver;
    private final boolean mSuppressDefaultPolicy;
    private final android.util.TrustedTime mTime;
    private android.util.SparseBooleanArray mUidForeground;
    private android.util.SparseArray mUidPidForeground;
    private android.util.SparseIntArray mUidPolicy;
    private android.content.BroadcastReceiver mUidRemovedReceiver;
    private android.util.SparseIntArray mUidRules;
    private android.content.BroadcastReceiver mUserReceiver;
    private android.content.BroadcastReceiver mWifiConfigReceiver;
    private android.content.BroadcastReceiver mWifiStateReceiver;

    public void <init>(android.content.Context, android.app.IActivityManager, android.os.IPowerManager, android.net.INetworkStatsService, android.os.INetworkManagementService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context r1;
        android.app.IActivityManager r2;
        android.os.IPowerManager r3;
        android.net.INetworkStatsService r4;
        android.os.INetworkManagementService r5;
        android.util.NtpTrustedTime $r6;
        java.io.File $r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.app.IActivityManager;

        r3 := @parameter2: android.os.IPowerManager;

        r4 := @parameter3: android.net.INetworkStatsService;

        r5 := @parameter4: android.os.INetworkManagementService;

        $r6 = staticinvoke <android.util.NtpTrustedTime: android.util.NtpTrustedTime getInstance(android.content.Context)>(r1);

        $r7 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: java.io.File getSystemDir()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void <init>(android.content.Context,android.app.IActivityManager,android.os.IPowerManager,android.net.INetworkStatsService,android.os.INetworkManagementService,android.util.TrustedTime,java.io.File,boolean)>(r1, r2, r3, r4, r5, $r6, $r7, 0);

        return;
    }

    public void <init>(android.content.Context, android.app.IActivityManager, android.os.IPowerManager, android.net.INetworkStatsService, android.os.INetworkManagementService, android.util.TrustedTime, java.io.File, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context r1, $r32;
        android.app.IActivityManager r2, $r38;
        android.os.IPowerManager r3, $r36;
        android.net.INetworkStatsService r4, $r42;
        android.os.INetworkManagementService r5, $r40;
        android.util.TrustedTime r6, $r46;
        java.io.File r7, r72;
        boolean z0;
        android.os.HandlerThread r8, r70;
        java.util.HashMap $r10, $r11;
        java.util.HashSet $r14, $r15, $r16;
        java.lang.Object $r31, $r35, $r37, $r39, $r41, $r45, r51;
        android.os.Handler$Callback $r49, r76;
        android.os.Looper $r50;
        android.util.SparseIntArray r52, r53;
        android.util.SparseBooleanArray r54;
        android.util.SparseArray r55;
        android.os.RemoteCallbackList r56;
        com.android.server.net.NetworkPolicyManagerService$1 r57;
        com.android.server.net.NetworkPolicyManagerService$2 r58;
        com.android.server.net.NetworkPolicyManagerService$3 r59;
        com.android.server.net.NetworkPolicyManagerService$4 r60;
        com.android.server.net.NetworkPolicyManagerService$5 r61;
        com.android.server.net.NetworkPolicyManagerService$6 r62;
        com.android.server.net.NetworkPolicyManagerService$7 r63;
        com.android.server.net.NetworkPolicyManagerService$8 r64;
        com.android.server.net.NetworkPolicyManagerService$9 r65;
        com.android.server.net.NetworkPolicyManagerService$10 r66;
        com.android.server.net.NetworkPolicyManagerService$11 r67;
        com.android.server.net.NetworkPolicyManagerService$12 r68;
        com.android.server.net.NetworkPolicyManagerService$13 r69;
        android.os.Handler r71;
        android.util.AtomicFile r73;
        android.app.IProcessObserver r74;
        android.net.INetworkManagementEventObserver r75;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.app.IActivityManager;

        r3 := @parameter2: android.os.IPowerManager;

        r4 := @parameter3: android.net.INetworkStatsService;

        r5 := @parameter4: android.os.INetworkManagementService;

        r6 := @parameter5: android.util.TrustedTime;

        r7 := @parameter6: java.io.File;

        z0 := @parameter7: boolean;

        specialinvoke r0.<android.net.INetworkPolicyManager$Stub: void <init>()>();

        r51 = new java.lang.Object;

        specialinvoke r51.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock> = r51;

        $r10 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy> = $r10;

        $r11 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkRules> = $r11;

        r52 = new android.util.SparseIntArray;

        specialinvoke r52.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy> = r52;

        r53 = new android.util.SparseIntArray;

        specialinvoke r53.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules> = r53;

        $r14 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mMeteredIfaces> = $r14;

        $r16 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mOverLimitNotified> = $r16;

        $r15 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mActiveNotifs> = $r15;

        r54 = new android.util.SparseBooleanArray;

        specialinvoke r54.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mUidForeground> = r54;

        r55 = new android.util.SparseArray;

        specialinvoke r55.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mUidPidForeground> = r55;

        r56 = new android.os.RemoteCallbackList;

        specialinvoke r56.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners> = r56;

        r57 = new com.android.server.net.NetworkPolicyManagerService$1;

        specialinvoke r57.<com.android.server.net.NetworkPolicyManagerService$1: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r74 = (android.app.IProcessObserver) r57;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IProcessObserver mProcessObserver> = r74;

        r58 = new com.android.server.net.NetworkPolicyManagerService$2;

        specialinvoke r58.<com.android.server.net.NetworkPolicyManagerService$2: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mScreenReceiver> = r58;

        r59 = new com.android.server.net.NetworkPolicyManagerService$3;

        specialinvoke r59.<com.android.server.net.NetworkPolicyManagerService$3: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mPackageReceiver> = r59;

        r60 = new com.android.server.net.NetworkPolicyManagerService$4;

        specialinvoke r60.<com.android.server.net.NetworkPolicyManagerService$4: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUidRemovedReceiver> = r60;

        r61 = new com.android.server.net.NetworkPolicyManagerService$5;

        specialinvoke r61.<com.android.server.net.NetworkPolicyManagerService$5: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUserReceiver> = r61;

        r62 = new com.android.server.net.NetworkPolicyManagerService$6;

        specialinvoke r62.<com.android.server.net.NetworkPolicyManagerService$6: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mStatsReceiver> = r62;

        r63 = new com.android.server.net.NetworkPolicyManagerService$7;

        specialinvoke r63.<com.android.server.net.NetworkPolicyManagerService$7: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mAllowReceiver> = r63;

        r64 = new com.android.server.net.NetworkPolicyManagerService$8;

        specialinvoke r64.<com.android.server.net.NetworkPolicyManagerService$8: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mSnoozeWarningReceiver> = r64;

        r65 = new com.android.server.net.NetworkPolicyManagerService$9;

        specialinvoke r65.<com.android.server.net.NetworkPolicyManagerService$9: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mWifiConfigReceiver> = r65;

        r66 = new com.android.server.net.NetworkPolicyManagerService$10;

        specialinvoke r66.<com.android.server.net.NetworkPolicyManagerService$10: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mWifiStateReceiver> = r66;

        r67 = new com.android.server.net.NetworkPolicyManagerService$11;

        specialinvoke r67.<com.android.server.net.NetworkPolicyManagerService$11: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r75 = (android.net.INetworkManagementEventObserver) r67;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkManagementEventObserver mAlertObserver> = r75;

        r68 = new com.android.server.net.NetworkPolicyManagerService$12;

        specialinvoke r68.<com.android.server.net.NetworkPolicyManagerService$12: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mConnReceiver> = r68;

        r69 = new com.android.server.net.NetworkPolicyManagerService$13;

        specialinvoke r69.<com.android.server.net.NetworkPolicyManagerService$13: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r76 = (android.os.Handler$Callback) r69;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler$Callback mHandlerCallback> = r76;

        $r31 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing context");

        $r32 = (android.content.Context) $r31;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext> = $r32;

        $r37 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "missing activityManager");

        $r38 = (android.app.IActivityManager) $r37;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IActivityManager mActivityManager> = $r38;

        $r35 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "missing powerManager");

        $r36 = (android.os.IPowerManager) $r35;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.IPowerManager mPowerManager> = $r36;

        $r41 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "missing networkStats");

        $r42 = (android.net.INetworkStatsService) $r41;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkStatsService mNetworkStats> = $r42;

        $r39 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "missing networkManagement");

        $r40 = (android.os.INetworkManagementService) $r39;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager> = $r40;

        $r45 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "missing TrustedTime");

        $r46 = (android.util.TrustedTime) $r45;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.TrustedTime mTime> = $r46;

        r70 = new android.os.HandlerThread;

        specialinvoke r70.<android.os.HandlerThread: void <init>(java.lang.String)>("NetworkPolicy");

        r8 = r70;

        virtualinvoke r8.<android.os.HandlerThread: void start()>();

        r71 = new android.os.Handler;

        $r50 = virtualinvoke r8.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r49 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler$Callback mHandlerCallback>;

        specialinvoke r71.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($r50, $r49);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler> = r71;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mSuppressDefaultPolicy> = z0;

        r73 = new android.util.AtomicFile;

        r72 = new java.io.File;

        specialinvoke r72.<java.io.File: void <init>(java.io.File,java.lang.String)>(r7, "netpolicy.xml");

        specialinvoke r73.<android.util.AtomicFile: void <init>(java.io.File)>(r72);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile> = r73;

        return;
    }

    static android.os.Handler access$000(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        return $r1;
    }

    static java.lang.Object access$100(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        return $r1;
    }

    static void access$1000(com.android.server.net.NetworkPolicyManagerService, android.net.NetworkTemplate, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: android.net.NetworkTemplate;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void performSnooze(android.net.NetworkTemplate,int)>(r1, i0);

        return;
    }

    static java.util.HashMap access$1100(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        return $r1;
    }

    static void access$1200(com.android.server.net.NetworkPolicyManagerService, android.net.NetworkPolicy)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: android.net.NetworkPolicy;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyLocked(android.net.NetworkPolicy)>(r1);

        return;
    }

    static void access$1300(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()>();

        return;
    }

    static android.content.Context access$1400(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        return $r1;
    }

    static void access$1500(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void ensureActiveMobilePolicyLocked()>();

        return;
    }

    static android.os.RemoteCallbackList access$1600(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.os.RemoteCallbackList $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners>;

        return $r1;
    }

    static android.util.SparseArray access$1700(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mUidPidForeground>;

        return $r1;
    }

    static void access$1800(com.android.server.net.NetworkPolicyManagerService, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void computeUidForegroundLocked(int)>(i0);

        return;
    }

    static java.util.HashSet access$1900(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.HashSet $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mMeteredIfaces>;

        return $r1;
    }

    static void access$200(com.android.server.net.NetworkPolicyManagerService, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(i0);

        return;
    }

    static android.net.INetworkStatsService access$2000(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkStatsService $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkStatsService mNetworkStats>;

        return $r1;
    }

    static void access$2100(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateScreenOn()>();

        return;
    }

    static android.util.SparseIntArray access$300(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseIntArray $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        return $r1;
    }

    static void access$400(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

        return;
    }

    static void access$500(com.android.server.net.NetworkPolicyManagerService, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void removePoliciesForUserLocked(int)>(i0);

        return;
    }

    static void access$600(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForRestrictBackgroundLocked()>();

        return;
    }

    static void access$700(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void maybeRefreshTrustedTime()>();

        return;
    }

    static void access$800(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledLocked()>();

        return;
    }

    static void access$900(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

        return;
    }

    private void addNetworkPolicyLocked(android.net.NetworkPolicy)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy r1;
        android.net.NetworkTemplate $r2;
        java.util.HashMap $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkPolicy;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r2 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

        return;
    }

    private static android.content.Intent buildAllowBackgroundDataIntent()
    {
        android.content.Intent $r0;

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.net.action.ALLOW_BACKGROUND");

        return $r0;
    }

    private static android.content.Intent buildNetworkOverLimitIntent(android.net.NetworkTemplate)
    {
        android.net.NetworkTemplate r0;
        android.content.Intent r1, $r2;
        android.content.ComponentName $r3;

        r0 := @parameter0: android.net.NetworkTemplate;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = $r2;

        $r3 = new android.content.ComponentName;

        specialinvoke $r3.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.net.NetworkOverLimitActivity");

        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r3);

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.NETWORK_TEMPLATE", r0);

        return r1;
    }

    private java.lang.String buildNotificationTag(android.net.NetworkPolicy, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy r1;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;
        android.net.NetworkTemplate $r4;
        java.lang.String $r8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkPolicy;

        i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetworkPolicy:");

        $r4 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $i1 = virtualinvoke $r4.<android.net.NetworkTemplate: int hashCode()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private static android.content.Intent buildSnoozeWarningIntent(android.net.NetworkTemplate)
    {
        android.net.NetworkTemplate r0;
        android.content.Intent r1, $r2;

        r0 := @parameter0: android.net.NetworkTemplate;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.net.action.SNOOZE_WARNING");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.NETWORK_TEMPLATE", r0);

        return r1;
    }

    private static android.content.Intent buildViewDataUsageIntent(android.net.NetworkTemplate)
    {
        android.net.NetworkTemplate r0;
        android.content.Intent r1, $r2;
        android.content.ComponentName $r3;

        r0 := @parameter0: android.net.NetworkTemplate;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = $r2;

        $r3 = new android.content.ComponentName;

        specialinvoke $r3.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.settings", "com.android.settings.Settings$DataUsageSummaryActivity");

        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r3);

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.NETWORK_TEMPLATE", r0);

        return r1;
    }

    private void cancelNotification(java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1, r3;
        android.content.Context $r4;
        android.app.INotificationManager $r5;
        android.os.RemoteException $r6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r3 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.INotificationManager mNotifManager>;

        interfaceinvoke $r5.<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,int,int)>(r3, r1, 0, 0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static void collectKeys(android.util.SparseBooleanArray, android.util.SparseBooleanArray)
    {
        android.util.SparseBooleanArray r0, r1;
        int i0, i1, $i2;

        r0 := @parameter0: android.util.SparseBooleanArray;

        r1 := @parameter1: android.util.SparseBooleanArray;

        i0 = virtualinvoke r0.<android.util.SparseBooleanArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $i2 = virtualinvoke r0.<android.util.SparseBooleanArray: int keyAt(int)>(i1);

        virtualinvoke r1.<android.util.SparseBooleanArray: void put(int,boolean)>($i2, 1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void collectKeys(android.util.SparseIntArray, android.util.SparseBooleanArray)
    {
        android.util.SparseIntArray r0;
        android.util.SparseBooleanArray r1;
        int i0, i1, $i2;

        r0 := @parameter0: android.util.SparseIntArray;

        r1 := @parameter1: android.util.SparseBooleanArray;

        i0 = virtualinvoke r0.<android.util.SparseIntArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $i2 = virtualinvoke r0.<android.util.SparseIntArray: int keyAt(int)>(i1);

        virtualinvoke r1.<android.util.SparseBooleanArray: void put(int,boolean)>($i2, 1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void computeUidForegroundLocked(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2;
        android.util.SparseBooleanArray r1, $r4, $r5;
        boolean z0, $z1, $z2;
        android.util.SparseArray $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mUidPidForeground>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.util.SparseBooleanArray) $r3;

        i1 = virtualinvoke r1.<android.util.SparseBooleanArray: int size()>();

        i2 = 0;

     label1:
        z0 = 0;

        if i2 >= i1 goto label2;

        $z2 = virtualinvoke r1.<android.util.SparseBooleanArray: boolean valueAt(int)>(i2);

        if $z2 == 0 goto label4;

        z0 = 1;

     label2:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mUidForeground>;

        $z1 = virtualinvoke $r4.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i0, 0);

        if $z1 == z0 goto label3;

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mUidForeground>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, z0);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(i0);

     label3:
        return;

     label4:
        i2 = i2 + 1;

        goto label1;
    }

    private long currentTimeMillis()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.TrustedTime $r1, $r2;
        boolean $z0;
        long $l0, $l1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.TrustedTime mTime>;

        $z0 = interfaceinvoke $r1.<android.util.TrustedTime: boolean hasCache()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.TrustedTime mTime>;

        $l1 = interfaceinvoke $r2.<android.util.TrustedTime: long currentTimeMillis()>();

        return $l1;

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;
    }

    private static void dumpSparseBooleanArray(java.io.PrintWriter, android.util.SparseBooleanArray)
    {
        java.io.PrintWriter r0;
        android.util.SparseBooleanArray r1;
        int i0, i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        boolean $z0;
        java.lang.String $r6;

        r0 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: android.util.SparseBooleanArray;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("[");

        i0 = virtualinvoke r1.<android.util.SparseBooleanArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i2 = virtualinvoke r1.<android.util.SparseBooleanArray: int keyAt(int)>(i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $z0 = virtualinvoke r1.<android.util.SparseBooleanArray: boolean valueAt(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        $i3 = i0 - 1;

        if i1 >= $i3 goto label2;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(",");

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("]");

        return;
    }

    private void enqueueNotification(android.net.NetworkPolicy, int, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy r1;
        int i0, $i4, $i5;
        long l1, l2, $l3;
        java.lang.String r2, r6, r9, r16, $r30;
        android.app.Notification$Builder r3, $r21;
        android.content.res.Resources r4;
        java.lang.Object[] r5;
        java.lang.CharSequence r7, r12, r13, r14;
        android.content.Intent r8, r15, r17, r18;
        int[] r11;
        android.content.Context $r19, $r22, $r23, $r27, $r37, $r47, $r57, $r60;
        android.app.Notification $r25;
        android.app.INotificationManager $r26;
        java.util.HashSet $r28;
        android.net.NetworkTemplate $r29, $r33, $r42, $r44, $r50, $r59;
        android.app.PendingIntent $r38, $r49, $r55, $r61;
        android.os.RemoteException $r62;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkPolicy;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.String buildNotificationTag(android.net.NetworkPolicy,int)>(r1, i0);

        $r21 = new android.app.Notification$Builder;

        $r19 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        specialinvoke $r21.<android.app.Notification$Builder: void <init>(android.content.Context)>($r19);

        r3 = $r21;

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)>(1);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>(0L);

        $r23 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r4 = virtualinvoke $r23.<android.content.Context: android.content.res.Resources getResources()>();

        tableswitch(i0)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label11;
            default: goto label01;
        };

     label01:
        $r22 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r9 = virtualinvoke $r22.<android.content.Context: java.lang.String getPackageName()>();

        r11 = newarray (int)[1];

        $r26 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.INotificationManager mNotifManager>;

        $r25 = virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification getNotification()>();

        interfaceinvoke $r26.<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int[],int)>(r9, r9, r2, 0, $r25, r11, 0);

        $r28 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mActiveNotifs>;

        virtualinvoke $r28.<java.util.HashSet: boolean add(java.lang.Object)>(r2);

     label02:
        return;

     label03:
        r14 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040667);

        r16 = virtualinvoke r4.<android.content.res.Resources: java.lang.String getString(int)>(17040668);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301624);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r14);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r14);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r16);

        $r50 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r18 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildSnoozeWarningIntent(android.net.NetworkTemplate)>($r50);

        $r60 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r61 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r60, 0, r18, 134217728);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)>($r61);

        $r59 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r17 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildViewDataUsageIntent(android.net.NetworkTemplate)>($r59);

        $r57 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r55 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r57, 0, r17, 134217728);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r55);

        goto label01;

     label04:
        r13 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040673);

        $r44 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $i5 = virtualinvoke $r44.<android.net.NetworkTemplate: int getMatchRule()>();

        tableswitch($i5)
        {
            case 1: goto label09;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label10;
            default: goto label05;
        };

     label05:
        r12 = null;

     label06:
        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17302916);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r12);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r12);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r13);

        $r42 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r15 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildNetworkOverLimitIntent(android.net.NetworkTemplate)>($r42);

        $r47 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r49 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r47, 0, r15, 134217728);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r49);

        goto label01;

     label07:
        r12 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040669);

        goto label06;

     label08:
        r12 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040670);

        goto label06;

     label09:
        r12 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040671);

        goto label06;

     label10:
        r12 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040672);

        goto label06;

     label11:
        $l3 = r1.<android.net.NetworkPolicy: long limitBytes>;

        l2 = l1 - $l3;

        r5 = newarray (java.lang.Object)[1];

        $r27 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r30 = staticinvoke <android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>($r27, l2);

        r5[0] = $r30;

        r6 = virtualinvoke r4.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040678, r5);

        $r29 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $i4 = virtualinvoke $r29.<android.net.NetworkTemplate: int getMatchRule()>();

        tableswitch($i4)
        {
            case 1: goto label16;
            case 2: goto label14;
            case 3: goto label15;
            case 4: goto label17;
            default: goto label12;
        };

     label12:
        r7 = null;

     label13:
        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301624);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r7);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r7);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r6);

        $r33 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r8 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildViewDataUsageIntent(android.net.NetworkTemplate)>($r33);

        $r37 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r38 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r37, 0, r8, 134217728);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r38);

        goto label01;

     label14:
        r7 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040674);

        goto label13;

     label15:
        r7 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040675);

        goto label13;

     label16:
        r7 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040676);

        goto label13;

     label17:
        r7 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040677);

        goto label13;

     label18:
        $r62 := @caughtexception;

        return;

        catch android.os.RemoteException from label01 to label02 with label18;
    }

    private void enqueueRestrictedNotification(java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1, r5, r8;
        android.content.res.Resources r2;
        android.app.Notification$Builder r3, $r11;
        java.lang.CharSequence r4;
        android.content.Intent r6;
        android.content.Context $r9, $r12, $r20, $r23;
        int[] r10;
        android.app.PendingIntent $r19;
        android.app.INotificationManager $r21;
        java.util.HashSet $r24;
        android.app.Notification $r25;
        android.os.RemoteException $r26;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r2 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

        $r11 = new android.app.Notification$Builder;

        $r12 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        specialinvoke $r11.<android.app.Notification$Builder: void <init>(android.content.Context)>($r12);

        r3 = $r11;

        r4 = virtualinvoke r2.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040679);

        r5 = virtualinvoke r2.<android.content.res.Resources: java.lang.String getString(int)>(17040680);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)>(1);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301624);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r4);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r4);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r5);

        r6 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildAllowBackgroundDataIntent()>();

        $r20 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r19 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r20, 0, r6, 134217728);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r19);

     label1:
        $r23 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r8 = virtualinvoke $r23.<android.content.Context: java.lang.String getPackageName()>();

        r10 = newarray (int)[1];

        $r21 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.INotificationManager mNotifManager>;

        $r25 = virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification getNotification()>();

        interfaceinvoke $r21.<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int[],int)>(r8, r8, r1, 0, $r25, r10, 0);

        $r24 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mActiveNotifs>;

        virtualinvoke $r24.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

     label2:
        return;

     label3:
        $r26 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void ensureActiveMobilePolicyLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.telephony.TelephonyManager r1;
        java.lang.String r2, r6;
        android.net.NetworkIdentity r3, $r8;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r4;
        long l0, $l4;
        android.text.format.Time r5, $r14;
        int i1, $i2, $i5;
        android.content.Context $r7, $r11;
        java.util.Collection $r9;
        java.util.HashMap $r10;
        android.content.res.Resources $r12;
        android.net.NetworkPolicy $r13, $r17;
        java.lang.Object $r15;
        android.net.NetworkTemplate $r16, $r18;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $z1 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mSuppressDefaultPolicy>;

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r1 = staticinvoke <android.telephony.TelephonyManager: android.telephony.TelephonyManager 'from'(android.content.Context)>($r7);

        $i2 = virtualinvoke r1.<android.telephony.TelephonyManager: int getSimState()>();

        if $i2 != 5 goto label1;

        r2 = virtualinvoke r1.<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>();

        $r8 = new android.net.NetworkIdentity;

        specialinvoke $r8.<android.net.NetworkIdentity: void <init>(int,int,java.lang.String,java.lang.String,boolean)>(0, 0, r2, null, 0);

        r3 = $r8;

        z0 = 0;

        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r9 = virtualinvoke $r10.<java.util.HashMap: java.util.Collection values()>();

        r4 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (android.net.NetworkPolicy) $r15;

        $r18 = $r17.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $z3 = virtualinvoke $r18.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>(r3);

        if $z3 == 0 goto label3;

        z0 = 1;

        goto label3;

     label4:
        if z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("NetworkPolicy", "no policy for active mobile network; generating default policy");

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: android.content.res.Resources getResources()>();

        $i5 = virtualinvoke $r12.<android.content.res.Resources: int getInteger(int)>(17694785);

        $l4 = (long) $i5;

        l0 = 1048576L * $l4;

        $r14 = new android.text.format.Time;

        specialinvoke $r14.<android.text.format.Time: void <init>()>();

        r5 = $r14;

        virtualinvoke r5.<android.text.format.Time: void setToNow()>();

        i1 = r5.<android.text.format.Time: int monthDay>;

        r6 = r5.<android.text.format.Time: java.lang.String timezone>;

        $r13 = new android.net.NetworkPolicy;

        $r16 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileAll(java.lang.String)>(r2);

        specialinvoke $r13.<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,int,java.lang.String,long,long,long,long,boolean,boolean)>($r16, i1, r6, l0, -1L, -1L, -1L, 1, 1);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyLocked(android.net.NetworkPolicy)>($r13);

        return;
    }

    private android.net.NetworkPolicy findPolicyForNetworkLocked(android.net.NetworkIdentity)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkIdentity r1;
        java.util.Iterator r2;
        android.net.NetworkPolicy r3;
        java.util.HashMap $r4;
        java.util.Collection $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        android.net.NetworkTemplate $r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkIdentity;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.net.NetworkPolicy) $r6;

        $r7 = r3.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $z1 = virtualinvoke $r7.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>(r1);

        if $z1 == 0 goto label1;

        return r3;

     label2:
        return null;
    }

    private android.net.NetworkQuotaInfo getNetworkQuotaInfoUnchecked(android.net.NetworkState)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkState r1;
        android.net.NetworkIdentity r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r8;
        android.net.NetworkPolicy r5;
        long l0, l1, l2, l3, l4, $l6, $l8;
        android.content.Context $r6;
        boolean $z0;
        android.net.NetworkTemplate $r7;
        byte $b5, $b7;
        android.net.NetworkQuotaInfo $r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkState;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r2 = staticinvoke <android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState)>($r6, r1);

        r3 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r3;

     label01:
        r5 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy findPolicyForNetworkLocked(android.net.NetworkIdentity)>(r2);

        exitmonitor r3;

     label02:
        if r5 == null goto label03;

        $z0 = virtualinvoke r5.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z0 != 0 goto label07;

     label03:
        return null;

     label04:
        $r8 := @caughtexception;

        r4 = $r8;

     label05:
        exitmonitor r3;

     label06:
        throw r4;

     label07:
        l0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long currentTimeMillis()>();

        l1 = staticinvoke <android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>(l0, r5);

        $r7 = r5.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        l2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>($r7, l1, l0);

        $l6 = r5.<android.net.NetworkPolicy: long warningBytes>;

        $b5 = $l6 cmp -1L;

        if $b5 == 0 goto label10;

        l3 = r5.<android.net.NetworkPolicy: long warningBytes>;

     label08:
        $l8 = r5.<android.net.NetworkPolicy: long limitBytes>;

        $b7 = $l8 cmp -1L;

        if $b7 == 0 goto label11;

        l4 = r5.<android.net.NetworkPolicy: long limitBytes>;

     label09:
        $r9 = new android.net.NetworkQuotaInfo;

        specialinvoke $r9.<android.net.NetworkQuotaInfo: void <init>(long,long,long)>(l2, l3, l4);

        return $r9;

     label10:
        l3 = -1L;

        goto label08;

     label11:
        l4 = -1L;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
    }

    private static java.io.File getSystemDir()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "system");

        return $r0;
    }

    private long getTotalBytes(android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        long l0, l1, l2;
        java.lang.RuntimeException r3, $r5;
        android.net.INetworkStatsService $r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkStatsService mNetworkStats>;

        l2 = interfaceinvoke $r4.<android.net.INetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>(r1, l0, l1);

     label2:
        return l2;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem reading network stats: ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r9);

        return 0L;

     label4:
        $r10 := @caughtexception;

        return 0L;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private boolean isBandwidthControlEnabled()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0;
        java.lang.Throwable r1, $r5;
        boolean z0, z1;
        android.os.INetworkManagementService $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        z1 = interfaceinvoke $r3.<android.os.INetworkManagementService: boolean isBandwidthControlEnabled()>();

     label2:
        z0 = z1;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label4:
        $r4 := @caughtexception;

        z0 = 0;

        goto label3;

     label5:
        $r5 := @caughtexception;

        r1 = $r5;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
    }

    private boolean isTemplateRelevant(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        android.telephony.TelephonyManager r2;
        android.content.Context $r3;
        int $i0, $i1;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r2 = staticinvoke <android.telephony.TelephonyManager: android.telephony.TelephonyManager 'from'(android.content.Context)>($r3);

        $i0 = virtualinvoke r1.<android.net.NetworkTemplate: int getMatchRule()>();

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        $i1 = virtualinvoke r2.<android.telephony.TelephonyManager: int getSimState()>();

        if $i1 != 5 goto label3;

        $r4 = virtualinvoke r2.<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>();

        $r5 = virtualinvoke r1.<android.net.NetworkTemplate: java.lang.String getSubscriberId()>();

        $z0 = staticinvoke <com.android.internal.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r4, $r5);

        return $z0;

     label3:
        return 0;
    }

    private static boolean isUidValidForRules(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 1013 goto label1;

        if i0 == 1019 goto label1;

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private void maybeRefreshTrustedTime()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.TrustedTime $r1, $r2;
        long $l0;
        byte $b1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.TrustedTime mTime>;

        $l0 = interfaceinvoke $r1.<android.util.TrustedTime: long getCacheAge()>();

        $b1 = $l0 cmp 86400000L;

        if $b1 <= 0 goto label1;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.TrustedTime mTime>;

        interfaceinvoke $r2.<android.util.TrustedTime: boolean forceRefresh()>();

     label1:
        return;
    }

    private void notifyOverLimitLocked(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        java.util.HashSet $r2, $r5;
        boolean $z0;
        android.content.Context $r3;
        android.content.Intent $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mOverLimitNotified>;

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r4 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildNetworkOverLimitIntent(android.net.NetworkTemplate)>(r1);

        virtualinvoke $r3.<android.content.Context: void startActivity(android.content.Intent)>($r4);

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mOverLimitNotified>;

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    private void notifyUnderLimitLocked(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        java.util.HashSet $r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mOverLimitNotified>;

        virtualinvoke $r2.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void performSnooze(android.net.NetworkTemplate, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        int i0;
        long l1;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r12;
        android.net.NetworkPolicy r4;
        java.util.HashMap $r5;
        java.lang.IllegalArgumentException $r7, $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r13;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void maybeRefreshTrustedTime()>();

        l1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long currentTimeMillis()>();

        r2 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r2;

     label01:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (android.net.NetworkPolicy) $r6;

     label02:
        if r4 != null goto label07;

     label03:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to find policy for ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label04:
        $r12 := @caughtexception;

        r3 = $r12;

     label05:
        exitmonitor r2;

     label06:
        throw r3;

     label07:
        tableswitch(i0)
        {
            case 1: goto label09;
            case 2: goto label12;
            default: goto label08;
        };

     label08:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unexpected type");

        throw $r7;

     label09:
        r4.<android.net.NetworkPolicy: long lastWarningSnooze> = l1;

     label10:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

        exitmonitor r2;

     label11:
        return;

     label12:
        r4.<android.net.NetworkPolicy: long lastLimitSnooze> = l1;

     label13:
        goto label10;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
    }

    private void readPolicyLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.io.FileInputStream r1;
        org.xmlpull.v1.XmlPullParserException r2, $r36;
        java.lang.Throwable r3, $r34, r41;
        java.io.IOException r4, $r33;
        org.xmlpull.v1.XmlPullParser r6;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        java.lang.String r7, r8, r9, r10, $r15, $r16, $r17, $r18, $r20, $r25;
        long l9, l10, l11, l12;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.net.NetworkTemplate r11, r37;
        java.util.HashMap $r12, $r31;
        android.util.SparseIntArray $r13;
        android.util.AtomicFile $r14;
        java.lang.StringBuilder $r21, $r22, $r23, $r24, $r27, $r28, r39, r40;
        java.io.FileNotFoundException $r35;
        android.net.NetworkPolicy r38;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r12 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        virtualinvoke $r12.<java.util.HashMap: void clear()>();

        $r13 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        virtualinvoke $r13.<android.util.SparseIntArray: void clear()>();

        r1 = null;

     label01:
        $r14 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

        r1 = virtualinvoke $r14.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        r6 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r6.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r1, null);

     label02:
        i0 = 1;

     label03:
        i1 = interfaceinvoke r6.<org.xmlpull.v1.XmlPullParser: int next()>();

     label04:
        if i1 == 1 goto label13;

     label05:
        r7 = interfaceinvoke r6.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label06:
        if i1 != 2 goto label03;

     label07:
        $r15 = "policy-list";

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z2 == 0 goto label20;

        i0 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "version");

     label08:
        if i0 < 3 goto label14;

     label09:
        $z8 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "restrictBackground");

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground> = $z8;

     label10:
        goto label03;

     label11:
        $r35 := @caughtexception;

     label12:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void upgradeLegacyBackgroundData()>();

     label13:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label14:
        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground> = 0;

     label15:
        goto label03;

     label16:
        $r33 := @caughtexception;

        r4 = $r33;

     label17:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem reading network policy", r4);

     label18:
        goto label13;

     label19:
        $r34 := @caughtexception;

        r3 = $r34;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw r3;

     label20:
        $r17 = "network-policy";

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z4 == 0 goto label45;

        i7 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "networkTemplate");

        r9 = interfaceinvoke r6.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "subscriberId");

     label21:
        if i0 < 9 goto label40;

     label22:
        r8 = interfaceinvoke r6.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "networkId");

     label23:
        i8 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "cycleDay");

     label24:
        if i0 < 6 goto label41;

     label25:
        r10 = interfaceinvoke r6.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "cycleTimezone");

     label26:
        l9 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "warningBytes");

        l10 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "limitBytes");

     label27:
        if i0 < 5 goto label42;

     label28:
        l11 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "lastLimitSnooze");

     label29:
        if i0 < 4 goto label54;

     label30:
        z0 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "metered");

     label31:
        if i0 < 5 goto label57;

     label32:
        l12 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "lastWarningSnooze");

     label33:
        if i0 < 7 goto label58;

     label34:
        z1 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "inferred");

     label35:
        r37 = new android.net.NetworkTemplate;

        specialinvoke r37.<android.net.NetworkTemplate: void <init>(int,java.lang.String,java.lang.String)>(i7, r9, r8);

        r11 = r37;

        $r31 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        r38 = new android.net.NetworkPolicy;

        specialinvoke r38.<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,int,java.lang.String,long,long,long,long,boolean,boolean)>(r11, i8, r10, l9, l10, l12, l11, z0, z1);

        virtualinvoke $r31.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r38);

     label36:
        goto label03;

     label37:
        $r36 := @caughtexception;

        r2 = $r36;

     label38:
        r41 = (java.lang.Throwable) r2;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem reading network policy", r41);

     label39:
        goto label13;

     label40:
        r8 = null;

        goto label23;

     label41:
        r10 = "UTC";

        goto label26;

     label42:
        if i0 < 2 goto label53;

     label43:
        l11 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "lastSnooze");

     label44:
        goto label29;

     label45:
        $r16 = "uid-policy";

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z3 == 0 goto label49;

        i6 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "uid");

        i5 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "policy");

        $z7 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i6);

        if $z7 == 0 goto label47;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUnchecked(int,int,boolean)>(i6, i5, 0);

     label46:
        goto label03;

     label47:
        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to apply policy to UID ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r24 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r25);

     label48:
        goto label03;

     label49:
        $r18 = "app-policy";

        $z5 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z5 == 0 goto label03;

        i2 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "appId");

        i3 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, "policy");

        i4 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(0, i2);

        $z6 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i4);

        if $z6 == 0 goto label51;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUnchecked(int,int,boolean)>(i4, i3, 0);

     label50:
        goto label03;

     label51:
        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to apply policy to UID ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r20);

     label52:
        goto label03;

     label53:
        l11 = -1L;

        goto label29;

     label54:
        tableswitch(i7)
        {
            case 1: goto label56;
            case 2: goto label56;
            case 3: goto label56;
            default: goto label55;
        };

     label55:
        z0 = 0;

        goto label31;

     label56:
        z0 = 1;

        goto label31;

     label57:
        l12 = -1L;

        goto label33;

     label58:
        z1 = 0;

        goto label35;

        catch java.io.FileNotFoundException from label01 to label02 with label11;
        catch java.io.IOException from label01 to label02 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label37;
        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.io.FileNotFoundException from label03 to label04 with label11;
        catch java.io.IOException from label03 to label04 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label37;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.io.FileNotFoundException from label05 to label06 with label11;
        catch java.io.IOException from label05 to label06 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label37;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.io.FileNotFoundException from label07 to label08 with label11;
        catch java.io.IOException from label07 to label08 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label37;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.io.FileNotFoundException from label09 to label10 with label11;
        catch java.io.IOException from label09 to label10 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label37;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.io.FileNotFoundException from label14 to label15 with label11;
        catch java.io.IOException from label14 to label15 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label37;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.io.FileNotFoundException from label20 to label21 with label11;
        catch java.io.IOException from label20 to label21 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label20 to label21 with label37;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.io.FileNotFoundException from label22 to label23 with label11;
        catch java.io.IOException from label22 to label23 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label22 to label23 with label37;
        catch java.lang.Throwable from label22 to label23 with label19;
        catch java.io.FileNotFoundException from label23 to label24 with label11;
        catch java.io.IOException from label23 to label24 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label23 to label24 with label37;
        catch java.lang.Throwable from label23 to label24 with label19;
        catch java.io.FileNotFoundException from label25 to label26 with label11;
        catch java.io.IOException from label25 to label26 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label25 to label26 with label37;
        catch java.lang.Throwable from label25 to label26 with label19;
        catch java.io.FileNotFoundException from label26 to label27 with label11;
        catch java.io.IOException from label26 to label27 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label26 to label27 with label37;
        catch java.lang.Throwable from label26 to label27 with label19;
        catch java.io.FileNotFoundException from label28 to label29 with label11;
        catch java.io.IOException from label28 to label29 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label28 to label29 with label37;
        catch java.lang.Throwable from label28 to label29 with label19;
        catch java.io.FileNotFoundException from label30 to label31 with label11;
        catch java.io.IOException from label30 to label31 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label30 to label31 with label37;
        catch java.lang.Throwable from label30 to label31 with label19;
        catch java.io.FileNotFoundException from label32 to label33 with label11;
        catch java.io.IOException from label32 to label33 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label32 to label33 with label37;
        catch java.lang.Throwable from label32 to label33 with label19;
        catch java.io.FileNotFoundException from label34 to label35 with label11;
        catch java.io.IOException from label34 to label35 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label34 to label35 with label37;
        catch java.lang.Throwable from label34 to label35 with label19;
        catch java.io.FileNotFoundException from label35 to label36 with label11;
        catch java.io.IOException from label35 to label36 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label35 to label36 with label37;
        catch java.lang.Throwable from label35 to label36 with label19;
        catch java.lang.Throwable from label38 to label39 with label19;
        catch java.io.FileNotFoundException from label43 to label44 with label11;
        catch java.io.IOException from label43 to label44 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label43 to label44 with label37;
        catch java.lang.Throwable from label43 to label44 with label19;
        catch java.io.FileNotFoundException from label45 to label46 with label11;
        catch java.io.IOException from label45 to label46 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label45 to label46 with label37;
        catch java.lang.Throwable from label45 to label46 with label19;
        catch java.io.FileNotFoundException from label47 to label48 with label11;
        catch java.io.IOException from label47 to label48 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label47 to label48 with label37;
        catch java.lang.Throwable from label47 to label48 with label19;
        catch java.io.FileNotFoundException from label49 to label50 with label11;
        catch java.io.IOException from label49 to label50 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label49 to label50 with label37;
        catch java.lang.Throwable from label49 to label50 with label19;
        catch java.io.FileNotFoundException from label51 to label52 with label11;
        catch java.io.IOException from label51 to label52 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label51 to label52 with label37;
        catch java.lang.Throwable from label51 to label52 with label19;
    }

    private void removeInterfaceQuota(java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1;
        java.lang.IllegalStateException r3, $r6;
        android.os.INetworkManagementService $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r4.<android.os.INetworkManagementService: void removeInterfaceQuota(java.lang.String)>(r1);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem removing interface quota", r3);

        return;

     label4:
        $r5 := @caughtexception;

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private void removePoliciesForUserLocked(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        int[] r1, r2;
        android.util.SparseIntArray $r3, $r4, $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r1 = newarray (int)[0];

        i1 = 0;

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        $i6 = virtualinvoke $r3.<android.util.SparseIntArray: int size()>();

        if i1 >= $i6 goto label3;

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i5 = virtualinvoke $r5.<android.util.SparseIntArray: int keyAt(int)>(i1);

        $i8 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i5);

        if $i8 != i0 goto label2;

        r1 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r1, i5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i7 = lengthof r1;

        if $i7 <= 0 goto label6;

        r2 = r1;

        i2 = lengthof r2;

        i3 = 0;

     label4:
        if i3 >= i2 goto label5;

        i4 = r2[i3];

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        virtualinvoke $r4.<android.util.SparseIntArray: void delete(int)>(i4);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(i4);

        i3 = i3 + 1;

        goto label4;

     label5:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

     label6:
        return;
    }

    private void setInterfaceQuota(java.lang.String, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1;
        long l0;
        java.lang.IllegalStateException r3, $r6;
        android.os.INetworkManagementService $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r4.<android.os.INetworkManagementService: void setInterfaceQuota(java.lang.String,long)>(r1, l0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem setting interface quota", r3);

        return;

     label4:
        $r5 := @caughtexception;

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private void setNetworkTemplateEnabled(android.net.NetworkTemplate, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        boolean z0, $z1;
        android.telephony.TelephonyManager r2;
        android.content.Context $r3;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r2 = staticinvoke <android.telephony.TelephonyManager: android.telephony.TelephonyManager 'from'(android.content.Context)>($r3);

        $i0 = virtualinvoke r1.<android.net.NetworkTemplate: int getMatchRule()>();

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label1;
        };

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unexpected template");

        throw $r4;

     label2:
        $i1 = virtualinvoke r2.<android.telephony.TelephonyManager: int getSimState()>();

        if $i1 != 5 goto label3;

        $r5 = virtualinvoke r2.<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>();

        $r6 = virtualinvoke r1.<android.net.NetworkTemplate: java.lang.String getSubscriberId()>();

        $z1 = staticinvoke <com.android.internal.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z1 == 0 goto label3;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setPolicyDataEnable(int,boolean)>(0, z0);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setPolicyDataEnable(int,boolean)>(6, z0);

     label3:
        return;

     label4:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setPolicyDataEnable(int,boolean)>(1, z0);

        return;

     label5:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setPolicyDataEnable(int,boolean)>(9, z0);

        return;
    }

    private void setPolicyDataEnable(int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.IConnectivityManager mConnManager>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void setPolicyDataEnable(int,boolean)>(i0, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setUidNetworkRules(int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean z0;
        java.lang.IllegalStateException r2, $r5;
        android.os.INetworkManagementService $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r3.<android.os.INetworkManagementService: void setUidNetworkRules(int,boolean)>(i0, z0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem setting uid rules", r2);

        return;

     label4:
        $r4 := @caughtexception;

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private void setUidPolicyUnchecked(int, int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        android.util.SparseIntArray $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label1:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)>(i0);

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>(i0, i1);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(i0);

     label2:
        if z0 == 0 goto label4;

     label3:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void updateNetworkEnabledLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0, l1, $l2, $l4, $l6;
        java.util.Iterator r1;
        android.net.NetworkPolicy r2;
        boolean z0, z1, $z2, $z3, $z4;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        java.lang.Object $r5;
        android.net.NetworkTemplate $r6, $r7, $r8;
        byte $b3, $b5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        l0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long currentTimeMillis()>();

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.net.NetworkPolicy) $r5;

        $l2 = r2.<android.net.NetworkPolicy: long limitBytes>;

        $b3 = $l2 cmp -1L;

        if $b3 == 0 goto label2;

        $z3 = virtualinvoke r2.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z3 != 0 goto label3;

     label2:
        $r6 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setNetworkTemplateEnabled(android.net.NetworkTemplate,boolean)>($r6, 1);

        goto label1;

     label3:
        l1 = staticinvoke <android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>(l0, r2);

        $r7 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $l4 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>($r7, l1, l0);

        $z4 = virtualinvoke r2.<android.net.NetworkPolicy: boolean isOverLimit(long)>($l4);

        if $z4 == 0 goto label6;

        $l6 = r2.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $b5 = $l6 cmp l1;

        if $b5 >= 0 goto label6;

        z0 = 1;

     label4:
        if z0 != 0 goto label7;

        z1 = 1;

     label5:
        $r8 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setNetworkTemplateEnabled(android.net.NetworkTemplate,boolean)>($r8, z1);

        goto label1;

     label6:
        z0 = 0;

        goto label4;

     label7:
        z1 = 0;

        goto label5;

     label8:
        return;
    }

    private void updateNetworkRulesLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkState[] r2;
        java.util.HashMap r3, $r22, $r24, $r26, $r39, $r51;
        int i0, i1, i7, i8, $i9, $i14, $i24, $i25;
        java.util.ArrayList r4;
        java.util.Iterator r5, r7, r8, r16;
        long l2, l3, l4, l5, l6, $l10, $l12, $l16, $l18, $l19, $l20, $l22;
        java.util.HashSet r6, $r30, $r31, $r35;
        java.lang.String[] r9, r12, r14, $r36, $r42;
        android.net.NetworkPolicy r10, r15;
        java.lang.String r11, r13, r20, $r47;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z10, $z11;
        android.net.NetworkState r17;
        java.util.Map$Entry r18;
        android.net.NetworkIdentity r19, $r54;
        android.net.IConnectivityManager $r21;
        java.util.Collection $r23;
        java.util.Set $r25, $r45;
        android.os.Message $r27, $r33;
        java.lang.Long $r28;
        android.os.Handler $r29, $r32;
        java.lang.Object $r34, $r38, $r40, $r44, $r46, $r49, $r50;
        java.lang.Object[] $r37, $r43;
        byte $b11, $b13, $b15, $b17, $b21;
        android.net.NetworkTemplate $r41, $r48;
        android.content.Context $r55;
        android.net.LinkProperties $r56;
        android.net.NetworkInfo $r57;
        android.os.RemoteException $r58;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

     label01:
        $r21 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.IConnectivityManager mConnManager>;

        r2 = interfaceinvoke $r21.<android.net.IConnectivityManager: android.net.NetworkState[] getAllNetworkState()>();

     label02:
        r3 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        i0 = lengthof r2;

        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

        r17 = r2[i1];

        $r57 = r17.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $z11 = virtualinvoke $r57.<android.net.NetworkInfo: boolean isConnected()>();

        if $z11 == 0 goto label04;

        $r56 = r17.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        r20 = virtualinvoke $r56.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $r55 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r54 = staticinvoke <android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState)>($r55, r17);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r54, r20);

     label04:
        i1 = i1 + 1;

        goto label03;

     label05:
        $r58 := @caughtexception;

        return;

     label06:
        $r24 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkRules>;

        virtualinvoke $r24.<java.util.HashMap: void clear()>();

        r4 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        $r22 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r23 = virtualinvoke $r22.<java.util.HashMap: java.util.Collection values()>();

        r5 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r44 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r15 = (android.net.NetworkPolicy) $r44;

        virtualinvoke r4.<java.util.ArrayList: void clear()>();

        $r45 = virtualinvoke r3.<java.util.HashMap: java.util.Set entrySet()>();

        r16 = interfaceinvoke $r45.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z9 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label09;

        $r49 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.util.Map$Entry) $r49;

        $r50 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getKey()>();

        r19 = (android.net.NetworkIdentity) $r50;

        $r48 = r15.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $z10 = virtualinvoke $r48.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>(r19);

        if $z10 == 0 goto label08;

        $r46 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r47 = (java.lang.String) $r46;

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r47);

        goto label08;

     label09:
        $i24 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        if $i24 <= 0 goto label07;

        $i25 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        $r42 = newarray (java.lang.String)[$i25];

        $r43 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r42);

        r14 = (java.lang.String[]) $r43;

        $r51 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkRules>;

        virtualinvoke $r51.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r14);

        goto label07;

     label10:
        l2 = 9223372036854775807L;

        r6 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        l3 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long currentTimeMillis()>();

        $r26 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkRules>;

        $r25 = virtualinvoke $r26.<java.util.HashMap: java.util.Set keySet()>();

        r7 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label26;

        $r38 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.net.NetworkPolicy) $r38;

        $r39 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkRules>;

        $r40 = virtualinvoke $r39.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r10);

        r12 = (java.lang.String[]) $r40;

        $z6 = virtualinvoke r10.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z6 == 0 goto label19;

        l4 = staticinvoke <android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>(l3, r10);

        $r41 = r10.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        l5 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>($r41, l4, l3);

     label12:
        $l10 = r10.<android.net.NetworkPolicy: long warningBytes>;

        $b11 = $l10 cmp -1L;

        if $b11 == 0 goto label20;

        z0 = 1;

     label13:
        $l12 = r10.<android.net.NetworkPolicy: long limitBytes>;

        $b13 = $l12 cmp -1L;

        if $b13 == 0 goto label21;

        z1 = 1;

     label14:
        if z1 != 0 goto label15;

        $z7 = r10.<android.net.NetworkPolicy: boolean metered>;

        if $z7 == 0 goto label24;

     label15:
        if z1 != 0 goto label22;

        l6 = 9223372036854775807L;

     label16:
        $i14 = lengthof r12;

        if $i14 <= 1 goto label17;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", "shared quota unsupported; generating rule for each iface");

     label17:
        i7 = lengthof r12;

        i8 = 0;

     label18:
        if i8 >= i7 goto label24;

        r13 = r12[i8];

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void removeInterfaceQuota(java.lang.String)>(r13);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setInterfaceQuota(java.lang.String,long)>(r13, l6);

        virtualinvoke r6.<java.util.HashSet: boolean add(java.lang.Object)>(r13);

        i8 = i8 + 1;

        goto label18;

     label19:
        l4 = 9223372036854775807L;

        l5 = 0L;

        goto label12;

     label20:
        z0 = 0;

        goto label13;

     label21:
        z1 = 0;

        goto label14;

     label22:
        $l18 = r10.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $b17 = $l18 cmp l4;

        if $b17 < 0 goto label23;

        l6 = 9223372036854775807L;

        goto label16;

     label23:
        $l20 = r10.<android.net.NetworkPolicy: long limitBytes>;

        $l19 = $l20 - l5;

        l6 = staticinvoke <java.lang.Math: long max(long,long)>(1L, $l19);

        goto label16;

     label24:
        if z0 == 0 goto label25;

        $l22 = r10.<android.net.NetworkPolicy: long warningBytes>;

        $b21 = $l22 cmp l2;

        if $b21 >= 0 goto label25;

        l2 = r10.<android.net.NetworkPolicy: long warningBytes>;

     label25:
        if z1 == 0 goto label11;

        $l16 = r10.<android.net.NetworkPolicy: long limitBytes>;

        $b15 = $l16 cmp l2;

        if $b15 >= 0 goto label11;

        l2 = r10.<android.net.NetworkPolicy: long limitBytes>;

        goto label11;

     label26:
        $r29 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r27 = virtualinvoke $r29.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(7, $r28);

        virtualinvoke $r27.<android.os.Message: void sendToTarget()>();

        $r31 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mMeteredIfaces>;

        r8 = virtualinvoke $r31.<java.util.HashSet: java.util.Iterator iterator()>();

     label27:
        $z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label28;

        $r34 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r34;

        $z5 = virtualinvoke r6.<java.util.HashSet: boolean contains(java.lang.Object)>(r11);

        if $z5 != 0 goto label27;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void removeInterfaceQuota(java.lang.String)>(r11);

        goto label27;

     label28:
        r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mMeteredIfaces> = r6;

        $r35 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mMeteredIfaces>;

        $r30 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mMeteredIfaces>;

        $i9 = virtualinvoke $r30.<java.util.HashSet: int size()>();

        $r36 = newarray (java.lang.String)[$i9];

        $r37 = virtualinvoke $r35.<java.util.HashSet: java.lang.Object[] toArray(java.lang.Object[])>($r36);

        r9 = (java.lang.String[]) $r37;

        $r32 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r33 = virtualinvoke $r32.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r9);

        virtualinvoke $r33.<android.os.Message: void sendToTarget()>();

        return;

        catch android.os.RemoteException from label01 to label02 with label05;
    }

    private void updateNotificationsLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.HashSet r1, $r6, $r7, $r11;
        long l0, l1, l2, $l3, $l5;
        java.util.Iterator r2, r3;
        java.lang.String r4;
        android.net.NetworkPolicy r5;
        java.util.Collection $r8;
        java.util.HashMap $r9;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object $r10, $r13;
        android.net.NetworkTemplate $r12, $r14, $r15, $r16;
        byte $b4, $b6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mActiveNotifs>;

        virtualinvoke r1.<java.util.HashSet: boolean addAll(java.util.Collection)>($r6);

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mActiveNotifs>;

        virtualinvoke $r7.<java.util.HashSet: void clear()>();

        l0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long currentTimeMillis()>();

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r8 = virtualinvoke $r9.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.net.NetworkPolicy) $r13;

        $r12 = r5.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $z6 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isTemplateRelevant(android.net.NetworkTemplate)>($r12);

        if $z6 == 0 goto label1;

        $z5 = virtualinvoke r5.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z5 == 0 goto label1;

        l1 = staticinvoke <android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>(l0, r5);

        $r14 = r5.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        l2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>($r14, l1, l0);

        $z7 = virtualinvoke r5.<android.net.NetworkPolicy: boolean isOverLimit(long)>(l2);

        if $z7 == 0 goto label3;

        $l5 = r5.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $b6 = $l5 cmp l1;

        if $b6 < 0 goto label2;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long)>(r5, 3, l2);

        goto label1;

     label2:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long)>(r5, 2, l2);

        $r16 = r5.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void notifyOverLimitLocked(android.net.NetworkTemplate)>($r16);

        goto label1;

     label3:
        $r15 = r5.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void notifyUnderLimitLocked(android.net.NetworkTemplate)>($r15);

        $z8 = virtualinvoke r5.<android.net.NetworkPolicy: boolean isOverWarning(long)>(l2);

        if $z8 == 0 goto label1;

        $l3 = r5.<android.net.NetworkPolicy: long lastWarningSnooze>;

        $b4 = $l3 cmp l1;

        if $b4 >= 0 goto label1;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long)>(r5, 1, l2);

        goto label1;

     label4:
        $z2 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z2 == 0 goto label5;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueRestrictedNotification(java.lang.String)>("NetworkPolicy:allowBackground");

     label5:
        r3 = virtualinvoke r1.<java.util.HashSet: java.util.Iterator iterator()>();

     label6:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r10;

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet mActiveNotifs>;

        $z4 = virtualinvoke $r11.<java.util.HashSet: boolean contains(java.lang.Object)>(r4);

        if $z4 != 0 goto label6;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void cancelNotification(java.lang.String)>(r4);

        goto label6;

     label7:
        return;
    }

    private void updateRulesForRestrictBackgroundLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.pm.PackageManager r1;
        java.util.List r2, r3;
        java.util.Iterator r4, r6;
        android.content.pm.UserInfo r5;
        android.content.pm.ApplicationInfo r7;
        android.content.Context $r8, $r9;
        java.lang.Object $r10, $r12, $r13;
        android.os.UserManager $r11;
        boolean $z0, $z1;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r8.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r11 = (android.os.UserManager) $r10;

        r2 = virtualinvoke $r11.<android.os.UserManager: java.util.List getUsers()>();

        r3 = virtualinvoke r1.<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>(8704);

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r12;

        r6 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label1;

        $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.content.pm.ApplicationInfo) $r13;

        $i2 = r5.<android.content.pm.UserInfo: int id>;

        $i0 = r7.<android.content.pm.ApplicationInfo: int uid>;

        $i1 = staticinvoke <android.os.UserHandle: int getUid(int,int)>($i2, $i0);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>($i1);

        goto label2;

     label3:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(1013);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(1019);

        return;
    }

    private void updateRulesForScreenLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, $i2;
        android.util.SparseBooleanArray $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mUidForeground>;

        i0 = virtualinvoke $r1.<android.util.SparseBooleanArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mUidForeground>;

        $z0 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean valueAt(int)>(i1);

        if $z0 == 0 goto label2;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mUidForeground>;

        $i2 = virtualinvoke $r3.<android.util.SparseBooleanArray: int keyAt(int)>(i1);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>($i2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void updateRulesForUidLocked(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i3;
        boolean z0, z1, $z2, $z3;
        byte b2, $b4;
        android.util.SparseIntArray $r2, $r6;
        android.os.Handler $r3;
        android.os.Message $r4;
        android.net.INetworkStatsService $r5;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $z2 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean isUidValidForRules(int)>(i0);

        if $z2 != 0 goto label01;

        return;

     label01:
        i1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)>(i0);

        z0 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidForeground(int)>(i0);

        b2 = 0;

        if z0 != 0 goto label02;

        i3 = i1 & 1;

        b2 = 0;

        if i3 == 0 goto label02;

        b2 = 1;

     label02:
        if z0 != 0 goto label03;

        $z3 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z3 == 0 goto label03;

        b2 = 1;

     label03:
        if b2 != 0 goto label09;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r6.<android.util.SparseIntArray: void delete(int)>(i0);

     label04:
        $b4 = b2 & 1;

        if $b4 == 0 goto label10;

        z1 = 1;

     label05:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidNetworkRules(int,boolean)>(i0, z1);

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(1, i0, b2);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

     label06:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkStatsService mNetworkStats>;

        interfaceinvoke $r5.<android.net.INetworkStatsService: void setUidForeground(int,boolean)>(i0, z0);

     label07:
        return;

     label08:
        $r7 := @caughtexception;

        return;

     label09:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r2.<android.util.SparseIntArray: void put(int,int)>(i0, b2);

        goto label04;

     label10:
        z1 = 0;

        goto label05;

        catch android.os.RemoteException from label06 to label07 with label08;
    }

    private void updateScreenOn()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r3, $r6;
        android.os.IPowerManager $r4;
        boolean $z0;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.IPowerManager mPowerManager>;

        $z0 = interfaceinvoke $r4.<android.os.IPowerManager: boolean isScreenOn()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mScreenOn> = $z0;

     label2:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForScreenLocked()>();

        exitmonitor r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

     label5:
        exitmonitor r1;

     label6:
        throw r3;

     label7:
        $r5 := @caughtexception;

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void upgradeLegacyBackgroundData()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0, $z1;
        android.content.Intent r1, $r4;
        android.content.Context $r2, $r6;
        android.content.ContentResolver $r3;
        int $i0, i1, i2;
        android.os.UserHandle $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        z0 = 1;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i1 = (int) 1;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r3, "background_data", i1);

        i2 = (int) 1;

        if $i0 == i2 goto label3;

     label1:
        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground> = z0;

        $z1 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z1 == 0 goto label2;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.BACKGROUND_DATA_SETTING_CHANGED");

        r1 = $r4;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r6.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

     label2:
        return;

     label3:
        z0 = 0;

        goto label1;
    }

    private void writePolicyLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.io.FileOutputStream r1;
        com.android.internal.util.FastXmlSerializer r3, $r10;
        java.util.Iterator r4;
        int i0, i1, i2, $i3, $i4, $i5;
        android.net.NetworkPolicy r5;
        android.net.NetworkTemplate r6;
        java.lang.String r7, r8, $r24;
        android.util.AtomicFile $r9, $r18, $r28;
        java.lang.Boolean $r12;
        java.util.HashMap $r13;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r14;
        android.util.SparseIntArray $r15, $r17, $r19;
        java.lang.Object $r21;
        long $l6, $l7, $l8, $l9;
        java.io.IOException $r29;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 = null;

     label01:
        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

        r1 = virtualinvoke $r9.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        $r10 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r10.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r3 = $r10;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r1, "utf-8");

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r12);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "policy-list");

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r3, "version", 10);

        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r3, "restrictBackground", $z0);

        $r13 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r14 = virtualinvoke $r13.<java.util.HashMap: java.util.Collection values()>();

        r4 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r21 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.net.NetworkPolicy) $r21;

        r6 = r5.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "network-policy");

        $i4 = virtualinvoke r6.<android.net.NetworkTemplate: int getMatchRule()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r3, "networkTemplate", $i4);

        r7 = virtualinvoke r6.<android.net.NetworkTemplate: java.lang.String getSubscriberId()>();

     label03:
        if r7 == null goto label05;

     label04:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "subscriberId", r7);

     label05:
        r8 = virtualinvoke r6.<android.net.NetworkTemplate: java.lang.String getNetworkId()>();

     label06:
        if r8 == null goto label08;

     label07:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "networkId", r8);

     label08:
        $i5 = r5.<android.net.NetworkPolicy: int cycleDay>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r3, "cycleDay", $i5);

        $r24 = r5.<android.net.NetworkPolicy: java.lang.String cycleTimezone>;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "cycleTimezone", $r24);

        $l9 = r5.<android.net.NetworkPolicy: long warningBytes>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r3, "warningBytes", $l9);

        $l8 = r5.<android.net.NetworkPolicy: long limitBytes>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r3, "limitBytes", $l8);

        $l7 = r5.<android.net.NetworkPolicy: long lastWarningSnooze>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r3, "lastWarningSnooze", $l7);

        $l6 = r5.<android.net.NetworkPolicy: long lastLimitSnooze>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r3, "lastLimitSnooze", $l6);

        $z3 = r5.<android.net.NetworkPolicy: boolean metered>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r3, "metered", $z3);

        $z2 = r5.<android.net.NetworkPolicy: boolean inferred>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r3, "inferred", $z2);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "network-policy");

     label09:
        goto label02;

     label10:
        $r29 := @caughtexception;

        if r1 == null goto label11;

        $r28 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

        virtualinvoke $r28.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r1);

     label11:
        return;

     label12:
        i0 = 0;

     label13:
        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        $i3 = virtualinvoke $r15.<android.util.SparseIntArray: int size()>();

        if i0 >= $i3 goto label17;

        $r19 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i1 = virtualinvoke $r19.<android.util.SparseIntArray: int keyAt(int)>(i0);

        $r17 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i2 = virtualinvoke $r17.<android.util.SparseIntArray: int valueAt(int)>(i0);

     label14:
        if i2 != 0 goto label15;

        goto label19;

     label15:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "uid-policy");

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r3, "uid", i1);

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r3, "policy", i2);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "uid-policy");

     label16:
        goto label19;

     label17:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "policy-list");

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r18 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

        virtualinvoke $r18.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r1);

     label18:
        return;

     label19:
        i0 = i0 + 1;

        goto label13;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label02 to label03 with label10;
        catch java.io.IOException from label04 to label05 with label10;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.io.IOException from label07 to label08 with label10;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label13 to label14 with label10;
        catch java.io.IOException from label15 to label16 with label10;
        catch java.io.IOException from label17 to label18 with label10;
    }

    public void addIdleHandler(android.os.MessageQueue$IdleHandler)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.os.MessageQueue$IdleHandler r1;
        android.os.Handler $r2;
        android.os.Looper $r3;
        android.os.MessageQueue $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.os.MessageQueue$IdleHandler;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Looper getLooper()>();

        $r4 = virtualinvoke $r3.<android.os.Looper: android.os.MessageQueue getQueue()>();

        virtualinvoke $r4.<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>(r1);

        return;
    }

    public void bindConnectivityManager(android.net.IConnectivityManager)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.IConnectivityManager r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.IConnectivityManager;

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing IConnectivityManager");

        $r3 = (android.net.IConnectivityManager) $r2;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.net.IConnectivityManager mConnManager> = $r3;

        return;
    }

    public void bindNotificationManager(android.app.INotificationManager)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.app.INotificationManager r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.app.INotificationManager;

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing INotificationManager");

        $r3 = (android.app.INotificationManager) $r2;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.app.INotificationManager mNotifManager> = $r3;

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2, r40, r41, r42;
        java.lang.String[] r3;
        com.android.internal.util.IndentingPrintWriter r4, r37;
        java.util.HashSet r5, r38;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11;
        java.lang.Object r6, $r21, $r30, $r35;
        java.lang.Throwable r7, $r36;
        java.util.Iterator r8, r10;
        android.util.SparseBooleanArray r9, $r17, $r24, r39;
        android.content.Context $r12;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r14, $r31;
        java.util.HashMap $r15, $r32;
        android.util.SparseIntArray $r18, $r19, $r23, $r25, $r26, $r27;
        android.util.SparseArray $r20, $r22;
        java.lang.String $r28, $r33;
        android.net.NetworkPolicy $r29, $r34;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r12 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r12.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "NetworkPolicy");

        r37 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r37.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r2, "  ");

        r4 = r37;

        r38 = new java.util.HashSet;

        specialinvoke r38.<java.util.HashSet: void <init>()>();

        r5 = r38;

        i0 = lengthof r3;

        i1 = 0;

     label01:
        if i1 >= i0 goto label02;

        $r33 = r3[i1];

        virtualinvoke r5.<java.util.HashSet: boolean add(java.lang.Object)>($r33);

        i1 = i1 + 1;

        goto label01;

     label02:
        r6 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r6;

     label03:
        $z1 = virtualinvoke r5.<java.util.HashSet: boolean contains(java.lang.Object)>("--unsnooze");

        if $z1 == 0 goto label11;

        $r32 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r31 = virtualinvoke $r32.<java.util.HashMap: java.util.Collection values()>();

        r10 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r35 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r34 = (android.net.NetworkPolicy) $r35;

        virtualinvoke $r34.<android.net.NetworkPolicy: void clearSnooze()>();

     label05:
        goto label04;

     label06:
        $r36 := @caughtexception;

        r7 = $r36;

     label07:
        exitmonitor r6;

     label08:
        throw r7;

     label09:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Cleared snooze timestamps");

        exitmonitor r6;

     label10:
        return;

     label11:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Restrict background: ");

        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z0);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Network policies:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r14 = virtualinvoke $r15.<java.util.HashMap: java.util.Collection values()>();

        r8 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r30 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r29 = (android.net.NetworkPolicy) $r30;

        $r28 = virtualinvoke $r29.<android.net.NetworkPolicy: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r28);

     label13:
        goto label12;

     label14:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Policy for UIDs:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r18 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i2 = virtualinvoke $r18.<android.util.SparseIntArray: int size()>();

     label15:
        i3 = 0;

     label16:
        if i3 >= i2 goto label19;

     label17:
        $r27 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i4 = virtualinvoke $r27.<android.util.SparseIntArray: int keyAt(int)>(i3);

        $r26 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i5 = virtualinvoke $r26.<android.util.SparseIntArray: int valueAt(int)>(i3);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i4);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" policy=");

        r40 = (java.io.PrintWriter) r4;

        staticinvoke <android.net.NetworkPolicyManager: void dumpPolicy(java.io.PrintWriter,int)>(r40, i5);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label18:
        i3 = i3 + 1;

        goto label16;

     label19:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        r39 = new android.util.SparseBooleanArray;

        specialinvoke r39.<android.util.SparseBooleanArray: void <init>()>();

        r9 = r39;

        $r17 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mUidForeground>;

        staticinvoke <com.android.server.net.NetworkPolicyManagerService: void collectKeys(android.util.SparseBooleanArray,android.util.SparseBooleanArray)>($r17, r9);

        $r19 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        staticinvoke <com.android.server.net.NetworkPolicyManagerService: void collectKeys(android.util.SparseIntArray,android.util.SparseBooleanArray)>($r19, r9);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Status for known UIDs:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        i7 = virtualinvoke r9.<android.util.SparseBooleanArray: int size()>();

     label20:
        i6 = 0;

     label21:
        if i6 >= i7 goto label34;

     label22:
        i9 = virtualinvoke r9.<android.util.SparseBooleanArray: int keyAt(int)>(i6);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i9);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" foreground=");

        $r22 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mUidPidForeground>;

        i8 = virtualinvoke $r22.<android.util.SparseArray: int indexOfKey(int)>(i9);

     label23:
        if i8 >= 0 goto label30;

     label24:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UNKNOWN");

     label25:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" rules=");

        $r25 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        i10 = virtualinvoke $r25.<android.util.SparseIntArray: int indexOfKey(int)>(i9);

     label26:
        if i10 >= 0 goto label32;

     label27:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UNKNOWN");

     label28:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label29:
        i6 = i6 + 1;

        goto label21;

     label30:
        $r20 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mUidPidForeground>;

        $r21 = virtualinvoke $r20.<android.util.SparseArray: java.lang.Object valueAt(int)>(i8);

        $r24 = (android.util.SparseBooleanArray) $r21;

        r41 = (java.io.PrintWriter) r4;

        staticinvoke <com.android.server.net.NetworkPolicyManagerService: void dumpSparseBooleanArray(java.io.PrintWriter,android.util.SparseBooleanArray)>(r41, $r24);

     label31:
        goto label25;

     label32:
        $r23 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        $i11 = virtualinvoke $r23.<android.util.SparseIntArray: int valueAt(int)>(i10);

        r42 = (java.io.PrintWriter) r4;

        staticinvoke <android.net.NetworkPolicyManager: void dumpRules(java.io.PrintWriter,int)>(r42, $i11);

     label33:
        goto label28;

     label34:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        exitmonitor r6;

     label35:
        return;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label11 to label12 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch java.lang.Throwable from label14 to label15 with label06;
        catch java.lang.Throwable from label17 to label18 with label06;
        catch java.lang.Throwable from label19 to label20 with label06;
        catch java.lang.Throwable from label22 to label23 with label06;
        catch java.lang.Throwable from label24 to label25 with label06;
        catch java.lang.Throwable from label25 to label26 with label06;
        catch java.lang.Throwable from label27 to label28 with label06;
        catch java.lang.Throwable from label28 to label29 with label06;
        catch java.lang.Throwable from label30 to label31 with label06;
        catch java.lang.Throwable from label32 to label33 with label06;
        catch java.lang.Throwable from label34 to label35 with label06;
    }

    public android.net.NetworkPolicy[] getNetworkPolicies()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r11;
        android.net.NetworkPolicy[] r3, $r9;
        android.content.Context $r4, $r5;
        java.util.HashMap $r6, $r8;
        java.util.Collection $r7;
        int $i0;
        java.lang.Object[] $r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_PHONE_STATE", "NetworkPolicy");

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label1:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Collection values()>();

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $i0 = virtualinvoke $r8.<java.util.HashMap: int size()>();

        $r9 = newarray (android.net.NetworkPolicy)[$i0];

        $r10 = interfaceinvoke $r7.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        r3 = (android.net.NetworkPolicy[]) $r10;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r11 := @caughtexception;

        r2 = $r11;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkState r1;
        long l0;
        java.lang.Throwable r2, $r5;
        android.net.NetworkQuotaInfo r3;
        android.content.Context $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkState;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_NETWORK_STATE", "NetworkPolicy");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r3 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfoUnchecked(android.net.NetworkState)>(r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getRestrictBackground()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean z0;
        android.content.Context $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getUidPolicy(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        android.content.Context $r3;
        android.util.SparseIntArray $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i1 = virtualinvoke $r4.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        exitmonitor r1;

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int[] getUidsWithPolicy(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, $i3, $i4;
        int[] r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r8;
        android.content.Context $r4;
        android.util.SparseIntArray $r5, $r6, $r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        r1 = newarray (int)[0];

        r2 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r2;

        i1 = 0;

     label1:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        $i3 = virtualinvoke $r5.<android.util.SparseIntArray: int size()>();

        if i1 >= $i3 goto label3;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i2 = virtualinvoke $r6.<android.util.SparseIntArray: int keyAt(int)>(i1);

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        $i4 = virtualinvoke $r7.<android.util.SparseIntArray: int valueAt(int)>(i1);

        if $i4 != i0 goto label8;

        r1 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r1, i2);

     label2:
        goto label8;

     label3:
        exitmonitor r2;

     label4:
        return r1;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        i1 = i1 + 1;

        goto label1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean isNetworkMetered(android.net.NetworkState)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkState r1;
        android.net.NetworkIdentity r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r8;
        android.net.NetworkPolicy r5;
        int i0;
        android.content.Context $r6;
        boolean $z0, $z1, $z2;
        android.net.NetworkInfo $r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkState;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r2 = staticinvoke <android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState)>($r6, r1);

        $z0 = virtualinvoke r2.<android.net.NetworkIdentity: boolean getRoaming()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        r3 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r3;

     label3:
        r5 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy findPolicyForNetworkLocked(android.net.NetworkIdentity)>(r2);

        exitmonitor r3;

     label4:
        if r5 == null goto label8;

        $z2 = r5.<android.net.NetworkPolicy: boolean metered>;

        return $z2;

     label5:
        $r8 := @caughtexception;

        r4 = $r8;

     label6:
        exitmonitor r3;

     label7:
        throw r4;

     label8:
        $r7 = r1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        i0 = virtualinvoke $r7.<android.net.NetworkInfo: int getType()>();

        $z1 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>(i0);

        if $z1 != 0 goto label1;

        if i0 == 6 goto label1;

        return 0;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean isUidForeground(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        boolean z0, z1, z2;
        android.content.Context $r3;
        android.util.SparseBooleanArray $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mUidForeground>;

        z0 = virtualinvoke $r4.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i0, 0);

     label2:
        z1 = 0;

        if z0 == 0 goto label5;

     label3:
        z2 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mScreenOn>;

     label4:
        z1 = 0;

        if z2 == 0 goto label5;

        z1 = 1;

     label5:
        exitmonitor r1;

     label6:
        return z1;

     label7:
        $r5 := @caughtexception;

        r2 = $r5;

     label8:
        exitmonitor r1;

     label9:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void registerListener(android.net.INetworkPolicyListener)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        android.content.Context $r2;
        android.os.RemoteCallbackList $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.INetworkPolicyListener;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkPolicy");

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        return;
    }

    public void setNetworkPolicies(android.net.NetworkPolicy[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy[] r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r10;
        int i0, i1;
        android.net.NetworkPolicy r4;
        android.content.Context $r5;
        java.util.HashMap $r6, $r8;
        android.net.NetworkTemplate $r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkPolicy[];

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void maybeRefreshTrustedTime()>();

        r2 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r2;

     label01:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        virtualinvoke $r6.<java.util.HashMap: void clear()>();

        i0 = lengthof r1;

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        r4 = r1[i1];

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.HashMap mNetworkPolicy>;

        $r7 = r4.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r4);

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

        exitmonitor r2;

     label07:
        return;

     label08:
        $r10 := @caughtexception;

        r3 = $r10;

     label09:
        exitmonitor r2;

     label10:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setRestrictBackground(boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r6;
        android.os.Handler r3;
        byte b0;
        android.content.Context $r4;
        android.os.Message $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        z0 := @parameter0: boolean;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void maybeRefreshTrustedTime()>();

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground> = z0;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForRestrictBackgroundLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

        exitmonitor r1;

     label2:
        r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        if z0 == 0 goto label7;

        b0 = 1;

     label3:
        $r5 = virtualinvoke r3.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(6, b0, 0);

        virtualinvoke $r5.<android.os.Message: void sendToTarget()>();

        return;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        b0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setUidPolicy(int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        android.content.Context $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot apply policy to UID ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUnchecked(int,int,boolean)>(i0, i1, 1);

        return;
    }

    public void snoozeLimit(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        long l0;
        java.lang.Throwable r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void performSnooze(android.net.NetworkTemplate,int)>(r1, 2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void systemReady()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r66;
        android.content.IntentFilter r4, r5, r6, r7, r8, r9, r10, r11, r12, $r18, $r19, $r24, $r33, $r37, $r40, $r43, $r52, $r55, $r64;
        boolean $z0, $z1;
        android.app.IActivityManager $r13;
        android.app.IProcessObserver $r14;
        android.os.INetworkManagementService $r15;
        android.net.INetworkManagementEventObserver $r16;
        android.content.BroadcastReceiver $r17, $r25, $r30, $r31, $r35, $r46, $r49, $r54, $r57, $r59;
        android.os.Handler $r20, $r29, $r32, $r36, $r39, $r50, $r53, $r56, $r65;
        android.content.Context $r21, $r26, $r27, $r34, $r42, $r45, $r48, $r58, $r60, $r62;
        android.os.RemoteException $r67;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isBandwidthControlEnabled()>();

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", "bandwidth controls disabled, unable to enforce policy");

        return;

     label01:
        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        entermonitor r1;

     label02:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void readPolicyLocked()>();

        $z1 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z1 == 0 goto label03;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForRestrictBackgroundLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

     label03:
        exitmonitor r1;

     label04:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateScreenOn()>();

     label05:
        $r13 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IActivityManager mActivityManager>;

        $r14 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IProcessObserver mProcessObserver>;

        interfaceinvoke $r13.<android.app.IActivityManager: void registerProcessObserver(android.app.IProcessObserver)>($r14);

        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        $r16 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkManagementEventObserver mAlertObserver>;

        interfaceinvoke $r15.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r16);

     label06:
        $r18 = new android.content.IntentFilter;

        specialinvoke $r18.<android.content.IntentFilter: void <init>()>();

        r4 = $r18;

        virtualinvoke r4.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_ON");

        virtualinvoke r4.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        $r21 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r17 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mScreenReceiver>;

        virtualinvoke $r21.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r17, r4);

        $r19 = new android.content.IntentFilter;

        specialinvoke $r19.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE");

        r5 = $r19;

        $r26 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r25 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mConnReceiver>;

        $r20 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r26.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r25, r5, "android.permission.CONNECTIVITY_INTERNAL", $r20);

        $r24 = new android.content.IntentFilter;

        specialinvoke $r24.<android.content.IntentFilter: void <init>()>();

        r6 = $r24;

        virtualinvoke r6.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke r6.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r27 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r30 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mPackageReceiver>;

        $r29 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r27.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r30, r6, null, $r29);

        $r34 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r31 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUidRemovedReceiver>;

        $r33 = new android.content.IntentFilter;

        specialinvoke $r33.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.UID_REMOVED");

        $r32 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r34.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r31, $r33, null, $r32);

        $r37 = new android.content.IntentFilter;

        specialinvoke $r37.<android.content.IntentFilter: void <init>()>();

        r7 = $r37;

        virtualinvoke r7.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke r7.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r42 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r35 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUserReceiver>;

        $r36 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r42.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r35, r7, null, $r36);

        $r40 = new android.content.IntentFilter;

        specialinvoke $r40.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.action.NETWORK_STATS_UPDATED");

        r8 = $r40;

        $r45 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r46 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mStatsReceiver>;

        $r39 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r45.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r46, r8, "android.permission.READ_NETWORK_USAGE_HISTORY", $r39);

        $r43 = new android.content.IntentFilter;

        specialinvoke $r43.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.net.action.ALLOW_BACKGROUND");

        r9 = $r43;

        $r48 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r49 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mAllowReceiver>;

        $r50 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r48.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r49, r9, "android.permission.MANAGE_NETWORK_POLICY", $r50);

        $r55 = new android.content.IntentFilter;

        specialinvoke $r55.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.net.action.SNOOZE_WARNING");

        r10 = $r55;

        $r58 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r57 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mSnoozeWarningReceiver>;

        $r56 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r58.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r57, r10, "android.permission.MANAGE_NETWORK_POLICY", $r56);

        $r52 = new android.content.IntentFilter;

        specialinvoke $r52.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.wifi.CONFIGURED_NETWORKS_CHANGE");

        r11 = $r52;

        $r62 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r54 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mWifiConfigReceiver>;

        $r53 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r62.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r54, r11, "android.permission.CONNECTIVITY_INTERNAL", $r53);

        $r64 = new android.content.IntentFilter;

        specialinvoke $r64.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.wifi.STATE_CHANGE");

        r12 = $r64;

        $r60 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r59 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mWifiStateReceiver>;

        $r65 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r60.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r59, r12, "android.permission.CONNECTIVITY_INTERNAL", $r65);

        return;

     label07:
        $r66 := @caughtexception;

        r2 = $r66;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        $r67 := @caughtexception;

        goto label06;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void unregisterListener(android.net.INetworkPolicyListener)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        android.content.Context $r2;
        android.os.RemoteCallbackList $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.INetworkPolicyListener;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkPolicy");

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.net.NetworkPolicyManagerService: int VERSION_SWITCH_UID> = 10;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_SWITCH_APP_ID> = 8;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_SPLIT_SNOOZE> = 5;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_LATEST> = 10;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_INIT> = 1;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_TIMEZONE> = 6;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_SNOOZE> = 2;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_RESTRICT_BACKGROUND> = 3;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_NETWORK_ID> = 9;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_METERED> = 4;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_INFERRED> = 7;

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_WARNING> = 1;

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_LIMIT_SNOOZED> = 3;

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_LIMIT> = 2;

        <com.android.server.net.NetworkPolicyManagerService: long TIME_CACHE_MAX_AGE> = 86400000L;

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_UID_POLICY> = "uid-policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_POLICY_LIST> = "policy-list";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_NETWORK_POLICY> = "network-policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_APP_POLICY> = "app-policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_ALLOW_BACKGROUND> = "NetworkPolicy:allowBackground";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG> = "NetworkPolicy";

        <com.android.server.net.NetworkPolicyManagerService: int MSG_SCREEN_ON_CHANGED> = 8;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_RULES_CHANGED> = 1;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_RESTRICT_BACKGROUND_CHANGED> = 6;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_PROCESS_DIED> = 4;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_METERED_IFACES_CHANGED> = 2;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_LIMIT_REACHED> = 5;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_FOREGROUND_ACTIVITIES_CHANGED> = 3;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_ADVISE_PERSIST_THRESHOLD> = 7;

        <com.android.server.net.NetworkPolicyManagerService: boolean LOGV> = 0;

        <com.android.server.net.NetworkPolicyManagerService: boolean LOGD> = 0;

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_WARNING_BYTES> = "warningBytes";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_VERSION> = "version";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_UID> = "uid";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_SUBSCRIBER_ID> = "subscriberId";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_RESTRICT_BACKGROUND> = "restrictBackground";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_POLICY> = "policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_NETWORK_TEMPLATE> = "networkTemplate";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_NETWORK_ID> = "networkId";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_METERED> = "metered";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LIMIT_BYTES> = "limitBytes";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LAST_WARNING_SNOOZE> = "lastWarningSnooze";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LAST_SNOOZE> = "lastSnooze";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LAST_LIMIT_SNOOZE> = "lastLimitSnooze";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_INFERRED> = "inferred";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_CYCLE_TIMEZONE> = "cycleTimezone";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_CYCLE_DAY> = "cycleDay";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_APP_ID> = "appId";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ACTION_SNOOZE_WARNING> = "com.android.server.net.action.SNOOZE_WARNING";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ACTION_ALLOW_BACKGROUND> = "com.android.server.net.action.ALLOW_BACKGROUND";

        return;
    }
}
