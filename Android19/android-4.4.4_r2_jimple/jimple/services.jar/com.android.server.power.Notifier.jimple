final class com.android.server.power.Notifier extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final int MSG_BROADCAST;
    private static final int MSG_USER_ACTIVITY;
    private static final int MSG_WIRELESS_CHARGING_STARTED;
    private static final int POWER_STATE_ASLEEP;
    private static final int POWER_STATE_AWAKE;
    private static final int POWER_STATE_UNKNOWN;
    private static final java.lang.String TAG;
    private int mActualPowerState;
    private final com.android.internal.app.IAppOpsService mAppOps;
    private final com.android.internal.app.IBatteryStats mBatteryStats;
    private boolean mBroadcastInProgress;
    private long mBroadcastStartTime;
    private int mBroadcastedPowerState;
    private final android.content.Context mContext;
    private final android.content.BroadcastReceiver mGoToSleepBroadcastDone;
    private final com.android.server.power.Notifier$NotifierHandler mHandler;
    private int mLastGoToSleepReason;
    private final java.lang.Object mLock;
    private boolean mPendingGoToSleepBroadcast;
    private boolean mPendingWakeUpBroadcast;
    private final android.view.WindowManagerPolicy mPolicy;
    private final android.content.Intent mScreenOffIntent;
    private final com.android.server.power.ScreenOnBlocker mScreenOnBlocker;
    private boolean mScreenOnBlockerAcquired;
    private final android.content.Intent mScreenOnIntent;
    private final android.view.WindowManagerPolicy$ScreenOnListener mScreenOnListener;
    private final com.android.server.power.SuspendBlocker mSuspendBlocker;
    private boolean mUserActivityPending;
    private final android.content.BroadcastReceiver mWakeUpBroadcastDone;

    public void <init>(android.os.Looper, android.content.Context, com.android.internal.app.IBatteryStats, com.android.internal.app.IAppOpsService, com.android.server.power.SuspendBlocker, com.android.server.power.ScreenOnBlocker, android.view.WindowManagerPolicy)
    {
        com.android.server.power.Notifier r0;
        android.os.Looper r1;
        android.content.Context r2;
        com.android.internal.app.IBatteryStats r3;
        com.android.internal.app.IAppOpsService r4;
        com.android.server.power.SuspendBlocker r5;
        com.android.server.power.ScreenOnBlocker r6;
        android.view.WindowManagerPolicy r7;
        android.content.Intent $r14, $r16, r24, r25;
        java.lang.Object r19;
        com.android.server.power.Notifier$1 r20;
        com.android.server.power.Notifier$2 r21;
        com.android.server.power.Notifier$3 r22;
        com.android.server.power.Notifier$NotifierHandler r23;
        android.view.WindowManagerPolicy$ScreenOnListener r26;

        r0 := @this: com.android.server.power.Notifier;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: com.android.internal.app.IBatteryStats;

        r4 := @parameter3: com.android.internal.app.IAppOpsService;

        r5 := @parameter4: com.android.server.power.SuspendBlocker;

        r6 := @parameter5: com.android.server.power.ScreenOnBlocker;

        r7 := @parameter6: android.view.WindowManagerPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r19 = new java.lang.Object;

        specialinvoke r19.<java.lang.Object: void <init>()>();

        r0.<com.android.server.power.Notifier: java.lang.Object mLock> = r19;

        r20 = new com.android.server.power.Notifier$1;

        specialinvoke r20.<com.android.server.power.Notifier$1: void <init>(com.android.server.power.Notifier)>(r0);

        r26 = (android.view.WindowManagerPolicy$ScreenOnListener) r20;

        r0.<com.android.server.power.Notifier: android.view.WindowManagerPolicy$ScreenOnListener mScreenOnListener> = r26;

        r21 = new com.android.server.power.Notifier$2;

        specialinvoke r21.<com.android.server.power.Notifier$2: void <init>(com.android.server.power.Notifier)>(r0);

        r0.<com.android.server.power.Notifier: android.content.BroadcastReceiver mWakeUpBroadcastDone> = r21;

        r22 = new com.android.server.power.Notifier$3;

        specialinvoke r22.<com.android.server.power.Notifier$3: void <init>(com.android.server.power.Notifier)>(r0);

        r0.<com.android.server.power.Notifier: android.content.BroadcastReceiver mGoToSleepBroadcastDone> = r22;

        r0.<com.android.server.power.Notifier: android.content.Context mContext> = r2;

        r0.<com.android.server.power.Notifier: com.android.internal.app.IBatteryStats mBatteryStats> = r3;

        r0.<com.android.server.power.Notifier: com.android.internal.app.IAppOpsService mAppOps> = r4;

        r0.<com.android.server.power.Notifier: com.android.server.power.SuspendBlocker mSuspendBlocker> = r5;

        r0.<com.android.server.power.Notifier: com.android.server.power.ScreenOnBlocker mScreenOnBlocker> = r6;

        r0.<com.android.server.power.Notifier: android.view.WindowManagerPolicy mPolicy> = r7;

        r23 = new com.android.server.power.Notifier$NotifierHandler;

        specialinvoke r23.<com.android.server.power.Notifier$NotifierHandler: void <init>(com.android.server.power.Notifier,android.os.Looper)>(r0, r1);

        r0.<com.android.server.power.Notifier: com.android.server.power.Notifier$NotifierHandler mHandler> = r23;

        r24 = new android.content.Intent;

        specialinvoke r24.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SCREEN_ON");

        r0.<com.android.server.power.Notifier: android.content.Intent mScreenOnIntent> = r24;

        $r14 = r0.<com.android.server.power.Notifier: android.content.Intent mScreenOnIntent>;

        virtualinvoke $r14.<android.content.Intent: android.content.Intent addFlags(int)>(1342177280);

        r25 = new android.content.Intent;

        specialinvoke r25.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SCREEN_OFF");

        r0.<com.android.server.power.Notifier: android.content.Intent mScreenOffIntent> = r25;

        $r16 = r0.<com.android.server.power.Notifier: android.content.Intent mScreenOffIntent>;

        virtualinvoke $r16.<android.content.Intent: android.content.Intent addFlags(int)>(1342177280);

        return;
    }

    static java.lang.Object access$000(com.android.server.power.Notifier)
    {
        com.android.server.power.Notifier r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.power.Notifier;

        $r1 = r0.<com.android.server.power.Notifier: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$100(com.android.server.power.Notifier)
    {
        com.android.server.power.Notifier r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.Notifier;

        $z0 = r0.<com.android.server.power.Notifier: boolean mScreenOnBlockerAcquired>;

        return $z0;
    }

    static boolean access$102(com.android.server.power.Notifier, boolean)
    {
        com.android.server.power.Notifier r0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.Notifier;

        z0 := @parameter1: boolean;

        r0.<com.android.server.power.Notifier: boolean mScreenOnBlockerAcquired> = z0;

        return z0;
    }

    static boolean access$200(com.android.server.power.Notifier)
    {
        com.android.server.power.Notifier r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.Notifier;

        $z0 = r0.<com.android.server.power.Notifier: boolean mPendingWakeUpBroadcast>;

        return $z0;
    }

    static com.android.server.power.ScreenOnBlocker access$300(com.android.server.power.Notifier)
    {
        com.android.server.power.Notifier r0;
        com.android.server.power.ScreenOnBlocker $r1;

        r0 := @parameter0: com.android.server.power.Notifier;

        $r1 = r0.<com.android.server.power.Notifier: com.android.server.power.ScreenOnBlocker mScreenOnBlocker>;

        return $r1;
    }

    static long access$400(com.android.server.power.Notifier)
    {
        com.android.server.power.Notifier r0;
        long $l0;

        r0 := @parameter0: com.android.server.power.Notifier;

        $l0 = r0.<com.android.server.power.Notifier: long mBroadcastStartTime>;

        return $l0;
    }

    static void access$500(com.android.server.power.Notifier)
    {
        com.android.server.power.Notifier r0;

        r0 := @parameter0: com.android.server.power.Notifier;

        specialinvoke r0.<com.android.server.power.Notifier: void sendNextBroadcast()>();

        return;
    }

    static void access$600(com.android.server.power.Notifier)
    {
        com.android.server.power.Notifier r0;

        r0 := @parameter0: com.android.server.power.Notifier;

        specialinvoke r0.<com.android.server.power.Notifier: void sendUserActivity()>();

        return;
    }

    static void access$700(com.android.server.power.Notifier)
    {
        com.android.server.power.Notifier r0;

        r0 := @parameter0: com.android.server.power.Notifier;

        specialinvoke r0.<com.android.server.power.Notifier: void playWirelessChargingStartedSound()>();

        return;
    }

    private void finishPendingBroadcastLocked()
    {
        com.android.server.power.Notifier r0;
        com.android.server.power.SuspendBlocker $r1;

        r0 := @this: com.android.server.power.Notifier;

        r0.<com.android.server.power.Notifier: boolean mBroadcastInProgress> = 0;

        $r1 = r0.<com.android.server.power.Notifier: com.android.server.power.SuspendBlocker mSuspendBlocker>;

        interfaceinvoke $r1.<com.android.server.power.SuspendBlocker: void release()>();

        return;
    }

    private static int getBatteryStatsWakeLockMonitorType(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = 65535 & i0;

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 32: goto label2;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private void playWirelessChargingStartedSound()
    {
        com.android.server.power.Notifier r0;
        java.lang.String r1, $r10;
        android.net.Uri r2;
        android.media.Ringtone r3;
        android.content.Context $r4, $r11;
        android.content.ContentResolver $r5;
        com.android.server.power.SuspendBlocker $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: com.android.server.power.Notifier;

        $r4 = r0.<com.android.server.power.Notifier: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r1 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r5, "wireless_charging_started_sound");

        if r1 == null goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r10);

        if r2 == null goto label1;

        $r11 = r0.<com.android.server.power.Notifier: android.content.Context mContext>;

        r3 = staticinvoke <android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>($r11, r2);

        if r3 == null goto label1;

        virtualinvoke r3.<android.media.Ringtone: void setStreamType(int)>(1);

        virtualinvoke r3.<android.media.Ringtone: void play()>();

     label1:
        $r6 = r0.<com.android.server.power.Notifier: com.android.server.power.SuspendBlocker mSuspendBlocker>;

        interfaceinvoke $r6.<com.android.server.power.SuspendBlocker: void release()>();

        return;
    }

    private void sendGoToSleepBroadcast(int)
    {
        com.android.server.power.Notifier r0;
        int i0;
        byte b1;
        java.lang.Object[] r1, r3;
        java.lang.Integer $r4, $r5, $r6, $r7, $r10, $r11;
        android.app.IActivityManager $r8;
        android.view.WindowManagerPolicy $r9;
        boolean $z0;
        android.content.BroadcastReceiver $r12;
        com.android.server.power.Notifier$NotifierHandler $r13;
        android.content.Intent $r14;
        android.os.UserHandle $r15;
        android.os.RemoteException $r16;
        android.content.Context $r17;

        r0 := @this: com.android.server.power.Notifier;

        i0 := @parameter0: int;

        b1 = 2;

        tableswitch(i0)
        {
            case 1: goto label4;
            case 2: goto label5;
            default: goto label1;
        };

     label1:
        r1 = newarray (java.lang.Object)[4];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r1[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b1);

        r1[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r1[2] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r1[3] = $r7;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(2728, r1);

        $r9 = r0.<com.android.server.power.Notifier: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r9.<android.view.WindowManagerPolicy: void screenTurnedOff(int)>(b1);

     label2:
        $r8 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r8.<android.app.IActivityManager: void goingToSleep()>();

     label3:
        $z0 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z0 == 0 goto label6;

        $r17 = r0.<com.android.server.power.Notifier: android.content.Context mContext>;

        $r14 = r0.<com.android.server.power.Notifier: android.content.Intent mScreenOffIntent>;

        $r15 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r12 = r0.<com.android.server.power.Notifier: android.content.BroadcastReceiver mGoToSleepBroadcastDone>;

        $r13 = r0.<com.android.server.power.Notifier: com.android.server.power.Notifier$NotifierHandler mHandler>;

        virtualinvoke $r17.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r14, $r15, null, $r12, $r13, 0, null, null);

        return;

     label4:
        b1 = 1;

        goto label1;

     label5:
        b1 = 3;

        goto label1;

     label6:
        r3 = newarray (java.lang.Object)[2];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        r3[0] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        r3[1] = $r11;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(2727, r3);

        specialinvoke r0.<com.android.server.power.Notifier: void sendNextBroadcast()>();

        return;

     label7:
        $r16 := @caughtexception;

        goto label3;

        catch android.os.RemoteException from label2 to label3 with label7;
    }

    private void sendNextBroadcast()
    {
        com.android.server.power.Notifier r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int i0, i1, $i2, $i3, $i6, $i7;
        boolean $z0, $z1, $z2, $z3;
        long $l4;

        r0 := @this: com.android.server.power.Notifier;

        r1 = r0.<com.android.server.power.Notifier: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i2 = r0.<com.android.server.power.Notifier: int mBroadcastedPowerState>;

        if $i2 != 0 goto label04;

        r0.<com.android.server.power.Notifier: boolean mPendingWakeUpBroadcast> = 0;

        r0.<com.android.server.power.Notifier: int mBroadcastedPowerState> = 1;

     label02:
        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.power.Notifier: long mBroadcastStartTime> = $l4;

        i0 = r0.<com.android.server.power.Notifier: int mBroadcastedPowerState>;

        i1 = r0.<com.android.server.power.Notifier: int mLastGoToSleepReason>;

        exitmonitor r1;

     label03:
        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(2725, 1);

        if i0 != 1 goto label17;

        specialinvoke r0.<com.android.server.power.Notifier: void sendWakeUpBroadcast()>();

        return;

     label04:
        $i3 = r0.<com.android.server.power.Notifier: int mBroadcastedPowerState>;

        if $i3 != 1 goto label12;

        $z2 = r0.<com.android.server.power.Notifier: boolean mPendingWakeUpBroadcast>;

        if $z2 != 0 goto label05;

        $z3 = r0.<com.android.server.power.Notifier: boolean mPendingGoToSleepBroadcast>;

        if $z3 != 0 goto label05;

        $i7 = r0.<com.android.server.power.Notifier: int mActualPowerState>;

        if $i7 != 2 goto label10;

     label05:
        r0.<com.android.server.power.Notifier: boolean mPendingGoToSleepBroadcast> = 0;

        r0.<com.android.server.power.Notifier: int mBroadcastedPowerState> = 2;

     label06:
        goto label02;

     label07:
        $r3 := @caughtexception;

        r2 = $r3;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        specialinvoke r0.<com.android.server.power.Notifier: void finishPendingBroadcastLocked()>();

        exitmonitor r1;

     label11:
        return;

     label12:
        $z0 = r0.<com.android.server.power.Notifier: boolean mPendingWakeUpBroadcast>;

        if $z0 != 0 goto label13;

        $z1 = r0.<com.android.server.power.Notifier: boolean mPendingGoToSleepBroadcast>;

        if $z1 != 0 goto label13;

        $i6 = r0.<com.android.server.power.Notifier: int mActualPowerState>;

        if $i6 != 1 goto label15;

     label13:
        r0.<com.android.server.power.Notifier: boolean mPendingWakeUpBroadcast> = 0;

        r0.<com.android.server.power.Notifier: int mBroadcastedPowerState> = 1;

     label14:
        goto label02;

     label15:
        specialinvoke r0.<com.android.server.power.Notifier: void finishPendingBroadcastLocked()>();

        exitmonitor r1;

     label16:
        return;

     label17:
        specialinvoke r0.<com.android.server.power.Notifier: void sendGoToSleepBroadcast(int)>(i1);

        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
        catch java.lang.Throwable from label12 to label13 with label07;
        catch java.lang.Throwable from label13 to label14 with label07;
        catch java.lang.Throwable from label15 to label16 with label07;
    }

    private void sendUserActivity()
    {
        com.android.server.power.Notifier r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean $z0;
        android.view.WindowManagerPolicy $r3;

        r0 := @this: com.android.server.power.Notifier;

        r1 = r0.<com.android.server.power.Notifier: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.power.Notifier: boolean mUserActivityPending>;

        if $z0 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.power.Notifier: boolean mUserActivityPending> = 0;

        exitmonitor r1;

     label4:
        $r3 = r0.<com.android.server.power.Notifier: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r3.<android.view.WindowManagerPolicy: void userActivity()>();

        return;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void sendWakeUpBroadcast()
    {
        com.android.server.power.Notifier r0;
        java.lang.Object[] r1, r3;
        java.lang.Integer $r4, $r5, $r6, $r7, $r11, $r12;
        android.view.WindowManagerPolicy$ScreenOnListener $r8;
        android.view.WindowManagerPolicy $r9;
        boolean $z0;
        android.app.IActivityManager $r10;
        com.android.server.power.Notifier$NotifierHandler $r13;
        android.os.UserHandle $r14;
        android.content.BroadcastReceiver $r15;
        android.content.Context $r16;
        android.content.Intent $r17;
        android.os.RemoteException $r18;

        r0 := @this: com.android.server.power.Notifier;

        r1 = newarray (java.lang.Object)[4];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        r1[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r1[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r1[2] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r1[3] = $r7;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(2728, r1);

        $r9 = r0.<com.android.server.power.Notifier: android.view.WindowManagerPolicy mPolicy>;

        $r8 = r0.<com.android.server.power.Notifier: android.view.WindowManagerPolicy$ScreenOnListener mScreenOnListener>;

        interfaceinvoke $r9.<android.view.WindowManagerPolicy: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)>($r8);

     label1:
        $r10 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r10.<android.app.IActivityManager: void wakingUp()>();

     label2:
        $z0 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z0 == 0 goto label3;

        $r16 = r0.<com.android.server.power.Notifier: android.content.Context mContext>;

        $r17 = r0.<com.android.server.power.Notifier: android.content.Intent mScreenOnIntent>;

        $r14 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r15 = r0.<com.android.server.power.Notifier: android.content.BroadcastReceiver mWakeUpBroadcastDone>;

        $r13 = r0.<com.android.server.power.Notifier: com.android.server.power.Notifier$NotifierHandler mHandler>;

        virtualinvoke $r16.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r17, $r14, null, $r15, $r13, 0, null, null);

        return;

     label3:
        r3 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        r3[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        r3[1] = $r12;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(2727, r3);

        specialinvoke r0.<com.android.server.power.Notifier: void sendNextBroadcast()>();

        return;

     label4:
        $r18 := @caughtexception;

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private void updatePendingBroadcastLocked()
    {
        com.android.server.power.Notifier r0;
        android.os.Message r1;
        boolean $z0, $z1, $z3;
        int $i0, $i1, $i2;
        com.android.server.power.SuspendBlocker $r2;
        com.android.server.power.Notifier$NotifierHandler $r3, $r4;

        r0 := @this: com.android.server.power.Notifier;

        $z0 = r0.<com.android.server.power.Notifier: boolean mBroadcastInProgress>;

        if $z0 != 0 goto label2;

        $i0 = r0.<com.android.server.power.Notifier: int mActualPowerState>;

        if $i0 == 0 goto label2;

        $z1 = r0.<com.android.server.power.Notifier: boolean mPendingWakeUpBroadcast>;

        if $z1 != 0 goto label1;

        $z3 = r0.<com.android.server.power.Notifier: boolean mPendingGoToSleepBroadcast>;

        if $z3 != 0 goto label1;

        $i2 = r0.<com.android.server.power.Notifier: int mActualPowerState>;

        $i1 = r0.<com.android.server.power.Notifier: int mBroadcastedPowerState>;

        if $i2 == $i1 goto label2;

     label1:
        r0.<com.android.server.power.Notifier: boolean mBroadcastInProgress> = 1;

        $r2 = r0.<com.android.server.power.Notifier: com.android.server.power.SuspendBlocker mSuspendBlocker>;

        interfaceinvoke $r2.<com.android.server.power.SuspendBlocker: void acquire()>();

        $r3 = r0.<com.android.server.power.Notifier: com.android.server.power.Notifier$NotifierHandler mHandler>;

        r1 = virtualinvoke $r3.<com.android.server.power.Notifier$NotifierHandler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r4 = r0.<com.android.server.power.Notifier: com.android.server.power.Notifier$NotifierHandler mHandler>;

        virtualinvoke $r4.<com.android.server.power.Notifier$NotifierHandler: boolean sendMessage(android.os.Message)>(r1);

     label2:
        return;
    }

    public void onGoToSleepFinished()
    {
        com.android.server.power.Notifier r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        int $i0;
        boolean $z0;
        com.android.server.power.Notifier$NotifierHandler $r3;

        r0 := @this: com.android.server.power.Notifier;

        r1 = r0.<com.android.server.power.Notifier: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.power.Notifier: int mActualPowerState>;

        if $i0 == 2 goto label3;

        r0.<com.android.server.power.Notifier: int mActualPowerState> = 2;

        r0.<com.android.server.power.Notifier: boolean mPendingGoToSleepBroadcast> = 1;

        $z0 = r0.<com.android.server.power.Notifier: boolean mUserActivityPending>;

        if $z0 == 0 goto label2;

        r0.<com.android.server.power.Notifier: boolean mUserActivityPending> = 0;

        $r3 = r0.<com.android.server.power.Notifier: com.android.server.power.Notifier$NotifierHandler mHandler>;

        virtualinvoke $r3.<com.android.server.power.Notifier$NotifierHandler: void removeMessages(int)>(1);

     label2:
        specialinvoke r0.<com.android.server.power.Notifier: void updatePendingBroadcastLocked()>();

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void onGoToSleepStarted(int)
    {
        com.android.server.power.Notifier r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.power.Notifier;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.power.Notifier: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.power.Notifier: int mLastGoToSleepReason> = i0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onScreenBrightness(int)
    {
        com.android.server.power.Notifier r0;
        int i0;
        com.android.internal.app.IBatteryStats $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.power.Notifier;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.server.power.Notifier: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r2.<com.android.internal.app.IBatteryStats: void noteScreenBrightness(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onScreenOff()
    {
        com.android.server.power.Notifier r0;
        com.android.internal.app.IBatteryStats $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.power.Notifier;

     label1:
        $r2 = r0.<com.android.server.power.Notifier: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r2.<com.android.internal.app.IBatteryStats: void noteScreenOff()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onScreenOn()
    {
        com.android.server.power.Notifier r0;
        com.android.internal.app.IBatteryStats $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.power.Notifier;

     label1:
        $r2 = r0.<com.android.server.power.Notifier: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r2.<com.android.internal.app.IBatteryStats: void noteScreenOn()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onUserActivity(int, int)
    {
        com.android.server.power.Notifier r0;
        int i0, i1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r9;
        android.os.Message r4;
        com.android.internal.app.IBatteryStats $r5;
        boolean $z0;
        com.android.server.power.Notifier$NotifierHandler $r6, $r7;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.power.Notifier;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r5 = r0.<com.android.server.power.Notifier: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r5.<com.android.internal.app.IBatteryStats: void noteUserActivity(int,int)>(i1, i0);

     label2:
        r2 = r0.<com.android.server.power.Notifier: java.lang.Object mLock>;

        entermonitor r2;

     label3:
        $z0 = r0.<com.android.server.power.Notifier: boolean mUserActivityPending>;

        if $z0 != 0 goto label4;

        r0.<com.android.server.power.Notifier: boolean mUserActivityPending> = 1;

        $r6 = r0.<com.android.server.power.Notifier: com.android.server.power.Notifier$NotifierHandler mHandler>;

        r4 = virtualinvoke $r6.<com.android.server.power.Notifier$NotifierHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r4.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r7 = r0.<com.android.server.power.Notifier: com.android.server.power.Notifier$NotifierHandler mHandler>;

        virtualinvoke $r7.<com.android.server.power.Notifier$NotifierHandler: boolean sendMessage(android.os.Message)>(r4);

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

     label9:
        $r8 := @caughtexception;

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void onWakeLockAcquired(int, java.lang.String, java.lang.String, int, int, android.os.WorkSource)
    {
        com.android.server.power.Notifier r0;
        int i0, i1, i2, i3;
        java.lang.String r1, r2;
        android.os.WorkSource r3;
        com.android.internal.app.IBatteryStats $r5, $r9;
        com.android.internal.app.IAppOpsService $r6, $r7;
        android.os.IBinder $r8;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.power.Notifier;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.WorkSource;

     label1:
        i3 = staticinvoke <com.android.server.power.Notifier: int getBatteryStatsWakeLockMonitorType(int)>(i0);

     label2:
        if r3 == null goto label5;

     label3:
        $r9 = r0.<com.android.server.power.Notifier: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r9.<com.android.internal.app.IBatteryStats: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)>(r3, i2, r1, i3);

     label4:
        return;

     label5:
        $r5 = r0.<com.android.server.power.Notifier: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r5.<com.android.internal.app.IBatteryStats: void noteStartWakelock(int,int,java.lang.String,int)>(i1, i2, r1, i3);

        $r7 = r0.<com.android.server.power.Notifier: com.android.internal.app.IAppOpsService mAppOps>;

        $r6 = r0.<com.android.server.power.Notifier: com.android.internal.app.IAppOpsService mAppOps>;

        $r8 = staticinvoke <android.app.AppOpsManager: android.os.IBinder getToken(com.android.internal.app.IAppOpsService)>($r6);

        interfaceinvoke $r7.<com.android.internal.app.IAppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String)>($r8, 40, i1, r2);

     label6:
        return;

     label7:
        $r10 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void onWakeLockReleased(int, java.lang.String, java.lang.String, int, int, android.os.WorkSource)
    {
        com.android.server.power.Notifier r0;
        int i0, i1, i2, i3;
        java.lang.String r1, r2;
        android.os.WorkSource r3;
        com.android.internal.app.IBatteryStats $r5, $r9;
        com.android.internal.app.IAppOpsService $r6, $r7;
        android.os.IBinder $r8;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.power.Notifier;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.WorkSource;

     label1:
        i3 = staticinvoke <com.android.server.power.Notifier: int getBatteryStatsWakeLockMonitorType(int)>(i0);

     label2:
        if r3 == null goto label5;

     label3:
        $r9 = r0.<com.android.server.power.Notifier: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r9.<com.android.internal.app.IBatteryStats: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)>(r3, i2, r1, i3);

     label4:
        return;

     label5:
        $r5 = r0.<com.android.server.power.Notifier: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r5.<com.android.internal.app.IBatteryStats: void noteStopWakelock(int,int,java.lang.String,int)>(i1, i2, r1, i3);

        $r7 = r0.<com.android.server.power.Notifier: com.android.internal.app.IAppOpsService mAppOps>;

        $r6 = r0.<com.android.server.power.Notifier: com.android.internal.app.IAppOpsService mAppOps>;

        $r8 = staticinvoke <android.app.AppOpsManager: android.os.IBinder getToken(com.android.internal.app.IAppOpsService)>($r6);

        interfaceinvoke $r7.<com.android.internal.app.IAppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String)>($r8, 40, i1, r2);

     label6:
        return;

     label7:
        $r10 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void onWakeUpFinished()
    {
        com.android.server.power.Notifier r0;

        r0 := @this: com.android.server.power.Notifier;

        return;
    }

    public void onWakeUpStarted()
    {
        com.android.server.power.Notifier r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        int $i0;
        boolean $z0;
        com.android.server.power.ScreenOnBlocker $r3;

        r0 := @this: com.android.server.power.Notifier;

        r1 = r0.<com.android.server.power.Notifier: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.power.Notifier: int mActualPowerState>;

        if $i0 == 1 goto label3;

        r0.<com.android.server.power.Notifier: int mActualPowerState> = 1;

        r0.<com.android.server.power.Notifier: boolean mPendingWakeUpBroadcast> = 1;

        $z0 = r0.<com.android.server.power.Notifier: boolean mScreenOnBlockerAcquired>;

        if $z0 != 0 goto label2;

        r0.<com.android.server.power.Notifier: boolean mScreenOnBlockerAcquired> = 1;

        $r3 = r0.<com.android.server.power.Notifier: com.android.server.power.ScreenOnBlocker mScreenOnBlocker>;

        interfaceinvoke $r3.<com.android.server.power.ScreenOnBlocker: void acquire()>();

     label2:
        specialinvoke r0.<com.android.server.power.Notifier: void updatePendingBroadcastLocked()>();

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void onWirelessChargingStarted()
    {
        com.android.server.power.Notifier r0;
        android.os.Message r1;
        com.android.server.power.SuspendBlocker $r2;
        com.android.server.power.Notifier$NotifierHandler $r3, $r4;

        r0 := @this: com.android.server.power.Notifier;

        $r2 = r0.<com.android.server.power.Notifier: com.android.server.power.SuspendBlocker mSuspendBlocker>;

        interfaceinvoke $r2.<com.android.server.power.SuspendBlocker: void acquire()>();

        $r3 = r0.<com.android.server.power.Notifier: com.android.server.power.Notifier$NotifierHandler mHandler>;

        r1 = virtualinvoke $r3.<com.android.server.power.Notifier$NotifierHandler: android.os.Message obtainMessage(int)>(3);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r4 = r0.<com.android.server.power.Notifier: com.android.server.power.Notifier$NotifierHandler mHandler>;

        virtualinvoke $r4.<com.android.server.power.Notifier$NotifierHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.power.Notifier: java.lang.String TAG> = "PowerManagerNotifier";

        <com.android.server.power.Notifier: int POWER_STATE_UNKNOWN> = 0;

        <com.android.server.power.Notifier: int POWER_STATE_AWAKE> = 1;

        <com.android.server.power.Notifier: int POWER_STATE_ASLEEP> = 2;

        <com.android.server.power.Notifier: int MSG_WIRELESS_CHARGING_STARTED> = 3;

        <com.android.server.power.Notifier: int MSG_USER_ACTIVITY> = 1;

        <com.android.server.power.Notifier: int MSG_BROADCAST> = 2;

        <com.android.server.power.Notifier: boolean DEBUG> = 0;

        return;
    }
}
