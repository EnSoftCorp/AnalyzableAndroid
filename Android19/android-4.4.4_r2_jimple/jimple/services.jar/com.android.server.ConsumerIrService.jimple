public class com.android.server.ConsumerIrService extends android.hardware.IConsumerIrService$Stub
{
    private static final int MAX_XMIT_TIME;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final int mHal;
    private final java.lang.Object mHalLock;
    private final android.os.PowerManager$WakeLock mWakeLock;

    void <init>(android.content.Context)
    {
        com.android.server.ConsumerIrService r0;
        android.content.Context r1, $r7;
        java.lang.Object $r2, $r3;
        android.os.PowerManager $r4;
        android.os.PowerManager$WakeLock $r5, $r6;
        int $i0, $i1, $i2;
        android.content.pm.PackageManager $r8;
        boolean $z0;
        java.lang.RuntimeException $r9, $r10;

        r0 := @this: com.android.server.ConsumerIrService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.hardware.IConsumerIrService$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.ConsumerIrService: java.lang.Object mHalLock> = $r2;

        r0.<com.android.server.ConsumerIrService: android.content.Context mContext> = r1;

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r4 = (android.os.PowerManager) $r3;

        $r5 = virtualinvoke $r4.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "ConsumerIrService");

        r0.<com.android.server.ConsumerIrService: android.os.PowerManager$WakeLock mWakeLock> = $r5;

        $r6 = r0.<com.android.server.ConsumerIrService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(1);

        $i0 = staticinvoke <com.android.server.ConsumerIrService: int halOpen()>();

        r0.<com.android.server.ConsumerIrService: int mHal> = $i0;

        $r7 = r0.<com.android.server.ConsumerIrService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r8.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.consumerir");

        if $z0 == 0 goto label1;

        $i2 = r0.<com.android.server.ConsumerIrService: int mHal>;

        if $i2 != 0 goto label2;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("FEATURE_CONSUMER_IR present, but no IR HAL loaded!");

        throw $r10;

     label1:
        $i1 = r0.<com.android.server.ConsumerIrService: int mHal>;

        if $i1 == 0 goto label2;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("IR HAL present, but FEATURE_CONSUMER_IR is not set!");

        throw $r9;

     label2:
        return;
    }

    private static native int[] halGetCarrierFrequencies(int);

    private static native int halOpen();

    private static native int halTransmit(int, int, int[]);

    private void throwIfNoIrEmitter()
    {
        com.android.server.ConsumerIrService r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.android.server.ConsumerIrService;

        $i0 = r0.<com.android.server.ConsumerIrService: int mHal>;

        if $i0 != 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("IR emitter not available");

        throw $r1;

     label1:
        return;
    }

    public int[] getCarrierFrequencies()
    {
        com.android.server.ConsumerIrService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r6;
        int[] r3;
        android.content.Context $r4;
        int $i0, $i1;
        java.lang.SecurityException $r5;

        r0 := @this: com.android.server.ConsumerIrService;

        $r4 = r0.<com.android.server.ConsumerIrService: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.TRANSMIT_IR");

        if $i0 == 0 goto label1;

        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires TRANSMIT_IR permission");

        throw $r5;

     label1:
        specialinvoke r0.<com.android.server.ConsumerIrService: void throwIfNoIrEmitter()>();

        r1 = r0.<com.android.server.ConsumerIrService: java.lang.Object mHalLock>;

        entermonitor r1;

     label2:
        $i1 = r0.<com.android.server.ConsumerIrService: int mHal>;

        r3 = staticinvoke <com.android.server.ConsumerIrService: int[] halGetCarrierFrequencies(int)>($i1);

        exitmonitor r1;

     label3:
        return r3;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean hasIrEmitter()
    {
        com.android.server.ConsumerIrService r0;
        int $i0;

        r0 := @this: com.android.server.ConsumerIrService;

        $i0 = r0.<com.android.server.ConsumerIrService: int mHal>;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void transmit(java.lang.String, int, int[])
    {
        com.android.server.ConsumerIrService r0;
        java.lang.String r1, $r9;
        int i0, i2, i3, i4, i5, $i6, $i8;
        int[] r2;
        long l1, $l10;
        java.lang.Object r3;
        java.lang.Throwable r4, $r13;
        android.content.Context $r5;
        byte $b7;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.IllegalArgumentException $r10, $r12;
        java.lang.SecurityException $r11;

        r0 := @this: com.android.server.ConsumerIrService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        $r5 = r0.<com.android.server.ConsumerIrService: android.content.Context mContext>;

        $i6 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.TRANSMIT_IR");

        if $i6 == 0 goto label01;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires TRANSMIT_IR permission");

        throw $r11;

     label01:
        l1 = 0L;

        i2 = lengthof r2;

        i3 = 0;

     label02:
        if i3 >= i2 goto label04;

        i5 = r2[i3];

        if i5 > 0 goto label03;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Non-positive IR slice");

        throw $r12;

     label03:
        $l10 = (long) i5;

        l1 = l1 + $l10;

        i3 = i3 + 1;

        goto label02;

     label04:
        $b7 = l1 cmp 2000000L;

        if $b7 <= 0 goto label05;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IR pattern too long");

        throw $r10;

     label05:
        specialinvoke r0.<com.android.server.ConsumerIrService: void throwIfNoIrEmitter()>();

        r3 = r0.<com.android.server.ConsumerIrService: java.lang.Object mHalLock>;

        entermonitor r3;

     label06:
        $i8 = r0.<com.android.server.ConsumerIrService: int mHal>;

        i4 = staticinvoke <com.android.server.ConsumerIrService: int halTransmit(int,int,int[])>($i8, i0, r2);

     label07:
        if i4 >= 0 goto label09;

     label08:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error transmitting: ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConsumerIrService", $r9);

     label09:
        exitmonitor r3;

     label10:
        return;

     label11:
        $r13 := @caughtexception;

        r4 = $r13;

     label12:
        exitmonitor r3;

     label13:
        throw r4;

        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public static void <clinit>()
    {
        <com.android.server.ConsumerIrService: java.lang.String TAG> = "ConsumerIrService";

        <com.android.server.ConsumerIrService: int MAX_XMIT_TIME> = 2000000;

        return;
    }
}
