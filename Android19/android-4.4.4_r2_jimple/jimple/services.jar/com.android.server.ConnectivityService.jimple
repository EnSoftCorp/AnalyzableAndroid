public class com.android.server.ConnectivityService extends android.net.IConnectivityManager$Stub
{
    private static final java.lang.String ACTION_PKT_CNT_SAMPLE_INTERVAL_ELAPSED;
    private static final boolean ADD;
    private static final java.lang.String ATTR_MCC;
    private static final java.lang.String ATTR_MNC;
    private static final int CMP_RESULT_CODE_CONNECTABLE;
    private static final int CMP_RESULT_CODE_IS_PROVISIONING;
    private static final int CMP_RESULT_CODE_NO_CONNECTION;
    private static final int CMP_RESULT_CODE_NO_DNS;
    private static final int CMP_RESULT_CODE_NO_TCP_CONNECTION;
    private static final int CMP_RESULT_CODE_PROVISIONING_NETWORK;
    private static final int CMP_RESULT_CODE_REDIRECTED;
    private static final java.lang.String CONNECTED_TO_PROVISIONING_NETWORK_ACTION;
    private static final boolean DBG;
    private static final int DEFAULT_FAIL_FAST_TIME_MS;
    private static final int DEFAULT_SAMPLING_INTERVAL_IN_SECONDS;
    private static final int DEFAULT_START_SAMPLING_INTERVAL_IN_SECONDS;
    private static final int DISABLED;
    private static final int ENABLED;
    private static final int EVENT_APPLY_GLOBAL_HTTP_PROXY;
    private static final int EVENT_CHANGE_MOBILE_DATA_ENABLED;
    private static final int EVENT_CLEAR_NET_TRANSITION_WAKELOCK;
    private static final int EVENT_ENABLE_FAIL_FAST_MOBILE_DATA;
    private static final int EVENT_INET_CONDITION_CHANGE;
    private static final int EVENT_INET_CONDITION_HOLD_END;
    private static final int EVENT_PROXY_HAS_CHANGED;
    private static final int EVENT_RESTORE_DEFAULT_NETWORK;
    private static final int EVENT_SAMPLE_INTERVAL_ELAPSED;
    private static final int EVENT_SEND_STICKY_BROADCAST_INTENT;
    private static final int EVENT_SET_DEPENDENCY_MET;
    private static final int EVENT_SET_MOBILE_DATA;
    private static final int EVENT_SET_NETWORK_PREFERENCE;
    private static final int EVENT_SET_POLICY_DATA_ENABLE;
    private static final int EVENT_VPN_STATE_CHANGED;
    private static final boolean EXEMPT;
    private static final java.lang.String FAIL_FAST_TIME_MS;
    private static final int INET_CONDITION_LOG_MAX_SIZE;
    private static final boolean LOGD_RULES;
    private static final int MAX_HOSTROUTE_CYCLE_COUNT;
    private static final java.lang.String NETWORK_RESTORE_DELAY_PROP_NAME;
    private static final java.lang.String NOTIFICATION_ID;
    private static final int PROVISIONING;
    private static final java.lang.String PROVISIONING_URL_PATH;
    private static final int REDIRECTED_PROVISIONING;
    private static final boolean REMOVE;
    private static final int RESTORE_DEFAULT_NETWORK_DELAY;
    private static final int SAMPLE_INTERVAL_ELAPSED_REQUEST_CODE;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_PROVISIONING_URL;
    private static final java.lang.String TAG_PROVISIONING_URLS;
    private static final java.lang.String TAG_REDIRECTED_URL;
    private static final boolean TO_DEFAULT_TABLE;
    private static final boolean TO_SECONDARY_TABLE;
    private static final boolean UNEXEMPT;
    private static final boolean VDBG;
    private static com.android.server.ConnectivityService sServiceInstance;
    private int mActiveDefaultNetwork;
    private java.util.Collection mAddedRoutes;
    android.app.AlarmManager mAlarmManager;
    private android.app.AppOpsManager mAppOpsManager;
    private android.net.CaptivePortalTracker mCaptivePortalTracker;
    private com.android.server.connectivity.Nat464Xlat mClat;
    private android.content.Context mContext;
    private android.net.LinkProperties[] mCurrentLinkProperties;
    private android.net.INetworkManagementEventObserver mDataActivityObserver;
    private com.android.server.connectivity.DataConnectionStats mDataConnectionStats;
    private int mDefaultConnectionSequence;
    private java.net.InetAddress mDefaultDns;
    private int mDefaultInetCondition;
    private int mDefaultInetConditionPublished;
    private android.net.ProxyProperties mDefaultProxy;
    private boolean mDefaultProxyDisabled;
    private java.lang.Object mDnsLock;
    private java.util.concurrent.atomic.AtomicInteger mEnableFailFastMobileDataTag;
    private java.util.Collection mExemptAddresses;
    private java.util.List mFeatureUsers;
    private android.net.ProxyProperties mGlobalProxy;
    private com.android.server.ConnectivityService$InternalHandler mHandler;
    private boolean mInetConditionChangeInFlight;
    private java.util.ArrayList mInetLog;
    private android.content.Intent mInitialBroadcast;
    private java.util.concurrent.atomic.AtomicBoolean mIsCheckingMobileProvisioning;
    private volatile boolean mIsNotificationVisible;
    private java.util.concurrent.atomic.AtomicBoolean mIsProvisioningNetwork;
    private java.util.concurrent.atomic.AtomicBoolean mIsStartingProvisioning;
    private android.security.KeyStore mKeyStore;
    private boolean mLockdownEnabled;
    private com.android.server.net.LockdownVpnTracker mLockdownTracker;
    private java.util.HashSet mMeteredIfaces;
    android.net.NetworkConfig[] mNetConfigs;
    private java.util.List[] mNetRequestersPids;
    private android.net.NetworkStateTracker[] mNetTrackers;
    private android.os.PowerManager$WakeLock mNetTransitionWakeLock;
    private java.lang.String mNetTransitionWakeLockCausedBy;
    private int mNetTransitionWakeLockSerialNumber;
    private int mNetTransitionWakeLockTimeout;
    private android.os.INetworkManagementService mNetd;
    private int mNetworkPreference;
    int mNetworksDefined;
    private int mNumDnsEntries;
    private com.android.server.connectivity.PacManager mPacManager;
    private android.net.INetworkPolicyListener mPolicyListener;
    private android.net.INetworkPolicyManager mPolicyManager;
    private int[] mPriorityList;
    java.util.List mProtectedNetworks;
    private android.content.BroadcastReceiver mProvisioningReceiver;
    private final java.io.File mProvisioningUrlFile;
    private java.lang.Object mProxyLock;
    com.android.server.ConnectivityService$RadioAttributes[] mRadioAttributes;
    private final java.lang.Object mRoutesLock;
    private java.lang.Object mRulesLock;
    private android.app.PendingIntent mSampleIntervalElapsedIntent;
    private com.android.server.ConnectivityService$SettingsObserver mSettingsObserver;
    private boolean mSystemReady;
    android.telephony.TelephonyManager mTelephonyManager;
    private boolean mTestMode;
    private com.android.server.connectivity.Tethering mTethering;
    private com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler;
    private android.util.SparseIntArray mUidRules;
    private android.content.BroadcastReceiver mUserIntentReceiver;
    private android.content.BroadcastReceiver mUserPresentReceiver;
    private com.android.server.ConnectivityService$VpnCallback mVpnCallback;
    private final android.util.SparseArray mVpns;

    public void <init>(android.content.Context, android.os.INetworkManagementService, android.net.INetworkStatsService, android.net.INetworkPolicyManager)
    {
        com.android.server.ConnectivityService r0;
        android.content.Context r1;
        android.os.INetworkManagementService r2;
        android.net.INetworkStatsService r3;
        android.net.INetworkPolicyManager r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.INetworkManagementService;

        r3 := @parameter2: android.net.INetworkStatsService;

        r4 := @parameter3: android.net.INetworkPolicyManager;

        specialinvoke r0.<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager,com.android.server.ConnectivityService$NetworkFactory)>(r1, r2, r3, r4, null);

        return;
    }

    public void <init>(android.content.Context, android.os.INetworkManagementService, android.net.INetworkStatsService, android.net.INetworkPolicyManager, com.android.server.ConnectivityService$NetworkFactory)
    {
        com.android.server.ConnectivityService r0;
        android.content.Context r1, $r63, $r69, $r71, $r96, $r101, $r112, $r116, $r118, $r124, $r129, $r135, $r142, $r143;
        android.os.INetworkManagementService r2, $r67, $r95, $r100, $r103, $r105, $r107;
        android.net.INetworkStatsService r3;
        android.net.INetworkPolicyManager r4, $r65, $r75;
        com.android.server.ConnectivityService$NetworkFactory r5;
        android.os.HandlerThread r6, r249;
        java.lang.String r7, r28, r30, $r59, $r86, $r92, $r153, $r160, $r176, $r182, $r184, $r186, $r191, $r198, $r200, $r206, $r209, $r213, $r215, $r220, $r224, $r226, r253;
        android.os.RemoteException r9, r19, $r196, $r221;
        java.lang.String[] r10, r12;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51;
        com.android.server.ConnectivityService$RadioAttributes r11, $r171, $r202, r254;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z10, $z11;
        int[] r13, r14, r15, r24, r26, $r98;
        android.content.IntentFilter r16, r18, r20, r272, r278, r280, r282;
        android.content.Intent r17, r277;
        android.net.NetworkStateTracker r21;
        android.net.NetworkConfig r22, r27, r32, $r149, $r163, $r173, r260;
        java.lang.IllegalArgumentException r23, $r216, $r228;
        android.net.NetworkConfig[] r25, $r79, $r138, $r147, $r162, $r170, $r174;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler r29, $r115, $r152, r251;
        java.util.HashSet $r33;
        android.os.Looper $r52, $r60, $r108;
        android.content.res.Resources $r57, $r78, $r83, $r85, $r97;
        java.net.InetAddress $r58;
        android.content.ContentResolver $r61, $r189;
        android.security.KeyStore $r62;
        java.lang.Object $r64, $r66, $r68, $r72, $r76, $r123, $r133, r232, r234, r235, r238;
        android.os.PowerManager$WakeLock $r70;
        android.os.PowerManager $r73;
        android.net.INetworkPolicyListener $r74, r285;
        android.telephony.TelephonyManager $r77;
        com.android.server.ConnectivityService$RadioAttributes[] $r80, $r172, $r201, $r205;
        android.net.LinkProperties[] $r81;
        android.net.NetworkStateTracker[] $r82, $r136;
        java.lang.StringBuilder $r87, $r88, $r158, $r159, $r165, $r166, $r167, $r168, $r175, $r178, $r180, $r181, $r183, $r187, $r188, $r193, $r194, $r199, $r204, $r208, $r210, $r211, $r212, $r214, $r218, $r219, $r223, $r225, r255, r256, r257, r258, r259, r261, r262, r263, r264, r266, r270, r283;
        java.util.List[] $r91, $r151;
        com.android.server.ConnectivityService$InternalHandler $r93, $r125, $r146, r250;
        java.util.ArrayList[] $r99;
        com.android.server.connectivity.Tethering $r102, r271;
        android.net.INetworkManagementEventObserver $r104, r284, r288, r289;
        com.android.server.connectivity.Nat464Xlat $r106, r273;
        android.os.UserHandle $r110;
        android.content.BroadcastReceiver $r111, $r134;
        android.app.PendingIntent $r117, $r121;
        android.app.AlarmManager $r122;
        com.android.server.connectivity.DataConnectionStats $r128, r276;
        com.android.server.ConnectivityService$SettingsObserver $r131, r275;
        android.app.AppOpsManager $r137;
        java.lang.Integer $r155, $r157;
        java.util.List $r156, $r161;
        java.lang.Exception $r227;
        android.util.SparseArray r230;
        com.android.server.ConnectivityService$VpnCallback r231;
        android.util.SparseIntArray r233;
        java.util.ArrayList r236, r237, r265, r268, r269, r274;
        java.util.concurrent.atomic.AtomicInteger r239;
        com.android.server.ConnectivityService$2 r240;
        com.android.server.ConnectivityService$3 r241;
        com.android.server.ConnectivityService$4 r242;
        java.util.concurrent.atomic.AtomicBoolean r243, r244, r245;
        com.android.server.ConnectivityService$6 r246;
        java.io.File r247;
        com.android.server.ConnectivityService$7 r248;
        com.android.server.ConnectivityService$DefaultNetworkFactory r252;
        java.lang.IllegalStateException r267;
        com.android.server.ConnectivityService$1 r279;
        com.android.server.connectivity.PacManager r281;
        android.net.IConnectivityManager r286, r287;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.INetworkManagementService;

        r3 := @parameter2: android.net.INetworkStatsService;

        r4 := @parameter3: android.net.INetworkPolicyManager;

        r5 := @parameter4: com.android.server.ConnectivityService$NetworkFactory;

        specialinvoke r0.<android.net.IConnectivityManager$Stub: void <init>()>();

        r230 = new android.util.SparseArray;

        specialinvoke r230.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns> = r230;

        r231 = new com.android.server.ConnectivityService$VpnCallback;

        specialinvoke r231.<com.android.server.ConnectivityService$VpnCallback: void <init>(com.android.server.ConnectivityService,com.android.server.ConnectivityService$1)>(r0, null);

        r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$VpnCallback mVpnCallback> = r231;

        r232 = new java.lang.Object;

        specialinvoke r232.<java.lang.Object: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.lang.Object mRulesLock> = r232;

        r233 = new android.util.SparseIntArray;

        specialinvoke r233.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules> = r233;

        $r33 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        r0.<com.android.server.ConnectivityService: java.util.HashSet mMeteredIfaces> = $r33;

        r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork> = -1;

        r0.<com.android.server.ConnectivityService: int mDefaultInetCondition> = 0;

        r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = 0;

        r0.<com.android.server.ConnectivityService: boolean mInetConditionChangeInFlight> = 0;

        r0.<com.android.server.ConnectivityService: int mDefaultConnectionSequence> = 0;

        r234 = new java.lang.Object;

        specialinvoke r234.<java.lang.Object: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.lang.Object mDnsLock> = r234;

        r0.<com.android.server.ConnectivityService: java.lang.String mNetTransitionWakeLockCausedBy> = "";

        r235 = new java.lang.Object;

        specialinvoke r235.<java.lang.Object: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.lang.Object mRoutesLock> = r235;

        r236 = new java.util.ArrayList;

        specialinvoke r236.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.util.Collection mAddedRoutes> = r236;

        r237 = new java.util.ArrayList;

        specialinvoke r237.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.util.Collection mExemptAddresses> = r237;

        r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mDefaultProxy> = null;

        r238 = new java.lang.Object;

        specialinvoke r238.<java.lang.Object: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.lang.Object mProxyLock> = r238;

        r0.<com.android.server.ConnectivityService: boolean mDefaultProxyDisabled> = 0;

        r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy> = null;

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PacManager mPacManager> = null;

        r239 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r239.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicInteger mEnableFailFastMobileDataTag> = r239;

        r240 = new com.android.server.ConnectivityService$2;

        specialinvoke r240.<com.android.server.ConnectivityService$2: void <init>(com.android.server.ConnectivityService)>(r0);

        r284 = (android.net.INetworkManagementEventObserver) r240;

        r0.<com.android.server.ConnectivityService: android.net.INetworkManagementEventObserver mDataActivityObserver> = r284;

        r241 = new com.android.server.ConnectivityService$3;

        specialinvoke r241.<com.android.server.ConnectivityService$3: void <init>(com.android.server.ConnectivityService)>(r0);

        r285 = (android.net.INetworkPolicyListener) r241;

        r0.<com.android.server.ConnectivityService: android.net.INetworkPolicyListener mPolicyListener> = r285;

        r242 = new com.android.server.ConnectivityService$4;

        specialinvoke r242.<com.android.server.ConnectivityService$4: void <init>(com.android.server.ConnectivityService)>(r0);

        r0.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mUserPresentReceiver> = r242;

        r243 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r243.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicBoolean mIsProvisioningNetwork> = r243;

        r244 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r244.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicBoolean mIsStartingProvisioning> = r244;

        r245 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r245.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicBoolean mIsCheckingMobileProvisioning> = r245;

        r246 = new com.android.server.ConnectivityService$6;

        specialinvoke r246.<com.android.server.ConnectivityService$6: void <init>(com.android.server.ConnectivityService)>(r0);

        r0.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mProvisioningReceiver> = r246;

        r0.<com.android.server.ConnectivityService: boolean mIsNotificationVisible> = 0;

        r247 = new java.io.File;

        specialinvoke r247.<java.io.File: void <init>(java.lang.String)>("/data/misc/radio/provisioning_urls.xml");

        r0.<com.android.server.ConnectivityService: java.io.File mProvisioningUrlFile> = r247;

        r248 = new com.android.server.ConnectivityService$7;

        specialinvoke r248.<com.android.server.ConnectivityService$7: void <init>(com.android.server.ConnectivityService)>(r0);

        r0.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mUserIntentReceiver> = r248;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("ConnectivityService starting up");

        r249 = new android.os.HandlerThread;

        specialinvoke r249.<android.os.HandlerThread: void <init>(java.lang.String)>("ConnectivityServiceThread");

        r6 = r249;

        virtualinvoke r6.<android.os.HandlerThread: void start()>();

        r250 = new com.android.server.ConnectivityService$InternalHandler;

        $r52 = virtualinvoke r6.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke r250.<com.android.server.ConnectivityService$InternalHandler: void <init>(com.android.server.ConnectivityService,android.os.Looper)>(r0, $r52);

        r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler> = r250;

        r251 = new com.android.server.ConnectivityService$NetworkStateTrackerHandler;

        $r60 = virtualinvoke r6.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke r251.<com.android.server.ConnectivityService$NetworkStateTrackerHandler: void <init>(com.android.server.ConnectivityService,android.os.Looper)>(r0, $r60);

        r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler> = r251;

        if r5 != null goto label01;

        r29 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        r252 = new com.android.server.ConnectivityService$DefaultNetworkFactory;

        specialinvoke r252.<com.android.server.ConnectivityService$DefaultNetworkFactory: void <init>(android.content.Context,android.os.Handler)>(r1, r29);

        r5 = r252;

     label01:
        $r59 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("net.hostname");

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r59);

        if $z2 == 0 goto label02;

        $r189 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r30 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r189, "android_id");

        if r30 == null goto label02;

        $i46 = virtualinvoke r30.<java.lang.String: int length()>();

        if $i46 <= 0 goto label02;

        r253 = new java.lang.String;

        specialinvoke r253.<java.lang.String: void <init>(java.lang.String)>("android-");

        $r191 = virtualinvoke r253.<java.lang.String: java.lang.String concat(java.lang.String)>(r30);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("net.hostname", $r191);

     label02:
        $r61 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r7 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r61, "default_dns_server");

        if r7 == null goto label03;

        $i47 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i47 != 0 goto label04;

     label03:
        $r57 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r7 = virtualinvoke $r57.<android.content.res.Resources: java.lang.String getString(int)>(17039396);

     label04:
        $r58 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>(r7);

        r0.<com.android.server.ConnectivityService: java.net.InetAddress mDefaultDns> = $r58;

     label05:
        $r68 = staticinvoke <com.android.server.ConnectivityService: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "missing Context");

        $r69 = (android.content.Context) $r68;

        r0.<com.android.server.ConnectivityService: android.content.Context mContext> = $r69;

        $r66 = staticinvoke <com.android.server.ConnectivityService: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "missing INetworkManagementService");

        $r67 = (android.os.INetworkManagementService) $r66;

        r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd> = $r67;

        $r64 = staticinvoke <com.android.server.ConnectivityService: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r4, "missing INetworkPolicyManager");

        $r65 = (android.net.INetworkPolicyManager) $r64;

        r0.<com.android.server.ConnectivityService: android.net.INetworkPolicyManager mPolicyManager> = $r65;

        $r62 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore> = $r62;

        $r63 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r76 = virtualinvoke $r63.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r77 = (android.telephony.TelephonyManager) $r76;

        r0.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager> = $r77;

     label06:
        $r75 = r0.<com.android.server.ConnectivityService: android.net.INetworkPolicyManager mPolicyManager>;

        $r74 = r0.<com.android.server.ConnectivityService: android.net.INetworkPolicyListener mPolicyListener>;

        interfaceinvoke $r75.<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>($r74);

     label07:
        $r72 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r73 = (android.os.PowerManager) $r72;

        $r70 = virtualinvoke $r73.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "ConnectivityService");

        r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock> = $r70;

        $r71 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r83 = virtualinvoke $r71.<android.content.Context: android.content.res.Resources getResources()>();

        $i23 = virtualinvoke $r83.<android.content.res.Resources: int getInteger(int)>(17694733);

        r0.<com.android.server.ConnectivityService: int mNetTransitionWakeLockTimeout> = $i23;

        $r82 = newarray (android.net.NetworkStateTracker)[15];

        r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers> = $r82;

        $r81 = newarray (android.net.LinkProperties)[15];

        r0.<com.android.server.ConnectivityService: android.net.LinkProperties[] mCurrentLinkProperties> = $r81;

        $r80 = newarray (com.android.server.ConnectivityService$RadioAttributes)[15];

        r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$RadioAttributes[] mRadioAttributes> = $r80;

        $r79 = newarray (android.net.NetworkConfig)[15];

        r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs> = $r79;

        $r78 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r10 = virtualinvoke $r78.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17235981);

        i0 = lengthof r10;

        i1 = 0;

     label08:
        if i1 >= i0 goto label14;

        r254 = new com.android.server.ConnectivityService$RadioAttributes;

        $r198 = r10[i1];

        specialinvoke r254.<com.android.server.ConnectivityService$RadioAttributes: void <init>(java.lang.String)>($r198);

        r11 = r254;

        $i48 = r11.<com.android.server.ConnectivityService$RadioAttributes: int mType>;

        if $i48 <= 14 goto label12;

        r255 = new java.lang.StringBuilder;

        specialinvoke r255.<java.lang.StringBuilder: void <init>()>();

        $r188 = virtualinvoke r255.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in radioAttributes - ignoring attempt to define type ");

        $i45 = r11.<com.android.server.ConnectivityService$RadioAttributes: int mType>;

        $r187 = virtualinvoke $r188.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i45);

        $r186 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r186);

     label09:
        i1 = i1 + 1;

        goto label08;

     label10:
        $r216 := @caughtexception;

        r256 = new java.lang.StringBuilder;

        specialinvoke r256.<java.lang.StringBuilder: void <init>()>();

        $r218 = virtualinvoke r256.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error setting defaultDns using ");

        $r219 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r220 = virtualinvoke $r219.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r220);

        goto label05;

     label11:
        $r221 := @caughtexception;

        r9 = $r221;

        r257 = new java.lang.StringBuilder;

        specialinvoke r257.<java.lang.StringBuilder: void <init>()>();

        $r223 = virtualinvoke r257.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to register INetworkPolicyListener");

        $r224 = virtualinvoke r9.<android.os.RemoteException: java.lang.String toString()>();

        $r225 = virtualinvoke $r223.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r224);

        $r226 = virtualinvoke $r225.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r226);

        goto label07;

     label12:
        $r201 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$RadioAttributes[] mRadioAttributes>;

        $i49 = r11.<com.android.server.ConnectivityService$RadioAttributes: int mType>;

        $r202 = $r201[$i49];

        if $r202 == null goto label13;

        r258 = new java.lang.StringBuilder;

        specialinvoke r258.<java.lang.StringBuilder: void <init>()>();

        $r204 = virtualinvoke r258.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in radioAttributes - ignoring attempt to redefine type ");

        $i51 = r11.<com.android.server.ConnectivityService$RadioAttributes: int mType>;

        $r208 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i51);

        $r206 = virtualinvoke $r208.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r206);

        goto label09;

     label13:
        $r205 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$RadioAttributes[] mRadioAttributes>;

        $i50 = r11.<com.android.server.ConnectivityService$RadioAttributes: int mType>;

        $r205[$i50] = r11;

        goto label09;

     label14:
        z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.radio.noril", 0);

        r259 = new java.lang.StringBuilder;

        specialinvoke r259.<java.lang.StringBuilder: void <init>()>();

        $r88 = virtualinvoke r259.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wifiOnly=");

        $r87 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r86 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r86);

        $r85 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r12 = virtualinvoke $r85.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17235979);

        i3 = lengthof r12;

        i2 = 0;

     label15:
        if i2 >= i3 goto label27;

        r28 = r12[i2];

     label16:
        r260 = new android.net.NetworkConfig;

        specialinvoke r260.<android.net.NetworkConfig: void <init>(java.lang.String)>(r28);

        r32 = r260;

        $i32 = r32.<android.net.NetworkConfig: int type>;

        if $i32 <= 14 goto label18;

        r261 = new java.lang.StringBuilder;

        specialinvoke r261.<java.lang.StringBuilder: void <init>()>();

        $r175 = virtualinvoke r261.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in networkAttributes - ignoring attempt to define type ");

        $i41 = r32.<android.net.NetworkConfig: int type>;

        $r199 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i41);

        $r200 = virtualinvoke $r199.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r200);

     label17:
        goto label59;

     label18:
        if z0 == 0 goto label21;

     label19:
        $i43 = r32.<android.net.NetworkConfig: int type>;

        $z11 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>($i43);

        if $z11 == 0 goto label21;

        r262 = new java.lang.StringBuilder;

        specialinvoke r262.<java.lang.StringBuilder: void <init>()>();

        $r180 = virtualinvoke r262.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("networkAttributes - ignoring mobile as this dev is wifiOnly ");

        $i42 = r32.<android.net.NetworkConfig: int type>;

        $r178 = virtualinvoke $r180.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i42);

        $r176 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r176);

     label20:
        goto label59;

     label21:
        $r174 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $i33 = r32.<android.net.NetworkConfig: int type>;

        $r173 = $r174[$i33];

        if $r173 == null goto label23;

        r263 = new java.lang.StringBuilder;

        specialinvoke r263.<java.lang.StringBuilder: void <init>()>();

        $r183 = virtualinvoke r263.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in networkAttributes - ignoring attempt to redefine type ");

        $i44 = r32.<android.net.NetworkConfig: int type>;

        $r181 = virtualinvoke $r183.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i44);

        $r182 = virtualinvoke $r181.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r182);

     label22:
        goto label59;

     label23:
        $r172 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$RadioAttributes[] mRadioAttributes>;

        $i40 = r32.<android.net.NetworkConfig: int radio>;

        $r171 = $r172[$i40];

        if $r171 != null goto label25;

        r264 = new java.lang.StringBuilder;

        specialinvoke r264.<java.lang.StringBuilder: void <init>()>();

        $r168 = virtualinvoke r264.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in networkAttributes - ignoring attempt to use undefined radio ");

        $i36 = r32.<android.net.NetworkConfig: int radio>;

        $r167 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i36);

        $r166 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in network type ");

        $i35 = r32.<android.net.NetworkConfig: int type>;

        $r165 = virtualinvoke $r166.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i35);

        $r184 = virtualinvoke $r165.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r184);

     label24:
        goto label59;

     label25:
        $r170 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $i39 = r32.<android.net.NetworkConfig: int type>;

        $r170[$i39] = r32;

        $i38 = r0.<com.android.server.ConnectivityService: int mNetworksDefined>;

        $i37 = 1 + $i38;

        r0.<com.android.server.ConnectivityService: int mNetworksDefined> = $i37;

     label26:
        goto label59;

     label27:
        r265 = new java.util.ArrayList;

        specialinvoke r265.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks> = r265;

        $r97 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r13 = virtualinvoke $r97.<android.content.res.Resources: int[] getIntArray(int)>(17235980);

        i4 = lengthof r13;

        i6 = 0;

     label28:
        if i6 >= i4 goto label31;

        i21 = r13[i6];

        $r162 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r163 = $r162[i21];

        if $r163 == null goto label30;

        $r161 = r0.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks>;

        $r155 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i21);

        $z10 = interfaceinvoke $r161.<java.util.List: boolean contains(java.lang.Object)>($r155);

        if $z10 != 0 goto label30;

        $r156 = r0.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks>;

        $r157 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i21);

        interfaceinvoke $r156.<java.util.List: boolean add(java.lang.Object)>($r157);

     label29:
        i6 = i6 + 1;

        goto label28;

     label30:
        r266 = new java.lang.StringBuilder;

        specialinvoke r266.<java.lang.StringBuilder: void <init>()>();

        $r158 = virtualinvoke r266.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring protectedNetwork ");

        $r159 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i21);

        $r160 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r160);

        goto label29;

     label31:
        $i24 = r0.<com.android.server.ConnectivityService: int mNetworksDefined>;

        $r98 = newarray (int)[$i24];

        r0.<com.android.server.ConnectivityService: int[] mPriorityList> = $r98;

        $i26 = r0.<com.android.server.ConnectivityService: int mNetworksDefined>;

        i5 = -1 + $i26;

        i8 = 0;

        i7 = 0;

     label32:
        if i5 <= -1 goto label40;

        r25 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        i16 = lengthof r25;

        i20 = 0;

        i19 = i5;

     label33:
        if i20 >= i16 goto label39;

        r27 = r25[i20];

        if r27 != null goto label35;

        i22 = i19;

     label34:
        i20 = i20 + 1;

        i19 = i22;

        goto label33;

     label35:
        $i28 = r27.<android.net.NetworkConfig: int priority>;

        if $i28 >= i8 goto label36;

        i22 = i19;

        goto label34;

     label36:
        $i30 = r27.<android.net.NetworkConfig: int priority>;

        if $i30 <= i8 goto label38;

        $i34 = r27.<android.net.NetworkConfig: int priority>;

        if $i34 < i7 goto label37;

        if i7 != 0 goto label58;

     label37:
        i7 = r27.<android.net.NetworkConfig: int priority>;

        i22 = i19;

        goto label34;

     label38:
        r26 = r0.<com.android.server.ConnectivityService: int[] mPriorityList>;

        i22 = i19 - 1;

        $i29 = r27.<android.net.NetworkConfig: int type>;

        r26[i19] = $i29;

        goto label34;

     label39:
        i8 = i7;

        i7 = 0;

        i5 = i19;

        goto label32;

     label40:
        $i25 = specialinvoke r0.<com.android.server.ConnectivityService: int getPersistedNetworkPreference()>();

        r0.<com.android.server.ConnectivityService: int mNetworkPreference> = $i25;

        $i27 = r0.<com.android.server.ConnectivityService: int mNetworkPreference>;

        if $i27 != -1 goto label44;

        r24 = r0.<com.android.server.ConnectivityService: int[] mPriorityList>;

        i14 = lengthof r24;

        i18 = 0;

     label41:
        if i18 >= i14 goto label42;

        i17 = r24[i18];

        $r147 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r149 = $r147[i17];

        $z5 = virtualinvoke $r149.<android.net.NetworkConfig: boolean isDefault()>();

        if $z5 == 0 goto label43;

        $z4 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i17);

        if $z4 == 0 goto label43;

        r0.<com.android.server.ConnectivityService: int mNetworkPreference> = i17;

     label42:
        $i31 = r0.<com.android.server.ConnectivityService: int mNetworkPreference>;

        if $i31 != -1 goto label44;

        r267 = new java.lang.IllegalStateException;

        specialinvoke r267.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You should set at least one default Network in config.xml!");

        throw r267;

     label43:
        i18 = i18 + 1;

        goto label41;

     label44:
        $r99 = newarray (java.util.ArrayList)[15];

        $r91 = (java.util.List[]) $r99;

        r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids> = $r91;

        r14 = r0.<com.android.server.ConnectivityService: int[] mPriorityList>;

        i9 = lengthof r14;

        i10 = 0;

     label45:
        if i10 >= i9 goto label46;

        i15 = r14[i10];

        $r151 = r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids>;

        r268 = new java.util.ArrayList;

        specialinvoke r268.<java.util.ArrayList: void <init>()>();

        $r151[i15] = r268;

        i10 = i10 + 1;

        goto label45;

     label46:
        r269 = new java.util.ArrayList;

        specialinvoke r269.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.util.List mFeatureUsers> = r269;

        $r92 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("cm.test.mode");

        $z3 = virtualinvoke $r92.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z3 == 0 goto label52;

        $r153 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.type");

        $z6 = virtualinvoke $r153.<java.lang.String: boolean equals(java.lang.Object)>("eng");

        if $z6 == 0 goto label52;

        z1 = 1;

     label47:
        r0.<com.android.server.ConnectivityService: boolean mTestMode> = z1;

        r15 = r0.<com.android.server.ConnectivityService: int[] mPriorityList>;

        i11 = lengthof r15;

        i12 = 0;

     label48:
        if i12 >= i11 goto label54;

        i13 = r15[i12];

        $r138 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        r22 = $r138[i13];

     label49:
        r21 = interfaceinvoke r5.<com.android.server.ConnectivityService$NetworkFactory: android.net.NetworkStateTracker createTracker(int,android.net.NetworkConfig)>(i13, r22);

        $r136 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r136[i13] = r21;

     label50:
        $r152 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        interfaceinvoke r21.<android.net.NetworkStateTracker: void startMonitoring(android.content.Context,android.os.Handler)>(r1, $r152);

        $z7 = virtualinvoke r22.<android.net.NetworkConfig: boolean isDefault()>();

        if $z7 == 0 goto label51;

        interfaceinvoke r21.<android.net.NetworkStateTracker: boolean reconnect()>();

     label51:
        i12 = i12 + 1;

        goto label48;

     label52:
        z1 = 0;

        goto label47;

     label53:
        $r228 := @caughtexception;

        r23 = $r228;

        r270 = new java.lang.StringBuilder;

        specialinvoke r270.<java.lang.StringBuilder: void <init>()>();

        $r210 = virtualinvoke r270.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem creating ");

        $r209 = staticinvoke <android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)>(i13);

        $r212 = virtualinvoke $r210.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r209);

        $r211 = virtualinvoke $r212.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tracker: ");

        $r214 = virtualinvoke $r211.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r213 = virtualinvoke $r214.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConnectivityService", $r213);

        goto label51;

     label54:
        r271 = new com.android.server.connectivity.Tethering;

        $r96 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r95 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r93 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r108 = virtualinvoke $r93.<com.android.server.ConnectivityService$InternalHandler: android.os.Looper getLooper()>();

        r286 = (android.net.IConnectivityManager) r0;

        specialinvoke r271.<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.IConnectivityManager,android.os.Looper)>($r96, $r95, r3, r286, $r108);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering> = r271;

        r272 = new android.content.IntentFilter;

        specialinvoke r272.<android.content.IntentFilter: void <init>()>();

        r16 = r272;

        virtualinvoke r16.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STARTING");

        virtualinvoke r16.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STOPPING");

        $r112 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r111 = r0.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mUserIntentReceiver>;

        $r110 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r112.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r111, $r110, r16, null, null);

        r273 = new com.android.server.connectivity.Nat464Xlat;

        $r101 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r100 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r115 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        r287 = (android.net.IConnectivityManager) r0;

        specialinvoke r273.<com.android.server.connectivity.Nat464Xlat: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.IConnectivityManager,android.os.Handler)>($r101, $r100, r287, $r115);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Nat464Xlat mClat> = r273;

     label55:
        $r103 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r102 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        r288 = (android.net.INetworkManagementEventObserver) $r102;

        interfaceinvoke $r103.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>(r288);

        $r105 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r104 = r0.<com.android.server.ConnectivityService: android.net.INetworkManagementEventObserver mDataActivityObserver>;

        interfaceinvoke $r105.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r104);

        $r107 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r106 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Nat464Xlat mClat>;

        r289 = (android.net.INetworkManagementEventObserver) $r106;

        interfaceinvoke $r107.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>(r289);

     label56:
        r274 = new java.util.ArrayList;

        specialinvoke r274.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.util.ArrayList mInetLog> = r274;

        r275 = new com.android.server.ConnectivityService$SettingsObserver;

        $r125 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        specialinvoke r275.<com.android.server.ConnectivityService$SettingsObserver: void <init>(android.os.Handler,int)>($r125, 9);

        r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$SettingsObserver mSettingsObserver> = r275;

        $r131 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$SettingsObserver mSettingsObserver>;

        $r124 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r131.<com.android.server.ConnectivityService$SettingsObserver: void observe(android.content.Context)>($r124);

        r276 = new com.android.server.connectivity.DataConnectionStats;

        $r129 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        specialinvoke r276.<com.android.server.connectivity.DataConnectionStats: void <init>(android.content.Context)>($r129);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DataConnectionStats mDataConnectionStats> = r276;

        $r128 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DataConnectionStats mDataConnectionStats>;

        virtualinvoke $r128.<com.android.server.connectivity.DataConnectionStats: void startMonitoring()>();

        r277 = new android.content.Intent;

        specialinvoke r277.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.net.ConnectivityService.action.PKT_CNT_SAMPLE_INTERVAL_ELAPSED", null);

        r17 = r277;

        $r118 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r117 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r118, 0, r17, 0);

        r0.<com.android.server.ConnectivityService: android.app.PendingIntent mSampleIntervalElapsedIntent> = $r117;

        $r116 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r123 = virtualinvoke $r116.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        $r122 = (android.app.AlarmManager) $r123;

        r0.<com.android.server.ConnectivityService: android.app.AlarmManager mAlarmManager> = $r122;

        $r121 = r0.<com.android.server.ConnectivityService: android.app.PendingIntent mSampleIntervalElapsedIntent>;

        virtualinvoke r0.<com.android.server.ConnectivityService: void setAlarm(int,android.app.PendingIntent)>(60000, $r121);

        r278 = new android.content.IntentFilter;

        specialinvoke r278.<android.content.IntentFilter: void <init>()>();

        r18 = r278;

        virtualinvoke r18.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.ConnectivityService.action.PKT_CNT_SAMPLE_INTERVAL_ELAPSED");

        $r142 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        r279 = new com.android.server.ConnectivityService$1;

        specialinvoke r279.<com.android.server.ConnectivityService$1: void <init>(com.android.server.ConnectivityService)>(r0);

        r280 = new android.content.IntentFilter;

        specialinvoke r280.<android.content.IntentFilter: void <init>(android.content.IntentFilter)>(r18);

        virtualinvoke $r142.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(r279, r280);

        r281 = new com.android.server.connectivity.PacManager;

        $r143 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r146 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        specialinvoke r281.<com.android.server.connectivity.PacManager: void <init>(android.content.Context,android.os.Handler,int)>($r143, $r146, 16);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PacManager mPacManager> = r281;

        r282 = new android.content.IntentFilter;

        specialinvoke r282.<android.content.IntentFilter: void <init>()>();

        r20 = r282;

        virtualinvoke r20.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.server.connectivityservice.CONNECTED_TO_PROVISIONING_NETWORK_ACTION");

        $r135 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r134 = r0.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mProvisioningReceiver>;

        virtualinvoke $r135.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r134, r20);

        $r133 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r137 = (android.app.AppOpsManager) $r133;

        r0.<com.android.server.ConnectivityService: android.app.AppOpsManager mAppOpsManager> = $r137;

        return;

     label57:
        $r196 := @caughtexception;

        r19 = $r196;

        r283 = new java.lang.StringBuilder;

        specialinvoke r283.<java.lang.StringBuilder: void <init>()>();

        $r194 = virtualinvoke r283.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error registering observer :");

        $r193 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r215 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r215);

        goto label56;

     label58:
        i22 = i19;

        goto label34;

     label59:
        i2 = i2 + 1;

        goto label15;

     label60:
        $r227 := @caughtexception;

        goto label59;

        catch java.lang.IllegalArgumentException from label04 to label05 with label10;
        catch android.os.RemoteException from label06 to label07 with label11;
        catch java.lang.Exception from label16 to label17 with label60;
        catch java.lang.Exception from label19 to label20 with label60;
        catch java.lang.Exception from label21 to label22 with label60;
        catch java.lang.Exception from label23 to label24 with label60;
        catch java.lang.Exception from label25 to label26 with label60;
        catch java.lang.IllegalArgumentException from label49 to label50 with label53;
        catch android.os.RemoteException from label55 to label56 with label57;
    }

    static com.android.server.ConnectivityService$InternalHandler access$100(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$InternalHandler $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        return $r1;
    }

    static android.net.NetworkStateTracker[] access$1000(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkStateTracker[] $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        return $r1;
    }

    static android.content.Context access$1100(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        return $r1;
    }

    static void access$1200(com.android.server.ConnectivityService, android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.NetworkInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleConnectionFailure(android.net.NetworkInfo)>(r1);

        return;
    }

    static void access$1300(com.android.server.ConnectivityService, android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.NetworkInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleCaptivePortalTrackerCheck(android.net.NetworkInfo)>(r1);

        return;
    }

    static boolean access$1400(com.android.server.ConnectivityService, android.net.LinkProperties, android.net.RouteInfo, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties r1;
        android.net.RouteInfo r2;
        boolean z0, $z1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.LinkProperties;

        r2 := @parameter2: android.net.RouteInfo;

        z0 := @parameter3: boolean;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean removeRoute(android.net.LinkProperties,android.net.RouteInfo,boolean)>(r1, r2, z0);

        return $z1;
    }

    static void access$1500(com.android.server.ConnectivityService, android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.NetworkInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleDisconnect(android.net.NetworkInfo)>(r1);

        return;
    }

    static void access$1600(com.android.server.ConnectivityService, android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.NetworkInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)>(r1);

        return;
    }

    static com.android.server.net.LockdownVpnTracker access$1700(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.net.LockdownVpnTracker $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        return $r1;
    }

    static void access$1800(com.android.server.ConnectivityService, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleConnectivityChange(int,boolean)>(i0, z0);

        return;
    }

    static void access$1900(com.android.server.ConnectivityService, android.net.NetworkStateTracker)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkStateTracker r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.NetworkStateTracker;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateNetworkSettings(android.net.NetworkStateTracker)>(r1);

        return;
    }

    static android.net.NetworkStateTracker access$200(android.content.Context, android.os.Handler)
    {
        android.content.Context r0;
        android.os.Handler r1;
        android.net.NetworkStateTracker $r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Handler;

        $r2 = staticinvoke <com.android.server.ConnectivityService: android.net.NetworkStateTracker makeWimaxStateTracker(android.content.Context,android.os.Handler)>(r0, r1);

        return $r2;
    }

    static int access$2000(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        int $i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $i0 = r0.<com.android.server.ConnectivityService: int mNetTransitionWakeLockSerialNumber>;

        return $i0;
    }

    static android.os.PowerManager$WakeLock access$2100(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        return $r1;
    }

    static java.lang.String access$2200(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: java.lang.String mNetTransitionWakeLockCausedBy>;

        return $r1;
    }

    static void access$2300(com.android.server.ConnectivityService, int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleInetConditionChange(int,int)>(i0, i1);

        return;
    }

    static void access$2400(com.android.server.ConnectivityService, int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleInetConditionHoldEnd(int,int)>(i0, i1);

        return;
    }

    static void access$2500(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleSetNetworkPreference(int)>(i0);

        return;
    }

    static void access$2600(com.android.server.ConnectivityService, boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleSetMobileData(boolean)>(z0);

        return;
    }

    static void access$2700(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleDeprecatedGlobalHttpProxy()>();

        return;
    }

    static void access$2800(com.android.server.ConnectivityService, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleSetDependencyMet(int,boolean)>(i0, z0);

        return;
    }

    static void access$2900(com.android.server.ConnectivityService, android.content.Intent)
    {
        com.android.server.ConnectivityService r0;
        android.content.Intent r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>(r1);

        return;
    }

    static void access$300(com.android.server.ConnectivityService, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendDataActivityBroadcast(int,boolean)>(i0, z0);

        return;
    }

    static void access$3000(com.android.server.ConnectivityService, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleSetPolicyDataEnable(int,boolean)>(i0, z0);

        return;
    }

    static java.util.concurrent.atomic.AtomicInteger access$3100(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicInteger mEnableFailFastMobileDataTag>;

        return $r1;
    }

    static void access$3200(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleNetworkSamplingTimeout()>();

        return;
    }

    static void access$3300(com.android.server.ConnectivityService, android.net.ProxyProperties)
    {
        com.android.server.ConnectivityService r0;
        android.net.ProxyProperties r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.ProxyProperties;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleApplyDefaultProxy(android.net.ProxyProperties)>(r1);

        return;
    }

    static java.lang.Object access$3400(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: java.lang.Object mDnsLock>;

        return $r1;
    }

    static void access$3500(com.android.server.ConnectivityService, java.lang.String, java.lang.String, java.util.Collection, java.lang.String, boolean)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, r2, r4;
        java.util.Collection r3;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.util.Collection;

        r4 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateDnsLocked(java.lang.String,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r1, r2, r3, r4, z0);

        return;
    }

    static java.lang.Object access$3600(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        return $r1;
    }

    static boolean access$3702(com.android.server.ConnectivityService, boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.ConnectivityService: boolean mDefaultProxyDisabled> = z0;

        return z0;
    }

    static android.net.ProxyProperties access$3800(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        android.net.ProxyProperties $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

        return $r1;
    }

    static android.net.ProxyProperties access$3900(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        android.net.ProxyProperties $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mDefaultProxy>;

        return $r1;
    }

    static void access$400(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>(r0);

        return;
    }

    static void access$4000(com.android.server.ConnectivityService, android.net.ProxyProperties)
    {
        com.android.server.ConnectivityService r0;
        android.net.ProxyProperties r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.ProxyProperties;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendProxyBroadcast(android.net.ProxyProperties)>(r1);

        return;
    }

    static android.os.INetworkManagementService access$4100(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        android.os.INetworkManagementService $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        return $r1;
    }

    static void access$4200(com.android.server.ConnectivityService, boolean, int, java.lang.String, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        boolean z0;
        int i0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.ConnectivityService;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void setProvNotificationVisible(boolean,int,java.lang.String,java.lang.String)>(z0, i0, r1, r2);

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$4300(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicBoolean mIsProvisioningNetwork>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$4400(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicBoolean mIsStartingProvisioning>;

        return $r1;
    }

    static void access$4500(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>(r0);

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$4600(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicBoolean mIsCheckingMobileProvisioning>;

        return $r1;
    }

    static int access$500(com.android.server.ConnectivityService, com.android.server.ConnectivityService$FeatureUser, boolean)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$FeatureUser r1;
        boolean z0;
        int $i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.ConnectivityService$FeatureUser;

        z0 := @parameter2: boolean;

        $i0 = specialinvoke r0.<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)>(r1, z0);

        return $i0;
    }

    static boolean access$5000(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isMobileDataStateTrackerReady()>();

        return $z0;
    }

    static void access$5100(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void setEnableFailFastMobileData(int)>(i0);

        return;
    }

    static void access$5300(com.android.server.ConnectivityService, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleMobileProvisioningAction(java.lang.String)>(r1);

        return;
    }

    static void access$5400(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void onUserStart(int)>(i0);

        return;
    }

    static void access$5500(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void onUserStop(int)>(i0);

        return;
    }

    static java.lang.Object access$600(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: java.lang.Object mRulesLock>;

        return $r1;
    }

    static android.util.SparseIntArray access$700(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseIntArray $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        return $r1;
    }

    static java.util.HashSet access$800(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        java.util.HashSet $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: java.util.HashSet mMeteredIfaces>;

        return $r1;
    }

    static int access$900(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        int $i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $i0 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        return $i0;
    }

    private boolean addRoute(android.net.LinkProperties, android.net.RouteInfo, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties r1;
        android.net.RouteInfo r2;
        boolean z0, z1, $z2;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.LinkProperties;

        r2 := @parameter1: android.net.RouteInfo;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $z2 = specialinvoke r0.<com.android.server.ConnectivityService: boolean modifyRoute(android.net.LinkProperties,android.net.RouteInfo,int,boolean,boolean,boolean)>(r1, r2, 0, 1, z0, z1);

        return $z2;
    }

    private boolean addRouteToAddress(android.net.LinkProperties, java.net.InetAddress, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties r1;
        java.net.InetAddress r2;
        boolean z0, $z1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.LinkProperties;

        r2 := @parameter1: java.net.InetAddress;

        z0 := @parameter2: boolean;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean modifyRouteToAddress(android.net.LinkProperties,java.net.InetAddress,boolean,boolean,boolean)>(r1, r2, 1, 1, z0);

        return $z1;
    }

    private static java.lang.Object checkNotNull(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label1:
        return r0;
    }

    private void enforceAccessPermission()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_NETWORK_STATE", "ConnectivityService");

        return;
    }

    private void enforceChangePermission()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CHANGE_NETWORK_STATE", "ConnectivityService");

        return;
    }

    private void enforceConnectivityInternalPermission()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "ConnectivityService");

        return;
    }

    private void enforceMarkNetworkSocketPermission()
    {
        com.android.server.ConnectivityService r0;
        int $i0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1013 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MARK_NETWORK_SOCKET", "ConnectivityService");

        return;
    }

    private void enforcePreference()
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1, $i2, $i3;
        android.net.NetworkStateTracker[] $r1, $r4, $r6, $r8, $r14, $r20;
        android.net.NetworkStateTracker $r2, $r5, $r7, $r9, $r13, $r19;
        android.net.NetworkInfo $r3, $r10, $r16;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r11, $r12, $r15, $r18;
        java.lang.String $r17;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i1 = r0.<com.android.server.ConnectivityService: int mNetworkPreference>;

        $r2 = $r1[$i1];

        $r3 = interfaceinvoke $r2.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $z0 = virtualinvoke $r3.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        $r4 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i2 = r0.<com.android.server.ConnectivityService: int mNetworkPreference>;

        $r5 = $r4[$i2];

        $z1 = interfaceinvoke $r5.<android.net.NetworkStateTracker: boolean isAvailable()>();

        if $z1 == 0 goto label1;

        i0 = 0;

     label3:
        if i0 > 14 goto label1;

        $i3 = r0.<com.android.server.ConnectivityService: int mNetworkPreference>;

        if i0 == $i3 goto label4;

        $r6 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r7 = $r6[i0];

        if $r7 == null goto label4;

        $r8 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r9 = $r8[i0];

        $r10 = interfaceinvoke $r9.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $z2 = virtualinvoke $r10.<android.net.NetworkInfo: boolean isConnected()>();

        if $z2 == 0 goto label4;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tearing down ");

        $r14 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r13 = $r14[i0];

        $r16 = interfaceinvoke $r13.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in enforcePreference");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r17);

        $r20 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r19 = $r20[i0];

        specialinvoke r0.<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)>($r19);

     label4:
        i0 = i0 + 1;

        goto label3;
    }

    private void enforceTetherAccessPermission()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_NETWORK_STATE", "ConnectivityService");

        return;
    }

    private void enforceTetherChangePermission()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CHANGE_NETWORK_STATE", "ConnectivityService");

        return;
    }

    private void flushVmDnsCache()
    {
        com.android.server.ConnectivityService r0;
        android.content.Intent r1, $r3;
        long l0;
        java.lang.Throwable r2, $r8;
        android.os.UserHandle $r6;
        android.content.Context $r7;

        r0 := @this: com.android.server.ConnectivityService;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.CLEAR_DNS_CACHE");

        r1 = $r3;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(536870912);

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r7 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r6 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r7.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r6);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int getConnectivityChangeDelay()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("conn.connectivity_change_delay", 3000);

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "connectivity_change_delay", $i0);

        return $i1;
    }

    private android.net.NetworkInfo getFilteredNetworkInfo(android.net.NetworkStateTracker, int)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkStateTracker r1;
        int i0;
        android.net.NetworkInfo r2, r3, $r6;
        boolean $z0;
        com.android.server.net.LockdownVpnTracker $r4, $r5;
        android.net.NetworkInfo$DetailedState $r7;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkStateTracker;

        i0 := @parameter1: int;

        r2 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isNetworkBlocked(android.net.NetworkStateTracker,int)>(r1, i0);

        if $z0 == 0 goto label1;

        $r6 = new android.net.NetworkInfo;

        specialinvoke $r6.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(r2);

        r3 = $r6;

        $r7 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState BLOCKED>;

        virtualinvoke r3.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r7, null, null);

        r2 = r3;

     label1:
        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        if $r4 == null goto label2;

        $r5 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        r2 = virtualinvoke $r5.<com.android.server.net.LockdownVpnTracker: android.net.NetworkInfo augmentNetworkInfo(android.net.NetworkInfo)>(r2);

     label2:
        return r2;
    }

    private android.net.NetworkInfo getNetworkInfo(int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        boolean z0;
        android.net.NetworkInfo r1;
        android.net.NetworkStateTracker r2;
        android.net.NetworkStateTracker[] $r3;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        r1 = null;

        if z0 == 0 goto label1;

        $r3 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r2 = $r3[i0];

        r1 = null;

        if r2 == null goto label1;

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo getFilteredNetworkInfo(android.net.NetworkStateTracker,int)>(r2, i1);

     label1:
        return r1;
    }

    private android.net.NetworkState getNetworkStateUnchecked(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.net.NetworkStateTracker r1;
        boolean $z0;
        android.net.NetworkStateTracker[] $r2;
        android.net.NetworkState $r3;
        android.net.NetworkInfo $r4;
        android.net.LinkProperties $r5;
        android.net.LinkCapabilities $r6;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r1 = $r2[i0];

        if r1 == null goto label1;

        $r3 = new android.net.NetworkState;

        $r4 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $r5 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        $r6 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.LinkCapabilities getLinkCapabilities()>();

        specialinvoke $r3.<android.net.NetworkState: void <init>(android.net.NetworkInfo,android.net.LinkProperties,android.net.LinkCapabilities)>($r4, $r5, $r6);

        return $r3;

     label1:
        return null;
    }

    private int getPersistedNetworkPreference()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "network_preference", -1);

        return $i0;
    }

    private android.net.NetworkInfo getProvisioningNetworkInfo()
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo[] r1;
        int i0, i1;
        android.net.NetworkInfo r2, r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        r1 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        r2 = null;

        if i1 >= i0 goto label2;

        r3 = r1[i1];

        $z0 = virtualinvoke r3.<android.net.NetworkInfo: boolean isConnectedToProvisioningNetwork()>();

        if $z0 == 0 goto label3;

        r2 = r3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProvisioningNetworkInfo: X provNi=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r7);

        return r2;

     label3:
        i1 = i1 + 1;

        goto label1;
    }

    private java.lang.String getProvisioningUrlBaseFromFile(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.io.FileReader r1, r4, $r28;
        android.content.res.Configuration r2;
        java.lang.String r3, r12, r13, r15, r17, $r25, $r36, $r39, $r41;
        org.xmlpull.v1.XmlPullParserException r5, $r37, $r52;
        java.lang.Throwable r6, $r46, $r53;
        java.io.IOException r9, $r35, $r38, $r47, $r49, $r50, $r51;
        org.xmlpull.v1.XmlPullParser r11;
        java.lang.NumberFormatException r14, $r31;
        android.content.res.Resources $r20;
        android.content.Context $r21;
        java.lang.RuntimeException $r22;
        java.lang.StringBuilder $r23, $r24, $r26, $r29, $r30, $r32, $r33, $r34, $r40, $r42, $r43, $r44;
        java.io.File $r27;
        boolean $z0;
        java.io.FileNotFoundException $r45, $r48;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 = null;

        $r21 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r20 = virtualinvoke $r21.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke $r20.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        tableswitch(i0)
        {
            case 1: goto label09;
            case 2: goto label02;
            default: goto label01;
        };

     label01:
        $r22 = new java.lang.RuntimeException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProvisioningUrlBaseFromFile: Unexpected parameter ");

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String)>($r25);

        throw $r22;

     label02:
        r3 = "provisioningUrl";

     label03:
        $r28 = new java.io.FileReader;

        $r27 = r0.<com.android.server.ConnectivityService: java.io.File mProvisioningUrlFile>;

        specialinvoke $r28.<java.io.FileReader: void <init>(java.io.File)>($r27);

        r4 = $r28;

     label04:
        r11 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r11.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r4);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r11, "provisioningUrls");

     label05:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r11);

        r12 = interfaceinvoke r11.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label06:
        if r12 != null goto label10;

        if r4 == null goto label08;

     label07:
        virtualinvoke r4.<java.io.FileReader: void close()>();

     label08:
        return null;

     label09:
        r3 = "redirectedUrl";

        goto label03;

     label10:
        $z0 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label05;

        r13 = interfaceinvoke r11.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "mcc");

     label11:
        if r13 == null goto label05;

     label12:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r13);

        $i3 = r2.<android.content.res.Configuration: int mcc>;

        if $i2 != $i3 goto label05;

        r15 = interfaceinvoke r11.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "mnc");

     label13:
        if r15 == null goto label05;

     label14:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r15);

        $i5 = r2.<android.content.res.Configuration: int mnc>;

        if $i1 != $i5 goto label05;

        interfaceinvoke r11.<org.xmlpull.v1.XmlPullParser: int next()>();

        $i4 = interfaceinvoke r11.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i4 != 4 goto label05;

        r17 = interfaceinvoke r11.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

     label15:
        if r4 == null goto label17;

     label16:
        virtualinvoke r4.<java.io.FileReader: void close()>();

     label17:
        return r17;

     label18:
        $r31 := @caughtexception;

        r14 = $r31;

     label19:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NumberFormatException in getProvisioningUrlBaseFromFile: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r36);

     label20:
        goto label05;

     label21:
        $r45 := @caughtexception;

        r1 = r4;

     label22:
        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Carrier Provisioning Urls file not found");

     label23:
        if r1 == null goto label08;

     label24:
        virtualinvoke r1.<java.io.FileReader: void close()>();

     label25:
        return null;

     label26:
        $r47 := @caughtexception;

        return null;

     label27:
        $r52 := @caughtexception;

        r5 = $r52;

     label28:
        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Xml parser exception reading Carrier Provisioning Urls file: ");

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r41);

     label29:
        if r1 == null goto label08;

     label30:
        virtualinvoke r1.<java.io.FileReader: void close()>();

     label31:
        return null;

     label32:
        $r35 := @caughtexception;

        r9 = $r35;

     label33:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("I/O exception reading Carrier Provisioning Urls file: ");

        $r40 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r39);

     label34:
        if r1 == null goto label08;

     label35:
        virtualinvoke r1.<java.io.FileReader: void close()>();

     label36:
        return null;

     label37:
        $r46 := @caughtexception;

        r6 = $r46;

     label38:
        if r1 == null goto label40;

     label39:
        virtualinvoke r1.<java.io.FileReader: void close()>();

     label40:
        throw r6;

     label41:
        $r51 := @caughtexception;

        goto label40;

     label42:
        $r50 := @caughtexception;

        goto label08;

     label43:
        $r38 := @caughtexception;

        goto label17;

     label44:
        $r53 := @caughtexception;

        r6 = $r53;

        r1 = r4;

        goto label38;

     label45:
        $r49 := @caughtexception;

        r9 = $r49;

        r1 = r4;

        goto label33;

     label46:
        $r37 := @caughtexception;

        r5 = $r37;

        r1 = r4;

        goto label28;

     label47:
        $r48 := @caughtexception;

        r1 = null;

        goto label22;

        catch java.io.FileNotFoundException from label03 to label04 with label47;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label27;
        catch java.io.IOException from label03 to label04 with label32;
        catch java.lang.Throwable from label03 to label04 with label37;
        catch java.io.FileNotFoundException from label04 to label05 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label46;
        catch java.io.IOException from label04 to label05 with label45;
        catch java.lang.Throwable from label04 to label05 with label44;
        catch java.io.FileNotFoundException from label05 to label06 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label46;
        catch java.io.IOException from label05 to label06 with label45;
        catch java.lang.Throwable from label05 to label06 with label44;
        catch java.io.IOException from label07 to label08 with label42;
        catch java.io.FileNotFoundException from label10 to label11 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label46;
        catch java.io.IOException from label10 to label11 with label45;
        catch java.lang.Throwable from label10 to label11 with label44;
        catch java.lang.NumberFormatException from label12 to label13 with label18;
        catch java.io.FileNotFoundException from label12 to label13 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label46;
        catch java.io.IOException from label12 to label13 with label45;
        catch java.lang.Throwable from label12 to label13 with label44;
        catch java.lang.NumberFormatException from label14 to label15 with label18;
        catch java.io.FileNotFoundException from label14 to label15 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label46;
        catch java.io.IOException from label14 to label15 with label45;
        catch java.lang.Throwable from label14 to label15 with label44;
        catch java.io.IOException from label16 to label17 with label43;
        catch java.io.FileNotFoundException from label19 to label20 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label19 to label20 with label46;
        catch java.io.IOException from label19 to label20 with label45;
        catch java.lang.Throwable from label19 to label20 with label44;
        catch java.lang.Throwable from label22 to label23 with label37;
        catch java.io.IOException from label24 to label25 with label26;
        catch java.lang.Throwable from label28 to label29 with label37;
        catch java.io.IOException from label30 to label31 with label26;
        catch java.lang.Throwable from label33 to label34 with label37;
        catch java.io.IOException from label35 to label36 with label26;
        catch java.io.IOException from label39 to label40 with label41;
    }

    private int getRestoreDefaultNetworkDelay(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r1;
        android.net.NetworkConfig[] $r3, $r5;
        android.net.NetworkConfig $r4, $r6;
        java.lang.Integer $r7;
        java.lang.NumberFormatException $r8;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("android.telephony.apn-restore");

        if r1 == null goto label5;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i4 == 0 goto label5;

     label1:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r1);

        i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

     label2:
        i1 = i2;

     label3:
        return i1;

     label4:
        $r8 := @caughtexception;

     label5:
        i1 = 60000;

        if i0 > 14 goto label3;

        $r3 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r4 = $r3[i0];

        if $r4 == null goto label3;

        $r5 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r6 = $r5[i0];

        $i3 = $r6.<android.net.NetworkConfig: int restoreTime>;

        return $i3;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    private void handleApplyDefaultProxy(android.net.ProxyProperties)
    {
        com.android.server.ConnectivityService r0;
        android.net.ProxyProperties r1, $r4, $r5, $r6, $r12;
        java.lang.Object r2;
        java.lang.Throwable r3, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11, $r13, $r14;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.ProxyProperties;

        if r1 == null goto label01;

        $r13 = virtualinvoke r1.<android.net.ProxyProperties: java.lang.String getHost()>();

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r13);

        if $z3 == 0 goto label01;

        $r14 = virtualinvoke r1.<android.net.ProxyProperties: java.lang.String getPacFileUrl()>();

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r14);

        if $z4 == 0 goto label01;

        r1 = null;

     label01:
        r2 = r0.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        entermonitor r2;

     label02:
        $r4 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mDefaultProxy>;

        if $r4 == null goto label04;

        $r12 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mDefaultProxy>;

        $z2 = virtualinvoke $r12.<android.net.ProxyProperties: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label04;

        exitmonitor r2;

     label03:
        return;

     label04:
        $r5 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mDefaultProxy>;

        if $r5 != r1 goto label09;

        exitmonitor r2;

     label05:
        return;

     label06:
        $r15 := @caughtexception;

        r3 = $r15;

     label07:
        exitmonitor r2;

     label08:
        throw r3;

     label09:
        if r1 == null goto label12;

     label10:
        $z1 = virtualinvoke r1.<android.net.ProxyProperties: boolean isValid()>();

        if $z1 != 0 goto label12;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid proxy properties, ignoring: ");

        $r9 = virtualinvoke r1.<android.net.ProxyProperties: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r11);

        exitmonitor r2;

     label11:
        return;

     label12:
        r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mDefaultProxy> = r1;

        $r6 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

        if $r6 == null goto label14;

        exitmonitor r2;

     label13:
        return;

     label14:
        $z0 = r0.<com.android.server.ConnectivityService: boolean mDefaultProxyDisabled>;

        if $z0 != 0 goto label15;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendProxyBroadcast(android.net.ProxyProperties)>(r1);

     label15:
        exitmonitor r2;

     label16:
        return;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch java.lang.Throwable from label14 to label15 with label06;
        catch java.lang.Throwable from label15 to label16 with label06;
    }

    private void handleCaptivePortalTrackerCheck(android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1, $r23;
        int i0, $i1, $i2;
        android.net.NetworkStateTracker r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r10, $r11, $r12, $r14, $r15, $r16, $r19, $r20, $r21;
        java.lang.String $r6, $r13, $r17, $r18, $r22, $r24;
        android.net.NetworkStateTracker[] $r7;
        android.net.NetworkConfig[] $r8;
        android.net.NetworkConfig $r9;
        boolean $z0, $z1;
        android.net.CaptivePortalTracker $r25;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Captive portal check ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r6);

        i0 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        $r7 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r2 = $r7[i0];

        $r8 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r9 = $r8[i0];

        $z0 = virtualinvoke $r9.<android.net.NetworkConfig: boolean isDefault()>();

        if $z0 == 0 goto label2;

        $i1 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i1 == -1 goto label2;

        $i2 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i2 == i0 goto label2;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isNewNetTypePreferredOverCurrentNetType(int)>(i0);

        if $z1 == 0 goto label1;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Captive check on ");

        $r22 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getTypeName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r24);

        $r25 = r0.<com.android.server.ConnectivityService: android.net.CaptivePortalTracker mCaptivePortalTracker>;

        $r23 = new android.net.NetworkInfo;

        specialinvoke $r23.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(r1);

        virtualinvoke $r25.<android.net.CaptivePortalTracker: void detectCaptivePortal(android.net.NetworkInfo)>($r23);

        return;

     label1:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tear down low priority net ");

        $r17 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getTypeName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r18);

        specialinvoke r0.<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)>(r2);

        return;

     label2:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleCaptivePortalTrackerCheck: call captivePortalCheckComplete ni=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r13);

        interfaceinvoke r2.<android.net.NetworkStateTracker: void captivePortalCheckComplete()>();

        return;
    }

    private void handleConnect(android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1, $r21;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.net.NetworkStateTracker r2, r6;
        java.lang.String r3, $r22, $r24;
        java.lang.Throwable r5, $r23;
        android.net.NetworkStateTracker[] $r7, $r18;
        android.net.LinkProperties $r8;
        android.net.NetworkConfig $r9;
        android.net.NetworkConfig[] $r10;
        boolean $z1, $z2, $z3, $z7;
        com.android.internal.app.IBatteryStats $r11;
        android.os.PowerManager$WakeLock $r12;
        com.android.server.ConnectivityService$InternalHandler $r13, $r15;
        android.os.Message $r14;
        java.lang.StringBuilder $r16, $r17, $r19, $r20;
        android.os.RemoteException $r25;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        i0 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void setupDataActivityTracking(int)>(i0);

        virtualinvoke r1.<android.net.NetworkInfo: boolean isFailover()>();

        $r7 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r2 = $r7[i0];

        $r8 = interfaceinvoke r2.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        r3 = virtualinvoke $r8.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $r10 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r9 = $r10[i0];

        $z1 = virtualinvoke $r9.<android.net.NetworkConfig: boolean isDefault()>();

        if $z1 == 0 goto label07;

        $i2 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i2 == -1 goto label03;

        $i6 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i6 == i0 goto label03;

        $z3 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isNewNetTypePreferredOverCurrentNetType(int)>(i0);

        if $z3 == 0 goto label02;

        $r18 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i7 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        r6 = $r18[$i7];

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Policy requires ");

        $r21 = interfaceinvoke r6.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $r22 = virtualinvoke $r21.<android.net.NetworkInfo: java.lang.String getTypeName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" teardown");

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r24);

        $z7 = specialinvoke r0.<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)>(r6);

        if $z7 != 0 goto label03;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Network declined teardown request");

        specialinvoke r0.<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)>(r2);

     label01:
        return;

     label02:
        specialinvoke r0.<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)>(r2);

        return;

     label03:
        entermonitor r0;

     label04:
        $r12 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        $z2 = virtualinvoke $r12.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z2 == 0 goto label05;

        $r15 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r13 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i5 = r0.<com.android.server.ConnectivityService: int mNetTransitionWakeLockSerialNumber>;

        $r14 = virtualinvoke $r13.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(8, $i5, 0);

        virtualinvoke $r15.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r14, 1000L);

     label05:
        exitmonitor r0;

     label06:
        r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork> = i0;

        r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = 0;

        $i4 = r0.<com.android.server.ConnectivityService: int mDefaultConnectionSequence>;

        $i3 = 1 + $i4;

        r0.<com.android.server.ConnectivityService: int mDefaultConnectionSequence> = $i3;

        r0.<com.android.server.ConnectivityService: boolean mInetConditionChangeInFlight> = 0;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateNetworkSettings(android.net.NetworkStateTracker)>(r2);

     label07:
        interfaceinvoke r2.<android.net.NetworkStateTracker: void setTeardownRequested(boolean)>(0);

        specialinvoke r0.<com.android.server.ConnectivityService: void updateMtuSizeSettings(android.net.NetworkStateTracker)>(r2);

        specialinvoke r0.<com.android.server.ConnectivityService: void handleConnectivityChange(int,boolean)>(i0, 0);

        $i1 = specialinvoke r0.<com.android.server.ConnectivityService: int getConnectivityChangeDelay()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void sendConnectedBroadcastDelayed(android.net.NetworkInfo,int)>(r1, $i1);

        if r3 == null goto label01;

     label08:
        $r11 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        interfaceinvoke $r11.<com.android.internal.app.IBatteryStats: void noteNetworkInterfaceType(java.lang.String,int)>(r3, i0);

     label09:
        return;

     label10:
        $r25 := @caughtexception;

        return;

     label11:
        $r23 := @caughtexception;

        r5 = $r23;

     label12:
        exitmonitor r0;

     label13:
        throw r5;

        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void handleConnectionFailure(android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1, $r21, $r23, $r33, $r39;
        java.lang.String r2, r3, r4, $r16, $r20;
        android.content.Intent r5, r6, $r19, $r27;
        android.net.NetworkStateTracker[] $r7, $r30, $r35;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.net.NetworkStateTracker $r8, $r31, $r34;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18;
        boolean $z0, $z1;
        android.net.NetworkConfig $r25;
        android.net.NetworkConfig[] $r26;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        $r7 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i0 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        $r8 = $r7[$i0];

        interfaceinvoke $r8.<android.net.NetworkStateTracker: void setTeardownRequested(boolean)>(0);

        r2 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getReason()>();

        r3 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        if r2 != null goto label8;

        r4 = ".";

     label1:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to connect to ");

        $r16 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getTypeName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r20);

        $r19 = new android.content.Intent;

        specialinvoke $r19.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE");

        r5 = $r19;

        $r21 = new android.net.NetworkInfo;

        specialinvoke $r21.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(r1);

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("networkInfo", $r21);

        $i1 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("networkType", $i1);

        $r23 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r23 != null goto label2;

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("noConnectivity", 1);

     label2:
        if r2 == null goto label3;

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("reason", r2);

     label3:
        if r3 == null goto label4;

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("extraInfo", r3);

     label4:
        $z0 = virtualinvoke r1.<android.net.NetworkInfo: boolean isFailover()>();

        if $z0 == 0 goto label5;

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("isFailover", 1);

        virtualinvoke r1.<android.net.NetworkInfo: void setFailover(boolean)>(0);

     label5:
        $r26 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $i2 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        $r25 = $r26[$i2];

        $z1 = virtualinvoke $r25.<android.net.NetworkConfig: boolean isDefault()>();

        if $z1 == 0 goto label6;

        $i7 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void tryFailover(int)>($i7);

        $i6 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i6 == -1 goto label9;

        $r35 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i8 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $r34 = $r35[$i8];

        $r39 = interfaceinvoke $r34.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("otherNetwork", $r39);

     label6:
        $i3 = r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished>;

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("inetCondition", $i3);

        $r27 = new android.content.Intent;

        specialinvoke $r27.<android.content.Intent: void <init>(android.content.Intent)>(r5);

        r6 = $r27;

        virtualinvoke r6.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE");

        specialinvoke r0.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>(r6);

        specialinvoke r0.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>(r5);

        $i4 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i4 == -1 goto label7;

        $r30 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i5 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $r31 = $r30[$i5];

        $r33 = interfaceinvoke $r31.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        virtualinvoke r0.<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)>($r33);

     label7:
        return;

     label8:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label9:
        r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = 0;

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("noConnectivity", 1);

        goto label6;
    }

    private void handleConnectivityChange(int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0, i2, $i4, $i6, $i7;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        byte b1, $b3;
        android.net.LinkProperties r1, r2;
        android.net.NetworkStateTracker r3, $r13, $r21, $r26, $r48;
        java.util.Iterator r4, r11;
        java.lang.String r5, $r24, $r36, $r46, $r63, $r76, $r77, $r85;
        java.lang.Exception r6, $r89;
        android.util.SparseArray r7, $r43, $r50;
        android.net.LinkProperties$CompareResult r8;
        java.lang.Throwable r9, $r84;
        android.net.LinkAddress r10;
        android.net.LinkProperties[] $r12, $r17;
        android.net.NetworkStateTracker[] $r14, $r19, $r20, $r25, $r47;
        android.net.NetworkInfo $r15, $r23, $r30;
        android.net.NetworkConfig[] $r16, $r49;
        android.net.NetworkConfig $r18, $r57;
        com.android.server.connectivity.Nat464Xlat $r22, $r28, $r29, $r32;
        com.android.server.connectivity.Tethering $r27;
        java.util.Collection $r31, $r59, $r60, $r71;
        java.lang.StringBuilder $r33, $r37, $r38, $r39, $r40, $r41, $r42, $r44, $r45, $r53, $r54, $r55, $r56, $r61, $r62, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r75, $r78, $r79, $r80, $r81, $r82, $r83, $r86, $r87, $r88;
        java.lang.Object $r34, $r51, $r73;
        android.os.INetworkManagementService $r35;
        com.android.server.connectivity.Vpn $r52;
        android.net.ProxyProperties $r58;
        java.net.InetAddress $r72, $r74;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label05;

        b1 = 3;

     label01:
        z1 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeExempt(int)>(i0);

        specialinvoke r0.<com.android.server.ConnectivityService: void handleDnsConfigurationChange(int)>(i0);

        $r12 = r0.<com.android.server.ConnectivityService: android.net.LinkProperties[] mCurrentLinkProperties>;

        r1 = $r12[i0];

        $r14 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r13 = $r14[i0];

        $r15 = interfaceinvoke $r13.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        z2 = virtualinvoke $r15.<android.net.NetworkInfo: boolean isConnected()>();

        r2 = null;

        if z2 == 0 goto label08;

        $r47 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r48 = $r47[i0];

        r2 = interfaceinvoke $r48.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        if r1 == null goto label07;

        $z14 = virtualinvoke r1.<android.net.LinkProperties: boolean isIdenticalInterfaceName(android.net.LinkProperties)>(r2);

        if $z14 == 0 goto label14;

        r8 = virtualinvoke r1.<android.net.LinkProperties: android.net.LinkProperties$CompareResult compareAddresses(android.net.LinkProperties)>(r2);

        $r59 = r8.<android.net.LinkProperties$CompareResult: java.util.Collection removed>;

        $i6 = interfaceinvoke $r59.<java.util.Collection: int size()>();

        if $i6 != 0 goto label02;

        $r71 = r8.<android.net.LinkProperties$CompareResult: java.util.Collection added>;

        $i7 = interfaceinvoke $r71.<java.util.Collection: int size()>();

        if $i7 == 0 goto label13;

     label02:
        $r60 = r8.<android.net.LinkProperties$CompareResult: java.util.Collection removed>;

        r11 = interfaceinvoke $r60.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z15 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label06;

        $r73 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.net.LinkAddress) $r73;

        $r74 = virtualinvoke r10.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $z17 = $r74 instanceof java.net.Inet4Address;

        if $z17 == 0 goto label04;

        b1 = b1 | 1;

     label04:
        $r72 = virtualinvoke r10.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $z16 = $r72 instanceof java.net.Inet6Address;

        if $z16 == 0 goto label03;

        b1 = b1 | 2;

        goto label03;

     label05:
        b1 = 0;

        goto label01;

     label06:
        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleConnectivityChange: addresses changed linkProperty[");

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r66 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resetMask=");

        $r64 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b1);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n   car=");

        $r75 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r76);

     label07:
        $r49 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r57 = $r49[i0];

        $z13 = virtualinvoke $r57.<android.net.NetworkConfig: boolean isDefault()>();

        if $z13 == 0 goto label08;

        $r58 = virtualinvoke r2.<android.net.LinkProperties: android.net.ProxyProperties getHttpProxy()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void handleApplyDefaultProxy(android.net.ProxyProperties)>($r58);

     label08:
        $r17 = r0.<com.android.server.ConnectivityService: android.net.LinkProperties[] mCurrentLinkProperties>;

        $r17[i0] = r2;

        $r16 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r18 = $r16[i0];

        $z4 = virtualinvoke $r18.<android.net.NetworkConfig: boolean isDefault()>();

        z3 = specialinvoke r0.<com.android.server.ConnectivityService: boolean updateRoutes(android.net.LinkProperties,android.net.LinkProperties,boolean,boolean)>(r2, r1, $z4, z1);

        if b1 != 0 goto label09;

        if z3 == 0 goto label24;

     label09:
        if r1 == null goto label24;

        $r31 = virtualinvoke r1.<android.net.LinkProperties: java.util.Collection getAllInterfaceNames()>();

        r4 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z12 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label24;

        $r34 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r34;

        $z11 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z11 != 0 goto label23;

        if b1 == 0 goto label16;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetConnections(");

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b1);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r46);

        staticinvoke <android.net.NetworkUtils: int resetConnections(java.lang.String,int)>(r5, b1);

        $b3 = b1 & 1;

        if $b3 == 0 goto label16;

        r7 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r7;

        i2 = 0;

     label11:
        $r43 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $i4 = virtualinvoke $r43.<android.util.SparseArray: int size()>();

        if i2 >= $i4 goto label15;

        $r50 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r51 = virtualinvoke $r50.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r52 = (com.android.server.connectivity.Vpn) $r51;

        virtualinvoke $r52.<com.android.server.connectivity.Vpn: void interfaceStatusChanged(java.lang.String,boolean)>(r5, 0);

     label12:
        i2 = i2 + 1;

        goto label11;

     label13:
        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleConnectivityChange: address are the same reset per doReset linkProperty[");

        $r81 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r80 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:");

        $r79 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resetMask=");

        $r78 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b1);

        $r77 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r77);

        goto label07;

     label14:
        b1 = 3;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleConnectivityChange: interface not not equivalent reset both linkProperty[");

        $r56 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:");

        $r62 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resetMask=");

        $r61 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(3);

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r63);

        goto label07;

     label15:
        exitmonitor r7;

     label16:
        if z3 == 0 goto label10;

        specialinvoke r0.<com.android.server.ConnectivityService: void flushVmDnsCache()>();

     label17:
        $r35 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r35.<android.os.INetworkManagementService: void flushInterfaceDnsCache(java.lang.String)>(r5);

     label18:
        goto label10;

     label19:
        $r89 := @caughtexception;

        r6 = $r89;

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception resetting dns cache: ");

        $r86 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r85 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r85);

        goto label10;

     label20:
        $r84 := @caughtexception;

        r9 = $r84;

     label21:
        exitmonitor r7;

     label22:
        throw r9;

     label23:
        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t reset connection for type ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r36);

        goto label10;

     label24:
        $r19 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r3 = $r19[i0];

        $r22 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Nat464Xlat mClat>;

        $z5 = virtualinvoke $r22.<com.android.server.connectivity.Nat464Xlat: boolean requiresClat(int,android.net.NetworkStateTracker)>(i0, r3);

        if $z5 == 0 goto label26;

        $z8 = staticinvoke <com.android.server.connectivity.Nat464Xlat: boolean isRunningClat(android.net.LinkProperties)>(r1);

        if $z8 == 0 goto label25;

        $z10 = staticinvoke <com.android.server.connectivity.Nat464Xlat: boolean isRunningClat(android.net.LinkProperties)>(r2);

        if $z10 != 0 goto label25;

        $r32 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Nat464Xlat mClat>;

        virtualinvoke $r32.<com.android.server.connectivity.Nat464Xlat: void stopClat()>();

     label25:
        $r25 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r26 = $r25[i0];

        $r30 = interfaceinvoke $r26.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $z9 = virtualinvoke $r30.<android.net.NetworkInfo: boolean isConnected()>();

        if $z9 == 0 goto label28;

        $r29 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Nat464Xlat mClat>;

        virtualinvoke $r29.<com.android.server.connectivity.Nat464Xlat: void startClat(android.net.NetworkStateTracker)>(r3);

     label26:
        $r20 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r21 = $r20[i0];

        $r23 = interfaceinvoke $r21.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $r24 = virtualinvoke $r23.<android.net.NetworkInfo: java.lang.String getReason()>();

        $z6 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r24, "linkPropertiesChanged");

        if $z6 == 0 goto label27;

        $z7 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z7 == 0 goto label27;

        $r27 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        virtualinvoke $r27.<com.android.server.connectivity.Tethering: void handleTetherIfaceChange()>();

     label27:
        return;

     label28:
        $r28 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Nat464Xlat mClat>;

        virtualinvoke $r28.<com.android.server.connectivity.Nat464Xlat: void stopClat()>();

        goto label26;

        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    private void handleDeprecatedGlobalHttpProxy()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, $r6, $r8, $r9;
        java.lang.String[] r2;
        int i0, i1, $i2, $i3;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        boolean $z0;
        android.net.ProxyProperties $r7;
        java.lang.NumberFormatException $r10;

        r0 := @this: com.android.server.ConnectivityService;

        $r4 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r1 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r5, "http_proxy");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i2 = lengthof r2;

        if $i2 != 0 goto label2;

     label1:
        return;

     label2:
        $r6 = r2[0];

        i0 = 8080;

        $i3 = lengthof r2;

        if $i3 <= 1 goto label5;

     label3:
        $r8 = r2[1];

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

     label4:
        i0 = i1;

     label5:
        $r7 = new android.net.ProxyProperties;

        $r9 = r2[0];

        specialinvoke $r7.<android.net.ProxyProperties: void <init>(java.lang.String,int,java.lang.String)>($r9, i0, "");

        virtualinvoke r0.<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyProperties)>($r7);

        return;

     label6:
        $r10 := @caughtexception;

        return;

        catch java.lang.NumberFormatException from label3 to label4 with label6;
    }

    private void handleDisconnect(android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1, r3, r8, $r17, $r29, $r35;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.content.Intent r2, r5, $r16, $r28;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.net.LinkProperties r4, r10;
        java.lang.String r6, $r19, $r20, $r32, $r37, $r41;
        android.net.NetworkStateTracker[] r7, $r13, $r26, $r31, $r33;
        android.net.NetworkStateTracker r9, $r12, $r24, $r30, $r34;
        java.util.Iterator r11;
        android.net.NetworkConfig $r14, $r23;
        android.net.NetworkConfig[] $r15, $r22;
        java.lang.Integer $r43;
        java.lang.Object $r44;
        java.util.List $r45;
        java.util.List[] $r46;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        i0 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        $r13 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r12 = $r13[i0];

        interfaceinvoke $r12.<android.net.NetworkStateTracker: void setTeardownRequested(boolean)>(0);

        specialinvoke r0.<com.android.server.ConnectivityService: void removeDataActivityTracking(int)>(i0);

        $r15 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r14 = $r15[i0];

        $z1 = virtualinvoke $r14.<android.net.NetworkConfig: boolean isDefault()>();

        if $z1 != 0 goto label02;

        $r46 = r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids>;

        $r45 = $r46[i0];

        r11 = interfaceinvoke $r45.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z7 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label02;

        $r44 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r43 = (java.lang.Integer) $r44;

        $i12 = virtualinvoke $r43.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void reassessPidDns(int,boolean)>($i12, 0);

        goto label01;

     label02:
        $r16 = new android.content.Intent;

        specialinvoke $r16.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE");

        r2 = $r16;

        $r17 = new android.net.NetworkInfo;

        specialinvoke $r17.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(r1);

        r3 = $r17;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("networkInfo", r3);

        $i3 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("networkType", $i3);

        $z2 = virtualinvoke r1.<android.net.NetworkInfo: boolean isFailover()>();

        if $z2 == 0 goto label03;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("isFailover", 1);

        virtualinvoke r1.<android.net.NetworkInfo: void setFailover(boolean)>(0);

     label03:
        $r19 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getReason()>();

        if $r19 == null goto label04;

        $r37 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getReason()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("reason", $r37);

     label04:
        $r20 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        if $r20 == null goto label05;

        $r41 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("extraInfo", $r41);

     label05:
        $r22 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r23 = $r22[i0];

        $z3 = virtualinvoke $r23.<android.net.NetworkConfig: boolean isDefault()>();

        if $z3 == 0 goto label06;

        specialinvoke r0.<com.android.server.ConnectivityService: void tryFailover(int)>(i0);

        $i10 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i10 == -1 goto label09;

        $r33 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i11 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $r34 = $r33[$i11];

        $r35 = interfaceinvoke $r34.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("otherNetwork", $r35);

     label06:
        $i4 = r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished>;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("inetCondition", $i4);

        z0 = 1;

        $r26 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r24 = $r26[i0];

        r4 = interfaceinvoke $r24.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        if r4 == null goto label11;

        r6 = virtualinvoke r4.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z4 != 0 goto label11;

        r7 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        i1 = lengthof r7;

        i2 = 0;

     label07:
        if i2 >= i1 goto label11;

        r9 = r7[i2];

        if r9 != null goto label10;

     label08:
        i2 = i2 + 1;

        goto label07;

     label09:
        r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = 0;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("noConnectivity", 1);

        goto label06;

     label10:
        r8 = interfaceinvoke r9.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $z5 = virtualinvoke r8.<android.net.NetworkInfo: boolean isConnected()>();

        if $z5 == 0 goto label08;

        $i9 = virtualinvoke r8.<android.net.NetworkInfo: int getType()>();

        if $i9 == i0 goto label08;

        r10 = interfaceinvoke r9.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        if r10 == null goto label08;

        $r32 = virtualinvoke r10.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $z6 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r32);

        if $z6 == 0 goto label08;

        z0 = 0;

     label11:
        specialinvoke r0.<com.android.server.ConnectivityService: void handleConnectivityChange(int,boolean)>(i0, z0);

        $r28 = new android.content.Intent;

        specialinvoke $r28.<android.content.Intent: void <init>(android.content.Intent)>(r2);

        r5 = $r28;

        virtualinvoke r5.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE");

        specialinvoke r0.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>(r5);

        $i6 = specialinvoke r0.<com.android.server.ConnectivityService: int getConnectivityChangeDelay()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void sendStickyBroadcastDelayed(android.content.Intent,int)>(r2, $i6);

        $i5 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i5 == -1 goto label12;

        $r31 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i7 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $r30 = $r31[$i7];

        $r29 = interfaceinvoke $r30.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $i8 = specialinvoke r0.<com.android.server.ConnectivityService: int getConnectivityChangeDelay()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void sendConnectedBroadcastDelayed(android.net.NetworkInfo,int)>($r29, $i8);

     label12:
        return;
    }

    private void handleDnsConfigurationChange(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.net.NetworkStateTracker r1;
        android.net.LinkProperties r2;
        java.util.Collection r3;
        java.lang.Exception r4, r7, $r28, $r35;
        java.util.Iterator r5;
        java.lang.Integer r6;
        java.lang.String r8, $r15, $r17, $r24, $r25, $r26, $r32, $r36;
        java.lang.Object r9, $r22;
        java.lang.Throwable r10, $r30;
        android.net.NetworkStateTracker[] $r11;
        android.net.NetworkInfo $r12, $r23;
        boolean $z0, $z1, $z2, $z3;
        android.net.NetworkConfig[] $r13;
        android.net.NetworkConfig $r14;
        android.os.INetworkManagementService $r16, $r21;
        java.lang.String[] $r18;
        java.util.List $r19;
        java.util.List[] $r20;
        java.lang.StringBuilder $r27, $r29, $r31, $r33, $r34, $r37;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $r11 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r1 = $r11[i0];

        if r1 == null goto label01;

        $r12 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $z0 = virtualinvoke $r12.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label01;

        $z1 = interfaceinvoke r1.<android.net.NetworkStateTracker: boolean isTeardownRequested()>();

        if $z1 != 0 goto label01;

        r2 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        if r2 != null goto label02;

     label01:
        return;

     label02:
        r3 = virtualinvoke r2.<android.net.LinkProperties: java.util.Collection getDnses()>();

        $r13 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r14 = $r13[i0];

        $z2 = virtualinvoke $r14.<android.net.NetworkConfig: boolean isDefault()>();

        if $z2 == 0 goto label08;

        $r23 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        r8 = virtualinvoke $r23.<android.net.NetworkInfo: java.lang.String getTypeName()>();

        r9 = r0.<com.android.server.ConnectivityService: java.lang.Object mDnsLock>;

        entermonitor r9;

     label03:
        $r26 = virtualinvoke r2.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $r25 = virtualinvoke r2.<android.net.LinkProperties: java.lang.String getDomains()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void updateDnsLocked(java.lang.String,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r8, $r26, r3, $r25, 1);

        exitmonitor r9;

     label04:
        specialinvoke r0.<com.android.server.ConnectivityService: void flushVmDnsCache()>();

        return;

     label05:
        $r30 := @caughtexception;

        r10 = $r30;

     label06:
        exitmonitor r9;

     label07:
        throw r10;

     label08:
        $r16 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r15 = virtualinvoke r2.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $r18 = staticinvoke <android.net.NetworkUtils: java.lang.String[] makeStrings(java.util.Collection)>(r3);

        $r17 = virtualinvoke r2.<android.net.LinkProperties: java.lang.String getDomains()>();

        interfaceinvoke $r16.<android.os.INetworkManagementService: void setDnsServersForInterface(java.lang.String,java.lang.String[],java.lang.String)>($r15, $r18, $r17);

     label09:
        $r20 = r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids>;

        $r19 = $r20[i0];

        r5 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label04;

        $r22 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Integer) $r22;

     label11:
        $r21 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r24 = virtualinvoke r2.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $i1 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r21.<android.os.INetworkManagementService: void setDnsInterfaceForPid(java.lang.String,int)>($r24, $i1);

     label12:
        goto label10;

     label13:
        $r28 := @caughtexception;

        r7 = $r28;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception setting interface for pid: ");

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConnectivityService", $r32);

        goto label10;

     label14:
        $r35 := @caughtexception;

        r4 = $r35;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception setting dns servers: ");

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r36);

        goto label09;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Exception from label08 to label09 with label14;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    private void handleInetConditionChange(int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i9;
        boolean $z0;
        android.content.Context $r1, $r7;
        android.content.ContentResolver $r2, $r6;
        com.android.server.ConnectivityService$InternalHandler $r3, $r4;
        android.os.Message $r5;
        long $l8;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i3 != -1 goto label2;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("handleInetConditionChange: no active default network - ignore");

     label1:
        return;

     label2:
        $i4 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i4 == i0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleInetConditionChange: net=");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != default=");

        $i9 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ignore");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r14);

        return;

     label3:
        r0.<com.android.server.ConnectivityService: int mDefaultInetCondition> = i1;

        $z0 = r0.<com.android.server.ConnectivityService: boolean mInetConditionChangeInFlight>;

        if $z0 != 0 goto label1;

        $i5 = r0.<com.android.server.ConnectivityService: int mDefaultInetCondition>;

        if $i5 <= 50 goto label5;

        $r7 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r6 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r6, "inet_condition_debounce_up_delay", 500);

     label4:
        r0.<com.android.server.ConnectivityService: boolean mInetConditionChangeInFlight> = 1;

        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i7 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $i6 = r0.<com.android.server.ConnectivityService: int mDefaultConnectionSequence>;

        $r5 = virtualinvoke $r3.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(5, $i7, $i6);

        $l8 = (long) i2;

        virtualinvoke $r4.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r5, $l8);

        return;

     label5:
        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "inet_condition_debounce_down_delay", 3000);

        goto label4;
    }

    private void handleInetConditionHoldEnd(int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.net.NetworkInfo r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        android.net.NetworkStateTracker[] $r10;
        android.net.NetworkStateTracker $r11;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleInetConditionHoldEnd: net=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", condition=");

        $i2 = r0.<com.android.server.ConnectivityService: int mDefaultInetCondition>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", published condition=");

        $i3 = r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

        r0.<com.android.server.ConnectivityService: boolean mInetConditionChangeInFlight> = 0;

        $i4 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i4 != -1 goto label1;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("handleInetConditionHoldEnd: no active default network - ignoring");

        return;

     label1:
        $i5 = r0.<com.android.server.ConnectivityService: int mDefaultConnectionSequence>;

        if $i5 == i1 goto label2;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("handleInetConditionHoldEnd: event hold for obsolete network - ignoring");

        return;

     label2:
        $r10 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i6 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $r11 = $r10[$i6];

        r1 = interfaceinvoke $r11.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $z0 = virtualinvoke r1.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 != 0 goto label3;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("handleInetConditionHoldEnd: default network not connected - ignoring");

        return;

     label3:
        $i7 = r0.<com.android.server.ConnectivityService: int mDefaultInetCondition>;

        r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = $i7;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendInetConditionBroadcast(android.net.NetworkInfo)>(r1);

        return;
    }

    private void handleMobileProvisioningAction(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, $r16;
        android.content.Intent r2;
        android.content.ActivityNotFoundException r3, $r12;
        android.net.MobileDataStateTracker r4;
        java.util.concurrent.atomic.AtomicBoolean $r5, $r10;
        boolean $z0;
        android.net.Uri $r6;
        android.content.Context $r9;
        android.net.NetworkStateTracker[] $r11;
        android.net.NetworkStateTracker $r13;
        java.lang.StringBuilder $r14, $r15, $r17;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void setProvNotificationVisible(boolean,int,java.lang.String,java.lang.String)>(0, 5, null, null);

        $r5 = r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicBoolean mIsProvisioningNetwork>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("handleMobileProvisioningAction: on prov network enable then launch");

        $r10 = r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicBoolean mIsStartingProvisioning>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r11 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r13 = $r11[0];

        r4 = (android.net.MobileDataStateTracker) $r13;

        virtualinvoke r4.<android.net.MobileDataStateTracker: void setEnableFailFastMobileData(int)>(1);

        virtualinvoke r4.<android.net.MobileDataStateTracker: void enableMobileProvisioning(java.lang.String)>(r1);

        return;

     label1:
        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("handleMobileProvisioningAction: not prov network, launch browser directly");

        r2 = staticinvoke <android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>("android.intent.action.MAIN", "android.intent.category.APP_BROWSER");

        $r6 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r1);

        virtualinvoke r2.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r6);

        virtualinvoke r2.<android.content.Intent: android.content.Intent setFlags(int)>(272629760);

     label2:
        $r9 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r9.<android.content.Context: void startActivity(android.content.Intent)>(r2);

     label3:
        return;

     label4:
        $r12 := @caughtexception;

        r3 = $r12;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleMobileProvisioningAction: startActivity failed");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r16);

        return;

        catch android.content.ActivityNotFoundException from label2 to label3 with label4;
    }

    private void handleNetworkSamplingTimeout()
    {
        com.android.server.ConnectivityService r0;
        java.util.HashMap r1, $r8;
        android.net.NetworkStateTracker[] r2, r3;
        int i0, i1, i2, i3, i4, $i5;
        android.net.NetworkStateTracker r4, r6;
        android.net.SamplingDataTracker$SamplingSnapshot r5;
        java.lang.String r7, $r12, $r17, $r18;
        android.content.Context $r9;
        android.content.ContentResolver $r10;
        java.lang.StringBuilder $r11, $r13, $r14, $r15;
        android.app.PendingIntent $r16;
        java.lang.Object $r19;

        r0 := @this: com.android.server.ConnectivityService;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("Sampling interval elapsed, updating statistics ..");

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r1 = $r8;

        r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r6 = r2[i1];

        if r6 == null goto label2;

        r7 = interfaceinvoke r6.<android.net.NetworkStateTracker: java.lang.String getNetworkInterfaceName()>();

        if r7 == null goto label2;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, null);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        staticinvoke <android.net.SamplingDataTracker: void getSamplingSnapshots(java.util.Map)>(r1);

        r3 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        i2 = lengthof r3;

        i3 = 0;

     label4:
        if i3 >= i2 goto label6;

        r4 = r3[i3];

        if r4 == null goto label5;

        $r18 = interfaceinvoke r4.<android.net.NetworkStateTracker: java.lang.String getNetworkInterfaceName()>();

        $r19 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        r5 = (android.net.SamplingDataTracker$SamplingSnapshot) $r19;

        if r5 == null goto label5;

        interfaceinvoke r4.<android.net.NetworkStateTracker: void stopSampling(android.net.SamplingDataTracker$SamplingSnapshot)>(r5);

        interfaceinvoke r4.<android.net.NetworkStateTracker: void startSampling(android.net.SamplingDataTracker$SamplingSnapshot)>(r5);

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("Done.");

        $r9 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i4 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r10, "connectivity_sampling_interval_in_seconds", 720);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting timer for ");

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i4);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("seconds");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r17);

        $i5 = i4 * 1000;

        $r16 = r0.<com.android.server.ConnectivityService: android.app.PendingIntent mSampleIntervalElapsedIntent>;

        virtualinvoke r0.<com.android.server.ConnectivityService: void setAlarm(int,android.app.PendingIntent)>($i5, $r16);

        return;
    }

    private void handleSetDependencyMet(int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;
        android.net.NetworkStateTracker[] $r1, $r10;
        android.net.NetworkStateTracker $r2, $r11;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r2 = $r1[i0];

        if $r2 == null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleSetDependencyMet(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

        $r10 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r11 = $r10[i0];

        interfaceinvoke $r11.<android.net.NetworkStateTracker: void setDependencyMet(boolean)>(z0);

     label1:
        return;
    }

    private void handleSetMobileData(boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0;
        android.net.NetworkStateTracker[] $r1, $r3, $r5, $r7;
        android.net.NetworkStateTracker $r2, $r4, $r6, $r8;

        r0 := @this: com.android.server.ConnectivityService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r2 = $r1[0];

        if $r2 == null goto label1;

        $r7 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r8 = $r7[0];

        interfaceinvoke $r8.<android.net.NetworkStateTracker: void setUserDataEnable(boolean)>(z0);

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r4 = $r3[6];

        if $r4 == null goto label2;

        $r5 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r6 = $r5[6];

        interfaceinvoke $r6.<android.net.NetworkStateTracker: void setUserDataEnable(boolean)>(z0);

     label2:
        return;
    }

    private void handleSetNetworkPreference(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        java.lang.Throwable r1, $r8;
        boolean $z0, $z1;
        android.net.NetworkConfig[] $r2, $r4;
        android.net.NetworkConfig $r3, $r5;
        android.content.Context $r6;
        android.content.ContentResolver $r7;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z0 == 0 goto label3;

        $r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r3 = $r2[i0];

        if $r3 == null goto label3;

        $r4 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r5 = $r4[i0];

        $z1 = virtualinvoke $r5.<android.net.NetworkConfig: boolean isDefault()>();

        if $z1 == 0 goto label3;

        $i1 = r0.<com.android.server.ConnectivityService: int mNetworkPreference>;

        if $i1 == i0 goto label3;

        $r6 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r7, "network_preference", i0);

        entermonitor r0;

     label1:
        r0.<com.android.server.ConnectivityService: int mNetworkPreference> = i0;

        exitmonitor r0;

     label2:
        specialinvoke r0.<com.android.server.ConnectivityService: void enforcePreference()>();

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        r1 = $r8;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void handleSetPolicyDataEnable(int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0, $z1;
        android.net.NetworkStateTracker r1;
        android.net.NetworkStateTracker[] $r2;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z1 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r1 = $r2[i0];

        if r1 == null goto label1;

        interfaceinvoke r1.<android.net.NetworkStateTracker: void setPolicyDataEnable(boolean)>(z0);

     label1:
        return;
    }

    private boolean isAddressUnderVpn(java.net.InetAddress)
    {
        com.android.server.ConnectivityService r0;
        java.net.InetAddress r1, $r13, $r14, $r15, $r16;
        android.util.SparseArray r2, $r9;
        java.lang.Throwable r3, r5, $r17, $r18;
        java.lang.Object r4, $r11, $r12;
        int i0, i1;
        com.android.server.connectivity.Vpn r6;
        java.util.Iterator r7;
        boolean z0, $z1, $z2, $z3;
        android.net.LinkAddress r8;
        java.util.Collection $r10;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.net.InetAddress;

        r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r2;

     label01:
        r4 = r0.<com.android.server.ConnectivityService: java.lang.Object mRoutesLock>;

        entermonitor r4;

     label02:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r9 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r11 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r6 = (com.android.server.connectivity.Vpn) $r11;

     label03:
        if r6 != null goto label07;

     label04:
        exitmonitor r4;

     label05:
        exitmonitor r2;

     label06:
        return 0;

     label07:
        $r10 = r0.<com.android.server.ConnectivityService: java.util.Collection mExemptAddresses>;

        r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r12 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.net.LinkAddress) $r12;

        $r13 = virtualinvoke r8.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $z2 = staticinvoke <android.net.NetworkUtils: boolean addressTypeMatches(java.net.InetAddress,java.net.InetAddress)>(r1, $r13);

        if $z2 == 0 goto label08;

        i1 = virtualinvoke r8.<android.net.LinkAddress: int getNetworkPrefixLength()>();

        $r14 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)>(r1, i1);

        $r16 = virtualinvoke r8.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $r15 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)>($r16, i1);

        $z3 = virtualinvoke $r14.<java.net.InetAddress: boolean equals(java.lang.Object)>($r15);

        if $z3 == 0 goto label08;

        exitmonitor r4;

     label09:
        exitmonitor r2;

     label10:
        return 0;

     label11:
        $r17 := @caughtexception;

        r3 = $r17;

     label12:
        exitmonitor r2;

     label13:
        throw r3;

     label14:
        z0 = virtualinvoke r6.<com.android.server.connectivity.Vpn: boolean isAddressCovered(java.net.InetAddress)>(r1);

        exitmonitor r4;

     label15:
        exitmonitor r2;

     label16:
        return z0;

     label17:
        $r18 := @caughtexception;

        r5 = $r18;

     label18:
        exitmonitor r4;

     label19:
        throw r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label11;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private boolean isMobileDataStateTrackerReady()
    {
        com.android.server.ConnectivityService r0;
        android.net.MobileDataStateTracker r1;
        android.net.NetworkStateTracker[] $r2;
        android.net.NetworkStateTracker $r3;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        $r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r3 = $r2[5];

        r1 = (android.net.MobileDataStateTracker) $r3;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.net.MobileDataStateTracker: boolean isReady()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isNetworkBlocked(android.net.NetworkStateTracker, int)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkStateTracker r1;
        int i0, i1, $i2;
        java.lang.String r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r8;
        boolean z0;
        android.net.LinkProperties $r5;
        java.util.HashSet $r6;
        android.util.SparseIntArray $r7;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkStateTracker;

        i0 := @parameter1: int;

        $r5 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        r2 = virtualinvoke $r5.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        r3 = r0.<com.android.server.ConnectivityService: java.lang.Object mRulesLock>;

        entermonitor r3;

     label1:
        $r6 = r0.<com.android.server.ConnectivityService: java.util.HashSet mMeteredIfaces>;

        z0 = virtualinvoke $r6.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        $r7 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        i1 = virtualinvoke $r7.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        exitmonitor r3;

     label2:
        if z0 == 0 goto label6;

        $i2 = i1 & 1;

        if $i2 == 0 goto label6;

        return 1;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

     label4:
        exitmonitor r3;

     label5:
        throw r4;

     label6:
        return 0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isNetworkMeteredUnchecked(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.net.NetworkState r1;
        boolean z0;
        android.net.INetworkPolicyManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkState getNetworkStateUnchecked(int)>(i0);

        if r1 == null goto label4;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.net.INetworkPolicyManager mPolicyManager>;

        z0 = interfaceinvoke $r3.<android.net.INetworkPolicyManager: boolean isNetworkMetered(android.net.NetworkState)>(r1);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean isNewNetTypePreferredOverCurrentNetType(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.net.NetworkConfig[] $r1, $r3;
        android.net.NetworkConfig $r2, $r4;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.ConnectivityService: int mNetworkPreference>;

        if i0 == $i1 goto label1;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $i4 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $r2 = $r1[$i4];

        $i6 = $r2.<android.net.NetworkConfig: int priority>;

        $r3 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r4 = $r3[i0];

        $i5 = $r4.<android.net.NetworkConfig: int priority>;

        if $i6 > $i5 goto label2;

     label1:
        $i3 = r0.<com.android.server.ConnectivityService: int mNetworkPreference>;

        $i2 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i3 != $i2 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    private void loadGlobalProxy()
    {
        com.android.server.ConnectivityService r0;
        android.content.ContentResolver r1;
        java.lang.String r2, r3, r4, $r11, $r13;
        int i0;
        android.net.ProxyProperties r5, $r9, $r15;
        java.lang.Object r6;
        java.lang.Throwable r7, $r16;
        android.content.Context $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r10, $r12, $r14;

        r0 := @this: com.android.server.ConnectivityService;

        $r8 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        r1 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r2 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r1, "global_http_proxy_host");

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "global_http_proxy_port", 0);

        r3 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r1, "global_http_proxy_exclusion_list");

        r4 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r1, "global_proxy_pac_url");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label01;

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z3 != 0 goto label03;

     label01:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z1 != 0 goto label04;

        $r15 = new android.net.ProxyProperties;

        specialinvoke $r15.<android.net.ProxyProperties: void <init>(java.lang.String)>(r4);

        r5 = $r15;

     label02:
        $z2 = virtualinvoke r5.<android.net.ProxyProperties: boolean isValid()>();

        if $z2 != 0 goto label05;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid proxy properties, ignoring: ");

        $r11 = virtualinvoke r5.<android.net.ProxyProperties: java.lang.String toString()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r13);

     label03:
        return;

     label04:
        $r9 = new android.net.ProxyProperties;

        specialinvoke $r9.<android.net.ProxyProperties: void <init>(java.lang.String,int,java.lang.String)>(r2, i0, r3);

        r5 = $r9;

        goto label02;

     label05:
        r6 = r0.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        entermonitor r6;

     label06:
        r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy> = r5;

        exitmonitor r6;

     label07:
        return;

     label08:
        $r16 := @caughtexception;

        r7 = $r16;

     label09:
        exitmonitor r6;

     label10:
        throw r7;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private static void log(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConnectivityService", r0);

        return;
    }

    private static void loge(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConnectivityService", r0);

        return;
    }

    private android.content.Intent makeGeneralIntent(android.net.NetworkInfo, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1, $r6;
        java.lang.String r2, $r9, $r10, $r13, $r14;
        android.content.Intent r3, $r5;
        com.android.server.net.LockdownVpnTracker $r4, $r17;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        if $r4 == null goto label1;

        $r17 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        r1 = virtualinvoke $r17.<com.android.server.net.LockdownVpnTracker: android.net.NetworkInfo augmentNetworkInfo(android.net.NetworkInfo)>(r1);

     label1:
        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>(r2);

        r3 = $r5;

        $r6 = new android.net.NetworkInfo;

        specialinvoke $r6.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(r1);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("networkInfo", $r6);

        $i0 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("networkType", $i0);

        $z0 = virtualinvoke r1.<android.net.NetworkInfo: boolean isFailover()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("isFailover", 1);

        virtualinvoke r1.<android.net.NetworkInfo: void setFailover(boolean)>(0);

     label2:
        $r9 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getReason()>();

        if $r9 == null goto label3;

        $r14 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getReason()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("reason", $r14);

     label3:
        $r10 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        if $r10 == null goto label4;

        $r13 = virtualinvoke r1.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("extraInfo", $r13);

     label4:
        $i1 = r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished>;

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("inetCondition", $i1);

        return r3;
    }

    private static android.net.NetworkStateTracker makeWimaxStateTracker(android.content.Context, android.os.Handler)
    {
        android.content.Context r0;
        android.os.Handler r1;
        java.lang.String r3, r4, r5, r6, r7, $r28, $r32, $r43, $r49, $r50, $r52;
        android.content.ContextWrapper r8, $r25;
        dalvik.system.DexClassLoader r9, $r26;
        java.lang.ClassNotFoundException r10, $r48;
        java.lang.Class r11, r12;
        java.lang.Exception r13, $r38;
        android.net.NetworkStateTracker r14;
        android.os.IBinder r15;
        java.lang.reflect.Constructor r16, $r34;
        boolean $z0;
        android.content.res.Resources $r17, $r18, $r19, $r20, $r21, $r22;
        java.lang.StringBuilder $r23, $r24, $r27, $r42, $r44, $r45, $r46, $r47, $r51;
        java.lang.ClassLoader $r29;
        java.io.File $r31;
        java.lang.Class[] $r33, $r35;
        java.lang.Object[] $r36, $r41;
        java.lang.Object $r37, $r40;
        android.content.res.Resources$NotFoundException $r39;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Handler;

        $r17 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r17.<android.content.res.Resources: boolean getBoolean(int)>(17891399);

        if $z0 == 0 goto label10;

     label01:
        $r18 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        r3 = virtualinvoke $r18.<android.content.res.Resources: java.lang.String getString(int)>(17039409);

        $r19 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        r4 = virtualinvoke $r19.<android.content.res.Resources: java.lang.String getString(int)>(17039410);

        $r20 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        r5 = virtualinvoke $r20.<android.content.res.Resources: java.lang.String getString(int)>(17039411);

        $r21 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        r6 = virtualinvoke $r21.<android.content.res.Resources: java.lang.String getString(int)>(17039412);

        $r22 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        r7 = virtualinvoke $r22.<android.content.res.Resources: java.lang.String getString(int)>(17039413);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wimaxJarLocation: ");

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r28);

        $r25 = new android.content.ContextWrapper;

        specialinvoke $r25.<android.content.ContextWrapper: void <init>(android.content.Context)>(r0);

        r8 = $r25;

        $r26 = new dalvik.system.DexClassLoader;

        $r31 = virtualinvoke r8.<android.content.ContextWrapper: java.io.File getCacheDir()>();

        $r32 = virtualinvoke $r31.<java.io.File: java.lang.String getAbsolutePath()>();

        $r29 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        specialinvoke $r26.<dalvik.system.DexClassLoader: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassLoader)>(r3, $r32, r4, $r29);

        r9 = $r26;

     label02:
        virtualinvoke r9.<dalvik.system.DexClassLoader: java.lang.Class loadClass(java.lang.String)>(r5);

        r11 = virtualinvoke r9.<dalvik.system.DexClassLoader: java.lang.Class loadClass(java.lang.String)>(r7);

        r12 = virtualinvoke r9.<dalvik.system.DexClassLoader: java.lang.Class loadClass(java.lang.String)>(r6);

     label03:
        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("Starting Wimax Service... ");

        $r33 = newarray (java.lang.Class)[2];

        $r33[0] = class "android/content/Context";

        $r33[1] = class "android/os/Handler";

        $r34 = virtualinvoke r11.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r33);

        $r36 = newarray (java.lang.Object)[2];

        $r36[0] = r0;

        $r36[1] = r1;

        $r37 = virtualinvoke $r34.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r36);

        r14 = (android.net.NetworkStateTracker) $r37;

        $r35 = newarray (java.lang.Class)[2];

        $r35[0] = class "android/content/Context";

        $r35[1] = r11;

        r16 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r35);

        virtualinvoke r16.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r41 = newarray (java.lang.Object)[2];

        $r41[0] = r0;

        $r41[1] = r14;

        $r40 = virtualinvoke r16.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r41);

        r15 = (android.os.IBinder) $r40;

        virtualinvoke r16.<java.lang.reflect.Constructor: void setAccessible(boolean)>(0);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("WiMax", r15);

     label04:
        return r14;

     label05:
        $r48 := @caughtexception;

        r10 = $r48;

     label06:
        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception finding Wimax classes: ");

        $r52 = virtualinvoke r10.<java.lang.ClassNotFoundException: java.lang.String toString()>();

        $r51 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r50);

     label07:
        return null;

     label08:
        $r39 := @caughtexception;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Wimax Resources does not exist!!! ");

        return null;

     label09:
        $r38 := @caughtexception;

        r13 = $r38;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception creating Wimax classes: ");

        $r43 = virtualinvoke r13.<java.lang.Exception: java.lang.String toString()>();

        $r42 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r49 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r49);

        return null;

     label10:
        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Wimax is not enabled or not added to the network attributes!!! ");

        return null;

        catch android.content.res.Resources$NotFoundException from label01 to label02 with label08;
        catch java.lang.ClassNotFoundException from label02 to label03 with label05;
        catch android.content.res.Resources$NotFoundException from label02 to label03 with label08;
        catch java.lang.Exception from label03 to label04 with label09;
        catch android.content.res.Resources$NotFoundException from label06 to label07 with label08;
    }

    private boolean modifyRoute(android.net.LinkProperties, android.net.RouteInfo, int, boolean, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties r1;
        android.net.RouteInfo r2, r13, r14;
        int i0, $i1;
        boolean z0, z1, z2, z3, $z4, $z6, $z9, $z11;
        java.lang.String r3, $r19, $r43;
        java.lang.Object r5, r9;
        java.lang.Throwable r6, r11, $r39, $r48;
        android.net.LinkAddress r8, r12;
        java.lang.Exception r10, $r44, $r45, $r49;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r20, $r42, $r46, $r47;
        java.util.Collection $r21, $r24, $r26, $r28, $r30, $r32, $r34, $r35;
        android.os.INetworkManagementService $r22, $r23, $r25, $r27, $r29, $r31;
        java.net.InetAddress $r33, $r36, $r37, $r38, $r40, $r41;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.LinkProperties;

        r2 := @parameter1: android.net.RouteInfo;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        if r1 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("modifyRoute got unexpected null: ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r19);

        return 0;

     label02:
        if i0 <= 10 goto label03;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Error modifying route - too much recursion");

        return 0;

     label03:
        r3 = virtualinvoke r2.<android.net.RouteInfo: java.lang.String getInterface()>();

        if r3 != null goto label04;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Error modifying route - no interface name");

        return 0;

     label04:
        $z4 = virtualinvoke r2.<android.net.RouteInfo: boolean hasGateway()>();

        if $z4 == 0 goto label06;

        $r34 = virtualinvoke r1.<android.net.LinkProperties: java.util.Collection getAllRoutes()>();

        $r33 = virtualinvoke r2.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        r14 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo selectBestRoute(java.util.Collection,java.net.InetAddress)>($r34, $r33);

        if r14 == null goto label06;

        $r37 = virtualinvoke r14.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $r36 = virtualinvoke r2.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $z11 = virtualinvoke $r37.<java.net.InetAddress: boolean equals(java.lang.Object)>($r36);

        if $z11 == 0 goto label13;

        $r38 = virtualinvoke r2.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        r13 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.lang.String)>($r38, r3);

     label05:
        $i1 = i0 + 1;

        specialinvoke r0.<com.android.server.ConnectivityService: boolean modifyRoute(android.net.LinkProperties,android.net.RouteInfo,int,boolean,boolean,boolean)>(r1, r13, $i1, z0, z1, z2);

     label06:
        if z0 == 0 goto label20;

        if z1 == 0 goto label18;

     label07:
        r9 = r0.<com.android.server.ConnectivityService: java.lang.Object mRoutesLock>;

        entermonitor r9;

     label08:
        $r30 = r0.<com.android.server.ConnectivityService: java.util.Collection mAddedRoutes>;

        interfaceinvoke $r30.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        $r29 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r29.<android.os.INetworkManagementService: void addRoute(java.lang.String,android.net.RouteInfo)>(r3, r2);

     label09:
        if z2 == 0 goto label11;

     label10:
        r12 = virtualinvoke r2.<android.net.RouteInfo: android.net.LinkAddress getDestination()>();

        $r32 = r0.<com.android.server.ConnectivityService: java.util.Collection mExemptAddresses>;

        $z9 = interfaceinvoke $r32.<java.util.Collection: boolean contains(java.lang.Object)>(r12);

        if $z9 != 0 goto label11;

        $r31 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r31.<android.os.INetworkManagementService: void setHostExemption(android.net.LinkAddress)>(r12);

        $r35 = r0.<com.android.server.ConnectivityService: java.util.Collection mExemptAddresses>;

        interfaceinvoke $r35.<java.util.Collection: boolean add(java.lang.Object)>(r12);

     label11:
        exitmonitor r9;

     label12:
        return 1;

     label13:
        $r40 = virtualinvoke r2.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $r41 = virtualinvoke r14.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        r13 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.net.InetAddress,java.lang.String)>($r40, $r41, r3);

        goto label05;

     label14:
        $r39 := @caughtexception;

        r11 = $r39;

     label15:
        exitmonitor r9;

     label16:
        throw r11;

     label17:
        $r45 := @caughtexception;

        r10 = $r45;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception trying to add a route: ");

        $r42 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r43);

        return 0;

     label18:
        $r27 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r27.<android.os.INetworkManagementService: void addSecondaryRoute(java.lang.String,android.net.RouteInfo)>(r3, r2);

     label19:
        goto label12;

     label20:
        if z1 == 0 goto label32;

        r5 = r0.<com.android.server.ConnectivityService: java.lang.Object mRoutesLock>;

        entermonitor r5;

     label21:
        $r21 = r0.<com.android.server.ConnectivityService: java.util.Collection mAddedRoutes>;

        interfaceinvoke $r21.<java.util.Collection: boolean remove(java.lang.Object)>(r2);

        $r24 = r0.<com.android.server.ConnectivityService: java.util.Collection mAddedRoutes>;

        z3 = interfaceinvoke $r24.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

     label22:
        if z3 != 0 goto label24;

     label23:
        $r23 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r23.<android.os.INetworkManagementService: void removeRoute(java.lang.String,android.net.RouteInfo)>(r3, r2);

        r8 = virtualinvoke r2.<android.net.RouteInfo: android.net.LinkAddress getDestination()>();

        $r26 = r0.<com.android.server.ConnectivityService: java.util.Collection mExemptAddresses>;

        $z6 = interfaceinvoke $r26.<java.util.Collection: boolean contains(java.lang.Object)>(r8);

        if $z6 == 0 goto label24;

        $r25 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r25.<android.os.INetworkManagementService: void clearHostExemption(android.net.LinkAddress)>(r8);

        $r28 = r0.<com.android.server.ConnectivityService: java.util.Collection mExemptAddresses>;

        interfaceinvoke $r28.<java.util.Collection: boolean remove(java.lang.Object)>(r8);

     label24:
        exitmonitor r5;

     label25:
        goto label12;

     label26:
        $r48 := @caughtexception;

        r6 = $r48;

     label27:
        exitmonitor r5;

     label28:
        throw r6;

     label29:
        $r44 := @caughtexception;

     label30:
        exitmonitor r5;

     label31:
        return 0;

     label32:
        $r22 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r22.<android.os.INetworkManagementService: void removeSecondaryRoute(java.lang.String,android.net.RouteInfo)>(r3, r2);

     label33:
        goto label12;

     label34:
        $r49 := @caughtexception;

        return 0;

        catch java.lang.Exception from label07 to label08 with label17;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Exception from label16 to label17 with label17;
        catch java.lang.Exception from label18 to label19 with label17;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Exception from label23 to label24 with label29;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label30 to label31 with label26;
        catch java.lang.Exception from label32 to label33 with label34;
    }

    private boolean modifyRouteToAddress(android.net.LinkProperties, java.net.InetAddress, boolean, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties r1;
        java.net.InetAddress r2, $r7, $r8;
        boolean z0, z1, z2, $z3, $z4;
        android.net.RouteInfo r3, r5;
        java.lang.String r4, $r9;
        java.util.Collection $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.LinkProperties;

        r2 := @parameter1: java.net.InetAddress;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        $r6 = virtualinvoke r1.<android.net.LinkProperties: java.util.Collection getAllRoutes()>();

        r3 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo selectBestRoute(java.util.Collection,java.net.InetAddress)>($r6, r2);

        if r3 != null goto label2;

        $r9 = virtualinvoke r1.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        r5 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.lang.String)>(r2, $r9);

     label1:
        $z4 = specialinvoke r0.<com.android.server.ConnectivityService: boolean modifyRoute(android.net.LinkProperties,android.net.RouteInfo,int,boolean,boolean,boolean)>(r1, r5, 0, z0, z1, z2);

        return $z4;

     label2:
        r4 = virtualinvoke r3.<android.net.RouteInfo: java.lang.String getInterface()>();

        $r7 = virtualinvoke r3.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $z3 = virtualinvoke $r7.<java.net.InetAddress: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label3;

        r5 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.lang.String)>(r2, r4);

        goto label1;

     label3:
        $r8 = virtualinvoke r3.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        r5 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.net.InetAddress,java.lang.String)>(r2, $r8, r4);

        goto label1;
    }

    private void onUserStart(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r4, $r11;
        java.lang.Throwable r2, $r14;
        com.android.server.connectivity.Vpn r3, $r6, r15;
        java.lang.Object $r5;
        android.os.INetworkManagementService $r8;
        com.android.server.ConnectivityService$VpnCallback $r9;
        android.content.Context $r10, $r13;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler $r12;
        android.net.IConnectivityManager r16;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r6 = (com.android.server.connectivity.Vpn) $r5;

        if $r6 == null goto label3;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Starting user already has a VPN");

        exitmonitor r1;

     label2:
        return;

     label3:
        r15 = new com.android.server.connectivity.Vpn;

        $r10 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r9 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$VpnCallback mVpnCallback>;

        $r8 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        r16 = (android.net.IConnectivityManager) r0;

        specialinvoke r15.<com.android.server.connectivity.Vpn: void <init>(android.content.Context,com.android.server.ConnectivityService$VpnCallback,android.os.INetworkManagementService,android.net.IConnectivityManager,int)>($r10, $r9, $r8, r16, i0);

        r3 = r15;

        $r11 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3);

        $r13 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r12 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        virtualinvoke r3.<com.android.server.connectivity.Vpn: void startMonitoring(android.content.Context,android.os.Handler)>($r13, $r12);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r14 := @caughtexception;

        r2 = $r14;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void onUserStop(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r3, $r6;
        java.lang.Throwable r2, $r7;
        java.lang.Object $r4;
        com.android.server.connectivity.Vpn $r5;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r5 = (com.android.server.connectivity.Vpn) $r4;

        if $r5 != null goto label3;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Stopping user has no VPN");

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        virtualinvoke $r6.<android.util.SparseArray: void delete(int)>(i0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void reassessPidDns(int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2, i3;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Integer r1, $r7;
        int[] r2;
        java.lang.Exception r3, r6, $r18, $r20;
        android.net.NetworkStateTracker r4;
        android.net.LinkProperties r5;
        android.os.INetworkManagementService $r8, $r16;
        android.net.NetworkConfig[] $r9;
        android.net.NetworkConfig $r10;
        android.net.NetworkInfo $r11;
        android.net.NetworkStateTracker[] $r12;
        java.util.List[] $r13;
        java.util.List $r14;
        java.lang.String $r15, $r22, $r26;
        java.lang.StringBuilder $r17, $r19, $r21, $r23, $r24, $r25;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i0);

        r1 = $r7;

        r2 = r0.<com.android.server.ConnectivityService: int[] mPriorityList>;

        i1 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i1 goto label7;

        i3 = r2[i2];

        $r9 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r10 = $r9[i3];

        $z1 = virtualinvoke $r10.<android.net.NetworkConfig: boolean isDefault()>();

        if $z1 == 0 goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r12 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r4 = $r12[i3];

        $r11 = interfaceinvoke r4.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $z3 = virtualinvoke $r11.<android.net.NetworkInfo: boolean isConnected()>();

        if $z3 == 0 goto label2;

        $z2 = interfaceinvoke r4.<android.net.NetworkStateTracker: boolean isTeardownRequested()>();

        if $z2 != 0 goto label2;

        r5 = interfaceinvoke r4.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        if r5 == null goto label2;

        $r13 = r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids>;

        $r14 = $r13[i3];

        $z4 = interfaceinvoke $r14.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z4 == 0 goto label2;

     label4:
        $r16 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r15 = virtualinvoke r5.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        interfaceinvoke $r16.<android.os.INetworkManagementService: void setDnsInterfaceForPid(java.lang.String,int)>($r15, i0);

     label5:
        return;

     label6:
        $r18 := @caughtexception;

        r6 = $r18;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception reasseses pid dns: ");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConnectivityService", $r22);

        return;

     label7:
        $r8 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r8.<android.os.INetworkManagementService: void clearDnsInterfaceForPid(int)>(i0);

     label8:
        return;

     label9:
        $r20 := @caughtexception;

        r3 = $r20;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception clear interface from pid: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConnectivityService", $r26);

        return;

        catch java.lang.Exception from label4 to label5 with label6;
        catch java.lang.Exception from label7 to label8 with label9;
    }

    private void removeDataActivityTracking(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        java.lang.String r1;
        android.net.NetworkStateTracker[] $r3;
        android.net.NetworkStateTracker $r4;
        android.net.LinkProperties $r5;
        boolean $z0;
        android.os.INetworkManagementService $r6;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r4 = $r3[i0];

        $r5 = interfaceinvoke $r4.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        r1 = virtualinvoke $r5.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        if r1 == null goto label2;

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>(i0);

        if $z0 != 0 goto label1;

        if 1 != i0 goto label2;

     label1:
        $r6 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r6.<android.os.INetworkManagementService: void removeIdleTimer(java.lang.String)>(r1);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean removeRoute(android.net.LinkProperties, android.net.RouteInfo, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties r1;
        android.net.RouteInfo r2;
        boolean z0, $z1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.LinkProperties;

        r2 := @parameter1: android.net.RouteInfo;

        z0 := @parameter2: boolean;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean modifyRoute(android.net.LinkProperties,android.net.RouteInfo,int,boolean,boolean,boolean)>(r1, r2, 0, 0, z0, 0);

        return $z1;
    }

    private boolean removeRouteToAddress(android.net.LinkProperties, java.net.InetAddress)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties r1;
        java.net.InetAddress r2;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.LinkProperties;

        r2 := @parameter1: java.net.InetAddress;

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean modifyRouteToAddress(android.net.LinkProperties,java.net.InetAddress,boolean,boolean,boolean)>(r1, r2, 0, 1, 0);

        return $z0;
    }

    private void sendConnectedBroadcastDelayed(android.net.NetworkInfo, int)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;
        int i0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendGeneralBroadcast(android.net.NetworkInfo,java.lang.String)>(r1, "android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE");

        specialinvoke r0.<com.android.server.ConnectivityService: void sendGeneralBroadcastDelayed(android.net.NetworkInfo,java.lang.String,int)>(r1, "android.net.conn.CONNECTIVITY_CHANGE", i0);

        return;
    }

    private void sendDataActivityBroadcast(int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;
        android.content.Intent r1, $r3;
        long l1;
        java.lang.Throwable r2, $r8;
        android.os.UserHandle $r6;
        android.content.Context $r7;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.DATA_ACTIVITY_CHANGE");

        r1 = $r3;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("deviceType", i0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("isActive", z0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r7 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r6 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r7.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r1, $r6, "android.permission.RECEIVE_DATA_ACTIVITY_CHANGE", null, null, 0, null, null);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void sendGeneralBroadcast(android.net.NetworkInfo, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;
        java.lang.String r2;
        android.content.Intent $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.android.server.ConnectivityService: android.content.Intent makeGeneralIntent(android.net.NetworkInfo,java.lang.String)>(r1, r2);

        specialinvoke r0.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>($r3);

        return;
    }

    private void sendGeneralBroadcastDelayed(android.net.NetworkInfo, java.lang.String, int)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;
        java.lang.String r2;
        int i0;
        android.content.Intent $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = specialinvoke r0.<com.android.server.ConnectivityService: android.content.Intent makeGeneralIntent(android.net.NetworkInfo,java.lang.String)>(r1, r2);

        specialinvoke r0.<com.android.server.ConnectivityService: void sendStickyBroadcastDelayed(android.content.Intent,int)>($r3, i0);

        return;
    }

    private void sendInetConditionBroadcast(android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendGeneralBroadcast(android.net.NetworkInfo,java.lang.String)>(r1, "android.net.conn.INET_CONDITION_ACTION");

        return;
    }

    private void sendProxyBroadcast(android.net.ProxyProperties)
    {
        com.android.server.ConnectivityService r0;
        android.net.ProxyProperties r1, $r15;
        android.content.Intent r2, $r9;
        long l0;
        java.lang.Throwable r3, $r14;
        com.android.server.connectivity.PacManager $r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        android.content.Context $r12;
        android.os.UserHandle $r13;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.ProxyProperties;

        if r1 != null goto label1;

        $r15 = new android.net.ProxyProperties;

        specialinvoke $r15.<android.net.ProxyProperties: void <init>(java.lang.String,int,java.lang.String)>("", 0, "");

        r1 = $r15;

     label1:
        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PacManager mPacManager>;

        $z0 = virtualinvoke $r4.<com.android.server.connectivity.PacManager: boolean setCurrentProxyScriptUrl(android.net.ProxyProperties)>(r1);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sending Proxy Broadcast for ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r8);

        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.PROXY_CHANGE");

        r2 = $r9;

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(603979776);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("proxy", r1);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r12 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r13 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r12.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r2, $r13);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r14 := @caughtexception;

        r3 = $r14;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void sendStickyBroadcast(android.content.Intent)
    {
        com.android.server.ConnectivityService r0;
        android.content.Intent r1, $r7;
        java.lang.Throwable r2, r3, $r8, $r9;
        long l0;
        boolean $z0;
        android.os.UserHandle $r5;
        android.content.Context $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.content.Intent;

        entermonitor r0;

     label01:
        $z0 = r0.<com.android.server.ConnectivityService: boolean mSystemReady>;

        if $z0 != 0 goto label02;

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(android.content.Intent)>(r1);

        r0.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast> = $r7;

     label02:
        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r6 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r6.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r0;

     label05:
        return;

     label06:
        $r9 := @caughtexception;

        r3 = $r9;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

     label08:
        $r8 := @caughtexception;

        r2 = $r8;

     label09:
        exitmonitor r0;

     label10:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void sendStickyBroadcastDelayed(android.content.Intent, int)
    {
        com.android.server.ConnectivityService r0;
        android.content.Intent r1;
        int i0;
        com.android.server.ConnectivityService$InternalHandler $r2, $r3;
        android.os.Message $r4;
        long $l1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        if i0 > 0 goto label1;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>(r1);

        return;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r4 = virtualinvoke $r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(11, r1);

        $l1 = (long) i0;

        virtualinvoke $r3.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r4, $l1);

        return;
    }

    private void setBufferSize(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r18;
        java.io.IOException r2, $r15;
        java.lang.String[] r3;
        int $i0;
        java.lang.StringBuilder $r4, $r5, $r6, $r14, $r16, $r17;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

     label1:
        r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i0 = lengthof r3;

        if $i0 != 6 goto label3;

        $r8 = r3[0];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_rmem_min", $r8);

        $r9 = r3[1];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_rmem_def", $r9);

        $r10 = r3[2];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_rmem_max", $r10);

        $r11 = r3[3];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_wmem_min", $r11);

        $r12 = r3[4];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_wmem_def", $r12);

        $r13 = r3[5];

        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/kernel/ipv4/tcp_wmem_max", $r13);

     label2:
        return;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid buffersize string: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r7);

     label4:
        return;

     label5:
        $r15 := @caughtexception;

        r2 = $r15;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t set tcp buffer sizes:");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r18);

        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    private void setEnableFailFastMobileData(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        java.util.concurrent.atomic.AtomicInteger $r1, $r5;
        com.android.server.ConnectivityService$InternalHandler $r2, $r3;
        android.os.Message $r4;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        if i0 != 1 goto label2;

        $r5 = r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicInteger mEnableFailFastMobileDataTag>;

        i1 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r4 = virtualinvoke $r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(14, i1, i0);

        virtualinvoke $r3.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r4);

        return;

     label2:
        $r1 = r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicInteger mEnableFailFastMobileDataTag>;

        i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        goto label1;
    }

    private void setLockdownTracker(com.android.server.net.LockdownVpnTracker)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.net.LockdownVpnTracker r1, r2, $r7;
        android.os.INetworkManagementService $r4, $r5, $r6;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.net.LockdownVpnTracker;

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker> = null;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.net.LockdownVpnTracker: void shutdown()>();

     label1:
        if r1 == null goto label4;

     label2:
        $r5 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setFirewallEnabled(boolean)>(1);

        $r6 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>("lo", 1);

        r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker> = r1;

        $r7 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        virtualinvoke $r7.<com.android.server.net.LockdownVpnTracker: void init()>();

     label3:
        return;

     label4:
        $r4 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r4.<android.os.INetworkManagementService: void setFirewallEnabled(boolean)>(0);

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        return;

        catch android.os.RemoteException from label2 to label3 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private void setProvNotificationVisible(boolean, int, java.lang.String, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        boolean z0;
        int i0, i1;
        java.lang.String r1, r2, r7, r8, $r27, $r60, $r61;
        android.content.res.Resources r3;
        android.app.NotificationManager r4;
        android.app.Notification r5, $r29;
        java.lang.Object[] r6, r12, r13, $r31, $r40;
        android.content.Intent r9, r11, r14, $r30, $r39, $r51;
        java.lang.NullPointerException r10, r16, $r49, $r53;
        java.lang.StringBuilder $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r54, $r55, $r56, $r57, $r58, $r59;
        android.content.Context $r25, $r32, $r37, $r41, $r47;
        java.lang.Object $r26;
        java.lang.Integer $r28, $r36, $r44;
        android.app.PendingIntent $r33, $r38, $r45, $r48;
        android.net.Uri $r34, $r43;
        android.telephony.TelephonyManager $r50;

        r0 := @this: com.android.server.ConnectivityService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setProvNotificationVisible: E visible=");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" networkType=");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" extraInfo=");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" url=");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r27);

        r3 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r25 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r26 = virtualinvoke $r25.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        r4 = (android.app.NotificationManager) $r26;

        if z0 == 0 goto label08;

        $r29 = new android.app.Notification;

        specialinvoke $r29.<android.app.Notification: void <init>()>();

        r5 = $r29;

        tableswitch(i0)
        {
            case 0: goto label06;
            case 1: goto label05;
            case 2: goto label01;
            case 3: goto label01;
            case 4: goto label01;
            case 5: goto label06;
            default: goto label01;
        };

     label01:
        r13 = newarray (java.lang.Object)[1];

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r13[0] = $r28;

        r7 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040434, r13);

        $r31 = newarray (java.lang.Object)[1];

        $r31[0] = r1;

        r8 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040435, $r31);

        i1 = 17302920;

        $r30 = new android.content.Intent;

        $r34 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r2);

        specialinvoke $r30.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.VIEW", $r34);

        r14 = $r30;

        virtualinvoke r14.<android.content.Intent: android.content.Intent setFlags(int)>(272629760);

        $r32 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r33 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r32, 0, r14, 0);

        r5.<android.app.Notification: android.app.PendingIntent contentIntent> = $r33;

     label02:
        r5.<android.app.Notification: long when> = 0L;

        r5.<android.app.Notification: int icon> = i1;

        r5.<android.app.Notification: int flags> = 16;

        r5.<android.app.Notification: java.lang.CharSequence tickerText> = r7;

        $r37 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r38 = r5.<android.app.Notification: android.app.PendingIntent contentIntent>;

        virtualinvoke r5.<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>($r37, r7, r8, $r38);

     label03:
        virtualinvoke r4.<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>("CaptivePortal.Notification", i0, r5);

     label04:
        r0.<com.android.server.ConnectivityService: boolean mIsNotificationVisible> = z0;

        return;

     label05:
        r12 = newarray (java.lang.Object)[1];

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r12[0] = $r36;

        r7 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040433, r12);

        $r40 = newarray (java.lang.Object)[1];

        $r40[0] = r1;

        r8 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040435, $r40);

        i1 = 17302924;

        $r39 = new android.content.Intent;

        $r43 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r2);

        specialinvoke $r39.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.VIEW", $r43);

        r11 = $r39;

        virtualinvoke r11.<android.content.Intent: android.content.Intent setFlags(int)>(272629760);

        $r41 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r45 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r41, 0, r11, 0);

        r5.<android.app.Notification: android.app.PendingIntent contentIntent> = $r45;

        goto label02;

     label06:
        r6 = newarray (java.lang.Object)[1];

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r6[0] = $r44;

        r7 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040434, r6);

        $r50 = r0.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        r8 = virtualinvoke $r50.<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>();

        i1 = 17302920;

        $r51 = new android.content.Intent;

        specialinvoke $r51.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.connectivityservice.CONNECTED_TO_PROVISIONING_NETWORK_ACTION");

        r9 = $r51;

        virtualinvoke r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("EXTRA_URL", r2);

        virtualinvoke r9.<android.content.Intent: android.content.Intent setFlags(int)>(0);

        $r47 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r48 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r47, 0, r9, 0);

        r5.<android.app.Notification: android.app.PendingIntent contentIntent> = $r48;

        goto label02;

     label07:
        $r53 := @caughtexception;

        r10 = $r53;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setNotificaitionVisible: visible notificationManager npe=");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r61 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r61);

        virtualinvoke r10.<java.lang.NullPointerException: void printStackTrace()>();

        goto label04;

     label08:
        virtualinvoke r4.<android.app.NotificationManager: void cancel(java.lang.String,int)>("CaptivePortal.Notification", i0);

     label09:
        goto label04;

     label10:
        $r49 := @caughtexception;

        r16 = $r49;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setNotificaitionVisible: cancel notificationManager npe=");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r60);

        virtualinvoke r16.<java.lang.NullPointerException: void printStackTrace()>();

        goto label04;

        catch java.lang.NullPointerException from label03 to label04 with label07;
        catch java.lang.NullPointerException from label08 to label09 with label10;
    }

    private void setupDataActivityTracking(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        java.lang.String r1, $r7;
        android.net.NetworkStateTracker[] $r3;
        android.net.NetworkStateTracker $r4;
        android.net.LinkProperties $r5;
        boolean $z0;
        android.os.INetworkManagementService $r6;
        android.content.Context $r8, $r10;
        android.content.ContentResolver $r9, $r11;
        android.os.RemoteException $r12;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r4 = $r3[i0];

        $r5 = interfaceinvoke $r4.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        r1 = virtualinvoke $r5.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>(i0);

        if $z0 == 0 goto label4;

        $r10 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r11, "data_activity_timeout_mobile", 0);

        i0 = 0;

     label1:
        if i1 <= 0 goto label3;

        if r1 == null goto label3;

     label2:
        $r6 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke $r6.<android.os.INetworkManagementService: void addIdleTimer(java.lang.String,int,java.lang.String)>(r1, i1, $r7);

     label3:
        return;

     label4:
        if 1 != i0 goto label5;

        $r8 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r9, "data_activity_timeout_wifi", 0);

        goto label1;

     label5:
        i1 = 0;

        goto label1;

     label6:
        $r12 := @caughtexception;

        return;

        catch android.os.RemoteException from label2 to label3 with label6;
    }

    private int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser, boolean)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$FeatureUser r1, $r43;
        boolean z0, z1, $z2, $z3, $z6, $z7;
        int i0, i1, i2, $i4, $i5, $i6;
        java.lang.String r2, $r17, $r23, $r39, $r44;
        java.lang.Throwable r3, r7, $r45, $r46;
        java.util.Iterator r4;
        android.net.NetworkStateTracker r5;
        java.lang.Integer r6, $r27;
        long l3;
        java.util.List $r8, $r9, $r10, $r26, $r29, $r38;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r40, $r41, $r47, $r48, $r49, $r50;
        android.net.NetworkStateTracker[] $r13;
        java.util.List[] $r28, $r30;
        java.lang.Object $r42;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.ConnectivityService$FeatureUser;

        z0 := @parameter1: boolean;

        i0 = r1.<com.android.server.ConnectivityService$FeatureUser: int mNetworkType>;

        r2 = r1.<com.android.server.ConnectivityService$FeatureUser: java.lang.String mFeature>;

        i1 = r1.<com.android.server.ConnectivityService$FeatureUser: int mPid>;

        $i4 = r1.<com.android.server.ConnectivityService$FeatureUser: int mUid>;

        $z2 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z2 != 0 goto label01;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopUsingNetworkFeature: net ");

        $r47 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", net is invalid");

        $r44 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r44);

        return -1;

     label01:
        entermonitor r0;

     label02:
        $r8 = r0.<com.android.server.ConnectivityService: java.util.List mFeatureUsers>;

        $z3 = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z3 != 0 goto label07;

        exitmonitor r0;

     label03:
        return 1;

     label04:
        $r46 := @caughtexception;

        r3 = $r46;

     label05:
        exitmonitor r0;

     label06:
        throw r3;

     label07:
        virtualinvoke r1.<com.android.server.ConnectivityService$FeatureUser: void unlinkDeathRecipient()>();

        $r10 = r0.<com.android.server.ConnectivityService: java.util.List mFeatureUsers>;

        $r9 = r0.<com.android.server.ConnectivityService: java.util.List mFeatureUsers>;

        $i5 = interfaceinvoke $r9.<java.util.List: int indexOf(java.lang.Object)>(r1);

        interfaceinvoke $r10.<java.util.List: java.lang.Object remove(int)>($i5);

     label08:
        if z0 != 0 goto label12;

     label09:
        $r38 = r0.<com.android.server.ConnectivityService: java.util.List mFeatureUsers>;

        r4 = interfaceinvoke $r38.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label12;

        $r42 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r43 = (com.android.server.ConnectivityService$FeatureUser) $r42;

        $z7 = virtualinvoke $r43.<com.android.server.ConnectivityService$FeatureUser: boolean isSameUser(com.android.server.ConnectivityService$FeatureUser)>(r1);

        if $z7 == 0 goto label10;

        exitmonitor r0;

     label11:
        return 1;

     label12:
        i2 = virtualinvoke r0.<com.android.server.ConnectivityService: int convertFeatureToNetworkType(int,java.lang.String)>(i0, r2);

        $r13 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r5 = $r13[i2];

     label13:
        if r5 != null goto label16;

     label14:
        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopUsingNetworkFeature: net ");

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r37 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no known tracker for used net type ");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r39);

        exitmonitor r0;

     label15:
        return -1;

     label16:
        if i2 == i0 goto label25;

     label17:
        $r27 = new java.lang.Integer;

        specialinvoke $r27.<java.lang.Integer: void <init>(int)>(i1);

        r6 = $r27;

        $r28 = r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids>;

        $r26 = $r28[i2];

        interfaceinvoke $r26.<java.util.List: boolean remove(java.lang.Object)>(r6);

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label18:
        specialinvoke r0.<com.android.server.ConnectivityService: void reassessPidDns(int,boolean)>(i1, 1);

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        specialinvoke r0.<com.android.server.ConnectivityService: void flushVmDnsCache()>();

        $r30 = r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids>;

        $r29 = $r30[i2];

        $i6 = interfaceinvoke $r29.<java.util.List: int size()>();

        if $i6 == 0 goto label28;

        exitmonitor r0;

     label20:
        return 1;

     label21:
        $r45 := @caughtexception;

        r7 = $r45;

     label22:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r7;

     label23:
        exitmonitor r0;

     label24:
        if z1 == 0 goto label27;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopUsingNetworkFeature: teardown net ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r23);

        interfaceinvoke r5.<android.net.NetworkStateTracker: boolean teardown()>();

        return 1;

     label25:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopUsingNetworkFeature: net ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not a known feature - dropping");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r17);

     label26:
        z1 = 0;

        goto label23;

     label27:
        return -1;

     label28:
        z1 = 1;

        goto label23;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch java.lang.Throwable from label14 to label15 with label04;
        catch java.lang.Throwable from label17 to label18 with label04;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label04;
        catch java.lang.Throwable from label22 to label23 with label04;
        catch java.lang.Throwable from label23 to label24 with label04;
        catch java.lang.Throwable from label25 to label26 with label04;
    }

    private boolean teardown(android.net.NetworkStateTracker)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkStateTracker r1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkStateTracker;

        $z0 = interfaceinvoke r1.<android.net.NetworkStateTracker: boolean teardown()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<android.net.NetworkStateTracker: void setTeardownRequested(boolean)>(1);

        return 1;

     label1:
        return 0;
    }

    private void throwIfLockdownEnabled()
    {
        com.android.server.ConnectivityService r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $z0 = r0.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unavailable in lockdown mode");

        throw $r1;

     label1:
        return;
    }

    private void tryFailover(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i2;
        android.net.NetworkStateTracker r1, $r10;
        android.net.NetworkInfo r2;
        android.net.NetworkConfig[] $r3, $r5, $r7;
        android.net.NetworkConfig $r4, $r6, $r8;
        boolean $z0, $z1, $z3, $z4;
        android.net.NetworkStateTracker[] $r9, $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r17, $r18, $r20;
        java.lang.String $r15, $r16, $r19;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r4 = $r3[i0];

        $z0 = virtualinvoke $r4.<android.net.NetworkConfig: boolean isDefault()>();

        if $z0 == 0 goto label7;

        $i2 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        if $i2 != i0 goto label1;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tryFailover: set mActiveDefaultNetwork=-1, prevNetType=");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r19);

        r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork> = -1;

     label1:
        i1 = 0;

     label2:
        if i1 > 14 goto label7;

        if i1 != i0 goto label4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r5 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r6 = $r5[i1];

        if $r6 == null goto label3;

        $r7 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r8 = $r7[i1];

        $z1 = virtualinvoke $r8.<android.net.NetworkConfig: boolean isDefault()>();

        if $z1 == 0 goto label3;

        $r9 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r10 = $r9[i1];

        if $r10 == null goto label3;

        $r11 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r1 = $r11[i1];

        r2 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $z3 = virtualinvoke r2.<android.net.NetworkInfo: boolean isConnectedOrConnecting()>();

        if $z3 == 0 goto label5;

        $z4 = interfaceinvoke r1.<android.net.NetworkStateTracker: boolean isTeardownRequested()>();

        if $z4 == 0 goto label6;

     label5:
        virtualinvoke r2.<android.net.NetworkInfo: void setFailover(boolean)>(1);

        interfaceinvoke r1.<android.net.NetworkStateTracker: boolean reconnect()>();

     label6:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to switch to ");

        $r15 = virtualinvoke r2.<android.net.NetworkInfo: java.lang.String getTypeName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r16);

        goto label3;

     label7:
        return;
    }

    private void updateDnsLocked(java.lang.String, java.lang.String, java.util.Collection, java.lang.String, boolean)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, r2, r4, $r14, $r17, $r20, $r29, $r31, $r36;
        java.util.Collection r3;
        boolean z0, $z1;
        int i0, i1, $i2, $i3;
        java.lang.Exception r5, $r34;
        java.util.Iterator r6;
        java.net.InetAddress r7, $r22, $r23, $r30;
        android.os.INetworkManagementService $r8, $r19;
        java.lang.String[] $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r15, $r16, $r18, $r24, $r25, $r26, $r27, $r28, $r32, $r33, $r35;
        java.lang.Object $r13;
        java.util.ArrayList $r21;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Collection;

        r4 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        i0 = 0;

        $i2 = interfaceinvoke r3.<java.util.Collection: int size()>();

        if $i2 != 0 goto label01;

        $r22 = r0.<com.android.server.ConnectivityService: java.net.InetAddress mDefaultDns>;

        if $r22 == null goto label01;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r3 = $r21;

        $r23 = r0.<com.android.server.ConnectivityService: java.net.InetAddress mDefaultDns>;

        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>($r23);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no dns provided for ");

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - using ");

        $r30 = r0.<com.android.server.ConnectivityService: java.net.InetAddress mDefaultDns>;

        $r31 = virtualinvoke $r30.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r29);

     label01:
        $r8 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r9 = staticinvoke <android.net.NetworkUtils: java.lang.String[] makeStrings(java.util.Collection)>(r3);

        interfaceinvoke $r8.<android.os.INetworkManagementService: void setDnsServersForInterface(java.lang.String,java.lang.String[],java.lang.String)>(r2, $r9, r4);

     label02:
        if z0 == 0 goto label04;

     label03:
        $r19 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r19.<android.os.INetworkManagementService: void setDefaultInterfaceForDns(java.lang.String)>(r2);

     label04:
        r6 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.net.InetAddress) $r13;

     label06:
        i0 = i0 + 1;

     label07:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("net.dns");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke r7.<java.net.InetAddress: java.lang.String getHostAddress()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>($r17, $r20);

     label08:
        goto label05;

     label09:
        $r34 := @caughtexception;

        r5 = $r34;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception setting default dns interface: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r36);

        return;

     label10:
        i1 = i0 + 1;

     label11:
        $i3 = r0.<com.android.server.ConnectivityService: int mNumDnsEntries>;

        if i1 > $i3 goto label13;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("net.dns");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>($r14, "");

     label12:
        i1 = i1 + 1;

        goto label11;

     label13:
        r0.<com.android.server.ConnectivityService: int mNumDnsEntries> = i0;

     label14:
        return;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label04 to label05 with label09;
        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label11 to label12 with label09;
        catch java.lang.Exception from label13 to label14 with label09;
    }

    private void updateMtuSizeSettings(android.net.NetworkStateTracker)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkStateTracker r1;
        java.lang.String r2, $r9, $r14;
        int i0;
        java.lang.Exception r3, $r11;
        android.net.LinkProperties $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r13, $r15;
        android.os.INetworkManagementService $r10;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkStateTracker;

        $r4 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        r2 = virtualinvoke $r4.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $r5 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        i0 = virtualinvoke $r5.<android.net.LinkProperties: int getMtu()>();

        if i0 < 68 goto label1;

        if i0 <= 10000 goto label2;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected mtu value: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r9);

        return;

     label2:
        $r10 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r10.<android.os.INetworkManagementService: void setMtu(java.lang.String,int)>(r2, i0);

     label3:
        return;

     label4:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception in setMtu()");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConnectivityService", $r14);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private void updateNetworkSettings(android.net.NetworkStateTracker)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkStateTracker r1;
        java.lang.String r2, r3, $r7;
        int i0, $i1, $i2, $i3;
        java.lang.Integer r4;
        boolean $z0;
        android.content.Context $r5;
        android.content.ContentResolver $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkStateTracker;

        r2 = interfaceinvoke r1.<android.net.NetworkStateTracker: java.lang.String getTcpBufferSizesPropName()>();

        if r2 != null goto label5;

        r3 = null;

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label2;

        r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("net.tcp.buffersize.default");

     label2:
        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i1 == 0 goto label3;

        specialinvoke r0.<com.android.server.ConnectivityService: void setBufferSize(java.lang.String)>(r3);

     label3:
        i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("net.tcp.default_init_rwnd", 0);

        $r5 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r6, "tcp_default_init_rwnd", i0);

        r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i3 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i3 == 0 goto label4;

        $r7 = virtualinvoke r4.<java.lang.Integer: java.lang.String toString()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.sysctl.tcp_def_init_rwnd", $r7);

     label4:
        return;

     label5:
        r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>(r2);

        goto label1;
    }

    private boolean updateRoutes(android.net.LinkProperties, android.net.LinkProperties, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties r1, r2;
        boolean z0, z1, z2, z3, $z4, $z6, $z7, $z8, $z10, $z11, $z14, $z15, $z20;
        android.net.LinkProperties$CompareResult r3, r4, $r16, $r19;
        java.util.Iterator r5, r6, r12, r13, r14, r15;
        android.net.RouteInfo r7, r17;
        java.lang.String r8, $r44;
        java.lang.Object r9, $r22, $r28, $r30, $r31, $r33, $r40;
        java.lang.Throwable r10, $r43;
        java.lang.Exception r11, $r46;
        java.util.Collection $r18, $r20, $r21, $r24, $r25, $r26, $r32, $r36, $r37, $r38, $r39;
        int $i0, $i1;
        android.os.INetworkManagementService $r23;
        java.net.InetAddress $r27, $r29, $r34, $r35;
        java.lang.StringBuilder $r41, $r42, $r45;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.LinkProperties;

        r2 := @parameter1: android.net.LinkProperties;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r16 = new android.net.LinkProperties$CompareResult;

        specialinvoke $r16.<android.net.LinkProperties$CompareResult: void <init>()>();

        r3 = $r16;

        $r19 = new android.net.LinkProperties$CompareResult;

        specialinvoke $r19.<android.net.LinkProperties$CompareResult: void <init>()>();

        r4 = $r19;

        if r2 == null goto label07;

        r4 = virtualinvoke r2.<android.net.LinkProperties: android.net.LinkProperties$CompareResult compareAllRoutes(android.net.LinkProperties)>(r1);

        r3 = virtualinvoke r2.<android.net.LinkProperties: android.net.LinkProperties$CompareResult compareDnses(android.net.LinkProperties)>(r1);

     label01:
        $r18 = r4.<android.net.LinkProperties$CompareResult: java.util.Collection removed>;

        $i0 = interfaceinvoke $r18.<java.util.Collection: int size()>();

        if $i0 != 0 goto label02;

        $r37 = r4.<android.net.LinkProperties$CompareResult: java.util.Collection added>;

        $i1 = interfaceinvoke $r37.<java.util.Collection: int size()>();

        if $i1 == 0 goto label08;

     label02:
        z2 = 1;

     label03:
        $r20 = r4.<android.net.LinkProperties$CompareResult: java.util.Collection removed>;

        r5 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $r40 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r17 = (android.net.RouteInfo) $r40;

        if z0 != 0 goto label05;

        $z20 = virtualinvoke r17.<android.net.RouteInfo: boolean isDefaultRoute()>();

        if $z20 != 0 goto label06;

     label05:
        specialinvoke r0.<com.android.server.ConnectivityService: boolean removeRoute(android.net.LinkProperties,android.net.RouteInfo,boolean)>(r2, r17, 1);

     label06:
        if z0 != 0 goto label04;

        specialinvoke r0.<com.android.server.ConnectivityService: boolean removeRoute(android.net.LinkProperties,android.net.RouteInfo,boolean)>(r2, r17, 0);

        goto label04;

     label07:
        if r1 == null goto label01;

        $r38 = virtualinvoke r1.<android.net.LinkProperties: java.util.Collection getAllRoutes()>();

        r4.<android.net.LinkProperties$CompareResult: java.util.Collection added> = $r38;

        $r39 = virtualinvoke r1.<android.net.LinkProperties: java.util.Collection getDnses()>();

        r3.<android.net.LinkProperties$CompareResult: java.util.Collection added> = $r39;

        goto label01;

     label08:
        z2 = 0;

        goto label03;

     label09:
        if z0 != 0 goto label17;

        if z2 == 0 goto label13;

        if r2 == null goto label11;

        $r36 = virtualinvoke r2.<android.net.LinkProperties: java.util.Collection getDnses()>();

        r15 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z15 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label11;

        $r33 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r34 = (java.net.InetAddress) $r33;

        specialinvoke r0.<com.android.server.ConnectivityService: boolean removeRouteToAddress(android.net.LinkProperties,java.net.InetAddress)>(r2, $r34);

        goto label10;

     label11:
        if r1 == null goto label17;

        $r32 = virtualinvoke r1.<android.net.LinkProperties: java.util.Collection getDnses()>();

        r14 = interfaceinvoke $r32.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z14 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label17;

        $r31 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r35 = (java.net.InetAddress) $r31;

        specialinvoke r0.<com.android.server.ConnectivityService: boolean addRouteToAddress(android.net.LinkProperties,java.net.InetAddress,boolean)>(r1, $r35, z1);

        goto label12;

     label13:
        $r26 = r3.<android.net.LinkProperties$CompareResult: java.util.Collection removed>;

        r13 = interfaceinvoke $r26.<java.util.Collection: java.util.Iterator iterator()>();

     label14:
        $z10 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label15;

        $r30 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r29 = (java.net.InetAddress) $r30;

        specialinvoke r0.<com.android.server.ConnectivityService: boolean removeRouteToAddress(android.net.LinkProperties,java.net.InetAddress)>(r2, $r29);

        goto label14;

     label15:
        $r25 = r3.<android.net.LinkProperties$CompareResult: java.util.Collection added>;

        r12 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();

     label16:
        $z11 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label17;

        $r28 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r27 = (java.net.InetAddress) $r28;

        specialinvoke r0.<com.android.server.ConnectivityService: boolean addRouteToAddress(android.net.LinkProperties,java.net.InetAddress,boolean)>(r1, $r27, z1);

        goto label16;

     label17:
        $r21 = r4.<android.net.LinkProperties$CompareResult: java.util.Collection added>;

        r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();

     label18:
        $z7 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label32;

        $r22 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.net.RouteInfo) $r22;

        if z0 != 0 goto label19;

        $z6 = virtualinvoke r7.<android.net.RouteInfo: boolean isDefaultRoute()>();

        if $z6 != 0 goto label20;

     label19:
        specialinvoke r0.<com.android.server.ConnectivityService: boolean addRoute(android.net.LinkProperties,android.net.RouteInfo,boolean,boolean)>(r1, r7, 1, z1);

        goto label18;

     label20:
        specialinvoke r0.<com.android.server.ConnectivityService: boolean addRoute(android.net.LinkProperties,android.net.RouteInfo,boolean,boolean)>(r1, r7, 0, 0);

        r8 = virtualinvoke r1.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        r9 = r0.<com.android.server.ConnectivityService: java.lang.Object mRoutesLock>;

        entermonitor r9;

     label21:
        $z8 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r8);

        if $z8 != 0 goto label24;

        $r24 = r0.<com.android.server.ConnectivityService: java.util.Collection mAddedRoutes>;

        z3 = interfaceinvoke $r24.<java.util.Collection: boolean contains(java.lang.Object)>(r7);

     label22:
        if z3 != 0 goto label24;

     label23:
        $r23 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        interfaceinvoke $r23.<android.os.INetworkManagementService: void removeRoute(java.lang.String,android.net.RouteInfo)>(r8, r7);

     label24:
        exitmonitor r9;

     label25:
        goto label18;

     label26:
        $r43 := @caughtexception;

        r10 = $r43;

     label27:
        exitmonitor r9;

     label28:
        throw r10;

     label29:
        $r46 := @caughtexception;

        r11 = $r46;

     label30:
        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception trying to remove a route: ");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r44);

     label31:
        goto label24;

     label32:
        return z2;

        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Exception from label23 to label24 with label29;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label30 to label31 with label26;
    }

    public void captivePortalCheckComplete(android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        android.net.NetworkStateTracker[] $r6;
        int $i0;
        android.net.NetworkStateTracker $r7;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("captivePortalCheckComplete: ni=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r5);

        $r6 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i0 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        $r7 = $r6[$i0];

        interfaceinvoke $r7.<android.net.NetworkStateTracker: void captivePortalCheckComplete()>();

        return;
    }

    public void captivePortalCheckCompleted(android.net.NetworkInfo, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;
        boolean z0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        android.net.NetworkStateTracker[] $r8;
        int $i0;
        android.net.NetworkStateTracker $r9;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("captivePortalCheckCompleted: ni=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" captive=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r7);

        $r8 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i0 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        $r9 = $r8[$i0];

        interfaceinvoke $r9.<android.net.NetworkStateTracker: void captivePortalCheckCompleted(boolean)>(z0);

        return;
    }

    public int checkMobileProvisioning(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i2;
        long l1, $l3;
        java.lang.Throwable r1, $r21;
        java.lang.String r2, $r9, $r14, $r20;
        com.android.server.ConnectivityService$CheckMp r3, $r11;
        com.android.server.ConnectivityService$5 r4, $r12;
        com.android.server.ConnectivityService$CheckMp$Params r5, $r15;
        java.lang.StringBuilder $r6, $r7, $r8, $r16, $r17, $r18;
        boolean $z0, $z1, $z2;
        java.util.concurrent.atomic.AtomicBoolean $r10;
        android.content.Context $r13;
        com.android.server.ConnectivityService$CheckMp$Params[] $r19;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkMobileProvisioning: E suggestedTimeOutMs=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        i2 = i0;

        if i0 <= 60000 goto label1;

        i2 = 60000;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isNetworkSupported(int)>(0);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isNetworkSupported(int)>(5);

        if $z1 != 0 goto label5;

     label2:
        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("checkMobileProvisioning: X no mobile network");

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        r2 = "checkMobileProvisioning: X";

     label4:
        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>(r2);

        return i2;

     label5:
        $r10 = r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicBoolean mIsCheckingMobileProvisioning>;

        $z2 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z2 == 0 goto label7;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("checkMobileProvisioning: X already checking ignore for the moment");

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        r2 = "checkMobileProvisioning: X";

        goto label4;

     label7:
        specialinvoke r0.<com.android.server.ConnectivityService: void setProvNotificationVisible(boolean,int,java.lang.String,java.lang.String)>(0, 5, null, null);

        $r11 = new com.android.server.ConnectivityService$CheckMp;

        $r13 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        specialinvoke $r11.<com.android.server.ConnectivityService$CheckMp: void <init>(android.content.Context,com.android.server.ConnectivityService)>($r13, r0);

        r3 = $r11;

        $r12 = new com.android.server.ConnectivityService$5;

        specialinvoke $r12.<com.android.server.ConnectivityService$5: void <init>(com.android.server.ConnectivityService)>(r0);

        r4 = $r12;

        $r15 = new com.android.server.ConnectivityService$CheckMp$Params;

        $r14 = virtualinvoke r3.<com.android.server.ConnectivityService$CheckMp: java.lang.String getDefaultUrl()>();

        $l3 = (long) i2;

        specialinvoke $r15.<com.android.server.ConnectivityService$CheckMp$Params: void <init>(java.lang.String,long,com.android.server.ConnectivityService$CheckMp$CallBack)>($r14, $l3, r4);

        r5 = $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkMobileProvisioning: params=");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r20);

        $r19 = newarray (com.android.server.ConnectivityService$CheckMp$Params)[1];

        $r19[0] = r5;

        virtualinvoke r3.<com.android.server.ConnectivityService$CheckMp: android.os.AsyncTask execute(java.lang.Object[])>($r19);

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        r2 = "checkMobileProvisioning: X";

        goto label4;

     label9:
        $r21 := @caughtexception;

        r1 = $r21;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("checkMobileProvisioning: X");

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    int convertFeatureToNetworkType(int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 != 0 goto label09;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, "enableMMS");

        if $z1 == 0 goto label01;

        return 2;

     label01:
        $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, "enableSUPL");

        if $z2 == 0 goto label02;

        return 3;

     label02:
        $z3 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, "enableDUN");

        if $z3 != 0 goto label03;

        $z4 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, "enableDUNAlways");

        if $z4 == 0 goto label04;

     label03:
        return 4;

     label04:
        $z5 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, "enableHIPRI");

        if $z5 == 0 goto label05;

        return 5;

     label05:
        $z6 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, "enableFOTA");

        if $z6 == 0 goto label06;

        return 10;

     label06:
        $z7 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, "enableIMS");

        if $z7 == 0 goto label07;

        return 11;

     label07:
        $z8 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, "enableCBS");

        if $z8 == 0 goto label08;

        return 12;

     label08:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConnectivityService", "Can\'t match any mobile netTracker!");

        return i0;

     label09:
        if i0 != 1 goto label11;

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, "p2p");

        if $z0 == 0 goto label10;

        return 13;

     label10:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConnectivityService", "Can\'t match any wifi netTracker!");

        return i0;

     label11:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConnectivityService", "Unexpected network type");

        return i0;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.ConnectivityService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2, r78;
        java.lang.String[] r3;
        com.android.internal.util.IndentingPrintWriter r4, r70;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        int[] r5;
        java.util.Iterator r6, r12;
        java.lang.Throwable r7, $r69;
        java.lang.StringBuilder r8, $r22, $r23, $r24, $r26, $r34, $r40, $r43, $r44, $r46, $r48, $r49, $r53, $r55, $r61, $r62, $r64, $r65, $r68, r71, r72, r73, r74, r75, r76, r77;
        java.lang.String r9, r10, $r20, $r25, $r27, $r36, $r45, $r47, $r50, $r57, $r63, $r67;
        java.lang.Integer r11;
        android.net.NetworkStateTracker r14;
        android.content.Context $r15;
        android.net.NetworkStateTracker[] $r16, $r51;
        java.util.List $r17, $r38;
        boolean $z0, $z1, $z2, $z3;
        android.os.PowerManager$WakeLock $r19;
        java.util.ArrayList $r28, $r29, $r33;
        com.android.server.connectivity.Tethering $r30;
        java.lang.Object $r31, $r32, $r42;
        com.android.server.ConnectivityService$FeatureUser $r37;
        java.util.List[] $r39;
        android.net.NetworkInfo $r56, $r58, $r59;
        android.net.LinkProperties $r60;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        r70 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r70.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r2, "  ");

        r4 = r70;

        $r15 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $i5 = virtualinvoke $r15.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i5 == 0 goto label02;

        r71 = new java.lang.StringBuilder;

        specialinvoke r71.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump ConnectivityService from from pid=");

        $i8 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r61 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i9 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r68 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r67);

     label01:
        return;

     label02:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i0 = 0;

     label03:
        $r16 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i6 = lengthof $r16;

        if i0 >= $i6 goto label06;

        $r51 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r14 = $r51[i0];

        if r14 == null goto label05;

        r72 = new java.lang.StringBuilder;

        specialinvoke r72.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetworkStateTracker for ");

        $r47 = staticinvoke <android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)>(i0);

        $r48 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r50);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r58 = interfaceinvoke r14.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $z3 = virtualinvoke $r58.<android.net.NetworkInfo: boolean isConnected()>();

        if $z3 == 0 goto label04;

        r73 = new java.lang.StringBuilder;

        specialinvoke r73.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Active network: ");

        $r56 = interfaceinvoke r14.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $r57 = virtualinvoke $r56.<android.net.NetworkInfo: java.lang.String getTypeName()>();

        $r64 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r63);

     label04:
        $r59 = interfaceinvoke r14.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r59);

        $r60 = interfaceinvoke r14.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r60);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>(r14);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

     label05:
        i0 = i0 + 1;

        goto label03;

     label06:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Network Requester Pids:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        r5 = r0.<com.android.server.ConnectivityService: int[] mPriorityList>;

        i1 = lengthof r5;

        i2 = 0;

     label07:
        if i2 >= i1 goto label10;

        i4 = r5[i2];

        r74 = new java.lang.StringBuilder;

        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        r10 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids>;

        $r38 = $r39[i4];

        r12 = interfaceinvoke $r38.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r42 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.Integer) $r42;

        r75 = new java.lang.StringBuilder;

        specialinvoke r75.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r45 = virtualinvoke r11.<java.lang.Integer: java.lang.String toString()>();

        $r44 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r10 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label09:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(r10);

        i2 = i2 + 1;

        goto label07;

     label10:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("FeatureUsers:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r17 = r0.<com.android.server.ConnectivityService: java.util.List mFeatureUsers>;

        r6 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r32 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r37 = (com.android.server.ConnectivityService$FeatureUser) $r32;

        $r36 = virtualinvoke $r37.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r36);

        goto label11;

     label12:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        entermonitor r0;

     label13:
        r76 = new java.lang.StringBuilder;

        specialinvoke r76.<java.lang.StringBuilder: void <init>()>();

        r8 = virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetworkTranstionWakeLock is currently ");

        $r19 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        $z1 = virtualinvoke $r19.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z1 == 0 goto label18;

     label14:
        r9 = "";

     label15:
        $r22 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("held.");

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r20);

        r77 = new java.lang.StringBuilder;

        specialinvoke r77.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("It was last requested for ");

        $r27 = r0.<com.android.server.ConnectivityService: java.lang.String mNetTransitionWakeLockCausedBy>;

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r25);

        exitmonitor r0;

     label16:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r30 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        r78 = (java.io.PrintWriter) r4;

        virtualinvoke $r30.<com.android.server.connectivity.Tethering: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r78, r3);

        $r28 = r0.<com.android.server.ConnectivityService: java.util.ArrayList mInetLog>;

        if $r28 == null goto label01;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Inet condition reports:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        i3 = 0;

     label17:
        $r29 = r0.<com.android.server.ConnectivityService: java.util.ArrayList mInetLog>;

        $i7 = virtualinvoke $r29.<java.util.ArrayList: int size()>();

        if i3 >= $i7 goto label22;

        $r33 = r0.<com.android.server.ConnectivityService: java.util.ArrayList mInetLog>;

        $r31 = virtualinvoke $r33.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r31);

        i3 = i3 + 1;

        goto label17;

     label18:
        r9 = "not ";

        goto label15;

     label19:
        $r69 := @caughtexception;

        r7 = $r69;

     label20:
        exitmonitor r0;

     label21:
        throw r7;

     label22:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        return;

        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)
    {
        com.android.server.ConnectivityService r0;
        com.android.internal.net.VpnConfig r1;
        int i0, $i1;
        android.util.SparseArray r2, $r5;
        java.lang.Throwable r3, $r8;
        android.os.ParcelFileDescriptor r4;
        java.lang.Object $r6;
        com.android.server.connectivity.Vpn $r7;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.internal.net.VpnConfig;

        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r7 = (com.android.server.connectivity.Vpn) $r6;

        r4 = virtualinvoke $r7.<com.android.server.connectivity.Vpn: android.os.ParcelFileDescriptor establish(com.android.internal.net.VpnConfig)>(r1);

        exitmonitor r2;

     label2:
        return r4;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int findConnectionTypeForIface(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, $r5;
        android.net.NetworkStateTracker[] r2;
        int i0, i1, $i2;
        android.net.NetworkStateTracker r3;
        android.net.LinkProperties r4;
        boolean $z0, $z1;
        android.net.NetworkInfo $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label2;

     label1:
        return -1;

     label2:
        r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        i0 = lengthof r2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label1;

        r3 = r2[i1];

        if r3 == null goto label4;

        r4 = interfaceinvoke r3.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        if r4 == null goto label4;

        $r5 = virtualinvoke r4.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r3.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $i2 = virtualinvoke $r6.<android.net.NetworkInfo: int getType()>();

        return $i2;

     label4:
        i1 = i1 + 1;

        goto label3;
    }

    public android.net.LinkProperties getActiveLinkProperties()
    {
        com.android.server.ConnectivityService r0;
        int $i0;
        android.net.LinkProperties $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $i0 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $r1 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)>($i0);

        return $r1;
    }

    public android.net.LinkQualityInfo getActiveLinkQualityInfo()
    {
        com.android.server.ConnectivityService r0;
        int $i0, $i1;
        boolean $z0;
        android.net.NetworkStateTracker[] $r1;
        android.net.NetworkStateTracker $r2;
        android.net.LinkQualityInfo $r3;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $i0 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i1 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $r2 = $r1[$i1];

        $r3 = interfaceinvoke $r2.<android.net.NetworkStateTracker: android.net.LinkQualityInfo getLinkQualityInfo()>();

        return $r3;

     label1:
        return null;
    }

    public android.net.NetworkInfo getActiveNetworkInfo()
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.net.NetworkInfo $r1;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int,int)>($i1, i0);

        return $r1;
    }

    public android.net.NetworkInfo getActiveNetworkInfoForUid(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.net.NetworkInfo $r1;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $i1 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int,int)>($i1, i0);

        return $r1;
    }

    public android.net.NetworkInfo getActiveNetworkInfoUnfiltered()
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkStateTracker r1;
        int $i0, $i1;
        boolean $z0;
        android.net.NetworkStateTracker[] $r2;
        android.net.NetworkInfo $r3;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $i0 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>($i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $i1 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        r1 = $r2[$i1];

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        return $r3;

     label1:
        return null;
    }

    public android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()
    {
        com.android.server.ConnectivityService r0;
        long l0;
        java.lang.Throwable r1, $r8;
        android.net.NetworkState r2;
        android.net.NetworkQuotaInfo r3, r5;
        int $i1;
        android.net.INetworkPolicyManager $r6;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $i1 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        r2 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkState getNetworkStateUnchecked(int)>($i1);

     label2:
        if r2 == null goto label7;

     label3:
        $r6 = r0.<com.android.server.ConnectivityService: android.net.INetworkPolicyManager mPolicyManager>;

        r5 = interfaceinvoke $r6.<android.net.INetworkPolicyManager: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>(r2);

     label4:
        r3 = r5;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r3;

     label6:
        $r7 := @caughtexception;

     label7:
        r3 = null;

        goto label5;

     label8:
        $r8 := @caughtexception;

        r1 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label8;
    }

    public android.net.LinkQualityInfo[] getAllLinkQualityInfo()
    {
        com.android.server.ConnectivityService r0;
        java.util.ArrayList r1;
        android.net.NetworkStateTracker[] r2;
        int i0, i1, $i2;
        android.net.NetworkStateTracker r3;
        android.net.LinkQualityInfo r4;
        android.net.LinkQualityInfo[] $r5, $r7;
        java.lang.Object[] $r6;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        r1 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        if r3 == null goto label2;

        r4 = interfaceinvoke r3.<android.net.NetworkStateTracker: android.net.LinkQualityInfo getLinkQualityInfo()>();

        if r4 == null goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i2 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r5 = newarray (android.net.LinkQualityInfo)[$i2];

        $r6 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (android.net.LinkQualityInfo[]) $r6;

        return $r7;
    }

    public android.net.NetworkInfo[] getAllNetworkInfo()
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2, $i3;
        java.util.ArrayList r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r10;
        android.net.NetworkStateTracker[] r4;
        android.net.NetworkStateTracker r5;
        android.net.NetworkInfo[] $r6, $r9;
        java.lang.Object[] $r7;
        android.net.NetworkInfo $r8;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r2 = r0.<com.android.server.ConnectivityService: java.lang.Object mRulesLock>;

        entermonitor r2;

     label01:
        r4 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        i1 = lengthof r4;

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label08;

     label04:
        r5 = r4[i2];

     label05:
        if r5 == null goto label13;

     label06:
        $r8 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo getFilteredNetworkInfo(android.net.NetworkStateTracker,int)>(r5, i0);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label07:
        goto label13;

     label08:
        exitmonitor r2;

     label09:
        $i3 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r6 = newarray (android.net.NetworkInfo)[$i3];

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r9 = (android.net.NetworkInfo[]) $r7;

        return $r9;

     label10:
        $r10 := @caughtexception;

        r3 = $r10;

     label11:
        exitmonitor r2;

     label12:
        throw r3;

     label13:
        i2 = i2 + 1;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public android.net.NetworkState[] getAllNetworkState()
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2, $i3;
        java.util.ArrayList r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r13;
        android.net.NetworkStateTracker[] r4;
        android.net.NetworkStateTracker r5;
        android.net.NetworkState[] $r6, $r9;
        java.lang.Object[] $r7;
        android.net.NetworkState $r8;
        android.net.LinkProperties $r10;
        android.net.NetworkInfo $r11;
        android.net.LinkCapabilities $r12;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r2 = r0.<com.android.server.ConnectivityService: java.lang.Object mRulesLock>;

        entermonitor r2;

     label01:
        r4 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        i1 = lengthof r4;

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label08;

     label04:
        r5 = r4[i2];

     label05:
        if r5 == null goto label13;

     label06:
        $r8 = new android.net.NetworkState;

        $r11 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo getFilteredNetworkInfo(android.net.NetworkStateTracker,int)>(r5, i0);

        $r10 = interfaceinvoke r5.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        $r12 = interfaceinvoke r5.<android.net.NetworkStateTracker: android.net.LinkCapabilities getLinkCapabilities()>();

        specialinvoke $r8.<android.net.NetworkState: void <init>(android.net.NetworkInfo,android.net.LinkProperties,android.net.LinkCapabilities)>($r11, $r10, $r12);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label07:
        goto label13;

     label08:
        exitmonitor r2;

     label09:
        $i3 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r6 = newarray (android.net.NetworkState)[$i3];

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r9 = (android.net.NetworkState[]) $r7;

        return $r9;

     label10:
        $r13 := @caughtexception;

        r3 = $r13;

     label11:
        exitmonitor r2;

     label12:
        throw r3;

     label13:
        i2 = i2 + 1;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public android.net.ProxyProperties getGlobalProxy()
    {
        com.android.server.ConnectivityService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        android.net.ProxyProperties r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 = r0.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getLastTetherError(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        boolean $z0;
        com.android.server.connectivity.Tethering $r2;
        int $i0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $z0 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $i0 = virtualinvoke $r2.<com.android.server.connectivity.Tethering: int getLastTetherError(java.lang.String)>(r1);

        return $i0;

     label1:
        return 3;
    }

    public com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.util.SparseArray r1, $r4;
        java.lang.Throwable r2, $r7;
        com.android.internal.net.LegacyVpnInfo r3;
        java.lang.Object $r5;
        com.android.server.connectivity.Vpn $r6;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r6 = (com.android.server.connectivity.Vpn) $r5;

        r3 = virtualinvoke $r6.<com.android.server.connectivity.Vpn: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>();

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.net.LinkProperties getLinkProperties(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.net.NetworkStateTracker r1;
        boolean $z0;
        android.net.NetworkStateTracker[] $r2;
        android.net.LinkProperties $r3;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r1 = $r2[i0];

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        return $r3;

     label1:
        return null;
    }

    public android.net.LinkQualityInfo getLinkQualityInfo(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean $z0;
        android.net.NetworkStateTracker[] $r1;
        android.net.NetworkStateTracker $r2;
        android.net.LinkQualityInfo $r3;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r2 = $r1[i0];

        $r3 = interfaceinvoke $r2.<android.net.NetworkStateTracker: android.net.LinkQualityInfo getLinkQualityInfo()>();

        return $r3;

     label1:
        return null;
    }

    public boolean getMobileDataEnabled()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "mobile_data", 1);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String getMobileProvisioningUrl()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, r2, $r7, $r11, $r12, $r17;
        java.lang.Object[] r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r5, $r6, $r15, $r16, $r18;
        android.telephony.TelephonyManager $r8, $r9, $r10;
        android.content.Context $r13;
        android.content.res.Resources $r14;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: java.lang.String getProvisioningUrlBaseFromFile(int)>(2);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label4;

        $r13 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r14.<android.content.res.Resources: java.lang.String getString(int)>(17039398);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMobileProvisioningUrl: mobile_provisioining_url from resource =");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r17);

     label1:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label3;

        $r8 = r0.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        r2 = virtualinvoke $r8.<android.telephony.TelephonyManager: java.lang.String getLine1Number()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z2 == 0 goto label2;

        r2 = "0000000000";

     label2:
        r3 = newarray (java.lang.Object)[3];

        $r9 = r0.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        $r11 = virtualinvoke $r9.<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>();

        r3[0] = $r11;

        $r10 = r0.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        $r12 = virtualinvoke $r10.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>();

        r3[1] = $r12;

        r3[2] = r2;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r3);

     label3:
        return r1;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMobileProvisioningUrl: mobile_provisioning_url from File =");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r7);

        goto label1;
    }

    public java.lang.String getMobileRedirectedProvisioningUrl()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        boolean $z0;
        android.content.Context $r2;
        android.content.res.Resources $r3;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: java.lang.String getProvisioningUrlBaseFromFile(int)>(1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(17039399);

     label1:
        return r1;
    }

    public android.net.NetworkInfo getNetworkInfo(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.net.NetworkInfo $r1;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int,int)>(i0, $i1);

        return $r1;
    }

    public int getNetworkPreference()
    {
        com.android.server.ConnectivityService r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        entermonitor r0;

     label1:
        i0 = r0.<com.android.server.ConnectivityService: int mNetworkPreference>;

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo getProvisioningNetworkInfo()>();

        if r1 != null goto label1;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int,int)>($i1, i0);

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProvisioningOrActiveNetworkInfo: X provNi=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r5);

        return r1;
    }

    public android.net.ProxyProperties getProxy()
    {
        com.android.server.ConnectivityService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        android.net.ProxyProperties r3;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 = r0.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

     label2:
        if r3 != null goto label4;

     label3:
        $z0 = r0.<com.android.server.ConnectivityService: boolean mDefaultProxyDisabled>;

        if $z0 != 0 goto label4;

        r3 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mDefaultProxy>;

     label4:
        exitmonitor r1;

     label5:
        return r3;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.String[] getTetherableBluetoothRegexs()
    {
        com.android.server.ConnectivityService r0;
        boolean $z0;
        java.lang.String[] $r1, $r3;
        com.android.server.connectivity.Tethering $r2;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $z0 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r3 = virtualinvoke $r2.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableBluetoothRegexs()>();

        return $r3;

     label1:
        $r1 = newarray (java.lang.String)[0];

        return $r1;
    }

    public java.lang.String[] getTetherableIfaces()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.Tethering $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r2 = virtualinvoke $r1.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableIfaces()>();

        return $r2;
    }

    public java.lang.String[] getTetherableUsbRegexs()
    {
        com.android.server.ConnectivityService r0;
        boolean $z0;
        java.lang.String[] $r1, $r3;
        com.android.server.connectivity.Tethering $r2;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $z0 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r3 = virtualinvoke $r2.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableUsbRegexs()>();

        return $r3;

     label1:
        $r1 = newarray (java.lang.String)[0];

        return $r1;
    }

    public java.lang.String[] getTetherableWifiRegexs()
    {
        com.android.server.ConnectivityService r0;
        boolean $z0;
        java.lang.String[] $r1, $r3;
        com.android.server.connectivity.Tethering $r2;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $z0 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r3 = virtualinvoke $r2.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableWifiRegexs()>();

        return $r3;

     label1:
        $r1 = newarray (java.lang.String)[0];

        return $r1;
    }

    public java.lang.String[] getTetheredIfaces()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.Tethering $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r2 = virtualinvoke $r1.<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfaces()>();

        return $r2;
    }

    public java.lang.String[] getTetheringErroredIfaces()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.Tethering $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r2 = virtualinvoke $r1.<com.android.server.connectivity.Tethering: java.lang.String[] getErroredIfaces()>();

        return $r2;
    }

    public com.android.internal.net.VpnConfig getVpnConfig()
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.util.SparseArray r1, $r4;
        java.lang.Throwable r2, $r7;
        com.android.internal.net.VpnConfig r3;
        java.lang.Object $r5;
        com.android.server.connectivity.Vpn $r6;

        r0 := @this: com.android.server.ConnectivityService;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r6 = (com.android.server.connectivity.Vpn) $r5;

        r3 = virtualinvoke $r6.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig getVpnConfig()>();

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isActiveNetworkMetered()
    {
        com.android.server.ConnectivityService r0;
        long l0;
        java.lang.Throwable r1, $r2;
        boolean z0;
        int $i1;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $i1 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isNetworkMeteredUnchecked(int)>($i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isNetworkSupported(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean $z0;
        android.net.NetworkStateTracker[] $r1;
        android.net.NetworkStateTracker $r2;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r2 = $r1[i0];

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isTetheringSupported()
    {
        com.android.server.ConnectivityService r0;
        byte b0;
        boolean z0, $z1;
        java.lang.String $r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i1, $i2, $i3, $i4, $i5;
        com.android.server.connectivity.Tethering $r4, $r6, $r8, $r10;
        java.lang.String[] $r5, $r9, $r11;
        int[] $r7;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceTetherAccessPermission()>();

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.tether.denied");

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z1 == 0 goto label4;

        b0 = 0;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r3, "tether_supported", b0);

        if $i1 == 0 goto label5;

        z0 = 1;

     label2:
        if z0 == 0 goto label6;

        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r5 = virtualinvoke $r4.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableUsbRegexs()>();

        $i2 = lengthof $r5;

        if $i2 != 0 goto label3;

        $r8 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r9 = virtualinvoke $r8.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableWifiRegexs()>();

        $i4 = lengthof $r9;

        if $i4 != 0 goto label3;

        $r10 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r11 = virtualinvoke $r10.<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableBluetoothRegexs()>();

        $i5 = lengthof $r11;

        if $i5 == 0 goto label6;

     label3:
        $r6 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $r7 = virtualinvoke $r6.<com.android.server.connectivity.Tethering: int[] getUpstreamIfaceTypes()>();

        $i3 = lengthof $r7;

        if $i3 == 0 goto label6;

        return 1;

     label4:
        b0 = 1;

        goto label1;

     label5:
        z0 = 0;

        goto label2;

     label6:
        return 0;
    }

    public void markSocketAsUser(android.os.ParcelFileDescriptor, int)
    {
        com.android.server.ConnectivityService r0;
        android.os.ParcelFileDescriptor r1;
        int i0, i2, $i3;
        long l1;
        java.lang.Throwable r3, $r6;
        android.os.INetworkManagementService $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceMarkNetworkSocketPermission()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        i2 = interfaceinvoke $r4.<android.os.INetworkManagementService: int getMarkForUid(int)>(i0);

     label2:
        if i2 != -1 goto label3;

        i2 = 0;

     label3:
        $i3 = virtualinvoke r1.<android.os.ParcelFileDescriptor: int getFd()>();

        staticinvoke <android.net.NetworkUtils: void markSocket(int,int)>($i3, i2);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r3;

     label6:
        $r5 := @caughtexception;

        goto label4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public boolean prepareVpn(java.lang.String, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, r2;
        int i0, $i1;
        android.util.SparseArray r3, $r5;
        java.lang.Throwable r4, $r8;
        boolean z0;
        java.lang.Object $r6;
        com.android.server.connectivity.Vpn $r7;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r3;

     label1:
        $r5 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r7 = (com.android.server.connectivity.Vpn) $r6;

        z0 = virtualinvoke $r7.<com.android.server.connectivity.Vpn: boolean prepare(java.lang.String,java.lang.String)>(r1, r2);

        exitmonitor r3;

     label2:
        return z0;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

     label4:
        exitmonitor r3;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean protectVpn(android.os.ParcelFileDescriptor)
    {
        com.android.server.ConnectivityService r0;
        android.os.ParcelFileDescriptor r1;
        java.lang.Throwable r2, r7, $r17, $r19;
        int i0, i1, $i2;
        android.util.SparseArray r6, $r11;
        boolean $z0;
        android.net.NetworkStateTracker[] $r9;
        android.net.NetworkStateTracker $r10;
        com.android.server.connectivity.Vpn $r12;
        java.lang.Object $r13;
        java.lang.Exception $r14, $r15, $r16, $r18;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

     label01:
        i0 = r0.<com.android.server.ConnectivityService: int mActiveDefaultNetwork>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i2);

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z0 == 0 goto label17;

        $r9 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r10 = $r9[i0];

        if $r10 == null goto label17;

        r6 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r6;

     label02:
        $r11 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r13 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        $r12 = (com.android.server.connectivity.Vpn) $r13;

        virtualinvoke $r12.<com.android.server.connectivity.Vpn: void protect(android.os.ParcelFileDescriptor)>(r1);

        exitmonitor r6;

     label03:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label04:
        return 1;

     label05:
        $r17 := @caughtexception;

        r7 = $r17;

     label06:
        exitmonitor r6;

     label07:
        throw r7;

     label08:
        $r14 := @caughtexception;

     label09:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label10:
        return 0;

     label11:
        $r19 := @caughtexception;

        r2 = $r19;

     label12:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label13:
        throw r2;

     label14:
        $r18 := @caughtexception;

        goto label10;

     label15:
        $r15 := @caughtexception;

        goto label13;

     label16:
        $r16 := @caughtexception;

        return 1;

     label17:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label18:
        goto label10;

        catch java.lang.Exception from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Exception from label03 to label04 with label16;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Exception from label07 to label08 with label08;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Exception from label09 to label10 with label14;
        catch java.lang.Exception from label12 to label13 with label15;
        catch java.lang.Exception from label17 to label18 with label14;
    }

    public void reportInetCondition(int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2, i3, $i4;
        java.lang.StringBuilder r1, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17;
        java.lang.String r2, r3;
        android.content.Context $r4;
        java.util.Calendar $r15;
        java.util.Date $r18;
        java.util.ArrayList $r19, $r20, $r22;
        com.android.server.ConnectivityService$InternalHandler $r21, $r23;
        android.os.Message $r24;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r4 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR", "ConnectivityService");

        i2 = staticinvoke <com.android.server.ConnectivityService: int getCallingPid()>();

        i3 = staticinvoke <com.android.server.ConnectivityService: int getCallingUid()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") reports inet is ");

        if i1 <= 50 goto label3;

        r2 = "connected";

     label1:
        $r10 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") on ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network Type ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r15 = staticinvoke <java.util.GregorianCalendar: java.util.Calendar getInstance()>();

        $r18 = virtualinvoke $r15.<java.util.Calendar: java.util.Date getTime()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        r3 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = r0.<com.android.server.ConnectivityService: java.util.ArrayList mInetLog>;

        virtualinvoke $r19.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        $r20 = r0.<com.android.server.ConnectivityService: java.util.ArrayList mInetLog>;

        $i4 = virtualinvoke $r20.<java.util.ArrayList: int size()>();

        if $i4 <= 15 goto label4;

        $r22 = r0.<com.android.server.ConnectivityService: java.util.ArrayList mInetLog>;

        virtualinvoke $r22.<java.util.ArrayList: java.lang.Object remove(int)>(0);

        goto label2;

     label3:
        r2 = "disconnected";

        goto label1;

     label4:
        $r23 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r21 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r24 = virtualinvoke $r21.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(4, i0, i1);

        virtualinvoke $r23.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r24);

        return;
    }

    public void requestNetworkTransitionWakelock(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r8;
        android.os.PowerManager$WakeLock $r3, $r4;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        com.android.server.ConnectivityService$InternalHandler $r5, $r6;
        android.os.Message $r7;
        long $l4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        $z0 = virtualinvoke $r3.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label3;

        exitmonitor r0;

     label2:
        return;

     label3:
        $i0 = r0.<com.android.server.ConnectivityService: int mNetTransitionWakeLockSerialNumber>;

        $i1 = 1 + $i0;

        r0.<com.android.server.ConnectivityService: int mNetTransitionWakeLockSerialNumber> = $i1;

        $r4 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void acquire()>();

        r0.<com.android.server.ConnectivityService: java.lang.String mNetTransitionWakeLockCausedBy> = r1;

        exitmonitor r0;

     label4:
        $r6 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r5 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i2 = r0.<com.android.server.ConnectivityService: int mNetTransitionWakeLockSerialNumber>;

        $r7 = virtualinvoke $r5.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(8, $i2, 0);

        $i3 = r0.<com.android.server.ConnectivityService: int mNetTransitionWakeLockTimeout>;

        $l4 = (long) $i3;

        virtualinvoke $r6.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r7, $l4);

        return;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

     label6:
        exitmonitor r0;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean requestRouteToHost(int, int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        java.lang.String r1;
        java.net.InetAddress r2;
        byte[] $r3;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress intToInetAddress(int)>(i1);

        if r2 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r2.<java.net.InetAddress: byte[] getAddress()>();

        $z0 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean requestRouteToHostAddress(int,byte[],java.lang.String)>(i0, $r3, r1);

        return $z0;
    }

    public boolean requestRouteToHostAddress(int, byte[], java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i3, $i4, $i5;
        byte[] r1;
        java.lang.String r2, $r20, $r25, $r32, $r34;
        java.net.UnknownHostException r3, $r30;
        java.net.InetAddress r4;
        android.content.pm.PackageManager$NameNotFoundException r5, $r31;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        android.net.NetworkStateTracker r6;
        android.net.NetworkInfo$DetailedState r7, $r17, $r21;
        long l2;
        java.lang.Throwable r8, $r35, r41;
        java.util.List $r9;
        java.lang.Integer $r10;
        android.app.AppOpsManager $r11;
        android.content.pm.PackageManager $r12;
        android.content.Context $r13;
        android.content.pm.ApplicationInfo $r14;
        android.net.NetworkStateTracker[] $r15;
        android.net.NetworkInfo $r16;
        android.net.LinkProperties $r19;
        java.lang.StringBuilder $r22, $r23, $r24, $r27, $r29, $r33, r37, r39, r40;
        java.lang.IllegalArgumentException r38;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceChangePermission()>();

        $r9 = r0.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z2 = interfaceinvoke $r9.<java.util.List: boolean contains(java.lang.Object)>($r10);

        if $z2 == 0 goto label01;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

     label01:
        r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r1);

     label02:
        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i3 != 1000 goto label05;

        z0 = 1;

     label03:
        if z0 != 0 goto label11;

        $z5 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isAddressUnderVpn(java.net.InetAddress)>(r4);

        if $z5 == 0 goto label11;

        return 0;

     label04:
        $r30 := @caughtexception;

        r3 = $r30;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress got ");

        $r34 = virtualinvoke r3.<java.net.UnknownHostException: java.lang.String toString()>();

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r32);

        return 0;

     label05:
        $r11 = r0.<com.android.server.ConnectivityService: android.app.AppOpsManager mAppOpsManager>;

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r11.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i4, r2);

     label06:
        $r13 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r12 = virtualinvoke $r13.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r14 = virtualinvoke $r12.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r2, 0);

        i1 = $r14.<android.content.pm.ApplicationInfo: int flags>;

     label07:
        $i5 = i1 & 1;

        if $i5 == 0 goto label09;

        z0 = 1;

     label08:
        goto label03;

     label09:
        z0 = 0;

        goto label08;

     label10:
        $r31 := @caughtexception;

        r5 = $r31;

        r38 = new java.lang.IllegalArgumentException;

        r41 = (java.lang.Throwable) r5;

        specialinvoke r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to find calling package details", r41);

        throw r38;

     label11:
        $z3 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z3 != 0 goto label12;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress on invalid network: ");

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r25);

        return 0;

     label12:
        $r15 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r6 = $r15[i0];

        $r16 = interfaceinvoke r6.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        r7 = virtualinvoke $r16.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        if r6 == null goto label14;

        $r17 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if r7 == $r17 goto label13;

        $r21 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CAPTIVE_PORTAL_CHECK>;

        if r7 != $r21 goto label14;

     label13:
        $z4 = interfaceinvoke r6.<android.net.NetworkStateTracker: boolean isTeardownRequested()>();

        if $z4 == 0 goto label15;

     label14:
        return 0;

     label15:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label16:
        $r19 = interfaceinvoke r6.<android.net.NetworkStateTracker: android.net.LinkProperties getLinkProperties()>();

        z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean addRouteToAddress(android.net.LinkProperties,java.net.InetAddress,boolean)>($r19, r4, z0);

        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress ok=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r20);

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return z1;

     label18:
        $r35 := @caughtexception;

        r8 = $r35;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r8;

        catch java.net.UnknownHostException from label01 to label02 with label04;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label10;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    public void sendConnectedBroadcast(android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void sendGeneralBroadcast(android.net.NetworkInfo,java.lang.String)>(r1, "android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE");

        specialinvoke r0.<com.android.server.ConnectivityService: void sendGeneralBroadcast(android.net.NetworkInfo,java.lang.String)>(r1, "android.net.conn.CONNECTIVITY_CHANGE");

        return;
    }

    public void setAirplaneMode(boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0;
        long l0;
        java.lang.Throwable r1, $r8;
        android.content.ContentResolver r2;
        byte b1;
        android.content.Intent r3, $r5;
        android.content.Context $r4, $r7;

        r0 := @this: com.android.server.ConnectivityService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        r2 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label2:
        if z0 == 0 goto label5;

        b1 = 1;

     label3:
        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r2, "airplane_mode_on", b1);

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.AIRPLANE_MODE");

        r3 = $r5;

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("state", z0);

        $r7 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void sendBroadcast(android.content.Intent)>(r3);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        b1 = 0;

        goto label3;

     label6:
        $r8 := @caughtexception;

        r1 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    void setAlarm(int, android.app.PendingIntent)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.app.PendingIntent r1;
        long l1, $l2, $l3;
        android.app.AlarmManager $r2;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.app.PendingIntent;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l3 = (long) i0;

        l1 = $l2 + $l3;

        $r2 = r0.<com.android.server.ConnectivityService: android.app.AlarmManager mAlarmManager>;

        virtualinvoke $r2.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(2, l1, r1);

        return;
    }

    public void setDataDependency(int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;
        com.android.server.ConnectivityService$InternalHandler r1, r2;
        byte b1;
        android.os.Message $r3;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        if z0 == 0 goto label2;

        b1 = 1;

     label1:
        $r3 = virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(10, b1, i0);

        virtualinvoke r1.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        return;

     label2:
        b1 = 0;

        goto label1;
    }

    public void setGlobalProxy(android.net.ProxyProperties)
    {
        com.android.server.ConnectivityService r0;
        android.net.ProxyProperties r1, $r9, $r10, $r12, $r14, $r15, $r16, $r18, $r25, $r26;
        java.lang.Object r2;
        java.lang.Throwable r3, r8, $r27, $r28;
        java.lang.String r4, r5, r6, $r13, $r17, $r19, $r23, $r24;
        int i0;
        android.content.ContentResolver r7;
        long l1;
        android.content.Context $r11;
        boolean $z4, $z5, $z6, $z7, $z8;
        java.lang.StringBuilder $r20, $r21, $r22;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.ProxyProperties;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        r2 = r0.<com.android.server.ConnectivityService: java.lang.Object mProxyLock>;

        entermonitor r2;

     label01:
        $r9 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

        if r1 != $r9 goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        if r1 == null goto label09;

     label04:
        $r25 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

        $z8 = virtualinvoke r1.<android.net.ProxyProperties: boolean equals(java.lang.Object)>($r25);

        if $z8 == 0 goto label09;

        exitmonitor r2;

     label05:
        return;

     label06:
        $r28 := @caughtexception;

        r3 = $r28;

     label07:
        exitmonitor r2;

     label08:
        throw r3;

     label09:
        $r10 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

        if $r10 == null goto label11;

        $r26 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

        $z7 = virtualinvoke $r26.<android.net.ProxyProperties: boolean equals(java.lang.Object)>(r1);

        if $z7 == 0 goto label11;

        exitmonitor r2;

     label10:
        return;

     label11:
        r4 = "";

        r5 = "";

        r6 = "";

        if r1 == null goto label21;

     label12:
        $r13 = virtualinvoke r1.<android.net.ProxyProperties: java.lang.String getHost()>();

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r13);

        if $z4 == 0 goto label13;

        $r23 = virtualinvoke r1.<android.net.ProxyProperties: java.lang.String getPacFileUrl()>();

        $z6 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r23);

        if $z6 != 0 goto label21;

     label13:
        $z5 = virtualinvoke r1.<android.net.ProxyProperties: boolean isValid()>();

        if $z5 != 0 goto label15;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid proxy properties, ignoring: ");

        $r19 = virtualinvoke r1.<android.net.ProxyProperties: java.lang.String toString()>();

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r24);

        exitmonitor r2;

     label14:
        return;

     label15:
        $r14 = new android.net.ProxyProperties;

        specialinvoke $r14.<android.net.ProxyProperties: void <init>(android.net.ProxyProperties)>(r1);

        r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy> = $r14;

        $r15 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

        r4 = virtualinvoke $r15.<android.net.ProxyProperties: java.lang.String getHost()>();

        $r16 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

        i0 = virtualinvoke $r16.<android.net.ProxyProperties: int getPort()>();

        $r18 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

        r5 = virtualinvoke $r18.<android.net.ProxyProperties: java.lang.String getExclusionList()>();

        $r17 = virtualinvoke r1.<android.net.ProxyProperties: java.lang.String getPacFileUrl()>();

        if $r17 == null goto label16;

        r6 = virtualinvoke r1.<android.net.ProxyProperties: java.lang.String getPacFileUrl()>();

     label16:
        $r11 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        r7 = virtualinvoke $r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label17:
        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r7, "global_http_proxy_host", r4);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r7, "global_http_proxy_port", i0);

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r7, "global_http_proxy_exclusion_list", r5);

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r7, "global_proxy_pac_url", r6);

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r2;

     label19:
        $r12 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy>;

        if $r12 != null goto label20;

        r1 = r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mDefaultProxy>;

     label20:
        specialinvoke r0.<com.android.server.ConnectivityService: void sendProxyBroadcast(android.net.ProxyProperties)>(r1);

        return;

     label21:
        r0.<com.android.server.ConnectivityService: android.net.ProxyProperties mGlobalProxy> = null;

     label22:
        i0 = 0;

        goto label16;

     label23:
        $r27 := @caughtexception;

        r8 = $r27;

     label24:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label25:
        throw r8;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch java.lang.Throwable from label13 to label14 with label06;
        catch java.lang.Throwable from label15 to label16 with label06;
        catch java.lang.Throwable from label16 to label17 with label06;
        catch java.lang.Throwable from label17 to label18 with label23;
        catch java.lang.Throwable from label18 to label19 with label06;
        catch java.lang.Throwable from label21 to label22 with label06;
        catch java.lang.Throwable from label24 to label25 with label06;
    }

    public void setMobileDataEnabled(boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0;
        com.android.server.ConnectivityService$InternalHandler r1, r2;
        byte b0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        android.os.Message $r8;

        r0 := @this: com.android.server.ConnectivityService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceChangePermission()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setMobileDataEnabled(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r7);

        r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        if z0 == 0 goto label2;

        b0 = 1;

     label1:
        $r8 = virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(7, b0, 0);

        virtualinvoke r1.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r8);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public void setNetworkPreference(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        com.android.server.ConnectivityService$InternalHandler $r1, $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceChangePermission()>();

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r3 = virtualinvoke $r1.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(3, i0, 0);

        virtualinvoke $r2.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public void setPolicyDataEnable(int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;
        com.android.server.ConnectivityService$InternalHandler r1, r2;
        byte b1;
        android.content.Context $r3;
        android.os.Message $r4;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "ConnectivityService");

        r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        if z0 == 0 goto label2;

        b1 = 1;

     label1:
        $r4 = virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int)>(12, i0, b1);

        virtualinvoke r1.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r4);

        return;

     label2:
        b1 = 0;

        goto label1;
    }

    public void setProvisioningNotificationVisible(boolean, int, java.lang.String, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        boolean z0;
        int i0;
        java.lang.String r1, r2;

        r0 := @this: com.android.server.ConnectivityService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void setProvNotificationVisible(boolean,int,java.lang.String,java.lang.String)>(z0, i0, r1, r2);

        return;
    }

    public boolean setRadio(int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0, $z1, $z2;
        android.net.NetworkStateTracker r1;
        android.net.NetworkStateTracker[] $r2;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceChangePermission()>();

        $z1 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r1 = $r2[i0];

        if r1 == null goto label1;

        $z2 = interfaceinvoke r1.<android.net.NetworkStateTracker: boolean setRadio(boolean)>(z0);

        if $z2 == 0 goto label1;

        return 1;
    }

    public boolean setRadios(boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, z1, $z2;
        android.net.NetworkStateTracker[] r1;
        int i0, i1;
        android.net.NetworkStateTracker r2;

        r0 := @this: com.android.server.ConnectivityService;

        z0 := @parameter0: boolean;

        z1 = 1;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceChangePermission()>();

        r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        if r2 == null goto label2;

        $z2 = interfaceinvoke r2.<android.net.NetworkStateTracker: boolean setRadio(boolean)>(z0);

        if $z2 == 0 goto label3;

        if z1 == 0 goto label3;

        z1 = 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        z1 = 0;

        goto label2;

     label4:
        return z1;
    }

    public int setUsbTethering(boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, $z1;
        com.android.server.connectivity.Tethering $r1;
        int $i0;

        r0 := @this: com.android.server.ConnectivityService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceTetherChangePermission()>();

        $z1 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z1 == 0 goto label1;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $i0 = virtualinvoke $r1.<com.android.server.connectivity.Tethering: int setUsbTethering(boolean)>(z0);

        return $i0;

     label1:
        return 3;
    }

    public void startLegacyVpn(com.android.internal.net.VpnProfile)
    {
        com.android.server.ConnectivityService r0;
        com.android.internal.net.VpnProfile r1;
        android.net.LinkProperties r2;
        int i0, $i1;
        android.util.SparseArray r3, $r5;
        java.lang.Throwable r4, $r10;
        java.lang.Object $r6;
        android.security.KeyStore $r7;
        com.android.server.connectivity.Vpn $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.internal.net.VpnProfile;

        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        r2 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()>();

        if r2 != null goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing active network connection");

        throw $r9;

     label1:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r3;

     label2:
        $r5 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r8 = (com.android.server.connectivity.Vpn) $r6;

        $r7 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        virtualinvoke $r8.<com.android.server.connectivity.Vpn: void startLegacyVpn(com.android.internal.net.VpnProfile,android.security.KeyStore,android.net.LinkProperties)>(r1, $r7, r2);

        exitmonitor r3;

     label3:
        return;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

     label5:
        exitmonitor r3;

     label6:
        throw r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int startUsingNetworkFeature(int, java.lang.String, android.os.IBinder)
    {
        com.android.server.ConnectivityService r0;
        int i0, i5, i6, i7, $i23, $i24, $i36;
        java.lang.String r1, r4, $r42, $r70, $r72, $r75, $r87, $r104;
        android.os.IBinder r2;
        long l1, l2, l4, l8, l9, l10, l11, l13, l14, l15, l16, l17, l18, $l20, $l21, $l26, $l27, $l29, $l31, $l33, $l34, $l37, $l39, $l40, $l43;
        java.lang.Throwable r3, r7, r12, r13, r15, $r91, $r93, $r94, $r97, $r100;
        byte b3, b12, $b19, $b22, $b25, $b28, $b30, $b32, $b35, $b38, $b41, $b42;
        android.net.NetworkConfig r5;
        com.android.server.ConnectivityService$FeatureUser r6, $r23, $r81;
        boolean z0, z1, z2, $z3, $z4, $z5, $z8, $z9, $z10, $z11, $z12, $z13, $z17, $z18, $z19;
        java.lang.Object r8, $r78;
        android.net.NetworkStateTracker r9;
        android.net.NetworkInfo r10;
        java.lang.Integer r11, $r21, $r26;
        java.util.Iterator r14;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r27, $r28, $r29, $r30, $r36, $r37, $r38, $r39, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r64, $r65, $r66, $r67, $r71, $r73, $r74, $r76, $r77, $r80, $r82, $r83, $r84, $r85, $r86, $r88, $r89, $r90, $r92, $r95, $r96, $r98, $r99, $r101, $r102, $r103;
        java.util.List $r20, $r31, $r32, $r34, $r41, $r62, $r63, $r79;
        android.net.NetworkConfig[] $r22;
        android.net.NetworkStateTracker[] $r24;
        android.util.SparseIntArray $r25;
        java.util.List[] $r33, $r35, $r40, $r61;
        android.os.Message $r60;
        com.android.server.ConnectivityService$InternalHandler $r68, $r69;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.IBinder;

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceChangePermission()>();

     label01:
        $z3 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z3 == 0 goto label03;

        $r22 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        r5 = $r22[i0];

     label02:
        if r5 != null goto label06;

     label03:
        b3 = 3;

        $l20 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l4 = $l20 - l1;

        $b19 = l4 cmp 250L;

        if $b19 <= 0 goto label05;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature took too long: ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        r4 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>(r4);

     label05:
        return b3;

     label06:
        $r23 = new com.android.server.ConnectivityService$FeatureUser;

        specialinvoke $r23.<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)>(r0, i0, r1, r2);

        r6 = $r23;

        i5 = virtualinvoke r0.<com.android.server.ConnectivityService: int convertFeatureToNetworkType(int,java.lang.String)>(i0, r1);

        z1 = r0.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

     label07:
        if z1 == 0 goto label08;

        b3 = 2;

        $l43 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l17 = $l43 - l1;

        $b42 = l17 cmp 250L;

        if $b42 <= 0 goto label05;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature took too long: ");

        $r96 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l17);

        $r95 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        r4 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label08:
        $r20 = r0.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $z4 = interfaceinvoke $r20.<java.util.List: boolean contains(java.lang.Object)>($r21);

        if $z4 == 0 goto label09;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

     label09:
        z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isNetworkMeteredUnchecked(int)>(i5);

        r8 = r0.<com.android.server.ConnectivityService: java.lang.Object mRulesLock>;

        entermonitor r8;

     label10:
        $r25 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        $i23 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i6 = virtualinvoke $r25.<android.util.SparseIntArray: int get(int,int)>($i23, 0);

        exitmonitor r8;

     label11:
        if z0 == 0 goto label17;

        $i36 = i6 & 1;

        if $i36 == 0 goto label17;

        b3 = 3;

        $l37 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l18 = $l37 - l1;

        $b35 = l18 cmp 250L;

        if $b35 <= 0 goto label05;

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature took too long: ");

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l18);

        $r83 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        r4 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label12:
        $r93 := @caughtexception;

        r7 = $r93;

     label13:
        exitmonitor r8;

     label14:
        throw r7;

     label15:
        $r91 := @caughtexception;

        r3 = $r91;

        $l40 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l2 = $l40 - l1;

        $b41 = l2 cmp 250L;

        if $b41 <= 0 goto label16;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r101 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature took too long: ");

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r104);

     label16:
        throw r3;

     label17:
        $r24 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        r9 = $r24[i5];

     label18:
        if r9 == null goto label57;

     label19:
        $r26 = new java.lang.Integer;

        $i24 = staticinvoke <com.android.server.ConnectivityService: int getCallingPid()>();

        specialinvoke $r26.<java.lang.Integer: void <init>(int)>($i24);

        r11 = $r26;

     label20:
        if i5 == i0 goto label49;

     label21:
        r10 = interfaceinvoke r9.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $z9 = virtualinvoke r10.<android.net.NetworkInfo: boolean isAvailable()>();

        if $z9 != 0 goto label24;

        $z18 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, "enableDUNAlways");

        if $z18 != 0 goto label23;

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("special network not available ni=");

        $r75 = virtualinvoke r10.<android.net.NetworkInfo: java.lang.String getTypeName()>();

        $r74 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75);

        $r87 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r87);

     label22:
        b3 = 2;

        $l39 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l14 = $l39 - l1;

        $b38 = l14 cmp 250L;

        if $b38 <= 0 goto label05;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature took too long: ");

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l14);

        $r88 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        r4 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label23:
        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("special network not available, but try anyway ni=");

        $r72 = virtualinvoke r10.<android.net.NetworkInfo: java.lang.String getTypeName()>();

        $r71 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r70);

     label24:
        i7 = specialinvoke r0.<com.android.server.ConnectivityService: int getRestoreDefaultNetworkDelay(int)>(i5);

        entermonitor r0;

     label25:
        z2 = 1;

        if i7 >= 0 goto label29;

     label26:
        $r79 = r0.<com.android.server.ConnectivityService: java.util.List mFeatureUsers>;

        r14 = interfaceinvoke $r79.<java.util.List: java.util.Iterator iterator()>();

     label27:
        $z17 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label29;

        $r78 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r81 = (com.android.server.ConnectivityService$FeatureUser) $r78;

        $z19 = virtualinvoke $r81.<com.android.server.ConnectivityService$FeatureUser: boolean isSameUser(com.android.server.ConnectivityService$FeatureUser)>(r6);

        if $z19 == 0 goto label27;

     label28:
        z2 = 0;

     label29:
        if z2 == 0 goto label31;

     label30:
        $r63 = r0.<com.android.server.ConnectivityService: java.util.List mFeatureUsers>;

        interfaceinvoke $r63.<java.util.List: boolean add(java.lang.Object)>(r6);

     label31:
        $r40 = r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids>;

        $r41 = $r40[i5];

        $z8 = interfaceinvoke $r41.<java.util.List: boolean contains(java.lang.Object)>(r11);

        if $z8 != 0 goto label32;

        $r61 = r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids>;

        $r62 = $r61[i5];

        interfaceinvoke $r62.<java.util.List: boolean add(java.lang.Object)>(r11);

     label32:
        exitmonitor r0;

     label33:
        if i7 < 0 goto label35;

     label34:
        $r69 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r68 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r60 = virtualinvoke $r68.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r6);

        $l33 = (long) i7;

        virtualinvoke $r69.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r60, $l33);

     label35:
        $z11 = virtualinvoke r10.<android.net.NetworkInfo: boolean isConnectedOrConnecting()>();

        if $z11 != 1 goto label45;

        $z13 = interfaceinvoke r9.<android.net.NetworkStateTracker: boolean isTeardownRequested()>();

        if $z13 != 0 goto label45;

        $z12 = virtualinvoke r10.<android.net.NetworkInfo: boolean isConnected()>();

        if $z12 != 1 goto label44;

        l10 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label36:
        specialinvoke r0.<com.android.server.ConnectivityService: void handleDnsConfigurationChange(int)>(i5);

     label37:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

     label38:
        $l34 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l13 = $l34 - l1;

        b12 = l13 cmp 250L;

        b3 = 0;

        if b12 <= 0 goto label05;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature took too long: ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l13);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        r4 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        b3 = 0;

        goto label04;

     label39:
        $r100 := @caughtexception;

        r12 = $r100;

     label40:
        exitmonitor r0;

     label41:
        throw r12;

     label42:
        $r94 := @caughtexception;

        r13 = $r94;

     label43:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

        throw r13;

     label44:
        b3 = 1;

        $l31 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l11 = $l31 - l1;

        $b30 = l11 cmp 250L;

        if $b30 <= 0 goto label05;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature took too long: ");

        $r55 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l11);

        $r54 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        r4 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label45:
        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature reconnecting to ");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r42);

        $z10 = interfaceinvoke r9.<android.net.NetworkStateTracker: boolean reconnect()>();

        if $z10 == 0 goto label47;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("startUsingNetworkFeature X: return APN_REQUEST_STARTED");

     label46:
        b3 = 1;

        $l27 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l9 = $l27 - l1;

        $b32 = l9 cmp 250L;

        if $b32 <= 0 goto label05;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature took too long: ");

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l9);

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        r4 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label47:
        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("startUsingNetworkFeature X: return APN_REQUEST_FAILED");

     label48:
        b3 = 3;

        $l29 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l8 = $l29 - l1;

        $b28 = l8 cmp 250L;

        if $b28 <= 0 goto label05;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature took too long: ");

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l8);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        r4 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label49:
        entermonitor r0;

     label50:
        $r31 = r0.<com.android.server.ConnectivityService: java.util.List mFeatureUsers>;

        interfaceinvoke $r31.<java.util.List: boolean add(java.lang.Object)>(r6);

        $r33 = r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids>;

        $r32 = $r33[i5];

        $z5 = interfaceinvoke $r32.<java.util.List: boolean contains(java.lang.Object)>(r11);

        if $z5 != 0 goto label51;

        $r35 = r0.<com.android.server.ConnectivityService: java.util.List[] mNetRequestersPids>;

        $r34 = $r35[i5];

        interfaceinvoke $r34.<java.util.List: boolean add(java.lang.Object)>(r11);

     label51:
        exitmonitor r0;

     label52:
        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("startUsingNetworkFeature X: return -1 unsupported feature.");

     label53:
        b3 = -1;

        $l26 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l15 = $l26 - l1;

        $b25 = l15 cmp 250L;

        if $b25 <= 0 goto label05;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature took too long: ");

        $r36 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l15);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        r4 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label54:
        $r97 := @caughtexception;

        r15 = $r97;

     label55:
        exitmonitor r0;

     label56:
        throw r15;

     label57:
        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("startUsingNetworkFeature X: return APN_TYPE_NOT_AVAILABLE");

     label58:
        b3 = 2;

        $l21 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l16 = $l21 - l1;

        $b22 = l16 cmp 250L;

        if $b22 <= 0 goto label05;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startUsingNetworkFeature took too long: ");

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l16);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        r4 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label17 to label18 with label15;
        catch java.lang.Throwable from label19 to label20 with label15;
        catch java.lang.Throwable from label21 to label22 with label15;
        catch java.lang.Throwable from label23 to label24 with label15;
        catch java.lang.Throwable from label24 to label25 with label15;
        catch java.lang.Throwable from label26 to label27 with label39;
        catch java.lang.Throwable from label27 to label28 with label39;
        catch java.lang.Throwable from label30 to label31 with label39;
        catch java.lang.Throwable from label31 to label32 with label39;
        catch java.lang.Throwable from label32 to label33 with label39;
        catch java.lang.Throwable from label34 to label35 with label15;
        catch java.lang.Throwable from label35 to label36 with label15;
        catch java.lang.Throwable from label36 to label37 with label42;
        catch java.lang.Throwable from label37 to label38 with label15;
        catch java.lang.Throwable from label40 to label41 with label39;
        catch java.lang.Throwable from label41 to label42 with label15;
        catch java.lang.Throwable from label43 to label44 with label15;
        catch java.lang.Throwable from label45 to label46 with label15;
        catch java.lang.Throwable from label47 to label48 with label15;
        catch java.lang.Throwable from label49 to label50 with label15;
        catch java.lang.Throwable from label50 to label51 with label54;
        catch java.lang.Throwable from label51 to label52 with label54;
        catch java.lang.Throwable from label52 to label53 with label15;
        catch java.lang.Throwable from label55 to label56 with label54;
        catch java.lang.Throwable from label56 to label57 with label15;
        catch java.lang.Throwable from label57 to label58 with label15;
    }

    public int stopUsingNetworkFeature(int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2, i3;
        java.lang.String r1;
        java.lang.Throwable r2, $r8;
        java.util.Iterator r3;
        boolean z0, z1, $z2, z3;
        com.android.server.ConnectivityService$FeatureUser r4, r5;
        java.util.List $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 = 1;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceChangePermission()>();

        i2 = staticinvoke <com.android.server.ConnectivityService: int getCallingPid()>();

        i3 = staticinvoke <com.android.server.ConnectivityService: int getCallingUid()>();

        entermonitor r0;

     label01:
        $r6 = r0.<com.android.server.ConnectivityService: java.util.List mFeatureUsers>;

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label02:
        z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

     label03:
        z1 = 0;

        r4 = null;

        if z0 == 0 goto label06;

     label04:
        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.ConnectivityService$FeatureUser) $r7;

        $z2 = virtualinvoke r5.<com.android.server.ConnectivityService$FeatureUser: boolean isSameUser(int,int,int,java.lang.String)>(i2, i3, i0, r1);

        if $z2 == 0 goto label02;

     label05:
        r4 = r5;

        z1 = 1;

     label06:
        exitmonitor r0;

     label07:
        if z1 == 0 goto label08;

        if r4 == null goto label08;

        z3 = (boolean) 1;

        i1 = specialinvoke r0.<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)>(r4, z3);

     label08:
        return i1;

     label09:
        $r8 := @caughtexception;

        r2 = $r8;

     label10:
        exitmonitor r0;

     label11:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void supplyMessenger(int, android.os.Messenger)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.os.Messenger r1;
        boolean $z0;
        android.net.NetworkStateTracker[] $r2, $r4;
        android.net.NetworkStateTracker $r3, $r5;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Messenger;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityInternalPermission()>();

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r3 = $r2[i0];

        if $r3 == null goto label1;

        $r4 = r0.<com.android.server.ConnectivityService: android.net.NetworkStateTracker[] mNetTrackers>;

        $r5 = $r4[i0];

        interfaceinvoke $r5.<android.net.NetworkStateTracker: void supplyMessenger(android.os.Messenger)>(r1);

     label1:
        return;
    }

    void systemReady()
    {
        com.android.server.ConnectivityService r0;
        java.lang.Throwable r1, $r15;
        android.content.IntentFilter r2, r17;
        android.content.Context $r3, $r12, $r16;
        android.net.CaptivePortalTracker $r4;
        android.content.Intent $r5, $r13;
        com.android.server.ConnectivityService$InternalHandler $r6, $r7;
        android.os.Message $r8;
        boolean $z1;
        android.content.BroadcastReceiver $r10;
        android.os.UserHandle $r14;
        android.net.IConnectivityManager r18;

        r0 := @this: com.android.server.ConnectivityService;

        $r3 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        r18 = (android.net.IConnectivityManager) r0;

        $r4 = staticinvoke <android.net.CaptivePortalTracker: android.net.CaptivePortalTracker makeCaptivePortalTracker(android.content.Context,android.net.IConnectivityManager)>($r3, r18);

        r0.<com.android.server.ConnectivityService: android.net.CaptivePortalTracker mCaptivePortalTracker> = $r4;

        specialinvoke r0.<com.android.server.ConnectivityService: void loadGlobalProxy()>();

        entermonitor r0;

     label1:
        r0.<com.android.server.ConnectivityService: boolean mSystemReady> = 1;

        $r5 = r0.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast>;

        if $r5 == null goto label2;

        $r16 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r13 = r0.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast>;

        $r14 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r16.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r13, $r14);

        r0.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast> = null;

     label2:
        exitmonitor r0;

     label3:
        $r7 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r6 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r8 = virtualinvoke $r6.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int)>(9);

        virtualinvoke $r7.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r8);

        $z1 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean updateLockdownVpn()>();

        if $z1 != 0 goto label4;

        r17 = new android.content.IntentFilter;

        specialinvoke r17.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_PRESENT");

        r2 = r17;

        $r12 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r10 = r0.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mUserPresentReceiver>;

        virtualinvoke $r12.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r10, r2);

     label4:
        return;

     label5:
        $r15 := @caughtexception;

        r1 = $r15;

     label6:
        exitmonitor r0;

     label7:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int tether(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        boolean $z0;
        com.android.server.connectivity.Tethering $r2;
        int $i0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceTetherChangePermission()>();

        $z0 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $i0 = virtualinvoke $r2.<com.android.server.connectivity.Tethering: int tether(java.lang.String)>(r1);

        return $i0;

     label1:
        return 3;
    }

    public int untether(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        boolean $z0;
        com.android.server.connectivity.Tethering $r2;
        int $i0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceTetherChangePermission()>();

        $z0 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isTetheringSupported()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Tethering mTethering>;

        $i0 = virtualinvoke $r2.<com.android.server.connectivity.Tethering: int untether(java.lang.String)>(r1);

        return $i0;

     label1:
        return 3;
    }

    public boolean updateLockdownVpn()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, $r6, $r14;
        com.android.internal.net.VpnProfile r2;
        int i0, $i1, $i2;
        android.util.SparseArray r3, $r15;
        java.lang.Throwable r4, $r21;
        boolean $z0, $z1, $z2;
        android.security.KeyStore $r5, $r7, $r10;
        byte[] $r8, $r13;
        java.lang.StringBuilder $r9, $r11, $r12;
        com.android.server.net.LockdownVpnTracker $r16;
        android.os.INetworkManagementService $r17;
        android.content.Context $r18;
        com.android.server.connectivity.Vpn $r19;
        java.lang.Object $r20;

        r0 := @this: com.android.server.ConnectivityService;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 == 1000 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ConnectivityService", "Lockdown VPN only available to AID_SYSTEM");

        return 0;

     label1:
        $z0 = staticinvoke <com.android.server.net.LockdownVpnTracker: boolean isEnabled()>();

        r0.<com.android.server.ConnectivityService: boolean mLockdownEnabled> = $z0;

        $z1 = r0.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

        if $z1 == 0 goto label8;

        $r5 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        $z2 = virtualinvoke $r5.<android.security.KeyStore: boolean isUnlocked()>();

        if $z2 != 0 goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ConnectivityService", "KeyStore locked; unable to create LockdownTracker");

        return 0;

     label2:
        $r6 = new java.lang.String;

        $r7 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        $r8 = virtualinvoke $r7.<android.security.KeyStore: byte[] get(java.lang.String)>("LOCKDOWN_VPN");

        specialinvoke $r6.<java.lang.String: void <init>(byte[])>($r8);

        r1 = $r6;

        $r10 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VPN_");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r10.<android.security.KeyStore: byte[] get(java.lang.String)>($r14);

        r2 = staticinvoke <com.android.internal.net.VpnProfile: com.android.internal.net.VpnProfile decode(java.lang.String,byte[])>(r1, $r13);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i2);

        r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r3;

     label3:
        $r16 = new com.android.server.net.LockdownVpnTracker;

        $r18 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r17 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNetd>;

        $r15 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r20 = virtualinvoke $r15.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r19 = (com.android.server.connectivity.Vpn) $r20;

        specialinvoke $r16.<com.android.server.net.LockdownVpnTracker: void <init>(android.content.Context,android.os.INetworkManagementService,com.android.server.ConnectivityService,com.android.server.connectivity.Vpn,com.android.internal.net.VpnProfile)>($r18, $r17, r0, $r19, r2);

        specialinvoke r0.<com.android.server.ConnectivityService: void setLockdownTracker(com.android.server.net.LockdownVpnTracker)>($r16);

        exitmonitor r3;

     label4:
        goto label9;

     label5:
        $r21 := @caughtexception;

        r4 = $r21;

     label6:
        exitmonitor r3;

     label7:
        throw r4;

     label8:
        specialinvoke r0.<com.android.server.ConnectivityService: void setLockdownTracker(com.android.server.net.LockdownVpnTracker)>(null);

     label9:
        return 1;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static void <clinit>()
    {
        <com.android.server.ConnectivityService: boolean TO_DEFAULT_TABLE> = 1;

        <com.android.server.ConnectivityService: java.lang.String TAG_REDIRECTED_URL> = "redirectedUrl";

        <com.android.server.ConnectivityService: java.lang.String TAG_PROVISIONING_URLS> = "provisioningUrls";

        <com.android.server.ConnectivityService: java.lang.String TAG_PROVISIONING_URL> = "provisioningUrl";

        <com.android.server.ConnectivityService: java.lang.String TAG> = "ConnectivityService";

        <com.android.server.ConnectivityService: int SAMPLE_INTERVAL_ELAPSED_REQUEST_CODE> = 0;

        <com.android.server.ConnectivityService: int RESTORE_DEFAULT_NETWORK_DELAY> = 60000;

        <com.android.server.ConnectivityService: boolean REMOVE> = 0;

        <com.android.server.ConnectivityService: int REDIRECTED_PROVISIONING> = 1;

        <com.android.server.ConnectivityService: java.lang.String PROVISIONING_URL_PATH> = "/data/misc/radio/provisioning_urls.xml";

        <com.android.server.ConnectivityService: int PROVISIONING> = 2;

        <com.android.server.ConnectivityService: java.lang.String NOTIFICATION_ID> = "CaptivePortal.Notification";

        <com.android.server.ConnectivityService: java.lang.String NETWORK_RESTORE_DELAY_PROP_NAME> = "android.telephony.apn-restore";

        <com.android.server.ConnectivityService: int MAX_HOSTROUTE_CYCLE_COUNT> = 10;

        <com.android.server.ConnectivityService: boolean LOGD_RULES> = 0;

        <com.android.server.ConnectivityService: int INET_CONDITION_LOG_MAX_SIZE> = 15;

        <com.android.server.ConnectivityService: java.lang.String FAIL_FAST_TIME_MS> = "persist.radio.fail_fast_time_ms";

        <com.android.server.ConnectivityService: boolean EXEMPT> = 1;

        <com.android.server.ConnectivityService: int EVENT_VPN_STATE_CHANGED> = 13;

        <com.android.server.ConnectivityService: int EVENT_SET_POLICY_DATA_ENABLE> = 12;

        <com.android.server.ConnectivityService: int EVENT_SET_NETWORK_PREFERENCE> = 3;

        <com.android.server.ConnectivityService: int EVENT_SET_MOBILE_DATA> = 7;

        <com.android.server.ConnectivityService: int EVENT_SET_DEPENDENCY_MET> = 10;

        <com.android.server.ConnectivityService: int EVENT_SEND_STICKY_BROADCAST_INTENT> = 11;

        <com.android.server.ConnectivityService: int EVENT_SAMPLE_INTERVAL_ELAPSED> = 15;

        <com.android.server.ConnectivityService: int EVENT_RESTORE_DEFAULT_NETWORK> = 1;

        <com.android.server.ConnectivityService: int EVENT_PROXY_HAS_CHANGED> = 16;

        <com.android.server.ConnectivityService: int EVENT_INET_CONDITION_HOLD_END> = 5;

        <com.android.server.ConnectivityService: int EVENT_INET_CONDITION_CHANGE> = 4;

        <com.android.server.ConnectivityService: int EVENT_ENABLE_FAIL_FAST_MOBILE_DATA> = 14;

        <com.android.server.ConnectivityService: int EVENT_CLEAR_NET_TRANSITION_WAKELOCK> = 8;

        <com.android.server.ConnectivityService: int EVENT_CHANGE_MOBILE_DATA_ENABLED> = 2;

        <com.android.server.ConnectivityService: int EVENT_APPLY_GLOBAL_HTTP_PROXY> = 9;

        <com.android.server.ConnectivityService: int ENABLED> = 1;

        <com.android.server.ConnectivityService: int DISABLED> = 0;

        <com.android.server.ConnectivityService: int DEFAULT_START_SAMPLING_INTERVAL_IN_SECONDS> = 60;

        <com.android.server.ConnectivityService: int DEFAULT_SAMPLING_INTERVAL_IN_SECONDS> = 720;

        <com.android.server.ConnectivityService: int DEFAULT_FAIL_FAST_TIME_MS> = 60000;

        <com.android.server.ConnectivityService: boolean DBG> = 1;

        <com.android.server.ConnectivityService: java.lang.String CONNECTED_TO_PROVISIONING_NETWORK_ACTION> = "com.android.server.connectivityservice.CONNECTED_TO_PROVISIONING_NETWORK_ACTION";

        <com.android.server.ConnectivityService: int CMP_RESULT_CODE_REDIRECTED> = 4;

        <com.android.server.ConnectivityService: int CMP_RESULT_CODE_PROVISIONING_NETWORK> = 5;

        <com.android.server.ConnectivityService: int CMP_RESULT_CODE_NO_TCP_CONNECTION> = 3;

        <com.android.server.ConnectivityService: int CMP_RESULT_CODE_NO_DNS> = 2;

        <com.android.server.ConnectivityService: int CMP_RESULT_CODE_NO_CONNECTION> = 0;

        <com.android.server.ConnectivityService: int CMP_RESULT_CODE_IS_PROVISIONING> = 6;

        <com.android.server.ConnectivityService: int CMP_RESULT_CODE_CONNECTABLE> = 1;

        <com.android.server.ConnectivityService: java.lang.String ATTR_MNC> = "mnc";

        <com.android.server.ConnectivityService: java.lang.String ATTR_MCC> = "mcc";

        <com.android.server.ConnectivityService: boolean ADD> = 1;

        <com.android.server.ConnectivityService: java.lang.String ACTION_PKT_CNT_SAMPLE_INTERVAL_ELAPSED> = "android.net.ConnectivityService.action.PKT_CNT_SAMPLE_INTERVAL_ELAPSED";

        return;
    }
}
