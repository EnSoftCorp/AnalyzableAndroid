public class com.android.server.usb.UsbService extends android.hardware.usb.IUsbManager$Stub
{
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private com.android.server.usb.UsbDeviceManager mDeviceManager;
    private com.android.server.usb.UsbHostManager mHostManager;
    private final java.lang.Object mLock;
    private final android.util.SparseArray mSettingsByUser;
    private android.content.BroadcastReceiver mUserReceiver;

    public void <init>(android.content.Context)
    {
        com.android.server.usb.UsbService r0;
        android.content.Context r1, $r6, $r11;
        android.content.IntentFilter r2, $r9;
        java.lang.Object $r3;
        android.util.SparseArray $r4;
        com.android.server.usb.UsbService$1 $r5;
        android.content.pm.PackageManager $r7;
        boolean $z0, $z1;
        java.io.File $r8;
        android.content.BroadcastReceiver $r10;
        com.android.server.usb.UsbDeviceManager $r13;
        com.android.server.usb.UsbHostManager $r14;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.hardware.usb.IUsbManager$Stub: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbService: java.lang.Object mLock> = $r3;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.usb.UsbService: android.util.SparseArray mSettingsByUser> = $r4;

        $r5 = new com.android.server.usb.UsbService$1;

        specialinvoke $r5.<com.android.server.usb.UsbService$1: void <init>(com.android.server.usb.UsbService)>(r0);

        r0.<com.android.server.usb.UsbService: android.content.BroadcastReceiver mUserReceiver> = $r5;

        r0.<com.android.server.usb.UsbService: android.content.Context mContext> = r1;

        $r6 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r7.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.usb.host");

        if $z0 == 0 goto label1;

        $r14 = new com.android.server.usb.UsbHostManager;

        specialinvoke $r14.<com.android.server.usb.UsbHostManager: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager> = $r14;

     label1:
        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("/sys/class/android_usb");

        $z1 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $r13 = new com.android.server.usb.UsbDeviceManager;

        specialinvoke $r13.<com.android.server.usb.UsbDeviceManager: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager> = $r13;

     label2:
        specialinvoke r0.<com.android.server.usb.UsbService: void setCurrentUser(int)>(0);

        $r9 = new android.content.IntentFilter;

        specialinvoke $r9.<android.content.IntentFilter: void <init>()>();

        r2 = $r9;

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STOPPED");

        $r11 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        $r10 = r0.<com.android.server.usb.UsbService: android.content.BroadcastReceiver mUserReceiver>;

        virtualinvoke $r11.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r10, r2, null, null);

        return;
    }

    static void access$000(com.android.server.usb.UsbService, int)
    {
        com.android.server.usb.UsbService r0;
        int i0;

        r0 := @parameter0: com.android.server.usb.UsbService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.usb.UsbService: void setCurrentUser(int)>(i0);

        return;
    }

    static java.lang.Object access$100(com.android.server.usb.UsbService)
    {
        com.android.server.usb.UsbService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.usb.UsbService;

        $r1 = r0.<com.android.server.usb.UsbService: java.lang.Object mLock>;

        return $r1;
    }

    static android.util.SparseArray access$200(com.android.server.usb.UsbService)
    {
        com.android.server.usb.UsbService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.usb.UsbService;

        $r1 = r0.<com.android.server.usb.UsbService: android.util.SparseArray mSettingsByUser>;

        return $r1;
    }

    private com.android.server.usb.UsbSettingsManager getSettingsForUser(int)
    {
        com.android.server.usb.UsbService r0;
        int i0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r10;
        com.android.server.usb.UsbSettingsManager r3, $r6;
        android.util.SparseArray $r4, $r9;
        android.os.UserHandle $r7;
        android.content.Context $r8;

        r0 := @this: com.android.server.usb.UsbService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.usb.UsbService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.usb.UsbService: android.util.SparseArray mSettingsByUser>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.usb.UsbSettingsManager) $r5;

     label2:
        if r3 != null goto label4;

     label3:
        $r6 = new com.android.server.usb.UsbSettingsManager;

        $r8 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        $r7 = new android.os.UserHandle;

        specialinvoke $r7.<android.os.UserHandle: void <init>(int)>(i0);

        specialinvoke $r6.<com.android.server.usb.UsbSettingsManager: void <init>(android.content.Context,android.os.UserHandle)>($r8, $r7);

        r3 = $r6;

        $r9 = r0.<com.android.server.usb.UsbService: android.util.SparseArray mSettingsByUser>;

        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3);

     label4:
        exitmonitor r1;

     label5:
        return r3;

     label6:
        $r10 := @caughtexception;

        r2 = $r10;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void setCurrentUser(int)
    {
        com.android.server.usb.UsbService r0;
        int i0;
        com.android.server.usb.UsbSettingsManager r1;
        com.android.server.usb.UsbHostManager $r2, $r5;
        com.android.server.usb.UsbDeviceManager $r3, $r4;

        r0 := @this: com.android.server.usb.UsbService;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager getSettingsForUser(int)>(i0);

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        virtualinvoke $r5.<com.android.server.usb.UsbHostManager: void setCurrentSettings(com.android.server.usb.UsbSettingsManager)>(r1);

     label1:
        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r4.<com.android.server.usb.UsbDeviceManager: void setCurrentSettings(com.android.server.usb.UsbSettingsManager)>(r1);

     label2:
        return;
    }

    public void allowUsbDebugging(boolean, java.lang.String)
    {
        com.android.server.usb.UsbService r0;
        boolean z0;
        java.lang.String r1;
        android.content.Context $r2;
        com.android.server.usb.UsbDeviceManager $r3;

        r0 := @this: com.android.server.usb.UsbService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r3.<com.android.server.usb.UsbDeviceManager: void allowUsbDebugging(boolean,java.lang.String)>(z0, r1);

        return;
    }

    public void clearDefaults(java.lang.String, int)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        int i0;
        android.content.Context $r2;
        com.android.server.usb.UsbSettingsManager $r3;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r3 = specialinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager getSettingsForUser(int)>(i0);

        virtualinvoke $r3.<com.android.server.usb.UsbSettingsManager: void clearDefaults(java.lang.String)>(r1);

        return;
    }

    public void clearUsbDebuggingKeys()
    {
        com.android.server.usb.UsbService r0;
        android.content.Context $r1;
        com.android.server.usb.UsbDeviceManager $r2;

        r0 := @this: com.android.server.usb.UsbService;

        $r1 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r2.<com.android.server.usb.UsbDeviceManager: void clearUsbDebuggingKeys()>();

        return;
    }

    public void denyUsbDebugging()
    {
        com.android.server.usb.UsbService r0;
        android.content.Context $r1;
        com.android.server.usb.UsbDeviceManager $r2;

        r0 := @this: com.android.server.usb.UsbService;

        $r1 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r2.<com.android.server.usb.UsbDeviceManager: void denyUsbDebugging()>();

        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.usb.UsbService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2, r26, r27, r28;
        java.lang.String[] r3;
        com.android.internal.util.IndentingPrintWriter r4, r24;
        java.lang.Object r5, $r14;
        int i0, i1, $i2;
        java.lang.Throwable r6, $r22;
        com.android.server.usb.UsbSettingsManager r7;
        android.content.Context $r8;
        com.android.server.usb.UsbDeviceManager $r10, $r23;
        com.android.server.usb.UsbHostManager $r11, $r20;
        android.util.SparseArray $r12, $r13, $r15;
        java.lang.StringBuilder $r16, $r18, $r19, r25;
        java.lang.String $r21;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r8 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r8.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "UsbService");

        r24 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r24.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r2, "  ");

        r4 = r24;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("USB Manager State:");

        $r10 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r10 == null goto label1;

        $r23 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        r26 = (java.io.PrintWriter) r4;

        virtualinvoke $r23.<com.android.server.usb.UsbDeviceManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>(r1, r26);

     label1:
        $r11 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if $r11 == null goto label2;

        $r20 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        r27 = (java.io.PrintWriter) r4;

        virtualinvoke $r20.<com.android.server.usb.UsbHostManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>(r1, r27);

     label2:
        r5 = r0.<com.android.server.usb.UsbService: java.lang.Object mLock>;

        entermonitor r5;

        i0 = 0;

     label3:
        $r12 = r0.<com.android.server.usb.UsbService: android.util.SparseArray mSettingsByUser>;

        $i2 = virtualinvoke $r12.<android.util.SparseArray: int size()>();

        if i0 >= $i2 goto label5;

        $r13 = r0.<com.android.server.usb.UsbService: android.util.SparseArray mSettingsByUser>;

        i1 = virtualinvoke $r13.<android.util.SparseArray: int keyAt(int)>(i0);

        $r15 = r0.<com.android.server.usb.UsbService: android.util.SparseArray mSettingsByUser>;

        $r14 = virtualinvoke $r15.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        r7 = (com.android.server.usb.UsbSettingsManager) $r14;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Settings for user ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r21);

        r28 = (java.io.PrintWriter) r4;

        virtualinvoke r7.<com.android.server.usb.UsbSettingsManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>(r1, r28);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        exitmonitor r5;

     label6:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        return;

     label7:
        $r22 := @caughtexception;

        r6 = $r22;

     label8:
        exitmonitor r5;

     label9:
        throw r6;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.hardware.usb.UsbAccessory getCurrentAccessory()
    {
        com.android.server.usb.UsbService r0;
        com.android.server.usb.UsbDeviceManager $r1, $r2;
        android.hardware.usb.UsbAccessory $r3;

        r0 := @this: com.android.server.usb.UsbService;

        $r1 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        $r3 = virtualinvoke $r2.<com.android.server.usb.UsbDeviceManager: android.hardware.usb.UsbAccessory getCurrentAccessory()>();

        return $r3;

     label1:
        return null;
    }

    public void getDeviceList(android.os.Bundle)
    {
        com.android.server.usb.UsbService r0;
        android.os.Bundle r1;
        com.android.server.usb.UsbHostManager $r2, $r3;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        virtualinvoke $r3.<com.android.server.usb.UsbHostManager: void getDeviceList(android.os.Bundle)>(r1);

     label1:
        return;
    }

    public void grantAccessoryPermission(android.hardware.usb.UsbAccessory, int)
    {
        com.android.server.usb.UsbService r0;
        android.hardware.usb.UsbAccessory r1;
        int i0, $i1;
        android.content.Context $r2;
        com.android.server.usb.UsbSettingsManager $r3;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r3 = specialinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager getSettingsForUser(int)>($i1);

        virtualinvoke $r3.<com.android.server.usb.UsbSettingsManager: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>(r1, i0);

        return;
    }

    public void grantDevicePermission(android.hardware.usb.UsbDevice, int)
    {
        com.android.server.usb.UsbService r0;
        android.hardware.usb.UsbDevice r1;
        int i0, $i1;
        android.content.Context $r2;
        com.android.server.usb.UsbSettingsManager $r3;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r3 = specialinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager getSettingsForUser(int)>($i1);

        virtualinvoke $r3.<com.android.server.usb.UsbSettingsManager: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>(r1, i0);

        return;
    }

    public boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)
    {
        com.android.server.usb.UsbService r0;
        android.hardware.usb.UsbAccessory r1;
        int $i0;
        com.android.server.usb.UsbSettingsManager $r2;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r2 = specialinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager getSettingsForUser(int)>($i0);

        $z0 = virtualinvoke $r2.<com.android.server.usb.UsbSettingsManager: boolean hasPermission(android.hardware.usb.UsbAccessory)>(r1);

        return $z0;
    }

    public boolean hasDefaults(java.lang.String, int)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        int i0;
        android.content.Context $r2;
        com.android.server.usb.UsbSettingsManager $r3;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r3 = specialinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager getSettingsForUser(int)>(i0);

        $z0 = virtualinvoke $r3.<com.android.server.usb.UsbSettingsManager: boolean hasDefaults(java.lang.String)>(r1);

        return $z0;
    }

    public boolean hasDevicePermission(android.hardware.usb.UsbDevice)
    {
        com.android.server.usb.UsbService r0;
        android.hardware.usb.UsbDevice r1;
        int $i0;
        com.android.server.usb.UsbSettingsManager $r2;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r2 = specialinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager getSettingsForUser(int)>($i0);

        $z0 = virtualinvoke $r2.<com.android.server.usb.UsbSettingsManager: boolean hasPermission(android.hardware.usb.UsbDevice)>(r1);

        return $z0;
    }

    public android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)
    {
        com.android.server.usb.UsbService r0;
        android.hardware.usb.UsbAccessory r1;
        com.android.server.usb.UsbDeviceManager $r2, $r3;
        android.os.ParcelFileDescriptor $r4;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        $r4 = virtualinvoke $r3.<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>(r1);

        return $r4;

     label1:
        return null;
    }

    public android.os.ParcelFileDescriptor openDevice(java.lang.String)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        com.android.server.usb.UsbHostManager $r2, $r3;
        android.os.ParcelFileDescriptor $r4;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        $r4 = virtualinvoke $r3.<com.android.server.usb.UsbHostManager: android.os.ParcelFileDescriptor openDevice(java.lang.String)>(r1);

        return $r4;

     label1:
        return null;
    }

    public void requestAccessoryPermission(android.hardware.usb.UsbAccessory, java.lang.String, android.app.PendingIntent)
    {
        com.android.server.usb.UsbService r0;
        android.hardware.usb.UsbAccessory r1;
        java.lang.String r2;
        android.app.PendingIntent r3;
        int $i0;
        com.android.server.usb.UsbSettingsManager $r4;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.app.PendingIntent;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = specialinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager getSettingsForUser(int)>($i0);

        virtualinvoke $r4.<com.android.server.usb.UsbSettingsManager: void requestPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>(r1, r2, r3);

        return;
    }

    public void requestDevicePermission(android.hardware.usb.UsbDevice, java.lang.String, android.app.PendingIntent)
    {
        com.android.server.usb.UsbService r0;
        android.hardware.usb.UsbDevice r1;
        java.lang.String r2;
        android.app.PendingIntent r3;
        int $i0;
        com.android.server.usb.UsbSettingsManager $r4;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.app.PendingIntent;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = specialinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager getSettingsForUser(int)>($i0);

        virtualinvoke $r4.<com.android.server.usb.UsbSettingsManager: void requestPermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>(r1, r2, r3);

        return;
    }

    public void setAccessoryPackage(android.hardware.usb.UsbAccessory, java.lang.String, int)
    {
        com.android.server.usb.UsbService r0;
        android.hardware.usb.UsbAccessory r1;
        java.lang.String r2;
        int i0;
        android.content.Context $r3;
        com.android.server.usb.UsbSettingsManager $r4;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r4 = specialinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager getSettingsForUser(int)>(i0);

        virtualinvoke $r4.<com.android.server.usb.UsbSettingsManager: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String)>(r1, r2);

        return;
    }

    public void setCurrentFunction(java.lang.String, boolean)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        boolean z0;
        android.content.Context $r2;
        com.android.server.usb.UsbDeviceManager $r3, $r5;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r3 == null goto label1;

        $r5 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r5.<com.android.server.usb.UsbDeviceManager: void setCurrentFunctions(java.lang.String,boolean)>(r1, z0);

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("USB device mode not supported");

        throw $r4;
    }

    public void setDevicePackage(android.hardware.usb.UsbDevice, java.lang.String, int)
    {
        com.android.server.usb.UsbService r0;
        android.hardware.usb.UsbDevice r1;
        java.lang.String r2;
        int i0;
        android.content.Context $r3;
        com.android.server.usb.UsbSettingsManager $r4;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r4 = specialinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager getSettingsForUser(int)>(i0);

        virtualinvoke $r4.<com.android.server.usb.UsbSettingsManager: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String)>(r1, r2);

        return;
    }

    public void setMassStorageBackingFile(java.lang.String)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        android.content.Context $r2;
        com.android.server.usb.UsbDeviceManager $r3, $r5;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r3 == null goto label1;

        $r5 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r5.<com.android.server.usb.UsbDeviceManager: void setMassStorageBackingFile(java.lang.String)>(r1);

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("USB device mode not supported");

        throw $r4;
    }

    public void systemReady()
    {
        com.android.server.usb.UsbService r0;
        com.android.server.usb.UsbDeviceManager $r1, $r4;
        com.android.server.usb.UsbHostManager $r2, $r3;

        r0 := @this: com.android.server.usb.UsbService;

        $r1 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r1 == null goto label1;

        $r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r4.<com.android.server.usb.UsbDeviceManager: void systemReady()>();

     label1:
        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        virtualinvoke $r3.<com.android.server.usb.UsbHostManager: void systemReady()>();

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.usb.UsbService: java.lang.String TAG> = "UsbService";

        return;
    }
}
