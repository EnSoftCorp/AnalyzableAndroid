class com.android.server.DevicePolicyManagerService$DeviceOwner extends java.lang.Object
{
    private static final java.lang.String ATTR_NAME;
    private static final java.lang.String ATTR_PACKAGE;
    private static final java.lang.String DEVICE_OWNER_XML;
    private static final java.lang.String TAG_DEVICE_OWNER;
    private java.lang.String mOwnerName;
    private java.lang.String mPackageName;

    void <init>()
    {
        com.android.server.DevicePolicyManagerService$DeviceOwner r0;

        r0 := @this: com.android.server.DevicePolicyManagerService$DeviceOwner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<com.android.server.DevicePolicyManagerService$DeviceOwner: void readOwnerFile()>();

        return;
    }

    void <init>(java.lang.String, java.lang.String)
    {
        com.android.server.DevicePolicyManagerService$DeviceOwner r0;
        java.lang.String r1, r2;

        r0 := @this: com.android.server.DevicePolicyManagerService$DeviceOwner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String mPackageName> = r1;

        r0.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String mOwnerName> = r2;

        return;
    }

    static boolean isInstalled(java.lang.String, android.content.pm.PackageManager)
    {
        java.lang.String r0, $r10;
        android.content.pm.PackageManager r1;
        android.content.pm.PackageInfo r3;
        boolean z0;
        int i0, i1;
        android.content.pm.ApplicationInfo $r4;
        android.content.pm.PackageManager$NameNotFoundException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.PackageManager;

     label1:
        r3 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r0, 0);

     label2:
        z0 = 0;

        if r3 == null goto label5;

     label3:
        $r4 = r3.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i0 = $r4.<android.content.pm.ApplicationInfo: int flags>;

     label4:
        i1 = i0 & 1;

        z0 = 0;

        if i1 == 0 goto label5;

        z0 = 1;

     label5:
        return z0;

     label6:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device Owner package ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not installed.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r10);

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label6;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label6;
    }

    static boolean isRegistered()
    {
        java.io.File $r0, $r1;
        boolean $z0;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "device_owner.xml");

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        return $z0;
    }

    private void writeOwnerFileLocked()
    {
        com.android.server.DevicePolicyManagerService$DeviceOwner r0;
        android.util.AtomicFile r1, $r5;
        java.io.IOException r2, $r18;
        java.io.FileOutputStream r3;
        com.android.internal.util.FastXmlSerializer r4, $r8;
        java.io.File $r6, $r7;
        java.lang.Boolean $r9;
        java.lang.String $r11, $r14, $r16, $r20;
        java.lang.StringBuilder $r17, $r19, $r21;

        r0 := @this: com.android.server.DevicePolicyManagerService$DeviceOwner;

        $r5 = new android.util.AtomicFile;

        $r6 = new java.io.File;

        $r7 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "device_owner.xml");

        specialinvoke $r5.<android.util.AtomicFile: void <init>(java.io.File)>($r6);

        r1 = $r5;

     label1:
        r3 = virtualinvoke r1.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        $r8 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r8.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r4 = $r8;

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r3, "utf-8");

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r9);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "device-owner");

        $r11 = r0.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String mPackageName>;

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "package", $r11);

        $r14 = r0.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String mOwnerName>;

        if $r14 == null goto label2;

        $r16 = r0.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String mOwnerName>;

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r16);

     label2:
        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "device-owner");

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void flush()>();

        virtualinvoke r1.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r3);

     label3:
        return;

     label4:
        $r18 := @caughtexception;

        r2 = $r18;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IO Exception when writing device-owner file\n");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r20);

        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }

    java.lang.String getName()
    {
        com.android.server.DevicePolicyManagerService$DeviceOwner r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.DevicePolicyManagerService$DeviceOwner;

        $r1 = r0.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String mOwnerName>;

        return $r1;
    }

    java.lang.String getPackageName()
    {
        com.android.server.DevicePolicyManagerService$DeviceOwner r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.DevicePolicyManagerService$DeviceOwner;

        $r1 = r0.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String mPackageName>;

        return $r1;
    }

    void readOwnerFile()
    {
        com.android.server.DevicePolicyManagerService$DeviceOwner r0;
        android.util.AtomicFile r1, r29;
        java.io.IOException r2, $r24;
        org.xmlpull.v1.XmlPullParserException r3, $r19, r31;
        java.io.FileInputStream r4;
        org.xmlpull.v1.XmlPullParser r5;
        int i0;
        java.lang.String r6, $r10, $r11, $r13, $r16, $r21, $r25;
        java.io.File $r9, r28;
        boolean $z0;
        java.lang.StringBuilder $r14, $r17, $r20, $r22, $r26, $r27, r30, r32, r33;
        java.lang.Throwable r34;

        r0 := @this: com.android.server.DevicePolicyManagerService$DeviceOwner;

        r29 = new android.util.AtomicFile;

        r28 = new java.io.File;

        $r9 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        specialinvoke r28.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "device_owner.xml");

        specialinvoke r29.<android.util.AtomicFile: void <init>(java.io.File)>(r28);

        r1 = r29;

     label1:
        r4 = virtualinvoke r1.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        r5 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r4, null);

     label2:
        i0 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int next()>();

     label3:
        if i0 == 1 goto label4;

        if i0 != 2 goto label2;

     label4:
        r6 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r10 = "device-owner";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 != 0 goto label6;

        r31 = new org.xmlpull.v1.XmlPullParserException;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device Owner file does not start with device-owner tag: found ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r31.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r16);

        r34 = (java.lang.Throwable) r31;

        throw r34;

     label5:
        $r19 := @caughtexception;

        r3 = $r19;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing device-owner file\n");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r21);

        return;

     label6:
        $r11 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        r0.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String mPackageName> = $r11;

        $r13 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        r0.<com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String mOwnerName> = $r13;

        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label7:
        return;

     label8:
        $r24 := @caughtexception;

        r2 = $r24;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IO Exception when reading device-owner file\n");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r25);

        return;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label2 with label5;
        catch java.io.IOException from label1 to label2 with label8;
        catch org.xmlpull.v1.XmlPullParserException from label2 to label3 with label5;
        catch java.io.IOException from label2 to label3 with label8;
        catch org.xmlpull.v1.XmlPullParserException from label4 to label5 with label5;
        catch java.io.IOException from label4 to label5 with label8;
        catch org.xmlpull.v1.XmlPullParserException from label6 to label7 with label5;
        catch java.io.IOException from label6 to label7 with label8;
    }

    void writeOwnerFile()
    {
        com.android.server.DevicePolicyManagerService$DeviceOwner r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: com.android.server.DevicePolicyManagerService$DeviceOwner;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.DevicePolicyManagerService$DeviceOwner: void writeOwnerFileLocked()>();

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String TAG_DEVICE_OWNER> = "device-owner";

        <com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String DEVICE_OWNER_XML> = "device_owner.xml";

        <com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String ATTR_PACKAGE> = "package";

        <com.android.server.DevicePolicyManagerService$DeviceOwner: java.lang.String ATTR_NAME> = "name";

        return;
    }
}
