class com.android.server.BackupManagerService extends android.app.backup.IBackupManager$Stub
{
    static final java.lang.String BACKUP_FILE_HEADER_MAGIC;
    static final int BACKUP_FILE_VERSION;
    private static final long BACKUP_INTERVAL;
    static final java.lang.String BACKUP_MANIFEST_FILENAME;
    static final int BACKUP_MANIFEST_VERSION;
    static final int BACKUP_PW_FILE_VERSION;
    static final boolean COMPRESS_FULL_BACKUPS;
    static final int CURRENT_ANCESTRAL_RECORD_VERSION;
    private static final boolean DEBUG;
    static final boolean DEBUG_BACKUP_TRACE;
    static final java.lang.String ENCRYPTION_ALGORITHM_NAME;
    private static final long FIRST_BACKUP_INTERVAL;
    private static final int FUZZ_MILLIS;
    static final java.lang.String INIT_SENTINEL_FILE_NAME;
    private static final boolean MORE_DEBUG;
    static final int MSG_BACKUP_RESTORE_STEP;
    private static final int MSG_FULL_CONFIRMATION_TIMEOUT;
    static final int MSG_OP_COMPLETE;
    private static final int MSG_RESTORE_TIMEOUT;
    private static final int MSG_RETRY_CLEAR;
    private static final int MSG_RETRY_INIT;
    private static final int MSG_RUN_BACKUP;
    private static final int MSG_RUN_CLEAR;
    private static final int MSG_RUN_FULL_BACKUP;
    private static final int MSG_RUN_FULL_RESTORE;
    private static final int MSG_RUN_GET_RESTORE_SETS;
    private static final int MSG_RUN_INITIALIZE;
    private static final int MSG_RUN_RESTORE;
    private static final int MSG_TIMEOUT;
    static final int OP_ACKNOWLEDGED;
    static final int OP_PENDING;
    static final int OP_TIMEOUT;
    static final java.lang.String PACKAGE_MANAGER_SENTINEL;
    static final int PBKDF2_HASH_ROUNDS;
    static final int PBKDF2_KEY_SIZE;
    static final int PBKDF2_SALT_SIZE;
    static final java.lang.String PBKDF_CURRENT;
    static final java.lang.String PBKDF_FALLBACK;
    private static final java.lang.String RUN_BACKUP_ACTION;
    private static final java.lang.String RUN_CLEAR_ACTION;
    private static final java.lang.String RUN_INITIALIZE_ACTION;
    static final java.lang.String SERVICE_ACTION_TRANSPORT_HOST;
    static final java.lang.String SHARED_BACKUP_AGENT_PACKAGE;
    private static final java.lang.String TAG;
    static final long TIMEOUT_BACKUP_INTERVAL;
    static final long TIMEOUT_FULL_BACKUP_INTERVAL;
    static final long TIMEOUT_FULL_CONFIRMATION;
    static final long TIMEOUT_INTERVAL;
    static final long TIMEOUT_RESTORE_INTERVAL;
    static final long TIMEOUT_SHARED_BACKUP_INTERVAL;
    private static final long TRANSPORT_RETRY_INTERVAL;
    com.android.server.BackupManagerService$ActiveRestoreSession mActiveRestoreSession;
    private android.app.IActivityManager mActivityManager;
    final java.lang.Object mAgentConnectLock;
    private android.app.AlarmManager mAlarmManager;
    java.util.Set mAncestralPackages;
    long mAncestralToken;
    boolean mAutoRestore;
    com.android.server.BackupManagerService$BackupHandler mBackupHandler;
    android.app.backup.IBackupManager mBackupManagerBinder;
    final android.util.SparseArray mBackupParticipants;
    volatile boolean mBackupRunning;
    final java.util.List mBackupTrace;
    java.io.File mBaseStateDir;
    android.content.BroadcastReceiver mBroadcastReceiver;
    final java.lang.Object mClearDataLock;
    volatile boolean mClearingData;
    android.app.IBackupAgent mConnectedAgent;
    volatile boolean mConnecting;
    private android.content.Context mContext;
    final java.lang.Object mCurrentOpLock;
    final android.util.SparseArray mCurrentOperations;
    long mCurrentToken;
    java.lang.String mCurrentTransport;
    java.io.File mDataDir;
    boolean mEnabled;
    private java.io.File mEverStored;
    java.util.HashSet mEverStoredApps;
    final android.util.SparseArray mFullConfirmations;
    android.os.HandlerThread mHandlerThread;
    java.io.File mJournal;
    java.io.File mJournalDir;
    volatile long mLastBackupPass;
    private android.os.storage.IMountService mMountService;
    volatile long mNextBackupPass;
    private android.content.pm.PackageManager mPackageManager;
    android.content.pm.IPackageManager mPackageManagerBinder;
    private java.lang.String mPasswordHash;
    private java.io.File mPasswordHashFile;
    private byte[] mPasswordSalt;
    private int mPasswordVersion;
    private java.io.File mPasswordVersionFile;
    java.util.HashMap mPendingBackups;
    java.util.HashSet mPendingInits;
    private android.os.PowerManager mPowerManager;
    boolean mProvisioned;
    android.database.ContentObserver mProvisionedObserver;
    final java.lang.Object mQueueLock;
    private final java.security.SecureRandom mRng;
    android.app.PendingIntent mRunBackupIntent;
    android.content.BroadcastReceiver mRunBackupReceiver;
    android.app.PendingIntent mRunInitIntent;
    android.content.BroadcastReceiver mRunInitReceiver;
    java.io.File mTokenFile;
    final java.util.Random mTokenGenerator;
    final java.util.ArrayList mTransportConnections;
    final java.util.HashMap mTransportNames;
    final java.util.HashMap mTransports;
    android.os.PowerManager$WakeLock mWakelock;

    public void <init>(android.content.Context)
    {
        com.android.server.BackupManagerService r0;
        android.content.Context r1;
        com.android.server.BackupManagerService$1 r2, r209;
        com.android.server.BackupManagerService$BackupHandler r3, $r89, r211;
        android.content.ContentResolver r4, $r122;
        boolean z0, z1, z2, $z4, $z5, $z6, $z7;
        com.android.server.BackupManagerService$ProvisionedObserver r5, r212;
        com.android.server.BackupManagerService$RunBackupReceiver r6, r222;
        android.content.IntentFilter r7, r9, r223, r225;
        com.android.server.BackupManagerService$RunInitializeReceiver r8, r224;
        android.content.Intent r10, r11, r15, r19, r226, r227, r230, r234;
        android.util.SparseArray r12, r193, r202, r205;
        java.lang.Throwable r13, r27, r46, $r169, $r170, $r171, $r179, $r180, $r191, $r192;
        java.util.List r14;
        java.io.Serializable r16;
        java.lang.StringBuilder r17, $r116, $r123, $r129, $r133, $r135, $r150, $r151, $r155, $r157, $r184, $r185, r214, r229, r231, r233, r236, r237;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i12, $i13;
        java.lang.Exception r18, $r186;
        android.content.pm.ServiceInfo r20;
        android.content.ComponentName r21, r232;
        com.android.server.BackupManagerService$TransportConnection r22, r235;
        java.io.DataInputStream r23, r29, r40, r42, r217, r221;
        java.io.FileInputStream r24, r25, r35, r41, r216, r219;
        java.io.BufferedInputStream r28, r220;
        byte[] r32;
        java.lang.String r33, r34, r44, r45, $r112, $r113, $r114, $r117, $r126, $r128, $r134, $r136, $r138, $r146, $r153, $r154, $r162, $r176, $r182, $r183;
        android.content.pm.IPackageManager $r64;
        android.content.pm.PackageManager $r65, $r131, $r142;
        java.lang.Object $r66, $r79, $r139, r195, r196, r198, r203;
        android.app.IActivityManager $r67;
        android.app.backup.IBackupManager $r72;
        android.os.storage.IMountService $r74;
        android.os.IBinder $r75, $r77;
        android.os.PowerManager $r76, $r125;
        android.app.AlarmManager $r78;
        android.os.HandlerThread $r80, $r82, r210;
        android.os.Looper $r81;
        java.io.File $r84, $r85, $r92, $r93, $r95, $r96, $r105, $r106, $r120, $r121, $r156, $r158, $r165, r213, r215, r218, r228;
        android.database.ContentObserver $r87;
        android.net.Uri $r88;
        android.content.BroadcastReceiver $r97, $r108;
        android.app.PendingIntent $r101, $r118;
        android.os.PowerManager$WakeLock $r124;
        android.content.pm.ResolveInfo $r137;
        android.content.pm.PackageInfo $r140;
        android.content.pm.ApplicationInfo $r141;
        java.util.ArrayList $r143, r197, r201;
        android.os.UserHandle $r145;
        java.io.IOException $r167, $r168, $r172, $r173, $r174, $r175, $r177, $r178, $r181, $r188, $r189, $r190;
        java.util.HashMap r194, r199, r200;
        java.util.Random r204;
        java.security.SecureRandom r206;
        java.util.HashSet r207, r208;
        android.content.ServiceConnection r238;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.backup.IBackupManager$Stub: void <init>()>();

        r193 = new android.util.SparseArray;

        specialinvoke r193.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants> = r193;

        r194 = new java.util.HashMap;

        specialinvoke r194.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.util.HashMap mPendingBackups> = r194;

        r195 = new java.lang.Object;

        specialinvoke r195.<java.lang.Object: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.lang.Object mQueueLock> = r195;

        r196 = new java.lang.Object;

        specialinvoke r196.<java.lang.Object: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.lang.Object mAgentConnectLock> = r196;

        r197 = new java.util.ArrayList;

        specialinvoke r197.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.util.List mBackupTrace> = r197;

        r198 = new java.lang.Object;

        specialinvoke r198.<java.lang.Object: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.lang.Object mClearDataLock> = r198;

        r199 = new java.util.HashMap;

        specialinvoke r199.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.util.HashMap mTransportNames> = r199;

        r200 = new java.util.HashMap;

        specialinvoke r200.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports> = r200;

        r201 = new java.util.ArrayList;

        specialinvoke r201.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.util.ArrayList mTransportConnections> = r201;

        r202 = new android.util.SparseArray;

        specialinvoke r202.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.BackupManagerService: android.util.SparseArray mCurrentOperations> = r202;

        r203 = new java.lang.Object;

        specialinvoke r203.<java.lang.Object: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.lang.Object mCurrentOpLock> = r203;

        r204 = new java.util.Random;

        specialinvoke r204.<java.util.Random: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.util.Random mTokenGenerator> = r204;

        r205 = new android.util.SparseArray;

        specialinvoke r205.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.BackupManagerService: android.util.SparseArray mFullConfirmations> = r205;

        r206 = new java.security.SecureRandom;

        specialinvoke r206.<java.security.SecureRandom: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.security.SecureRandom mRng> = r206;

        r207 = new java.util.HashSet;

        specialinvoke r207.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps> = r207;

        r0.<com.android.server.BackupManagerService: java.util.Set mAncestralPackages> = null;

        r0.<com.android.server.BackupManagerService: long mAncestralToken> = 0L;

        r0.<com.android.server.BackupManagerService: long mCurrentToken> = 0L;

        r208 = new java.util.HashSet;

        specialinvoke r208.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.util.HashSet mPendingInits> = r208;

        r209 = new com.android.server.BackupManagerService$1;

        specialinvoke r209.<com.android.server.BackupManagerService$1: void <init>(com.android.server.BackupManagerService)>(r0);

        r2 = r209;

        r0.<com.android.server.BackupManagerService: android.content.BroadcastReceiver mBroadcastReceiver> = r2;

        r0.<com.android.server.BackupManagerService: android.content.Context mContext> = r1;

        $r65 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.BackupManagerService: android.content.pm.PackageManager mPackageManager> = $r65;

        $r64 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r0.<com.android.server.BackupManagerService: android.content.pm.IPackageManager mPackageManagerBinder> = $r64;

        $r67 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        r0.<com.android.server.BackupManagerService: android.app.IActivityManager mActivityManager> = $r67;

        $r66 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        $r78 = (android.app.AlarmManager) $r66;

        r0.<com.android.server.BackupManagerService: android.app.AlarmManager mAlarmManager> = $r78;

        $r79 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r76 = (android.os.PowerManager) $r79;

        r0.<com.android.server.BackupManagerService: android.os.PowerManager mPowerManager> = $r76;

        $r77 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        $r74 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>($r77);

        r0.<com.android.server.BackupManagerService: android.os.storage.IMountService mMountService> = $r74;

        $r75 = virtualinvoke r0.<com.android.server.BackupManagerService: android.os.IBinder asBinder()>();

        $r72 = staticinvoke <com.android.server.BackupManagerService: android.app.backup.IBackupManager asInterface(android.os.IBinder)>($r75);

        r0.<com.android.server.BackupManagerService: android.app.backup.IBackupManager mBackupManagerBinder> = $r72;

        r210 = new android.os.HandlerThread;

        specialinvoke r210.<android.os.HandlerThread: void <init>(java.lang.String,int)>("backup", 10);

        r0.<com.android.server.BackupManagerService: android.os.HandlerThread mHandlerThread> = r210;

        $r82 = r0.<com.android.server.BackupManagerService: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r82.<android.os.HandlerThread: void start()>();

        r211 = new com.android.server.BackupManagerService$BackupHandler;

        $r80 = r0.<com.android.server.BackupManagerService: android.os.HandlerThread mHandlerThread>;

        $r81 = virtualinvoke $r80.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke r211.<com.android.server.BackupManagerService$BackupHandler: void <init>(com.android.server.BackupManagerService,android.os.Looper)>(r0, $r81);

        r3 = r211;

        r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler> = r3;

        r4 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i3 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>(r4, "backup_enabled", 0);

        if $i3 == 0 goto label28;

        z0 = 1;

     label01:
        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r4, "device_provisioned", 0);

        if $i1 == 0 goto label29;

        z1 = 1;

     label02:
        r0.<com.android.server.BackupManagerService: boolean mProvisioned> = z1;

        $i2 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>(r4, "backup_auto_restore", 1);

        if $i2 == 0 goto label30;

        z2 = 1;

     label03:
        r0.<com.android.server.BackupManagerService: boolean mAutoRestore> = z2;

        r212 = new com.android.server.BackupManagerService$ProvisionedObserver;

        $r89 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        specialinvoke r212.<com.android.server.BackupManagerService$ProvisionedObserver: void <init>(com.android.server.BackupManagerService,android.os.Handler)>(r0, $r89);

        r5 = r212;

        r0.<com.android.server.BackupManagerService: android.database.ContentObserver mProvisionedObserver> = r5;

        $r88 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("device_provisioned");

        $r87 = r0.<com.android.server.BackupManagerService: android.database.ContentObserver mProvisionedObserver>;

        virtualinvoke r4.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r88, 0, $r87);

        r213 = new java.io.File;

        $r85 = staticinvoke <android.os.Environment: java.io.File getSecureDataDirectory()>();

        specialinvoke r213.<java.io.File: void <init>(java.io.File,java.lang.String)>($r85, "backup");

        r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir> = r213;

        $r84 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        virtualinvoke $r84.<java.io.File: boolean mkdirs()>();

        $r96 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        $z5 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>($r96);

        if $z5 != 0 goto label04;

        r214 = new java.lang.StringBuilder;

        specialinvoke r214.<java.lang.StringBuilder: void <init>()>();

        $r155 = virtualinvoke r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELinux restorecon failed on ");

        $r156 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        $r157 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r156);

        $r176 = virtualinvoke $r157.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r176);

     label04:
        $r95 = staticinvoke <android.os.Environment: java.io.File getDownloadCacheDirectory()>();

        r0.<com.android.server.BackupManagerService: java.io.File mDataDir> = $r95;

        r0.<com.android.server.BackupManagerService: int mPasswordVersion> = 1;

        r215 = new java.io.File;

        $r93 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke r215.<java.io.File: void <init>(java.io.File,java.lang.String)>($r93, "pwversion");

        r0.<com.android.server.BackupManagerService: java.io.File mPasswordVersionFile> = r215;

        $r92 = r0.<com.android.server.BackupManagerService: java.io.File mPasswordVersionFile>;

        $z4 = virtualinvoke $r92.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label12;

        r35 = null;

        r42 = null;

     label05:
        r216 = new java.io.FileInputStream;

        $r158 = r0.<com.android.server.BackupManagerService: java.io.File mPasswordVersionFile>;

        specialinvoke r216.<java.io.FileInputStream: void <init>(java.io.File)>($r158);

        r41 = r216;

     label06:
        r217 = new java.io.DataInputStream;

        specialinvoke r217.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r41);

        r40 = r217;

     label07:
        $i12 = virtualinvoke r40.<java.io.DataInputStream: int readInt()>();

        r0.<com.android.server.BackupManagerService: int mPasswordVersion> = $i12;

     label08:
        if r40 == null goto label10;

     label09:
        virtualinvoke r40.<java.io.DataInputStream: void close()>();

     label10:
        if r41 == null goto label12;

     label11:
        virtualinvoke r41.<java.io.FileInputStream: void close()>();

     label12:
        r218 = new java.io.File;

        $r106 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke r218.<java.io.File: void <init>(java.io.File,java.lang.String)>($r106, "pwhash");

        r0.<com.android.server.BackupManagerService: java.io.File mPasswordHashFile> = r218;

        $r105 = r0.<com.android.server.BackupManagerService: java.io.File mPasswordHashFile>;

        $z6 = virtualinvoke $r105.<java.io.File: boolean exists()>();

        if $z6 == 0 goto label20;

        r25 = null;

        r23 = null;

     label13:
        r219 = new java.io.FileInputStream;

        $r165 = r0.<com.android.server.BackupManagerService: java.io.File mPasswordHashFile>;

        specialinvoke r219.<java.io.FileInputStream: void <init>(java.io.File)>($r165);

        r24 = r219;

     label14:
        r220 = new java.io.BufferedInputStream;

        specialinvoke r220.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r24);

        r28 = r220;

        r221 = new java.io.DataInputStream;

        specialinvoke r221.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r28);

        r29 = r221;

     label15:
        $i13 = virtualinvoke r29.<java.io.DataInputStream: int readInt()>();

        r32 = newarray (byte)[$i13];

        virtualinvoke r29.<java.io.DataInputStream: void readFully(byte[])>(r32);

        $r162 = virtualinvoke r29.<java.io.DataInputStream: java.lang.String readUTF()>();

        r0.<com.android.server.BackupManagerService: java.lang.String mPasswordHash> = $r162;

        r0.<com.android.server.BackupManagerService: byte[] mPasswordSalt> = r32;

     label16:
        if r29 == null goto label18;

     label17:
        virtualinvoke r29.<java.io.DataInputStream: void close()>();

     label18:
        if r24 == null goto label20;

     label19:
        virtualinvoke r24.<java.io.FileInputStream: void close()>();

     label20:
        r222 = new com.android.server.BackupManagerService$RunBackupReceiver;

        specialinvoke r222.<com.android.server.BackupManagerService$RunBackupReceiver: void <init>(com.android.server.BackupManagerService,com.android.server.BackupManagerService$1)>(r0, null);

        r6 = r222;

        r0.<com.android.server.BackupManagerService: android.content.BroadcastReceiver mRunBackupReceiver> = r6;

        r223 = new android.content.IntentFilter;

        specialinvoke r223.<android.content.IntentFilter: void <init>()>();

        r7 = r223;

        virtualinvoke r7.<android.content.IntentFilter: void addAction(java.lang.String)>("android.app.backup.intent.RUN");

        $r108 = r0.<com.android.server.BackupManagerService: android.content.BroadcastReceiver mRunBackupReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r108, r7, "android.permission.BACKUP", null);

        r224 = new com.android.server.BackupManagerService$RunInitializeReceiver;

        specialinvoke r224.<com.android.server.BackupManagerService$RunInitializeReceiver: void <init>(com.android.server.BackupManagerService,com.android.server.BackupManagerService$1)>(r0, null);

        r8 = r224;

        r0.<com.android.server.BackupManagerService: android.content.BroadcastReceiver mRunInitReceiver> = r8;

        r225 = new android.content.IntentFilter;

        specialinvoke r225.<android.content.IntentFilter: void <init>()>();

        r9 = r225;

        virtualinvoke r9.<android.content.IntentFilter: void addAction(java.lang.String)>("android.app.backup.intent.INIT");

        $r97 = r0.<com.android.server.BackupManagerService: android.content.BroadcastReceiver mRunInitReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r97, r9, "android.permission.BACKUP", null);

        r226 = new android.content.Intent;

        specialinvoke r226.<android.content.Intent: void <init>(java.lang.String)>("android.app.backup.intent.RUN");

        r10 = r226;

        virtualinvoke r10.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        $r101 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r1, 1, r10, 0);

        r0.<com.android.server.BackupManagerService: android.app.PendingIntent mRunBackupIntent> = $r101;

        r227 = new android.content.Intent;

        specialinvoke r227.<android.content.Intent: void <init>(java.lang.String)>("android.app.backup.intent.INIT");

        r11 = r227;

        virtualinvoke r10.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        $r118 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r1, 5, r11, 0);

        r0.<com.android.server.BackupManagerService: android.app.PendingIntent mRunInitIntent> = $r118;

        r228 = new java.io.File;

        $r120 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke r228.<java.io.File: void <init>(java.io.File,java.lang.String)>($r120, "pending");

        r0.<com.android.server.BackupManagerService: java.io.File mJournalDir> = r228;

        $r121 = r0.<com.android.server.BackupManagerService: java.io.File mJournalDir>;

        virtualinvoke $r121.<java.io.File: boolean mkdirs()>();

        r0.<com.android.server.BackupManagerService: java.io.File mJournal> = null;

        specialinvoke r0.<com.android.server.BackupManagerService: void initPackageTracking()>();

        r12 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        entermonitor r12;

     label21:
        virtualinvoke r0.<com.android.server.BackupManagerService: void addPackageParticipantsLocked(java.lang.String[])>(null);

        exitmonitor r12;

     label22:
        $r122 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r112 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r122, "backup_transport");

        r0.<com.android.server.BackupManagerService: java.lang.String mCurrentTransport> = $r112;

        $r114 = "";

        $r113 = r0.<com.android.server.BackupManagerService: java.lang.String mCurrentTransport>;

        $z7 = virtualinvoke $r114.<java.lang.String: boolean equals(java.lang.Object)>($r113);

        if $z7 == 0 goto label23;

        r0.<com.android.server.BackupManagerService: java.lang.String mCurrentTransport> = null;

     label23:
        r229 = new java.lang.StringBuilder;

        specialinvoke r229.<java.lang.StringBuilder: void <init>()>();

        $r116 = virtualinvoke r229.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting with transport ");

        $r117 = r0.<com.android.server.BackupManagerService: java.lang.String mCurrentTransport>;

        $r129 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r117);

        $r128 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r128);

        r230 = new android.content.Intent;

        specialinvoke r230.<android.content.Intent: void <init>(java.lang.String)>("android.backup.TRANSPORT_HOST");

        r15 = r230;

        $r131 = r0.<com.android.server.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        r14 = virtualinvoke $r131.<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>(r15, 0, 0);

        r231 = new java.lang.StringBuilder;

        specialinvoke r231.<java.lang.StringBuilder: void <init>()>();

        r17 = virtualinvoke r231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found transports: ");

        if r14 != null goto label64;

        r16 = "null";

     label24:
        $r123 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r126 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r126);

        if r14 == null goto label68;

        i0 = 0;

     label25:
        $i9 = interfaceinvoke r14.<java.util.List: int size()>();

        if i0 >= $i9 goto label68;

     label26:
        $r139 = interfaceinvoke r14.<java.util.List: java.lang.Object get(int)>(i0);

        $r137 = (android.content.pm.ResolveInfo) $r139;

        r20 = $r137.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r142 = r0.<com.android.server.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $r138 = r20.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r140 = virtualinvoke $r142.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r138, 0);

        $r141 = $r140.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i7 = $r141.<android.content.pm.ApplicationInfo: int flags>;

        $i8 = 1073741824 & $i7;

        if $i8 == 0 goto label65;

        r232 = new android.content.ComponentName;

        $r153 = r20.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r154 = r20.<android.content.pm.ServiceInfo: java.lang.String name>;

        specialinvoke r232.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r153, $r154);

        r21 = r232;

        r233 = new java.lang.StringBuilder;

        specialinvoke r233.<java.lang.StringBuilder: void <init>()>();

        $r151 = virtualinvoke r233.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Binding to transport host ");

        $r150 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r146 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r146);

        r234 = new android.content.Intent;

        specialinvoke r234.<android.content.Intent: void <init>(android.content.Intent)>(r15);

        r19 = r234;

        virtualinvoke r19.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r21);

        r235 = new com.android.server.BackupManagerService$TransportConnection;

        specialinvoke r235.<com.android.server.BackupManagerService$TransportConnection: void <init>(com.android.server.BackupManagerService)>(r0);

        r22 = r235;

        $r143 = r0.<com.android.server.BackupManagerService: java.util.ArrayList mTransportConnections>;

        virtualinvoke $r143.<java.util.ArrayList: boolean add(java.lang.Object)>(r22);

        $r145 = <android.os.UserHandle: android.os.UserHandle OWNER>;

        r238 = (android.content.ServiceConnection) r22;

        virtualinvoke r1.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r19, r238, 1, $r145);

     label27:
        i0 = i0 + 1;

        goto label25;

     label28:
        z0 = 0;

        goto label01;

     label29:
        z1 = 0;

        goto label02;

     label30:
        z2 = 0;

        goto label03;

     label31:
        $r190 := @caughtexception;

     label32:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to read backup pw version");

     label33:
        if r42 == null goto label35;

     label34:
        virtualinvoke r42.<java.io.DataInputStream: void close()>();

     label35:
        if r35 == null goto label12;

     label36:
        virtualinvoke r35.<java.io.FileInputStream: void close()>();

     label37:
        goto label12;

     label38:
        $r168 := @caughtexception;

        r44 = "BackupManagerService";

        r45 = "Error closing pw version files";

     label39:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r44, r45);

        goto label12;

     label40:
        $r192 := @caughtexception;

        r46 = $r192;

     label41:
        if r42 == null goto label43;

     label42:
        virtualinvoke r42.<java.io.DataInputStream: void close()>();

     label43:
        if r35 == null goto label45;

     label44:
        virtualinvoke r35.<java.io.FileInputStream: void close()>();

     label45:
        throw r46;

     label46:
        $r177 := @caughtexception;

     label47:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to read saved backup pw hash");

     label48:
        if r23 == null goto label50;

     label49:
        virtualinvoke r23.<java.io.DataInputStream: void close()>();

     label50:
        if r25 == null goto label20;

     label51:
        virtualinvoke r25.<java.io.FileInputStream: void close()>();

     label52:
        goto label20;

     label53:
        $r174 := @caughtexception;

        r34 = "BackupManagerService";

        r33 = "Unable to close streams";

     label54:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r34, r33);

        goto label20;

     label55:
        $r169 := @caughtexception;

        r27 = $r169;

     label56:
        if r23 == null goto label58;

     label57:
        virtualinvoke r23.<java.io.DataInputStream: void close()>();

     label58:
        if r25 == null goto label60;

     label59:
        virtualinvoke r25.<java.io.FileInputStream: void close()>();

     label60:
        throw r27;

     label61:
        $r171 := @caughtexception;

        r13 = $r171;

     label62:
        exitmonitor r12;

     label63:
        throw r13;

     label64:
        $i4 = interfaceinvoke r14.<java.util.List: int size()>();

        r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        goto label24;

     label65:
        r236 = new java.lang.StringBuilder;

        specialinvoke r236.<java.lang.StringBuilder: void <init>()>();

        $r135 = virtualinvoke r236.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport package not privileged: ");

        $r136 = r20.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r133 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r136);

        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r134);

     label66:
        goto label27;

     label67:
        $r186 := @caughtexception;

        r18 = $r186;

        r237 = new java.lang.StringBuilder;

        specialinvoke r237.<java.lang.StringBuilder: void <init>()>();

        $r185 = virtualinvoke r237.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem resolving transport service: ");

        $r183 = virtualinvoke r18.<java.lang.Exception: java.lang.String getMessage()>();

        $r184 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r183);

        $r182 = virtualinvoke $r184.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r182);

        goto label27;

     label68:
        specialinvoke r0.<com.android.server.BackupManagerService: void parseLeftoverJournals()>();

        $r125 = r0.<com.android.server.BackupManagerService: android.os.PowerManager mPowerManager>;

        $r124 = virtualinvoke $r125.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "*backup*");

        r0.<com.android.server.BackupManagerService: android.os.PowerManager$WakeLock mWakelock> = $r124;

        virtualinvoke r0.<com.android.server.BackupManagerService: void setBackupEnabled(boolean)>(z0);

        return;

     label69:
        $r175 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Error closing pw version files");

        goto label45;

     label70:
        $r188 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to close streams");

        goto label60;

     label71:
        $r178 := @caughtexception;

        r34 = "BackupManagerService";

        r33 = "Unable to close streams";

        goto label54;

     label72:
        $r167 := @caughtexception;

        r44 = "BackupManagerService";

        r45 = "Error closing pw version files";

        goto label39;

     label73:
        $r191 := @caughtexception;

        r27 = $r191;

        r25 = r24;

        r23 = null;

        goto label56;

     label74:
        $r179 := @caughtexception;

        r27 = $r179;

        r23 = r29;

        r25 = r24;

        goto label56;

     label75:
        $r189 := @caughtexception;

        r25 = r24;

        r23 = null;

        goto label47;

     label76:
        $r181 := @caughtexception;

        r23 = r29;

        r25 = r24;

        goto label47;

     label77:
        $r170 := @caughtexception;

        r46 = $r170;

        r35 = r41;

        r42 = null;

        goto label41;

     label78:
        $r180 := @caughtexception;

        r46 = $r180;

        r42 = r40;

        r35 = r41;

        goto label41;

     label79:
        $r173 := @caughtexception;

        r35 = r41;

        r42 = null;

        goto label32;

     label80:
        $r172 := @caughtexception;

        r42 = r40;

        r35 = r41;

        goto label32;

        catch java.io.IOException from label05 to label06 with label31;
        catch java.lang.Throwable from label05 to label06 with label40;
        catch java.io.IOException from label06 to label07 with label79;
        catch java.lang.Throwable from label06 to label07 with label77;
        catch java.io.IOException from label07 to label08 with label80;
        catch java.lang.Throwable from label07 to label08 with label78;
        catch java.io.IOException from label09 to label10 with label72;
        catch java.io.IOException from label11 to label12 with label72;
        catch java.io.IOException from label13 to label14 with label46;
        catch java.lang.Throwable from label13 to label14 with label55;
        catch java.io.IOException from label14 to label15 with label75;
        catch java.lang.Throwable from label14 to label15 with label73;
        catch java.io.IOException from label15 to label16 with label76;
        catch java.lang.Throwable from label15 to label16 with label74;
        catch java.io.IOException from label17 to label18 with label71;
        catch java.io.IOException from label19 to label20 with label71;
        catch java.lang.Throwable from label21 to label22 with label61;
        catch java.lang.Exception from label26 to label27 with label67;
        catch java.lang.Throwable from label32 to label33 with label40;
        catch java.io.IOException from label34 to label35 with label38;
        catch java.io.IOException from label36 to label37 with label38;
        catch java.io.IOException from label42 to label43 with label69;
        catch java.io.IOException from label44 to label45 with label69;
        catch java.lang.Throwable from label47 to label48 with label55;
        catch java.io.IOException from label49 to label50 with label53;
        catch java.io.IOException from label51 to label52 with label53;
        catch java.io.IOException from label57 to label58 with label70;
        catch java.io.IOException from label59 to label60 with label70;
        catch java.lang.Throwable from label62 to label63 with label61;
        catch java.lang.Exception from label65 to label66 with label67;
    }

    static void access$000(com.android.server.BackupManagerService, long)
    {
        com.android.server.BackupManagerService r0;
        long l0;

        r0 := @parameter0: com.android.server.BackupManagerService;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.server.BackupManagerService: void startBackupAlarmsLocked(long)>(l0);

        return;
    }

    static com.android.internal.backup.IBackupTransport access$100(com.android.server.BackupManagerService, java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        com.android.internal.backup.IBackupTransport $r2;

        r0 := @parameter0: com.android.server.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.BackupManagerService: com.android.internal.backup.IBackupTransport getTransport(java.lang.String)>(r1);

        return $r2;
    }

    static void access$1000(com.android.server.BackupManagerService, android.os.ParcelFileDescriptor, java.io.OutputStream) throws java.io.IOException
    {
        com.android.server.BackupManagerService r0;
        android.os.ParcelFileDescriptor r1;
        java.io.OutputStream r2;

        r0 := @parameter0: com.android.server.BackupManagerService;

        r1 := @parameter1: android.os.ParcelFileDescriptor;

        r2 := @parameter2: java.io.OutputStream;

        specialinvoke r0.<com.android.server.BackupManagerService: void routeSocketDataToOutput(android.os.ParcelFileDescriptor,java.io.OutputStream)>(r1, r2);

        return;
    }

    static boolean access$1300(com.android.server.BackupManagerService, java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.BackupManagerService: boolean backupPasswordMatches(java.lang.String)>(r1);

        return $z0;
    }

    static byte[] access$1400(com.android.server.BackupManagerService, int)
    {
        com.android.server.BackupManagerService r0;
        int i0;
        byte[] $r1;

        r0 := @parameter0: com.android.server.BackupManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.BackupManagerService: byte[] randomBytes(int)>(i0);

        return $r1;
    }

    static javax.crypto.SecretKey access$1500(com.android.server.BackupManagerService, java.lang.String, java.lang.String, byte[], int)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r2;
        byte[] r3;
        int i0;
        javax.crypto.SecretKey $r4;

        r0 := @parameter0: com.android.server.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: byte[];

        i0 := @parameter4: int;

        $r4 = specialinvoke r0.<com.android.server.BackupManagerService: javax.crypto.SecretKey buildPasswordKey(java.lang.String,java.lang.String,byte[],int)>(r1, r2, r3, i0);

        return $r4;
    }

    static java.security.SecureRandom access$1600(com.android.server.BackupManagerService)
    {
        com.android.server.BackupManagerService r0;
        java.security.SecureRandom $r1;

        r0 := @parameter0: com.android.server.BackupManagerService;

        $r1 = r0.<com.android.server.BackupManagerService: java.security.SecureRandom mRng>;

        return $r1;
    }

    static java.lang.String access$1700(com.android.server.BackupManagerService, byte[])
    {
        com.android.server.BackupManagerService r0;
        byte[] r1;
        java.lang.String $r2;

        r0 := @parameter0: com.android.server.BackupManagerService;

        r1 := @parameter1: byte[];

        $r2 = specialinvoke r0.<com.android.server.BackupManagerService: java.lang.String byteArrayToHex(byte[])>(r1);

        return $r2;
    }

    static byte[] access$1800(com.android.server.BackupManagerService, java.lang.String, byte[], byte[], int)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        byte[] r2, r3, $r4;
        int i0;

        r0 := @parameter0: com.android.server.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        i0 := @parameter4: int;

        $r4 = specialinvoke r0.<com.android.server.BackupManagerService: byte[] makeKeyChecksum(java.lang.String,byte[],byte[],int)>(r1, r2, r3, i0);

        return $r4;
    }

    static byte[] access$1900(com.android.server.BackupManagerService, java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        byte[] $r2;

        r0 := @parameter0: com.android.server.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.BackupManagerService: byte[] hexToByteArray(java.lang.String)>(r1);

        return $r2;
    }

    static android.app.AlarmManager access$200(com.android.server.BackupManagerService)
    {
        com.android.server.BackupManagerService r0;
        android.app.AlarmManager $r1;

        r0 := @parameter0: com.android.server.BackupManagerService;

        $r1 = r0.<com.android.server.BackupManagerService: android.app.AlarmManager mAlarmManager>;

        return $r1;
    }

    static boolean access$2000(com.android.server.BackupManagerService, android.content.pm.Signature[], android.content.pm.PackageInfo)
    {
        com.android.server.BackupManagerService r0;
        android.content.pm.Signature[] r1;
        android.content.pm.PackageInfo r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.BackupManagerService;

        r1 := @parameter1: android.content.pm.Signature[];

        r2 := @parameter2: android.content.pm.PackageInfo;

        $z0 = specialinvoke r0.<com.android.server.BackupManagerService: boolean signaturesMatch(android.content.pm.Signature[],android.content.pm.PackageInfo)>(r1, r2);

        return $z0;
    }

    static void access$2100(com.android.server.BackupManagerService, java.lang.String, java.util.HashSet)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        java.util.HashSet r2;

        r0 := @parameter0: com.android.server.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.HashSet;

        specialinvoke r0.<com.android.server.BackupManagerService: void dataChangedImpl(java.lang.String,java.util.HashSet)>(r1, r2);

        return;
    }

    static void access$500(com.android.server.BackupManagerService, java.lang.String, java.lang.String, com.android.internal.backup.IBackupTransport)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r2;
        com.android.internal.backup.IBackupTransport r3;

        r0 := @parameter0: com.android.server.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.android.internal.backup.IBackupTransport;

        specialinvoke r0.<com.android.server.BackupManagerService: void registerTransport(java.lang.String,java.lang.String,com.android.internal.backup.IBackupTransport)>(r1, r2, r3);

        return;
    }

    static android.content.pm.PackageManager access$600(com.android.server.BackupManagerService)
    {
        com.android.server.BackupManagerService r0;
        android.content.pm.PackageManager $r1;

        r0 := @parameter0: com.android.server.BackupManagerService;

        $r1 = r0.<com.android.server.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        return $r1;
    }

    static void access$700(com.android.server.BackupManagerService, java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.BackupManagerService: void dataChangedImpl(java.lang.String)>(r1);

        return;
    }

    static android.app.IActivityManager access$800(com.android.server.BackupManagerService)
    {
        com.android.server.BackupManagerService r0;
        android.app.IActivityManager $r1;

        r0 := @parameter0: com.android.server.BackupManagerService;

        $r1 = r0.<com.android.server.BackupManagerService: android.app.IActivityManager mActivityManager>;

        return $r1;
    }

    static android.content.Context access$900(com.android.server.BackupManagerService)
    {
        com.android.server.BackupManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.BackupManagerService;

        $r1 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        return $r1;
    }

    private void addPackageParticipantsLockedInner(java.lang.String, java.util.List)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, $r10, $r14, $r15, $r17, $r18;
        java.util.List r2;
        java.util.Iterator r3;
        android.content.pm.PackageInfo r4;
        int i0;
        java.util.HashSet r5, $r16;
        boolean $z0, $z2;
        java.lang.Object $r6, $r9;
        android.content.pm.ApplicationInfo $r7;
        android.util.SparseArray $r8, $r19;
        java.lang.StringBuilder $r11, $r12, $r13;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.PackageInfo) $r6;

        if r1 == null goto label2;

        $r18 = r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label1;

     label2:
        $r7 = r4.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i0 = $r7.<android.content.pm.ApplicationInfo: int uid>;

        $r8 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (java.util.HashSet) $r9;

        if r5 != null goto label3;

        $r16 = new java.util.HashSet;

        specialinvoke $r16.<java.util.HashSet: void <init>()>();

        r5 = $r16;

        $r19 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        virtualinvoke $r19.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5);

     label3:
        $r10 = r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke r5.<java.util.HashSet: boolean add(java.lang.Object)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduling backup for new app ");

        $r14 = r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r15);

        $r17 = r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        specialinvoke r0.<com.android.server.BackupManagerService: void dataChangedImpl(java.lang.String)>($r17);

        goto label1;

     label4:
        return;
    }

    private boolean backupPasswordMatches(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        boolean z0, $z1, $z2, $z3;
        int $i0;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $z1 = virtualinvoke r0.<com.android.server.BackupManagerService: boolean hasBackupPassword()>();

        if $z1 == 0 goto label4;

        $i0 = r0.<com.android.server.BackupManagerService: int mPasswordVersion>;

        if $i0 >= 2 goto label3;

        z0 = 1;

     label1:
        $z2 = virtualinvoke r0.<com.android.server.BackupManagerService: boolean passwordMatchesSaved(java.lang.String,java.lang.String,int)>("PBKDF2WithHmacSHA1", r1, 10000);

        if $z2 != 0 goto label4;

        if z0 == 0 goto label2;

        $z3 = virtualinvoke r0.<com.android.server.BackupManagerService: boolean passwordMatchesSaved(java.lang.String,java.lang.String,int)>("PBKDF2WithHmacSHA1And8bit", r1, 10000);

        if $z3 != 0 goto label4;

     label2:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Backup password mismatch; aborting");

        return 0;

     label3:
        z0 = 0;

        goto label1;

     label4:
        return 1;
    }

    private javax.crypto.SecretKey buildCharArrayKey(java.lang.String, char[], byte[], int)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        char[] r2;
        byte[] r3;
        int i0;
        javax.crypto.SecretKey r6;
        javax.crypto.SecretKeyFactory $r7;
        java.security.NoSuchAlgorithmException $r9;
        java.security.spec.InvalidKeySpecException $r10;
        javax.crypto.spec.PBEKeySpec r11;
        java.security.spec.KeySpec r12;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: char[];

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

     label1:
        $r7 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(r1);

        r11 = new javax.crypto.spec.PBEKeySpec;

        specialinvoke r11.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>(r2, r3, i0, 256);

        r12 = (java.security.spec.KeySpec) r11;

        r6 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r12);

     label2:
        return r6;

     label3:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Invalid key spec for PBKDF2!");

     label4:
        return null;

     label5:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "PBKDF2 unavailable!");

        goto label4;

        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
    }

    private java.lang.String buildPasswordHash(java.lang.String, java.lang.String, byte[], int)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r2, $r6;
        byte[] r3, $r5;
        int i0;
        javax.crypto.SecretKey r4;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        r4 = specialinvoke r0.<com.android.server.BackupManagerService: javax.crypto.SecretKey buildPasswordKey(java.lang.String,java.lang.String,byte[],int)>(r1, r2, r3, i0);

        if r4 == null goto label1;

        $r5 = interfaceinvoke r4.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r6 = specialinvoke r0.<com.android.server.BackupManagerService: java.lang.String byteArrayToHex(byte[])>($r5);

        return $r6;

     label1:
        return null;
    }

    private javax.crypto.SecretKey buildPasswordKey(java.lang.String, java.lang.String, byte[], int)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r2;
        byte[] r3;
        int i0;
        char[] $r4;
        javax.crypto.SecretKey $r5;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        $r4 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        $r5 = specialinvoke r0.<com.android.server.BackupManagerService: javax.crypto.SecretKey buildCharArrayKey(java.lang.String,char[],byte[],int)>(r1, $r4, r3, i0);

        return $r5;
    }

    private java.lang.String byteArrayToHex(byte[])
    {
        com.android.server.BackupManagerService r0;
        byte[] r1;
        java.lang.StringBuilder r2, $r3;
        int i0, $i1, $i2, $i3;
        java.lang.String $r4, $r5;
        byte $b4;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: byte[];

        $r3 = new java.lang.StringBuilder;

        $i1 = lengthof r1;

        $i2 = 2 * $i1;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i2);

        r2 = $r3;

        i0 = 0;

     label1:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label2;

        $b4 = r1[i0];

        $r5 = staticinvoke <java.lang.Byte: java.lang.String toHexString(byte,boolean)>($b4, 1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void dataChangedImpl(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        java.util.HashSet $r2;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.BackupManagerService: java.util.HashSet dataChangedTargets(java.lang.String)>(r1);

        specialinvoke r0.<com.android.server.BackupManagerService: void dataChangedImpl(java.lang.String,java.util.HashSet)>(r1, $r2);

        return;
    }

    private void dataChangedImpl(java.lang.String, java.util.HashSet)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, $r12, $r19;
        java.util.HashSet r2;
        java.lang.Object r3, $r8;
        java.lang.Throwable r4, $r20;
        com.android.server.BackupManagerService$BackupRequest r5, $r6;
        boolean $z0;
        java.util.HashMap $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18;
        int $i2;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.HashSet;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.String)>(2820, r1);

        if r2 != null goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataChanged but no participant pkg=\'");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r19);

        return;

     label1:
        r3 = r0.<com.android.server.BackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r3;

     label2:
        $z0 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r6 = new com.android.server.BackupManagerService$BackupRequest;

        specialinvoke $r6.<com.android.server.BackupManagerService$BackupRequest: void <init>(com.android.server.BackupManagerService,java.lang.String)>(r0, r1);

        r5 = $r6;

        $r7 = r0.<com.android.server.BackupManagerService: java.util.HashMap mPendingBackups>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

        if $r8 != null goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Now staging backup of ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r12);

        specialinvoke r0.<com.android.server.BackupManagerService: void writeToJournalLocked(java.lang.String)>(r1);

     label3:
        exitmonitor r3;

     label4:
        return;

     label5:
        $r20 := @caughtexception;

        r4 = $r20;

     label6:
        exitmonitor r3;

     label7:
        throw r4;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private java.util.HashSet dataChangedTargets(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        java.util.HashSet r2, r5, r8, $r10;
        android.util.SparseArray r3, r6, $r11, $r13, $r14;
        java.lang.Throwable r4, r7, $r16, $r17;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.content.Context $r9;
        java.lang.Object $r12, $r15;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r9 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = virtualinvoke $r9.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.BACKUP", $i2, $i3);

        if $i4 != -1 goto label06;

        r6 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        entermonitor r6;

     label01:
        $r14 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r15 = virtualinvoke $r14.<android.util.SparseArray: java.lang.Object get(int)>($i5);

        r8 = (java.util.HashSet) $r15;

        exitmonitor r6;

     label02:
        return r8;

     label03:
        $r17 := @caughtexception;

        r7 = $r17;

     label04:
        exitmonitor r6;

     label05:
        throw r7;

     label06:
        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r2 = $r10;

        r3 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        entermonitor r3;

     label07:
        $r11 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        i0 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

     label08:
        i1 = 0;

     label09:
        if i1 >= i0 goto label14;

     label10:
        $r13 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r12 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r5 = (java.util.HashSet) $r12;

     label11:
        if r5 == null goto label19;

     label12:
        virtualinvoke r2.<java.util.HashSet: boolean addAll(java.util.Collection)>(r5);

     label13:
        goto label19;

     label14:
        exitmonitor r3;

     label15:
        return r2;

     label16:
        $r16 := @caughtexception;

        r4 = $r16;

     label17:
        exitmonitor r3;

     label18:
        throw r4;

     label19:
        i1 = i1 + 1;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private void dumpInternal(java.io.PrintWriter)
    {
        com.android.server.BackupManagerService r0;
        java.io.PrintWriter r1;
        java.lang.Object r2, $r87, $r89, $r95, $r105, $r109, $r111, $r121;
        java.lang.Throwable r3, r23, $r143, $r148;
        java.lang.StringBuilder r4, r6, r8, r10, r15, r24, $r36, $r38, $r40, $r41, $r43, $r44, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r54, $r56, $r57, $r59, $r61, $r62, $r65, $r69, $r73, $r76, $r77, $r80, $r82, $r83, $r84, $r85, $r86, $r90, $r91, $r93, $r97, $r98, $r100, $r102, $r106, $r107, $r112, $r113, $r114, $r115, $r120, $r123, $r124, $r126, $r127, $r130, $r132, $r133, $r134, $r135, $r138, $r139, $r140, $r141, $r145, $r146, $r147, $r151, $r152, $r153;
        java.lang.String r5, r7, r9, r11, r13, r14, r27, r29, r33, r35, r37, $r42, $r45, $r53, $r55, $r58, $r67, $r74, $r79, $r92, $r96, $r99, $r103, $r116, $r119, $r122, $r125, $r128, $r131, $r136, $r137, $r142, $r144, $r149;
        java.lang.String[] r12;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i11, $i12, $i13, $i14;
        java.lang.Exception r16, $r150;
        java.io.File r17, r20, $r117, $r118;
        com.android.internal.backup.IBackupTransport r18;
        java.io.File[] r19;
        java.util.List r21, $r66, $r104;
        java.util.Iterator r22, r26, r30, r31, r32, r34;
        java.io.Serializable r25;
        com.android.server.BackupManagerService$BackupRequest r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.HashSet $r39, $r60, $r63, $r72, $r75, $r110;
        long $l8, $l9, $l10, $l16;
        android.util.SparseArray $r64, $r94, $r108;
        java.util.Set $r68, $r70, $r71, $r101;
        java.util.HashMap $r78, $r81;
        java.util.Collection $r88;
        android.content.Intent $r129;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 = r0.<com.android.server.BackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r2;

     label01:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        r4 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Backup Manager is ");

        $z1 = r0.<com.android.server.BackupManagerService: boolean mEnabled>;

        if $z1 == 0 goto label21;

     label02:
        r5 = "enabled";

     label03:
        $r38 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r6 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / ");

        $z0 = r0.<com.android.server.BackupManagerService: boolean mProvisioned>;

        if $z0 != 0 goto label60;

     label04:
        r7 = "not ";

     label05:
        $r40 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        r8 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provisioned / ");

        $r39 = r0.<com.android.server.BackupManagerService: java.util.HashSet mPendingInits>;

        $i7 = virtualinvoke $r39.<java.util.HashSet: int size()>();

        if $i7 != 0 goto label61;

     label06:
        r9 = "not ";

     label07:
        $r44 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pending init");

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r42);

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        r10 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto-restore is ");

        $z2 = r0.<com.android.server.BackupManagerService: boolean mAutoRestore>;

        if $z2 == 0 goto label62;

     label08:
        r11 = "enabled";

     label09:
        $r46 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r45);

        $z3 = r0.<com.android.server.BackupManagerService: boolean mBackupRunning>;

        if $z3 == 0 goto label10;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Backup currently running");

     label10:
        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Last backup pass started: ");

        $l9 = r0.<com.android.server.BackupManagerService: long mLastBackupPass>;

        $r47 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (now = ");

        $l8 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r54 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r55);

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  next scheduled: ");

        $l10 = r0.<com.android.server.BackupManagerService: long mNextBackupPass>;

        $r52 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r53);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Available transports:");

        r12 = virtualinvoke r0.<com.android.server.BackupManagerService: java.lang.String[] listAllTransports()>();

        i0 = lengthof r12;

     label11:
        i1 = 0;

     label12:
        if i1 >= i0 goto label25;

     label13:
        r13 = r12[i1];

        $r124 = new java.lang.StringBuilder;

        specialinvoke $r124.<java.lang.StringBuilder: void <init>()>();

        r15 = $r124;

        $r116 = r0.<com.android.server.BackupManagerService: java.lang.String mCurrentTransport>;

        $z11 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>($r116);

        if $z11 == 0 goto label63;

     label14:
        r14 = "  * ";

     label15:
        $r115 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r114 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r119 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r119);

     label16:
        r18 = specialinvoke r0.<com.android.server.BackupManagerService: com.android.internal.backup.IBackupTransport getTransport(java.lang.String)>(r13);

        $r118 = new java.io.File;

        $r117 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        $r137 = interfaceinvoke r18.<com.android.internal.backup.IBackupTransport: java.lang.String transportDirName()>();

        specialinvoke $r118.<java.io.File: void <init>(java.io.File,java.lang.String)>($r117, $r137);

        r17 = $r118;

        $r138 = new java.lang.StringBuilder;

        specialinvoke $r138.<java.lang.StringBuilder: void <init>()>();

        $r135 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("       destination: ");

        $r136 = interfaceinvoke r18.<com.android.internal.backup.IBackupTransport: java.lang.String currentDestinationString()>();

        $r141 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r136);

        $r142 = virtualinvoke $r141.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r142);

        $r139 = new java.lang.StringBuilder;

        specialinvoke $r139.<java.lang.StringBuilder: void <init>()>();

        $r140 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("       intent: ");

        $r129 = interfaceinvoke r18.<com.android.internal.backup.IBackupTransport: android.content.Intent configurationIntent()>();

        $r130 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r129);

        $r128 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r128);

        r19 = virtualinvoke r17.<java.io.File: java.io.File[] listFiles()>();

        i2 = lengthof r19;

     label17:
        i3 = 0;

     label18:
        if i3 >= i2 goto label64;

     label19:
        r20 = r19[i3];

        $r133 = new java.lang.StringBuilder;

        specialinvoke $r133.<java.lang.StringBuilder: void <init>()>();

        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("       ");

        $r131 = virtualinvoke r20.<java.io.File: java.lang.String getName()>();

        $r132 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r131);

        $r151 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $l16 = virtualinvoke r20.<java.io.File: long length()>();

        $r153 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l16);

        $r152 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" state bytes");

        $r149 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r149);

     label20:
        i3 = i3 + 1;

        goto label18;

     label21:
        r5 = "disabled";

        goto label03;

     label22:
        $r150 := @caughtexception;

        r16 = $r150;

     label23:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Error in transport", r16);

        $r145 = new java.lang.StringBuilder;

        specialinvoke $r145.<java.lang.StringBuilder: void <init>()>();

        $r147 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("        Error: ");

        $r146 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r144 = virtualinvoke $r146.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r144);

     label24:
        goto label64;

     label25:
        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pending init: ");

        $r63 = r0.<com.android.server.BackupManagerService: java.util.HashSet mPendingInits>;

        $i11 = virtualinvoke $r63.<java.util.HashSet: int size()>();

        $r59 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r58);

        $r60 = r0.<com.android.server.BackupManagerService: java.util.HashSet mPendingInits>;

        r22 = virtualinvoke $r60.<java.util.HashSet: java.util.Iterator iterator()>();

     label26:
        $z4 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label31;

        $r121 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r37 = (java.lang.String) $r121;

        $r120 = new java.lang.StringBuilder;

        specialinvoke $r120.<java.lang.StringBuilder: void <init>()>();

        $r127 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r126 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        $r125 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r125);

     label27:
        goto label26;

     label28:
        $r148 := @caughtexception;

        r3 = $r148;

     label29:
        exitmonitor r2;

     label30:
        throw r3;

     label31:
        r21 = r0.<com.android.server.BackupManagerService: java.util.List mBackupTrace>;

        entermonitor r21;

     label32:
        $r66 = r0.<com.android.server.BackupManagerService: java.util.List mBackupTrace>;

        $z5 = interfaceinvoke $r66.<java.util.List: boolean isEmpty()>();

        if $z5 != 0 goto label38;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Most recent backup trace:");

        $r104 = r0.<com.android.server.BackupManagerService: java.util.List mBackupTrace>;

        r32 = interfaceinvoke $r104.<java.util.List: java.util.Iterator iterator()>();

     label33:
        $z9 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label38;

        $r105 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r33 = (java.lang.String) $r105;

        $r106 = new java.lang.StringBuilder;

        specialinvoke $r106.<java.lang.StringBuilder: void <init>()>();

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        $r123 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r122 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r122);

     label34:
        goto label33;

     label35:
        $r143 := @caughtexception;

        r23 = $r143;

     label36:
        exitmonitor r21;

     label37:
        throw r23;

     label38:
        exitmonitor r21;

     label39:
        $r64 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        i4 = virtualinvoke $r64.<android.util.SparseArray: int size()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Participants:");

     label40:
        i6 = 0;

     label41:
        if i6 >= i4 goto label45;

     label42:
        $r94 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        i5 = virtualinvoke $r94.<android.util.SparseArray: int keyAt(int)>(i6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  uid: ");

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>(i5);

        $r108 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r109 = virtualinvoke $r108.<android.util.SparseArray: java.lang.Object valueAt(int)>(i6);

        $r110 = (java.util.HashSet) $r109;

        r26 = virtualinvoke $r110.<java.util.HashSet: java.util.Iterator iterator()>();

     label43:
        $z10 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label65;

        $r111 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.lang.String) $r111;

        $r112 = new java.lang.StringBuilder;

        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r102 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r103);

     label44:
        goto label43;

     label45:
        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        r24 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ancestral packages: ");

        $r71 = r0.<com.android.server.BackupManagerService: java.util.Set mAncestralPackages>;

        if $r71 != null goto label50;

     label46:
        r25 = "none";

     label47:
        $r69 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r67 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r67);

        $r68 = r0.<com.android.server.BackupManagerService: java.util.Set mAncestralPackages>;

        if $r68 == null goto label52;

        $r101 = r0.<com.android.server.BackupManagerService: java.util.Set mAncestralPackages>;

        r34 = interfaceinvoke $r101.<java.util.Set: java.util.Iterator iterator()>();

     label48:
        $z8 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label52;

        $r89 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (java.lang.String) $r89;

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r93 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r92 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r92);

     label49:
        goto label48;

     label50:
        $r70 = r0.<com.android.server.BackupManagerService: java.util.Set mAncestralPackages>;

        $i12 = interfaceinvoke $r70.<java.util.Set: int size()>();

        r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

     label51:
        goto label47;

     label52:
        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ever backed up: ");

        $r75 = r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps>;

        $i13 = virtualinvoke $r75.<java.util.HashSet: int size()>();

        $r73 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r74);

        $r72 = r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps>;

        r30 = virtualinvoke $r72.<java.util.HashSet: java.util.Iterator iterator()>();

     label53:
        $z6 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label55;

        $r95 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r29 = (java.lang.String) $r95;

        $r98 = new java.lang.StringBuilder;

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        $r97 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r100 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r99 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r99);

     label54:
        goto label53;

     label55:
        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pending backup: ");

        $r81 = r0.<com.android.server.BackupManagerService: java.util.HashMap mPendingBackups>;

        $i14 = virtualinvoke $r81.<java.util.HashMap: int size()>();

        $r80 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r79 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r79);

        $r78 = r0.<com.android.server.BackupManagerService: java.util.HashMap mPendingBackups>;

        $r88 = virtualinvoke $r78.<java.util.HashMap: java.util.Collection values()>();

        r31 = interfaceinvoke $r88.<java.util.Collection: java.util.Iterator iterator()>();

     label56:
        $z7 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label58;

        $r87 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r28 = (com.android.server.BackupManagerService$BackupRequest) $r87;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r85 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r84 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        $r96 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r96);

     label57:
        goto label56;

     label58:
        exitmonitor r2;

     label59:
        return;

     label60:
        r7 = "";

        goto label05;

     label61:
        r9 = "";

        goto label07;

     label62:
        r11 = "disabled";

        goto label09;

     label63:
        r14 = "    ";

        goto label15;

     label64:
        i1 = i1 + 1;

        goto label12;

     label65:
        i6 = i6 + 1;

        goto label41;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label03 to label04 with label28;
        catch java.lang.Throwable from label05 to label06 with label28;
        catch java.lang.Throwable from label07 to label08 with label28;
        catch java.lang.Throwable from label09 to label10 with label28;
        catch java.lang.Throwable from label10 to label11 with label28;
        catch java.lang.Throwable from label13 to label14 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Exception from label16 to label17 with label22;
        catch java.lang.Throwable from label16 to label17 with label28;
        catch java.lang.Exception from label19 to label20 with label22;
        catch java.lang.Throwable from label19 to label20 with label28;
        catch java.lang.Throwable from label23 to label24 with label28;
        catch java.lang.Throwable from label25 to label26 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
        catch java.lang.Throwable from label31 to label32 with label28;
        catch java.lang.Throwable from label32 to label33 with label35;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label36 to label37 with label35;
        catch java.lang.Throwable from label37 to label38 with label28;
        catch java.lang.Throwable from label38 to label39 with label35;
        catch java.lang.Throwable from label39 to label40 with label28;
        catch java.lang.Throwable from label42 to label43 with label28;
        catch java.lang.Throwable from label43 to label44 with label28;
        catch java.lang.Throwable from label45 to label46 with label28;
        catch java.lang.Throwable from label47 to label48 with label28;
        catch java.lang.Throwable from label48 to label49 with label28;
        catch java.lang.Throwable from label50 to label51 with label28;
        catch java.lang.Throwable from label52 to label53 with label28;
        catch java.lang.Throwable from label53 to label54 with label28;
        catch java.lang.Throwable from label55 to label56 with label28;
        catch java.lang.Throwable from label56 to label57 with label28;
        catch java.lang.Throwable from label58 to label59 with label28;
    }

    private com.android.internal.backup.IBackupTransport getTransport(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, $r10;
        java.util.HashMap r2, $r5;
        java.lang.Throwable r3, $r11;
        com.android.internal.backup.IBackupTransport r4;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.internal.backup.IBackupTransport) $r6;

     label2:
        if r4 != null goto label4;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested unavailable transport: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

     label4:
        exitmonitor r2;

     label5:
        return r4;

     label6:
        $r11 := @caughtexception;

        r3 = $r11;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private byte[] hexToByteArray(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        byte[] r2;
        byte $b9;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i0 = $i2 / 2;

        $i3 = i0 * 2;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 == $i4 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hex string must have an even number of digits");

        throw $r4;

     label1:
        r2 = newarray (byte)[i0];

        i1 = 0;

     label2:
        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        if i1 >= $i5 goto label3;

        $i7 = i1 / 2;

        $i6 = i1 + 2;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, $i6);

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

        $b9 = (byte) $i8;

        r2[$i7] = $b9;

        i1 = i1 + 2;

        goto label2;

     label3:
        return r2;
    }

    private void initPackageTracking()
    {
        com.android.server.BackupManagerService r0;
        java.io.RandomAccessFile r1, r6, r7, r8, r9, $r25, $r41, $r42;
        java.io.IOException r2, r16, $r50, $r52, $r53, $r62, $r66, $r67, $r68, $r71, $r72;
        java.io.File r3, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r40, $r56, $r58;
        android.content.IntentFilter r4, r5, $r35, $r38;
        java.lang.Throwable r11, $r61, $r69, $r70;
        java.lang.String r19, r23, $r64;
        int i0, i1, $i3;
        boolean $z0, $z1, $z5;
        android.content.Context $r33, $r36;
        android.content.BroadcastReceiver $r34, $r37;
        java.util.HashSet $r44, $r47;
        android.content.pm.PackageManager $r46;
        java.util.Set $r48;
        long $l4, $l5;
        java.io.FileNotFoundException $r49;
        java.io.EOFException $r51, $r60, $r63;
        java.lang.StringBuilder $r54, $r55, $r57, $r59, $r65;
        android.content.pm.PackageManager$NameNotFoundException $r73;

        r0 := @this: com.android.server.BackupManagerService;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "Initializing package tracking");

        $r26 = new java.io.File;

        $r24 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r26.<java.io.File: void <init>(java.io.File,java.lang.String)>($r24, "ancestral");

        r0.<com.android.server.BackupManagerService: java.io.File mTokenFile> = $r26;

     label01:
        $r25 = new java.io.RandomAccessFile;

        $r29 = r0.<com.android.server.BackupManagerService: java.io.File mTokenFile>;

        specialinvoke $r25.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r29, "r");

        r1 = $r25;

        $i3 = virtualinvoke r1.<java.io.RandomAccessFile: int readInt()>();

        if $i3 != 1 goto label08;

        $l4 = virtualinvoke r1.<java.io.RandomAccessFile: long readLong()>();

        r0.<com.android.server.BackupManagerService: long mAncestralToken> = $l4;

        $l5 = virtualinvoke r1.<java.io.RandomAccessFile: long readLong()>();

        r0.<com.android.server.BackupManagerService: long mCurrentToken> = $l5;

        i1 = virtualinvoke r1.<java.io.RandomAccessFile: int readInt()>();

     label02:
        if i1 < 0 goto label08;

     label03:
        $r47 = new java.util.HashSet;

        specialinvoke $r47.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.BackupManagerService: java.util.Set mAncestralPackages> = $r47;

     label04:
        i0 = 0;

     label05:
        if i0 >= i1 goto label08;

     label06:
        r23 = virtualinvoke r1.<java.io.RandomAccessFile: java.lang.String readUTF()>();

        $r48 = r0.<com.android.server.BackupManagerService: java.util.Set mAncestralPackages>;

        interfaceinvoke $r48.<java.util.Set: boolean add(java.lang.Object)>(r23);

     label07:
        i0 = i0 + 1;

        goto label05;

     label08:
        virtualinvoke r1.<java.io.RandomAccessFile: void close()>();

     label09:
        $r27 = new java.io.File;

        $r28 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r27.<java.io.File: void <init>(java.io.File,java.lang.String)>($r28, "processed");

        r0.<com.android.server.BackupManagerService: java.io.File mEverStored> = $r27;

        $r31 = new java.io.File;

        $r32 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r31.<java.io.File: void <init>(java.io.File,java.lang.String)>($r32, "processed.new");

        r3 = $r31;

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label10;

        virtualinvoke r3.<java.io.File: boolean delete()>();

     label10:
        $r30 = r0.<com.android.server.BackupManagerService: java.io.File mEverStored>;

        $z1 = virtualinvoke $r30.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label25;

        r6 = null;

        r7 = null;

     label11:
        $r42 = new java.io.RandomAccessFile;

        specialinvoke $r42.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r3, "rws");

        r8 = $r42;

     label12:
        $r41 = new java.io.RandomAccessFile;

        $r40 = r0.<com.android.server.BackupManagerService: java.io.File mEverStored>;

        specialinvoke $r41.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r40, "r");

        r9 = $r41;

     label13:
        r19 = virtualinvoke r9.<java.io.RandomAccessFile: java.lang.String readUTF()>();

     label14:
        $r46 = r0.<com.android.server.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        virtualinvoke $r46.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r19, 0);

        $r44 = r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps>;

        virtualinvoke $r44.<java.util.HashSet: boolean add(java.lang.Object)>(r19);

        virtualinvoke r8.<java.io.RandomAccessFile: void writeUTF(java.lang.String)>(r19);

     label15:
        goto label13;

     label16:
        $r73 := @caughtexception;

        goto label13;

     label17:
        $r49 := @caughtexception;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "No ancestral data");

        goto label09;

     label18:
        $r71 := @caughtexception;

        r2 = $r71;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Unable to read token file", r2);

        goto label09;

     label19:
        $r51 := @caughtexception;

     label20:
        $r58 = r0.<com.android.server.BackupManagerService: java.io.File mEverStored>;

        $z5 = virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>($r58);

        if $z5 != 0 goto label21;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error renaming ");

        $r54 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r57 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r56 = r0.<com.android.server.BackupManagerService: java.io.File mEverStored>;

        $r65 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r56);

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r64);

     label21:
        if r6 == null goto label23;

     label22:
        virtualinvoke r6.<java.io.RandomAccessFile: void close()>();

     label23:
        if r7 == null goto label25;

     label24:
        virtualinvoke r7.<java.io.RandomAccessFile: void close()>();

     label25:
        $r35 = new android.content.IntentFilter;

        specialinvoke $r35.<android.content.IntentFilter: void <init>()>();

        r4 = $r35;

        virtualinvoke r4.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke r4.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke r4.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r33 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        $r34 = r0.<com.android.server.BackupManagerService: android.content.BroadcastReceiver mBroadcastReceiver>;

        virtualinvoke $r33.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r34, r4);

        $r38 = new android.content.IntentFilter;

        specialinvoke $r38.<android.content.IntentFilter: void <init>()>();

        r5 = $r38;

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE");

        $r36 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        $r37 = r0.<com.android.server.BackupManagerService: android.content.BroadcastReceiver mBroadcastReceiver>;

        virtualinvoke $r36.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r37, r5);

        return;

     label26:
        $r52 := @caughtexception;

        r16 = $r52;

     label27:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Error in processed file", r16);

     label28:
        if r6 == null goto label30;

     label29:
        virtualinvoke r6.<java.io.RandomAccessFile: void close()>();

     label30:
        if r7 == null goto label25;

     label31:
        virtualinvoke r7.<java.io.RandomAccessFile: void close()>();

     label32:
        goto label25;

     label33:
        $r53 := @caughtexception;

        goto label25;

     label34:
        $r69 := @caughtexception;

        r11 = $r69;

     label35:
        if r6 == null goto label37;

     label36:
        virtualinvoke r6.<java.io.RandomAccessFile: void close()>();

     label37:
        if r7 == null goto label39;

     label38:
        virtualinvoke r7.<java.io.RandomAccessFile: void close()>();

     label39:
        throw r11;

     label40:
        $r50 := @caughtexception;

        goto label37;

     label41:
        $r67 := @caughtexception;

        goto label39;

     label42:
        $r62 := @caughtexception;

        goto label23;

     label43:
        $r72 := @caughtexception;

        goto label30;

     label44:
        $r70 := @caughtexception;

        r11 = $r70;

        r6 = r8;

        r7 = null;

        goto label35;

     label45:
        $r61 := @caughtexception;

        r11 = $r61;

        r7 = r9;

        r6 = r8;

        goto label35;

     label46:
        $r66 := @caughtexception;

        r16 = $r66;

        r6 = r8;

        r7 = null;

        goto label27;

     label47:
        $r68 := @caughtexception;

        r16 = $r68;

        r7 = r9;

        r6 = r8;

        goto label27;

     label48:
        $r63 := @caughtexception;

        r6 = r8;

        r7 = null;

        goto label20;

     label49:
        $r60 := @caughtexception;

        r7 = r9;

        r6 = r8;

        goto label20;

        catch java.io.FileNotFoundException from label01 to label02 with label17;
        catch java.io.IOException from label01 to label02 with label18;
        catch java.io.FileNotFoundException from label03 to label04 with label17;
        catch java.io.IOException from label03 to label04 with label18;
        catch java.io.FileNotFoundException from label06 to label07 with label17;
        catch java.io.IOException from label06 to label07 with label18;
        catch java.io.FileNotFoundException from label08 to label09 with label17;
        catch java.io.IOException from label08 to label09 with label18;
        catch java.io.EOFException from label11 to label12 with label19;
        catch java.io.IOException from label11 to label12 with label26;
        catch java.lang.Throwable from label11 to label12 with label34;
        catch java.io.EOFException from label12 to label13 with label48;
        catch java.io.IOException from label12 to label13 with label46;
        catch java.lang.Throwable from label12 to label13 with label44;
        catch java.io.EOFException from label13 to label14 with label49;
        catch java.io.IOException from label13 to label14 with label47;
        catch java.lang.Throwable from label13 to label14 with label45;
        catch android.content.pm.PackageManager$NameNotFoundException from label14 to label15 with label16;
        catch java.io.EOFException from label14 to label15 with label49;
        catch java.io.IOException from label14 to label15 with label47;
        catch java.lang.Throwable from label14 to label15 with label45;
        catch java.lang.Throwable from label20 to label21 with label34;
        catch java.io.IOException from label22 to label23 with label42;
        catch java.io.IOException from label24 to label25 with label33;
        catch java.lang.Throwable from label27 to label28 with label34;
        catch java.io.IOException from label29 to label30 with label43;
        catch java.io.IOException from label31 to label32 with label33;
        catch java.io.IOException from label36 to label37 with label40;
        catch java.io.IOException from label38 to label39 with label41;
    }

    private byte[] makeKeyChecksum(java.lang.String, byte[], byte[], int)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        byte[] r2, r3, $r6;
        int i0, i1, $i2, $i3;
        char[] r4;
        javax.crypto.SecretKey $r5;
        byte $b4;
        char $c5;
        java.security.Key r7;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        $i2 = lengthof r2;

        r4 = newarray (char)[$i2];

        i1 = 0;

     label1:
        $i3 = lengthof r2;

        if i1 >= $i3 goto label2;

        $b4 = r2[i1];

        $c5 = (char) $b4;

        r4[i1] = $c5;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = specialinvoke r0.<com.android.server.BackupManagerService: javax.crypto.SecretKey buildCharArrayKey(java.lang.String,char[],byte[],int)>(r1, r4, r3, i0);

        r7 = (java.security.Key) $r5;

        $r6 = interfaceinvoke r7.<java.security.Key: byte[] getEncoded()>();

        return $r6;
    }

    private void parseLeftoverJournals()
    {
        com.android.server.BackupManagerService r0;
        java.io.File[] r1;
        int i0, i1, $i4;
        java.io.File r2, $r14, $r15, $r22;
        java.io.RandomAccessFile r3, r5, r11, $r16;
        java.lang.Throwable r7, $r21, $r23;
        java.lang.Exception r9, $r27, $r33;
        java.lang.String r12, $r20, $r34;
        java.lang.StringBuilder $r17, $r18, $r19, $r30, $r31, $r32;
        java.io.IOException $r24, $r26, $r29;
        java.io.EOFException $r25, $r28;

        r0 := @this: com.android.server.BackupManagerService;

        $r14 = r0.<com.android.server.BackupManagerService: java.io.File mJournalDir>;

        r1 = virtualinvoke $r14.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r1;

        i1 = 0;

     label01:
        if i1 >= i0 goto label21;

        r2 = r1[i1];

        $r15 = r0.<com.android.server.BackupManagerService: java.io.File mJournal>;

        if $r15 == null goto label02;

        $r22 = r0.<com.android.server.BackupManagerService: java.io.File mJournal>;

        $i4 = virtualinvoke r2.<java.io.File: int compareTo(java.io.File)>($r22);

        if $i4 == 0 goto label10;

     label02:
        r3 = null;

     label03:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Found stale backup journal, scheduling");

        $r16 = new java.io.RandomAccessFile;

        specialinvoke $r16.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r2, "r");

        r11 = $r16;

     label04:
        r12 = virtualinvoke r11.<java.io.RandomAccessFile: java.lang.String readUTF()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r20);

        specialinvoke r0.<com.android.server.BackupManagerService: void dataChangedImpl(java.lang.String)>(r12);

     label05:
        goto label04;

     label06:
        $r28 := @caughtexception;

        r5 = r11;

     label07:
        if r5 == null goto label09;

     label08:
        virtualinvoke r5.<java.io.RandomAccessFile: void close()>();

     label09:
        virtualinvoke r2.<java.io.File: boolean delete()>();

     label10:
        i1 = i1 + 1;

        goto label01;

     label11:
        $r27 := @caughtexception;

        r9 = $r27;

     label12:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r34, r9);

     label13:
        if r3 == null goto label09;

     label14:
        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

     label15:
        goto label09;

     label16:
        $r29 := @caughtexception;

        goto label09;

     label17:
        $r21 := @caughtexception;

        r7 = $r21;

     label18:
        if r3 == null goto label20;

     label19:
        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

     label20:
        virtualinvoke r2.<java.io.File: boolean delete()>();

        throw r7;

     label21:
        return;

     label22:
        $r24 := @caughtexception;

        goto label09;

     label23:
        $r26 := @caughtexception;

        goto label20;

     label24:
        $r23 := @caughtexception;

        r7 = $r23;

        r3 = r11;

        goto label18;

     label25:
        $r33 := @caughtexception;

        r9 = $r33;

        r3 = r11;

        goto label12;

     label26:
        $r25 := @caughtexception;

        r5 = null;

        goto label07;

        catch java.io.EOFException from label03 to label04 with label26;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.io.EOFException from label04 to label05 with label06;
        catch java.lang.Exception from label04 to label05 with label25;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.io.IOException from label08 to label09 with label22;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.io.IOException from label19 to label20 with label23;
    }

    private byte[] randomBytes(int)
    {
        com.android.server.BackupManagerService r0;
        int i0, $i1;
        byte[] r1;
        java.security.SecureRandom $r2;

        r0 := @this: com.android.server.BackupManagerService;

        i0 := @parameter0: int;

        $i1 = i0 / 8;

        r1 = newarray (byte)[$i1];

        $r2 = r0.<com.android.server.BackupManagerService: java.security.SecureRandom mRng>;

        virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        return r1;
    }

    private void registerTransport(java.lang.String, java.lang.String, com.android.internal.backup.IBackupTransport)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r2, r7, $r17, $r43;
        com.android.internal.backup.IBackupTransport r3;
        java.util.HashMap r4, $r19, $r21, $r24, $r25, $r27, $r40, $r44;
        java.lang.Throwable r5, r9, $r36, $r42;
        java.io.File r8, $r29, $r30, $r31;
        java.lang.Object r10, $r20;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r37, $r38, $r39;
        boolean $z0;
        android.app.AlarmManager $r32;
        java.util.HashSet $r33;
        long $l1, $l2;
        android.app.PendingIntent $r34;
        android.os.RemoteException $r35;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.internal.backup.IBackupTransport;

        r4 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        entermonitor r4;

     label01:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Registering transport ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r17);

     label02:
        if r3 == null goto label07;

     label03:
        $r27 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        virtualinvoke $r27.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        $r25 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransportNames>;

        virtualinvoke $r25.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        exitmonitor r4;

     label04:
        r7 = interfaceinvoke r3.<com.android.internal.backup.IBackupTransport: java.lang.String transportDirName()>();

        $r29 = new java.io.File;

        $r30 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r29.<java.io.File: void <init>(java.io.File,java.lang.String)>($r30, r7);

        r8 = $r29;

        virtualinvoke r8.<java.io.File: boolean mkdirs()>();

        $r31 = new java.io.File;

        specialinvoke $r31.<java.io.File: void <init>(java.io.File,java.lang.String)>(r8, "_need_init_");

        $z0 = virtualinvoke $r31.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label06;

        r10 = r0.<com.android.server.BackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r10;

     label05:
        $r33 = r0.<com.android.server.BackupManagerService: java.util.HashSet mPendingInits>;

        virtualinvoke $r33.<java.util.HashSet: boolean add(java.lang.Object)>(r7);

        $r32 = r0.<com.android.server.BackupManagerService: android.app.AlarmManager mAlarmManager>;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = 60000L + $l2;

        $r34 = r0.<com.android.server.BackupManagerService: android.app.PendingIntent mRunInitIntent>;

        virtualinvoke $r32.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(0, $l1, $r34);

        exitmonitor r10;

     label06:
        return;

     label07:
        $r21 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        $r19 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransportNames>;

        $r20 = virtualinvoke $r19.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        virtualinvoke $r21.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r20);

        $r24 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransportNames>;

        virtualinvoke $r24.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        exitmonitor r4;

     label08:
        return;

     label09:
        $r42 := @caughtexception;

        r5 = $r42;

     label10:
        exitmonitor r4;

     label11:
        throw r5;

     label12:
        $r36 := @caughtexception;

        r9 = $r36;

     label13:
        exitmonitor r10;

     label14:
        throw r9;

     label15:
        $r35 := @caughtexception;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to register transport as ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r43 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r43);

        $r44 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransportNames>;

        virtualinvoke $r44.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        $r40 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        virtualinvoke $r40.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch android.os.RemoteException from label04 to label05 with label15;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch android.os.RemoteException from label14 to label15 with label15;
    }

    private void removePackageFromSetLocked(java.util.HashSet, java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.util.HashSet r1;
        java.lang.String r2;
        boolean $z0;
        java.util.HashMap $r3;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.util.HashSet;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r1.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.util.HashSet: boolean remove(java.lang.Object)>(r2);

        $r3 = r0.<com.android.server.BackupManagerService: java.util.HashMap mPendingBackups>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    private void routeSocketDataToOutput(android.os.ParcelFileDescriptor, java.io.OutputStream) throws java.io.IOException
    {
        com.android.server.BackupManagerService r0;
        android.os.ParcelFileDescriptor r1;
        java.io.OutputStream r2;
        java.io.DataInputStream r3, $r5;
        byte[] r4;
        int i0, i1, i2, $i3;
        java.io.FileInputStream $r6;
        java.io.FileDescriptor $r7;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r2 := @parameter1: java.io.OutputStream;

        $r5 = new java.io.DataInputStream;

        $r6 = new java.io.FileInputStream;

        $r7 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r7);

        specialinvoke $r5.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r6);

        r3 = $r5;

        r4 = newarray (byte)[32768];

     label1:
        i0 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();

        if i0 <= 0 goto label5;

     label2:
        if i0 <= 0 goto label1;

        $i3 = lengthof r4;

        if i0 <= $i3 goto label4;

        i1 = lengthof r4;

     label3:
        i2 = virtualinvoke r3.<java.io.DataInputStream: int read(byte[],int,int)>(r4, 0, i1);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r4, 0, i2);

        i0 = i0 - i2;

        goto label2;

     label4:
        i1 = i0;

        goto label3;

     label5:
        return;
    }

    private boolean signaturesMatch(android.content.pm.Signature[], android.content.pm.PackageInfo)
    {
        com.android.server.BackupManagerService r0;
        android.content.pm.Signature[] r1, r3;
        android.content.pm.PackageInfo r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        boolean z0, $z1;
        android.content.pm.ApplicationInfo $r4;
        android.content.pm.Signature $r5, $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r12;
        java.lang.String $r10, $r11;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: android.content.pm.Signature[];

        r2 := @parameter1: android.content.pm.PackageInfo;

        $r4 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r4.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = 1 & $i4;

        if $i5 == 0 goto label02;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System app ");

        $r10 = r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - skipping sig check");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

     label01:
        return 1;

     label02:
        r3 = r2.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        if r1 == null goto label03;

        $i7 = lengthof r1;

        if $i7 != 0 goto label04;

     label03:
        if r3 == null goto label01;

        $i6 = lengthof r3;

        if $i6 == 0 goto label01;

     label04:
        if r1 == null goto label05;

        if r3 != null goto label06;

     label05:
        return 0;

     label06:
        i0 = lengthof r1;

        i1 = lengthof r3;

        i2 = 0;

     label07:
        if i2 >= i0 goto label01;

        i3 = 0;

     label08:
        z0 = 0;

        if i3 >= i1 goto label09;

        $r6 = r1[i2];

        $r5 = r3[i3];

        $z1 = virtualinvoke $r6.<android.content.pm.Signature: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label10;

        z0 = 1;

     label09:
        if z0 != 0 goto label11;

        return 0;

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        i2 = i2 + 1;

        goto label07;
    }

    private void startBackupAlarmsLocked(long)
    {
        com.android.server.BackupManagerService r0;
        long l0, l1, $l2, $l3, $l5, $l7, $l8;
        java.util.Random r1, $r2;
        int $i4, $i6;
        android.app.AlarmManager $r3;
        android.app.PendingIntent $r4;

        r0 := @this: com.android.server.BackupManagerService;

        l0 := @parameter0: long;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>()>();

        r1 = $r2;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = l0 + $l2;

        $i4 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(300000);

        $l5 = (long) $i4;

        l1 = $l3 + $l5;

        $r3 = r0.<com.android.server.BackupManagerService: android.app.AlarmManager mAlarmManager>;

        $i6 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(300000);

        $l7 = (long) $i6;

        $l8 = 3600000L + $l7;

        $r4 = r0.<com.android.server.BackupManagerService: android.app.PendingIntent mRunBackupIntent>;

        virtualinvoke $r3.<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>(0, l1, $l8, $r4);

        r0.<com.android.server.BackupManagerService: long mNextBackupPass> = l1;

        return;
    }

    private void writeToJournalLocked(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, $r21;
        java.io.RandomAccessFile r2, r7, $r10;
        java.lang.Throwable r3, $r15, $r25;
        java.io.IOException r5, $r14, $r16, $r17, $r23, $r24;
        java.io.File $r9, $r11, $r12, $r13;
        long $l0;
        java.lang.StringBuilder $r18, $r19, $r20, $r22;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 = null;

     label01:
        $r9 = r0.<com.android.server.BackupManagerService: java.io.File mJournal>;

        if $r9 != null goto label02;

        $r12 = r0.<com.android.server.BackupManagerService: java.io.File mJournalDir>;

        $r13 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("journal", null, $r12);

        r0.<com.android.server.BackupManagerService: java.io.File mJournal> = $r13;

     label02:
        $r10 = new java.io.RandomAccessFile;

        $r11 = r0.<com.android.server.BackupManagerService: java.io.File mJournal>;

        specialinvoke $r10.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r11, "rws");

        r7 = $r10;

     label03:
        $l0 = virtualinvoke r7.<java.io.RandomAccessFile: long length()>();

        virtualinvoke r7.<java.io.RandomAccessFile: void seek(long)>($l0);

        virtualinvoke r7.<java.io.RandomAccessFile: void writeUTF(java.lang.String)>(r1);

     label04:
        if r7 == null goto label06;

     label05:
        virtualinvoke r7.<java.io.RandomAccessFile: void close()>();

     label06:
        return;

     label07:
        $r16 := @caughtexception;

        r5 = $r16;

     label08:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t write ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to backup journal");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r21, r5);

        r0.<com.android.server.BackupManagerService: java.io.File mJournal> = null;

     label09:
        if r2 == null goto label06;

     label10:
        virtualinvoke r2.<java.io.RandomAccessFile: void close()>();

     label11:
        return;

     label12:
        $r24 := @caughtexception;

        return;

     label13:
        $r25 := @caughtexception;

        r3 = $r25;

     label14:
        if r2 == null goto label16;

     label15:
        virtualinvoke r2.<java.io.RandomAccessFile: void close()>();

     label16:
        throw r3;

     label17:
        $r17 := @caughtexception;

        goto label16;

     label18:
        $r14 := @caughtexception;

        goto label06;

     label19:
        $r15 := @caughtexception;

        r3 = $r15;

        r2 = r7;

        goto label14;

     label20:
        $r23 := @caughtexception;

        r5 = $r23;

        r2 = r7;

        goto label08;

        catch java.io.IOException from label01 to label02 with label07;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.io.IOException from label02 to label03 with label07;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.io.IOException from label03 to label04 with label20;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.io.IOException from label05 to label06 with label18;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label15 to label16 with label17;
    }

    public void acknowledgeFullBackupOrRestore(int, boolean, java.lang.String, java.lang.String, android.app.backup.IFullBackupRestoreObserver)
    {
        com.android.server.BackupManagerService r0;
        int i0, $i5;
        boolean z0, z1, $z2;
        java.lang.String r1, r2, $r14, $r27;
        android.app.backup.IFullBackupRestoreObserver r3;
        long l1;
        java.lang.Throwable r4, r6, $r29, $r31;
        android.util.SparseArray r5, $r18, $r20;
        com.android.server.BackupManagerService$FullParams r7;
        byte b2;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r15, $r22, $r23, $r24;
        android.os.Message r10;
        android.content.Context $r16;
        java.lang.Object $r17;
        com.android.server.BackupManagerService$BackupHandler $r19, $r26, $r28;
        android.os.storage.IMountService $r21;
        android.os.PowerManager$WakeLock $r25;
        android.os.RemoteException $r30;

        r0 := @this: com.android.server.BackupManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: android.app.backup.IFullBackupRestoreObserver;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("acknowledgeFullBackupOrRestore : token=");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" allow=");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r14);

        $r16 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r16.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "acknowledgeFullBackupOrRestore");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r5 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        entermonitor r5;

     label02:
        $r18 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        $r17 = virtualinvoke $r18.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r7 = (com.android.server.BackupManagerService$FullParams) $r17;

     label03:
        if r7 == null goto label28;

     label04:
        $r19 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r19.<com.android.server.BackupManagerService$BackupHandler: void removeMessages(int,java.lang.Object)>(9, r7);

        $r20 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        virtualinvoke $r20.<android.util.SparseArray: void delete(int)>(i0);

     label05:
        if z0 == 0 goto label22;

     label06:
        $z2 = r7 instanceof com.android.server.BackupManagerService$FullBackupParams;

        if $z2 == 0 goto label17;

     label07:
        b2 = 2;

     label08:
        r7.<com.android.server.BackupManagerService$FullParams: android.app.backup.IFullBackupRestoreObserver observer> = r3;

        r7.<com.android.server.BackupManagerService$FullParams: java.lang.String curPassword> = r1;

     label09:
        $r21 = r0.<com.android.server.BackupManagerService: android.os.storage.IMountService mMountService>;

        $i5 = interfaceinvoke $r21.<android.os.storage.IMountService: int getEncryptionState()>();

        if $i5 == 1 goto label18;

     label10:
        z1 = 1;

     label11:
        if z1 == 0 goto label13;

     label12:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Device is encrypted; forcing enc password");

     label13:
        if z1 == 0 goto label30;

     label14:
        r7.<com.android.server.BackupManagerService$FullParams: java.lang.String encryptPassword> = r1;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending conf message with verb ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b2);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r27);

        $r25 = r0.<com.android.server.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r25.<android.os.PowerManager$WakeLock: void acquire()>();

        $r26 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        r10 = virtualinvoke $r26.<com.android.server.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(b2, r7);

        $r28 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r28.<com.android.server.BackupManagerService$BackupHandler: boolean sendMessage(android.os.Message)>(r10);

     label15:
        exitmonitor r5;

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label17:
        b2 = 10;

        goto label08;

     label18:
        z1 = 0;

        goto label11;

     label19:
        $r30 := @caughtexception;

     label20:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to contact mount service!");

     label21:
        z1 = 1;

        goto label13;

     label22:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "User rejected full backup/restore operation");

        virtualinvoke r0.<com.android.server.BackupManagerService: void signalFullBackupRestoreCompletion(com.android.server.BackupManagerService$FullParams)>(r7);

     label23:
        goto label15;

     label24:
        $r29 := @caughtexception;

        r6 = $r29;

     label25:
        exitmonitor r5;

     label26:
        throw r6;

     label27:
        $r31 := @caughtexception;

        r4 = $r31;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

     label28:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Attempted to ack full backup/restore with invalid token");

     label29:
        goto label15;

     label30:
        r1 = r2;

        goto label14;

        catch java.lang.Throwable from label01 to label02 with label27;
        catch java.lang.Throwable from label02 to label03 with label24;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.lang.Throwable from label06 to label07 with label24;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch android.os.RemoteException from label09 to label10 with label19;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch android.os.RemoteException from label12 to label13 with label19;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label14 to label15 with label24;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
        catch java.lang.Throwable from label26 to label27 with label27;
        catch java.lang.Throwable from label28 to label29 with label24;
    }

    void addBackupTrace(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        java.util.List r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.BackupManagerService: java.util.List mBackupTrace>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.BackupManagerService: java.util.List mBackupTrace>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void addPackageParticipantsLocked(java.lang.String[])
    {
        com.android.server.BackupManagerService r0;
        java.lang.String[] r1;
        java.util.List r2;
        int i0, i1, $i3;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6, $r7;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String[];

        r2 = virtualinvoke r0.<com.android.server.BackupManagerService: java.util.List allAgentPackages()>();

        if r1 == null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addPackageParticipantsLocked: #");

        $i3 = lengthof r1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r6);

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r7 = r1[i1];

        specialinvoke r0.<com.android.server.BackupManagerService: void addPackageParticipantsLockedInner(java.lang.String,java.util.List)>($r7, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "addPackageParticipantsLocked: all");

        specialinvoke r0.<com.android.server.BackupManagerService: void addPackageParticipantsLockedInner(java.lang.String,java.util.List)>(null, r2);

     label3:
        return;
    }

    public void agentConnected(java.lang.String, android.os.IBinder)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, $r9, $r15;
        android.os.IBinder r2;
        java.lang.Object r3, $r10;
        java.lang.Throwable r4, $r18;
        int $i0, $i1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r16;
        android.app.IBackupAgent $r17;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.IBinder;

        r3 = r0.<com.android.server.BackupManagerService: java.lang.Object mAgentConnectLock>;

        entermonitor r3;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label4;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("agentConnected pkg=");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" agent=");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r15);

        $r17 = staticinvoke <android.app.IBackupAgent$Stub: android.app.IBackupAgent asInterface(android.os.IBinder)>(r2);

        r0.<com.android.server.BackupManagerService: android.app.IBackupAgent mConnectedAgent> = $r17;

        r0.<com.android.server.BackupManagerService: boolean mConnecting> = 0;

     label2:
        $r10 = r0.<com.android.server.BackupManagerService: java.lang.Object mAgentConnectLock>;

        virtualinvoke $r10.<java.lang.Object: void notifyAll()>();

        exitmonitor r3;

     label3:
        return;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system process uid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" claiming agent connected");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r9);

     label5:
        goto label2;

     label6:
        $r18 := @caughtexception;

        r4 = $r18;

     label7:
        exitmonitor r3;

     label8:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void agentDisconnected(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, $r8;
        java.lang.Object r2, $r9;
        java.lang.Throwable r3, $r10;
        int $i0, $i1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.BackupManagerService: java.lang.Object mAgentConnectLock>;

        entermonitor r2;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label4;

        r0.<com.android.server.BackupManagerService: android.app.IBackupAgent mConnectedAgent> = null;

        r0.<com.android.server.BackupManagerService: boolean mConnecting> = 0;

     label2:
        $r9 = r0.<com.android.server.BackupManagerService: java.lang.Object mAgentConnectLock>;

        virtualinvoke $r9.<java.lang.Object: void notifyAll()>();

        exitmonitor r2;

     label3:
        return;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system process uid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" claiming agent disconnected");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r8);

     label5:
        goto label2;

     label6:
        $r10 := @caughtexception;

        r3 = $r10;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    java.util.List allAgentPackages()
    {
        com.android.server.BackupManagerService r0;
        java.util.List r1;
        int i0, $i1, $i2, $i3;
        android.content.pm.PackageInfo r2;
        android.content.pm.ApplicationInfo r4, r5, $r14;
        android.content.pm.PackageManager $r6, $r10;
        java.lang.Object $r7;
        java.lang.String $r8, $r11;
        java.lang.String[] $r12;
        android.content.pm.PackageManager$NameNotFoundException $r13;

        r0 := @this: com.android.server.BackupManagerService;

        $r6 = r0.<com.android.server.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        r1 = virtualinvoke $r6.<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>(64);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i0 = -1 + $i1;

     label1:
        if i0 < 0 goto label8;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (android.content.pm.PackageInfo) $r7;

     label2:
        r4 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = r4.<android.content.pm.ApplicationInfo: int flags>;

        $i3 = 32768 & $i2;

        if $i3 == 0 goto label3;

        $r8 = r4.<android.content.pm.ApplicationInfo: java.lang.String backupAgentName>;

        if $r8 != null goto label5;

     label3:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i0);

     label4:
        goto label9;

     label5:
        $r10 = r0.<com.android.server.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $r11 = r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        r5 = virtualinvoke $r10.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r11, 1024);

        $r14 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r12 = r5.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        $r14.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles> = $r12;

     label6:
        goto label9;

     label7:
        $r13 := @caughtexception;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i0);

        goto label9;

     label8:
        return r1;

     label9:
        i0 = i0 + -1;

        goto label1;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label7;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label7;
        catch android.content.pm.PackageManager$NameNotFoundException from label5 to label6 with label7;
    }

    public void backupNow()
    {
        com.android.server.BackupManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r6;
        android.content.Context $r4;
        android.app.PendingIntent $r5;
        android.app.PendingIntent$CanceledException $r7;

        r0 := @this: com.android.server.BackupManagerService;

        $r4 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "backupNow");

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "Scheduling immediate backup pass");

        r1 = r0.<com.android.server.BackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<com.android.server.BackupManagerService: void startBackupAlarmsLocked(long)>(3600000L);

     label02:
        $r5 = r0.<com.android.server.BackupManagerService: android.app.PendingIntent mRunBackupIntent>;

        virtualinvoke $r5.<android.app.PendingIntent: void send()>();

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r7 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "run-backup intent cancelled!");

     label07:
        goto label03;

     label08:
        $r6 := @caughtexception;

        r2 = $r6;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.app.PendingIntent$CanceledException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.app.backup.IRestoreSession beginRestoreSession(java.lang.String, java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r2, $r11, $r23, $r28;
        boolean z0;
        java.lang.Throwable r3, $r21;
        android.content.pm.PackageInfo r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r22, $r24, $r26, $r29, $r30, r31, r32, r33;
        com.android.server.BackupManagerService$ActiveRestoreSession $r13, $r15, r35;
        com.android.server.BackupManagerService$BackupHandler $r14;
        android.content.pm.PackageManager $r16;
        android.content.Context $r17;
        int $i3, $i4;
        android.content.pm.ApplicationInfo $r18;
        android.content.pm.PackageManager$NameNotFoundException $r19;
        java.lang.IllegalArgumentException r34;
        android.app.backup.IRestoreSession r36;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("beginRestoreSession: pkg=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transport=");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        z0 = 1;

        if r2 != null goto label03;

        r2 = r0.<com.android.server.BackupManagerService: java.lang.String mCurrentTransport>;

        if r1 == null goto label03;

     label01:
        $r16 = r0.<com.android.server.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        r5 = virtualinvoke $r16.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r1, 0);

     label02:
        $r18 = r5.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r18.<android.content.pm.ApplicationInfo: int uid>;

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i3 != $i4 goto label03;

        z0 = 0;

     label03:
        if z0 == 0 goto label08;

        $r17 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r17.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "beginRestoreSession");

     label04:
        entermonitor r0;

     label05:
        $r13 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$ActiveRestoreSession mActiveRestoreSession>;

        if $r13 == null goto label09;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Restore session requested but one already active");

        exitmonitor r0;

     label06:
        return null;

     label07:
        $r19 := @caughtexception;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asked to restore nonexistent pkg ");

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r23);

        r34 = new java.lang.IllegalArgumentException;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw r34;

     label08:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "restoring self on current transport; no permission needed");

        goto label04;

     label09:
        r35 = new com.android.server.BackupManagerService$ActiveRestoreSession;

        specialinvoke r35.<com.android.server.BackupManagerService$ActiveRestoreSession: void <init>(com.android.server.BackupManagerService,java.lang.String,java.lang.String)>(r0, r1, r2);

        r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$ActiveRestoreSession mActiveRestoreSession> = r35;

        $r14 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r14.<com.android.server.BackupManagerService$BackupHandler: boolean sendEmptyMessageDelayed(int,long)>(8, 60000L);

        exitmonitor r0;

     label10:
        $r15 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$ActiveRestoreSession mActiveRestoreSession>;

        r36 = (android.app.backup.IRestoreSession) $r15;

        return r36;

     label11:
        $r21 := @caughtexception;

        r3 = $r21;

     label12:
        exitmonitor r0;

     label13:
        throw r3;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label07;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo, int)
    {
        com.android.server.BackupManagerService r0;
        android.content.pm.ApplicationInfo r1;
        int i0;
        java.lang.Object r2, $r25;
        java.lang.Throwable r3, $r29;
        android.app.IBackupAgent r5, $r16, $r22;
        boolean z0, $z1, $z2;
        long l1, l2, $l4;
        java.lang.InterruptedException r6, $r24;
        android.app.IActivityManager $r7, $r19, $r31;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r15, $r17, $r18, $r20, $r23, $r27, $r28;
        java.lang.String $r11, $r14, $r21, $r26;
        byte $b7;
        android.os.RemoteException $r30;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        i0 := @parameter1: int;

        r2 = r0.<com.android.server.BackupManagerService: java.lang.Object mAgentConnectLock>;

        entermonitor r2;

     label01:
        r0.<com.android.server.BackupManagerService: boolean mConnecting> = 1;

        r0.<com.android.server.BackupManagerService: android.app.IBackupAgent mConnectedAgent> = null;

     label02:
        $r7 = r0.<com.android.server.BackupManagerService: android.app.IActivityManager mActivityManager>;

        z0 = interfaceinvoke $r7.<android.app.IActivityManager: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)>(r1, i0);

     label03:
        r5 = null;

        if z0 == 0 goto label20;

     label04:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("awaiting agent for ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = 10000L + $l4;

     label05:
        $z2 = r0.<com.android.server.BackupManagerService: boolean mConnecting>;

        if $z2 == 0 goto label13;

        $r22 = r0.<com.android.server.BackupManagerService: android.app.IBackupAgent mConnectedAgent>;

        if $r22 != null goto label13;

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label06:
        $b7 = l2 cmp l1;

        if $b7 >= 0 goto label13;

     label07:
        $r25 = r0.<com.android.server.BackupManagerService: java.lang.Object mAgentConnectLock>;

        virtualinvoke $r25.<java.lang.Object: void wait(long)>(5000L);

     label08:
        goto label05;

     label09:
        $r24 := @caughtexception;

        r6 = $r24;

     label10:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interrupted: ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r26);

        $r31 = r0.<com.android.server.BackupManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r31.<android.app.IActivityManager: void clearPendingBackup()>();

     label11:
        exitmonitor r2;

     label12:
        return null;

     label13:
        $z1 = r0.<com.android.server.BackupManagerService: boolean mConnecting>;

        if $z1 != 1 goto label19;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout waiting for agent ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r21);

        $r19 = r0.<com.android.server.BackupManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r19.<android.app.IActivityManager: void clearPendingBackup()>();

     label14:
        exitmonitor r2;

     label15:
        return null;

     label16:
        $r29 := @caughtexception;

        r3 = $r29;

     label17:
        exitmonitor r2;

     label18:
        throw r3;

     label19:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got agent ");

        $r16 = r0.<com.android.server.BackupManagerService: android.app.IBackupAgent mConnectedAgent>;

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r14);

        r5 = r0.<com.android.server.BackupManagerService: android.app.IBackupAgent mConnectedAgent>;

     label20:
        exitmonitor r2;

     label21:
        return r5;

     label22:
        $r30 := @caughtexception;

        r5 = null;

        goto label20;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch android.os.RemoteException from label02 to label03 with label22;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch android.os.RemoteException from label04 to label05 with label22;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch android.os.RemoteException from label05 to label06 with label22;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch android.os.RemoteException from label07 to label08 with label22;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch android.os.RemoteException from label10 to label11 with label22;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch android.os.RemoteException from label13 to label14 with label22;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch android.os.RemoteException from label19 to label20 with label22;
        catch java.lang.Throwable from label19 to label20 with label16;
        catch java.lang.Throwable from label20 to label21 with label16;
    }

    void clearApplicationDataSynchronous(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, $r17;
        int i0, $i3;
        com.android.server.BackupManagerService$ClearDataObserver r3, r24;
        java.lang.Object r4, $r14;
        java.lang.Throwable r5, $r20;
        long l1, l2, $l4;
        android.content.pm.PackageManager $r8;
        android.content.pm.PackageInfo $r9;
        android.content.pm.ApplicationInfo $r10;
        android.app.IActivityManager $r12;
        boolean $z1;
        byte $b5;
        android.content.pm.PackageManager$NameNotFoundException $r13;
        java.lang.StringBuilder $r16, $r18, $r19, r23;
        android.os.RemoteException $r21;
        java.lang.InterruptedException $r22;
        android.content.pm.IPackageDataObserver r25;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

     label01:
        $r8 = r0.<com.android.server.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $r9 = virtualinvoke $r8.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r1, 0);

        $r10 = $r9.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i0 = $r10.<android.content.pm.ApplicationInfo: int flags>;

     label02:
        $i3 = i0 & 64;

        if $i3 != 0 goto label04;

        return;

     label03:
        $r13 := @caughtexception;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to clear data for ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but not found");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r17);

        return;

     label04:
        r24 = new com.android.server.BackupManagerService$ClearDataObserver;

        specialinvoke r24.<com.android.server.BackupManagerService$ClearDataObserver: void <init>(com.android.server.BackupManagerService)>(r0);

        r3 = r24;

        r4 = r0.<com.android.server.BackupManagerService: java.lang.Object mClearDataLock>;

        entermonitor r4;

     label05:
        r0.<com.android.server.BackupManagerService: boolean mClearingData> = 1;

     label06:
        $r12 = r0.<com.android.server.BackupManagerService: android.app.IActivityManager mActivityManager>;

        r25 = (android.content.pm.IPackageDataObserver) r3;

        interfaceinvoke $r12.<android.app.IActivityManager: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>(r1, r25, 0);

     label07:
        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = 10000L + $l4;

     label08:
        $z1 = r0.<com.android.server.BackupManagerService: boolean mClearingData>;

        if $z1 == 0 goto label18;

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label09:
        $b5 = l2 cmp l1;

        if $b5 >= 0 goto label18;

     label10:
        $r14 = r0.<com.android.server.BackupManagerService: java.lang.Object mClearDataLock>;

        virtualinvoke $r14.<java.lang.Object: void wait(long)>(5000L);

     label11:
        goto label08;

     label12:
        $r22 := @caughtexception;

     label13:
        r0.<com.android.server.BackupManagerService: boolean mClearingData> = 0;

     label14:
        goto label08;

     label15:
        $r20 := @caughtexception;

        r5 = $r20;

     label16:
        exitmonitor r4;

     label17:
        throw r5;

     label18:
        exitmonitor r4;

     label19:
        return;

     label20:
        $r21 := @caughtexception;

        goto label07;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch android.os.RemoteException from label06 to label07 with label20;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.InterruptedException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label18 to label19 with label15;
    }

    public void clearBackupData(java.lang.String, java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r2, $r17, $r40;
        android.content.pm.PackageInfo r4;
        java.util.HashSet r5, r6, $r20;
        int i0, i1, $i4, $i5, $i6, $i9;
        java.lang.Object r7, $r30, $r36;
        java.lang.Throwable r8, $r37;
        android.os.Message r9, r11;
        com.android.internal.backup.IBackupTransport r10;
        long l2;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r33, $r34, $r38, $r39;
        android.content.pm.PackageManager $r18;
        android.content.Context $r19;
        android.util.SparseArray $r21, $r31, $r35;
        com.android.server.BackupManagerService$BackupHandler $r22, $r24, $r27, $r28, $r29;
        boolean $z0;
        android.os.PowerManager$WakeLock $r23;
        com.android.server.BackupManagerService$ClearParams $r25;
        com.android.server.BackupManagerService$ClearRetryParams $r26;
        android.content.pm.PackageManager$NameNotFoundException $r32;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clearBackupData() of ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r17);

     label01:
        $r18 = r0.<com.android.server.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        r4 = virtualinvoke $r18.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r2, 64);

     label02:
        $r19 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i6 = virtualinvoke $r19.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.BACKUP", $i4, $i5);

        if $i6 != -1 goto label09;

        $r35 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $i9 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r36 = virtualinvoke $r35.<android.util.SparseArray: java.lang.Object get(int)>($i9);

        r5 = (java.util.HashSet) $r36;

     label03:
        $z0 = virtualinvoke r5.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label07;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "Found the app - running clear process");

        $r22 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r22.<com.android.server.BackupManagerService$BackupHandler: void removeMessages(int)>(12);

        r7 = r0.<com.android.server.BackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r7;

     label04:
        r10 = specialinvoke r0.<com.android.server.BackupManagerService: com.android.internal.backup.IBackupTransport getTransport(java.lang.String)>(r1);

     label05:
        if r10 != null goto label12;

     label06:
        $r29 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        $r26 = new com.android.server.BackupManagerService$ClearRetryParams;

        specialinvoke $r26.<com.android.server.BackupManagerService$ClearRetryParams: void <init>(com.android.server.BackupManagerService,java.lang.String,java.lang.String)>(r0, r1, r2);

        r9 = virtualinvoke $r29.<com.android.server.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(12, $r26);

        $r28 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r28.<com.android.server.BackupManagerService$BackupHandler: boolean sendMessageDelayed(android.os.Message,long)>(r9, 3600000L);

        exitmonitor r7;

     label07:
        return;

     label08:
        $r32 := @caughtexception;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such package \'");

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' - not clearing backup data");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r40);

        return;

     label09:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "Privileged caller, allowing clear of other apps");

        $r20 = new java.util.HashSet;

        specialinvoke $r20.<java.util.HashSet: void <init>()>();

        r5 = $r20;

        $r21 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        i0 = virtualinvoke $r21.<android.util.SparseArray: int size()>();

        i1 = 0;

     label10:
        if i1 >= i0 goto label03;

        $r31 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r30 = virtualinvoke $r31.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r6 = (java.util.HashSet) $r30;

        if r6 == null goto label11;

        virtualinvoke r5.<java.util.HashSet: boolean addAll(java.util.Collection)>(r6);

     label11:
        i1 = i1 + 1;

        goto label10;

     label12:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r23 = r0.<com.android.server.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r23.<android.os.PowerManager$WakeLock: void acquire()>();

        $r24 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        $r25 = new com.android.server.BackupManagerService$ClearParams;

        specialinvoke $r25.<com.android.server.BackupManagerService$ClearParams: void <init>(com.android.server.BackupManagerService,com.android.internal.backup.IBackupTransport,android.content.pm.PackageInfo)>(r0, r10, r4);

        r11 = virtualinvoke $r24.<com.android.server.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(4, $r25);

        $r27 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r27.<com.android.server.BackupManagerService$BackupHandler: boolean sendMessage(android.os.Message)>(r11);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r7;

     label13:
        return;

     label14:
        $r37 := @caughtexception;

        r8 = $r37;

     label15:
        exitmonitor r7;

     label16:
        throw r8;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    void clearBackupTrace()
    {
        com.android.server.BackupManagerService r0;
        java.util.List r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.BackupManagerService;

        r1 = r0.<com.android.server.BackupManagerService: java.util.List mBackupTrace>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.BackupManagerService: java.util.List mBackupTrace>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void clearRestoreSession(com.android.server.BackupManagerService$ActiveRestoreSession)
    {
        com.android.server.BackupManagerService r0;
        com.android.server.BackupManagerService$ActiveRestoreSession r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.server.BackupManagerService$BackupHandler $r4;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: com.android.server.BackupManagerService$ActiveRestoreSession;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$ActiveRestoreSession mActiveRestoreSession>;

        if r1 == $r3 goto label4;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "ending non-current restore session");

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "Clearing restore session and halting timeout");

        r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$ActiveRestoreSession mActiveRestoreSession> = null;

        $r4 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r4.<com.android.server.BackupManagerService$BackupHandler: void removeMessages(int)>(8);

     label5:
        goto label2;

     label6:
        $r5 := @caughtexception;

        r2 = $r5;

     label7:
        exitmonitor r0;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void dataChanged(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, $r11;
        java.util.HashSet r2;
        int $i0, $i1;
        com.android.server.BackupManagerService$2 $r3;
        com.android.server.BackupManagerService$BackupHandler $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i0 == 0 goto label1;

        return;

     label1:
        r2 = specialinvoke r0.<com.android.server.BackupManagerService: java.util.HashSet dataChangedTargets(java.lang.String)>(r1);

        if r2 != null goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataChanged but no participant pkg=\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        return;

     label2:
        $r4 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        $r3 = new com.android.server.BackupManagerService$2;

        specialinvoke $r3.<com.android.server.BackupManagerService$2: void <init>(com.android.server.BackupManagerService,java.lang.String,java.util.HashSet)>(r0, r1, r2);

        virtualinvoke $r4.<com.android.server.BackupManagerService$BackupHandler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    boolean deviceIsProvisioned()
    {
        com.android.server.BackupManagerService r0;
        int i0;
        boolean z0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;

        r0 := @this: com.android.server.BackupManagerService;

        $r1 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "device_provisioned", 0);

        z0 = 0;

        if i0 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.BackupManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        long l0;
        java.lang.Throwable r4, $r6;
        android.content.Context $r5;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r5 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "BackupManagerService");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.BackupManagerService: void dumpInternal(java.io.PrintWriter)>(r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void fullBackup(android.os.ParcelFileDescriptor, boolean, boolean, boolean, boolean, boolean, java.lang.String[])
    {
        com.android.server.BackupManagerService r0;
        android.os.ParcelFileDescriptor r1;
        boolean z0, z1, z2, z3, z4, $z5, $z6;
        java.lang.String[] r2;
        long l0, $l8;
        java.lang.Throwable r3, r7, $r35, $r41;
        com.android.server.BackupManagerService$FullBackupParams r5, $r27;
        android.util.SparseArray r6, $r26, $r36;
        int i1, $i2, $i9;
        java.lang.String r9, r10, $r25, $r30;
        android.content.Context $r12;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r28, $r29, $r31;
        android.os.PowerManager $r32;
        java.lang.IllegalStateException $r33;
        java.io.IOException $r34, $r38, $r39, $r40;
        java.lang.IllegalArgumentException $r37;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        z3 := @parameter4: boolean;

        z4 := @parameter5: boolean;

        r2 := @parameter6: java.lang.String[];

        $r12 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r12.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "fullBackup");

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i2 == 0 goto label01;

        $r33 = new java.lang.IllegalStateException;

        specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Backup supported only for the device owner");

        throw $r33;

     label01:
        if z3 != 0 goto label03;

        if z2 != 0 goto label03;

        if r2 == null goto label02;

        $i9 = lengthof r2;

        if $i9 != 0 goto label03;

     label02:
        $r37 = new java.lang.IllegalArgumentException;

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Backup requested but neither shared nor any apps named");

        throw $r37;

     label03:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $z5 = virtualinvoke r0.<com.android.server.BackupManagerService: boolean deviceIsProvisioned()>();

        if $z5 != 0 goto label08;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup not supported before setup");

     label05:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        r10 = "BackupManagerService";

        r9 = "Full backup processing complete.";

     label07:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r10, r9);

        return;

     label08:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requesting full backup: apks=");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" obb=");

        $r16 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shared=");

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" all=");

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pkgs=");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r25);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Beginning full backup...");

        $r27 = new com.android.server.BackupManagerService$FullBackupParams;

        specialinvoke $r27.<com.android.server.BackupManagerService$FullBackupParams: void <init>(com.android.server.BackupManagerService,android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>(r0, r1, z0, z1, z2, z3, z4, r2);

        r5 = $r27;

        i1 = virtualinvoke r0.<com.android.server.BackupManagerService: int generateToken()>();

        r6 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        entermonitor r6;

     label09:
        $r26 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        virtualinvoke $r26.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r5);

        exitmonitor r6;

     label10:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting backup confirmation UI, token=");

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r30);

        $z6 = virtualinvoke r0.<com.android.server.BackupManagerService: boolean startConfirmationUi(int,java.lang.String)>(i1, "fullback");

        if $z6 != 0 goto label19;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to launch full backup confirmation");

        $r36 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        virtualinvoke $r36.<android.util.SparseArray: void delete(int)>(i1);

     label11:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        r10 = "BackupManagerService";

        r9 = "Full backup processing complete.";

        goto label07;

     label13:
        $r35 := @caughtexception;

        r7 = $r35;

     label14:
        exitmonitor r6;

     label15:
        throw r7;

     label16:
        $r41 := @caughtexception;

        r3 = $r41;

     label17:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup processing complete.");

        throw r3;

     label19:
        $r32 = r0.<com.android.server.BackupManagerService: android.os.PowerManager mPowerManager>;

        $l8 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r32.<android.os.PowerManager: void userActivity(long,boolean)>($l8, 0);

        virtualinvoke r0.<com.android.server.BackupManagerService: void startConfirmationTimeout(int,com.android.server.BackupManagerService$FullParams)>(i1, r5);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Waiting for full backup completion...");

        virtualinvoke r0.<com.android.server.BackupManagerService: void waitForCompletion(com.android.server.BackupManagerService$FullParams)>(r5);

     label20:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        r10 = "BackupManagerService";

        r9 = "Full backup processing complete.";

        goto label07;

     label22:
        $r40 := @caughtexception;

        goto label18;

     label23:
        $r34 := @caughtexception;

        goto label06;

     label24:
        $r38 := @caughtexception;

        goto label12;

     label25:
        $r39 := @caughtexception;

        goto label21;

        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.io.IOException from label05 to label06 with label23;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.io.IOException from label11 to label12 with label24;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.io.IOException from label17 to label18 with label22;
        catch java.lang.Throwable from label19 to label20 with label16;
        catch java.io.IOException from label20 to label21 with label25;
    }

    public void fullRestore(android.os.ParcelFileDescriptor)
    {
        com.android.server.BackupManagerService r0;
        android.os.ParcelFileDescriptor r1;
        long l0, $l4;
        java.lang.Throwable r2, r6, $r35, $r43;
        java.io.IOException r3, r7, r10, r12, $r22, $r28, $r36, $r41;
        com.android.server.BackupManagerService$FullRestoreParams r4, $r13;
        int i1, $i2;
        android.util.SparseArray r5, $r15, $r20;
        java.lang.String r8, r9, $r17, $r24, $r29, $r34, $r40;
        android.content.Context $r11;
        boolean $z0, $z1;
        java.lang.StringBuilder $r14, $r16, $r18, $r21, $r25, $r26, $r27, $r30, $r31, $r32, $r33, $r37, $r38, $r39, $r42;
        android.os.PowerManager $r19;
        java.lang.IllegalStateException $r23;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        $r11 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "fullRestore");

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i2 == 0 goto label01;

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Restore supported only for the device owner");

        throw $r23;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $z0 = virtualinvoke r0.<com.android.server.BackupManagerService: boolean deviceIsProvisioned()>();

        if $z0 != 0 goto label06;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Full restore not permitted before setup");

     label03:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        r8 = "BackupManagerService";

        r9 = "Full restore processing complete.";

     label05:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r8, r9);

        return;

     label06:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Beginning full restore...");

        $r13 = new com.android.server.BackupManagerService$FullRestoreParams;

        specialinvoke $r13.<com.android.server.BackupManagerService$FullRestoreParams: void <init>(com.android.server.BackupManagerService,android.os.ParcelFileDescriptor)>(r0, r1);

        r4 = $r13;

        i1 = virtualinvoke r0.<com.android.server.BackupManagerService: int generateToken()>();

        r5 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        entermonitor r5;

     label07:
        $r15 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r4);

        exitmonitor r5;

     label08:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting restore confirmation UI, token=");

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r17);

        $z1 = virtualinvoke r0.<com.android.server.BackupManagerService: boolean startConfirmationUi(int,java.lang.String)>(i1, "fullrest");

        if $z1 != 0 goto label17;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to launch full restore confirmation");

        $r20 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        virtualinvoke $r20.<android.util.SparseArray: void delete(int)>(i1);

     label09:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        r8 = "BackupManagerService";

        r9 = "Full restore processing complete.";

        goto label05;

     label11:
        $r43 := @caughtexception;

        r6 = $r43;

     label12:
        exitmonitor r5;

     label13:
        throw r6;

     label14:
        $r35 := @caughtexception;

        r2 = $r35;

     label15:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Full restore processing complete.");

        throw r2;

     label17:
        $r19 = r0.<com.android.server.BackupManagerService: android.os.PowerManager mPowerManager>;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r19.<android.os.PowerManager: void userActivity(long,boolean)>($l4, 0);

        virtualinvoke r0.<com.android.server.BackupManagerService: void startConfirmationTimeout(int,com.android.server.BackupManagerService$FullParams)>(i1, r4);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Waiting for full restore completion...");

        virtualinvoke r0.<com.android.server.BackupManagerService: void waitForCompletion(com.android.server.BackupManagerService$FullParams)>(r4);

     label18:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        r8 = "BackupManagerService";

        r9 = "Full restore processing complete.";

        goto label05;

     label20:
        $r41 := @caughtexception;

        r3 = $r41;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after full restore: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r40);

        goto label16;

     label21:
        $r22 := @caughtexception;

        r12 = $r22;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after full restore: ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r24);

        goto label04;

     label22:
        $r28 := @caughtexception;

        r10 = $r28;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after full restore: ");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r29);

        goto label10;

     label23:
        $r36 := @caughtexception;

        r7 = $r36;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after full restore: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r34);

        goto label19;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.io.IOException from label03 to label04 with label21;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.io.IOException from label09 to label10 with label22;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.io.IOException from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label14;
        catch java.io.IOException from label18 to label19 with label23;
    }

    int generateToken()
    {
        com.android.server.BackupManagerService r0;
        java.util.Random r1, $r3;
        java.lang.Throwable r2, $r4;
        int i0;

        r0 := @this: com.android.server.BackupManagerService;

     label1:
        r1 = r0.<com.android.server.BackupManagerService: java.util.Random mTokenGenerator>;

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.server.BackupManagerService: java.util.Random mTokenGenerator>;

        i0 = virtualinvoke $r3.<java.util.Random: int nextInt()>();

        exitmonitor r1;

     label3:
        if i0 < 0 goto label1;

        return i0;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    long getAvailableRestoreToken(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        long l0;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;
        java.util.HashSet $r4;
        boolean $z0;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        l0 = r0.<com.android.server.BackupManagerService: long mAncestralToken>;

        r2 = r0.<com.android.server.BackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps>;

        $z0 = virtualinvoke $r4.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        l0 = r0.<com.android.server.BackupManagerService: long mCurrentToken>;

     label2:
        exitmonitor r2;

     label3:
        return l0;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.content.Intent getConfigurationIntent(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1;
        java.util.HashMap r2, $r8;
        java.lang.Throwable r3, $r11;
        com.android.internal.backup.IBackupTransport r4;
        android.content.Intent r6;
        android.content.Context $r7;
        java.lang.Object $r9;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r7 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getConfigurationIntent");

        r2 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        entermonitor r2;

     label01:
        $r8 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.internal.backup.IBackupTransport) $r9;

     label02:
        if r4 == null goto label06;

     label03:
        r6 = interfaceinvoke r4.<com.android.internal.backup.IBackupTransport: android.content.Intent configurationIntent()>();

     label04:
        exitmonitor r2;

     label05:
        return r6;

     label06:
        exitmonitor r2;

     label07:
        return null;

     label08:
        $r11 := @caughtexception;

        r3 = $r11;

     label09:
        exitmonitor r2;

     label10:
        throw r3;

     label11:
        $r10 := @caughtexception;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label03 to label04 with label11;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.lang.String getCurrentTransport()
    {
        com.android.server.BackupManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.BackupManagerService;

        $r1 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getCurrentTransport");

        $r2 = r0.<com.android.server.BackupManagerService: java.lang.String mCurrentTransport>;

        return $r2;
    }

    public java.lang.String getDestinationString(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r6;
        java.util.HashMap r2, $r8;
        java.lang.Throwable r3, $r10;
        com.android.internal.backup.IBackupTransport r4;
        android.content.Context $r7;
        java.lang.Object $r9;
        android.os.RemoteException $r11;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r7 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getDestinationString");

        r2 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        entermonitor r2;

     label01:
        $r8 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.internal.backup.IBackupTransport) $r9;

     label02:
        if r4 == null goto label06;

     label03:
        r6 = interfaceinvoke r4.<com.android.internal.backup.IBackupTransport: java.lang.String currentDestinationString()>();

     label04:
        exitmonitor r2;

     label05:
        return r6;

     label06:
        exitmonitor r2;

     label07:
        return null;

     label08:
        $r10 := @caughtexception;

        r3 = $r10;

     label09:
        exitmonitor r2;

     label10:
        throw r3;

     label11:
        $r11 := @caughtexception;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label03 to label04 with label11;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void handleTimeout(int, java.lang.Object)
    {
        com.android.server.BackupManagerService r0;
        int i0, i1;
        java.lang.Object r1, r2, $r6, $r7;
        java.lang.Throwable r3, $r16;
        com.android.server.BackupManagerService$Operation r4;
        android.util.SparseArray $r5, $r15;
        com.android.server.BackupManagerService$BackupRestoreTask $r8, $r9;
        java.lang.StringBuilder $r10, $r12, $r14;
        java.lang.String $r11, $r13;

        r0 := @this: com.android.server.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 = -1;

        r2 = r0.<com.android.server.BackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r2;

     label01:
        $r5 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.BackupManagerService$Operation) $r6;

     label02:
        if r4 == null goto label04;

     label03:
        i1 = r4.<com.android.server.BackupManagerService$Operation: int state>;

     label04:
        if i1 != 0 goto label06;

     label05:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TIMEOUT: token=");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r13);

        r4.<com.android.server.BackupManagerService$Operation: int state> = -1;

        $r15 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4);

     label06:
        $r7 = r0.<com.android.server.BackupManagerService: java.lang.Object mCurrentOpLock>;

        virtualinvoke $r7.<java.lang.Object: void notifyAll()>();

        exitmonitor r2;

     label07:
        if r4 == null goto label08;

        $r8 = r4.<com.android.server.BackupManagerService$Operation: com.android.server.BackupManagerService$BackupRestoreTask callback>;

        if $r8 == null goto label08;

        $r9 = r4.<com.android.server.BackupManagerService$Operation: com.android.server.BackupManagerService$BackupRestoreTask callback>;

        interfaceinvoke $r9.<com.android.server.BackupManagerService$BackupRestoreTask: void handleTimeout()>();

     label08:
        return;

     label09:
        $r16 := @caughtexception;

        r3 = $r16;

     label10:
        exitmonitor r2;

     label11:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean hasBackupPassword()
    {
        com.android.server.BackupManagerService r0;
        int i0, $i1;
        android.content.Context $r2;
        android.os.storage.IMountService $r3;
        java.lang.String $r4, $r5;
        java.lang.Exception $r6;

        r0 := @this: com.android.server.BackupManagerService;

        $r2 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "hasBackupPassword");

     label1:
        $r3 = r0.<com.android.server.BackupManagerService: android.os.storage.IMountService mMountService>;

        $i1 = interfaceinvoke $r3.<android.os.storage.IMountService: int getEncryptionState()>();

        if $i1 != 1 goto label3;

        $r4 = r0.<com.android.server.BackupManagerService: java.lang.String mPasswordHash>;

        if $r4 == null goto label4;

        $r5 = r0.<com.android.server.BackupManagerService: java.lang.String mPasswordHash>;

        i0 = virtualinvoke $r5.<java.lang.String: int length()>();

     label2:
        if i0 <= 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;

     label5:
        $r6 := @caughtexception;

        return 1;

        catch java.lang.Exception from label1 to label2 with label5;
    }

    public boolean isBackupEnabled()
    {
        com.android.server.BackupManagerService r0;
        android.content.Context $r1;
        boolean $z0;

        r0 := @this: com.android.server.BackupManagerService;

        $r1 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "isBackupEnabled");

        $z0 = r0.<com.android.server.BackupManagerService: boolean mEnabled>;

        return $z0;
    }

    public java.lang.String[] listAllTransports()
    {
        com.android.server.BackupManagerService r0;
        java.util.ArrayList r1, $r6;
        java.util.Iterator r2;
        int i0, $i1;
        java.lang.String[] r3;
        java.util.Map$Entry r4;
        android.content.Context $r5;
        java.util.HashMap $r7;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object $r10, $r11, $r12;

        r0 := @this: com.android.server.BackupManagerService;

        $r5 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "listAllTransports");

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        $r7 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r11;

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r10 == null goto label1;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        r3 = null;

        if i0 <= 0 goto label3;

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        r3 = newarray (java.lang.String)[$i1];

        virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r3);

     label3:
        return r3;
    }

    void logBackupComplete(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, $r22;
        java.util.HashSet r2, $r12;
        java.lang.Throwable r3, r7, $r23, $r24, $r27;
        java.io.RandomAccessFile r4, r5, $r13;
        boolean $z0, $z1;
        long $l0;
        java.io.File $r14, $r21;
        java.lang.StringBuilder $r15, $r17, $r18, $r19, $r20;
        java.io.IOException $r16, $r25, $r26, $r28, $r29;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("@pm@");

        if $z0 == 0 goto label01;

        return;

     label01:
        r2 = r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps>;

        entermonitor r2;

     label02:
        $r12 = r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps>;

        $z1 = virtualinvoke $r12.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        if $z1 != 0 goto label07;

        exitmonitor r2;

     label03:
        return;

     label04:
        $r23 := @caughtexception;

        r3 = $r23;

     label05:
        exitmonitor r2;

     label06:
        throw r3;

     label07:
        r4 = null;

     label08:
        $r13 = new java.io.RandomAccessFile;

        $r14 = r0.<com.android.server.BackupManagerService: java.io.File mEverStored>;

        specialinvoke $r13.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r14, "rws");

        r5 = $r13;

     label09:
        $l0 = virtualinvoke r5.<java.io.RandomAccessFile: long length()>();

        virtualinvoke r5.<java.io.RandomAccessFile: void seek(long)>($l0);

        virtualinvoke r5.<java.io.RandomAccessFile: void writeUTF(java.lang.String)>(r1);

     label10:
        if r5 == null goto label12;

     label11:
        virtualinvoke r5.<java.io.RandomAccessFile: void close()>();

     label12:
        exitmonitor r2;

     label13:
        return;

     label14:
        $r16 := @caughtexception;

     label15:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t log backup of ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r21 = r0.<com.android.server.BackupManagerService: java.io.File mEverStored>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r22);

     label16:
        if r4 == null goto label12;

     label17:
        virtualinvoke r4.<java.io.RandomAccessFile: void close()>();

     label18:
        goto label12;

     label19:
        $r29 := @caughtexception;

        goto label12;

     label20:
        $r24 := @caughtexception;

        r7 = $r24;

     label21:
        if r4 == null goto label23;

     label22:
        virtualinvoke r4.<java.io.RandomAccessFile: void close()>();

     label23:
        throw r7;

     label24:
        $r28 := @caughtexception;

        goto label23;

     label25:
        $r25 := @caughtexception;

        goto label12;

     label26:
        $r27 := @caughtexception;

        r7 = $r27;

        r4 = r5;

        goto label21;

     label27:
        $r26 := @caughtexception;

        r4 = r5;

        goto label15;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.io.IOException from label08 to label09 with label14;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.io.IOException from label09 to label10 with label27;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.io.IOException from label11 to label12 with label25;
        catch java.lang.Throwable from label11 to label12 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label17 to label18 with label04;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.lang.Throwable from label22 to label23 with label04;
        catch java.lang.Throwable from label23 to label24 with label04;
    }

    public void opComplete(int)
    {
        com.android.server.BackupManagerService r0;
        int i0;
        java.lang.Object r1, $r6, $r7;
        java.lang.Throwable r2, $r12;
        com.android.server.BackupManagerService$Operation r3;
        android.os.Message r4;
        android.util.SparseArray $r5;
        com.android.server.BackupManagerService$BackupRestoreTask $r8, $r9;
        com.android.server.BackupManagerService$BackupHandler $r10, $r11;

        r0 := @this: com.android.server.BackupManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.BackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r1;

     label1:
        $r5 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.BackupManagerService$Operation) $r6;

     label2:
        if r3 == null goto label4;

     label3:
        r3.<com.android.server.BackupManagerService$Operation: int state> = 1;

     label4:
        $r7 = r0.<com.android.server.BackupManagerService: java.lang.Object mCurrentOpLock>;

        virtualinvoke $r7.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label5:
        if r3 == null goto label6;

        $r8 = r3.<com.android.server.BackupManagerService$Operation: com.android.server.BackupManagerService$BackupRestoreTask callback>;

        if $r8 == null goto label6;

        $r10 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        $r9 = r3.<com.android.server.BackupManagerService$Operation: com.android.server.BackupManagerService$BackupRestoreTask callback>;

        r4 = virtualinvoke $r10.<com.android.server.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(21, $r9);

        $r11 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r11.<com.android.server.BackupManagerService$BackupHandler: boolean sendMessage(android.os.Message)>(r4);

     label6:
        return;

     label7:
        $r12 := @caughtexception;

        r2 = $r12;

     label8:
        exitmonitor r1;

     label9:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    boolean passwordMatchesSaved(java.lang.String, java.lang.String, int)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r2, r4, $r6, $r8, $r9;
        int i0, i1, $i2, $i3;
        boolean z0, $z1, $z2;
        android.os.storage.IMountService $r5, $r10;
        byte[] $r7;
        java.lang.Exception $r11;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label01:
        $r5 = r0.<com.android.server.BackupManagerService: android.os.storage.IMountService mMountService>;

        $i2 = interfaceinvoke $r5.<android.os.storage.IMountService: int getEncryptionState()>();

        if $i2 == 1 goto label13;

     label02:
        z0 = 1;

     label03:
        if z0 == 0 goto label09;

     label04:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Device encrypted; verifying against device data pw");

        $r10 = r0.<com.android.server.BackupManagerService: android.os.storage.IMountService mMountService>;

        i1 = interfaceinvoke $r10.<android.os.storage.IMountService: int verifyEncryptionPassword(java.lang.String)>(r2);

     label05:
        if i1 != 0 goto label14;

        return 1;

     label06:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "verified encryption state mismatch against query; no match allowed");

     label07:
        return 0;

     label08:
        $r11 := @caughtexception;

        return 0;

     label09:
        $r6 = r0.<com.android.server.BackupManagerService: java.lang.String mPasswordHash>;

        if $r6 != null goto label11;

        if r2 == null goto label12;

        $r9 = "";

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label12;

     label10:
        return 0;

     label11:
        if r2 == null goto label10;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i3 <= 0 goto label10;

        $r7 = r0.<com.android.server.BackupManagerService: byte[] mPasswordSalt>;

        r4 = specialinvoke r0.<com.android.server.BackupManagerService: java.lang.String buildPasswordHash(java.lang.String,java.lang.String,byte[],int)>(r1, r2, $r7, i0);

        $r8 = r0.<com.android.server.BackupManagerService: java.lang.String mPasswordHash>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z1 == 0 goto label10;

     label12:
        return 1;

     label13:
        z0 = 0;

        goto label03;

     label14:
        if i1 == -2 goto label06;

        return 0;

        catch java.lang.Exception from label01 to label02 with label08;
        catch java.lang.Exception from label04 to label05 with label08;
        catch java.lang.Exception from label06 to label07 with label08;
    }

    void prepareOperationTimeout(int, long, com.android.server.BackupManagerService$BackupRestoreTask)
    {
        com.android.server.BackupManagerService r0;
        int i0;
        long l1;
        com.android.server.BackupManagerService$BackupRestoreTask r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r9;
        android.os.Message r4;
        com.android.server.BackupManagerService$Operation $r5;
        android.util.SparseArray $r6;
        com.android.server.BackupManagerService$BackupHandler $r7, $r8;

        r0 := @this: com.android.server.BackupManagerService;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: com.android.server.BackupManagerService$BackupRestoreTask;

        r2 = r0.<com.android.server.BackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r2;

     label1:
        $r6 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r5 = new com.android.server.BackupManagerService$Operation;

        specialinvoke $r5.<com.android.server.BackupManagerService$Operation: void <init>(com.android.server.BackupManagerService,int,com.android.server.BackupManagerService$BackupRestoreTask)>(r0, 0, r1);

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r5);

        $r7 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        r4 = virtualinvoke $r7.<com.android.server.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(7, i0, 0, r1);

        $r8 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r8.<com.android.server.BackupManagerService$BackupHandler: boolean sendMessageDelayed(android.os.Message,long)>(r4, l1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        r3 = $r9;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void recordInitPendingLocked(boolean, java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        boolean z0;
        java.lang.String r1, r6, $r13;
        com.android.server.BackupManagerService$BackupHandler r3, r4, $r15;
        byte b0;
        com.android.internal.backup.IBackupTransport r5;
        java.io.File r7, $r18, $r19, $r21;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14;
        java.util.HashSet $r16, $r20, $r24;
        android.os.Message $r17;
        java.io.FileOutputStream $r22;
        java.io.IOException $r23;
        android.os.RemoteException $r25;

        r0 := @this: com.android.server.BackupManagerService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recordInitPendingLocked: ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on transport ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r13);

        $r15 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r15.<com.android.server.BackupManagerService$BackupHandler: void removeMessages(int)>(11);

     label01:
        r5 = specialinvoke r0.<com.android.server.BackupManagerService: com.android.internal.backup.IBackupTransport getTransport(java.lang.String)>(r1);

     label02:
        if r5 == null goto label11;

     label03:
        r6 = interfaceinvoke r5.<com.android.internal.backup.IBackupTransport: java.lang.String transportDirName()>();

        $r19 = new java.io.File;

        $r18 = new java.io.File;

        $r21 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r21, r6);

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, "_need_init_");

        r7 = $r19;

     label04:
        if z0 == 0 goto label08;

     label05:
        $r24 = r0.<com.android.server.BackupManagerService: java.util.HashSet mPendingInits>;

        virtualinvoke $r24.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

     label06:
        $r22 = new java.io.FileOutputStream;

        specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File)>(r7);

        virtualinvoke $r22.<java.io.FileOutputStream: void close()>();

     label07:
        return;

     label08:
        virtualinvoke r7.<java.io.File: boolean delete()>();

        $r20 = r0.<com.android.server.BackupManagerService: java.util.HashSet mPendingInits>;

        virtualinvoke $r20.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

     label09:
        return;

     label10:
        $r25 := @caughtexception;

     label11:
        if z0 == 0 goto label07;

        $r16 = r0.<com.android.server.BackupManagerService: java.util.HashSet mPendingInits>;

        virtualinvoke $r16.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        r3 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        r4 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        if z0 == 0 goto label13;

        b0 = 1;

     label12:
        $r17 = virtualinvoke r4.<com.android.server.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(11, b0, 0, r1);

        virtualinvoke r3.<com.android.server.BackupManagerService$BackupHandler: boolean sendMessageDelayed(android.os.Message,long)>($r17, 3600000L);

        return;

     label13:
        b0 = 0;

        goto label12;

     label14:
        $r23 := @caughtexception;

        return;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label04 with label10;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch java.io.IOException from label06 to label07 with label14;
        catch android.os.RemoteException from label06 to label07 with label10;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    void removeEverBackedUp(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, $r13, $r27, $r29, $r38;
        java.util.HashSet r2, $r17, $r18, $r37;
        java.io.File r3, $r14, $r16, $r19, $r23, $r35, $r41;
        java.io.RandomAccessFile r4, r5, $r15;
        java.lang.Throwable r6, r7, $r28, $r40, $r43;
        java.io.IOException r8, $r22, $r32, $r33, $r39, $r42;
        boolean z0, $z1;
        java.util.Iterator r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r20, $r21, $r24, $r25, $r26, $r31, $r34, $r36;
        java.lang.Object $r30;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing backed-up knowledge of ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r13);

        r2 = r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps>;

        entermonitor r2;

     label01:
        $r14 = new java.io.File;

        $r16 = r0.<com.android.server.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, "processed.new");

        r3 = $r14;

     label02:
        r4 = null;

     label03:
        $r15 = new java.io.RandomAccessFile;

        specialinvoke $r15.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r3, "rws");

        r5 = $r15;

     label04:
        $r17 = r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps>;

        virtualinvoke $r17.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        $r18 = r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps>;

        r9 = virtualinvoke $r18.<java.util.HashSet: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r30 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r27 = (java.lang.String) $r30;

        virtualinvoke r5.<java.io.RandomAccessFile: void writeUTF(java.lang.String)>($r27);

     label06:
        goto label05;

     label07:
        $r32 := @caughtexception;

        r8 = $r32;

        r4 = r5;

     label08:
        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error rewriting ");

        $r35 = r0.<com.android.server.BackupManagerService: java.io.File mEverStored>;

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r38, r8);

        $r37 = r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps>;

        virtualinvoke $r37.<java.util.HashSet: void clear()>();

        virtualinvoke r3.<java.io.File: boolean delete()>();

        $r41 = r0.<com.android.server.BackupManagerService: java.io.File mEverStored>;

        virtualinvoke $r41.<java.io.File: boolean delete()>();

     label09:
        if r4 == null goto label11;

     label10:
        virtualinvoke r4.<java.io.RandomAccessFile: void close()>();

     label11:
        exitmonitor r2;

     label12:
        return;

     label13:
        virtualinvoke r5.<java.io.RandomAccessFile: void close()>();

     label14:
        r4 = null;

     label15:
        $r19 = r0.<com.android.server.BackupManagerService: java.io.File mEverStored>;

        z0 = virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>($r19);

     label16:
        r4 = null;

        if z0 != 0 goto label28;

     label17:
        $r22 = new java.io.IOException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t rename ");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r23 = r0.<com.android.server.BackupManagerService: java.io.File mEverStored>;

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r29);

        throw $r22;

     label18:
        $r42 := @caughtexception;

        r8 = $r42;

        r4 = null;

        goto label08;

     label19:
        $r43 := @caughtexception;

        r6 = $r43;

     label20:
        if r4 == null goto label22;

     label21:
        virtualinvoke r4.<java.io.RandomAccessFile: void close()>();

     label22:
        throw r6;

     label23:
        $r28 := @caughtexception;

        r7 = $r28;

     label24:
        exitmonitor r2;

     label25:
        throw r7;

     label26:
        $r39 := @caughtexception;

        goto label22;

     label27:
        $r33 := @caughtexception;

        goto label11;

     label28:
        goto label11;

     label29:
        $r40 := @caughtexception;

        r6 = $r40;

        r4 = r5;

        goto label20;

        catch java.lang.Throwable from label01 to label02 with label23;
        catch java.io.IOException from label03 to label04 with label18;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.io.IOException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label29;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.io.IOException from label10 to label11 with label27;
        catch java.lang.Throwable from label10 to label11 with label23;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.io.IOException from label13 to label14 with label07;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.io.IOException from label15 to label16 with label18;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.io.IOException from label17 to label18 with label18;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.io.IOException from label21 to label22 with label26;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label22 to label23 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
        catch java.io.IOException from label29 to label29 with label27;
        catch java.lang.Throwable from label29 to label29 with label23;
    }

    void removePackageParticipantsLocked(java.lang.String[], int)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String[] r1;
        int i0, i1, i2, $i3;
        java.lang.String r2, $r9;
        java.util.HashSet r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        android.util.SparseArray $r10, $r12;
        boolean $z0, $z1;
        java.lang.Object $r11;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        if r1 != null goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "removePackageParticipants with null list");

     label1:
        return;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removePackageParticipantsLocked: uid=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" #");

        $i3 = lengthof r1;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r9);

        i1 = lengthof r1;

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        r2 = r1[i2];

        $r10 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (java.util.HashSet) $r11;

        if r3 == null goto label4;

        $z0 = virtualinvoke r3.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.android.server.BackupManagerService: void removePackageFromSetLocked(java.util.HashSet,java.lang.String)>(r3, r2);

        $z1 = virtualinvoke r3.<java.util.HashSet: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        $r12 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        virtualinvoke $r12.<android.util.SparseArray: void remove(int)>(i0);

     label4:
        i2 = i2 + 1;

        goto label3;
    }

    void resetBackupState(java.io.File)
    {
        com.android.server.BackupManagerService r0;
        java.io.File r1, r5, $r11;
        java.lang.Object r2, $r13, $r16;
        java.lang.Throwable r3, r7, $r17, $r19;
        java.io.File[] r4;
        int i0, i1, i2, i3;
        android.util.SparseArray r6, $r12, $r14;
        java.util.HashSet r8, $r10;
        java.util.Iterator r9;
        boolean $z1, $z3;
        java.lang.String $r15, $r18;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.io.File;

        r2 = r0.<com.android.server.BackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r2;

     label01:
        $r10 = r0.<com.android.server.BackupManagerService: java.util.HashSet mEverStoredApps>;

        virtualinvoke $r10.<java.util.HashSet: void clear()>();

        $r11 = r0.<com.android.server.BackupManagerService: java.io.File mEverStored>;

        virtualinvoke $r11.<java.io.File: boolean delete()>();

        r0.<com.android.server.BackupManagerService: long mCurrentToken> = 0L;

        virtualinvoke r0.<com.android.server.BackupManagerService: void writeRestoreTokens()>();

        r4 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r4;

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        r5 = r4[i1];

        $r18 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        $z3 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("_need_init_");

        if $z3 != 0 goto label25;

        virtualinvoke r5.<java.io.File: boolean delete()>();

     label05:
        goto label25;

     label06:
        exitmonitor r2;

     label07:
        r6 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        entermonitor r6;

     label08:
        $r12 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        i2 = virtualinvoke $r12.<android.util.SparseArray: int size()>();

     label09:
        i3 = 0;

     label10:
        if i3 >= i2 goto label23;

     label11:
        $r14 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r13 = virtualinvoke $r14.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r8 = (java.util.HashSet) $r13;

     label12:
        if r8 == null goto label22;

     label13:
        r9 = virtualinvoke r8.<java.util.HashSet: java.util.Iterator iterator()>();

     label14:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label22;

        $r16 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (java.lang.String) $r16;

        specialinvoke r0.<com.android.server.BackupManagerService: void dataChangedImpl(java.lang.String)>($r15);

     label15:
        goto label14;

     label16:
        $r17 := @caughtexception;

        r7 = $r17;

     label17:
        exitmonitor r6;

     label18:
        throw r7;

     label19:
        $r19 := @caughtexception;

        r3 = $r19;

     label20:
        exitmonitor r2;

     label21:
        throw r3;

     label22:
        i3 = i3 + 1;

        goto label10;

     label23:
        exitmonitor r6;

     label24:
        return;

     label25:
        i1 = i1 + 1;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label23 to label24 with label16;
    }

    public void restoreAtInstall(java.lang.String, int)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r5, $r11, $r16, $r17, $r18, $r27;
        int i0, $i3, $i7;
        long l1;
        byte b2;
        boolean z0, $z1, $z2;
        com.android.internal.backup.IBackupTransport r2;
        android.content.pm.PackageInfo r6, $r22;
        android.os.Message r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r25, $r26, $r28, $r29;
        android.content.pm.IPackageManager $r19;
        android.os.PowerManager$WakeLock $r20;
        com.android.server.BackupManagerService$BackupHandler $r21, $r23;
        com.android.server.BackupManagerService$RestoreParams $r24;
        android.os.RemoteException $r30, $r31;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i3 == 1000 goto label02;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system process uid=");

        $i7 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attemping install-time restore");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r27);

     label01:
        return;

     label02:
        l1 = virtualinvoke r0.<com.android.server.BackupManagerService: long getAvailableRestoreToken(java.lang.String)>(r1);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restoreAtInstall pkg=");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" restoreSet=");

        $r16 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r17);

        b2 = l1 cmp 0L;

        z0 = 0;

        if b2 != 0 goto label03;

        z0 = 1;

     label03:
        $r18 = r0.<com.android.server.BackupManagerService: java.lang.String mCurrentTransport>;

        r2 = specialinvoke r0.<com.android.server.BackupManagerService: com.android.internal.backup.IBackupTransport getTransport(java.lang.String)>($r18);

        if r2 != null goto label04;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "No transport");

        z0 = 1;

     label04:
        if z0 != 0 goto label06;

        $z1 = r0.<com.android.server.BackupManagerService: boolean mAutoRestore>;

        if $z1 == 0 goto label06;

        $z2 = r0.<com.android.server.BackupManagerService: boolean mProvisioned>;

        if $z2 == 0 goto label06;

     label05:
        r5 = interfaceinvoke r2.<com.android.internal.backup.IBackupTransport: java.lang.String transportDirName()>();

        $r22 = new android.content.pm.PackageInfo;

        specialinvoke $r22.<android.content.pm.PackageInfo: void <init>()>();

        r6 = $r22;

        r6.<android.content.pm.PackageInfo: java.lang.String packageName> = r1;

        $r20 = r0.<com.android.server.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r20.<android.os.PowerManager$WakeLock: void acquire()>();

        $r21 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        r7 = virtualinvoke $r21.<com.android.server.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int)>(3);

        $r24 = new com.android.server.BackupManagerService$RestoreParams;

        specialinvoke $r24.<com.android.server.BackupManagerService$RestoreParams: void <init>(com.android.server.BackupManagerService,com.android.internal.backup.IBackupTransport,java.lang.String,android.app.backup.IRestoreObserver,long,android.content.pm.PackageInfo,int,boolean)>(r0, r2, r5, null, l1, r6, i0, 1);

        r7.<android.os.Message: java.lang.Object obj> = $r24;

        $r23 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r23.<com.android.server.BackupManagerService$BackupHandler: boolean sendMessage(android.os.Message)>(r7);

     label06:
        if z0 == 0 goto label01;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "Skipping");

     label07:
        $r19 = r0.<com.android.server.BackupManagerService: android.content.pm.IPackageManager mPackageManagerBinder>;

        interfaceinvoke $r19.<android.content.pm.IPackageManager: void finishPackageInstall(int)>(i0);

     label08:
        return;

     label09:
        $r30 := @caughtexception;

        return;

     label10:
        $r31 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to contact transport");

        z0 = 1;

        goto label06;

        catch android.os.RemoteException from label05 to label06 with label10;
        catch android.os.RemoteException from label07 to label08 with label09;
    }

    public java.lang.String selectBackupTransport(java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r4, $r11, $r15, $r19;
        java.util.HashMap r2, $r6;
        java.lang.Throwable r3, $r21;
        android.content.Context $r5, $r12;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r14, $r16, $r17, $r18, $r20;
        android.content.ContentResolver $r13;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "selectBackupTransport");

        r2 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        entermonitor r2;

     label1:
        $r6 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r7 == null goto label4;

        r4 = r0.<com.android.server.BackupManagerService: java.lang.String mCurrentTransport>;

        r0.<com.android.server.BackupManagerService: java.lang.String mCurrentTransport> = r1;

        $r12 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r13, "backup_transport", r1);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("selectBackupTransport() set ");

        $r15 = r0.<com.android.server.BackupManagerService: java.lang.String mCurrentTransport>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returning ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r19);

     label2:
        exitmonitor r2;

     label3:
        return r4;

     label4:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to select unavailable transport ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

     label5:
        r4 = null;

        goto label2;

     label6:
        $r21 := @caughtexception;

        r3 = $r21;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setAutoRestore(boolean)
    {
        com.android.server.BackupManagerService r0;
        boolean z0;
        java.lang.Throwable r1, $r9;
        android.content.ContentResolver r2;
        byte b0;
        android.content.Context $r3, $r8;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.BackupManagerService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setAutoRestore");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto restore => ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r7);

        entermonitor r0;

     label1:
        $r8 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        r2 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label2:
        if z0 == 0 goto label8;

        b0 = 1;

     label3:
        staticinvoke <android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r2, "backup_auto_restore", b0);

        r0.<com.android.server.BackupManagerService: boolean mAutoRestore> = z0;

        exitmonitor r0;

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        r1 = $r9;

     label6:
        exitmonitor r0;

     label7:
        throw r1;

     label8:
        b0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setBackupEnabled(boolean)
    {
        com.android.server.BackupManagerService r0;
        boolean z0, z1, $z3, $z4, $z5;
        byte b0;
        long l1, $l4;
        java.lang.Throwable r1, r2, r5, r9, $r25, $r26, $r27, $r28;
        android.content.ContentResolver r3;
        java.lang.Object r4, $r24;
        java.util.HashMap r6, $r19;
        java.util.HashSet r7, $r18;
        java.util.Iterator r8;
        java.lang.StringBuilder $r10, $r12, $r14;
        android.content.Context $r11, $r15;
        java.lang.String $r13, $r23;
        android.app.PendingIntent $r16, $r21;
        android.app.AlarmManager $r17, $r22;
        java.util.Set $r20;

        r0 := @this: com.android.server.BackupManagerService;

        z0 := @parameter0: boolean;

        b0 = 1;

        $r11 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setBackupEnabled");

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Backup enabled => ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r13);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        z1 = r0.<com.android.server.BackupManagerService: boolean mEnabled>;

        entermonitor r0;

     label02:
        $r15 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        r3 = virtualinvoke $r15.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label03:
        if z0 == 0 goto label10;

     label04:
        staticinvoke <android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r3, "backup_enabled", b0);

        r0.<com.android.server.BackupManagerService: boolean mEnabled> = z0;

        exitmonitor r0;

     label05:
        r4 = r0.<com.android.server.BackupManagerService: java.lang.Object mQueueLock>;

        entermonitor r4;

     label06:
        if z0 == 0 goto label15;

        if z1 != 0 goto label15;

     label07:
        $z5 = r0.<com.android.server.BackupManagerService: boolean mProvisioned>;

        if $z5 == 0 goto label15;

        specialinvoke r0.<com.android.server.BackupManagerService: void startBackupAlarmsLocked(long)>(3600000L);

     label08:
        exitmonitor r4;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label10:
        b0 = 0;

        goto label04;

     label11:
        $r27 := @caughtexception;

        r2 = $r27;

     label12:
        exitmonitor r0;

     label13:
        throw r2;

     label14:
        $r28 := @caughtexception;

        r1 = $r28;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

     label15:
        if z0 != 0 goto label08;

     label16:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Opting out of backup");

        $r17 = r0.<com.android.server.BackupManagerService: android.app.AlarmManager mAlarmManager>;

        $r16 = r0.<com.android.server.BackupManagerService: android.app.PendingIntent mRunBackupIntent>;

        virtualinvoke $r17.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r16);

     label17:
        if z1 == 0 goto label08;

     label18:
        $z3 = r0.<com.android.server.BackupManagerService: boolean mProvisioned>;

        if $z3 == 0 goto label08;

        r6 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        entermonitor r6;

     label19:
        $r18 = new java.util.HashSet;

        $r19 = r0.<com.android.server.BackupManagerService: java.util.HashMap mTransports>;

        $r20 = virtualinvoke $r19.<java.util.HashMap: java.util.Set keySet()>();

        specialinvoke $r18.<java.util.HashSet: void <init>(java.util.Collection)>($r20);

        r7 = $r18;

        exitmonitor r6;

     label20:
        r8 = virtualinvoke r7.<java.util.HashSet: java.util.Iterator iterator()>();

     label21:
        $z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label29;

        $r24 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r23 = (java.lang.String) $r24;

        virtualinvoke r0.<com.android.server.BackupManagerService: void recordInitPendingLocked(boolean,java.lang.String)>(1, $r23);

     label22:
        goto label21;

     label23:
        $r25 := @caughtexception;

        r5 = $r25;

     label24:
        exitmonitor r4;

     label25:
        throw r5;

     label26:
        $r26 := @caughtexception;

        r9 = $r26;

     label27:
        exitmonitor r6;

     label28:
        throw r9;

     label29:
        $r22 = r0.<com.android.server.BackupManagerService: android.app.AlarmManager mAlarmManager>;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r21 = r0.<com.android.server.BackupManagerService: android.app.PendingIntent mRunInitIntent>;

        virtualinvoke $r22.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(0, $l4, $r21);

     label30:
        goto label08;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label08 to label09 with label23;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label16 to label17 with label23;
        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
        catch java.lang.Throwable from label25 to label26 with label14;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label28 to label29 with label23;
        catch java.lang.Throwable from label29 to label30 with label23;
    }

    public boolean setBackupPassword(java.lang.String, java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        java.lang.String r1, r2, r15;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        java.io.FileOutputStream r3, r5, r14, r19, $r24, $r30;
        java.io.DataOutputStream r4, r6, r16, r21, $r28, $r31;
        java.lang.Throwable r8, r20, $r34, $r37, $r38, $r39, $r42, $r44, $r46;
        byte[] r13;
        java.io.BufferedOutputStream r17, r18, $r32;
        android.content.Context $r25;
        int $i0, $i1, $i3;
        java.io.File $r26, $r27, $r29, $r33;
        java.io.IOException $r35, $r36, $r40, $r41, $r43, $r45, $r47;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r25 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r25.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setBackupPassword");

        $i0 = r0.<com.android.server.BackupManagerService: int mPasswordVersion>;

        if $i0 >= 2 goto label04;

        z0 = 1;

     label01:
        $z2 = virtualinvoke r0.<com.android.server.BackupManagerService: boolean passwordMatchesSaved(java.lang.String,java.lang.String,int)>("PBKDF2WithHmacSHA1", r1, 10000);

        if $z2 != 0 goto label05;

        if z0 == 0 goto label02;

        $z6 = virtualinvoke r0.<com.android.server.BackupManagerService: boolean passwordMatchesSaved(java.lang.String,java.lang.String,int)>("PBKDF2WithHmacSHA1And8bit", r1, 10000);

        if $z6 != 0 goto label05;

     label02:
        z1 = 0;

     label03:
        return z1;

     label04:
        z0 = 0;

        goto label01;

     label05:
        r0.<com.android.server.BackupManagerService: int mPasswordVersion> = 2;

        r3 = null;

        r4 = null;

     label06:
        $r24 = new java.io.FileOutputStream;

        $r27 = r0.<com.android.server.BackupManagerService: java.io.File mPasswordVersionFile>;

        specialinvoke $r24.<java.io.FileOutputStream: void <init>(java.io.File)>($r27);

        r5 = $r24;

     label07:
        $r28 = new java.io.DataOutputStream;

        specialinvoke $r28.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r5);

        r6 = $r28;

     label08:
        $i1 = r0.<com.android.server.BackupManagerService: int mPasswordVersion>;

        virtualinvoke r6.<java.io.DataOutputStream: void writeInt(int)>($i1);

     label09:
        if r6 == null goto label11;

     label10:
        virtualinvoke r6.<java.io.DataOutputStream: void close()>();

     label11:
        if r5 == null goto label13;

     label12:
        virtualinvoke r5.<java.io.FileOutputStream: void close()>();

     label13:
        if r2 == null goto label14;

        $z5 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z5 == 0 goto label30;

     label14:
        $r26 = r0.<com.android.server.BackupManagerService: java.io.File mPasswordHashFile>;

        $z4 = virtualinvoke $r26.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label29;

        $r29 = r0.<com.android.server.BackupManagerService: java.io.File mPasswordHashFile>;

        $z3 = virtualinvoke $r29.<java.io.File: boolean delete()>();

        if $z3 != 0 goto label29;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to clear backup password");

        return 0;

     label15:
        $r45 := @caughtexception;

     label16:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to write backup pw version; password not changed");

     label17:
        if r4 == null goto label19;

     label18:
        virtualinvoke r4.<java.io.DataOutputStream: void close()>();

     label19:
        z1 = 0;

        if r3 == null goto label03;

     label20:
        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label21:
        return 0;

     label22:
        $r36 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to close pw version record");

        return 0;

     label23:
        $r39 := @caughtexception;

        r8 = $r39;

     label24:
        if r4 == null goto label26;

     label25:
        virtualinvoke r4.<java.io.DataOutputStream: void close()>();

     label26:
        if r3 == null goto label28;

     label27:
        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label28:
        throw r8;

     label29:
        r0.<com.android.server.BackupManagerService: java.lang.String mPasswordHash> = null;

        r0.<com.android.server.BackupManagerService: byte[] mPasswordSalt> = null;

        return 1;

     label30:
        r13 = specialinvoke r0.<com.android.server.BackupManagerService: byte[] randomBytes(int)>(512);

        r15 = specialinvoke r0.<com.android.server.BackupManagerService: java.lang.String buildPasswordHash(java.lang.String,java.lang.String,byte[],int)>("PBKDF2WithHmacSHA1", r2, r13, 10000);

     label31:
        r14 = null;

        r17 = null;

        r16 = null;

     label32:
        $r30 = new java.io.FileOutputStream;

        $r33 = r0.<com.android.server.BackupManagerService: java.io.File mPasswordHashFile>;

        specialinvoke $r30.<java.io.FileOutputStream: void <init>(java.io.File)>($r33);

        r19 = $r30;

     label33:
        $r32 = new java.io.BufferedOutputStream;

        specialinvoke $r32.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r19);

        r18 = $r32;

     label34:
        $r31 = new java.io.DataOutputStream;

        specialinvoke $r31.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r18);

        r21 = $r31;

     label35:
        $i3 = lengthof r13;

        virtualinvoke r21.<java.io.DataOutputStream: void writeInt(int)>($i3);

        virtualinvoke r21.<java.io.DataOutputStream: void write(byte[])>(r13);

        virtualinvoke r21.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r15);

        virtualinvoke r21.<java.io.DataOutputStream: void flush()>();

        r0.<com.android.server.BackupManagerService: java.lang.String mPasswordHash> = r15;

        r0.<com.android.server.BackupManagerService: byte[] mPasswordSalt> = r13;

     label36:
        z1 = 1;

        if r21 == null goto label38;

     label37:
        virtualinvoke r21.<java.io.DataOutputStream: void close()>();

     label38:
        if r18 == null goto label40;

     label39:
        virtualinvoke r18.<java.io.OutputStream: void close()>();

     label40:
        if r19 == null goto label03;

     label41:
        virtualinvoke r19.<java.io.OutputStream: void close()>();

     label42:
        return 1;

     label43:
        $r47 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to set backup password");

        return 0;

     label44:
        $r46 := @caughtexception;

        r20 = $r46;

     label45:
        if r16 == null goto label47;

     label46:
        virtualinvoke r16.<java.io.DataOutputStream: void close()>();

     label47:
        if r17 == null goto label49;

     label48:
        virtualinvoke r17.<java.io.OutputStream: void close()>();

     label49:
        if r14 == null goto label51;

     label50:
        virtualinvoke r14.<java.io.OutputStream: void close()>();

     label51:
        throw r20;

     label52:
        $r43 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to close pw version record");

        goto label28;

     label53:
        $r41 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to close pw version record");

        goto label13;

     label54:
        $r37 := @caughtexception;

        r20 = $r37;

        r14 = r19;

        r17 = null;

        r16 = null;

        goto label45;

     label55:
        $r38 := @caughtexception;

        r20 = $r38;

        r17 = r18;

        r14 = r19;

        r16 = null;

        goto label45;

     label56:
        $r42 := @caughtexception;

        r20 = $r42;

        r16 = r21;

        r17 = r18;

        r14 = r19;

        goto label45;

     label57:
        $r34 := @caughtexception;

        r8 = $r34;

        r3 = r5;

        r4 = null;

        goto label24;

     label58:
        $r44 := @caughtexception;

        r8 = $r44;

        r4 = r6;

        r3 = r5;

        goto label24;

     label59:
        $r35 := @caughtexception;

        r3 = r5;

        r4 = null;

        goto label16;

     label60:
        $r40 := @caughtexception;

        r4 = r6;

        r3 = r5;

        goto label16;

        catch java.io.IOException from label06 to label07 with label15;
        catch java.lang.Throwable from label06 to label07 with label23;
        catch java.io.IOException from label07 to label08 with label59;
        catch java.lang.Throwable from label07 to label08 with label57;
        catch java.io.IOException from label08 to label09 with label60;
        catch java.lang.Throwable from label08 to label09 with label58;
        catch java.io.IOException from label10 to label11 with label53;
        catch java.io.IOException from label12 to label13 with label53;
        catch java.lang.Throwable from label16 to label17 with label23;
        catch java.io.IOException from label18 to label19 with label22;
        catch java.io.IOException from label20 to label21 with label22;
        catch java.io.IOException from label25 to label26 with label52;
        catch java.io.IOException from label27 to label28 with label52;
        catch java.io.IOException from label30 to label31 with label43;
        catch java.lang.Throwable from label32 to label33 with label44;
        catch java.lang.Throwable from label33 to label34 with label54;
        catch java.lang.Throwable from label34 to label35 with label55;
        catch java.lang.Throwable from label35 to label36 with label56;
        catch java.io.IOException from label37 to label38 with label43;
        catch java.io.IOException from label39 to label40 with label43;
        catch java.io.IOException from label41 to label42 with label43;
        catch java.io.IOException from label46 to label47 with label43;
        catch java.io.IOException from label48 to label49 with label43;
        catch java.io.IOException from label50 to label51 with label43;
        catch java.io.IOException from label51 to label52 with label43;
    }

    public void setBackupProvisioned(boolean)
    {
        com.android.server.BackupManagerService r0;
        boolean z0;
        android.content.Context $r1;

        r0 := @this: com.android.server.BackupManagerService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setBackupProvisioned");

        return;
    }

    void signalFullBackupRestoreCompletion(com.android.server.BackupManagerService$FullParams)
    {
        com.android.server.BackupManagerService r0;
        com.android.server.BackupManagerService$FullParams r1;
        java.util.concurrent.atomic.AtomicBoolean r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: com.android.server.BackupManagerService$FullParams;

        r2 = r1.<com.android.server.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        entermonitor r2;

     label1:
        $r4 = r1.<com.android.server.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r5 = r1.<com.android.server.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        virtualinvoke $r5.<java.lang.Object: void notifyAll()>();

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void startConfirmationTimeout(int, com.android.server.BackupManagerService$FullParams)
    {
        com.android.server.BackupManagerService r0;
        int i0;
        com.android.server.BackupManagerService$FullParams r1;
        android.os.Message r2;
        com.android.server.BackupManagerService$BackupHandler $r3, $r4;

        r0 := @this: com.android.server.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.BackupManagerService$FullParams;

        $r3 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        r2 = virtualinvoke $r3.<com.android.server.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(9, i0, 0, r1);

        $r4 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r4.<com.android.server.BackupManagerService$BackupHandler: boolean sendMessageDelayed(android.os.Message,long)>(r2, 60000L);

        return;
    }

    boolean startConfirmationUi(int, java.lang.String)
    {
        com.android.server.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        android.content.Intent r2, $r4;
        android.content.Context $r8;
        android.content.ActivityNotFoundException $r9;

        r0 := @this: com.android.server.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

     label1:
        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>(r1);

        r2 = $r4;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.backupconfirm", "com.android.backupconfirm.BackupRestoreConfirmation");

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("conftoken", i0);

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r8 = r0.<com.android.server.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r8.<android.content.Context: void startActivity(android.content.Intent)>(r2);

     label2:
        return 1;

     label3:
        $r9 := @caughtexception;

        return 0;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    void waitForCompletion(com.android.server.BackupManagerService$FullParams)
    {
        com.android.server.BackupManagerService r0;
        com.android.server.BackupManagerService$FullParams r1;
        java.util.concurrent.atomic.AtomicBoolean r2, $r5, $r6;
        java.lang.Throwable r3, $r8;
        boolean z0;
        java.lang.InterruptedException $r7;

        r0 := @this: com.android.server.BackupManagerService;

        r1 := @parameter0: com.android.server.BackupManagerService$FullParams;

        r2 = r1.<com.android.server.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        entermonitor r2;

     label01:
        $r5 = r1.<com.android.server.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

     label02:
        if z0 != 0 goto label06;

     label03:
        $r6 = r1.<com.android.server.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        virtualinvoke $r6.<java.lang.Object: void wait()>();

     label04:
        goto label01;

     label05:
        $r7 := @caughtexception;

        goto label01;

     label06:
        exitmonitor r2;

     label07:
        return;

     label08:
        $r8 := @caughtexception;

        r3 = $r8;

     label09:
        exitmonitor r2;

     label10:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    boolean waitUntilOperationComplete(int)
    {
        com.android.server.BackupManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1, $r6, $r8;
        java.lang.Throwable r2, $r9;
        com.android.server.BackupManagerService$Operation r3;
        android.util.SparseArray $r5;
        com.android.server.BackupManagerService$BackupHandler $r7;
        java.lang.InterruptedException $r10;

        r0 := @this: com.android.server.BackupManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.BackupManagerService: java.lang.Object mCurrentOpLock>;

        entermonitor r1;

     label01:
        $r5 = r0.<com.android.server.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.BackupManagerService$Operation) $r6;

     label02:
        i1 = 0;

        if r3 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        $r7 = r0.<com.android.server.BackupManagerService: com.android.server.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r7.<com.android.server.BackupManagerService$BackupHandler: void removeMessages(int)>(7);

        if i1 != 1 goto label15;

        return 1;

     label05:
        i2 = r3.<com.android.server.BackupManagerService$Operation: int state>;

     label06:
        if i2 != 0 goto label10;

     label07:
        $r8 = r0.<com.android.server.BackupManagerService: java.lang.Object mCurrentOpLock>;

        virtualinvoke $r8.<java.lang.Object: void wait()>();

     label08:
        goto label01;

     label09:
        $r10 := @caughtexception;

        goto label01;

     label10:
        i1 = r3.<com.android.server.BackupManagerService$Operation: int state>;

     label11:
        goto label03;

     label12:
        $r9 := @caughtexception;

        r2 = $r9;

     label13:
        exitmonitor r1;

     label14:
        throw r2;

     label15:
        return 0;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void writeRestoreTokens()
    {
        com.android.server.BackupManagerService r0;
        java.io.RandomAccessFile r1, $r4;
        java.io.IOException r2, $r16;
        java.util.Iterator r3;
        java.io.File $r5;
        long $l0, $l1;
        java.util.Set $r6, $r7, $r10, $r13;
        int $i2, $i3;
        java.lang.StringBuilder $r8, $r9, $r12;
        java.lang.String $r11, $r14;
        boolean $z0;
        java.lang.Object $r15;

        r0 := @this: com.android.server.BackupManagerService;

     label1:
        $r4 = new java.io.RandomAccessFile;

        $r5 = r0.<com.android.server.BackupManagerService: java.io.File mTokenFile>;

        specialinvoke $r4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r5, "rwd");

        r1 = $r4;

        virtualinvoke r1.<java.io.RandomAccessFile: void writeInt(int)>(1);

        $l0 = r0.<com.android.server.BackupManagerService: long mAncestralToken>;

        virtualinvoke r1.<java.io.RandomAccessFile: void writeLong(long)>($l0);

        $l1 = r0.<com.android.server.BackupManagerService: long mCurrentToken>;

        virtualinvoke r1.<java.io.RandomAccessFile: void writeLong(long)>($l1);

        $r6 = r0.<com.android.server.BackupManagerService: java.util.Set mAncestralPackages>;

        if $r6 != null goto label4;

        virtualinvoke r1.<java.io.RandomAccessFile: void writeInt(int)>(-1);

     label2:
        virtualinvoke r1.<java.io.RandomAccessFile: void close()>();

     label3:
        return;

     label4:
        $r7 = r0.<com.android.server.BackupManagerService: java.util.Set mAncestralPackages>;

        $i2 = interfaceinvoke $r7.<java.util.Set: int size()>();

        virtualinvoke r1.<java.io.RandomAccessFile: void writeInt(int)>($i2);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ancestral packages:  ");

        $r10 = r0.<com.android.server.BackupManagerService: java.util.Set mAncestralPackages>;

        $i3 = interfaceinvoke $r10.<java.util.Set: int size()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        $r13 = r0.<com.android.server.BackupManagerService: java.util.Set mAncestralPackages>;

        r3 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.String) $r15;

        virtualinvoke r1.<java.io.RandomAccessFile: void writeUTF(java.lang.String)>($r14);

     label6:
        goto label5;

     label7:
        $r16 := @caughtexception;

        r2 = $r16;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Unable to write token file:", r2);

        return;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label2 to label3 with label7;
        catch java.io.IOException from label4 to label5 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public static void <clinit>()
    {
        <com.android.server.BackupManagerService: long TRANSPORT_RETRY_INTERVAL> = 3600000L;

        <com.android.server.BackupManagerService: long TIMEOUT_SHARED_BACKUP_INTERVAL> = 1800000L;

        <com.android.server.BackupManagerService: long TIMEOUT_RESTORE_INTERVAL> = 60000L;

        <com.android.server.BackupManagerService: long TIMEOUT_INTERVAL> = 10000L;

        <com.android.server.BackupManagerService: long TIMEOUT_FULL_CONFIRMATION> = 60000L;

        <com.android.server.BackupManagerService: long TIMEOUT_FULL_BACKUP_INTERVAL> = 300000L;

        <com.android.server.BackupManagerService: long TIMEOUT_BACKUP_INTERVAL> = 30000L;

        <com.android.server.BackupManagerService: java.lang.String TAG> = "BackupManagerService";

        <com.android.server.BackupManagerService: java.lang.String SHARED_BACKUP_AGENT_PACKAGE> = "com.android.sharedstoragebackup";

        <com.android.server.BackupManagerService: java.lang.String SERVICE_ACTION_TRANSPORT_HOST> = "android.backup.TRANSPORT_HOST";

        <com.android.server.BackupManagerService: java.lang.String RUN_INITIALIZE_ACTION> = "android.app.backup.intent.INIT";

        <com.android.server.BackupManagerService: java.lang.String RUN_CLEAR_ACTION> = "android.app.backup.intent.CLEAR";

        <com.android.server.BackupManagerService: java.lang.String RUN_BACKUP_ACTION> = "android.app.backup.intent.RUN";

        <com.android.server.BackupManagerService: java.lang.String PBKDF_FALLBACK> = "PBKDF2WithHmacSHA1And8bit";

        <com.android.server.BackupManagerService: java.lang.String PBKDF_CURRENT> = "PBKDF2WithHmacSHA1";

        <com.android.server.BackupManagerService: int PBKDF2_SALT_SIZE> = 512;

        <com.android.server.BackupManagerService: int PBKDF2_KEY_SIZE> = 256;

        <com.android.server.BackupManagerService: int PBKDF2_HASH_ROUNDS> = 10000;

        <com.android.server.BackupManagerService: java.lang.String PACKAGE_MANAGER_SENTINEL> = "@pm@";

        <com.android.server.BackupManagerService: int OP_TIMEOUT> = -1;

        <com.android.server.BackupManagerService: int OP_PENDING> = 0;

        <com.android.server.BackupManagerService: int OP_ACKNOWLEDGED> = 1;

        <com.android.server.BackupManagerService: int MSG_TIMEOUT> = 7;

        <com.android.server.BackupManagerService: int MSG_RUN_RESTORE> = 3;

        <com.android.server.BackupManagerService: int MSG_RUN_INITIALIZE> = 5;

        <com.android.server.BackupManagerService: int MSG_RUN_GET_RESTORE_SETS> = 6;

        <com.android.server.BackupManagerService: int MSG_RUN_FULL_RESTORE> = 10;

        <com.android.server.BackupManagerService: int MSG_RUN_FULL_BACKUP> = 2;

        <com.android.server.BackupManagerService: int MSG_RUN_CLEAR> = 4;

        <com.android.server.BackupManagerService: int MSG_RUN_BACKUP> = 1;

        <com.android.server.BackupManagerService: int MSG_RETRY_INIT> = 11;

        <com.android.server.BackupManagerService: int MSG_RETRY_CLEAR> = 12;

        <com.android.server.BackupManagerService: int MSG_RESTORE_TIMEOUT> = 8;

        <com.android.server.BackupManagerService: int MSG_OP_COMPLETE> = 21;

        <com.android.server.BackupManagerService: int MSG_FULL_CONFIRMATION_TIMEOUT> = 9;

        <com.android.server.BackupManagerService: int MSG_BACKUP_RESTORE_STEP> = 20;

        <com.android.server.BackupManagerService: boolean MORE_DEBUG> = 0;

        <com.android.server.BackupManagerService: java.lang.String INIT_SENTINEL_FILE_NAME> = "_need_init_";

        <com.android.server.BackupManagerService: int FUZZ_MILLIS> = 300000;

        <com.android.server.BackupManagerService: long FIRST_BACKUP_INTERVAL> = 43200000L;

        <com.android.server.BackupManagerService: java.lang.String ENCRYPTION_ALGORITHM_NAME> = "AES-256";

        <com.android.server.BackupManagerService: boolean DEBUG_BACKUP_TRACE> = 1;

        <com.android.server.BackupManagerService: boolean DEBUG> = 1;

        <com.android.server.BackupManagerService: int CURRENT_ANCESTRAL_RECORD_VERSION> = 1;

        <com.android.server.BackupManagerService: boolean COMPRESS_FULL_BACKUPS> = 1;

        <com.android.server.BackupManagerService: int BACKUP_PW_FILE_VERSION> = 2;

        <com.android.server.BackupManagerService: int BACKUP_MANIFEST_VERSION> = 1;

        <com.android.server.BackupManagerService: java.lang.String BACKUP_MANIFEST_FILENAME> = "_manifest";

        <com.android.server.BackupManagerService: long BACKUP_INTERVAL> = 3600000L;

        <com.android.server.BackupManagerService: int BACKUP_FILE_VERSION> = 2;

        <com.android.server.BackupManagerService: java.lang.String BACKUP_FILE_HEADER_MAGIC> = "ANDROID BACKUP\n";

        return;
    }
}
