public class com.android.server.LocationManagerService extends android.location.ILocationManager$Stub
{
    private static final java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS;
    private static final java.lang.String ACCESS_MOCK_LOCATION;
    public static final boolean D;
    private static final android.location.LocationRequest DEFAULT_LOCATION_REQUEST;
    private static final java.lang.String FUSED_LOCATION_SERVICE_ACTION;
    private static final long HIGH_POWER_INTERVAL_MS;
    private static final java.lang.String INSTALL_LOCATION_PROVIDER;
    private static final int MAX_PROVIDER_SCHEDULING_JITTER_MS;
    private static final int MSG_LOCATION_CHANGED;
    private static final long NANOS_PER_MILLI;
    private static final java.lang.String NETWORK_LOCATION_SERVICE_ACTION;
    private static final int RESOLUTION_LEVEL_COARSE;
    private static final int RESOLUTION_LEVEL_FINE;
    private static final int RESOLUTION_LEVEL_NONE;
    private static final java.lang.String TAG;
    private static final java.lang.String WAKELOCK_KEY;
    private final android.app.AppOpsManager mAppOps;
    private com.android.server.location.LocationBlacklist mBlacklist;
    private final android.content.Context mContext;
    private int mCurrentUserId;
    private final java.util.Set mDisabledProviders;
    private final java.util.Set mEnabledProviders;
    private com.android.server.location.GeocoderProxy mGeocodeProvider;
    private com.android.server.location.GeofenceManager mGeofenceManager;
    private android.location.IGpsStatusProvider mGpsStatusProvider;
    private final java.util.HashMap mLastLocation;
    private final java.util.HashMap mLastLocationCoarseInterval;
    private com.android.server.location.LocationFudger mLocationFudger;
    private com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler;
    private final java.lang.Object mLock;
    private final java.util.HashMap mMockProviders;
    private android.location.INetInitiatedListener mNetInitiatedListener;
    private android.content.pm.PackageManager mPackageManager;
    private final com.android.internal.content.PackageMonitor mPackageMonitor;
    private com.android.server.location.PassiveProvider mPassiveProvider;
    private android.os.PowerManager mPowerManager;
    private final java.util.ArrayList mProviders;
    private final java.util.HashMap mProvidersByName;
    private final java.util.ArrayList mProxyProviders;
    private final java.util.HashMap mRealProviders;
    private final java.util.HashMap mReceivers;
    private final java.util.HashMap mRecordsByProvider;

    static void <clinit>()
    {
        boolean $z0;
        android.location.LocationRequest $r0;

        <com.android.server.LocationManagerService: java.lang.String WAKELOCK_KEY> = "LocationManagerService";

        <com.android.server.LocationManagerService: java.lang.String TAG> = "LocationManagerService";

        <com.android.server.LocationManagerService: int RESOLUTION_LEVEL_NONE> = 0;

        <com.android.server.LocationManagerService: int RESOLUTION_LEVEL_FINE> = 2;

        <com.android.server.LocationManagerService: int RESOLUTION_LEVEL_COARSE> = 1;

        <com.android.server.LocationManagerService: java.lang.String NETWORK_LOCATION_SERVICE_ACTION> = "com.android.location.service.v3.NetworkLocationProvider";

        <com.android.server.LocationManagerService: long NANOS_PER_MILLI> = 1000000L;

        <com.android.server.LocationManagerService: int MSG_LOCATION_CHANGED> = 1;

        <com.android.server.LocationManagerService: int MAX_PROVIDER_SCHEDULING_JITTER_MS> = 100;

        <com.android.server.LocationManagerService: java.lang.String INSTALL_LOCATION_PROVIDER> = "android.permission.INSTALL_LOCATION_PROVIDER";

        <com.android.server.LocationManagerService: long HIGH_POWER_INTERVAL_MS> = 300000L;

        <com.android.server.LocationManagerService: java.lang.String FUSED_LOCATION_SERVICE_ACTION> = "com.android.location.service.FusedLocationProvider";

        <com.android.server.LocationManagerService: java.lang.String ACCESS_MOCK_LOCATION> = "android.permission.ACCESS_MOCK_LOCATION";

        <com.android.server.LocationManagerService: java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS> = "android.permission.ACCESS_LOCATION_EXTRA_COMMANDS";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LocationManagerService", 3);

        <com.android.server.LocationManagerService: boolean D> = $z0;

        $r0 = new android.location.LocationRequest;

        specialinvoke $r0.<android.location.LocationRequest: void <init>()>();

        <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.LocationManagerService r0;
        android.content.Context r1;
        java.lang.Object $r2, $r15;
        java.util.HashSet $r3, $r4;
        java.util.HashMap $r5, $r6, $r8, $r9, $r10, $r11, $r12;
        java.util.ArrayList $r7, $r13;
        com.android.server.LocationManagerService$4 $r14;
        boolean $z0;
        android.app.AppOpsManager $r16;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.location.ILocationManager$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.lang.Object mLock> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval> = $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders> = $r13;

        r0.<com.android.server.LocationManagerService: int mCurrentUserId> = 0;

        $r14 = new com.android.server.LocationManagerService$4;

        specialinvoke $r14.<com.android.server.LocationManagerService$4: void <init>(com.android.server.LocationManagerService)>(r0);

        r0.<com.android.server.LocationManagerService: com.android.internal.content.PackageMonitor mPackageMonitor> = $r14;

        r0.<com.android.server.LocationManagerService: android.content.Context mContext> = r1;

        $r15 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r16 = (android.app.AppOpsManager) $r15;

        r0.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps> = $r16;

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", "Constructed");

     label1:
        return;
    }

    static java.lang.Object access$000(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static java.util.HashMap access$100(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        return $r1;
    }

    static android.app.AppOpsManager access$1000(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        android.app.AppOpsManager $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        return $r1;
    }

    static com.android.server.LocationManagerService$LocationWorkerHandler access$1100(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        com.android.server.LocationManagerService$LocationWorkerHandler $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        return $r1;
    }

    static java.lang.String access$1200(com.android.server.LocationManagerService, int)
    {
        com.android.server.LocationManagerService r0;
        int i0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.LocationManagerService: java.lang.String getResolutionPermission(int)>(i0);

        return $r1;
    }

    static void access$1300(com.android.server.LocationManagerService, com.android.server.LocationManagerService$Receiver)
    {
        com.android.server.LocationManagerService r0;
        com.android.server.LocationManagerService$Receiver r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        r1 := @parameter1: com.android.server.LocationManagerService$Receiver;

        specialinvoke r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>(r1);

        return;
    }

    static java.util.HashMap access$1500(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        return $r1;
    }

    static void access$1600(com.android.server.LocationManagerService, android.location.Location, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Location r1;
        boolean z0;

        r0 := @parameter0: com.android.server.LocationManagerService;

        r1 := @parameter1: android.location.Location;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.LocationManagerService: void handleLocationChanged(android.location.Location,boolean)>(r1, z0);

        return;
    }

    static void access$200(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;

        r0 := @parameter0: com.android.server.LocationManagerService;

        specialinvoke r0.<com.android.server.LocationManagerService: void applyAllProviderRequirementsLocked()>();

        return;
    }

    static void access$300(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;

        r0 := @parameter0: com.android.server.LocationManagerService;

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        return;
    }

    static void access$400(com.android.server.LocationManagerService, int)
    {
        com.android.server.LocationManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.LocationManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.LocationManagerService: void switchUser(int)>(i0);

        return;
    }

    static int access$500(com.android.server.LocationManagerService, int, int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, $i2;

        r0 := @parameter0: com.android.server.LocationManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = specialinvoke r0.<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)>(i0, i1);

        return $i2;
    }

    static android.os.PowerManager access$600(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        android.os.PowerManager $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.os.PowerManager mPowerManager>;

        return $r1;
    }

    static boolean access$700(com.android.server.LocationManagerService, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.LocationManagerService;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(r1);

        return $z0;
    }

    static java.util.HashMap access$800(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        return $r1;
    }

    static android.content.Context access$900(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        return $r1;
    }

    private void addProviderLocked(com.android.server.location.LocationProviderInterface)
    {
        com.android.server.LocationManagerService r0;
        com.android.server.location.LocationProviderInterface r1;
        java.util.ArrayList $r2;
        java.util.HashMap $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: com.android.server.location.LocationProviderInterface;

        $r2 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r4 = interfaceinvoke r1.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        return;
    }

    private void applyAllProviderRequirementsLocked()
    {
        com.android.server.LocationManagerService r0;
        java.util.Iterator r1;
        com.android.server.location.LocationProviderInterface r2;
        java.util.ArrayList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.String $r5, $r6;

        r0 := @this: com.android.server.LocationManagerService;

        $r3 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.location.LocationProviderInterface) $r4;

        $r5 = interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $z1 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>($r5);

        if $z1 == 0 goto label1;

        $r6 = interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>($r6);

        goto label1;

     label2:
        return;
    }

    private void applyRequirementsLocked(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r21, $r27, $r33, $r43;
        com.android.server.location.LocationProviderInterface r2;
        java.util.ArrayList r3;
        android.os.WorkSource r4, $r16, $r30, $r31, $r34, $r37;
        com.android.internal.location.ProviderRequest r5, $r15;
        java.util.Iterator r6, r7;
        long l0, $l2, $l3, $l4, $l9, $l16, $l17, $l20;
        com.android.server.LocationManagerService$UpdateRecord r8, r9;
        android.location.LocationRequest r10, $r26;
        java.lang.Object $r11, $r13, $r23, $r36;
        java.util.HashMap $r12, $r14;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r22;
        boolean $z0, $z1, $z2, $z3, $z7;
        int $i5, $i6, $i7, $i10, $i11, $i12, $i13, $i14, $i15, $i19;
        com.android.server.LocationManagerService$Receiver $r24, $r25, $r28, $r29, $r32, $r35, $r38, $r39, $r40, $r41, $r42;
        byte $b8, $b18;
        java.util.List $r44;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $r12 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r11 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.location.LocationProviderInterface) $r11;

        if r2 != null goto label1;

        return;

     label1:
        $r14 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r13 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.ArrayList) $r13;

        $r16 = new android.os.WorkSource;

        specialinvoke $r16.<android.os.WorkSource: void <init>()>();

        r4 = $r16;

        $r15 = new com.android.internal.location.ProviderRequest;

        specialinvoke $r15.<com.android.internal.location.ProviderRequest: void <init>()>();

        r5 = $r15;

        if r3 == null goto label6;

        r6 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r36 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.android.server.LocationManagerService$UpdateRecord) $r36;

        $r42 = r9.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i13 = $r42.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $i14 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i13);

        $i15 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        if $i14 != $i15 goto label2;

        $r39 = r9.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i19 = $r39.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $r40 = r9.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r43 = $r40.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r41 = r9.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i12 = $r41.<com.android.server.LocationManagerService$Receiver: int mAllowedResolutionLevel>;

        $z7 = virtualinvoke r0.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>($i19, $r43, $i12);

        if $z7 == 0 goto label2;

        r10 = r9.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $r44 = r5.<com.android.internal.location.ProviderRequest: java.util.List locationRequests>;

        interfaceinvoke $r44.<java.util.List: boolean add(java.lang.Object)>(r10);

        $l16 = virtualinvoke r10.<android.location.LocationRequest: long getInterval()>();

        $l17 = r5.<com.android.internal.location.ProviderRequest: long interval>;

        $b18 = $l16 cmp $l17;

        if $b18 >= 0 goto label2;

        r5.<com.android.internal.location.ProviderRequest: boolean reportLocation> = 1;

        $l20 = virtualinvoke r10.<android.location.LocationRequest: long getInterval()>();

        r5.<com.android.internal.location.ProviderRequest: long interval> = $l20;

        goto label2;

     label3:
        $z2 = r5.<com.android.internal.location.ProviderRequest: boolean reportLocation>;

        if $z2 == 0 goto label6;

        $l2 = r5.<com.android.internal.location.ProviderRequest: long interval>;

        $l3 = 1000L + $l2;

        $l4 = 3L * $l3;

        l0 = $l4 / 2L;

        r7 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r23 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.android.server.LocationManagerService$UpdateRecord) $r23;

        $r24 = r8.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i7 = $r24.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $i5 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i7);

        $i6 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        if $i5 != $i6 goto label4;

        $r26 = r8.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $l9 = virtualinvoke $r26.<android.location.LocationRequest: long getInterval()>();

        $b8 = $l9 cmp l0;

        if $b8 > 0 goto label4;

        $r25 = r8.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r30 = $r25.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        if $r30 == null goto label5;

        $r32 = r8.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r31 = $r32.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        $i11 = virtualinvoke $r31.<android.os.WorkSource: int size()>();

        if $i11 <= 0 goto label5;

        $r35 = r8.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r34 = $r35.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        $r33 = virtualinvoke $r34.<android.os.WorkSource: java.lang.String getName(int)>(0);

        if $r33 == null goto label5;

        $r38 = r8.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r37 = $r38.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        virtualinvoke r4.<android.os.WorkSource: boolean add(android.os.WorkSource)>($r37);

        goto label4;

     label5:
        $r29 = r8.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i10 = $r29.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $r28 = r8.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r27 = $r28.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        virtualinvoke r4.<android.os.WorkSource: boolean add(int,java.lang.String)>($i10, $r27);

        goto label4;

     label6:
        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label7;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider request: ");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r21);

     label7:
        interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: void setRequest(com.android.internal.location.ProviderRequest,android.os.WorkSource)>(r5, r4);

        return;
    }

    private void checkCallerIsProvider()
    {
        com.android.server.LocationManagerService r0;
        android.content.Context $r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_LOCATION_PROVIDER");

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isUidALocationProvider(int)>($i1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("need INSTALL_LOCATION_PROVIDER permission, or UID of a currently bound location provider");

        throw $r2;
    }

    private void checkDeviceStatsAllowed()
    {
        com.android.server.LocationManagerService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_DEVICE_STATS", null);

        return;
    }

    private com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener, android.app.PendingIntent, int, int, java.lang.String, android.os.WorkSource, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.ILocationListener r1;
        android.app.PendingIntent r2;
        int i0, i1;
        java.lang.String r3;
        android.os.WorkSource r4;
        boolean z0;
        com.android.server.LocationManagerService$Receiver $r5, $r6;
        java.lang.IllegalArgumentException $r7, $r8;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.ILocationListener;

        r2 := @parameter1: android.app.PendingIntent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: android.os.WorkSource;

        z0 := @parameter6: boolean;

        if r2 != null goto label1;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("need either listener or intent");

        throw $r8;

     label1:
        if r2 == null goto label2;

        if r1 == null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot register both listener and intent");

        throw $r7;

     label2:
        if r2 == null goto label3;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPendingIntent(android.app.PendingIntent)>(r2);

        $r6 = specialinvoke r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(r2, i0, i1, r3, r4, z0);

        return $r6;

     label3:
        $r5 = specialinvoke r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String,android.os.WorkSource,boolean)>(r1, i0, i1, r3, r4, z0);

        return $r5;
    }

    private void checkMockPermissionsSafe()
    {
        com.android.server.LocationManagerService r0;
        boolean z0;
        android.content.Context $r1, $r3;
        android.content.ContentResolver $r2;
        int $i0, $i1, i2;
        java.lang.SecurityException $r4, $r5;

        r0 := @this: com.android.server.LocationManagerService;

        z0 = 1;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "mock_location", 0);

        i2 = (int) 1;

        if $i0 != i2 goto label2;

     label1:
        if z0 != 0 goto label3;

        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_MOCK_LOCATION secure setting");

        throw $r5;

     label2:
        z0 = 0;

        goto label1;

     label3:
        $r3 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_MOCK_LOCATION");

        if $i1 == 0 goto label4;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_MOCK_LOCATION permission");

        throw $r4;

     label4:
        return;
    }

    private void checkPackageName(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r8, $r9, $r15, $r18;
        int i0, i1, i2;
        java.lang.String[] r2;
        android.content.pm.PackageManager $r3;
        java.lang.SecurityException $r4, $r11, $r14;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r12, $r13, $r16, $r17, $r19;
        boolean $z0;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r14 = new java.lang.SecurityException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid package name: ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label1:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.LocationManagerService: android.content.pm.PackageManager mPackageManager>;

        r2 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        if r2 != null goto label2;

        $r11 = new java.lang.SecurityException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid UID ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label2:
        i1 = lengthof r2;

        i2 = 0;

     label3:
        if i2 >= i1 goto label5;

        $r9 = r2[i2];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label4;

        return;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        $r4 = new java.lang.SecurityException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid package name: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    private void checkPendingIntent(android.app.PendingIntent)
    {
        com.android.server.LocationManagerService r0;
        android.app.PendingIntent r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.app.PendingIntent;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid pending intent: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        return;
    }

    private void checkResolutionLevelIsSufficientForGeofenceUse(int)
    {
        com.android.server.LocationManagerService r0;
        int i0;
        java.lang.SecurityException $r1;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        if i0 >= 2 goto label1;

        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Geofence usage requires ACCESS_FINE_LOCATION permission");

        throw $r1;

     label1:
        return;
    }

    private void checkResolutionLevelIsSufficientForProviderUse(int, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1;
        java.lang.String r1, $r7, $r13, $r21;
        java.lang.SecurityException $r2, $r8, $r16;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 = specialinvoke r0.<com.android.server.LocationManagerService: int getMinimumResolutionLevelForProviderUse(java.lang.String)>(r1);

        if i0 >= i1 goto label4;

        tableswitch(i1)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.SecurityException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Insufficient permission for \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" location provider.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label2:
        $r8 = new java.lang.SecurityException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" location provider ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requires ACCESS_FINE_LOCATION permission.");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label3:
        $r16 = new java.lang.SecurityException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" location provider ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requires ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permission.");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.SecurityException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label4:
        return;
    }

    private void checkUpdateAppOpsAllowed()
    {
        com.android.server.LocationManagerService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_APP_OPS_STATS", null);

        return;
    }

    private android.location.LocationRequest createSanitizedRequest(android.location.LocationRequest, int)
    {
        com.android.server.LocationManagerService r0;
        android.location.LocationRequest r1, r2, $r3;
        int i0, $i5;
        long $l1, $l2, $l4, $l6, $l8;
        byte $b3, $b7, $b9;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.LocationRequest;

        i0 := @parameter1: int;

        $r3 = new android.location.LocationRequest;

        specialinvoke $r3.<android.location.LocationRequest: void <init>(android.location.LocationRequest)>(r1);

        r2 = $r3;

        if i0 >= 2 goto label3;

        $i5 = virtualinvoke r2.<android.location.LocationRequest: int getQuality()>();

        lookupswitch($i5)
        {
            case 100: goto label5;
            case 203: goto label6;
            default: goto label1;
        };

     label1:
        $l6 = virtualinvoke r2.<android.location.LocationRequest: long getInterval()>();

        $b7 = $l6 cmp 600000L;

        if $b7 >= 0 goto label2;

        virtualinvoke r2.<android.location.LocationRequest: android.location.LocationRequest setInterval(long)>(600000L);

     label2:
        $l8 = virtualinvoke r2.<android.location.LocationRequest: long getFastestInterval()>();

        $b9 = $l8 cmp 600000L;

        if $b9 >= 0 goto label3;

        virtualinvoke r2.<android.location.LocationRequest: android.location.LocationRequest setFastestInterval(long)>(600000L);

     label3:
        $l1 = virtualinvoke r2.<android.location.LocationRequest: long getFastestInterval()>();

        $l2 = virtualinvoke r2.<android.location.LocationRequest: long getInterval()>();

        $b3 = $l1 cmp $l2;

        if $b3 <= 0 goto label4;

        $l4 = virtualinvoke r1.<android.location.LocationRequest: long getInterval()>();

        virtualinvoke r1.<android.location.LocationRequest: android.location.LocationRequest setFastestInterval(long)>($l4);

     label4:
        return r2;

     label5:
        virtualinvoke r2.<android.location.LocationRequest: android.location.LocationRequest setQuality(int)>(102);

        goto label1;

     label6:
        virtualinvoke r2.<android.location.LocationRequest: android.location.LocationRequest setQuality(int)>(201);

        goto label1;
    }

    private boolean doesPackageHaveUid(int, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1;
        java.lang.String r1;
        android.content.pm.PackageManager $r3;
        android.content.pm.ApplicationInfo $r4;
        android.content.pm.PackageManager$NameNotFoundException $r5;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $r3 = r0.<com.android.server.LocationManagerService: android.content.pm.PackageManager mPackageManager>;

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r1, 0);

        i1 = $r4.<android.content.pm.ApplicationInfo: int uid>;

     label3:
        if i1 != i0 goto label1;

        return 1;

     label4:
        $r5 := @caughtexception;

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label4;
    }

    private void ensureFallbackFusedProviderPresentLocked(java.util.ArrayList)
    {
        com.android.server.LocationManagerService r0;
        java.util.ArrayList r1, r4;
        android.content.pm.PackageManager r2;
        java.lang.String r3, r7, $r28, $r33, $r34, $r38, $r41, $r46, $r54;
        java.util.Iterator r5;
        android.content.pm.ResolveInfo r6;
        android.content.Context $r9, $r10, $r11;
        android.content.Intent $r12;
        java.util.List $r13;
        int $i0, $i1, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r14;
        java.lang.IllegalStateException $r15;
        android.content.pm.PackageInfo $r16;
        android.content.pm.ServiceInfo $r17, $r20, $r22, $r26;
        android.content.pm.Signature[] $r18;
        android.os.Bundle $r19, $r21;
        java.lang.StringBuilder $r23, $r24, $r25, $r29, $r30, $r31, $r32, $r35, $r36, $r37, $r39, $r40, $r42, $r43, $r44, $r45, $r48, $r49, $r50, $r51, $r52, $r53, $r55;
        android.content.pm.ApplicationInfo $r27;
        android.content.pm.PackageManager$NameNotFoundException $r47;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.util.ArrayList;

        $r9 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r2 = virtualinvoke $r9.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r10 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r3 = virtualinvoke $r10.<android.content.Context: java.lang.String getPackageName()>();

        $r11 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r4 = staticinvoke <com.android.server.ServiceWatcher: java.util.ArrayList getSignatureSets(android.content.Context,java.util.List)>($r11, r1);

        $r12 = new android.content.Intent;

        specialinvoke $r12.<android.content.Intent: void <init>(java.lang.String)>("com.android.location.service.FusedLocationProvider");

        $i0 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        $r13 = virtualinvoke r2.<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>($r12, 128, $i0);

        r5 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.content.pm.ResolveInfo) $r14;

        $r17 = r6.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        r7 = $r17.<android.content.pm.ServiceInfo: java.lang.String packageName>;

     label02:
        $r16 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r7, 64);

        $r18 = $r16.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        $z1 = staticinvoke <com.android.server.ServiceWatcher: boolean isSignatureMatch(android.content.pm.Signature[],java.util.List)>($r18, r4);

        if $z1 != 0 goto label05;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resolves service ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.android.location.service.FusedLocationProvider");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but has wrong signature, ignoring");

        $r46 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r46);

     label03:
        goto label01;

     label04:
        $r47 := @caughtexception;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing package: ");

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r54 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocationManagerService", $r54);

        goto label01;

     label05:
        $r20 = r6.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r19 = $r20.<android.content.pm.ServiceInfo: android.os.Bundle metaData>;

        if $r19 != null goto label06;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found fused provider without metadata: ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r41 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r41);

        goto label01;

     label06:
        $r22 = r6.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r21 = $r22.<android.content.pm.ServiceInfo: android.os.Bundle metaData>;

        $i1 = virtualinvoke $r21.<android.os.Bundle: int getInt(java.lang.String,int)>("serviceVersion", -1);

        if $i1 != 0 goto label10;

        $r26 = r6.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r27 = $r26.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r27.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = 1 & $i4;

        if $i5 != 0 goto label07;

        $z5 = <com.android.server.LocationManagerService: boolean D>;

        if $z5 == 0 goto label01;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fallback candidate not in /system: ");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r38);

        goto label01;

     label07:
        $i3 = virtualinvoke r2.<android.content.pm.PackageManager: int checkSignatures(java.lang.String,java.lang.String)>(r3, r7);

        if $i3 == 0 goto label08;

        $z4 = <com.android.server.LocationManagerService: boolean D>;

        if $z4 == 0 goto label01;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fallback candidate not signed the same as system: ");

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r34);

        goto label01;

     label08:
        $z3 = <com.android.server.LocationManagerService: boolean D>;

        if $z3 == 0 goto label09;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found fallback provider: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r33);

     label09:
        return;

     label10:
        $z2 = <com.android.server.LocationManagerService: boolean D>;

        if $z2 == 0 goto label01;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fallback candidate not version 0: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r28);

        goto label01;

     label11:
        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to find a fused location provider that is in the system partition with version 0 and signed with the platform certificate. Such a package is needed to provide a default fused location provider in the event that no other fused location provider has been installed or is currently available. For example, coreOnly boot mode when decrypting the data partition. The fallback must also be marked coreApp=\"true\" in the manifest");

        throw $r15;

        catch android.content.pm.PackageManager$NameNotFoundException from label02 to label03 with label04;
    }

    private int getAllowedResolutionLevel(int, int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, $i2, $i3;
        android.content.Context $r1, $r2;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACCESS_FINE_LOCATION", i0, i1);

        if $i2 != 0 goto label1;

        return 2;

     label1:
        $r2 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r2.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACCESS_COARSE_LOCATION", i0, i1);

        if $i3 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private int getCallerAllowedResolutionLevel()
    {
        com.android.server.LocationManagerService r0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.LocationManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = specialinvoke r0.<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)>($i0, $i1);

        return $i2;
    }

    private int getMinimumResolutionLevelForProviderUse(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r4, $r5, $r6, $r7;
        com.android.server.location.LocationProviderInterface r2;
        com.android.internal.location.ProviderProperties r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.HashMap $r8;
        java.lang.Object $r9;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $r4 = "gps";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = "passive";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 2;

     label2:
        $r6 = "network";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label3;

        $r7 = "fused";

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

     label3:
        return 1;

     label4:
        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.location.LocationProviderInterface) $r9;

        if r2 == null goto label1;

        r3 = interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        if r3 == null goto label1;

        $z4 = r3.<com.android.internal.location.ProviderProperties: boolean mRequiresSatellite>;

        if $z4 != 0 goto label1;

        $z6 = r3.<com.android.internal.location.ProviderProperties: boolean mRequiresNetwork>;

        if $z6 != 0 goto label5;

        $z5 = r3.<com.android.internal.location.ProviderProperties: boolean mRequiresCell>;

        if $z5 == 0 goto label1;

     label5:
        return 1;
    }

    private com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent, int, int, java.lang.String, android.os.WorkSource, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.app.PendingIntent r1;
        int i0, i1;
        java.lang.String r2;
        android.os.WorkSource r3;
        boolean z0;
        com.android.server.LocationManagerService$Receiver r4, $r7;
        java.util.HashMap $r5, $r8;
        java.lang.Object $r6;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.app.PendingIntent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: android.os.WorkSource;

        z0 := @parameter5: boolean;

        $r5 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.LocationManagerService$Receiver) $r6;

        if r4 != null goto label1;

        $r7 = new com.android.server.LocationManagerService$Receiver;

        specialinvoke $r7.<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(r0, null, r1, i0, i1, r2, r3, z0);

        r4 = $r7;

        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label1:
        return r4;
    }

    private com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener, int, int, java.lang.String, android.os.WorkSource, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.ILocationListener r1, $r11;
        int i0, i1;
        java.lang.String r2;
        android.os.WorkSource r3;
        boolean z0;
        android.os.IBinder r4, $r14;
        com.android.server.LocationManagerService$Receiver r5, r15;
        android.os.RemoteException r6, $r13;
        java.util.HashMap $r7, $r10;
        java.lang.Object $r8;
        android.os.IBinder$DeathRecipient r16;
        java.lang.Throwable r17;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.ILocationListener;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: android.os.WorkSource;

        z0 := @parameter5: boolean;

        r4 = interfaceinvoke r1.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        $r7 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.LocationManagerService$Receiver) $r8;

        if r5 != null goto label2;

        r15 = new com.android.server.LocationManagerService$Receiver;

        specialinvoke r15.<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(r0, r1, null, i0, i1, r2, r3, z0);

        r5 = r15;

        $r10 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

     label1:
        $r11 = virtualinvoke r5.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        $r14 = interfaceinvoke $r11.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        r16 = (android.os.IBinder$DeathRecipient) r5;

        interfaceinvoke $r14.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r16, 0);

     label2:
        return r5;

     label3:
        $r13 := @caughtexception;

        r6 = $r13;

        r17 = (java.lang.Throwable) r6;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "linkToDeath failed:", r17);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private java.lang.String getResolutionPermission(int)
    {
        com.android.server.LocationManagerService r0;
        int i0;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        return null;

     label2:
        return "android.permission.ACCESS_FINE_LOCATION";

     label3:
        return "android.permission.ACCESS_COARSE_LOCATION";
    }

    private void handleLocationChanged(android.location.Location, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Location r1, r2, $r6;
        boolean z0, $z1, $z2, $z3;
        java.lang.String r3;
        java.lang.Object r4;
        java.lang.Throwable r5, $r8;
        com.android.server.location.PassiveProvider $r7;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Location;

        z0 := @parameter1: boolean;

        $r6 = new android.location.Location;

        specialinvoke $r6.<android.location.Location: void <init>(android.location.Location)>(r1);

        r2 = $r6;

        r3 = virtualinvoke r2.<android.location.Location: java.lang.String getProvider()>();

        $z1 = virtualinvoke r2.<android.location.Location: boolean isFromMockProvider()>();

        if $z1 != 0 goto label01;

        $z3 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isMockProvider(java.lang.String)>(r3);

        if $z3 == 0 goto label01;

        virtualinvoke r2.<android.location.Location: void setIsFromMockProvider(boolean)>(1);

     label01:
        r4 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label02:
        $z2 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(r3);

        if $z2 == 0 goto label06;

     label03:
        if z0 != 0 goto label05;

     label04:
        $r7 = r0.<com.android.server.LocationManagerService: com.android.server.location.PassiveProvider mPassiveProvider>;

        virtualinvoke $r7.<com.android.server.location.PassiveProvider: void updateLocation(android.location.Location)>(r2);

     label05:
        specialinvoke r0.<com.android.server.LocationManagerService: void handleLocationChangedLocked(android.location.Location,boolean)>(r2, z0);

     label06:
        exitmonitor r4;

     label07:
        return;

     label08:
        $r8 := @caughtexception;

        r5 = $r8;

     label09:
        exitmonitor r4;

     label10:
        throw r5;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void handleLocationChangedLocked(android.location.Location, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Location r1, r4, r5, r6, r7, r9, r18, r19, r20, $r54, $r70, $r80;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z12, $z13, $z14, $z15, $z16, $z17;
        long l0, l1, l4, $l5, $l6, $l7, $l16;
        java.lang.String r2, $r32, $r38, $r43, $r47, $r51, $r55, $r58, $r66, $r67, $r76, $r78;
        com.android.server.location.LocationProviderInterface r3;
        java.util.ArrayList r8, r11, r13, $r39, $r40;
        android.os.Bundle r10, $r29;
        int i2, i3, $i9, $i10, $i11, $i12, $i14, $i15, $i17, $i23, $i24;
        java.util.Iterator r12, r14, r15;
        com.android.server.LocationManagerService$Receiver r16, $r35;
        com.android.server.LocationManagerService$UpdateRecord r17, $r31;
        java.lang.Object $r21, $r24, $r26, $r27, $r30, $r34, $r36;
        java.util.HashMap $r22, $r23, $r25, $r28, $r71, $r81;
        byte $b8, $b13, $b18, $b19;
        com.android.server.location.LocationBlacklist $r33;
        android.location.LocationRequest $r37, $r41, $r49;
        java.lang.StringBuilder $r42, $r44, $r45, $r46, $r48, $r50, $r52, $r53, $r56, $r57, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r68, $r69, $r73, $r74, $r75, $r77;
        com.android.server.location.LocationFudger $r79;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Location;

        z0 := @parameter1: boolean;

        $z4 = <com.android.server.LocationManagerService: boolean D>;

        if $z4 == 0 goto label01;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("incoming location: ");

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r76);

     label01:
        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        if z0 == 0 goto label04;

        r2 = "passive";

     label02:
        $r22 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r21 = virtualinvoke $r22.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.server.location.LocationProviderInterface) $r21;

        if r3 != null goto label05;

     label03:
        return;

     label04:
        r2 = virtualinvoke r1.<android.location.Location: java.lang.String getProvider()>();

        goto label02;

     label05:
        r4 = virtualinvoke r1.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

        $r25 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        $r24 = virtualinvoke $r25.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (android.location.Location) $r24;

        if r5 != null goto label11;

        $r70 = new android.location.Location;

        specialinvoke $r70.<android.location.Location: void <init>(java.lang.String)>(r2);

        r5 = $r70;

        $r71 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r71.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5);

     label06:
        virtualinvoke r5.<android.location.Location: void set(android.location.Location)>(r1);

        $r23 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        $r26 = virtualinvoke $r23.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r6 = (android.location.Location) $r26;

        if r6 != null goto label07;

        $r80 = new android.location.Location;

        specialinvoke $r80.<android.location.Location: void <init>(android.location.Location)>(r1);

        r6 = $r80;

        $r81 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r81.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r6);

     label07:
        $l7 = virtualinvoke r1.<android.location.Location: long getElapsedRealtimeNanos()>();

        $l6 = virtualinvoke r6.<android.location.Location: long getElapsedRealtimeNanos()>();

        $l5 = $l7 - $l6;

        $b8 = $l5 cmp 600000000000L;

        if $b8 <= 0 goto label08;

        virtualinvoke r6.<android.location.Location: void set(android.location.Location)>(r1);

     label08:
        r7 = virtualinvoke r6.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

        $r28 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r27 = virtualinvoke $r28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r8 = (java.util.ArrayList) $r27;

        if r8 == null goto label03;

        $i9 = virtualinvoke r8.<java.util.ArrayList: int size()>();

        if $i9 == 0 goto label03;

        r9 = null;

        if r7 == null goto label09;

        $r79 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger>;

        r9 = virtualinvoke $r79.<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)>(r7);

     label09:
        l1 = interfaceinvoke r3.<com.android.server.location.LocationProviderInterface: long getStatusUpdateTime()>();

        $r29 = new android.os.Bundle;

        specialinvoke $r29.<android.os.Bundle: void <init>()>();

        r10 = $r29;

        i2 = interfaceinvoke r3.<com.android.server.location.LocationProviderInterface: int getStatus(android.os.Bundle)>(r10);

        r11 = null;

        r13 = null;

        r12 = virtualinvoke r8.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z6 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label28;

        $r36 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.android.server.LocationManagerService$UpdateRecord) $r36;

        r16 = r17.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i11 = r16.<com.android.server.LocationManagerService$Receiver: int mUid>;

        i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i11);

        $i10 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        if i3 == $i10 goto label12;

        $i24 = r16.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $z17 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isUidALocationProvider(int)>($i24);

        if $z17 != 0 goto label12;

        $z16 = <com.android.server.LocationManagerService: boolean D>;

        if $z16 == 0 goto label10;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipping loc update for background user ");

        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (current user: ");

        $i23 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", app: ");

        $r66 = r16.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r77 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r78);

        goto label10;

     label11:
        r20 = virtualinvoke r5.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

        if r4 != null goto label06;

        if r20 == null goto label06;

        virtualinvoke r1.<android.location.Location: void setExtraLocation(java.lang.String,android.location.Location)>("noGPSLocation", r20);

        goto label06;

     label12:
        $r33 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        $r32 = r16.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $z9 = virtualinvoke $r33.<com.android.server.location.LocationBlacklist: boolean isBlacklisted(java.lang.String)>($r32);

        if $z9 == 0 goto label13;

        $z15 = <com.android.server.LocationManagerService: boolean D>;

        if $z15 == 0 goto label10;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipping loc update for blacklisted app: ");

        $r55 = r16.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r68 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r67);

        goto label10;

     label13:
        $i15 = r16.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $r38 = r16.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $i14 = r16.<com.android.server.LocationManagerService$Receiver: int mAllowedResolutionLevel>;

        $z8 = virtualinvoke r0.<com.android.server.LocationManagerService: boolean reportLocationAccessNoThrow(int,java.lang.String,int)>($i15, $r38, $i14);

        if $z8 != 0 goto label14;

        $z14 = <com.android.server.LocationManagerService: boolean D>;

        if $z14 == 0 goto label10;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipping loc update for no op app: ");

        $r51 = r16.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r59 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r58);

        goto label10;

     label14:
        $i12 = r16.<com.android.server.LocationManagerService$Receiver: int mAllowedResolutionLevel>;

        if $i12 >= 2 goto label26;

        r18 = r9;

     label15:
        z1 = 0;

        if r18 == null goto label19;

        r19 = r17.<com.android.server.LocationManagerService$UpdateRecord: android.location.Location mLastFixBroadcast>;

        if r19 == null goto label16;

        z3 = staticinvoke <com.android.server.LocationManagerService: boolean shouldBroadcastSafe(android.location.Location,android.location.Location,com.android.server.LocationManagerService$UpdateRecord,long)>(r18, r19, r17, l0);

        z1 = 0;

        if z3 == 0 goto label19;

     label16:
        if r19 != null goto label27;

        $r54 = new android.location.Location;

        specialinvoke $r54.<android.location.Location: void <init>(android.location.Location)>(r18);

        r17.<com.android.server.LocationManagerService$UpdateRecord: android.location.Location mLastFixBroadcast> = $r54;

     label17:
        z2 = virtualinvoke r16.<com.android.server.LocationManagerService$Receiver: boolean callLocationChangedLocked(android.location.Location)>(r18);

        z1 = 0;

        if z2 != 0 goto label18;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException calling onLocationChanged on ");

        $r46 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r47);

        z1 = 1;

     label18:
        $r49 = r17.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        virtualinvoke $r49.<android.location.LocationRequest: void decrementNumUpdates()>();

     label19:
        l4 = r17.<com.android.server.LocationManagerService$UpdateRecord: long mLastStatusBroadcast>;

        $b13 = l1 cmp l4;

        if $b13 <= 0 goto label21;

        $b19 = l4 cmp 0L;

        if $b19 != 0 goto label20;

        if i2 == 2 goto label21;

     label20:
        r17.<com.android.server.LocationManagerService$UpdateRecord: long mLastStatusBroadcast> = l1;

        $z13 = virtualinvoke r16.<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)>(r2, i2, r10);

        if $z13 != 0 goto label21;

        z1 = 1;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException calling onStatusChanged on ");

        $r42 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r43);

     label21:
        $r37 = r17.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $i17 = virtualinvoke $r37.<android.location.LocationRequest: int getNumUpdates()>();

        if $i17 <= 0 goto label22;

        $r41 = r17.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $l16 = virtualinvoke $r41.<android.location.LocationRequest: long getExpireAt()>();

        $b18 = $l16 cmp l0;

        if $b18 >= 0 goto label24;

     label22:
        if r13 != null goto label23;

        $r39 = new java.util.ArrayList;

        specialinvoke $r39.<java.util.ArrayList: void <init>()>();

        r13 = $r39;

     label23:
        virtualinvoke r13.<java.util.ArrayList: boolean add(java.lang.Object)>(r17);

     label24:
        if z1 == 0 goto label10;

        if r11 != null goto label25;

        $r40 = new java.util.ArrayList;

        specialinvoke $r40.<java.util.ArrayList: void <init>()>();

        r11 = $r40;

     label25:
        $z12 = virtualinvoke r11.<java.util.ArrayList: boolean contains(java.lang.Object)>(r16);

        if $z12 != 0 goto label10;

        virtualinvoke r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r16);

        goto label10;

     label26:
        r18 = r5;

        goto label15;

     label27:
        virtualinvoke r19.<android.location.Location: void set(android.location.Location)>(r18);

        goto label17;

     label28:
        if r11 == null goto label30;

        r14 = virtualinvoke r11.<java.util.ArrayList: java.util.Iterator iterator()>();

     label29:
        $z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label30;

        $r34 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r35 = (com.android.server.LocationManagerService$Receiver) $r34;

        specialinvoke r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>($r35);

        goto label29;

     label30:
        if r13 == null goto label03;

        r15 = virtualinvoke r13.<java.util.ArrayList: java.util.Iterator iterator()>();

     label31:
        $z7 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label32;

        $r30 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r31 = (com.android.server.LocationManagerService$UpdateRecord) $r30;

        virtualinvoke $r31.<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)>(1);

        goto label31;

     label32:
        specialinvoke r0.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(r2);

        return;
    }

    private boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        java.util.Set $r2, $r3;
        boolean $z0, $z1, $z2;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        int $i0;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r4 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        $z2 = staticinvoke <android.provider.Settings$Secure: boolean isLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,int)>($r5, r1, $i0);

        return $z2;
    }

    private boolean isAllowedByUserSettingsLocked(java.lang.String, int)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        int i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $i2 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        if $i1 == $i2 goto label1;

        $z1 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isUidALocationProvider(int)>(i0);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(r1);

        return $z0;
    }

    private boolean isMockProvider(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;
        boolean z0;
        java.util.HashMap $r4;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isUidALocationProvider(int)
    {
        com.android.server.LocationManagerService r0;
        int i0;
        java.util.Iterator r1;
        com.android.server.location.GeocoderProxy $r2, $r7;
        java.util.ArrayList $r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        com.android.server.location.LocationProviderProxy $r5;
        java.lang.String $r6, $r8;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        if i0 != 1000 goto label2;

     label1:
        return 1;

     label2:
        $r2 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r2 == null goto label3;

        $r7 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        $r8 = virtualinvoke $r7.<com.android.server.location.GeocoderProxy: java.lang.String getConnectedPackageName()>();

        $z2 = specialinvoke r0.<com.android.server.LocationManagerService: boolean doesPackageHaveUid(int,java.lang.String)>(i0, $r8);

        if $z2 != 0 goto label1;

     label3:
        $r3 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.server.location.LocationProviderProxy) $r4;

        $r6 = virtualinvoke $r5.<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()>();

        $z1 = specialinvoke r0.<com.android.server.LocationManagerService: boolean doesPackageHaveUid(int,java.lang.String)>(i0, $r6);

        if $z1 == 0 goto label4;

        return 1;

     label5:
        return 0;
    }

    private void loadProvidersLocked()
    {
        com.android.server.LocationManagerService r0;
        com.android.server.location.PassiveProvider r1, r55;
        com.android.server.location.GpsLocationProvider r2, r56;
        android.content.res.Resources r3;
        java.util.ArrayList r4, $r37, $r46, r57;
        java.lang.String[] r5;
        com.android.server.location.LocationProviderProxy r6, r7;
        com.android.server.location.FlpHardwareProvider r8;
        java.util.Set $r10, $r40;
        java.lang.String $r11, $r39, $r47, $r51;
        com.android.server.LocationManagerService$LocationWorkerHandler $r12, $r19, $r21, $r25, $r31, $r33;
        android.os.Looper $r14;
        android.content.Context $r15, $r16, $r18, $r20, $r23, $r26, $r28, $r30;
        boolean $z1, $z2;
        com.android.server.location.GeocoderProxy $r24, $r27;
        com.android.server.location.FusedProxy $r29;
        android.hardware.location.IFusedLocationHardware $r32;
        com.android.server.location.GeofenceProxy $r34;
        android.location.IFusedGeofenceHardware $r35;
        android.location.IGpsGeofenceHardware $r36;
        java.util.HashMap $r38, $r44, $r54;
        java.util.List $r41;
        android.location.IGpsStatusProvider $r48;
        android.location.INetInitiatedListener $r49;
        java.lang.StringBuilder $r50, $r52, r58;
        java.lang.IllegalStateException r59;
        android.location.ILocationManager r60, r61;

        r0 := @this: com.android.server.LocationManagerService;

        r55 = new com.android.server.location.PassiveProvider;

        r60 = (android.location.ILocationManager) r0;

        specialinvoke r55.<com.android.server.location.PassiveProvider: void <init>(android.location.ILocationManager)>(r60);

        r1 = r55;

        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r1);

        $r10 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $r11 = virtualinvoke r1.<com.android.server.location.PassiveProvider: java.lang.String getName()>();

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r11);

        r0.<com.android.server.LocationManagerService: com.android.server.location.PassiveProvider mPassiveProvider> = r1;

        r56 = new com.android.server.location.GpsLocationProvider;

        $r15 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r12 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r14 = virtualinvoke $r12.<com.android.server.LocationManagerService$LocationWorkerHandler: android.os.Looper getLooper()>();

        r61 = (android.location.ILocationManager) r0;

        specialinvoke r56.<com.android.server.location.GpsLocationProvider: void <init>(android.content.Context,android.location.ILocationManager,android.os.Looper)>($r15, r61, $r14);

        r2 = r56;

        $z1 = staticinvoke <com.android.server.location.GpsLocationProvider: boolean isSupported()>();

        if $z1 == 0 goto label01;

        $r48 = virtualinvoke r2.<com.android.server.location.GpsLocationProvider: android.location.IGpsStatusProvider getGpsStatusProvider()>();

        r0.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider> = $r48;

        $r49 = virtualinvoke r2.<com.android.server.location.GpsLocationProvider: android.location.INetInitiatedListener getNetInitiatedListener()>();

        r0.<com.android.server.LocationManagerService: android.location.INetInitiatedListener mNetInitiatedListener> = $r49;

        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r2);

        $r54 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        virtualinvoke $r54.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("gps", r2);

     label01:
        $r16 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r3 = virtualinvoke $r16.<android.content.Context: android.content.res.Resources getResources()>();

        r57 = new java.util.ArrayList;

        specialinvoke r57.<java.util.ArrayList: void <init>()>();

        r4 = r57;

        r5 = virtualinvoke r3.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236003);

        $z2 = <com.android.server.LocationManagerService: boolean D>;

        if $z2 == 0 goto label02;

        r58 = new java.lang.StringBuilder;

        specialinvoke r58.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("certificates for location providers pulled from: ");

        $r51 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r5);

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r47 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r47);

     label02:
        if r5 == null goto label03;

        $r41 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r5);

        virtualinvoke r4.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r41);

     label03:
        specialinvoke r0.<com.android.server.LocationManagerService: void ensureFallbackFusedProviderPresentLocked(java.util.ArrayList)>(r4);

        $r18 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r19 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        r6 = staticinvoke <com.android.server.location.LocationProviderProxy: com.android.server.location.LocationProviderProxy createAndBind(android.content.Context,java.lang.String,java.lang.String,int,int,int,android.os.Handler)>($r18, "network", "com.android.location.service.v3.NetworkLocationProvider", 17891376, 17039390, 17236003, $r19);

        if r6 == null goto label09;

        $r44 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        virtualinvoke $r44.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("network", r6);

        $r46 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders>;

        virtualinvoke $r46.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r6);

     label04:
        $r20 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r21 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        r7 = staticinvoke <com.android.server.location.LocationProviderProxy: com.android.server.location.LocationProviderProxy createAndBind(android.content.Context,java.lang.String,java.lang.String,int,int,int,android.os.Handler)>($r20, "fused", "com.android.location.service.FusedLocationProvider", 17891377, 17039391, 17236003, $r21);

        if r7 == null goto label10;

        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r7);

        $r37 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders>;

        virtualinvoke $r37.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

        $r40 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $r39 = virtualinvoke r7.<com.android.server.location.LocationProviderProxy: java.lang.String getName()>();

        interfaceinvoke $r40.<java.util.Set: boolean add(java.lang.Object)>($r39);

        $r38 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        virtualinvoke $r38.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("fused", r7);

     label05:
        $r23 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r25 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r24 = staticinvoke <com.android.server.location.GeocoderProxy: com.android.server.location.GeocoderProxy createAndBind(android.content.Context,int,int,int,android.os.Handler)>($r23, 17891378, 17039392, 17236003, $r25);

        r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider> = $r24;

        $r27 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r27 != null goto label06;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "no geocoder provider found");

     label06:
        $r28 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r8 = staticinvoke <com.android.server.location.FlpHardwareProvider: com.android.server.location.FlpHardwareProvider getInstance(android.content.Context)>($r28);

        $r26 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r31 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r32 = virtualinvoke r8.<com.android.server.location.FlpHardwareProvider: android.hardware.location.IFusedLocationHardware getLocationHardware()>();

        $r29 = staticinvoke <com.android.server.location.FusedProxy: com.android.server.location.FusedProxy createAndBind(android.content.Context,android.os.Handler,android.hardware.location.IFusedLocationHardware,int,int,int)>($r26, $r31, $r32, 17891377, 17039391, 17236003);

        if $r29 != null goto label07;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "No FusedProvider found.");

     label07:
        $r30 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r33 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r36 = virtualinvoke r2.<com.android.server.location.GpsLocationProvider: android.location.IGpsGeofenceHardware getGpsGeofenceProxy()>();

        $r35 = virtualinvoke r8.<com.android.server.location.FlpHardwareProvider: android.location.IFusedGeofenceHardware getGeofenceHardware()>();

        $r34 = staticinvoke <com.android.server.location.GeofenceProxy: com.android.server.location.GeofenceProxy createAndBind(android.content.Context,int,int,int,android.os.Handler,android.location.IGpsGeofenceHardware,android.location.IFusedGeofenceHardware)>($r30, 17891379, 17039393, 17236003, $r33, $r36, $r35);

        if $r34 != null goto label08;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "no geofence provider found");

     label08:
        return;

     label09:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocationManagerService", "no network location provider found");

        goto label04;

     label10:
        r59 = new java.lang.IllegalStateException;

        specialinvoke r59.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Location service needs a fused location provider");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "no fused location provider found", r59);

        goto label05;
    }

    private void log(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LocationManagerService", 2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LocationManagerService", r1);

     label1:
        return;
    }

    private java.lang.String pickBest(java.util.List)
    {
        com.android.server.LocationManagerService r0;
        java.util.List r1;
        boolean $z0, $z1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>("gps");

        if $z0 == 0 goto label1;

        return "gps";

     label1:
        $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>("network");

        if $z1 == 0 goto label2;

        return "network";

     label2:
        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    private void removeProviderLocked(com.android.server.location.LocationProviderInterface)
    {
        com.android.server.LocationManagerService r0;
        com.android.server.location.LocationProviderInterface r1;
        java.util.ArrayList $r2;
        java.util.HashMap $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: com.android.server.location.LocationProviderInterface;

        interfaceinvoke r1.<com.android.server.location.LocationProviderInterface: void disable()>();

        $r2 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r3 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r4 = interfaceinvoke r1.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        return;
    }

    private void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)
    {
        com.android.server.LocationManagerService r0;
        com.android.server.LocationManagerService$Receiver r1;
        java.util.HashSet r2, r26;
        java.util.HashMap r3, $r9;
        java.util.Iterator r4, r6;
        java.lang.String r5, $r21, $r22;
        java.lang.Throwable r7, $r24;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.lang.Object $r8, $r10, $r12, $r16;
        java.util.Collection $r13;
        java.util.Set $r14;
        com.android.server.LocationManagerService$UpdateRecord $r15;
        android.location.ILocationListener $r17;
        android.os.IBinder $r18;
        java.lang.StringBuilder $r19, $r23, r25;
        int $i0;
        android.os.IBinder$DeathRecipient r27;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: com.android.server.LocationManagerService$Receiver;

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label01;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remove ");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $r22 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("LocationManagerService", $r21);

     label01:
        $r9 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r8 = r1.<com.android.server.LocationManagerService$Receiver: java.lang.Object mKey>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r8);

        if $r10 == null goto label03;

        $z5 = virtualinvoke r1.<com.android.server.LocationManagerService$Receiver: boolean isListener()>();

        if $z5 == 0 goto label03;

        $r17 = virtualinvoke r1.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        $r18 = interfaceinvoke $r17.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        r27 = (android.os.IBinder$DeathRecipient) r1;

        interfaceinvoke $r18.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r27, 0);

        entermonitor r1;

     label02:
        virtualinvoke r1.<com.android.server.LocationManagerService$Receiver: void clearPendingBroadcastsLocked()>();

        exitmonitor r1;

     label03:
        virtualinvoke r1.<com.android.server.LocationManagerService$Receiver: void updateMonitoring(boolean)>(0);

        r26 = new java.util.HashSet;

        specialinvoke r26.<java.util.HashSet: void <init>()>();

        r2 = r26;

        r3 = r1.<com.android.server.LocationManagerService$Receiver: java.util.HashMap mUpdateRecords>;

        if r3 == null goto label09;

        $r13 = virtualinvoke r3.<java.util.HashMap: java.util.Collection values()>();

        r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r16 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (com.android.server.LocationManagerService$UpdateRecord) $r16;

        virtualinvoke $r15.<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)>(0);

        goto label04;

     label05:
        $r24 := @caughtexception;

        r7 = $r24;

     label06:
        exitmonitor r1;

     label07:
        throw r7;

     label08:
        $r14 = virtualinvoke r3.<java.util.HashMap: java.util.Set keySet()>();

        virtualinvoke r2.<java.util.HashSet: boolean addAll(java.util.Collection)>($r14);

     label09:
        r4 = virtualinvoke r2.<java.util.HashSet: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r12;

        $z2 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(r5);

        if $z2 == 0 goto label10;

        specialinvoke r0.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(r5);

        goto label10;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
    }

    private void requestLocationUpdatesLocked(android.location.LocationRequest, com.android.server.LocationManagerService$Receiver, int, int, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.LocationRequest r1;
        com.android.server.LocationManagerService$Receiver r2;
        int i0, i1, $i2;
        java.lang.String r3, r4, $r16, $r21, $r29;
        com.android.server.LocationManagerService$UpdateRecord r5, r6, $r10;
        boolean $z0, $z1;
        java.util.HashMap $r7, $r11;
        java.lang.Object $r8, $r12;
        com.android.server.location.LocationProviderInterface $r9;
        java.lang.IllegalArgumentException $r13, $r32;
        java.lang.StringBuilder $r14, $r15, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r30, $r31;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: com.android.server.LocationManagerService$Receiver;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        if r1 != null goto label1;

        r1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label1:
        r4 = virtualinvoke r1.<android.location.LocationRequest: java.lang.String getProvider()>();

        if r4 != null goto label2;

        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider name must not be null");

        throw $r32;

     label2:
        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label3;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("request ");

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r2);

        $r21 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r29);

     label3:
        $r7 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        $r9 = (com.android.server.location.LocationProviderInterface) $r8;

        if $r9 != null goto label4;

        $r13 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider doesn\'t exist: ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label4:
        $r10 = new com.android.server.LocationManagerService$UpdateRecord;

        specialinvoke $r10.<com.android.server.LocationManagerService$UpdateRecord: void <init>(com.android.server.LocationManagerService,java.lang.String,android.location.LocationRequest,com.android.server.LocationManagerService$Receiver)>(r0, r4, r1, r2);

        r5 = $r10;

        $r11 = r2.<com.android.server.LocationManagerService$Receiver: java.util.HashMap mUpdateRecords>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

        r6 = (com.android.server.LocationManagerService$UpdateRecord) $r12;

        if r6 == null goto label5;

        virtualinvoke r6.<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)>(0);

     label5:
        $z1 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(r4, i1);

        if $z1 == 0 goto label7;

        specialinvoke r0.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(r4);

     label6:
        virtualinvoke r2.<com.android.server.LocationManagerService$Receiver: void updateMonitoring(boolean)>(1);

        return;

     label7:
        virtualinvoke r2.<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)>(r4, 0);

        goto label6;
    }

    public static int resolutionLevelToOp(int)
    {
        int i0;
        byte b1;

        i0 := @parameter0: int;

        b1 = 1;

        if i0 == 0 goto label2;

        if i0 != 1 goto label1;

        b1 = 0;

     label1:
        return b1;

     label2:
        return -1;
    }

    private static boolean shouldBroadcastSafe(android.location.Location, android.location.Location, com.android.server.LocationManagerService$UpdateRecord, long)
    {
        android.location.Location r0, r1;
        com.android.server.LocationManagerService$UpdateRecord r2;
        long l0, l1, $l2, $l3, $l4, $l5, $l6, $l10;
        double d0, $d1;
        android.location.LocationRequest $r3, $r4, $r5, $r6;
        byte $b7, $b8, $b11, $b12;
        float $f0, $f1;
        int $i9;

        r0 := @parameter0: android.location.Location;

        r1 := @parameter1: android.location.Location;

        r2 := @parameter2: com.android.server.LocationManagerService$UpdateRecord;

        l0 := @parameter3: long;

        if r1 != null goto label1;

        return 1;

     label1:
        $r3 = r2.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        l1 = virtualinvoke $r3.<android.location.LocationRequest: long getFastestInterval()>();

        $l2 = virtualinvoke r0.<android.location.Location: long getElapsedRealtimeNanos()>();

        $l3 = virtualinvoke r1.<android.location.Location: long getElapsedRealtimeNanos()>();

        $l4 = $l2 - $l3;

        $l6 = $l4 / 1000000L;

        $l5 = l1 - 100L;

        $b7 = $l6 cmp $l5;

        if $b7 >= 0 goto label2;

        return 0;

     label2:
        $r4 = r2.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $f0 = virtualinvoke $r4.<android.location.LocationRequest: float getSmallestDisplacement()>();

        d0 = (double) $f0;

        $b8 = d0 cmpl 0.0;

        if $b8 <= 0 goto label3;

        $f1 = virtualinvoke r0.<android.location.Location: float distanceTo(android.location.Location)>(r1);

        $d1 = (double) $f1;

        $b12 = $d1 cmpg d0;

        if $b12 > 0 goto label3;

        return 0;

     label3:
        $r5 = r2.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $i9 = virtualinvoke $r5.<android.location.LocationRequest: int getNumUpdates()>();

        if $i9 > 0 goto label4;

        return 0;

     label4:
        $r6 = r2.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $l10 = virtualinvoke $r6.<android.location.LocationRequest: long getExpireAt()>();

        $b11 = $l10 cmp l0;

        if $b11 >= 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    private void switchUser(int)
    {
        com.android.server.LocationManagerService r0;
        int i0, $i1;
        java.lang.Object r1, $r9;
        java.lang.Throwable r2, $r12;
        java.util.Iterator r3;
        com.android.server.location.LocationBlacklist $r4;
        com.android.server.LocationManagerService$LocationWorkerHandler $r5;
        java.util.HashMap $r6, $r7;
        java.util.ArrayList $r8;
        boolean $z0;
        com.android.server.location.LocationProviderInterface $r10;
        java.lang.String $r11;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        virtualinvoke $r4.<com.android.server.location.LocationBlacklist: void switchUser(int)>(i0);

        $r5 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r5.<com.android.server.LocationManagerService$LocationWorkerHandler: void removeMessages(int)>(1);

        r1 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r6 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r6.<java.util.HashMap: void clear()>();

        $r7 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r7.<java.util.HashMap: void clear()>();

        $r8 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        r3 = virtualinvoke $r8.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (com.android.server.location.LocationProviderInterface) $r9;

        $r11 = interfaceinvoke $r10.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $i1 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean,int)>($r11, 0, $i1);

     label3:
        goto label2;

     label4:
        $r12 := @caughtexception;

        r2 = $r12;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        r0.<com.android.server.LocationManagerService: int mCurrentUserId> = i0;

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor r1;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    private void updateProviderListenersLocked(java.lang.String, boolean, int)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        boolean z0, $z1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        com.android.server.location.LocationProviderInterface r2;
        java.util.ArrayList r3, r4, $r16;
        com.android.server.LocationManagerService$UpdateRecord r5;
        java.util.HashMap $r6, $r8;
        java.lang.Object $r7, $r9, $r11, $r12;
        com.android.server.LocationManagerService$Receiver $r10, $r13, $r14, $r15;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r6 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.location.LocationProviderInterface) $r7;

        if r2 != null goto label02;

     label01:
        return;

     label02:
        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.ArrayList) $r9;

        r4 = null;

        i1 = 0;

        if r3 == null goto label07;

        i3 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        i4 = 0;

     label03:
        if i4 >= i3 goto label07;

        $r12 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r5 = (com.android.server.LocationManagerService$UpdateRecord) $r12;

        $r13 = r5.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i6 = $r13.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $i7 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i6);

        if $i7 != i0 goto label06;

        $r14 = r5.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $z1 = virtualinvoke $r14.<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)>(r1, z0);

        if $z1 != 0 goto label05;

        if r4 != null goto label04;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r4 = $r16;

     label04:
        $r15 = r5.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label05:
        i1 = i1 + 1;

     label06:
        i4 = i4 + 1;

        goto label03;

     label07:
        if r4 == null goto label09;

        $i5 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        i2 = -1 + $i5;

     label08:
        if i2 < 0 goto label09;

        $r11 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r10 = (com.android.server.LocationManagerService$Receiver) $r11;

        specialinvoke r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>($r10);

        i2 = i2 + -1;

        goto label08;

     label09:
        if z0 == 0 goto label10;

        interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: void enable()>();

        if i1 <= 0 goto label01;

        specialinvoke r0.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(r1);

        return;

     label10:
        interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: void disable()>();

        return;
    }

    private void updateProvidersLocked()
    {
        com.android.server.LocationManagerService r0;
        boolean z0, z1, z2;
        int i0, $i1, $i2, $i3;
        com.android.server.location.LocationProviderInterface r1;
        java.lang.String r2;
        java.util.ArrayList $r3, $r11;
        android.content.Intent $r4, $r7;
        android.content.Context $r5, $r8;
        android.os.UserHandle $r6, $r9;
        java.lang.Object $r10;
        java.util.HashMap $r12, $r13;

        r0 := @this: com.android.server.LocationManagerService;

        z0 = 0;

        $r3 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i0 = -1 + $i1;

     label1:
        if i0 < 0 goto label4;

        $r11 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $r10 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.location.LocationProviderInterface) $r10;

        z1 = interfaceinvoke r1.<com.android.server.location.LocationProviderInterface: boolean isEnabled()>();

        r2 = interfaceinvoke r1.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        z2 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(r2);

        if z1 == 0 goto label3;

        if z2 != 0 goto label3;

        $i3 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean,int)>(r2, 0, $i3);

        $r12 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r12.<java.util.HashMap: void clear()>();

        $r13 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r13.<java.util.HashMap: void clear()>();

        z0 = 1;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        if z1 != 0 goto label2;

        if z2 == 0 goto label2;

        $i2 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean,int)>(r2, 1, $i2);

        z0 = 1;

        goto label2;

     label4:
        if z0 == 0 goto label5;

        $r5 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.location.PROVIDERS_CHANGED");

        $r6 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r4, $r6);

        $r8 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("android.location.MODE_CHANGED");

        $r9 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r8.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r7, $r9);

     label5:
        return;
    }

    public boolean addGpsStatusListener(android.location.IGpsStatusListener, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.IGpsStatusListener r1;
        java.lang.String r2;
        int i0, i1;
        long l2;
        java.lang.Throwable r3, $r8, r9;
        boolean z0;
        android.os.RemoteException r4, $r7;
        android.location.IGpsStatusProvider $r5, $r6;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.IGpsStatusListener;

        r2 := @parameter1: java.lang.String;

        $r5 = r0.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider>;

        if $r5 != null goto label1;

        return 0;

     label1:
        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(i0, "gps");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        z0 = virtualinvoke r0.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>(i1, r2, i0);

     label3:
        if z0 != 0 goto label5;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 0;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r3;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label6:
        $r6 = r0.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider>;

        interfaceinvoke $r6.<android.location.IGpsStatusProvider: void addGpsStatusListener(android.location.IGpsStatusListener)>(r1);

     label7:
        return 1;

     label8:
        $r7 := @caughtexception;

        r4 = $r7;

        r9 = (java.lang.Throwable) r4;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "mGpsStatusProvider.addGpsStatusListener failed", r9);

        return 0;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public void addTestProvider(java.lang.String, com.android.internal.location.ProviderProperties)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r7, $r9, $r25, $r26, $r27;
        com.android.internal.location.ProviderProperties r2;
        long l0;
        java.lang.Object r3, $r10, $r12;
        com.android.server.location.MockProvider r4, r31;
        java.lang.Throwable r5, $r28;
        com.android.server.location.LocationProviderInterface r6;
        boolean $z0, $z1, $z2, $z3;
        java.util.HashMap $r11, $r13, $r15, $r17, $r19;
        java.lang.StringBuilder $r21, $r23, $r24, r32;
        java.lang.IllegalArgumentException r30, r33;
        android.location.ILocationManager r34;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.location.ProviderProperties;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r7 = "passive";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label01;

        r30 = new java.lang.IllegalArgumentException;

        specialinvoke r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot mock the passive location provider");

        throw r30;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r3 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label02:
        r31 = new com.android.server.location.MockProvider;

        r34 = (android.location.ILocationManager) r0;

        specialinvoke r31.<com.android.server.location.MockProvider: void <init>(java.lang.String,android.location.ILocationManager,com.android.internal.location.ProviderProperties)>(r1, r34, r2);

        r4 = r31;

        $r9 = "gps";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label03;

        $r27 = "network";

        $z2 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label03;

        $r25 = "fused";

        $z3 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label06;

     label03:
        $r11 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r10 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (com.android.server.location.LocationProviderInterface) $r10;

     label04:
        if r6 == null goto label06;

     label05:
        specialinvoke r0.<com.android.server.LocationManagerService: void removeProviderLocked(com.android.server.location.LocationProviderInterface)>(r6);

     label06:
        $r13 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r12 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r12 == null goto label10;

        r33 = new java.lang.IllegalArgumentException;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" already exists");

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw r33;

     label07:
        $r28 := @caughtexception;

        r5 = $r28;

     label08:
        exitmonitor r3;

     label09:
        throw r5;

     label10:
        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r4);

        $r15 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        $r17 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        $r19 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor r3;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }

    boolean checkLocationAccess(int, java.lang.String, int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, i2, $i3;
        java.lang.String r1;
        android.app.AppOpsManager $r2;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 = staticinvoke <com.android.server.LocationManagerService: int resolutionLevelToOp(int)>(i1);

        if i2 < 0 goto label1;

        $r2 = r0.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        $i3 = virtualinvoke $r2.<android.app.AppOpsManager: int checkOp(int,int,java.lang.String)>(i2, i0, r1);

        if $i3 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void clearTestProviderEnabled(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r13;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r15;
        long l0;
        java.util.HashMap $r4;
        com.android.server.location.MockProvider $r6;
        java.util.Set $r7, $r8;
        java.lang.StringBuilder $r9, $r11, $r12, $r14;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        r2 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (com.android.server.location.MockProvider) $r5;

        if $r6 != null goto label5;

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r10;

     label2:
        $r15 := @caughtexception;

        r3 = $r15;

     label3:
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r7 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $r8 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r8.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
    }

    public void clearTestProviderLocation(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r12;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r13;
        com.android.server.location.MockProvider r4;
        java.util.HashMap $r5;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        r2 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.location.MockProvider) $r6;

     label2:
        if r4 != null goto label7;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label4:
        $r13 := @caughtexception;

        r3 = $r13;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        virtualinvoke r4.<com.android.server.location.MockProvider: void clearLocation()>();

        exitmonitor r2;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public void clearTestProviderStatus(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r12;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r13;
        com.android.server.location.MockProvider r4;
        java.util.HashMap $r5;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        r2 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.location.MockProvider) $r6;

     label2:
        if r4 != null goto label7;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label4:
        $r13 := @caughtexception;

        r3 = $r13;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        virtualinvoke r4.<com.android.server.location.MockProvider: void clearStatus()>();

        exitmonitor r2;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.LocationManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.Object r4, $r49, $r61, $r64, $r68, $r72, $r78, $r80, $r81, $r86, $r87, $r88, $r92, $r95, $r101, $r104, $r113;
        java.lang.Throwable r5, $r116;
        java.util.Iterator r6, r7, r8, r9, r10, r13, r15, r17, r24;
        com.android.server.location.LocationProviderInterface r11;
        com.android.server.location.LocationProviderProxy r12;
        java.lang.String r14, r16, r18, r23, $r48, $r51, $r53, $r54, $r55, $r58, $r75, $r83, $r89, $r96, $r105, $r109, $r110, $r115, $r118;
        java.util.Map$Entry r19, r20, r25, $r60;
        android.location.Location r21, r22;
        com.android.server.LocationManagerService$Receiver r26;
        com.android.server.LocationManagerService$UpdateRecord r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.content.Context $r28;
        java.util.Collection $r29;
        java.util.HashMap $r30, $r32, $r34, $r36, $r44, $r63;
        java.util.Set $r31, $r33, $r35, $r37, $r41, $r62, $r69, $r73;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.android.server.location.GeofenceManager $r38;
        com.android.server.location.LocationBlacklist $r39;
        com.android.server.location.LocationFudger $r42;
        java.util.ArrayList $r45, $r112;
        java.lang.StringBuilder $r46, $r47, $r50, $r52, $r56, $r57, $r59, $r65, $r66, $r70, $r71, $r74, $r76, $r77, $r79, $r82, $r84, $r85, $r90, $r91, $r93, $r94, $r97, $r98, $r99, $r100, $r102, $r103, $r106, $r107, $r108, $r111, $r114, $r117, $r119, $r120, $r121, $r122;
        com.android.server.location.MockProvider $r67;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r28 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r28.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label01;

        $r119 = new java.lang.StringBuilder;

        specialinvoke $r119.<java.lang.StringBuilder: void <init>()>();

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump LocationManagerService from from pid=");

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r114 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r115);

        return;

     label01:
        r4 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label02:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Current Location Manager state:");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Location Listeners:");

        $r30 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r29 = virtualinvoke $r30.<java.util.HashMap: java.util.Collection values()>();

        r6 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r104 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r26 = (com.android.server.LocationManagerService$Receiver) $r104;

        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        $r106 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r117 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r118);

     label04:
        goto label03;

     label05:
        $r116 := @caughtexception;

        r5 = $r116;

     label06:
        exitmonitor r4;

     label07:
        throw r5;

     label08:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Records by Provider:");

        $r32 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r31 = virtualinvoke $r32.<java.util.HashMap: java.util.Set entrySet()>();

        r7 = interfaceinvoke $r31.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r95 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.util.Map$Entry) $r95;

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r93 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r92 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r109 = (java.lang.String) $r92;

        $r108 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r109);

        $r111 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r110 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r110);

        $r113 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r112 = (java.util.ArrayList) $r113;

        r24 = virtualinvoke $r112.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z10 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label09;

        $r101 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r27 = (com.android.server.LocationManagerService$UpdateRecord) $r101;

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r103 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        $r102 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r105 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r105);

     label11:
        goto label10;

     label12:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Last Known Locations:");

        $r34 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        $r33 = virtualinvoke $r34.<java.util.HashMap: java.util.Set entrySet()>();

        r8 = interfaceinvoke $r33.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r88 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.util.Map$Entry) $r88;

        $r87 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        r23 = (java.lang.String) $r87;

        $r86 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>();

        r22 = (android.location.Location) $r86;

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r99 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r97 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        $r96 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r96);

     label14:
        goto label13;

     label15:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Last Known Locations Coarse Intervals:");

        $r36 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        $r35 = virtualinvoke $r36.<java.util.HashMap: java.util.Set entrySet()>();

        r9 = interfaceinvoke $r35.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label18;

        $r80 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.util.Map$Entry) $r80;

        $r81 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        r18 = (java.lang.String) $r81;

        $r78 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        r21 = (android.location.Location) $r78;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r91 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r90 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r89 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r89);

     label17:
        goto label16;

     label18:
        $r38 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager>;

        virtualinvoke $r38.<com.android.server.location.GeofenceManager: void dump(java.io.PrintWriter)>(r2);

        $r37 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $i1 = interfaceinvoke $r37.<java.util.Set: int size()>();

        if $i1 <= 0 goto label21;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Enabled Providers:");

        $r73 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        r17 = interfaceinvoke $r73.<java.util.Set: java.util.Iterator iterator()>();

     label19:
        $z9 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label21;

        $r72 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r72;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r82 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r83);

     label20:
        goto label19;

     label21:
        $r41 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        $i2 = interfaceinvoke $r41.<java.util.Set: int size()>();

        if $i2 <= 0 goto label24;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Disabled Providers:");

        $r69 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        r15 = interfaceinvoke $r69.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z8 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label24;

        $r64 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r64;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r74 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r75);

     label23:
        goto label22;

     label24:
        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("  ");

        $r39 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        virtualinvoke $r39.<com.android.server.location.LocationBlacklist: void dump(java.io.PrintWriter)>(r2);

        $r44 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $i3 = virtualinvoke $r44.<java.util.HashMap: int size()>();

        if $i3 <= 0 goto label27;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Mock Providers:");

        $r63 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r62 = virtualinvoke $r63.<java.util.HashMap: java.util.Set entrySet()>();

        r13 = interfaceinvoke $r62.<java.util.Set: java.util.Iterator iterator()>();

     label25:
        $z6 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label27;

        $r61 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r60 = (java.util.Map$Entry) $r61;

        $r68 = interfaceinvoke $r60.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r67 = (com.android.server.location.MockProvider) $r68;

        virtualinvoke $r67.<com.android.server.location.MockProvider: void dump(java.io.PrintWriter,java.lang.String)>(r2, "      ");

     label26:
        goto label25;

     label27:
        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("  fudger: ");

        $r42 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger>;

        virtualinvoke $r42.<com.android.server.location.LocationFudger: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        $i4 = lengthof r3;

        if $i4 <= 0 goto label29;

        $r55 = "short";

        $r54 = r3[0];

        $z7 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>($r54);

        if $z7 == 0 goto label29;

        exitmonitor r4;

     label28:
        return;

     label29:
        $r45 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        r10 = virtualinvoke $r45.<java.util.ArrayList: java.util.Iterator iterator()>();

     label30:
        $z4 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label33;

        $r49 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.android.server.location.LocationProviderInterface) $r49;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = interfaceinvoke r11.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r46 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Internal State");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r48);

        $z5 = r11 instanceof com.android.server.location.LocationProviderProxy;

        if $z5 == 0 goto label31;

        r12 = (com.android.server.location.LocationProviderProxy) r11;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r58 = virtualinvoke r12.<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()>();

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r52 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r53);

     label31:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(":");

        interfaceinvoke r11.<com.android.server.location.LocationProviderInterface: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

     label32:
        goto label30;

     label33:
        exitmonitor r4;

     label34:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label10 to label11 with label05;
        catch java.lang.Throwable from label12 to label13 with label05;
        catch java.lang.Throwable from label13 to label14 with label05;
        catch java.lang.Throwable from label15 to label16 with label05;
        catch java.lang.Throwable from label16 to label17 with label05;
        catch java.lang.Throwable from label18 to label19 with label05;
        catch java.lang.Throwable from label19 to label20 with label05;
        catch java.lang.Throwable from label21 to label22 with label05;
        catch java.lang.Throwable from label22 to label23 with label05;
        catch java.lang.Throwable from label24 to label25 with label05;
        catch java.lang.Throwable from label25 to label26 with label05;
        catch java.lang.Throwable from label27 to label28 with label05;
        catch java.lang.Throwable from label29 to label30 with label05;
        catch java.lang.Throwable from label30 to label31 with label05;
        catch java.lang.Throwable from label31 to label32 with label05;
        catch java.lang.Throwable from label33 to label34 with label05;
    }

    public boolean geocoderIsPresent()
    {
        com.android.server.LocationManagerService r0;
        com.android.server.location.GeocoderProxy $r1;

        r0 := @this: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.List getAllProviders()
    {
        com.android.server.LocationManagerService r0;
        java.lang.Object r1, $r14;
        java.util.ArrayList r2, $r6, $r7, $r8;
        java.lang.Throwable r3, $r16;
        java.util.Iterator r4;
        java.lang.String r5, $r12, $r15;
        int $i0;
        boolean $z0, $z1, $z3;
        java.lang.StringBuilder $r9, $r10, $r11;
        com.android.server.location.LocationProviderInterface $r13;

        r0 := @this: com.android.server.LocationManagerService;

        r1 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r6 = new java.util.ArrayList;

        $r7 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = $r6;

        $r8 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        r4 = virtualinvoke $r8.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (com.android.server.location.LocationProviderInterface) $r14;

        r5 = interfaceinvoke $r13.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r15 = "fused";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z3 != 0 goto label2;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label3:
        goto label2;

     label4:
        $r16 := @caughtexception;

        r3 = $r16;

     label5:
        exitmonitor r1;

     label6:
        throw r3;

     label7:
        exitmonitor r1;

     label8:
        $z1 = <com.android.server.LocationManagerService: boolean D>;

        if $z1 == 0 goto label9;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAllProviders()=");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r12);

     label9:
        return r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public java.lang.String getBestProvider(android.location.Criteria, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Criteria r1;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.util.List r2, r3;
        java.lang.String r4, r5, r6, $r13, $r20, $r28;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r30;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Criteria;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>(r1, z0);

        $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        r6 = specialinvoke r0.<com.android.server.LocationManagerService: java.lang.String pickBest(java.util.List)>(r2);

        $z5 = <com.android.server.LocationManagerService: boolean D>;

        if $z5 == 0 goto label1;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getBestProvider(");

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r28);

     label1:
        r4 = r6;

     label2:
        return r4;

     label3:
        r3 = virtualinvoke r0.<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>(null, z0);

        $z3 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label5;

        r5 = specialinvoke r0.<com.android.server.LocationManagerService: java.lang.String pickBest(java.util.List)>(r3);

        $z4 = <com.android.server.LocationManagerService: boolean D>;

        if $z4 == 0 goto label4;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getBestProvider(");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r19 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r20);

     label4:
        return r5;

     label5:
        z1 = <com.android.server.LocationManagerService: boolean D>;

        r4 = null;

        if z1 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getBestProvider(");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(null);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r13);

        return null;
    }

    public java.lang.String getFromLocation(double, double, int, android.location.GeocoderParams, java.util.List)
    {
        com.android.server.LocationManagerService r0;
        double d0, d1;
        int i0;
        android.location.GeocoderParams r1;
        java.util.List r2;
        com.android.server.location.GeocoderProxy $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.LocationManagerService;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        r1 := @parameter3: android.location.GeocoderParams;

        r2 := @parameter4: java.util.List;

        $r3 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        $r5 = virtualinvoke $r4.<com.android.server.location.GeocoderProxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>(d0, d1, i0, r1, r2);

        return $r5;

     label1:
        return null;
    }

    public java.lang.String getFromLocationName(java.lang.String, double, double, double, double, int, android.location.GeocoderParams, java.util.List)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r6;
        double d0, d1, d2, d3;
        int i0;
        android.location.GeocoderParams r2;
        java.util.List r3;
        com.android.server.location.GeocoderProxy $r4, $r5;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        i0 := @parameter5: int;

        r2 := @parameter6: android.location.GeocoderParams;

        r3 := @parameter7: java.util.List;

        $r4 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r4 == null goto label1;

        $r5 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        $r6 = virtualinvoke $r5.<com.android.server.location.GeocoderProxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>(r1, d0, d1, d2, d3, i0, r2, r3);

        return $r6;

     label1:
        return null;
    }

    public android.location.Location getLastLocation(android.location.LocationRequest, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.LocationRequest r1;
        java.lang.String r2, r6, $r10, $r24, $r31, $r32;
        int i0, i1;
        long l2;
        java.lang.Throwable r3, r5, $r35, $r36;
        java.lang.Object r4, $r14, $r16, $r22;
        android.location.Location r7, r8, r9, $r17, $r19, $r20;
        boolean z0, $z1, z2, $z3, $z4, $z5;
        com.android.server.location.LocationBlacklist $r11;
        java.util.HashMap $r12, $r15, $r21;
        com.android.server.location.LocationProviderInterface $r13;
        com.android.server.location.LocationFudger $r18;
        java.lang.StringBuilder $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r33, $r34;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: java.lang.String;

        $z1 = <com.android.server.LocationManagerService: boolean D>;

        if $z1 == 0 goto label01;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getLastLocation: ");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r32);

     label01:
        if r1 != null goto label02;

        r1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label02:
        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(r2);

        $r10 = virtualinvoke r1.<android.location.LocationRequest: java.lang.String getProvider()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(i0, $r10);

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r11 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        $z3 = virtualinvoke $r11.<com.android.server.location.LocationBlacklist: boolean isBlacklisted(java.lang.String)>(r2);

        if $z3 == 0 goto label07;

        z2 = <com.android.server.LocationManagerService: boolean D>;

     label04:
        r8 = null;

        if z2 == 0 goto label06;

     label05:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not returning last loc for blacklisted app: ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r31);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r8;

     label07:
        $z4 = virtualinvoke r0.<com.android.server.LocationManagerService: boolean reportLocationAccessNoThrow(int,java.lang.String,int)>(i1, r2, i0);

        if $z4 != 0 goto label12;

        z0 = <com.android.server.LocationManagerService: boolean D>;

     label08:
        r8 = null;

        if z0 == 0 goto label06;

     label09:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not returning last loc for no op app: ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r24);

     label10:
        r8 = null;

        goto label06;

     label11:
        $r36 := @caughtexception;

        r3 = $r36;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r3;

     label12:
        r4 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label13:
        r6 = virtualinvoke r1.<android.location.LocationRequest: java.lang.String getProvider()>();

     label14:
        if r6 != null goto label15;

        r6 = "fused";

     label15:
        $r12 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r14 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        $r13 = (com.android.server.location.LocationProviderInterface) $r14;

        if $r13 != null goto label20;

        exitmonitor r4;

     label16:
        r8 = null;

        goto label06;

     label17:
        $r35 := @caughtexception;

        r5 = $r35;

     label18:
        exitmonitor r4;

     label19:
        throw r5;

     label20:
        $z5 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(r6, i1);

        if $z5 != 0 goto label22;

        exitmonitor r4;

     label21:
        r8 = null;

        goto label06;

     label22:
        if i0 >= 2 goto label27;

     label23:
        $r21 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        $r22 = virtualinvoke $r21.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (android.location.Location) $r22;

     label24:
        if r7 != null goto label29;

     label25:
        exitmonitor r4;

     label26:
        r8 = null;

        goto label06;

     label27:
        $r15 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        $r16 = virtualinvoke $r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (android.location.Location) $r16;

     label28:
        goto label24;

     label29:
        if i0 >= 2 goto label34;

     label30:
        r9 = virtualinvoke r7.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

     label31:
        if r9 == null goto label36;

     label32:
        $r20 = new android.location.Location;

        $r18 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger>;

        $r19 = virtualinvoke $r18.<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)>(r9);

        specialinvoke $r20.<android.location.Location: void <init>(android.location.Location)>($r19);

        r8 = $r20;

        exitmonitor r4;

     label33:
        goto label06;

     label34:
        $r17 = new android.location.Location;

        specialinvoke $r17.<android.location.Location: void <init>(android.location.Location)>(r7);

        r8 = $r17;

        exitmonitor r4;

     label35:
        goto label06;

     label36:
        exitmonitor r4;

     label37:
        r8 = null;

        goto label06;

        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label19 to label20 with label11;
        catch java.lang.Throwable from label20 to label21 with label17;
        catch java.lang.Throwable from label23 to label24 with label17;
        catch java.lang.Throwable from label25 to label26 with label17;
        catch java.lang.Throwable from label27 to label28 with label17;
        catch java.lang.Throwable from label30 to label31 with label17;
        catch java.lang.Throwable from label32 to label33 with label17;
        catch java.lang.Throwable from label34 to label35 with label17;
        catch java.lang.Throwable from label36 to label37 with label17;
    }

    public com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        java.lang.Object r2, $r6, $r8;
        java.lang.Throwable r3, $r10;
        com.android.server.location.LocationProviderInterface r4;
        java.util.HashMap $r5, $r7;
        int $i0;
        com.android.internal.location.ProviderProperties $r9;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r6 != null goto label2;

     label1:
        return null;

     label2:
        $i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>($i0, r1);

        r2 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label3:
        $r7 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.location.LocationProviderInterface) $r8;

        exitmonitor r2;

     label4:
        if r4 == null goto label1;

        $r9 = interfaceinvoke r4.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        return $r9;

     label5:
        $r10 := @caughtexception;

        r3 = $r10;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.util.List getProviders(android.location.Criteria, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Criteria r1;
        boolean z0, $z1, $z2, $z4, $z5, $z6;
        int i0, i1, $i3, $i5;
        long l2;
        java.lang.Throwable r2, r5, $r19, $r20;
        java.lang.Object r3, $r17;
        java.util.ArrayList r4, $r9, $r10, $r11;
        java.util.Iterator r6;
        com.android.server.location.LocationProviderInterface r7;
        java.lang.String r8, $r14, $r16;
        java.lang.StringBuilder $r12, $r13, $r15;
        com.android.internal.location.ProviderProperties $r18;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Criteria;

        z0 := @parameter1: boolean;

        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r3 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label02:
        $r9 = new java.util.ArrayList;

        $r10 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $i3 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i3);

        r4 = $r9;

        $r11 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        r6 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r17 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.android.server.location.LocationProviderInterface) $r17;

        r8 = interfaceinvoke r7.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r16 = "fused";

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z4 != 0 goto label03;

        $i5 = specialinvoke r0.<com.android.server.LocationManagerService: int getMinimumResolutionLevelForProviderUse(java.lang.String)>(r8);

        if i0 < $i5 goto label03;

     label04:
        if z0 == 0 goto label06;

     label05:
        $z6 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(r8, i1);

        if $z6 == 0 goto label03;

     label06:
        if r1 == null goto label08;

     label07:
        $r18 = interfaceinvoke r7.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        $z5 = staticinvoke <android.location.LocationProvider: boolean propertiesMeetCriteria(java.lang.String,com.android.internal.location.ProviderProperties,android.location.Criteria)>(r8, $r18, r1);

        if $z5 == 0 goto label03;

     label08:
        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

     label09:
        goto label03;

     label10:
        $r20 := @caughtexception;

        r5 = $r20;

     label11:
        exitmonitor r3;

     label12:
        throw r5;

     label13:
        $r19 := @caughtexception;

        r2 = $r19;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r2;

     label14:
        exitmonitor r3;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        $z2 = <com.android.server.LocationManagerService: boolean D>;

        if $z2 == 0 goto label16;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProviders()=");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r14);

     label16:
        return r4;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label10;
    }

    public boolean isProviderEnabled(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r5;
        boolean z0, $z1;
        int i0, $i2;
        long l1;
        java.lang.Throwable r2, r4, $r9, $r10;
        java.lang.Object r3, $r8;
        java.util.HashMap $r6;
        com.android.server.location.LocationProviderInterface $r7;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        z0 = 0;

        $i2 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>($i2, r1);

        $r5 = "fused";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label01;

        return 0;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r3 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label03:
        $r6 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (com.android.server.location.LocationProviderInterface) $r8;

        if $r7 != null goto label05;

        exitmonitor r3;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label05:
        z0 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(r1, i0);

        exitmonitor r3;

     label06:
        goto label04;

     label07:
        $r9 := @caughtexception;

        r4 = $r9;

     label08:
        exitmonitor r3;

     label09:
        throw r4;

     label10:
        $r10 := @caughtexception;

        r2 = $r10;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    public void locationCallbackFinished(android.location.ILocationListener)
    {
        com.android.server.LocationManagerService r0;
        android.location.ILocationListener r1;
        java.lang.Object r2, $r8;
        java.lang.Throwable r3, r6, $r9, $r10;
        android.os.IBinder r4;
        com.android.server.LocationManagerService$Receiver r5;
        long l0;
        java.util.HashMap $r7;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.ILocationListener;

        r2 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        r4 = interfaceinvoke r1.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        $r7 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.LocationManagerService$Receiver) $r8;

     label02:
        if r5 == null goto label05;

     label03:
        entermonitor r5;

     label04:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        staticinvoke <com.android.server.LocationManagerService$Receiver: void access$1400(com.android.server.LocationManagerService$Receiver)>(r5);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r5;

     label05:
        exitmonitor r2;

     label06:
        return;

     label07:
        $r10 := @caughtexception;

        r6 = $r10;

     label08:
        exitmonitor r5;

     label09:
        throw r6;

     label10:
        $r9 := @caughtexception;

        r3 = $r9;

     label11:
        exitmonitor r2;

     label12:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean providerMeetsCriteria(java.lang.String, android.location.Criteria)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r6, $r14, $r19;
        android.location.Criteria r2;
        com.android.server.location.LocationProviderInterface r3;
        boolean z0, $z1;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        com.android.internal.location.ProviderProperties $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r17, $r18, $r20;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.location.Criteria;

        $r4 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.location.LocationProviderInterface) $r5;

        if r3 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider=");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label1:
        $r6 = interfaceinvoke r3.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r7 = interfaceinvoke r3.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        z0 = staticinvoke <android.location.LocationProvider: boolean propertiesMeetCriteria(java.lang.String,com.android.internal.location.ProviderProperties,android.location.Criteria)>($r6, $r7, r2);

        $z1 = <com.android.server.LocationManagerService: boolean D>;

        if $z1 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("providerMeetsCriteria(");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r14);

     label2:
        return z0;
    }

    public void removeGeofence(android.location.Geofence, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.Geofence r1;
        android.app.PendingIntent r2;
        java.lang.String r3, $r10;
        long l0;
        java.lang.Throwable r4, $r12;
        int $i1;
        boolean $z0;
        com.android.server.location.GeofenceManager $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Geofence;

        r2 := @parameter1: android.app.PendingIntent;

        r3 := @parameter2: java.lang.String;

        $i1 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForGeofenceUse(int)>($i1);

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPendingIntent(android.app.PendingIntent)>(r2);

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(r3);

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeGeofence: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r10);

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager>;

        virtualinvoke $r5.<com.android.server.location.GeofenceManager: void removeFence(android.location.Geofence,android.app.PendingIntent)>(r1, r2);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r12 := @caughtexception;

        r4 = $r12;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void removeGpsStatusListener(android.location.IGpsStatusListener)
    {
        com.android.server.LocationManagerService r0;
        android.location.IGpsStatusListener r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r7;
        java.lang.Exception r4, $r6;
        android.location.IGpsStatusProvider $r5;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.IGpsStatusListener;

        r2 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider>;

        interfaceinvoke $r5.<android.location.IGpsStatusProvider: void removeGpsStatusListener(android.location.IGpsStatusListener)>(r1);

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r4 = $r6;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "mGpsStatusProvider.removeGpsStatusListener failed", r4);

     label6:
        goto label2;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

     label8:
        exitmonitor r2;

     label9:
        throw r3;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void removeTestProvider(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r21;
        java.lang.Object r2, $r6, $r9, $r13;
        java.lang.Throwable r3, $r23;
        long l0;
        com.android.server.location.LocationProviderInterface r4, $r10;
        java.util.HashMap $r5, $r8, $r11, $r12, $r14;
        com.android.server.location.MockProvider $r7;
        java.lang.StringBuilder $r17, $r19, $r20, $r22;
        java.lang.IllegalArgumentException $r18;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        r2 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r7 = (com.android.server.location.MockProvider) $r6;

        if $r7 != null goto label5;

        $r18 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r18;

     label2:
        $r23 := @caughtexception;

        r3 = $r23;

     label3:
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.android.server.location.LocationProviderInterface) $r9;

        specialinvoke r0.<com.android.server.LocationManagerService: void removeProviderLocked(com.android.server.location.LocationProviderInterface)>($r10);

        $r11 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        $r13 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.location.LocationProviderInterface) $r13;

     label6:
        if r4 == null goto label8;

     label7:
        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r4);

     label8:
        $r12 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        $r14 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
        catch java.lang.Throwable from label7 to label8 with label2;
        catch java.lang.Throwable from label8 to label9 with label2;
    }

    public void removeUpdates(android.location.ILocationListener, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.ILocationListener r1;
        android.app.PendingIntent r2;
        java.lang.String r3;
        int i0, i1;
        java.lang.Object r4;
        java.lang.Throwable r5, r7, $r8, $r9;
        com.android.server.LocationManagerService$Receiver r6;
        long l2;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.ILocationListener;

        r2 := @parameter1: android.app.PendingIntent;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(r3);

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r4 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label1:
        r6 = specialinvoke r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(r1, r2, i0, i1, r3, null, 0);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        specialinvoke r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>(r6);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r4;

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        r7 = $r9;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r7;

     label7:
        $r8 := @caughtexception;

        r5 = $r8;

     label8:
        exitmonitor r4;

     label9:
        throw r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void reportLocation(android.location.Location, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Location r1;
        boolean z0, $z1;
        byte b0;
        android.os.Message r2;
        com.android.server.LocationManagerService$LocationWorkerHandler $r3, $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Location;

        z0 := @parameter1: boolean;

        b0 = 1;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkCallerIsProvider()>();

        $z1 = virtualinvoke r1.<android.location.Location: boolean isComplete()>();

        if $z1 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping incomplete location: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r9);

        return;

     label1:
        $r3 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r3.<com.android.server.LocationManagerService$LocationWorkerHandler: void removeMessages(int,java.lang.Object)>(1, r1);

        $r4 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r4, 1, r1);

        if z0 == 0 goto label3;

     label2:
        r2.<android.os.Message: int arg1> = b0;

        $r5 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r5.<com.android.server.LocationManagerService$LocationWorkerHandler: boolean sendMessageAtFrontOfQueue(android.os.Message)>(r2);

        return;

     label3:
        b0 = 0;

        goto label2;
    }

    boolean reportLocationAccessNoThrow(int, java.lang.String, int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, i2, $i3;
        java.lang.String r1;
        android.app.AppOpsManager $r2;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 = staticinvoke <com.android.server.LocationManagerService: int resolutionLevelToOp(int)>(i1);

        if i2 < 0 goto label1;

        $r2 = r0.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        $i3 = virtualinvoke $r2.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)>(i2, i0, r1);

        if $i3 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void requestGeofence(android.location.LocationRequest, android.location.Geofence, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.LocationRequest r1, r5;
        android.location.Geofence r2;
        android.app.PendingIntent r3;
        java.lang.String r4, $r7, $r16;
        int i0, i1, $i3;
        long l2;
        java.lang.Throwable r6, $r17;
        boolean $z0;
        com.android.server.location.GeofenceManager $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: android.location.Geofence;

        r3 := @parameter2: android.app.PendingIntent;

        r4 := @parameter3: java.lang.String;

        if r1 != null goto label1;

        r1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label1:
        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForGeofenceUse(int)>(i0);

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPendingIntent(android.app.PendingIntent)>(r3);

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(r4);

        $r7 = virtualinvoke r1.<android.location.LocationRequest: java.lang.String getProvider()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(i0, $r7);

        r5 = specialinvoke r0.<com.android.server.LocationManagerService: android.location.LocationRequest createSanitizedRequest(android.location.LocationRequest,int)>(r1, i0);

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestGeofence: ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r16);

     label2:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        if $i3 == 0 goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", "proximity alerts are currently available only to the primary user");

        return;

     label3:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label4:
        $r8 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager>;

        virtualinvoke $r8.<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,int,int,java.lang.String)>(r5, r2, r3, i0, i1, r4);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label6:
        $r17 := @caughtexception;

        r6 = $r17;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r6;

        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void requestLocationUpdates(android.location.LocationRequest, android.location.ILocationListener, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.LocationRequest r1, r6;
        android.location.ILocationListener r2;
        android.app.PendingIntent r3;
        java.lang.String r4, $r10;
        int i0, i1, i2, $i4;
        android.os.WorkSource r5;
        boolean z0;
        long l3;
        java.lang.Throwable r7, r9, $r12, $r13;
        java.lang.Object r8;
        com.android.server.LocationManagerService$Receiver $r11;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: android.location.ILocationListener;

        r3 := @parameter2: android.app.PendingIntent;

        r4 := @parameter3: java.lang.String;

        if r1 != null goto label01;

        r1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label01:
        specialinvoke r0.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(r4);

        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        $r10 = virtualinvoke r1.<android.location.LocationRequest: java.lang.String getProvider()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(i0, $r10);

        r5 = virtualinvoke r1.<android.location.LocationRequest: android.os.WorkSource getWorkSource()>();

        if r5 == null goto label02;

        $i4 = virtualinvoke r5.<android.os.WorkSource: int size()>();

        if $i4 <= 0 goto label02;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkDeviceStatsAllowed()>();

     label02:
        z0 = virtualinvoke r1.<android.location.LocationRequest: boolean getHideFromAppOps()>();

        if z0 == 0 goto label03;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkUpdateAppOpsAllowed()>();

     label03:
        r6 = specialinvoke r0.<com.android.server.LocationManagerService: android.location.LocationRequest createSanitizedRequest(android.location.LocationRequest,int)>(r1, i0);

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        virtualinvoke r0.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>(i2, r4, i0);

        r8 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r8;

     label05:
        $r11 = specialinvoke r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(r2, r3, i1, i2, r4, r5, z0);

        specialinvoke r0.<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(android.location.LocationRequest,com.android.server.LocationManagerService$Receiver,int,int,java.lang.String)>(r6, $r11, i1, i2, r4);

        exitmonitor r8;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return;

     label07:
        $r12 := @caughtexception;

        r9 = $r12;

     label08:
        exitmonitor r8;

     label09:
        throw r9;

     label10:
        $r13 := @caughtexception;

        r7 = $r13;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r7;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    public boolean sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, r2;
        android.os.Bundle r3;
        java.lang.Object r4, $r9;
        java.lang.Throwable r5, $r11;
        com.android.server.location.LocationProviderInterface r6;
        boolean z0;
        int $i0, $i1;
        android.content.Context $r7;
        java.util.HashMap $r8;
        java.lang.SecurityException $r10;
        java.lang.NullPointerException $r12;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        if r1 != null goto label01;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>()>();

        throw $r12;

     label01:
        $i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>($i0, r1);

        $r7 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r7.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ACCESS_LOCATION_EXTRA_COMMANDS");

        if $i1 == 0 goto label02;

        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_LOCATION_EXTRA_COMMANDS permission");

        throw $r10;

     label02:
        r4 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label03:
        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (com.android.server.location.LocationProviderInterface) $r9;

     label04:
        if r6 != null goto label07;

     label05:
        exitmonitor r4;

     label06:
        return 0;

     label07:
        z0 = interfaceinvoke r6.<com.android.server.location.LocationProviderInterface: boolean sendExtraCommand(java.lang.String,android.os.Bundle)>(r2, r3);

        exitmonitor r4;

     label08:
        return z0;

     label09:
        $r11 := @caughtexception;

        r5 = $r11;

     label10:
        exitmonitor r4;

     label11:
        throw r5;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean sendNiResponse(int, int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, $i2, $i3;
        boolean z0;
        android.location.INetInitiatedListener $r2;
        java.lang.SecurityException $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.os.Process: int myUid()>();

        if $i2 == $i3 goto label1;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("calling sendNiResponse from outside of the system is not allowed");

        throw $r3;

     label1:
        $r2 = r0.<com.android.server.LocationManagerService: android.location.INetInitiatedListener mNetInitiatedListener>;

        z0 = interfaceinvoke $r2.<android.location.INetInitiatedListener: boolean sendNiResponse(int,int)>(i0, i1);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "RemoteException in LocationManagerService.sendNiResponse");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTestProviderEnabled(java.lang.String, boolean)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r17;
        boolean z0;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r16;
        com.android.server.location.MockProvider r4;
        long l0;
        java.util.HashMap $r5;
        java.util.Set $r7, $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        r2 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r5 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.location.MockProvider) $r6;

     label02:
        if r4 != null goto label07;

     label03:
        $r11 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label04:
        $r16 := @caughtexception;

        r3 = $r16;

     label05:
        exitmonitor r2;

     label06:
        throw r3;

     label07:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label08:
        if z0 == 0 goto label12;

     label09:
        virtualinvoke r4.<com.android.server.location.MockProvider: void enable()>();

        $r9 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r10 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r10.<java.util.Set: boolean remove(java.lang.Object)>(r1);

     label10:
        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label11:
        return;

     label12:
        virtualinvoke r4.<com.android.server.location.MockProvider: void disable()>();

        $r7 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $r8 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label13:
        goto label10;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
    }

    public void setTestProviderLocation(java.lang.String, android.location.Location)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r14;
        android.location.Location r2;
        java.lang.Object r3, $r7;
        java.lang.Throwable r4, $r13;
        com.android.server.location.MockProvider r5;
        long l0;
        java.util.HashMap $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.location.Location;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        r3 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        $r6 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (com.android.server.location.MockProvider) $r7;

     label2:
        if r5 != null goto label7;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label4:
        $r13 := @caughtexception;

        r4 = $r13;

     label5:
        exitmonitor r3;

     label6:
        throw r4;

     label7:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        virtualinvoke r5.<com.android.server.location.MockProvider: void setLocation(android.location.Location)>(r2);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r3;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public void setTestProviderStatus(java.lang.String, int, android.os.Bundle, long)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r14;
        int i0;
        android.os.Bundle r2;
        long l1;
        java.lang.Object r3, $r7;
        java.lang.Throwable r4, $r13;
        com.android.server.location.MockProvider r5;
        java.util.HashMap $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Bundle;

        l1 := @parameter3: long;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        r3 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        $r6 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (com.android.server.location.MockProvider) $r7;

     label2:
        if r5 != null goto label7;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label4:
        $r13 := @caughtexception;

        r4 = $r13;

     label5:
        exitmonitor r3;

     label6:
        throw r4;

     label7:
        virtualinvoke r5.<com.android.server.location.MockProvider: void setStatus(int,android.os.Bundle,long)>(i0, r2, l1);

        exitmonitor r3;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public void systemRunning()
    {
        com.android.server.LocationManagerService r0;
        java.lang.Object r1, $r8;
        java.lang.Throwable r2, $r40;
        com.android.server.LocationManagerService$1 r3, r45;
        android.content.IntentFilter r4, r47;
        boolean $z0;
        android.content.Context $r5, $r7, $r14, $r19, $r23, $r26, $r34, $r38;
        android.content.pm.PackageManager $r6;
        android.os.PowerManager $r9;
        com.android.internal.os.BackgroundThread $r11;
        android.os.Looper $r12, $r35;
        com.android.server.LocationManagerService$LocationWorkerHandler $r15, $r16, $r29, $r31, $r39, r41;
        com.android.server.location.LocationBlacklist $r18, $r20, r43;
        android.app.AppOpsManager $r24;
        android.content.ContentResolver $r25;
        android.net.Uri $r28;
        com.android.internal.content.PackageMonitor $r30;
        android.os.UserHandle $r36;
        com.android.server.location.LocationFudger r42;
        com.android.server.location.GeofenceManager r44;
        com.android.server.LocationManagerService$2 r46;
        com.android.server.LocationManagerService$3 r48;
        android.app.AppOpsManager$OnOpChangedListener r49;

        r0 := @this: com.android.server.LocationManagerService;

        r1 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", "systemReady()");

     label2:
        $r5 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.LocationManagerService: android.content.pm.PackageManager mPackageManager> = $r6;

        $r7 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r9 = (android.os.PowerManager) $r8;

        r0.<com.android.server.LocationManagerService: android.os.PowerManager mPowerManager> = $r9;

        r41 = new com.android.server.LocationManagerService$LocationWorkerHandler;

        $r11 = staticinvoke <com.android.internal.os.BackgroundThread: com.android.internal.os.BackgroundThread get()>();

        $r12 = virtualinvoke $r11.<com.android.internal.os.BackgroundThread: android.os.Looper getLooper()>();

        specialinvoke r41.<com.android.server.LocationManagerService$LocationWorkerHandler: void <init>(com.android.server.LocationManagerService,android.os.Looper)>(r0, $r12);

        r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler> = r41;

        r42 = new com.android.server.location.LocationFudger;

        $r14 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r15 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        specialinvoke r42.<com.android.server.location.LocationFudger: void <init>(android.content.Context,android.os.Handler)>($r14, $r15);

        r0.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger> = r42;

        r43 = new com.android.server.location.LocationBlacklist;

        $r19 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r16 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        specialinvoke r43.<com.android.server.location.LocationBlacklist: void <init>(android.content.Context,android.os.Handler)>($r19, $r16);

        r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist> = r43;

        $r18 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        virtualinvoke $r18.<com.android.server.location.LocationBlacklist: void init()>();

        r44 = new com.android.server.location.GeofenceManager;

        $r23 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r20 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        specialinvoke r44.<com.android.server.location.GeofenceManager: void <init>(android.content.Context,com.android.server.location.LocationBlacklist)>($r23, $r20);

        r0.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager> = r44;

        r45 = new com.android.server.LocationManagerService$1;

        specialinvoke r45.<com.android.server.LocationManagerService$1: void <init>(com.android.server.LocationManagerService)>(r0);

        r3 = r45;

        $r24 = r0.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        r49 = (android.app.AppOpsManager$OnOpChangedListener) r3;

        virtualinvoke $r24.<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>(0, null, r49);

        specialinvoke r0.<com.android.server.LocationManagerService: void loadProvidersLocked()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor r1;

     label3:
        $r26 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r25 = virtualinvoke $r26.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r28 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("location_providers_allowed");

        r46 = new com.android.server.LocationManagerService$2;

        $r31 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        specialinvoke r46.<com.android.server.LocationManagerService$2: void <init>(com.android.server.LocationManagerService,android.os.Handler)>(r0, $r31);

        virtualinvoke $r25.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r28, 1, r46, -1);

        $r30 = r0.<com.android.server.LocationManagerService: com.android.internal.content.PackageMonitor mPackageMonitor>;

        $r34 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r29 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r35 = virtualinvoke $r29.<com.android.server.LocationManagerService$LocationWorkerHandler: android.os.Looper getLooper()>();

        virtualinvoke $r30.<com.android.internal.content.PackageMonitor: void register(android.content.Context,android.os.Looper,boolean)>($r34, $r35, 1);

        r47 = new android.content.IntentFilter;

        specialinvoke r47.<android.content.IntentFilter: void <init>()>();

        r4 = r47;

        virtualinvoke r4.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        $r38 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r48 = new com.android.server.LocationManagerService$3;

        specialinvoke r48.<com.android.server.LocationManagerService$3: void <init>(com.android.server.LocationManagerService)>(r0);

        $r36 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r39 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r38.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>(r48, $r36, r4, null, $r39);

        return;

     label4:
        $r40 := @caughtexception;

        r2 = $r40;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
}
