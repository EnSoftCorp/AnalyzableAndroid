public class com.android.server.net.LockdownVpnTracker extends java.lang.Object
{
    private static final java.lang.String ACTION_LOCKDOWN_RESET;
    private static final java.lang.String ACTION_VPN_SETTINGS;
    private static final java.lang.String EXTRA_PICK_LOCKDOWN;
    private static final int MAX_ERROR_COUNT;
    private static final java.lang.String TAG;
    private java.lang.String mAcceptedEgressIface;
    private java.lang.String mAcceptedIface;
    private java.util.List mAcceptedSourceAddr;
    private final android.app.PendingIntent mConfigIntent;
    private final com.android.server.ConnectivityService mConnService;
    private final android.content.Context mContext;
    private int mErrorCount;
    private final android.os.INetworkManagementService mNetService;
    private final com.android.internal.net.VpnProfile mProfile;
    private final android.app.PendingIntent mResetIntent;
    private android.content.BroadcastReceiver mResetReceiver;
    private final java.lang.Object mStateLock;
    private final com.android.server.connectivity.Vpn mVpn;

    public void <init>(android.content.Context, android.os.INetworkManagementService, com.android.server.ConnectivityService, com.android.server.connectivity.Vpn, com.android.internal.net.VpnProfile)
    {
        com.android.server.net.LockdownVpnTracker r0;
        android.content.Context r1, $r11, $r21, $r25;
        android.os.INetworkManagementService r2, $r13;
        com.android.server.ConnectivityService r3, $r16;
        com.android.server.connectivity.Vpn r4, $r18;
        com.android.internal.net.VpnProfile r5, $r20;
        android.content.Intent r6, r7, $r19, $r23;
        java.lang.Object $r8, $r10, $r12, $r14, $r15, $r17;
        com.android.server.net.LockdownVpnTracker$1 $r9;
        android.app.PendingIntent $r24, $r27;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.INetworkManagementService;

        r3 := @parameter2: com.android.server.ConnectivityService;

        r4 := @parameter3: com.android.server.connectivity.Vpn;

        r5 := @parameter4: com.android.internal.net.VpnProfile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.LockdownVpnTracker: java.lang.Object mStateLock> = $r8;

        $r9 = new com.android.server.net.LockdownVpnTracker$1;

        specialinvoke $r9.<com.android.server.net.LockdownVpnTracker$1: void <init>(com.android.server.net.LockdownVpnTracker)>(r0);

        r0.<com.android.server.net.LockdownVpnTracker: android.content.BroadcastReceiver mResetReceiver> = $r9;

        $r10 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r11 = (android.content.Context) $r10;

        r0.<com.android.server.net.LockdownVpnTracker: android.content.Context mContext> = $r11;

        $r12 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r13 = (android.os.INetworkManagementService) $r12;

        r0.<com.android.server.net.LockdownVpnTracker: android.os.INetworkManagementService mNetService> = $r13;

        $r14 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r16 = (com.android.server.ConnectivityService) $r14;

        r0.<com.android.server.net.LockdownVpnTracker: com.android.server.ConnectivityService mConnService> = $r16;

        $r15 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r18 = (com.android.server.connectivity.Vpn) $r15;

        r0.<com.android.server.net.LockdownVpnTracker: com.android.server.connectivity.Vpn mVpn> = $r18;

        $r17 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        $r20 = (com.android.internal.net.VpnProfile) $r17;

        r0.<com.android.server.net.LockdownVpnTracker: com.android.internal.net.VpnProfile mProfile> = $r20;

        $r19 = new android.content.Intent;

        specialinvoke $r19.<android.content.Intent: void <init>(java.lang.String)>("android.net.vpn.SETTINGS");

        r6 = $r19;

        virtualinvoke r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.net.vpn.PICK_LOCKDOWN", 1);

        $r21 = r0.<com.android.server.net.LockdownVpnTracker: android.content.Context mContext>;

        $r24 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r21, 0, r6, 0);

        r0.<com.android.server.net.LockdownVpnTracker: android.app.PendingIntent mConfigIntent> = $r24;

        $r23 = new android.content.Intent;

        specialinvoke $r23.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.action.LOCKDOWN_RESET");

        r7 = $r23;

        virtualinvoke r7.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        $r25 = r0.<com.android.server.net.LockdownVpnTracker: android.content.Context mContext>;

        $r27 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r25, 0, r7, 0);

        r0.<com.android.server.net.LockdownVpnTracker: android.app.PendingIntent mResetIntent> = $r27;

        return;
    }

    private void clearSourceRulesLocked()
    {
        com.android.server.net.LockdownVpnTracker r0;
        android.os.RemoteException r1, $r12;
        java.util.Iterator r2;
        android.net.LinkAddress r3;
        java.lang.String $r4, $r9, $r10;
        java.util.List $r5, $r6;
        boolean $z0;
        java.lang.Object $r7;
        android.os.INetworkManagementService $r8, $r11;
        java.lang.RuntimeException r14;
        java.lang.Throwable r15;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

     label1:
        $r4 = r0.<com.android.server.net.LockdownVpnTracker: java.lang.String mAcceptedIface>;

        if $r4 == null goto label2;

        $r11 = r0.<com.android.server.net.LockdownVpnTracker: android.os.INetworkManagementService mNetService>;

        $r10 = r0.<com.android.server.net.LockdownVpnTracker: java.lang.String mAcceptedIface>;

        interfaceinvoke $r11.<android.os.INetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>($r10, 0);

        r0.<com.android.server.net.LockdownVpnTracker: java.lang.String mAcceptedIface> = null;

     label2:
        $r5 = r0.<com.android.server.net.LockdownVpnTracker: java.util.List mAcceptedSourceAddr>;

        if $r5 == null goto label7;

        $r6 = r0.<com.android.server.net.LockdownVpnTracker: java.util.List mAcceptedSourceAddr>;

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.net.LinkAddress) $r7;

        $r8 = r0.<com.android.server.net.LockdownVpnTracker: android.os.INetworkManagementService mNetService>;

        $r9 = virtualinvoke r3.<android.net.LinkAddress: java.lang.String toString()>();

        interfaceinvoke $r8.<android.os.INetworkManagementService: void setFirewallEgressSourceRule(java.lang.String,boolean)>($r9, 0);

     label4:
        goto label3;

     label5:
        $r12 := @caughtexception;

        r1 = $r12;

        r14 = new java.lang.RuntimeException;

        r15 = (java.lang.Throwable) r1;

        specialinvoke r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Problem setting firewall rules", r15);

        throw r14;

     label6:
        r0.<com.android.server.net.LockdownVpnTracker: java.util.List mAcceptedSourceAddr> = null;

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label2 to label3 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch android.os.RemoteException from label6 to label7 with label5;
    }

    private void handleStateChangedLocked()
    {
        com.android.server.net.LockdownVpnTracker r0;
        android.net.NetworkInfo r1, r3, $r29;
        android.net.LinkProperties r2;
        com.android.internal.net.VpnConfig r4;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        int i0, $i2;
        java.lang.String r5, $r18, $r23, $r25, $r32, $r37, $r41, $r42;
        java.util.List r6, $r31;
        android.os.RemoteException r7, $r39;
        java.util.Iterator r8;
        android.net.LinkAddress r9;
        java.lang.IllegalStateException r10, $r44;
        com.android.server.ConnectivityService $r11, $r12, $r30;
        com.android.server.connectivity.Vpn $r13, $r14, $r15, $r36;
        android.net.NetworkInfo$DetailedState $r16, $r17;
        java.lang.StringBuilder $r19, $r20, $r22, $r24, r45;
        android.os.INetworkManagementService $r26, $r27;
        java.lang.Object $r28;
        com.android.internal.net.VpnProfile $r33, $r35;
        android.security.KeyStore $r34;
        android.net.NetworkInfo$State $r38, $r43;
        java.lang.RuntimeException r46;
        java.lang.Throwable r47;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LockdownVpnTracker", "handleStateChanged()");

        $r11 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.ConnectivityService mConnService>;

        r1 = virtualinvoke $r11.<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoUnfiltered()>();

        $r12 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.ConnectivityService mConnService>;

        r2 = virtualinvoke $r12.<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()>();

        $r13 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.connectivity.Vpn mVpn>;

        r3 = virtualinvoke $r13.<com.android.server.connectivity.Vpn: android.net.NetworkInfo getNetworkInfo()>();

        $r14 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.connectivity.Vpn mVpn>;

        r4 = virtualinvoke $r14.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig getLegacyVpnConfig()>();

        if r1 == null goto label01;

        $r43 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State DISCONNECTED>;

        $r38 = virtualinvoke r1.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

        $z9 = virtualinvoke $r43.<android.net.NetworkInfo$State: boolean equals(java.lang.Object)>($r38);

        if $z9 == 0 goto label08;

     label01:
        z0 = 1;

     label02:
        if r2 == null goto label03;

        $r41 = r0.<com.android.server.net.LockdownVpnTracker: java.lang.String mAcceptedEgressIface>;

        $r42 = virtualinvoke r2.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $z10 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r41, $r42);

        if $z10 != 0 goto label09;

     label03:
        z1 = 1;

     label04:
        if z0 != 0 goto label05;

        if z1 == 0 goto label06;

     label05:
        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void clearSourceRulesLocked()>();

        r0.<com.android.server.net.LockdownVpnTracker: java.lang.String mAcceptedEgressIface> = null;

        $r15 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.connectivity.Vpn mVpn>;

        virtualinvoke $r15.<com.android.server.connectivity.Vpn: void stopLegacyVpn()>();

     label06:
        if z0 == 0 goto label10;

        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void hideNotification()>();

     label07:
        return;

     label08:
        z0 = 0;

        goto label02;

     label09:
        z1 = 0;

        goto label04;

     label10:
        i0 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

        $r16 = virtualinvoke r3.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        $r17 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState FAILED>;

        if $r16 != $r17 goto label11;

        staticinvoke <com.android.server.EventLogTags: void writeLockdownVpnError(int)>(i0);

     label11:
        $i2 = r0.<com.android.server.net.LockdownVpnTracker: int mErrorCount>;

        if $i2 <= 4 goto label12;

        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void showNotification(int,int)>(17040572, 17303158);

        return;

     label12:
        $z3 = virtualinvoke r1.<android.net.NetworkInfo: boolean isConnected()>();

        if $z3 == 0 goto label17;

        $z6 = virtualinvoke r3.<android.net.NetworkInfo: boolean isConnectedOrConnecting()>();

        if $z6 != 0 goto label17;

        $r33 = r0.<com.android.server.net.LockdownVpnTracker: com.android.internal.net.VpnProfile mProfile>;

        $z8 = virtualinvoke $r33.<com.android.internal.net.VpnProfile: boolean isValidLockdownProfile()>();

        if $z8 == 0 goto label16;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LockdownVpnTracker", "Active network connected; starting VPN");

        staticinvoke <com.android.server.EventLogTags: void writeLockdownVpnConnecting(int)>(i0);

        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void showNotification(int,int)>(17040570, 17303158);

        $r37 = virtualinvoke r2.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        r0.<com.android.server.net.LockdownVpnTracker: java.lang.String mAcceptedEgressIface> = $r37;

     label13:
        $r36 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.connectivity.Vpn mVpn>;

        $r35 = r0.<com.android.server.net.LockdownVpnTracker: com.android.internal.net.VpnProfile mProfile>;

        $r34 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        virtualinvoke $r36.<com.android.server.connectivity.Vpn: void startLegacyVpn(com.android.internal.net.VpnProfile,android.security.KeyStore,android.net.LinkProperties)>($r35, $r34, r2);

     label14:
        return;

     label15:
        $r44 := @caughtexception;

        r10 = $r44;

        r0.<com.android.server.net.LockdownVpnTracker: java.lang.String mAcceptedEgressIface> = null;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockdownVpnTracker", "Failed to start VPN", r10);

        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void showNotification(int,int)>(17040572, 17303158);

        return;

     label16:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockdownVpnTracker", "Invalid VPN profile; requires IP-based server and DNS");

        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void showNotification(int,int)>(17040572, 17303158);

        return;

     label17:
        $z4 = virtualinvoke r3.<android.net.NetworkInfo: boolean isConnected()>();

        if $z4 == 0 goto label07;

        if r4 == null goto label07;

        r5 = r4.<com.android.internal.net.VpnConfig: java.lang.String interfaze>;

        r6 = r4.<com.android.internal.net.VpnConfig: java.util.List addresses>;

        $r18 = r0.<com.android.server.net.LockdownVpnTracker: java.lang.String mAcceptedIface>;

        $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r5, $r18);

        if $z2 == 0 goto label18;

        $r31 = r0.<com.android.server.net.LockdownVpnTracker: java.util.List mAcceptedSourceAddr>;

        $z7 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r31);

        if $z7 != 0 goto label07;

     label18:
        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VPN connected using iface=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", sourceAddr=");

        $r25 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LockdownVpnTracker", $r23);

        staticinvoke <com.android.server.EventLogTags: void writeLockdownVpnConnected(int)>(i0);

        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void showNotification(int,int)>(17040571, 17303157);

     label19:
        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void clearSourceRulesLocked()>();

        $r26 = r0.<com.android.server.net.LockdownVpnTracker: android.os.INetworkManagementService mNetService>;

        interfaceinvoke $r26.<android.os.INetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>(r5, 1);

        r8 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z5 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label23;

        $r28 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (android.net.LinkAddress) $r28;

        $r27 = r0.<com.android.server.net.LockdownVpnTracker: android.os.INetworkManagementService mNetService>;

        $r32 = virtualinvoke r9.<android.net.LinkAddress: java.lang.String toString()>();

        interfaceinvoke $r27.<android.os.INetworkManagementService: void setFirewallEgressSourceRule(java.lang.String,boolean)>($r32, 1);

     label21:
        goto label20;

     label22:
        $r39 := @caughtexception;

        r7 = $r39;

        r46 = new java.lang.RuntimeException;

        r47 = (java.lang.Throwable) r7;

        specialinvoke r46.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Problem setting firewall rules", r47);

        throw r46;

     label23:
        r0.<com.android.server.net.LockdownVpnTracker: int mErrorCount> = 0;

        r0.<com.android.server.net.LockdownVpnTracker: java.lang.String mAcceptedIface> = r5;

        r0.<com.android.server.net.LockdownVpnTracker: java.util.List mAcceptedSourceAddr> = r6;

     label24:
        $r30 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.ConnectivityService mConnService>;

        $r29 = virtualinvoke r0.<com.android.server.net.LockdownVpnTracker: android.net.NetworkInfo augmentNetworkInfo(android.net.NetworkInfo)>(r1);

        virtualinvoke $r30.<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)>($r29);

        return;

        catch java.lang.IllegalStateException from label13 to label14 with label15;
        catch android.os.RemoteException from label19 to label20 with label22;
        catch android.os.RemoteException from label20 to label21 with label22;
        catch android.os.RemoteException from label23 to label24 with label22;
    }

    private void hideNotification()
    {
        com.android.server.net.LockdownVpnTracker r0;
        android.content.Context $r1;
        android.app.NotificationManager $r2;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        $r1 = r0.<com.android.server.net.LockdownVpnTracker: android.content.Context mContext>;

        $r2 = staticinvoke <android.app.NotificationManager: android.app.NotificationManager 'from'(android.content.Context)>($r1);

        virtualinvoke $r2.<android.app.NotificationManager: void cancel(java.lang.String,int)>("LockdownVpnTracker", 0);

        return;
    }

    private void initLocked()
    {
        com.android.server.net.LockdownVpnTracker r0;
        android.content.IntentFilter r1, r23;
        android.os.RemoteException r2, $r21;
        java.lang.Object r3;
        java.lang.Throwable r4, $r20, r25;
        com.android.server.connectivity.Vpn $r5, $r6;
        android.content.BroadcastReceiver $r8;
        android.content.Context $r9;
        com.android.internal.net.VpnProfile $r11, $r13, $r18;
        java.lang.String $r12, $r16, $r17;
        android.os.INetworkManagementService $r14, $r15, $r19;
        java.lang.RuntimeException r24;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LockdownVpnTracker", "initLocked()");

        $r5 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.connectivity.Vpn mVpn>;

        virtualinvoke $r5.<com.android.server.connectivity.Vpn: void setEnableNotifications(boolean)>(0);

        $r6 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.connectivity.Vpn mVpn>;

        virtualinvoke $r6.<com.android.server.connectivity.Vpn: void setEnableTeardown(boolean)>(0);

        r23 = new android.content.IntentFilter;

        specialinvoke r23.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.action.LOCKDOWN_RESET");

        r1 = r23;

        $r9 = r0.<com.android.server.net.LockdownVpnTracker: android.content.Context mContext>;

        $r8 = r0.<com.android.server.net.LockdownVpnTracker: android.content.BroadcastReceiver mResetReceiver>;

        virtualinvoke $r9.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r8, r1, "android.permission.CONNECTIVITY_INTERNAL", null);

     label1:
        $r14 = r0.<com.android.server.net.LockdownVpnTracker: android.os.INetworkManagementService mNetService>;

        $r11 = r0.<com.android.server.net.LockdownVpnTracker: com.android.internal.net.VpnProfile mProfile>;

        $r12 = $r11.<com.android.internal.net.VpnProfile: java.lang.String server>;

        interfaceinvoke $r14.<android.os.INetworkManagementService: void setFirewallEgressDestRule(java.lang.String,int,boolean)>($r12, 500, 1);

        $r15 = r0.<com.android.server.net.LockdownVpnTracker: android.os.INetworkManagementService mNetService>;

        $r13 = r0.<com.android.server.net.LockdownVpnTracker: com.android.internal.net.VpnProfile mProfile>;

        $r16 = $r13.<com.android.internal.net.VpnProfile: java.lang.String server>;

        interfaceinvoke $r15.<android.os.INetworkManagementService: void setFirewallEgressDestRule(java.lang.String,int,boolean)>($r16, 4500, 1);

        $r19 = r0.<com.android.server.net.LockdownVpnTracker: android.os.INetworkManagementService mNetService>;

        $r18 = r0.<com.android.server.net.LockdownVpnTracker: com.android.internal.net.VpnProfile mProfile>;

        $r17 = $r18.<com.android.internal.net.VpnProfile: java.lang.String server>;

        interfaceinvoke $r19.<android.os.INetworkManagementService: void setFirewallEgressDestRule(java.lang.String,int,boolean)>($r17, 1701, 1);

     label2:
        r3 = r0.<com.android.server.net.LockdownVpnTracker: java.lang.Object mStateLock>;

        entermonitor r3;

     label3:
        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void handleStateChangedLocked()>();

        exitmonitor r3;

     label4:
        return;

     label5:
        $r21 := @caughtexception;

        r2 = $r21;

        r24 = new java.lang.RuntimeException;

        r25 = (java.lang.Throwable) r2;

        specialinvoke r24.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Problem setting firewall rules", r25);

        throw r24;

     label6:
        $r20 := @caughtexception;

        r4 = $r20;

     label7:
        exitmonitor r3;

     label8:
        throw r4;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static boolean isEnabled()
    {
        android.security.KeyStore $r0;
        boolean $z0;

        $r0 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        $z0 = virtualinvoke $r0.<android.security.KeyStore: boolean contains(java.lang.String)>("LOCKDOWN_VPN");

        return $z0;
    }

    private void showNotification(int, int)
    {
        com.android.server.net.LockdownVpnTracker r0;
        int i0, i1;
        android.app.Notification$Builder r1, $r2;
        android.content.Context $r3, $r6, $r9, $r16, $r19;
        java.lang.String $r7, $r10, $r18;
        android.app.PendingIntent $r12, $r17;
        android.app.NotificationManager $r21;
        android.app.Notification $r22;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = new android.app.Notification$Builder;

        $r3 = r0.<com.android.server.net.LockdownVpnTracker: android.content.Context mContext>;

        specialinvoke $r2.<android.app.Notification$Builder: void <init>(android.content.Context)>($r3);

        r1 = $r2;

        virtualinvoke r1.<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>(0L);

        virtualinvoke r1.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(i1);

        $r6 = r0.<com.android.server.net.LockdownVpnTracker: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.String getString(int)>(i0);

        virtualinvoke r1.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>($r7);

        $r9 = r0.<com.android.server.net.LockdownVpnTracker: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.String getString(int)>(17040573);

        virtualinvoke r1.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>($r10);

        $r12 = r0.<com.android.server.net.LockdownVpnTracker: android.app.PendingIntent mConfigIntent>;

        virtualinvoke r1.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r12);

        virtualinvoke r1.<android.app.Notification$Builder: android.app.Notification$Builder setPriority(int)>(-1);

        virtualinvoke r1.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        $r16 = r0.<com.android.server.net.LockdownVpnTracker: android.content.Context mContext>;

        $r18 = virtualinvoke $r16.<android.content.Context: java.lang.String getString(int)>(17040576);

        $r17 = r0.<com.android.server.net.LockdownVpnTracker: android.app.PendingIntent mResetIntent>;

        virtualinvoke r1.<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>(17302364, $r18, $r17);

        $r19 = r0.<com.android.server.net.LockdownVpnTracker: android.content.Context mContext>;

        $r21 = staticinvoke <android.app.NotificationManager: android.app.NotificationManager 'from'(android.content.Context)>($r19);

        $r22 = virtualinvoke r1.<android.app.Notification$Builder: android.app.Notification build()>();

        virtualinvoke $r21.<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>("LockdownVpnTracker", 0, $r22);

        return;
    }

    private void shutdownLocked()
    {
        com.android.server.net.LockdownVpnTracker r0;
        android.os.RemoteException r1, $r17;
        com.android.server.connectivity.Vpn $r2, $r14, $r15;
        com.android.internal.net.VpnProfile $r3, $r6, $r9;
        java.lang.String $r4, $r7, $r10;
        android.os.INetworkManagementService $r5, $r8, $r11;
        android.content.BroadcastReceiver $r12;
        android.content.Context $r13;
        java.lang.RuntimeException r18;
        java.lang.Throwable r19;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LockdownVpnTracker", "shutdownLocked()");

        r0.<com.android.server.net.LockdownVpnTracker: java.lang.String mAcceptedEgressIface> = null;

        r0.<com.android.server.net.LockdownVpnTracker: int mErrorCount> = 0;

        $r2 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.connectivity.Vpn mVpn>;

        virtualinvoke $r2.<com.android.server.connectivity.Vpn: void stopLegacyVpn()>();

     label1:
        $r5 = r0.<com.android.server.net.LockdownVpnTracker: android.os.INetworkManagementService mNetService>;

        $r3 = r0.<com.android.server.net.LockdownVpnTracker: com.android.internal.net.VpnProfile mProfile>;

        $r4 = $r3.<com.android.internal.net.VpnProfile: java.lang.String server>;

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setFirewallEgressDestRule(java.lang.String,int,boolean)>($r4, 500, 0);

        $r8 = r0.<com.android.server.net.LockdownVpnTracker: android.os.INetworkManagementService mNetService>;

        $r6 = r0.<com.android.server.net.LockdownVpnTracker: com.android.internal.net.VpnProfile mProfile>;

        $r7 = $r6.<com.android.internal.net.VpnProfile: java.lang.String server>;

        interfaceinvoke $r8.<android.os.INetworkManagementService: void setFirewallEgressDestRule(java.lang.String,int,boolean)>($r7, 4500, 0);

        $r11 = r0.<com.android.server.net.LockdownVpnTracker: android.os.INetworkManagementService mNetService>;

        $r9 = r0.<com.android.server.net.LockdownVpnTracker: com.android.internal.net.VpnProfile mProfile>;

        $r10 = $r9.<com.android.internal.net.VpnProfile: java.lang.String server>;

        interfaceinvoke $r11.<android.os.INetworkManagementService: void setFirewallEgressDestRule(java.lang.String,int,boolean)>($r10, 1701, 0);

     label2:
        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void clearSourceRulesLocked()>();

        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void hideNotification()>();

        $r13 = r0.<com.android.server.net.LockdownVpnTracker: android.content.Context mContext>;

        $r12 = r0.<com.android.server.net.LockdownVpnTracker: android.content.BroadcastReceiver mResetReceiver>;

        virtualinvoke $r13.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r12);

        $r15 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.connectivity.Vpn mVpn>;

        virtualinvoke $r15.<com.android.server.connectivity.Vpn: void setEnableNotifications(boolean)>(1);

        $r14 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.connectivity.Vpn mVpn>;

        virtualinvoke $r14.<com.android.server.connectivity.Vpn: void setEnableTeardown(boolean)>(1);

        return;

     label3:
        $r17 := @caughtexception;

        r1 = $r17;

        r18 = new java.lang.RuntimeException;

        r19 = (java.lang.Throwable) r1;

        specialinvoke r18.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Problem setting firewall rules", r19);

        throw r18;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo augmentNetworkInfo(android.net.NetworkInfo)
    {
        com.android.server.net.LockdownVpnTracker r0;
        android.net.NetworkInfo r1, r2, r3, $r5;
        boolean $z0;
        com.android.server.connectivity.Vpn $r4;
        android.net.NetworkInfo$DetailedState $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        r1 := @parameter0: android.net.NetworkInfo;

        $z0 = virtualinvoke r1.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.server.net.LockdownVpnTracker: com.android.server.connectivity.Vpn mVpn>;

        r2 = virtualinvoke $r4.<com.android.server.connectivity.Vpn: android.net.NetworkInfo getNetworkInfo()>();

        $r5 = new android.net.NetworkInfo;

        specialinvoke $r5.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(r1);

        r3 = $r5;

        $r6 = virtualinvoke r2.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        $r7 = virtualinvoke r2.<android.net.NetworkInfo: java.lang.String getReason()>();

        virtualinvoke r3.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r6, $r7, null);

        r1 = r3;

     label1:
        return r1;
    }

    public void init()
    {
        com.android.server.net.LockdownVpnTracker r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        r1 = r0.<com.android.server.net.LockdownVpnTracker: java.lang.Object mStateLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void initLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onNetworkInfoChanged(android.net.NetworkInfo)
    {
        com.android.server.net.LockdownVpnTracker r0;
        android.net.NetworkInfo r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        r1 := @parameter0: android.net.NetworkInfo;

        r2 = r0.<com.android.server.net.LockdownVpnTracker: java.lang.Object mStateLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void handleStateChangedLocked()>();

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onVpnStateChanged(android.net.NetworkInfo)
    {
        com.android.server.net.LockdownVpnTracker r0;
        android.net.NetworkInfo r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r6;
        android.net.NetworkInfo$DetailedState $r4, $r5;
        int $i0, $i1;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        r1 := @parameter0: android.net.NetworkInfo;

        $r4 = virtualinvoke r1.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        $r5 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState FAILED>;

        if $r4 != $r5 goto label1;

        $i0 = r0.<com.android.server.net.LockdownVpnTracker: int mErrorCount>;

        $i1 = 1 + $i0;

        r0.<com.android.server.net.LockdownVpnTracker: int mErrorCount> = $i1;

     label1:
        r2 = r0.<com.android.server.net.LockdownVpnTracker: java.lang.Object mStateLock>;

        entermonitor r2;

     label2:
        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void handleStateChangedLocked()>();

        exitmonitor r2;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void reset()
    {
        com.android.server.net.LockdownVpnTracker r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        r1 = r0.<com.android.server.net.LockdownVpnTracker: java.lang.Object mStateLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void shutdownLocked()>();

        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void initLocked()>();

        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void handleStateChangedLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void shutdown()
    {
        com.android.server.net.LockdownVpnTracker r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.net.LockdownVpnTracker;

        r1 = r0.<com.android.server.net.LockdownVpnTracker: java.lang.Object mStateLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.net.LockdownVpnTracker: void shutdownLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.net.LockdownVpnTracker: java.lang.String TAG> = "LockdownVpnTracker";

        <com.android.server.net.LockdownVpnTracker: int MAX_ERROR_COUNT> = 4;

        <com.android.server.net.LockdownVpnTracker: java.lang.String EXTRA_PICK_LOCKDOWN> = "android.net.vpn.PICK_LOCKDOWN";

        <com.android.server.net.LockdownVpnTracker: java.lang.String ACTION_VPN_SETTINGS> = "android.net.vpn.SETTINGS";

        <com.android.server.net.LockdownVpnTracker: java.lang.String ACTION_LOCKDOWN_RESET> = "com.android.server.action.LOCKDOWN_RESET";

        return;
    }
}
