public class java.text.DecimalFormatSymbols extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static final long serialVersionUID;
    private java.lang.String NaN;
    private transient java.util.Currency currency;
    private java.lang.String currencySymbol;
    private char decimalSeparator;
    private char digit;
    private transient java.lang.String exponentSeparator;
    private char groupingSeparator;
    private java.lang.String infinity;
    private java.lang.String intlCurrencySymbol;
    private transient java.util.Locale locale;
    private char minusSign;
    private char monetarySeparator;
    private char patternSeparator;
    private char perMill;
    private char percent;
    private char zeroDigit;

    static void <clinit>()
    {
        java.io.ObjectStreamField[] r0;
        java.io.ObjectStreamField $r1, $r2, $r4, $r6, $r8, $r9, $r11, $r12, $r13, $r16, $r17, $r18, $r20, $r21, $r23, $r27, $r28;
        java.lang.Class $r3, $r5, $r7, $r10, $r14, $r15, $r19, $r22, $r24, $r25, $r26;

        <java.text.DecimalFormatSymbols: long serialVersionUID> = 5772796243397350300L;

        r0 = newarray (java.io.ObjectStreamField)[17];

        $r1 = new java.io.ObjectStreamField;

        specialinvoke $r1.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("currencySymbol", class "java/lang/String");

        r0[0] = $r1;

        $r2 = new java.io.ObjectStreamField;

        $r3 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r2.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("decimalSeparator", $r3);

        r0[1] = $r2;

        $r4 = new java.io.ObjectStreamField;

        $r5 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("digit", $r5);

        r0[2] = $r4;

        $r6 = new java.io.ObjectStreamField;

        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r6.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("exponential", $r7);

        r0[3] = $r6;

        $r8 = new java.io.ObjectStreamField;

        specialinvoke $r8.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("exponentialSeparator", class "java/lang/String");

        r0[4] = $r8;

        $r9 = new java.io.ObjectStreamField;

        $r10 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r9.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("groupingSeparator", $r10);

        r0[5] = $r9;

        $r11 = new java.io.ObjectStreamField;

        specialinvoke $r11.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("infinity", class "java/lang/String");

        r0[6] = $r11;

        $r12 = new java.io.ObjectStreamField;

        specialinvoke $r12.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("intlCurrencySymbol", class "java/lang/String");

        r0[7] = $r12;

        $r13 = new java.io.ObjectStreamField;

        $r14 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r13.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("minusSign", $r14);

        r0[8] = $r13;

        $r16 = new java.io.ObjectStreamField;

        $r15 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r16.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("monetarySeparator", $r15);

        r0[9] = $r16;

        $r17 = new java.io.ObjectStreamField;

        specialinvoke $r17.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("NaN", class "java/lang/String");

        r0[10] = $r17;

        $r18 = new java.io.ObjectStreamField;

        $r19 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r18.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("patternSeparator", $r19);

        r0[11] = $r18;

        $r21 = new java.io.ObjectStreamField;

        $r22 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r21.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("percent", $r22);

        r0[12] = $r21;

        $r20 = new java.io.ObjectStreamField;

        $r25 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r20.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("perMill", $r25);

        r0[13] = $r20;

        $r23 = new java.io.ObjectStreamField;

        $r24 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r23.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("serialVersionOnStream", $r24);

        r0[14] = $r23;

        $r27 = new java.io.ObjectStreamField;

        $r26 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r27.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("zeroDigit", $r26);

        r0[15] = $r27;

        $r28 = new java.io.ObjectStreamField;

        specialinvoke $r28.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("locale", class "java/util/Locale");

        r0[16] = $r28;

        <java.text.DecimalFormatSymbols: java.io.ObjectStreamField[] serialPersistentFields> = r0;

        return;
    }

    public void <init>()
    {
        java.text.DecimalFormatSymbols r0;
        java.util.Locale $r1;

        r0 := @this: java.text.DecimalFormatSymbols;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>($r1);

        return;
    }

    public void <init>(java.util.Locale)
    {
        java.text.DecimalFormatSymbols r0;
        java.util.Locale r1;
        libcore.icu.LocaleData r2;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7;
        java.lang.String $r4, $r5, $r6, $r10, $r12, $r13, $r15;
        java.util.Currency $r7, $r8, $r9, $r14;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: java.text.DecimalFormatSymbols;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = staticinvoke <libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)>(r1);

        $c0 = r2.<libcore.icu.LocaleData: char zeroDigit>;

        r0.<java.text.DecimalFormatSymbols: char zeroDigit> = $c0;

        r0.<java.text.DecimalFormatSymbols: char digit> = 35;

        $c1 = r2.<libcore.icu.LocaleData: char decimalSeparator>;

        r0.<java.text.DecimalFormatSymbols: char decimalSeparator> = $c1;

        $c2 = r2.<libcore.icu.LocaleData: char groupingSeparator>;

        r0.<java.text.DecimalFormatSymbols: char groupingSeparator> = $c2;

        $c3 = r2.<libcore.icu.LocaleData: char patternSeparator>;

        r0.<java.text.DecimalFormatSymbols: char patternSeparator> = $c3;

        $c4 = r2.<libcore.icu.LocaleData: char percent>;

        r0.<java.text.DecimalFormatSymbols: char percent> = $c4;

        $c5 = r2.<libcore.icu.LocaleData: char perMill>;

        r0.<java.text.DecimalFormatSymbols: char perMill> = $c5;

        $c6 = r2.<libcore.icu.LocaleData: char monetarySeparator>;

        r0.<java.text.DecimalFormatSymbols: char monetarySeparator> = $c6;

        $c7 = r2.<libcore.icu.LocaleData: char minusSign>;

        r0.<java.text.DecimalFormatSymbols: char minusSign> = $c7;

        $r4 = r2.<libcore.icu.LocaleData: java.lang.String infinity>;

        r0.<java.text.DecimalFormatSymbols: java.lang.String infinity> = $r4;

        $r5 = r2.<libcore.icu.LocaleData: java.lang.String NaN>;

        r0.<java.text.DecimalFormatSymbols: java.lang.String NaN> = $r5;

        $r6 = r2.<libcore.icu.LocaleData: java.lang.String exponentSeparator>;

        r0.<java.text.DecimalFormatSymbols: java.lang.String exponentSeparator> = $r6;

        r0.<java.text.DecimalFormatSymbols: java.util.Locale locale> = r1;

     label1:
        $r8 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.util.Locale)>(r1);

        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = $r8;

        $r7 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;

        $r10 = virtualinvoke $r7.<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>(r1);

        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = $r10;

        $r9 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;

        $r12 = virtualinvoke $r9.<java.util.Currency: java.lang.String getCurrencyCode()>();

        r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol> = $r12;

     label2:
        return;

     label3:
        $r11 := @caughtexception;

        $r14 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String)>("XXX");

        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = $r14;

        $r13 = r2.<libcore.icu.LocaleData: java.lang.String currencySymbol>;

        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = $r13;

        $r15 = r2.<libcore.icu.LocaleData: java.lang.String internationalCurrencySymbol>;

        r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol> = $r15;

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <libcore.icu.ICU: java.util.Locale[] getAvailableDecimalFormatSymbolsLocales()>();

        return $r0;
    }

    public static java.text.DecimalFormatSymbols getInstance()
    {
        java.util.Locale $r0;
        java.text.DecimalFormatSymbols $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>($r0);

        return $r1;
    }

    public static java.text.DecimalFormatSymbols getInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.DecimalFormatSymbols $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.Locale;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("locale == null");

        throw $r2;

     label1:
        $r1 = new java.text.DecimalFormatSymbols;

        specialinvoke $r1.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>(r0);

        return $r1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.text.DecimalFormatSymbols r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        int i0;
        java.lang.Object $r4, $r6, $r8, $r10, $r12, $r15;
        java.lang.String $r5, $r7, $r9, $r11, $r14, $r17, $r18;
        char $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9, $c10, $c11;
        java.util.Locale $r13;
        java.util.Currency $r16;
        java.lang.IllegalArgumentException $r19;

        r0 := @this: java.text.DecimalFormatSymbols;

        r1 := @parameter0: java.io.ObjectInputStream;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();

        i0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("serialVersionOnStream", 0);

        $r4 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("currencySymbol", "");

        $r5 = (java.lang.String) $r4;

        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = $r5;

        $c1 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>("decimalSeparator", 46);

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setDecimalSeparator(char)>($c1);

        $c2 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>("digit", 35);

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setDigit(char)>($c2);

        $c3 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>("groupingSeparator", 44);

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setGroupingSeparator(char)>($c3);

        $r6 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("infinity", "");

        $r7 = (java.lang.String) $r6;

        r0.<java.text.DecimalFormatSymbols: java.lang.String infinity> = $r7;

        $r8 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("intlCurrencySymbol", "");

        $r9 = (java.lang.String) $r8;

        r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol> = $r9;

        $c4 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>("minusSign", 45);

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setMinusSign(char)>($c4);

        $r10 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("NaN", "");

        $r11 = (java.lang.String) $r10;

        r0.<java.text.DecimalFormatSymbols: java.lang.String NaN> = $r11;

        $c5 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>("patternSeparator", 59);

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setPatternSeparator(char)>($c5);

        $c7 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>("percent", 37);

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setPercent(char)>($c7);

        $c6 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>("perMill", 8240);

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setPerMill(char)>($c6);

        $c8 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>("zeroDigit", 48);

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setZeroDigit(char)>($c8);

        $r12 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("locale", null);

        $r13 = (java.util.Locale) $r12;

        r0.<java.text.DecimalFormatSymbols: java.util.Locale locale> = $r13;

        if i0 != 0 goto label4;

        $c11 = virtualinvoke r0.<java.text.DecimalFormatSymbols: char getDecimalSeparator()>();

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setMonetaryDecimalSeparator(char)>($c11);

     label1:
        if i0 != 0 goto label5;

        r0.<java.text.DecimalFormatSymbols: java.lang.String exponentSeparator> = "E";

     label2:
        $r17 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;

        $r16 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String)>($r17);

        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = $r16;

     label3:
        return;

     label4:
        $c9 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>("monetarySeparator", 46);

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setMonetaryDecimalSeparator(char)>($c9);

        goto label1;

     label5:
        if i0 >= 3 goto label6;

        $c10 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>("exponential", 69);

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c10);

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setExponentSeparator(java.lang.String)>($r18);

        goto label2;

     label6:
        $r15 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("exponentialSeparator", "E");

        $r14 = (java.lang.String) $r15;

        virtualinvoke r0.<java.text.DecimalFormatSymbols: void setExponentSeparator(java.lang.String)>($r14);

        goto label2;

     label7:
        $r19 := @caughtexception;

        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = null;

        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label7;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.text.DecimalFormatSymbols r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9;
        java.util.Locale $r9;

        r0 := @this: java.text.DecimalFormatSymbols;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        $r3 = r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("currencySymbol", $r3);

        $c0 = virtualinvoke r0.<java.text.DecimalFormatSymbols: char getDecimalSeparator()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>("decimalSeparator", $c0);

        $c1 = virtualinvoke r0.<java.text.DecimalFormatSymbols: char getDigit()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>("digit", $c1);

        $r4 = r0.<java.text.DecimalFormatSymbols: java.lang.String exponentSeparator>;

        $c2 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>("exponential", $c2);

        $r5 = r0.<java.text.DecimalFormatSymbols: java.lang.String exponentSeparator>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("exponentialSeparator", $r5);

        $c3 = virtualinvoke r0.<java.text.DecimalFormatSymbols: char getGroupingSeparator()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>("groupingSeparator", $c3);

        $r6 = r0.<java.text.DecimalFormatSymbols: java.lang.String infinity>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("infinity", $r6);

        $r7 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("intlCurrencySymbol", $r7);

        $c4 = virtualinvoke r0.<java.text.DecimalFormatSymbols: char getMinusSign()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>("minusSign", $c4);

        $c5 = virtualinvoke r0.<java.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>("monetarySeparator", $c5);

        $r8 = r0.<java.text.DecimalFormatSymbols: java.lang.String NaN>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("NaN", $r8);

        $c6 = virtualinvoke r0.<java.text.DecimalFormatSymbols: char getPatternSeparator()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>("patternSeparator", $c6);

        $c7 = virtualinvoke r0.<java.text.DecimalFormatSymbols: char getPercent()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>("percent", $c7);

        $c8 = virtualinvoke r0.<java.text.DecimalFormatSymbols: char getPerMill()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>("perMill", $c8);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("serialVersionOnStream", 3);

        $c9 = virtualinvoke r0.<java.text.DecimalFormatSymbols: char getZeroDigit()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>("zeroDigit", $c9);

        $r9 = r0.<java.text.DecimalFormatSymbols: java.util.Locale locale>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("locale", $r9);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        return;
    }

    public java.lang.Object clone()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.CloneNotSupportedException r1, $r3;
        java.lang.Object r2;
        java.lang.AssertionError $r4;

        r0 := @this: java.text.DecimalFormatSymbols;

     label1:
        r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.DecimalFormatSymbols r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Currency $r3, $r4;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9, $c10, $c11, $c12, $c13, $c14, $c15, $c16, $c17;

        r0 := @this: java.text.DecimalFormatSymbols;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof java.text.DecimalFormatSymbols;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (java.text.DecimalFormatSymbols) r1;

        $r4 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;

        $r3 = r2.<java.text.DecimalFormatSymbols: java.util.Currency currency>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        $r6 = r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>;

        $r5 = r2.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label4;

        $c1 = r0.<java.text.DecimalFormatSymbols: char decimalSeparator>;

        $c0 = r2.<java.text.DecimalFormatSymbols: char decimalSeparator>;

        if $c1 != $c0 goto label4;

        $c3 = r0.<java.text.DecimalFormatSymbols: char digit>;

        $c2 = r2.<java.text.DecimalFormatSymbols: char digit>;

        if $c3 != $c2 goto label4;

        $r8 = r0.<java.text.DecimalFormatSymbols: java.lang.String exponentSeparator>;

        $r7 = r2.<java.text.DecimalFormatSymbols: java.lang.String exponentSeparator>;

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label4;

        $c5 = r0.<java.text.DecimalFormatSymbols: char groupingSeparator>;

        $c4 = r2.<java.text.DecimalFormatSymbols: char groupingSeparator>;

        if $c5 != $c4 goto label4;

        $r10 = r0.<java.text.DecimalFormatSymbols: java.lang.String infinity>;

        $r9 = r2.<java.text.DecimalFormatSymbols: java.lang.String infinity>;

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label4;

        $r11 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;

        $r12 = r2.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z5 == 0 goto label4;

        $c8 = r0.<java.text.DecimalFormatSymbols: char minusSign>;

        $c6 = r2.<java.text.DecimalFormatSymbols: char minusSign>;

        if $c8 != $c6 goto label4;

        $c9 = r0.<java.text.DecimalFormatSymbols: char monetarySeparator>;

        $c7 = r2.<java.text.DecimalFormatSymbols: char monetarySeparator>;

        if $c9 != $c7 goto label4;

        $r14 = r0.<java.text.DecimalFormatSymbols: java.lang.String NaN>;

        $r13 = r2.<java.text.DecimalFormatSymbols: java.lang.String NaN>;

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z6 == 0 goto label4;

        $c13 = r0.<java.text.DecimalFormatSymbols: char patternSeparator>;

        $c12 = r2.<java.text.DecimalFormatSymbols: char patternSeparator>;

        if $c13 != $c12 goto label4;

        $c11 = r0.<java.text.DecimalFormatSymbols: char perMill>;

        $c10 = r2.<java.text.DecimalFormatSymbols: char perMill>;

        if $c11 != $c10 goto label4;

        $c17 = r0.<java.text.DecimalFormatSymbols: char percent>;

        $c16 = r2.<java.text.DecimalFormatSymbols: char percent>;

        if $c17 != $c16 goto label4;

        $c15 = r0.<java.text.DecimalFormatSymbols: char zeroDigit>;

        $c14 = r2.<java.text.DecimalFormatSymbols: char zeroDigit>;

        if $c15 == $c14 goto label1;

     label4:
        return 0;
    }

    public java.util.Currency getCurrency()
    {
        java.text.DecimalFormatSymbols r0;
        java.util.Currency $r1;

        r0 := @this: java.text.DecimalFormatSymbols;

        $r1 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;

        return $r1;
    }

    public java.lang.String getCurrencySymbol()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String $r1;

        r0 := @this: java.text.DecimalFormatSymbols;

        $r1 = r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>;

        return $r1;
    }

    public char getDecimalSeparator()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        $c0 = r0.<java.text.DecimalFormatSymbols: char decimalSeparator>;

        return $c0;
    }

    public char getDigit()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        $c0 = r0.<java.text.DecimalFormatSymbols: char digit>;

        return $c0;
    }

    public java.lang.String getExponentSeparator()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String $r1;

        r0 := @this: java.text.DecimalFormatSymbols;

        $r1 = r0.<java.text.DecimalFormatSymbols: java.lang.String exponentSeparator>;

        return $r1;
    }

    public char getGroupingSeparator()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        $c0 = r0.<java.text.DecimalFormatSymbols: char groupingSeparator>;

        return $c0;
    }

    public java.lang.String getInfinity()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String $r1;

        r0 := @this: java.text.DecimalFormatSymbols;

        $r1 = r0.<java.text.DecimalFormatSymbols: java.lang.String infinity>;

        return $r1;
    }

    public java.lang.String getInternationalCurrencySymbol()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String $r1;

        r0 := @this: java.text.DecimalFormatSymbols;

        $r1 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;

        return $r1;
    }

    public char getMinusSign()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        $c0 = r0.<java.text.DecimalFormatSymbols: char minusSign>;

        return $c0;
    }

    public char getMonetaryDecimalSeparator()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        $c0 = r0.<java.text.DecimalFormatSymbols: char monetarySeparator>;

        return $c0;
    }

    public java.lang.String getNaN()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String $r1;

        r0 := @this: java.text.DecimalFormatSymbols;

        $r1 = r0.<java.text.DecimalFormatSymbols: java.lang.String NaN>;

        return $r1;
    }

    public char getPatternSeparator()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        $c0 = r0.<java.text.DecimalFormatSymbols: char patternSeparator>;

        return $c0;
    }

    public char getPerMill()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        $c0 = r0.<java.text.DecimalFormatSymbols: char perMill>;

        return $c0;
    }

    public char getPercent()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        $c0 = r0.<java.text.DecimalFormatSymbols: char percent>;

        return $c0;
    }

    public char getZeroDigit()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        $c0 = r0.<java.text.DecimalFormatSymbols: char zeroDigit>;

        return $c0;
    }

    public int hashCode()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0, $c2, $c5, $c8, $c11, $c14, $c18, $c19, $c24;
        int $i1, $i3, $i4, $i6, $i7, $i9, $i10, $i12, $i13, $i15, $i16, $i17, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40;
        java.lang.String $r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.text.DecimalFormatSymbols;

        $c0 = r0.<java.text.DecimalFormatSymbols: char zeroDigit>;

        $i1 = 527 + $c0;

        $i3 = 31 * $i1;

        $c2 = r0.<java.text.DecimalFormatSymbols: char digit>;

        $i4 = $i3 + $c2;

        $i6 = 31 * $i4;

        $c5 = r0.<java.text.DecimalFormatSymbols: char decimalSeparator>;

        $i7 = $i6 + $c5;

        $i9 = 31 * $i7;

        $c8 = r0.<java.text.DecimalFormatSymbols: char groupingSeparator>;

        $i10 = $i9 + $c8;

        $i12 = 31 * $i10;

        $c11 = r0.<java.text.DecimalFormatSymbols: char patternSeparator>;

        $i13 = $i12 + $c11;

        $i16 = 31 * $i13;

        $c14 = r0.<java.text.DecimalFormatSymbols: char percent>;

        $i15 = $i16 + $c14;

        $i17 = 31 * $i15;

        $c18 = r0.<java.text.DecimalFormatSymbols: char perMill>;

        $i20 = $i17 + $c18;

        $i22 = 31 * $i20;

        $c19 = r0.<java.text.DecimalFormatSymbols: char monetarySeparator>;

        $i21 = $i22 + $c19;

        $i23 = 31 * $i21;

        $c24 = r0.<java.text.DecimalFormatSymbols: char minusSign>;

        $i25 = $i23 + $c24;

        $i27 = 31 * $i25;

        $r1 = r0.<java.text.DecimalFormatSymbols: java.lang.String exponentSeparator>;

        $i28 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i26 = $i27 + $i28;

        $i30 = 31 * $i26;

        $r2 = r0.<java.text.DecimalFormatSymbols: java.lang.String infinity>;

        $i31 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i29 = $i30 + $i31;

        $i33 = 31 * $i29;

        $r3 = r0.<java.text.DecimalFormatSymbols: java.lang.String NaN>;

        $i34 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        $i32 = $i33 + $i34;

        $i36 = 31 * $i32;

        $r4 = r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>;

        $i37 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        $i35 = $i36 + $i37;

        $i40 = 31 * $i35;

        $r5 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;

        $i39 = virtualinvoke $r5.<java.lang.String: int hashCode()>();

        $i38 = $i40 + $i39;

        return $i38;
    }

    public void setCurrency(java.util.Currency)
    {
        java.text.DecimalFormatSymbols r0;
        java.util.Currency r1, $r2;
        java.lang.String $r3, $r5;
        java.util.Locale $r4;
        java.lang.NullPointerException $r6;

        r0 := @this: java.text.DecimalFormatSymbols;

        r1 := @parameter0: java.util.Currency;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("currency == null");

        throw $r6;

     label1:
        $r2 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;

        if r1 != $r2 goto label2;

        return;

     label2:
        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = r1;

        $r3 = virtualinvoke r1.<java.util.Currency: java.lang.String getCurrencyCode()>();

        r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol> = $r3;

        $r4 = r0.<java.text.DecimalFormatSymbols: java.util.Locale locale>;

        $r5 = virtualinvoke r1.<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>($r4);

        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = $r5;

        return;
    }

    public void setCurrencySymbol(java.lang.String)
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String r1;

        r0 := @this: java.text.DecimalFormatSymbols;

        r1 := @parameter0: java.lang.String;

        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = r1;

        return;
    }

    public void setDecimalSeparator(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        c0 := @parameter0: char;

        r0.<java.text.DecimalFormatSymbols: char decimalSeparator> = c0;

        return;
    }

    public void setDigit(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        c0 := @parameter0: char;

        r0.<java.text.DecimalFormatSymbols: char digit> = c0;

        return;
    }

    public void setExponentSeparator(java.lang.String)
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.text.DecimalFormatSymbols;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("value == null");

        throw $r2;

     label1:
        r0.<java.text.DecimalFormatSymbols: java.lang.String exponentSeparator> = r1;

        return;
    }

    public void setGroupingSeparator(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        c0 := @parameter0: char;

        r0.<java.text.DecimalFormatSymbols: char groupingSeparator> = c0;

        return;
    }

    public void setInfinity(java.lang.String)
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String r1;

        r0 := @this: java.text.DecimalFormatSymbols;

        r1 := @parameter0: java.lang.String;

        r0.<java.text.DecimalFormatSymbols: java.lang.String infinity> = r1;

        return;
    }

    public void setInternationalCurrencySymbol(java.lang.String)
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String r1, $r3, $r7;
        boolean $z0;
        java.util.Currency $r4, $r6;
        java.util.Locale $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: java.text.DecimalFormatSymbols;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label2;

        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = null;

        r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol> = null;

     label1:
        return;

     label2:
        $r3 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

     label3:
        $r4 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String)>(r1);

        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = $r4;

        $r6 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;

        $r5 = r0.<java.text.DecimalFormatSymbols: java.util.Locale locale>;

        $r7 = virtualinvoke $r6.<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>($r5);

        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = $r7;

     label4:
        r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol> = r1;

        return;

     label5:
        $r8 := @caughtexception;

        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = null;

        goto label4;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    public void setMinusSign(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        c0 := @parameter0: char;

        r0.<java.text.DecimalFormatSymbols: char minusSign> = c0;

        return;
    }

    public void setMonetaryDecimalSeparator(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        c0 := @parameter0: char;

        r0.<java.text.DecimalFormatSymbols: char monetarySeparator> = c0;

        return;
    }

    public void setNaN(java.lang.String)
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String r1;

        r0 := @this: java.text.DecimalFormatSymbols;

        r1 := @parameter0: java.lang.String;

        r0.<java.text.DecimalFormatSymbols: java.lang.String NaN> = r1;

        return;
    }

    public void setPatternSeparator(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        c0 := @parameter0: char;

        r0.<java.text.DecimalFormatSymbols: char patternSeparator> = c0;

        return;
    }

    public void setPerMill(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        c0 := @parameter0: char;

        r0.<java.text.DecimalFormatSymbols: char perMill> = c0;

        return;
    }

    public void setPercent(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        c0 := @parameter0: char;

        r0.<java.text.DecimalFormatSymbols: char percent> = c0;

        return;
    }

    public void setZeroDigit(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;

        c0 := @parameter0: char;

        r0.<java.text.DecimalFormatSymbols: char zeroDigit> = c0;

        return;
    }

    public java.lang.String toString()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r41, $r42;
        java.lang.Class $r2;
        java.lang.String $r3, $r9, $r17, $r22, $r23, $r32, $r40;
        java.util.Currency $r6;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8;

        r0 := @this: java.text.DecimalFormatSymbols;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[currency=");

        $r6 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",currencySymbol=");

        $r9 = r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",decimalSeparator=");

        $c0 = r0.<java.text.DecimalFormatSymbols: char decimalSeparator>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",digit=");

        $c1 = r0.<java.text.DecimalFormatSymbols: char digit>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",exponentSeparator=");

        $r17 = r0.<java.text.DecimalFormatSymbols: java.lang.String exponentSeparator>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",groupingSeparator=");

        $c2 = r0.<java.text.DecimalFormatSymbols: char groupingSeparator>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",infinity=");

        $r22 = r0.<java.text.DecimalFormatSymbols: java.lang.String infinity>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",intlCurrencySymbol=");

        $r23 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",minusSign=");

        $c3 = r0.<java.text.DecimalFormatSymbols: char minusSign>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",monetarySeparator=");

        $c4 = r0.<java.text.DecimalFormatSymbols: char monetarySeparator>;

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",NaN=");

        $r32 = r0.<java.text.DecimalFormatSymbols: java.lang.String NaN>;

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",patternSeparator=");

        $c5 = r0.<java.text.DecimalFormatSymbols: char patternSeparator>;

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",perMill=");

        $c6 = r0.<java.text.DecimalFormatSymbols: char perMill>;

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",percent=");

        $c7 = r0.<java.text.DecimalFormatSymbols: char percent>;

        $r37 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",zeroDigit=");

        $c8 = r0.<java.text.DecimalFormatSymbols: char zeroDigit>;

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r40;
    }
}
