public class javax.crypto.EncryptedPrivateKeyInfo extends java.lang.Object
{
    private static final org.apache.harmony.security.asn1.ASN1SetOf ASN1Attributes;
    private static final org.apache.harmony.security.asn1.ASN1Sequence ASN1PrivateKeyInfo;
    private static final org.apache.harmony.security.asn1.ASN1Sequence asn1;
    private static final byte[] nullParam;
    private java.lang.String algName;
    private final java.security.AlgorithmParameters algParameters;
    private volatile byte[] encoded;
    private final byte[] encryptedData;
    private java.lang.String oid;

    static void <clinit>()
    {
        org.apache.harmony.security.asn1.ASN1Type[] r0, r1;
        byte[] $r2;
        org.apache.harmony.security.asn1.ASN1Sequence $r3, $r9;
        org.apache.harmony.security.asn1.ASN1OctetString $r4, $r10;
        javax.crypto.EncryptedPrivateKeyInfo$1 $r5;
        org.apache.harmony.security.asn1.ASN1SetOf $r6, $r12;
        org.apache.harmony.security.asn1.ASN1Any $r7;
        org.apache.harmony.security.asn1.ASN1Integer $r8;
        org.apache.harmony.security.asn1.ASN1Implicit $r11;
        javax.crypto.EncryptedPrivateKeyInfo$2 $r13;

        $r2 = newarray (byte)[2];

        $r2[0] = 5;

        $r2[1] = 0;

        <javax.crypto.EncryptedPrivateKeyInfo: byte[] nullParam> = $r2;

        r0 = newarray (org.apache.harmony.security.asn1.ASN1Type)[2];

        $r3 = <org.apache.harmony.security.x509.AlgorithmIdentifier: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        r0[0] = $r3;

        $r4 = staticinvoke <org.apache.harmony.security.asn1.ASN1OctetString: org.apache.harmony.security.asn1.ASN1OctetString getInstance()>();

        r0[1] = $r4;

        $r5 = new javax.crypto.EncryptedPrivateKeyInfo$1;

        specialinvoke $r5.<javax.crypto.EncryptedPrivateKeyInfo$1: void <init>(org.apache.harmony.security.asn1.ASN1Type[])>(r0);

        <javax.crypto.EncryptedPrivateKeyInfo: org.apache.harmony.security.asn1.ASN1Sequence asn1> = $r5;

        $r6 = new org.apache.harmony.security.asn1.ASN1SetOf;

        $r7 = staticinvoke <org.apache.harmony.security.asn1.ASN1Any: org.apache.harmony.security.asn1.ASN1Any getInstance()>();

        specialinvoke $r6.<org.apache.harmony.security.asn1.ASN1SetOf: void <init>(org.apache.harmony.security.asn1.ASN1Type)>($r7);

        <javax.crypto.EncryptedPrivateKeyInfo: org.apache.harmony.security.asn1.ASN1SetOf ASN1Attributes> = $r6;

        r1 = newarray (org.apache.harmony.security.asn1.ASN1Type)[4];

        $r8 = staticinvoke <org.apache.harmony.security.asn1.ASN1Integer: org.apache.harmony.security.asn1.ASN1Integer getInstance()>();

        r1[0] = $r8;

        $r9 = <org.apache.harmony.security.x509.AlgorithmIdentifier: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        r1[1] = $r9;

        $r10 = staticinvoke <org.apache.harmony.security.asn1.ASN1OctetString: org.apache.harmony.security.asn1.ASN1OctetString getInstance()>();

        r1[2] = $r10;

        $r11 = new org.apache.harmony.security.asn1.ASN1Implicit;

        $r12 = <javax.crypto.EncryptedPrivateKeyInfo: org.apache.harmony.security.asn1.ASN1SetOf ASN1Attributes>;

        specialinvoke $r11.<org.apache.harmony.security.asn1.ASN1Implicit: void <init>(int,org.apache.harmony.security.asn1.ASN1Type)>(0, $r12);

        r1[3] = $r11;

        $r13 = new javax.crypto.EncryptedPrivateKeyInfo$2;

        specialinvoke $r13.<javax.crypto.EncryptedPrivateKeyInfo$2: void <init>(org.apache.harmony.security.asn1.ASN1Type[])>(r1);

        <javax.crypto.EncryptedPrivateKeyInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1PrivateKeyInfo> = $r13;

        return;
    }

    public void <init>(java.lang.String, byte[]) throws java.security.NoSuchAlgorithmException
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        java.lang.String r1, $r10, $r13;
        byte[] r2, $r3, $r4;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r5;
        java.lang.NullPointerException $r6, $r12;
        java.security.NoSuchAlgorithmException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("encryptionAlgorithmName == null");

        throw $r12;

     label1:
        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName> = r1;

        $z0 = specialinvoke r0.<javax.crypto.EncryptedPrivateKeyInfo: boolean mapAlgName()>();

        if $z0 != 0 goto label2;

        $r7 = new java.security.NoSuchAlgorithmException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported algorithm: ");

        $r10 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label2:
        if r2 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("encryptedData == null");

        throw $r6;

     label3:
        $i0 = lengthof r2;

        if $i0 != 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("encryptedData.length == 0");

        throw $r5;

     label4:
        $i1 = lengthof r2;

        $r3 = newarray (byte)[$i1];

        r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData> = $r3;

        $r4 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData>;

        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r4, 0, $i2);

        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters> = null;

        return;
    }

    public void <init>(java.security.AlgorithmParameters, byte[]) throws java.security.NoSuchAlgorithmException
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        java.security.AlgorithmParameters r1, $r5;
        byte[] r2, $r3, $r4;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r10, $r13;
        boolean $z0;
        java.security.NoSuchAlgorithmException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.NullPointerException $r14, $r15;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        r1 := @parameter0: java.security.AlgorithmParameters;

        r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>("algParams == null");

        throw $r14;

     label1:
        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters> = r1;

        if r2 != null goto label2;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("encryptedData == null");

        throw $r15;

     label2:
        $i0 = lengthof r2;

        if $i0 != 0 goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("encryptedData.length == 0");

        throw $r12;

     label3:
        $i1 = lengthof r2;

        $r3 = newarray (byte)[$i1];

        r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData> = $r3;

        $r4 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData>;

        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r4, 0, $i2);

        $r5 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters>;

        $r6 = virtualinvoke $r5.<java.security.AlgorithmParameters: java.lang.String getAlgorithm()>();

        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName> = $r6;

        $z0 = specialinvoke r0.<javax.crypto.EncryptedPrivateKeyInfo: boolean mapAlgName()>();

        if $z0 != 0 goto label4;

        $r7 = new java.security.NoSuchAlgorithmException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported algorithm: ");

        $r10 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label4:
        return;
    }

    public void <init>(byte[]) throws java.io.IOException
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        byte[] r1, r4, $r7, $r8, $r14, $r16, $r19;
        java.lang.Object[] r2, $r11;
        org.apache.harmony.security.x509.AlgorithmIdentifier r3;
        boolean z0, z1;
        java.security.AlgorithmParameters r5;
        int $i0, $i1;
        org.apache.harmony.security.asn1.ASN1Sequence $r9;
        java.lang.Object $r10, $r13, $r15;
        java.lang.String $r12, $r17, $r18;
        java.security.NoSuchAlgorithmException $r20;
        java.lang.NullPointerException $r21;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r21 = new java.lang.NullPointerException;

        specialinvoke $r21.<java.lang.NullPointerException: void <init>(java.lang.String)>("encoded == null");

        throw $r21;

     label1:
        $i0 = lengthof r1;

        $r7 = newarray (byte)[$i0];

        r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encoded> = $r7;

        $r8 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encoded>;

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r8, 0, $i1);

        $r9 = <javax.crypto.EncryptedPrivateKeyInfo: org.apache.harmony.security.asn1.ASN1Sequence asn1>;

        $r10 = virtualinvoke $r9.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(byte[])>(r1);

        $r11 = (java.lang.Object[]) $r10;

        r2 = (java.lang.Object[]) $r11;

        $r13 = r2[0];

        r3 = (org.apache.harmony.security.x509.AlgorithmIdentifier) $r13;

        $r12 = virtualinvoke r3.<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()>();

        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName> = $r12;

        z0 = specialinvoke r0.<javax.crypto.EncryptedPrivateKeyInfo: boolean mapAlgName()>();

        r4 = virtualinvoke r3.<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getParameters()>();

        r5 = null;

        if r4 == null goto label5;

        z1 = staticinvoke <javax.crypto.EncryptedPrivateKeyInfo: boolean isNullValue(byte[])>(r4);

        r5 = null;

        if z1 != 0 goto label5;

     label2:
        $r17 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        r5 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>($r17);

        $r19 = virtualinvoke r3.<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getParameters()>();

        virtualinvoke r5.<java.security.AlgorithmParameters: void init(byte[])>($r19);

     label3:
        if z0 != 0 goto label5;

     label4:
        $r18 = virtualinvoke r5.<java.security.AlgorithmParameters: java.lang.String getAlgorithm()>();

        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName> = $r18;

     label5:
        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters> = r5;

        $r15 = r2[1];

        $r14 = (byte[]) $r15;

        $r16 = (byte[]) $r14;

        r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData> = $r16;

        return;

     label6:
        $r20 := @caughtexception;

        goto label5;

        catch java.security.NoSuchAlgorithmException from label2 to label3 with label6;
        catch java.security.NoSuchAlgorithmException from label4 to label5 with label6;
    }

    static java.security.AlgorithmParameters access$000(javax.crypto.EncryptedPrivateKeyInfo)
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        java.security.AlgorithmParameters $r1;

        r0 := @parameter0: javax.crypto.EncryptedPrivateKeyInfo;

        $r1 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters>;

        return $r1;
    }

    static byte[] access$100()
    {
        byte[] $r0;

        $r0 = <javax.crypto.EncryptedPrivateKeyInfo: byte[] nullParam>;

        return $r0;
    }

    static java.lang.String access$200(javax.crypto.EncryptedPrivateKeyInfo)
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        java.lang.String $r1;

        r0 := @parameter0: javax.crypto.EncryptedPrivateKeyInfo;

        $r1 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String oid>;

        return $r1;
    }

    static byte[] access$300(javax.crypto.EncryptedPrivateKeyInfo)
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        byte[] $r1;

        r0 := @parameter0: javax.crypto.EncryptedPrivateKeyInfo;

        $r1 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData>;

        return $r1;
    }

    private java.security.InvalidKeyException invalidKey() throws java.security.InvalidKeyException
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        java.security.InvalidKeyException $r1;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        $r1 = new java.security.InvalidKeyException;

        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Decrypted data does not represent valid PKCS#8 PrivateKeyInfo");

        throw $r1;
    }

    private static boolean isNullValue(byte[])
    {
        byte[] r0;
        byte $b0, $b1;

        r0 := @parameter0: byte[];

        $b0 = r0[0];

        if $b0 != 5 goto label1;

        $b1 = r0[1];

        if $b1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean mapAlgName()
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        java.lang.String r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        boolean z0, $z1;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        $r3 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        $z1 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: boolean isOID(java.lang.String)>($r3);

        if $z1 == 0 goto label3;

        $r9 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        $r10 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String normalize(java.lang.String)>($r9);

        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String oid> = $r10;

        $r11 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String oid>;

        $r12 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>($r11);

        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName> = $r12;

        $r14 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        if $r14 != null goto label1;

        $r13 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String oid>;

        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName> = $r13;

     label1:
        z0 = 1;

     label2:
        return z0;

     label3:
        $r4 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        r1 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String getStandardName(java.lang.String)>($r4);

        $r5 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        $r6 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2OID(java.lang.String)>($r5);

        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String oid> = $r6;

        $r7 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String oid>;

        if $r7 != null goto label4;

        z0 = 0;

        if r1 == null goto label2;

        $r8 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2OID(java.lang.String)>(r1);

        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String oid> = $r8;

        r2 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String oid>;

        z0 = 0;

        if r2 == null goto label2;

        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName> = r1;

        goto label1;

     label4:
        if r1 == null goto label1;

        r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName> = r1;

        goto label1;
    }

    public java.lang.String getAlgName()
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        $r1 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        return $r1;
    }

    public java.security.AlgorithmParameters getAlgParameters()
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        java.security.AlgorithmParameters $r1;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        $r1 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters>;

        return $r1;
    }

    public byte[] getEncoded() throws java.io.IOException
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        byte[] r1, $r2, $r3, $r4, $r5, $r7;
        int $i0, $i1;
        org.apache.harmony.security.asn1.ASN1Sequence $r6;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        $r2 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encoded>;

        if $r2 != null goto label1;

        $r6 = <javax.crypto.EncryptedPrivateKeyInfo: org.apache.harmony.security.asn1.ASN1Sequence asn1>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.asn1.ASN1Sequence: byte[] encode(java.lang.Object)>(r0);

        r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encoded> = $r7;

     label1:
        $r3 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encoded>;

        $i0 = lengthof $r3;

        r1 = newarray (byte)[$i0];

        $r5 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encoded>;

        $r4 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encoded>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i1);

        return r1;
    }

    public byte[] getEncryptedData()
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        byte[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        $r2 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData>;

        $i0 = lengthof $r2;

        r1 = newarray (byte)[$i0];

        $r4 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData>;

        $r3 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        java.security.Key r1;
        javax.crypto.BadPaddingException r2, $r16;
        javax.crypto.IllegalBlockSizeException r3, $r29;
        java.lang.IllegalStateException r4, $r24;
        java.security.InvalidAlgorithmParameterException r5, $r21;
        javax.crypto.NoSuchPaddingException r6, $r33;
        javax.crypto.Cipher r7;
        byte[] r8, $r13;
        java.lang.String $r10, $r18, $r23, $r26, $r31, $r32;
        java.security.AlgorithmParameters $r11, $r12;
        java.security.spec.PKCS8EncodedKeySpec $r14;
        org.apache.harmony.security.asn1.ASN1Sequence $r15;
        java.lang.NullPointerException $r17;
        java.security.InvalidKeyException $r19, $r25, $r27, $r28;
        java.security.NoSuchAlgorithmException $r20, $r30;
        java.io.IOException $r22;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        r1 := @parameter0: java.security.Key;

        if r1 != null goto label01;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("decryptKey == null");

        throw $r17;

     label01:
        $r10 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r10);

        $r11 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters>;

        if $r11 != null goto label05;

        virtualinvoke r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, r1);

     label02:
        $r13 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData>;

        r8 = virtualinvoke r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r13);

     label03:
        $r15 = <javax.crypto.EncryptedPrivateKeyInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1PrivateKeyInfo>;

        virtualinvoke $r15.<org.apache.harmony.security.asn1.ASN1Sequence: void verify(byte[])>(r8);

     label04:
        $r14 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r14.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r8);

        return $r14;

     label05:
        $r12 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters>;

        virtualinvoke r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(2, r1, $r12);

     label06:
        goto label02;

     label07:
        $r33 := @caughtexception;

        r6 = $r33;

        $r30 = new java.security.NoSuchAlgorithmException;

        $r31 = virtualinvoke r6.<javax.crypto.NoSuchPaddingException: java.lang.String getMessage()>();

        specialinvoke $r30.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r31);

        throw $r30;

     label08:
        $r22 := @caughtexception;

     label09:
        $r25 = specialinvoke r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.InvalidKeyException invalidKey()>();

        throw $r25;

     label10:
        $r21 := @caughtexception;

        r5 = $r21;

        $r20 = new java.security.NoSuchAlgorithmException;

        $r23 = virtualinvoke r5.<java.security.InvalidAlgorithmParameterException: java.lang.String getMessage()>();

        specialinvoke $r20.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label11:
        $r24 := @caughtexception;

        r4 = $r24;

        $r27 = new java.security.InvalidKeyException;

        $r26 = virtualinvoke r4.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        specialinvoke $r27.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r26);

        throw $r27;

     label12:
        $r29 := @caughtexception;

        r3 = $r29;

        $r28 = new java.security.InvalidKeyException;

        $r32 = virtualinvoke r3.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        specialinvoke $r28.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label13:
        $r16 := @caughtexception;

        r2 = $r16;

        $r19 = new java.security.InvalidKeyException;

        $r18 = virtualinvoke r2.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r19.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r18);

        throw $r19;

        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label07;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label10;
        catch java.lang.IllegalStateException from label01 to label02 with label11;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label12;
        catch javax.crypto.BadPaddingException from label01 to label02 with label13;
        catch javax.crypto.NoSuchPaddingException from label02 to label03 with label07;
        catch java.security.InvalidAlgorithmParameterException from label02 to label03 with label10;
        catch java.lang.IllegalStateException from label02 to label03 with label11;
        catch javax.crypto.IllegalBlockSizeException from label02 to label03 with label12;
        catch javax.crypto.BadPaddingException from label02 to label03 with label13;
        catch java.io.IOException from label03 to label04 with label08;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label07;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label10;
        catch java.lang.IllegalStateException from label03 to label04 with label11;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label12;
        catch javax.crypto.BadPaddingException from label03 to label04 with label13;
        catch javax.crypto.NoSuchPaddingException from label04 to label05 with label07;
        catch java.security.InvalidAlgorithmParameterException from label04 to label05 with label10;
        catch java.lang.IllegalStateException from label04 to label05 with label11;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label12;
        catch javax.crypto.BadPaddingException from label04 to label05 with label13;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label07;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label10;
        catch java.lang.IllegalStateException from label05 to label06 with label11;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label12;
        catch javax.crypto.BadPaddingException from label05 to label06 with label13;
        catch javax.crypto.NoSuchPaddingException from label09 to label10 with label07;
        catch java.security.InvalidAlgorithmParameterException from label09 to label10 with label10;
        catch java.lang.IllegalStateException from label09 to label10 with label11;
        catch javax.crypto.IllegalBlockSizeException from label09 to label10 with label12;
        catch javax.crypto.BadPaddingException from label09 to label10 with label13;
    }

    public java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key, java.lang.String) throws java.security.NoSuchProviderException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        java.security.Key r1;
        java.lang.String r2, $r11, $r22, $r27, $r28, $r30, $r35;
        javax.crypto.BadPaddingException r3, $r31;
        javax.crypto.IllegalBlockSizeException r4, $r32;
        java.lang.IllegalStateException r5, $r20;
        java.security.InvalidAlgorithmParameterException r6, $r26;
        javax.crypto.NoSuchPaddingException r7, $r25;
        javax.crypto.Cipher r8;
        byte[] r9, $r14;
        java.security.AlgorithmParameters $r12, $r13;
        org.apache.harmony.security.asn1.ASN1Sequence $r15;
        java.lang.NullPointerException $r16, $r19;
        java.security.spec.PKCS8EncodedKeySpec $r17;
        java.io.IOException $r18;
        java.security.InvalidKeyException $r21, $r23, $r33, $r34;
        java.security.NoSuchAlgorithmException $r24, $r29;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label01;

        $r19 = new java.lang.NullPointerException;

        specialinvoke $r19.<java.lang.NullPointerException: void <init>(java.lang.String)>("decryptKey == null");

        throw $r19;

     label01:
        if r2 != null goto label02;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("providerName == null");

        throw $r16;

     label02:
        $r11 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r11, r2);

        $r12 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters>;

        if $r12 != null goto label06;

        virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, r1);

     label03:
        $r14 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData>;

        r9 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r14);

     label04:
        $r15 = <javax.crypto.EncryptedPrivateKeyInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1PrivateKeyInfo>;

        virtualinvoke $r15.<org.apache.harmony.security.asn1.ASN1Sequence: void verify(byte[])>(r9);

     label05:
        $r17 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r17.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r9);

        return $r17;

     label06:
        $r13 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters>;

        virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(2, r1, $r13);

     label07:
        goto label03;

     label08:
        $r25 := @caughtexception;

        r7 = $r25;

        $r24 = new java.security.NoSuchAlgorithmException;

        $r27 = virtualinvoke r7.<javax.crypto.NoSuchPaddingException: java.lang.String getMessage()>();

        specialinvoke $r24.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r27);

        throw $r24;

     label09:
        $r18 := @caughtexception;

     label10:
        $r21 = specialinvoke r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.InvalidKeyException invalidKey()>();

        throw $r21;

     label11:
        $r26 := @caughtexception;

        r6 = $r26;

        $r29 = new java.security.NoSuchAlgorithmException;

        $r28 = virtualinvoke r6.<java.security.InvalidAlgorithmParameterException: java.lang.String getMessage()>();

        specialinvoke $r29.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r28);

        throw $r29;

     label12:
        $r20 := @caughtexception;

        r5 = $r20;

        $r23 = new java.security.InvalidKeyException;

        $r22 = virtualinvoke r5.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        specialinvoke $r23.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r22);

        throw $r23;

     label13:
        $r32 := @caughtexception;

        r4 = $r32;

        $r33 = new java.security.InvalidKeyException;

        $r30 = virtualinvoke r4.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        specialinvoke $r33.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r30);

        throw $r33;

     label14:
        $r31 := @caughtexception;

        r3 = $r31;

        $r34 = new java.security.InvalidKeyException;

        $r35 = virtualinvoke r3.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r34.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r35);

        throw $r34;

        catch javax.crypto.NoSuchPaddingException from label02 to label03 with label08;
        catch java.security.InvalidAlgorithmParameterException from label02 to label03 with label11;
        catch java.lang.IllegalStateException from label02 to label03 with label12;
        catch javax.crypto.IllegalBlockSizeException from label02 to label03 with label13;
        catch javax.crypto.BadPaddingException from label02 to label03 with label14;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label08;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label11;
        catch java.lang.IllegalStateException from label03 to label04 with label12;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label13;
        catch javax.crypto.BadPaddingException from label03 to label04 with label14;
        catch java.io.IOException from label04 to label05 with label09;
        catch javax.crypto.NoSuchPaddingException from label04 to label05 with label08;
        catch java.security.InvalidAlgorithmParameterException from label04 to label05 with label11;
        catch java.lang.IllegalStateException from label04 to label05 with label12;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label13;
        catch javax.crypto.BadPaddingException from label04 to label05 with label14;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label08;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label11;
        catch java.lang.IllegalStateException from label05 to label06 with label12;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label13;
        catch javax.crypto.BadPaddingException from label05 to label06 with label14;
        catch javax.crypto.NoSuchPaddingException from label06 to label07 with label08;
        catch java.security.InvalidAlgorithmParameterException from label06 to label07 with label11;
        catch java.lang.IllegalStateException from label06 to label07 with label12;
        catch javax.crypto.IllegalBlockSizeException from label06 to label07 with label13;
        catch javax.crypto.BadPaddingException from label06 to label07 with label14;
        catch javax.crypto.NoSuchPaddingException from label10 to label11 with label08;
        catch java.security.InvalidAlgorithmParameterException from label10 to label11 with label11;
        catch java.lang.IllegalStateException from label10 to label11 with label12;
        catch javax.crypto.IllegalBlockSizeException from label10 to label11 with label13;
        catch javax.crypto.BadPaddingException from label10 to label11 with label14;
    }

    public java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key, java.security.Provider) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        java.security.Key r1;
        java.security.Provider r2;
        javax.crypto.BadPaddingException r3, $r26;
        javax.crypto.IllegalBlockSizeException r4, $r18;
        java.lang.IllegalStateException r5, $r32;
        java.security.InvalidAlgorithmParameterException r6, $r31;
        javax.crypto.NoSuchPaddingException r7, $r25;
        javax.crypto.Cipher r8;
        byte[] r9, $r14;
        java.lang.String $r11, $r20, $r27, $r28, $r30, $r35;
        java.security.AlgorithmParameters $r12, $r13;
        org.apache.harmony.security.asn1.ASN1Sequence $r15;
        java.lang.NullPointerException $r16, $r19;
        java.security.spec.PKCS8EncodedKeySpec $r17;
        java.security.InvalidKeyException $r21, $r22, $r29, $r33;
        java.io.IOException $r23;
        java.security.NoSuchAlgorithmException $r24, $r34;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.Provider;

        if r1 != null goto label01;

        $r19 = new java.lang.NullPointerException;

        specialinvoke $r19.<java.lang.NullPointerException: void <init>(java.lang.String)>("decryptKey == null");

        throw $r19;

     label01:
        if r2 != null goto label02;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("provider == null");

        throw $r16;

     label02:
        $r11 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String algName>;

        r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>($r11, r2);

        $r12 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters>;

        if $r12 != null goto label06;

        virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, r1);

     label03:
        $r14 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData>;

        r9 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r14);

     label04:
        $r15 = <javax.crypto.EncryptedPrivateKeyInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1PrivateKeyInfo>;

        virtualinvoke $r15.<org.apache.harmony.security.asn1.ASN1Sequence: void verify(byte[])>(r9);

     label05:
        $r17 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r17.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r9);

        return $r17;

     label06:
        $r13 = r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters algParameters>;

        virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(2, r1, $r13);

     label07:
        goto label03;

     label08:
        $r25 := @caughtexception;

        r7 = $r25;

        $r24 = new java.security.NoSuchAlgorithmException;

        $r27 = virtualinvoke r7.<javax.crypto.NoSuchPaddingException: java.lang.String getMessage()>();

        specialinvoke $r24.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r27);

        throw $r24;

     label09:
        $r23 := @caughtexception;

     label10:
        $r22 = specialinvoke r0.<javax.crypto.EncryptedPrivateKeyInfo: java.security.InvalidKeyException invalidKey()>();

        throw $r22;

     label11:
        $r31 := @caughtexception;

        r6 = $r31;

        $r34 = new java.security.NoSuchAlgorithmException;

        $r35 = virtualinvoke r6.<java.security.InvalidAlgorithmParameterException: java.lang.String getMessage()>();

        specialinvoke $r34.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r35);

        throw $r34;

     label12:
        $r32 := @caughtexception;

        r5 = $r32;

        $r33 = new java.security.InvalidKeyException;

        $r30 = virtualinvoke r5.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        specialinvoke $r33.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r30);

        throw $r33;

     label13:
        $r18 := @caughtexception;

        r4 = $r18;

        $r21 = new java.security.InvalidKeyException;

        $r20 = virtualinvoke r4.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        specialinvoke $r21.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r20);

        throw $r21;

     label14:
        $r26 := @caughtexception;

        r3 = $r26;

        $r29 = new java.security.InvalidKeyException;

        $r28 = virtualinvoke r3.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r29.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r28);

        throw $r29;

        catch javax.crypto.NoSuchPaddingException from label02 to label03 with label08;
        catch java.security.InvalidAlgorithmParameterException from label02 to label03 with label11;
        catch java.lang.IllegalStateException from label02 to label03 with label12;
        catch javax.crypto.IllegalBlockSizeException from label02 to label03 with label13;
        catch javax.crypto.BadPaddingException from label02 to label03 with label14;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label08;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label11;
        catch java.lang.IllegalStateException from label03 to label04 with label12;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label13;
        catch javax.crypto.BadPaddingException from label03 to label04 with label14;
        catch java.io.IOException from label04 to label05 with label09;
        catch javax.crypto.NoSuchPaddingException from label04 to label05 with label08;
        catch java.security.InvalidAlgorithmParameterException from label04 to label05 with label11;
        catch java.lang.IllegalStateException from label04 to label05 with label12;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label13;
        catch javax.crypto.BadPaddingException from label04 to label05 with label14;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label08;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label11;
        catch java.lang.IllegalStateException from label05 to label06 with label12;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label13;
        catch javax.crypto.BadPaddingException from label05 to label06 with label14;
        catch javax.crypto.NoSuchPaddingException from label06 to label07 with label08;
        catch java.security.InvalidAlgorithmParameterException from label06 to label07 with label11;
        catch java.lang.IllegalStateException from label06 to label07 with label12;
        catch javax.crypto.IllegalBlockSizeException from label06 to label07 with label13;
        catch javax.crypto.BadPaddingException from label06 to label07 with label14;
        catch javax.crypto.NoSuchPaddingException from label10 to label11 with label08;
        catch java.security.InvalidAlgorithmParameterException from label10 to label11 with label11;
        catch java.lang.IllegalStateException from label10 to label11 with label12;
        catch javax.crypto.IllegalBlockSizeException from label10 to label11 with label13;
        catch javax.crypto.BadPaddingException from label10 to label11 with label14;
    }

    public java.security.spec.PKCS8EncodedKeySpec getKeySpec(javax.crypto.Cipher) throws java.security.spec.InvalidKeySpecException
    {
        javax.crypto.EncryptedPrivateKeyInfo r0;
        javax.crypto.Cipher r1;
        javax.crypto.BadPaddingException r2, $r18;
        javax.crypto.IllegalBlockSizeException r3, $r11;
        java.lang.IllegalStateException r4, $r14;
        byte[] r5, $r7;
        org.apache.harmony.security.asn1.ASN1Sequence $r8;
        java.security.spec.PKCS8EncodedKeySpec $r9;
        java.lang.NullPointerException $r10;
        java.security.spec.InvalidKeySpecException $r12, $r16, $r17, $r21;
        java.lang.String $r13, $r15, $r20;
        java.io.IOException $r19;

        r0 := @this: javax.crypto.EncryptedPrivateKeyInfo;

        r1 := @parameter0: javax.crypto.Cipher;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("cipher == null");

        throw $r10;

     label1:
        $r7 = r0.<javax.crypto.EncryptedPrivateKeyInfo: byte[] encryptedData>;

        r5 = virtualinvoke r1.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r7);

     label2:
        $r8 = <javax.crypto.EncryptedPrivateKeyInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1PrivateKeyInfo>;

        virtualinvoke $r8.<org.apache.harmony.security.asn1.ASN1Sequence: void verify(byte[])>(r5);

     label3:
        $r9 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r9.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r5);

        return $r9;

     label4:
        $r19 := @caughtexception;

     label5:
        $r21 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r21.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Decrypted data does not represent valid PKCS#8 PrivateKeyInfo");

        throw $r21;

     label6:
        $r14 := @caughtexception;

        r4 = $r14;

        $r16 = new java.security.spec.InvalidKeySpecException;

        $r15 = virtualinvoke r4.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        specialinvoke $r16.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r15);

        throw $r16;

     label7:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = new java.security.spec.InvalidKeySpecException;

        $r13 = virtualinvoke r3.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        specialinvoke $r12.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label8:
        $r18 := @caughtexception;

        r2 = $r18;

        $r17 = new java.security.spec.InvalidKeySpecException;

        $r20 = virtualinvoke r2.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r17.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r20);

        throw $r17;

        catch java.lang.IllegalStateException from label1 to label2 with label6;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label7;
        catch javax.crypto.BadPaddingException from label1 to label2 with label8;
        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.IllegalStateException from label2 to label3 with label6;
        catch javax.crypto.IllegalBlockSizeException from label2 to label3 with label7;
        catch javax.crypto.BadPaddingException from label2 to label3 with label8;
        catch java.lang.IllegalStateException from label3 to label4 with label6;
        catch javax.crypto.IllegalBlockSizeException from label3 to label4 with label7;
        catch javax.crypto.BadPaddingException from label3 to label4 with label8;
        catch java.lang.IllegalStateException from label5 to label6 with label6;
        catch javax.crypto.IllegalBlockSizeException from label5 to label6 with label7;
        catch javax.crypto.BadPaddingException from label5 to label6 with label8;
    }
}
