public class java.io.DataOutputStream extends java.io.FilterOutputStream implements java.io.DataOutput
{
    private final byte[] scratch;
    protected int written;

    public void <init>(java.io.OutputStream)
    {
        java.io.DataOutputStream r0;
        java.io.OutputStream r1;
        byte[] $r2;

        r0 := @this: java.io.DataOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        $r2 = newarray (byte)[8];

        r0.<java.io.DataOutputStream: byte[] scratch> = $r2;

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.DataOutputStream r0;

        r0 := @this: java.io.DataOutputStream;

        specialinvoke r0.<java.io.FilterOutputStream: void flush()>();

        return;
    }

    public final int size()
    {
        java.io.DataOutputStream r0;
        int $i0, $i1;

        r0 := @this: java.io.DataOutputStream;

        $i0 = r0.<java.io.DataOutputStream: int written>;

        if $i0 >= 0 goto label1;

        r0.<java.io.DataOutputStream: int written> = 2147483647;

     label1:
        $i1 = r0.<java.io.DataOutputStream: int written>;

        return $i1;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        int i0, $i1, $i2;
        java.io.OutputStream $r1;

        r0 := @this: java.io.DataOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        $i1 = r0.<java.io.DataOutputStream: int written>;

        $i2 = 1 + $i1;

        r0.<java.io.DataOutputStream: int written> = $i2;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        byte[] r1;
        int i0, i1, $i2, $i3;
        java.io.OutputStream $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.io.DataOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("buffer == null");

        throw $r3;

     label1:
        $r2 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        $i2 = r0.<java.io.DataOutputStream: int written>;

        $i3 = i1 + $i2;

        r0.<java.io.DataOutputStream: int written> = $i3;

        return;
    }

    public final void writeBoolean(boolean) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        boolean z0;
        java.io.OutputStream r1;
        byte b0;
        int $i1, $i2;

        r0 := @this: java.io.DataOutputStream;

        z0 := @parameter0: boolean;

        r1 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;

        if z0 == 0 goto label2;

        b0 = 1;

     label1:
        virtualinvoke r1.<java.io.OutputStream: void write(int)>(b0);

        $i1 = r0.<java.io.DataOutputStream: int written>;

        $i2 = 1 + $i1;

        r0.<java.io.DataOutputStream: int written> = $i2;

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public final void writeByte(int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        int i0, $i1, $i2;
        java.io.OutputStream $r1;

        r0 := @this: java.io.DataOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        $i1 = r0.<java.io.DataOutputStream: int written>;

        $i2 = 1 + $i1;

        r0.<java.io.DataOutputStream: int written> = $i2;

        return;
    }

    public final void writeBytes(java.lang.String) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        java.lang.String r1;
        byte[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.io.OutputStream $r3;
        char $c7;
        byte $b8;

        r0 := @this: java.io.DataOutputStream;

        r1 := @parameter0: java.lang.String;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label1;

        return;

     label1:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        r2 = newarray (byte)[$i2];

        i0 = 0;

     label2:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 >= $i3 goto label3;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        $b8 = (byte) $c7;

        r2[i0] = $b8;

        i0 = i0 + 1;

        goto label2;

     label3:
        $r3 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>(r2);

        $i5 = r0.<java.io.DataOutputStream: int written>;

        $i4 = lengthof r2;

        $i6 = $i5 + $i4;

        r0.<java.io.DataOutputStream: int written> = $i6;

        return;
    }

    public final void writeChar(int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        int i0;

        r0 := @this: java.io.DataOutputStream;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>(i0);

        return;
    }

    public final void writeChars(java.lang.String) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        java.lang.String r1;
        byte[] r2;
        java.io.OutputStream $r3;
        int $i0, $i1, $i2;

        r0 := @this: java.io.DataOutputStream;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-16BE");

        $r3 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>(r2);

        $i1 = r0.<java.io.DataOutputStream: int written>;

        $i0 = lengthof r2;

        $i2 = $i1 + $i0;

        r0.<java.io.DataOutputStream: int written> = $i2;

        return;
    }

    public final void writeDouble(double) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        double d0;
        long $l0;

        r0 := @this: java.io.DataOutputStream;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        virtualinvoke r0.<java.io.DataOutputStream: void writeLong(long)>($l0);

        return;
    }

    public final void writeFloat(float) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        float f0;
        int $i0;

        r0 := @this: java.io.DataOutputStream;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        virtualinvoke r0.<java.io.DataOutputStream: void writeInt(int)>($i0);

        return;
    }

    public final void writeInt(int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        int i0, $i1, $i2;
        java.nio.ByteOrder $r1;
        byte[] $r2, $r3;
        java.io.OutputStream $r4;

        r0 := @this: java.io.DataOutputStream;

        i0 := @parameter0: int;

        $r2 = r0.<java.io.DataOutputStream: byte[] scratch>;

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeInt(byte[],int,int,java.nio.ByteOrder)>($r2, 0, i0, $r1);

        $r4 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;

        $r3 = r0.<java.io.DataOutputStream: byte[] scratch>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, 4);

        $i1 = r0.<java.io.DataOutputStream: int written>;

        $i2 = 4 + $i1;

        r0.<java.io.DataOutputStream: int written> = $i2;

        return;
    }

    public final void writeLong(long) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        long l0;
        java.nio.ByteOrder $r1;
        byte[] $r2, $r3;
        java.io.OutputStream $r4;
        int $i1, $i2;

        r0 := @this: java.io.DataOutputStream;

        l0 := @parameter0: long;

        $r2 = r0.<java.io.DataOutputStream: byte[] scratch>;

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeLong(byte[],int,long,java.nio.ByteOrder)>($r2, 0, l0, $r1);

        $r4 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;

        $r3 = r0.<java.io.DataOutputStream: byte[] scratch>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, 8);

        $i1 = r0.<java.io.DataOutputStream: int written>;

        $i2 = 8 + $i1;

        r0.<java.io.DataOutputStream: int written> = $i2;

        return;
    }

    public final void writeShort(int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        int i0, $i2, $i3;
        java.nio.ByteOrder $r1;
        short $s1;
        byte[] $r2, $r3;
        java.io.OutputStream $r4;

        r0 := @this: java.io.DataOutputStream;

        i0 := @parameter0: int;

        $r2 = r0.<java.io.DataOutputStream: byte[] scratch>;

        $s1 = (short) i0;

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeShort(byte[],int,short,java.nio.ByteOrder)>($r2, 0, $s1, $r1);

        $r4 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;

        $r3 = r0.<java.io.DataOutputStream: byte[] scratch>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, 2);

        $i2 = r0.<java.io.DataOutputStream: int written>;

        $i3 = 2 + $i2;

        r0.<java.io.DataOutputStream: int written> = $i3;

        return;
    }

    public final void writeUTF(java.lang.String) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        java.lang.String r1;
        byte[] $r2;

        r0 := @this: java.io.DataOutputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.nio.charset.ModifiedUtf8: byte[] encode(java.lang.String)>(r1);

        virtualinvoke r0.<java.io.DataOutputStream: void write(byte[])>($r2);

        return;
    }
}
