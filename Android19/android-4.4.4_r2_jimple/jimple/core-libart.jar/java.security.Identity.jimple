public abstract class java.security.Identity extends java.lang.Object implements java.security.Principal, java.io.Serializable
{
    private static final long serialVersionUID;
    private java.util.Vector certificates;
    private java.lang.String info;
    private java.lang.String name;
    private java.security.PublicKey publicKey;
    private java.security.IdentityScope scope;

    protected void <init>()
    {
        java.security.Identity r0;

        r0 := @this: java.security.Identity;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.security.Identity: java.lang.String info> = "no additional info";

        return;
    }

    public void <init>(java.lang.String)
    {
        java.security.Identity r0;
        java.lang.String r1;

        r0 := @this: java.security.Identity;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.security.Identity: java.lang.String info> = "no additional info";

        r0.<java.security.Identity: java.lang.String name> = r1;

        return;
    }

    public void <init>(java.lang.String, java.security.IdentityScope) throws java.security.KeyManagementException
    {
        java.security.Identity r0;
        java.lang.String r1;
        java.security.IdentityScope r2;

        r0 := @this: java.security.Identity;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.IdentityScope;

        specialinvoke r0.<java.security.Identity: void <init>(java.lang.String)>(r1);

        if r2 == null goto label1;

        virtualinvoke r2.<java.security.IdentityScope: void addIdentity(java.security.Identity)>(r0);

        r0.<java.security.Identity: java.security.IdentityScope scope> = r2;

     label1:
        return;
    }

    private static boolean checkKeysEqual(java.security.PublicKey, java.security.PublicKey)
    {
        java.security.PublicKey r0, r1;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.String r2, r3;
        byte[] $r4, $r5;

        r0 := @parameter0: java.security.PublicKey;

        r1 := @parameter1: java.security.PublicKey;

        z0 = 1;

        r2 = interfaceinvoke r0.<java.security.PublicKey: java.lang.String getFormat()>();

        if r1 == null goto label3;

        r3 = interfaceinvoke r1.<java.security.PublicKey: java.lang.String getFormat()>();

        if r3 == null goto label4;

        z1 = 1;

     label1:
        if r2 == null goto label5;

     label2:
        $z2 = z0 ^ z1;

        if $z2 != 0 goto label3;

        if r2 == null goto label6;

        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z4 != 0 goto label6;

     label3:
        return 0;

     label4:
        z1 = 0;

        goto label1;

     label5:
        z0 = 0;

        goto label2;

     label6:
        $r4 = interfaceinvoke r0.<java.security.PublicKey: byte[] getEncoded()>();

        $r5 = interfaceinvoke r1.<java.security.PublicKey: byte[] getEncoded()>();

        $z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r5);

        return $z3;
    }

    public void addCertificate(java.security.Certificate) throws java.security.KeyManagementException
    {
        java.security.Identity r0;
        java.security.Certificate r1;
        java.security.PublicKey r2, $r3, $r7;
        java.util.Vector $r4, $r5, $r6;
        boolean $z1;
        java.security.KeyManagementException $r8;

        r0 := @this: java.security.Identity;

        r1 := @parameter0: java.security.Certificate;

        r2 = interfaceinvoke r1.<java.security.Certificate: java.security.PublicKey getPublicKey()>();

        $r3 = r0.<java.security.Identity: java.security.PublicKey publicKey>;

        if $r3 == null goto label1;

        $r7 = r0.<java.security.Identity: java.security.PublicKey publicKey>;

        $z1 = staticinvoke <java.security.Identity: boolean checkKeysEqual(java.security.PublicKey,java.security.PublicKey)>($r7, r2);

        if $z1 != 0 goto label2;

        $r8 = new java.security.KeyManagementException;

        specialinvoke $r8.<java.security.KeyManagementException: void <init>(java.lang.String)>("Cert\'s public key does not match Identity\'s public key");

        throw $r8;

     label1:
        r0.<java.security.Identity: java.security.PublicKey publicKey> = r2;

     label2:
        $r4 = r0.<java.security.Identity: java.util.Vector certificates>;

        if $r4 != null goto label3;

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        r0.<java.security.Identity: java.util.Vector certificates> = $r6;

     label3:
        $r5 = r0.<java.security.Identity: java.util.Vector certificates>;

        virtualinvoke $r5.<java.util.Vector: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.security.Certificate[] certificates()
    {
        java.security.Identity r0;
        java.security.Certificate[] r1, $r5;
        java.util.Vector $r2, $r3, $r4;
        int $i0;

        r0 := @this: java.security.Identity;

        $r2 = r0.<java.security.Identity: java.util.Vector certificates>;

        if $r2 != null goto label1;

        $r5 = newarray (java.security.Certificate)[0];

        return $r5;

     label1:
        $r3 = r0.<java.security.Identity: java.util.Vector certificates>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        r1 = newarray (java.security.Certificate)[$i0];

        $r4 = r0.<java.security.Identity: java.util.Vector certificates>;

        virtualinvoke $r4.<java.util.Vector: void copyInto(java.lang.Object[])>(r1);

        return r1;
    }

    public final boolean equals(java.lang.Object)
    {
        java.security.Identity r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r4;
        java.security.IdentityScope $r5, $r6;

        r0 := @this: java.security.Identity;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof java.security.Identity;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (java.security.Identity) r1;

        $r4 = r0.<java.security.Identity: java.lang.String name>;

        $r3 = r2.<java.security.Identity: java.lang.String name>;

        $z1 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 == 0 goto label4;

        $r6 = r0.<java.security.Identity: java.security.IdentityScope scope>;

        $r5 = r2.<java.security.Identity: java.security.IdentityScope scope>;

        $z3 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z3 != 0 goto label1;

     label4:
        $z2 = virtualinvoke r0.<java.security.Identity: boolean identityEquals(java.security.Identity)>(r2);

        return $z2;
    }

    public java.lang.String getInfo()
    {
        java.security.Identity r0;
        java.lang.String $r1;

        r0 := @this: java.security.Identity;

        $r1 = r0.<java.security.Identity: java.lang.String info>;

        return $r1;
    }

    public final java.lang.String getName()
    {
        java.security.Identity r0;
        java.lang.String $r1;

        r0 := @this: java.security.Identity;

        $r1 = r0.<java.security.Identity: java.lang.String name>;

        return $r1;
    }

    public java.security.PublicKey getPublicKey()
    {
        java.security.Identity r0;
        java.security.PublicKey $r1;

        r0 := @this: java.security.Identity;

        $r1 = r0.<java.security.Identity: java.security.PublicKey publicKey>;

        return $r1;
    }

    public final java.security.IdentityScope getScope()
    {
        java.security.Identity r0;
        java.security.IdentityScope $r1;

        r0 := @this: java.security.Identity;

        $r1 = r0.<java.security.Identity: java.security.IdentityScope scope>;

        return $r1;
    }

    public int hashCode()
    {
        java.security.Identity r0;
        java.lang.String r1, $r4;
        int i0, $i1, $i2;
        java.security.IdentityScope $r2, $r3;

        r0 := @this: java.security.Identity;

        r1 = r0.<java.security.Identity: java.lang.String name>;

        i0 = 0;

        if r1 == null goto label1;

        $r4 = r0.<java.security.Identity: java.lang.String name>;

        $i2 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        i0 = 0 + $i2;

     label1:
        $r2 = r0.<java.security.Identity: java.security.IdentityScope scope>;

        if $r2 == null goto label2;

        $r3 = r0.<java.security.Identity: java.security.IdentityScope scope>;

        $i1 = virtualinvoke $r3.<java.security.IdentityScope: int hashCode()>();

        i0 = i0 + $i1;

     label2:
        return i0;
    }

    protected boolean identityEquals(java.security.Identity)
    {
        java.security.Identity r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;
        java.security.PublicKey $r4, $r5, $r6, $r7;

        r0 := @this: java.security.Identity;

        r1 := @parameter0: java.security.Identity;

        $r3 = r0.<java.security.Identity: java.lang.String name>;

        $r2 = r1.<java.security.Identity: java.lang.String name>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r4 = r0.<java.security.Identity: java.security.PublicKey publicKey>;

        if $r4 != null goto label3;

        $r7 = r1.<java.security.Identity: java.security.PublicKey publicKey>;

        if $r7 != null goto label1;

        return 1;

     label3:
        $r6 = r0.<java.security.Identity: java.security.PublicKey publicKey>;

        $r5 = r1.<java.security.Identity: java.security.PublicKey publicKey>;

        $z1 = staticinvoke <java.security.Identity: boolean checkKeysEqual(java.security.PublicKey,java.security.PublicKey)>($r6, $r5);

        return $z1;
    }

    public void removeCertificate(java.security.Certificate) throws java.security.KeyManagementException
    {
        java.security.Identity r0;
        java.security.Certificate r1;
        java.util.Vector $r2, $r3, $r4;
        boolean $z0;
        java.security.KeyManagementException $r5;

        r0 := @this: java.security.Identity;

        r1 := @parameter0: java.security.Certificate;

        $r2 = r0.<java.security.Identity: java.util.Vector certificates>;

        if $r2 == null goto label2;

        $r3 = r0.<java.security.Identity: java.util.Vector certificates>;

        $z0 = virtualinvoke $r3.<java.util.Vector: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = new java.security.KeyManagementException;

        specialinvoke $r5.<java.security.KeyManagementException: void <init>(java.lang.String)>("Certificate not found");

        throw $r5;

     label1:
        $r4 = r0.<java.security.Identity: java.util.Vector certificates>;

        virtualinvoke $r4.<java.util.Vector: boolean removeElement(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void setInfo(java.lang.String)
    {
        java.security.Identity r0;
        java.lang.String r1;

        r0 := @this: java.security.Identity;

        r1 := @parameter0: java.lang.String;

        r0.<java.security.Identity: java.lang.String info> = r1;

        return;
    }

    public void setPublicKey(java.security.PublicKey) throws java.security.KeyManagementException
    {
        java.security.Identity r0, r2;
        java.security.PublicKey r1;
        java.security.IdentityScope $r3, $r4;
        java.security.KeyManagementException $r5;

        r0 := @this: java.security.Identity;

        r1 := @parameter0: java.security.PublicKey;

        $r3 = r0.<java.security.Identity: java.security.IdentityScope scope>;

        if $r3 == null goto label1;

        if r1 == null goto label1;

        $r4 = r0.<java.security.Identity: java.security.IdentityScope scope>;

        r2 = virtualinvoke $r4.<java.security.IdentityScope: java.security.Identity getIdentity(java.security.PublicKey)>(r1);

        if r2 == null goto label1;

        if r2 == r0 goto label1;

        $r5 = new java.security.KeyManagementException;

        specialinvoke $r5.<java.security.KeyManagementException: void <init>(java.lang.String)>("key already used in scope");

        throw $r5;

     label1:
        r0.<java.security.Identity: java.security.PublicKey publicKey> = r1;

        r0.<java.security.Identity: java.util.Vector certificates> = null;

        return;
    }

    public java.lang.String toString()
    {
        java.security.Identity r0;
        java.lang.String r1, $r2, $r8;
        java.security.IdentityScope $r3, $r7;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10;

        r0 := @this: java.security.Identity;

        $r2 = r0.<java.security.Identity: java.lang.String name>;

        if $r2 != null goto label3;

        r1 = "";

     label1:
        $r3 = r0.<java.security.Identity: java.security.IdentityScope scope>;

        if $r3 == null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $r7 = r0.<java.security.Identity: java.security.IdentityScope scope>;

        $r8 = virtualinvoke $r7.<java.security.IdentityScope: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return r1;

     label3:
        r1 = r0.<java.security.Identity: java.lang.String name>;

        goto label1;
    }

    public java.lang.String toString(boolean)
    {
        java.security.Identity r0;
        boolean z0;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4, $r6;

        r0 := @this: java.security.Identity;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<java.security.Identity: java.lang.String toString()>();

        if z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r0.<java.security.Identity: java.lang.String info>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r1;
    }

    public static void <clinit>()
    {
        <java.security.Identity: long serialVersionUID> = 3609922007826600659L;

        return;
    }
}
