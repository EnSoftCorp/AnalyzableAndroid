public class java.sql.Time extends java.util.Date
{
    private static final java.lang.String PADDING;
    private static final long serialVersionUID;

    public void <init>(int, int, int)
    {
        java.sql.Time r0;
        int i0, i1, i2;

        r0 := @this: java.sql.Time;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<java.util.Date: void <init>(int,int,int,int,int,int)>(70, 0, 1, i0, i1, i2);

        return;
    }

    public void <init>(long)
    {
        java.sql.Time r0;
        long l0;

        r0 := @this: java.sql.Time;

        l0 := @parameter0: long;

        specialinvoke r0.<java.util.Date: void <init>(long)>(l0);

        return;
    }

    private void format(int, int, java.lang.StringBuilder)
    {
        java.sql.Time r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder r1;
        java.lang.String r2, $r4, $r5;

        r0 := @this: java.sql.Time;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.StringBuilder;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = i1 - $i2;

        if $i3 <= 0 goto label1;

        $r4 = "00";

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        $i5 = i1 - $i4;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        return;
    }

    public static java.sql.Time valueOf(java.lang.String)
    {
        java.lang.String r0, $r3, $r4, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.IllegalArgumentException $r1, $r6;
        java.sql.Time $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeString == null");

        throw $r6;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i2 = i0 + 1;

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(58, $i2);

        if i1 == -1 goto label2;

        if i0 == 0 goto label2;

        $i3 = i1 + 1;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i3 != $i4 goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label3:
        $r2 = new java.sql.Time;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $i6 = i0 + 1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i6, i1);

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $i8 = i1 + 1;

        $i9 = virtualinvoke r0.<java.lang.String: int length()>();

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9);

        $i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        specialinvoke $r2.<java.sql.Time: void <init>(int,int,int)>($i5, $i7, $i10);

        return $r2;
    }

    public int getDate()
    {
        java.sql.Time r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.sql.Time;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unimplemented");

        throw $r1;
    }

    public int getDay()
    {
        java.sql.Time r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.sql.Time;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unimplemented");

        throw $r1;
    }

    public int getMonth()
    {
        java.sql.Time r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.sql.Time;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unimplemented");

        throw $r1;
    }

    public int getYear()
    {
        java.sql.Time r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.sql.Time;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unimplemented");

        throw $r1;
    }

    public void setDate(int)
    {
        java.sql.Time r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.sql.Time;

        i0 := @parameter0: int;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unimplemented");

        throw $r1;
    }

    public void setMonth(int)
    {
        java.sql.Time r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.sql.Time;

        i0 := @parameter0: int;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unimplemented");

        throw $r1;
    }

    public void setTime(long)
    {
        java.sql.Time r0;
        long l0;

        r0 := @this: java.sql.Time;

        l0 := @parameter0: long;

        specialinvoke r0.<java.util.Date: void setTime(long)>(l0);

        return;
    }

    public void setYear(int)
    {
        java.sql.Time r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.sql.Time;

        i0 := @parameter0: int;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unimplemented");

        throw $r1;
    }

    public java.lang.String toString()
    {
        java.sql.Time r0;
        java.lang.StringBuilder r1, $r2;
        int $i0, $i1, $i2;
        java.lang.String $r5;

        r0 := @this: java.sql.Time;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(8);

        r1 = $r2;

        $i0 = virtualinvoke r0.<java.sql.Time: int getHours()>();

        specialinvoke r0.<java.sql.Time: void format(int,int,java.lang.StringBuilder)>($i0, 2, r1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i1 = virtualinvoke r0.<java.sql.Time: int getMinutes()>();

        specialinvoke r0.<java.sql.Time: void format(int,int,java.lang.StringBuilder)>($i1, 2, r1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i2 = virtualinvoke r0.<java.sql.Time: int getSeconds()>();

        specialinvoke r0.<java.sql.Time: void format(int,int,java.lang.StringBuilder)>($i2, 2, r1);

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static void <clinit>()
    {
        <java.sql.Time: long serialVersionUID> = 8397324403548013681L;

        <java.sql.Time: java.lang.String PADDING> = "00";

        return;
    }
}
