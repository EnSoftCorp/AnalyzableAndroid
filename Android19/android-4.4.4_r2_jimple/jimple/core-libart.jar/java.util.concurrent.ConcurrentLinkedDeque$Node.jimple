final class java.util.concurrent.ConcurrentLinkedDeque$Node extends java.lang.Object
{
    private static final sun.misc.Unsafe UNSAFE;
    private static final long itemOffset;
    private static final long nextOffset;
    private static final long prevOffset;
    volatile java.lang.Object item;
    volatile java.util.concurrent.ConcurrentLinkedDeque$Node next;
    volatile java.util.concurrent.ConcurrentLinkedDeque$Node prev;

    static void <clinit>()
    {
        java.lang.Exception r0, $r11;
        sun.misc.Unsafe $r1, $r3, $r6, $r9;
        java.lang.Class $r2, $r5, $r8;
        java.lang.reflect.Field $r4, $r7, $r10;
        long $l0, $l1, $l2;
        java.lang.Error $r12;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentLinkedDeque$Node: sun.misc.Unsafe UNSAFE> = $r1;

        $r3 = <java.util.concurrent.ConcurrentLinkedDeque$Node: sun.misc.Unsafe UNSAFE>;

        $r2 = class "java/util/concurrent/ConcurrentLinkedDeque$Node";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("prev");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.ConcurrentLinkedDeque$Node: long prevOffset> = $l0;

        $r6 = <java.util.concurrent.ConcurrentLinkedDeque$Node: sun.misc.Unsafe UNSAFE>;

        $r5 = class "java/util/concurrent/ConcurrentLinkedDeque$Node";

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("item");

        $l1 = virtualinvoke $r6.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r7);

        <java.util.concurrent.ConcurrentLinkedDeque$Node: long itemOffset> = $l1;

        $r9 = <java.util.concurrent.ConcurrentLinkedDeque$Node: sun.misc.Unsafe UNSAFE>;

        $r8 = class "java/util/concurrent/ConcurrentLinkedDeque$Node";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("next");

        $l2 = virtualinvoke $r9.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r10);

        <java.util.concurrent.ConcurrentLinkedDeque$Node: long nextOffset> = $l2;

     label2:
        return;

     label3:
        $r11 := @caughtexception;

        r0 = $r11;

        $r12 = new java.lang.Error;

        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    void <init>()
    {
        java.util.concurrent.ConcurrentLinkedDeque$Node r0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(java.lang.Object)
    {
        java.util.concurrent.ConcurrentLinkedDeque$Node r0;
        java.lang.Object r1;
        long $l0;
        sun.misc.Unsafe $r2;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$Node;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <java.util.concurrent.ConcurrentLinkedDeque$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedDeque$Node: long itemOffset>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, r1);

        return;
    }

    boolean casItem(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentLinkedDeque$Node r0;
        java.lang.Object r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$Node;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = <java.util.concurrent.ConcurrentLinkedDeque$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedDeque$Node: long itemOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    boolean casNext(java.util.concurrent.ConcurrentLinkedDeque$Node, java.util.concurrent.ConcurrentLinkedDeque$Node)
    {
        java.util.concurrent.ConcurrentLinkedDeque$Node r0, r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$Node;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedDeque$Node;

        r2 := @parameter1: java.util.concurrent.ConcurrentLinkedDeque$Node;

        $r3 = <java.util.concurrent.ConcurrentLinkedDeque$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedDeque$Node: long nextOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    boolean casPrev(java.util.concurrent.ConcurrentLinkedDeque$Node, java.util.concurrent.ConcurrentLinkedDeque$Node)
    {
        java.util.concurrent.ConcurrentLinkedDeque$Node r0, r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$Node;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedDeque$Node;

        r2 := @parameter1: java.util.concurrent.ConcurrentLinkedDeque$Node;

        $r3 = <java.util.concurrent.ConcurrentLinkedDeque$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedDeque$Node: long prevOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    void lazySetNext(java.util.concurrent.ConcurrentLinkedDeque$Node)
    {
        java.util.concurrent.ConcurrentLinkedDeque$Node r0, r1;
        long $l0;
        sun.misc.Unsafe $r2;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$Node;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedDeque$Node;

        $r2 = <java.util.concurrent.ConcurrentLinkedDeque$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedDeque$Node: long nextOffset>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, r1);

        return;
    }

    void lazySetPrev(java.util.concurrent.ConcurrentLinkedDeque$Node)
    {
        java.util.concurrent.ConcurrentLinkedDeque$Node r0, r1;
        long $l0;
        sun.misc.Unsafe $r2;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$Node;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedDeque$Node;

        $r2 = <java.util.concurrent.ConcurrentLinkedDeque$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedDeque$Node: long prevOffset>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, r1);

        return;
    }
}
