public abstract class java.nio.MappedByteBuffer extends java.nio.ByteBuffer
{
    final java.nio.channels.FileChannel$MapMode mapMode;

    void <init>(java.nio.MemoryBlock, int, java.nio.channels.FileChannel$MapMode)
    {
        java.nio.MappedByteBuffer r0;
        java.nio.MemoryBlock r1;
        int i0;
        java.nio.channels.FileChannel$MapMode r2;

        r0 := @this: java.nio.MappedByteBuffer;

        r1 := @parameter0: java.nio.MemoryBlock;

        i0 := @parameter1: int;

        r2 := @parameter2: java.nio.channels.FileChannel$MapMode;

        specialinvoke r0.<java.nio.ByteBuffer: void <init>(int,java.nio.MemoryBlock)>(i0, r1);

        r0.<java.nio.MappedByteBuffer: java.nio.channels.FileChannel$MapMode mapMode> = r2;

        return;
    }

    private void checkIsMapped()
    {
        java.nio.MappedByteBuffer r0;
        java.nio.channels.FileChannel$MapMode $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.nio.MappedByteBuffer;

        $r1 = r0.<java.nio.MappedByteBuffer: java.nio.channels.FileChannel$MapMode mapMode>;

        if $r1 != null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public final java.nio.MappedByteBuffer force()
    {
        java.nio.MappedByteBuffer r0;
        libcore.io.ErrnoException r1, $r7;
        java.nio.channels.FileChannel$MapMode $r2, $r3;
        java.nio.MemoryBlock $r4, $r6;
        libcore.io.Os $r5;
        long $l0, $l1;
        int $i2;
        java.lang.AssertionError $r8;

        r0 := @this: java.nio.MappedByteBuffer;

        specialinvoke r0.<java.nio.MappedByteBuffer: void checkIsMapped()>();

        $r3 = r0.<java.nio.MappedByteBuffer: java.nio.channels.FileChannel$MapMode mapMode>;

        $r2 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_WRITE>;

        if $r3 != $r2 goto label2;

     label1:
        $r5 = <libcore.io.Libcore: libcore.io.Os os>;

        $r4 = r0.<java.nio.MappedByteBuffer: java.nio.MemoryBlock block>;

        $l0 = virtualinvoke $r4.<java.nio.MemoryBlock: long toLong()>();

        $r6 = r0.<java.nio.MappedByteBuffer: java.nio.MemoryBlock block>;

        $l1 = virtualinvoke $r6.<java.nio.MemoryBlock: long getSize()>();

        $i2 = <libcore.io.OsConstants: int MS_SYNC>;

        interfaceinvoke $r5.<libcore.io.Os: void msync(long,long,int)>($l0, $l1, $i2);

     label2:
        return r0;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r8;

        catch libcore.io.ErrnoException from label1 to label2 with label3;
    }

    public final boolean isLoaded()
    {
        java.nio.MappedByteBuffer r0;
        long l0, l1, l4, l5, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19;
        int i2, i3, i6, $i9, $i20, $i22;
        byte[] r2;
        byte b7, $b8, $b21;
        java.nio.MemoryBlock $r3, $r4;
        libcore.io.Os $r5, $r6;
        libcore.io.ErrnoException $r7;

        r0 := @this: java.nio.MappedByteBuffer;

        specialinvoke r0.<java.nio.MappedByteBuffer: void checkIsMapped()>();

        $r3 = r0.<java.nio.MappedByteBuffer: java.nio.MemoryBlock block>;

        l0 = virtualinvoke $r3.<java.nio.MemoryBlock: long toLong()>();

        $r4 = r0.<java.nio.MappedByteBuffer: java.nio.MemoryBlock block>;

        l1 = virtualinvoke $r4.<java.nio.MemoryBlock: long getSize()>();

        $b8 = l1 cmp 0L;

        if $b8 != 0 goto label1;

        return 1;

     label1:
        $r5 = <libcore.io.Libcore: libcore.io.Os os>;

        $i9 = <libcore.io.OsConstants: int _SC_PAGE_SIZE>;

        $l11 = interfaceinvoke $r5.<libcore.io.Os: long sysconf(int)>($i9);

        i2 = (int) $l11;

     label2:
        $l10 = (long) i2;

        $l13 = l0 % $l10;

        i3 = (int) $l13;

        $l12 = (long) i3;

        l4 = l0 - $l12;

        $l15 = (long) i3;

        l5 = l1 + $l15;

     label3:
        $l14 = (long) i2;

        $l17 = l5 + $l14;

        $l19 = $l17 - 1L;

        $l16 = (long) i2;

        $l18 = $l19 / $l16;

        $i22 = (int) $l18;

        r2 = newarray (byte)[$i22];

        $r6 = <libcore.io.Libcore: libcore.io.Os os>;

        interfaceinvoke $r6.<libcore.io.Os: void mincore(long,long,byte[])>(l4, l5, r2);

     label4:
        i6 = 0;

     label5:
        $i20 = lengthof r2;

        if i6 >= $i20 goto label8;

        b7 = r2[i6];

     label6:
        $b21 = b7 & 1;

        if $b21 == 1 goto label7;

        return 0;

     label7:
        i6 = i6 + 1;

        goto label5;

     label8:
        return 1;

     label9:
        $r7 := @caughtexception;

        return 0;

        catch libcore.io.ErrnoException from label1 to label2 with label9;
        catch libcore.io.ErrnoException from label3 to label4 with label9;
        catch libcore.io.ErrnoException from label5 to label6 with label9;
    }

    public final java.nio.MappedByteBuffer load()
    {
        java.nio.MappedByteBuffer r0;
        java.nio.MemoryBlock $r2, $r4, $r5, $r7;
        libcore.io.Os $r3, $r6;
        long $l0, $l1, $l2, $l3;
        libcore.io.ErrnoException $r8;

        r0 := @this: java.nio.MappedByteBuffer;

        specialinvoke r0.<java.nio.MappedByteBuffer: void checkIsMapped()>();

     label1:
        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r2 = r0.<java.nio.MappedByteBuffer: java.nio.MemoryBlock block>;

        $l0 = virtualinvoke $r2.<java.nio.MemoryBlock: long toLong()>();

        $r4 = r0.<java.nio.MappedByteBuffer: java.nio.MemoryBlock block>;

        $l1 = virtualinvoke $r4.<java.nio.MemoryBlock: long getSize()>();

        interfaceinvoke $r3.<libcore.io.Os: void mlock(long,long)>($l0, $l1);

        $r6 = <libcore.io.Libcore: libcore.io.Os os>;

        $r5 = r0.<java.nio.MappedByteBuffer: java.nio.MemoryBlock block>;

        $l2 = virtualinvoke $r5.<java.nio.MemoryBlock: long toLong()>();

        $r7 = r0.<java.nio.MappedByteBuffer: java.nio.MemoryBlock block>;

        $l3 = virtualinvoke $r7.<java.nio.MemoryBlock: long getSize()>();

        interfaceinvoke $r6.<libcore.io.Os: void munlock(long,long)>($l2, $l3);

     label2:
        return r0;

     label3:
        $r8 := @caughtexception;

        return r0;

        catch libcore.io.ErrnoException from label1 to label2 with label3;
    }
}
