public class java.util.concurrent.locks.LockSupport extends java.lang.Object
{
    private static final long parkBlockerOffset;
    private static final sun.misc.Unsafe unsafe;

    static void <clinit>()
    {
        java.lang.Exception r0, $r5;
        sun.misc.Unsafe $r1, $r3;
        java.lang.Class $r2;
        java.lang.reflect.Field $r4;
        long $l0;
        java.lang.Error $r6;

        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe unsafe> = $r1;

     label1:
        $r3 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe unsafe>;

        $r2 = class "java/lang/Thread";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("parkBlocker");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.locks.LockSupport: long parkBlockerOffset> = $l0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r0 = $r5;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void <init>()
    {
        java.util.concurrent.locks.LockSupport r0;

        r0 := @this: java.util.concurrent.locks.LockSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object getBlocker(java.lang.Thread)
    {
        java.lang.Thread r0;
        long $l0;
        sun.misc.Unsafe $r1;
        java.lang.Object $r2;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.lang.Thread;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r1 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.locks.LockSupport: long parkBlockerOffset>;

        $r2 = virtualinvoke $r1.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r0, $l0);

        return $r2;
    }

    public static void park()
    {
        sun.misc.Unsafe $r0;

        $r0 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe unsafe>;

        virtualinvoke $r0.<sun.misc.Unsafe: void park(boolean,long)>(0, 0L);

        return;
    }

    public static void park(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Thread r1;
        sun.misc.Unsafe $r2;

        r0 := @parameter0: java.lang.Object;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        staticinvoke <java.util.concurrent.locks.LockSupport: void setBlocker(java.lang.Thread,java.lang.Object)>(r1, r0);

        $r2 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe unsafe>;

        virtualinvoke $r2.<sun.misc.Unsafe: void park(boolean,long)>(0, 0L);

        staticinvoke <java.util.concurrent.locks.LockSupport: void setBlocker(java.lang.Thread,java.lang.Object)>(r1, null);

        return;
    }

    public static void parkNanos(long)
    {
        long l0;
        byte $b1;
        sun.misc.Unsafe $r0;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $r0 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe unsafe>;

        virtualinvoke $r0.<sun.misc.Unsafe: void park(boolean,long)>(0, l0);

     label1:
        return;
    }

    public static void parkNanos(java.lang.Object, long)
    {
        java.lang.Object r0;
        long l0;
        java.lang.Thread r1;
        byte $b1;
        sun.misc.Unsafe $r2;

        r0 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        staticinvoke <java.util.concurrent.locks.LockSupport: void setBlocker(java.lang.Thread,java.lang.Object)>(r1, r0);

        $r2 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe unsafe>;

        virtualinvoke $r2.<sun.misc.Unsafe: void park(boolean,long)>(0, l0);

        staticinvoke <java.util.concurrent.locks.LockSupport: void setBlocker(java.lang.Thread,java.lang.Object)>(r1, null);

     label1:
        return;
    }

    public static void parkUntil(long)
    {
        long l0;
        sun.misc.Unsafe $r0;

        l0 := @parameter0: long;

        $r0 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe unsafe>;

        virtualinvoke $r0.<sun.misc.Unsafe: void park(boolean,long)>(1, l0);

        return;
    }

    public static void parkUntil(java.lang.Object, long)
    {
        java.lang.Object r0;
        long l0;
        java.lang.Thread r1;
        sun.misc.Unsafe $r2;

        r0 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        staticinvoke <java.util.concurrent.locks.LockSupport: void setBlocker(java.lang.Thread,java.lang.Object)>(r1, r0);

        $r2 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe unsafe>;

        virtualinvoke $r2.<sun.misc.Unsafe: void park(boolean,long)>(1, l0);

        staticinvoke <java.util.concurrent.locks.LockSupport: void setBlocker(java.lang.Thread,java.lang.Object)>(r1, null);

        return;
    }

    private static void setBlocker(java.lang.Thread, java.lang.Object)
    {
        java.lang.Thread r0;
        java.lang.Object r1;
        long $l0;
        sun.misc.Unsafe $r2;

        r0 := @parameter0: java.lang.Thread;

        r1 := @parameter1: java.lang.Object;

        $r2 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.locks.LockSupport: long parkBlockerOffset>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, r1);

        return;
    }

    public static void unpark(java.lang.Thread)
    {
        java.lang.Thread r0;
        sun.misc.Unsafe $r1;

        r0 := @parameter0: java.lang.Thread;

        if r0 == null goto label1;

        $r1 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe unsafe>;

        virtualinvoke $r1.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r0);

     label1:
        return;
    }
}
