public class libcore.io.BlockGuardOs extends libcore.io.ForwardingOs
{

    public void <init>(libcore.io.Os)
    {
        libcore.io.BlockGuardOs r0;
        libcore.io.Os r1;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: libcore.io.Os;

        specialinvoke r0.<libcore.io.ForwardingOs: void <init>(libcore.io.Os)>(r1);

        return;
    }

    private static boolean isLingerSocket(java.io.FileDescriptor) throws libcore.io.ErrnoException
    {
        java.io.FileDescriptor r0;
        libcore.io.StructLinger r1;
        int $i0, $i1, $i2;
        libcore.io.Os $r2;
        boolean $z0;

        r0 := @parameter0: java.io.FileDescriptor;

        $r2 = <libcore.io.Libcore: libcore.io.Os os>;

        $i1 = <libcore.io.OsConstants: int SOL_SOCKET>;

        $i0 = <libcore.io.OsConstants: int SO_LINGER>;

        r1 = interfaceinvoke $r2.<libcore.io.Os: libcore.io.StructLinger getsockoptLinger(java.io.FileDescriptor,int,int)>(r0, $i1, $i0);

        $z0 = virtualinvoke r1.<libcore.io.StructLinger: boolean isOn()>();

        if $z0 == 0 goto label1;

        $i2 = r1.<libcore.io.StructLinger: int l_linger>;

        if $i2 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private java.io.FileDescriptor tagSocket(java.io.FileDescriptor) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        java.net.SocketException r2, $r4;
        dalvik.system.SocketTagger $r3;
        libcore.io.ErrnoException $r5;
        int $i0;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

     label1:
        $r3 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r3.<dalvik.system.SocketTagger: void tag(java.io.FileDescriptor)>(r1);

     label2:
        return r1;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new libcore.io.ErrnoException;

        $i0 = <libcore.io.OsConstants: int EINVAL>;

        specialinvoke $r5.<libcore.io.ErrnoException: void <init>(java.lang.String,int,java.lang.Throwable)>("socket", $i0, r2);

        throw $r5;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    private void untagSocket(java.io.FileDescriptor) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        java.net.SocketException r2, $r4;
        dalvik.system.SocketTagger $r3;
        libcore.io.ErrnoException $r5;
        int $i0;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

     label1:
        $r3 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r3.<dalvik.system.SocketTagger: void untag(java.io.FileDescriptor)>(r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new libcore.io.ErrnoException;

        $i0 = <libcore.io.OsConstants: int EINVAL>;

        specialinvoke $r5.<libcore.io.ErrnoException: void <init>(java.lang.String,int,java.lang.Throwable)>("socket", $i0, r2);

        throw $r5;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public java.io.FileDescriptor accept(java.io.FileDescriptor, java.net.InetSocketAddress) throws libcore.io.ErrnoException, java.net.SocketException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1, $r5, $r6;
        java.net.InetSocketAddress r2;
        dalvik.system.BlockGuard$Policy $r3;
        libcore.io.Os $r4;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.net.InetSocketAddress;

        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

        $r4 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $r5 = interfaceinvoke $r4.<libcore.io.Os: java.io.FileDescriptor accept(java.io.FileDescriptor,java.net.InetSocketAddress)>(r1, r2);

        $r6 = specialinvoke r0.<libcore.io.BlockGuardOs: java.io.FileDescriptor tagSocket(java.io.FileDescriptor)>($r5);

        return $r6;
    }

    public void close(java.io.FileDescriptor) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        libcore.io.Os $r3, $r5;
        libcore.io.StructStat $r4;
        int $i0;
        boolean $z0, $z1;
        dalvik.system.BlockGuard$Policy $r6;
        libcore.io.ErrnoException $r7;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

     label1:
        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r4 = interfaceinvoke $r3.<libcore.io.Os: libcore.io.StructStat fstat(java.io.FileDescriptor)>(r1);

        $i0 = $r4.<libcore.io.StructStat: int st_mode>;

        $z0 = staticinvoke <libcore.io.OsConstants: boolean S_ISSOCK(int)>($i0);

        if $z0 == 0 goto label3;

        $z1 = staticinvoke <libcore.io.BlockGuardOs: boolean isLingerSocket(java.io.FileDescriptor)>(r1);

        if $z1 == 0 goto label2;

        $r6 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r6.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

     label2:
        specialinvoke r0.<libcore.io.BlockGuardOs: void untagSocket(java.io.FileDescriptor)>(r1);

     label3:
        $r5 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        interfaceinvoke $r5.<libcore.io.Os: void close(java.io.FileDescriptor)>(r1);

        return;

     label4:
        $r7 := @caughtexception;

        goto label3;

        catch libcore.io.ErrnoException from label1 to label2 with label4;
        catch libcore.io.ErrnoException from label2 to label3 with label4;
    }

    public void connect(java.io.FileDescriptor, java.net.InetAddress, int) throws libcore.io.ErrnoException, java.net.SocketException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        java.net.InetAddress r2;
        int i0;
        dalvik.system.BlockGuard$Policy $r3;
        libcore.io.Os $r4;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

        $r4 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        interfaceinvoke $r4.<libcore.io.Os: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>(r1, r2, i0);

        return;
    }

    public void fdatasync(java.io.FileDescriptor) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        dalvik.system.BlockGuard$Policy $r2;
        libcore.io.Os $r3;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        $r2 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r2.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

        $r3 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        interfaceinvoke $r3.<libcore.io.Os: void fdatasync(java.io.FileDescriptor)>(r1);

        return;
    }

    public void fsync(java.io.FileDescriptor) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        dalvik.system.BlockGuard$Policy $r2;
        libcore.io.Os $r3;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        $r2 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r2.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

        $r3 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        interfaceinvoke $r3.<libcore.io.Os: void fsync(java.io.FileDescriptor)>(r1);

        return;
    }

    public void ftruncate(java.io.FileDescriptor, long) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        long l0;
        dalvik.system.BlockGuard$Policy $r2;
        libcore.io.Os $r3;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        l0 := @parameter1: long;

        $r2 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r2.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

        $r3 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        interfaceinvoke $r3.<libcore.io.Os: void ftruncate(java.io.FileDescriptor,long)>(r1, l0);

        return;
    }

    public java.io.FileDescriptor open(java.lang.String, int, int) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4;
        dalvik.system.BlockGuard$Policy $r2, $r5;
        libcore.io.Os $r3;
        java.io.FileDescriptor $r4;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r2.<dalvik.system.BlockGuard$Policy: void onReadFromDisk()>();

        $i2 = <libcore.io.OsConstants: int O_ACCMODE>;

        $i4 = i1 & $i2;

        $i3 = <libcore.io.OsConstants: int O_RDONLY>;

        if $i4 == $i3 goto label1;

        $r5 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r5.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

     label1:
        $r3 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $r4 = interfaceinvoke $r3.<libcore.io.Os: java.io.FileDescriptor open(java.lang.String,int,int)>(r1, i0, i1);

        return $r4;
    }

    public int poll(libcore.io.StructPollfd[], int) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        libcore.io.StructPollfd[] r1;
        int i0, $i1;
        libcore.io.Os $r2;
        dalvik.system.BlockGuard$Policy $r3;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: libcore.io.StructPollfd[];

        i0 := @parameter1: int;

        if i0 == 0 goto label1;

        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

     label1:
        $r2 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i1 = interfaceinvoke $r2.<libcore.io.Os: int poll(libcore.io.StructPollfd[],int)>(r1, i0);

        return $i1;
    }

    public int pread(java.io.FileDescriptor, java.nio.ByteBuffer, long) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        java.nio.ByteBuffer r2;
        long l0;
        dalvik.system.BlockGuard$Policy $r3;
        libcore.io.Os $r4;
        int $i1;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.nio.ByteBuffer;

        l0 := @parameter2: long;

        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onReadFromDisk()>();

        $r4 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i1 = interfaceinvoke $r4.<libcore.io.Os: int pread(java.io.FileDescriptor,java.nio.ByteBuffer,long)>(r1, r2, l0);

        return $i1;
    }

    public int pread(java.io.FileDescriptor, byte[], int, int, long) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        byte[] r2;
        int i0, i1, $i3;
        long l2;
        dalvik.system.BlockGuard$Policy $r3;
        libcore.io.Os $r4;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l2 := @parameter4: long;

        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onReadFromDisk()>();

        $r4 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i3 = interfaceinvoke $r4.<libcore.io.Os: int pread(java.io.FileDescriptor,byte[],int,int,long)>(r1, r2, i0, i1, l2);

        return $i3;
    }

    public int pwrite(java.io.FileDescriptor, java.nio.ByteBuffer, long) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        java.nio.ByteBuffer r2;
        long l0;
        dalvik.system.BlockGuard$Policy $r3;
        libcore.io.Os $r4;
        int $i1;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.nio.ByteBuffer;

        l0 := @parameter2: long;

        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

        $r4 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i1 = interfaceinvoke $r4.<libcore.io.Os: int pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)>(r1, r2, l0);

        return $i1;
    }

    public int pwrite(java.io.FileDescriptor, byte[], int, int, long) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        byte[] r2;
        int i0, i1, $i3;
        long l2;
        dalvik.system.BlockGuard$Policy $r3;
        libcore.io.Os $r4;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l2 := @parameter4: long;

        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

        $r4 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i3 = interfaceinvoke $r4.<libcore.io.Os: int pwrite(java.io.FileDescriptor,byte[],int,int,long)>(r1, r2, i0, i1, l2);

        return $i3;
    }

    public int read(java.io.FileDescriptor, java.nio.ByteBuffer) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        java.nio.ByteBuffer r2;
        dalvik.system.BlockGuard$Policy $r3;
        libcore.io.Os $r4;
        int $i0;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.nio.ByteBuffer;

        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onReadFromDisk()>();

        $r4 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i0 = interfaceinvoke $r4.<libcore.io.Os: int read(java.io.FileDescriptor,java.nio.ByteBuffer)>(r1, r2);

        return $i0;
    }

    public int read(java.io.FileDescriptor, byte[], int, int) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        byte[] r2;
        int i0, i1, $i2;
        dalvik.system.BlockGuard$Policy $r3;
        libcore.io.Os $r4;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onReadFromDisk()>();

        $r4 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i2 = interfaceinvoke $r4.<libcore.io.Os: int read(java.io.FileDescriptor,byte[],int,int)>(r1, r2, i0, i1);

        return $i2;
    }

    public int readv(java.io.FileDescriptor, java.lang.Object[], int[], int[]) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        java.lang.Object[] r2;
        int[] r3, r4;
        dalvik.system.BlockGuard$Policy $r5;
        libcore.io.Os $r6;
        int $i0;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        $r5 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r5.<dalvik.system.BlockGuard$Policy: void onReadFromDisk()>();

        $r6 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i0 = interfaceinvoke $r6.<libcore.io.Os: int readv(java.io.FileDescriptor,java.lang.Object[],int[],int[])>(r1, r2, r3, r4);

        return $i0;
    }

    public int recvfrom(java.io.FileDescriptor, java.nio.ByteBuffer, int, java.net.InetSocketAddress) throws libcore.io.ErrnoException, java.net.SocketException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        java.nio.ByteBuffer r2;
        int i0, $i1;
        java.net.InetSocketAddress r3;
        dalvik.system.BlockGuard$Policy $r4;
        libcore.io.Os $r5;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.nio.ByteBuffer;

        i0 := @parameter2: int;

        r3 := @parameter3: java.net.InetSocketAddress;

        $r4 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r4.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

        $r5 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i1 = interfaceinvoke $r5.<libcore.io.Os: int recvfrom(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetSocketAddress)>(r1, r2, i0, r3);

        return $i1;
    }

    public int recvfrom(java.io.FileDescriptor, byte[], int, int, int, java.net.InetSocketAddress) throws libcore.io.ErrnoException, java.net.SocketException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        byte[] r2;
        int i0, i1, i2, $i3;
        java.net.InetSocketAddress r3;
        dalvik.system.BlockGuard$Policy $r4;
        libcore.io.Os $r5;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: java.net.InetSocketAddress;

        $r4 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r4.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

        $r5 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i3 = interfaceinvoke $r5.<libcore.io.Os: int recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)>(r1, r2, i0, i1, i2, r3);

        return $i3;
    }

    public int sendto(java.io.FileDescriptor, java.nio.ByteBuffer, int, java.net.InetAddress, int) throws libcore.io.ErrnoException, java.net.SocketException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        java.nio.ByteBuffer r2;
        int i0, i1, $i2;
        java.net.InetAddress r3;
        dalvik.system.BlockGuard$Policy $r4;
        libcore.io.Os $r5;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.nio.ByteBuffer;

        i0 := @parameter2: int;

        r3 := @parameter3: java.net.InetAddress;

        i1 := @parameter4: int;

        $r4 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r4.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

        $r5 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i2 = interfaceinvoke $r5.<libcore.io.Os: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>(r1, r2, i0, r3, i1);

        return $i2;
    }

    public int sendto(java.io.FileDescriptor, byte[], int, int, int, java.net.InetAddress, int) throws libcore.io.ErrnoException, java.net.SocketException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        byte[] r2;
        int i0, i1, i2, i3, $i4;
        java.net.InetAddress r3;
        libcore.io.Os $r4;
        dalvik.system.BlockGuard$Policy $r5;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: java.net.InetAddress;

        i3 := @parameter6: int;

        if r3 == null goto label1;

        $r5 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r5.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

     label1:
        $r4 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i4 = interfaceinvoke $r4.<libcore.io.Os: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>(r1, r2, i0, i1, i2, r3, i3);

        return $i4;
    }

    public java.io.FileDescriptor socket(int, int, int) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        int i0, i1, i2;
        libcore.io.Os $r1;
        java.io.FileDescriptor $r2, $r3;

        r0 := @this: libcore.io.BlockGuardOs;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $r2 = interfaceinvoke $r1.<libcore.io.Os: java.io.FileDescriptor socket(int,int,int)>(i0, i1, i2);

        $r3 = specialinvoke r0.<libcore.io.BlockGuardOs: java.io.FileDescriptor tagSocket(java.io.FileDescriptor)>($r2);

        return $r3;
    }

    public void socketpair(int, int, int, java.io.FileDescriptor, java.io.FileDescriptor) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        int i0, i1, i2;
        java.io.FileDescriptor r1, r2;
        libcore.io.Os $r3;

        r0 := @this: libcore.io.BlockGuardOs;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.io.FileDescriptor;

        r2 := @parameter4: java.io.FileDescriptor;

        $r3 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        interfaceinvoke $r3.<libcore.io.Os: void socketpair(int,int,int,java.io.FileDescriptor,java.io.FileDescriptor)>(i0, i1, i2, r1, r2);

        specialinvoke r0.<libcore.io.BlockGuardOs: java.io.FileDescriptor tagSocket(java.io.FileDescriptor)>(r1);

        specialinvoke r0.<libcore.io.BlockGuardOs: java.io.FileDescriptor tagSocket(java.io.FileDescriptor)>(r2);

        return;
    }

    public int write(java.io.FileDescriptor, java.nio.ByteBuffer) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        java.nio.ByteBuffer r2;
        dalvik.system.BlockGuard$Policy $r3;
        libcore.io.Os $r4;
        int $i0;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.nio.ByteBuffer;

        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

        $r4 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i0 = interfaceinvoke $r4.<libcore.io.Os: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>(r1, r2);

        return $i0;
    }

    public int write(java.io.FileDescriptor, byte[], int, int) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        byte[] r2;
        int i0, i1, $i2;
        dalvik.system.BlockGuard$Policy $r3;
        libcore.io.Os $r4;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

        $r4 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i2 = interfaceinvoke $r4.<libcore.io.Os: int write(java.io.FileDescriptor,byte[],int,int)>(r1, r2, i0, i1);

        return $i2;
    }

    public int writev(java.io.FileDescriptor, java.lang.Object[], int[], int[]) throws libcore.io.ErrnoException
    {
        libcore.io.BlockGuardOs r0;
        java.io.FileDescriptor r1;
        java.lang.Object[] r2;
        int[] r3, r4;
        dalvik.system.BlockGuard$Policy $r5;
        libcore.io.Os $r6;
        int $i0;

        r0 := @this: libcore.io.BlockGuardOs;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        $r5 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r5.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

        $r6 = r0.<libcore.io.BlockGuardOs: libcore.io.Os os>;

        $i0 = interfaceinvoke $r6.<libcore.io.Os: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>(r1, r2, r3, r4);

        return $i0;
    }
}
