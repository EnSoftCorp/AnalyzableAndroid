class java.util.concurrent.ArrayBlockingQueue$Itrs$Node extends java.lang.ref.WeakReference
{
    java.util.concurrent.ArrayBlockingQueue$Itrs$Node next;
    final java.util.concurrent.ArrayBlockingQueue$Itrs this$1;

    void <init>(java.util.concurrent.ArrayBlockingQueue$Itrs, java.util.concurrent.ArrayBlockingQueue$Itr, java.util.concurrent.ArrayBlockingQueue$Itrs$Node)
    {
        java.util.concurrent.ArrayBlockingQueue$Itrs$Node r0, r3;
        java.util.concurrent.ArrayBlockingQueue$Itrs r1;
        java.util.concurrent.ArrayBlockingQueue$Itr r2;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itrs$Node;

        r1 := @parameter0: java.util.concurrent.ArrayBlockingQueue$Itrs;

        r2 := @parameter1: java.util.concurrent.ArrayBlockingQueue$Itr;

        r3 := @parameter2: java.util.concurrent.ArrayBlockingQueue$Itrs$Node;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs this$1> = r1;

        specialinvoke r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2);

        r0.<java.util.concurrent.ArrayBlockingQueue$Itrs$Node: java.util.concurrent.ArrayBlockingQueue$Itrs$Node next> = r3;

        return;
    }
}
