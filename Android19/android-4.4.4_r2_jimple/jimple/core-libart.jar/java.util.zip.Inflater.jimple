public class java.util.zip.Inflater extends java.lang.Object
{
    private boolean finished;
    private final dalvik.system.CloseGuard guard;
    private int inLength;
    private int inRead;
    private boolean needsDictionary;
    private long streamHandle;

    public void <init>()
    {
        java.util.zip.Inflater r0;

        r0 := @this: java.util.zip.Inflater;

        specialinvoke r0.<java.util.zip.Inflater: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        java.util.zip.Inflater r0;
        boolean z0;
        dalvik.system.CloseGuard $r1, $r2;
        long $l0;

        r0 := @this: java.util.zip.Inflater;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.zip.Inflater: long streamHandle> = -1L;

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.util.zip.Inflater: dalvik.system.CloseGuard guard> = $r1;

        $l0 = specialinvoke r0.<java.util.zip.Inflater: long createStream(boolean)>(z0);

        r0.<java.util.zip.Inflater: long streamHandle> = $l0;

        $r2 = r0.<java.util.zip.Inflater: dalvik.system.CloseGuard guard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void open(java.lang.String)>("end");

        return;
    }

    private void checkOpen()
    {
        java.util.zip.Inflater r0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: java.util.zip.Inflater;

        $l0 = r0.<java.util.zip.Inflater: long streamHandle>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("attempt to use Inflater after calling end");

        throw $r1;

     label1:
        return;
    }

    private native long createStream(boolean);

    private native void endImpl(long);

    private native int getAdlerImpl(long);

    private native long getTotalInImpl(long);

    private native long getTotalOutImpl(long);

    private native int inflateImpl(byte[], int, int, long);

    private native void resetImpl(long);

    private native void setDictionaryImpl(byte[], int, int, long);

    private native int setFileInputImpl(java.io.FileDescriptor, long, int, long);

    private native void setInputImpl(byte[], int, int, long);

    public void end()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, $r3;
        dalvik.system.CloseGuard $r2;
        long $l0, $l2;
        byte $b1;

        r0 := @this: java.util.zip.Inflater;

        entermonitor r0;

     label1:
        $r2 = r0.<java.util.zip.Inflater: dalvik.system.CloseGuard guard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

        $l0 = r0.<java.util.zip.Inflater: long streamHandle>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label2;

        $l2 = r0.<java.util.zip.Inflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Inflater: void endImpl(long)>($l2);

        r0.<java.util.zip.Inflater: int inRead> = 0;

        r0.<java.util.zip.Inflater: int inLength> = 0;

        r0.<java.util.zip.Inflater: long streamHandle> = -1L;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void finalize()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, r2, r3, $r6, $r7, $r9;
        dalvik.system.CloseGuard $r4, $r5;
        java.lang.AssertionError $r8, $r10;

        r0 := @this: java.util.zip.Inflater;

     label1:
        $r4 = r0.<java.util.zip.Inflater: dalvik.system.CloseGuard guard>;

        if $r4 == null goto label2;

        $r5 = r0.<java.util.zip.Inflater: dalvik.system.CloseGuard guard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<java.util.zip.Inflater: void end()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        r1 = $r6;

     label6:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label7:
        throw r1;

     label8:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r10;

     label9:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public boolean finished()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, $r2;
        boolean z0;

        r0 := @this: java.util.zip.Inflater;

        entermonitor r0;

     label1:
        z0 = r0.<java.util.zip.Inflater: boolean finished>;

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getAdler()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, $r2;
        int i0;
        long $l1;

        r0 := @this: java.util.zip.Inflater;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $l1 = r0.<java.util.zip.Inflater: long streamHandle>;

        i0 = specialinvoke r0.<java.util.zip.Inflater: int getAdlerImpl(long)>($l1);

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long getBytesRead()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, $r2;
        long l0, $l1;

        r0 := @this: java.util.zip.Inflater;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $l1 = r0.<java.util.zip.Inflater: long streamHandle>;

        l0 = specialinvoke r0.<java.util.zip.Inflater: long getTotalInImpl(long)>($l1);

     label2:
        exitmonitor r0;

        return l0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long getBytesWritten()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, $r2;
        long l0, $l1;

        r0 := @this: java.util.zip.Inflater;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $l1 = r0.<java.util.zip.Inflater: long streamHandle>;

        l0 = specialinvoke r0.<java.util.zip.Inflater: long getTotalOutImpl(long)>($l1);

     label2:
        exitmonitor r0;

        return l0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getRemaining()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, $r2;
        int i0, i1, i2;

        r0 := @this: java.util.zip.Inflater;

        entermonitor r0;

     label1:
        i0 = r0.<java.util.zip.Inflater: int inLength>;

        i1 = r0.<java.util.zip.Inflater: int inRead>;

     label2:
        i2 = i0 - i1;

        exitmonitor r0;

        return i2;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getTotalIn()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, $r2;
        long l0, $l2, $l3;
        int i1;

        r0 := @this: java.util.zip.Inflater;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $l2 = r0.<java.util.zip.Inflater: long streamHandle>;

        $l3 = specialinvoke r0.<java.util.zip.Inflater: long getTotalInImpl(long)>($l2);

        l0 = staticinvoke <java.lang.Math: long min(long,long)>($l3, 2147483647L);

     label2:
        i1 = (int) l0;

        exitmonitor r0;

        return i1;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getTotalOut()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, $r2;
        long l0, $l2, $l3;
        int i1;

        r0 := @this: java.util.zip.Inflater;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $l2 = r0.<java.util.zip.Inflater: long streamHandle>;

        $l3 = specialinvoke r0.<java.util.zip.Inflater: long getTotalOutImpl(long)>($l2);

        l0 = staticinvoke <java.lang.Math: long min(long,long)>($l3, 2147483647L);

     label2:
        i1 = (int) l0;

        exitmonitor r0;

        return i1;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int inflate(byte[]) throws java.util.zip.DataFormatException
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<java.util.zip.Inflater: int inflate(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int inflate(byte[], int, int) throws java.util.zip.DataFormatException
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        java.lang.Throwable r2, $r4;
        boolean z0, z1, $z2;
        long $l4;
        java.util.zip.DataFormatException $r3;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        z0 = virtualinvoke r0.<java.util.zip.Inflater: boolean needsInput()>();

     label2:
        i2 = 0;

        if z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return i2;

     label4:
        z1 = r0.<java.util.zip.Inflater: boolean needsDictionary>;

        r0.<java.util.zip.Inflater: boolean needsDictionary> = 0;

        $l4 = r0.<java.util.zip.Inflater: long streamHandle>;

        i2 = specialinvoke r0.<java.util.zip.Inflater: int inflateImpl(byte[],int,int,long)>(r1, i0, i1, $l4);

        $z2 = r0.<java.util.zip.Inflater: boolean needsDictionary>;

        if $z2 == 0 goto label3;

     label5:
        if z1 == 0 goto label3;

     label6:
        $r3 = new java.util.zip.DataFormatException;

        specialinvoke $r3.<java.util.zip.DataFormatException: void <init>(java.lang.String)>("Needs dictionary");

        throw $r3;

     label7:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public boolean needsDictionary()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, $r2;
        boolean z0;

        r0 := @this: java.util.zip.Inflater;

        entermonitor r0;

     label1:
        z0 = r0.<java.util.zip.Inflater: boolean needsDictionary>;

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean needsInput()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, $r2;
        int i0, i1;
        boolean z0;

        r0 := @this: java.util.zip.Inflater;

        entermonitor r0;

     label1:
        i0 = r0.<java.util.zip.Inflater: int inRead>;

        i1 = r0.<java.util.zip.Inflater: int inLength>;

     label2:
        if i0 != i1 goto label4;

        z0 = 1;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public void reset()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: java.util.zip.Inflater;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        r0.<java.util.zip.Inflater: boolean finished> = 0;

        r0.<java.util.zip.Inflater: boolean needsDictionary> = 0;

        r0.<java.util.zip.Inflater: int inRead> = 0;

        r0.<java.util.zip.Inflater: int inLength> = 0;

        $l0 = r0.<java.util.zip.Inflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Inflater: void resetImpl(long)>($l0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setDictionary(byte[])
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        java.lang.Throwable r2, $r3;
        int $i0;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        entermonitor r0;

     label1:
        $i0 = lengthof r1;

        virtualinvoke r0.<java.util.zip.Inflater: void setDictionary(byte[],int,int)>(r1, 0, $i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setDictionary(byte[], int, int)
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int i0, i1, $i2;
        java.lang.Throwable r2, $r3;
        long $l3;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $l3 = r0.<java.util.zip.Inflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Inflater: void setDictionaryImpl(byte[],int,int,long)>(r1, i0, i1, $l3);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    int setFileInput(java.io.FileDescriptor, long, int)
    {
        java.util.zip.Inflater r0;
        java.io.FileDescriptor r1;
        long l0, $l3;
        int i1, i2, $i4;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: java.io.FileDescriptor;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        r0.<java.util.zip.Inflater: int inRead> = 0;

        $l3 = r0.<java.util.zip.Inflater: long streamHandle>;

        $i4 = specialinvoke r0.<java.util.zip.Inflater: int setFileInputImpl(java.io.FileDescriptor,long,int,long)>(r1, l0, i1, $l3);

        r0.<java.util.zip.Inflater: int inLength> = $i4;

        i2 = r0.<java.util.zip.Inflater: int inLength>;

     label2:
        exitmonitor r0;

        return i2;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setInput(byte[])
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        java.lang.Throwable r2, $r3;
        int $i0;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        entermonitor r0;

     label1:
        $i0 = lengthof r1;

        virtualinvoke r0.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r1, 0, $i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setInput(byte[], int, int)
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int i0, i1, $i2;
        java.lang.Throwable r2, $r3;
        long $l3;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        r0.<java.util.zip.Inflater: int inRead> = 0;

        r0.<java.util.zip.Inflater: int inLength> = i1;

        $l3 = r0.<java.util.zip.Inflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Inflater: void setInputImpl(byte[],int,int,long)>(r1, i0, i1, $l3);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
