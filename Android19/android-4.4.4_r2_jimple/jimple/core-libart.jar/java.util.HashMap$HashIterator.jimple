abstract class java.util.HashMap$HashIterator extends java.lang.Object
{
    int expectedModCount;
    java.util.HashMap$HashMapEntry lastEntryReturned;
    java.util.HashMap$HashMapEntry nextEntry;
    int nextIndex;
    final java.util.HashMap this$0;

    void <init>(java.util.HashMap)
    {
        java.util.HashMap$HashIterator r0;
        java.util.HashMap r1, $r4, $r6;
        java.util.HashMap$HashMapEntry[] r2;
        java.util.HashMap$HashMapEntry r3, $r5, $r7;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.util.HashMap$HashIterator;

        r1 := @parameter0: java.util.HashMap;

        r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;

        $r5 = $r4.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        r0.<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry nextEntry> = $r5;

        $r6 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;

        $i1 = $r6.<java.util.HashMap: int modCount>;

        r0.<java.util.HashMap$HashIterator: int expectedModCount> = $i1;

        $r7 = r0.<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry nextEntry>;

        if $r7 != null goto label3;

        r2 = r1.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        r3 = null;

     label1:
        if r3 != null goto label2;

        $i3 = r0.<java.util.HashMap$HashIterator: int nextIndex>;

        $i2 = lengthof r2;

        if $i3 >= $i2 goto label2;

        i0 = r0.<java.util.HashMap$HashIterator: int nextIndex>;

        $i4 = i0 + 1;

        r0.<java.util.HashMap$HashIterator: int nextIndex> = $i4;

        r3 = r2[i0];

        goto label1;

     label2:
        r0.<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry nextEntry> = r3;

     label3:
        return;
    }

    public boolean hasNext()
    {
        java.util.HashMap$HashIterator r0;
        java.util.HashMap$HashMapEntry $r1;

        r0 := @this: java.util.HashMap$HashIterator;

        $r1 = r0.<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry nextEntry>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    java.util.HashMap$HashMapEntry nextEntry()
    {
        java.util.HashMap$HashIterator r0;
        java.util.HashMap$HashMapEntry r1, r3, $r5;
        java.util.HashMap$HashMapEntry[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.HashMap $r4, $r6;
        java.util.NoSuchElementException $r7;
        java.util.ConcurrentModificationException $r8;

        r0 := @this: java.util.HashMap$HashIterator;

        $r4 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;

        $i2 = $r4.<java.util.HashMap: int modCount>;

        $i1 = r0.<java.util.HashMap$HashIterator: int expectedModCount>;

        if $i2 == $i1 goto label1;

        $r8 = new java.util.ConcurrentModificationException;

        specialinvoke $r8.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r8;

     label1:
        $r5 = r0.<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry nextEntry>;

        if $r5 != null goto label2;

        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        throw $r7;

     label2:
        r1 = r0.<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry nextEntry>;

        $r6 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;

        r2 = $r6.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        r3 = r1.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

     label3:
        if r3 != null goto label4;

        $i4 = r0.<java.util.HashMap$HashIterator: int nextIndex>;

        $i3 = lengthof r2;

        if $i4 >= $i3 goto label4;

        i0 = r0.<java.util.HashMap$HashIterator: int nextIndex>;

        $i5 = i0 + 1;

        r0.<java.util.HashMap$HashIterator: int nextIndex> = $i5;

        r3 = r2[i0];

        goto label3;

     label4:
        r0.<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry nextEntry> = r3;

        r0.<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry lastEntryReturned> = r1;

        return r1;
    }

    public void remove()
    {
        java.util.HashMap$HashIterator r0;
        java.util.HashMap$HashMapEntry $r1, $r3;
        java.util.HashMap $r2, $r5, $r7;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        java.util.ConcurrentModificationException $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: java.util.HashMap$HashIterator;

        $r1 = r0.<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry lastEntryReturned>;

        if $r1 != null goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>()>();

        throw $r9;

     label1:
        $r2 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;

        $i1 = $r2.<java.util.HashMap: int modCount>;

        $i0 = r0.<java.util.HashMap$HashIterator: int expectedModCount>;

        if $i1 == $i0 goto label2;

        $r8 = new java.util.ConcurrentModificationException;

        specialinvoke $r8.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r8;

     label2:
        $r5 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;

        $r3 = r0.<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry lastEntryReturned>;

        $r4 = $r3.<java.util.HashMap$HashMapEntry: java.lang.Object key>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        r0.<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry lastEntryReturned> = null;

        $r7 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;

        $i2 = $r7.<java.util.HashMap: int modCount>;

        r0.<java.util.HashMap$HashIterator: int expectedModCount> = $i2;

        return;
    }
}
