public class java.util.concurrent.atomic.Fences extends java.lang.Object
{
    private static volatile int theVolatile;

    private void <init>()
    {
        java.util.concurrent.atomic.Fences r0;

        r0 := @this: java.util.concurrent.atomic.Fences;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object orderAccesses(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        <java.util.concurrent.atomic.Fences: int theVolatile> = 0;

        return r0;
    }

    public static java.lang.Object orderReads(java.lang.Object)
    {
        java.lang.Object r0;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        $i0 = <java.util.concurrent.atomic.Fences: int theVolatile>;

        return r0;
    }

    public static java.lang.Object orderWrites(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        <java.util.concurrent.atomic.Fences: int theVolatile> = 0;

        return r0;
    }

    public static void reachabilityFence(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Throwable r1, $r2;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label6;

        entermonitor r0;

     label1:
        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
