public class org.apache.harmony.security.utils.AlgNameMapper extends java.lang.Object
{
    private static final java.util.Map alg2OidMap;
    private static final java.util.Map algAliasesMap;
    private static volatile int cacheVersion;
    private static final java.lang.String[][] knownAlgMappings;
    private static final java.util.Map oid2AlgMap;
    private static final java.lang.String[] serviceName;
    private static org.apache.harmony.security.utils.AlgNameMapperSource source;

    static void <clinit>()
    {
        java.lang.String[][] r0, $r4;
        int i0, i1;
        java.lang.String[] r1, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        java.lang.String r2, $r28, $r30, $r31, $r33;
        java.util.HashMap $r24, $r25, $r27;
        java.util.Locale $r26;
        java.util.Map $r32, $r34, $r35;

        <org.apache.harmony.security.utils.AlgNameMapper: org.apache.harmony.security.utils.AlgNameMapperSource source> = null;

        <org.apache.harmony.security.utils.AlgNameMapper: int cacheVersion> = -1;

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "Cipher";

        $r3[1] = "AlgorithmParameters";

        $r3[2] = "Signature";

        <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String[] serviceName> = $r3;

        $r4 = newarray (java.lang.String[])[19];

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "1.2.840.10040.4.1";

        $r5[1] = "DSA";

        $r4[0] = $r5;

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "1.2.840.10040.4.3";

        $r6[1] = "SHA1withDSA";

        $r4[1] = $r6;

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = "1.2.840.113549.1.1.1";

        $r7[1] = "RSA";

        $r4[2] = $r7;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "1.2.840.113549.1.1.4";

        $r8[1] = "MD5withRSA";

        $r4[3] = $r8;

        $r9 = newarray (java.lang.String)[2];

        $r9[0] = "1.2.840.113549.1.1.5";

        $r9[1] = "SHA1withRSA";

        $r4[4] = $r9;

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "1.2.840.113549.1.3.1";

        $r10[1] = "DiffieHellman";

        $r4[5] = $r10;

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = "1.2.840.113549.1.5.3";

        $r11[1] = "pbeWithMD5AndDES-CBC";

        $r4[6] = $r11;

        $r12 = newarray (java.lang.String)[2];

        $r12[0] = "1.2.840.113549.1.12.1.3";

        $r12[1] = "pbeWithSHAAnd3-KeyTripleDES-CBC";

        $r4[7] = $r12;

        $r13 = newarray (java.lang.String)[2];

        $r13[0] = "1.2.840.113549.1.12.1.6";

        $r13[1] = "pbeWithSHAAnd40BitRC2-CBC";

        $r4[8] = $r13;

        $r15 = newarray (java.lang.String)[2];

        $r15[0] = "1.2.840.113549.3.2";

        $r15[1] = "RC2-CBC";

        $r4[9] = $r15;

        $r14 = newarray (java.lang.String)[2];

        $r14[0] = "1.2.840.113549.3.3";

        $r14[1] = "RC2-EBC";

        $r4[10] = $r14;

        $r17 = newarray (java.lang.String)[2];

        $r17[0] = "1.2.840.113549.3.4";

        $r17[1] = "RC4";

        $r4[11] = $r17;

        $r16 = newarray (java.lang.String)[2];

        $r16[0] = "1.2.840.113549.3.5";

        $r16[1] = "RC4WithMAC";

        $r4[12] = $r16;

        $r19 = newarray (java.lang.String)[2];

        $r19[0] = "1.2.840.113549.3.6";

        $r19[1] = "DESx-CBC";

        $r4[13] = $r19;

        $r18 = newarray (java.lang.String)[2];

        $r18[0] = "1.2.840.113549.3.7";

        $r18[1] = "TripleDES-CBC";

        $r4[14] = $r18;

        $r21 = newarray (java.lang.String)[2];

        $r21[0] = "1.2.840.113549.3.8";

        $r21[1] = "rc5CBC";

        $r4[15] = $r21;

        $r20 = newarray (java.lang.String)[2];

        $r20[0] = "1.2.840.113549.3.9";

        $r20[1] = "RC5-CBC";

        $r4[16] = $r20;

        $r23 = newarray (java.lang.String)[2];

        $r23[0] = "1.2.840.113549.3.10";

        $r23[1] = "DESCDMF";

        $r4[17] = $r23;

        $r22 = newarray (java.lang.String)[2];

        $r22[0] = "2.23.42.9.11.4.1";

        $r22[1] = "ECDSA";

        $r4[18] = $r22;

        <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String[][] knownAlgMappings> = $r4;

        $r25 = new java.util.HashMap;

        specialinvoke $r25.<java.util.HashMap: void <init>()>();

        <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map alg2OidMap> = $r25;

        $r24 = new java.util.HashMap;

        specialinvoke $r24.<java.util.HashMap: void <init>()>();

        <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map oid2AlgMap> = $r24;

        $r27 = new java.util.HashMap;

        specialinvoke $r27.<java.util.HashMap: void <init>()>();

        <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map algAliasesMap> = $r27;

        r0 = <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String[][] knownAlgMappings>;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = r0[i1];

        $r28 = r1[1];

        $r26 = <java.util.Locale: java.util.Locale US>;

        r2 = virtualinvoke $r28.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r26);

        $r32 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map alg2OidMap>;

        $r31 = r1[0];

        interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r31);

        $r35 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map oid2AlgMap>;

        $r30 = r1[0];

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, r2);

        $r34 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map algAliasesMap>;

        $r33 = r1[1];

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r33);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void <init>()
    {
        org.apache.harmony.security.utils.AlgNameMapper r0;

        r0 := @this: org.apache.harmony.security.utils.AlgNameMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void checkCacheVersion()
    {
        java.lang.Throwable r0, $r3;
        int i0, i1, i2, $i3;
        java.security.Provider[] r1;
        java.security.Provider $r2;

        entermonitor class "org/apache/harmony/security/utils/AlgNameMapper";

     label1:
        i0 = staticinvoke <org.apache.harmony.security.fortress.Services: int getCacheVersion()>();

        $i3 = <org.apache.harmony.security.utils.AlgNameMapper: int cacheVersion>;

        if i0 == $i3 goto label7;

        r1 = staticinvoke <java.security.Security: java.security.Provider[] getProviders()>();

        i1 = lengthof r1;

     label2:
        i2 = 0;

     label3:
        if i2 >= i1 goto label6;

     label4:
        $r2 = r1[i2];

        staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: void selectEntries(java.security.Provider)>($r2);

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        <org.apache.harmony.security.utils.AlgNameMapper: int cacheVersion> = i0;

     label7:
        exitmonitor class "org/apache/harmony/security/utils/AlgNameMapper";

        return;

     label8:
        $r3 := @caughtexception;

        r0 = $r3;

        exitmonitor class "org/apache/harmony/security/utils/AlgNameMapper";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public static java.lang.String getStandardName(java.lang.String)
    {
        java.lang.String r0, $r3, $r5;
        java.util.Locale $r1;
        java.util.Map $r2;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map algAliasesMap>;

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    public static boolean isOID(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String normalize(java.lang.String)>(r0);

        $z0 = staticinvoke <org.apache.harmony.security.asn1.ObjectIdentifier: boolean isOID(java.lang.String)>($r1);

        return $z0;
    }

    public static java.lang.String map2AlgName(java.lang.String)
    {
        java.lang.String r0, r1, $r5, $r8;
        org.apache.harmony.security.utils.AlgNameMapperSource r2;
        java.util.Map $r3, $r6;
        java.lang.Object $r4, $r7;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: void checkCacheVersion()>();

        $r3 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map oid2AlgMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (java.lang.String) $r4;

        if r1 == null goto label1;

        $r6 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map algAliasesMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (java.lang.String) $r7;

        return $r8;

     label1:
        r2 = <org.apache.harmony.security.utils.AlgNameMapper: org.apache.harmony.security.utils.AlgNameMapperSource source>;

        if r2 == null goto label2;

        $r5 = interfaceinvoke r2.<org.apache.harmony.security.utils.AlgNameMapperSource: java.lang.String mapOidToName(java.lang.String)>(r0);

        return $r5;

     label2:
        return null;
    }

    public static java.lang.String map2OID(java.lang.String)
    {
        java.lang.String r0, r1, $r5, $r7;
        org.apache.harmony.security.utils.AlgNameMapperSource r2;
        java.util.Locale $r3;
        java.util.Map $r4;
        java.lang.Object $r6;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: void checkCacheVersion()>();

        $r4 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map alg2OidMap>;

        $r3 = <java.util.Locale: java.util.Locale US>;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r1 = (java.lang.String) $r6;

        if r1 == null goto label1;

        return r1;

     label1:
        r2 = <org.apache.harmony.security.utils.AlgNameMapper: org.apache.harmony.security.utils.AlgNameMapperSource source>;

        if r2 == null goto label2;

        $r7 = interfaceinvoke r2.<org.apache.harmony.security.utils.AlgNameMapperSource: java.lang.String mapNameToOid(java.lang.String)>(r0);

        return $r7;

     label2:
        return null;
    }

    public static java.lang.String normalize(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("OID.");

        if $z0 == 0 goto label1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(4);

     label1:
        return r0;
    }

    private static void selectEntries(java.security.Provider)
    {
        java.security.Provider r0;
        java.util.Set r1;
        java.lang.String[] r2;
        int i0, i1, $i2;
        java.lang.String r3, r4, r7, r8, r9, r10, $r20, $r23;
        java.util.Iterator r5;
        java.util.Map$Entry r6;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.lang.Object $r15, $r16, $r17;
        java.util.Locale $r18, $r21, $r24;
        java.util.Map $r19, $r22, $r25, $r27, $r29, $r31, $r33;

        r0 := @parameter0: java.security.Provider;

        r1 = virtualinvoke r0.<java.security.Provider: java.util.Set entrySet()>();

        r2 = <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String[] serviceName>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label9;

        r3 = r2[i1];

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Alg.Alias.");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r16 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r16;

        $r15 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r15;

        $z3 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(r4);

        if $z3 == 0 goto label2;

        $i2 = virtualinvoke r4.<java.lang.String: int length()>();

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i2);

        $r17 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r17;

        $r18 = <java.util.Locale: java.util.Locale US>;

        r10 = virtualinvoke r9.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r18);

        $z4 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: boolean isOID(java.lang.String)>(r8);

        if $z4 == 0 goto label7;

        $z6 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("OID.");

        if $z6 == 0 goto label3;

        r8 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>(4);

     label3:
        $r25 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map oid2AlgMap>;

        z0 = interfaceinvoke $r25.<java.util.Map: boolean containsKey(java.lang.Object)>(r8);

        $r29 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map alg2OidMap>;

        z1 = interfaceinvoke $r29.<java.util.Map: boolean containsKey(java.lang.Object)>(r10);

        if z0 == 0 goto label4;

        if z1 != 0 goto label2;

     label4:
        if z0 != 0 goto label5;

        $r31 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map oid2AlgMap>;

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r10);

     label5:
        if z1 != 0 goto label6;

        $r33 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map alg2OidMap>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r8);

     label6:
        $r27 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map algAliasesMap>;

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r9);

        goto label2;

     label7:
        $r19 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map algAliasesMap>;

        $r21 = <java.util.Locale: java.util.Locale US>;

        $r20 = virtualinvoke r8.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r21);

        $z5 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>($r20);

        if $z5 != 0 goto label2;

        $r22 = <org.apache.harmony.security.utils.AlgNameMapper: java.util.Map algAliasesMap>;

        $r24 = <java.util.Locale: java.util.Locale US>;

        $r23 = virtualinvoke r8.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r24);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, r9);

        goto label2;

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        return;
    }

    public static void setSource(org.apache.harmony.security.utils.AlgNameMapperSource)
    {
        org.apache.harmony.security.utils.AlgNameMapperSource r0;

        r0 := @parameter0: org.apache.harmony.security.utils.AlgNameMapperSource;

        <org.apache.harmony.security.utils.AlgNameMapper: org.apache.harmony.security.utils.AlgNameMapperSource source> = r0;

        return;
    }
}
