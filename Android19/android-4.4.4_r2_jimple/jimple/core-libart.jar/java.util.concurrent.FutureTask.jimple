public class java.util.concurrent.FutureTask extends java.lang.Object implements java.util.concurrent.RunnableFuture
{
    private static final int CANCELLED;
    private static final int COMPLETING;
    private static final int EXCEPTIONAL;
    private static final int INTERRUPTED;
    private static final int INTERRUPTING;
    private static final int NEW;
    private static final int NORMAL;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long runnerOffset;
    private static final long stateOffset;
    private static final long waitersOffset;
    private java.util.concurrent.Callable callable;
    private java.lang.Object outcome;
    private volatile java.lang.Thread runner;
    private volatile int state;
    private volatile java.util.concurrent.FutureTask$WaitNode waiters;

    static void <clinit>()
    {
        java.lang.Exception r0, $r11;
        sun.misc.Unsafe $r1, $r3, $r6, $r9;
        java.lang.Class $r2, $r5, $r8;
        java.lang.reflect.Field $r4, $r7, $r10;
        long $l0, $l1, $l2;
        java.lang.Error $r12;

        <java.util.concurrent.FutureTask: int NORMAL> = 2;

        <java.util.concurrent.FutureTask: int NEW> = 0;

        <java.util.concurrent.FutureTask: int INTERRUPTING> = 5;

        <java.util.concurrent.FutureTask: int INTERRUPTED> = 6;

        <java.util.concurrent.FutureTask: int EXCEPTIONAL> = 3;

        <java.util.concurrent.FutureTask: int COMPLETING> = 1;

        <java.util.concurrent.FutureTask: int CANCELLED> = 4;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE> = $r1;

        $r3 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $r2 = class "java/util/concurrent/FutureTask";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("state");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.FutureTask: long stateOffset> = $l0;

        $r6 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $r5 = class "java/util/concurrent/FutureTask";

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("runner");

        $l1 = virtualinvoke $r6.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r7);

        <java.util.concurrent.FutureTask: long runnerOffset> = $l1;

        $r9 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $r8 = class "java/util/concurrent/FutureTask";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("waiters");

        $l2 = virtualinvoke $r9.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r10);

        <java.util.concurrent.FutureTask: long waitersOffset> = $l2;

     label2:
        return;

     label3:
        $r11 := @caughtexception;

        r0 = $r11;

        $r12 = new java.lang.Error;

        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r12;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.FutureTask r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.Callable $r3;

        r0 := @this: java.util.concurrent.FutureTask;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable,java.lang.Object)>(r1, r2);

        r0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable> = $r3;

        r0.<java.util.concurrent.FutureTask: int state> = 0;

        return;
    }

    public void <init>(java.util.concurrent.Callable)
    {
        java.util.concurrent.FutureTask r0;
        java.util.concurrent.Callable r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.concurrent.FutureTask;

        r1 := @parameter0: java.util.concurrent.Callable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable> = r1;

        r0.<java.util.concurrent.FutureTask: int state> = 0;

        return;
    }

    private int awaitDone(boolean, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.FutureTask r0;
        boolean z0, z1, $z2;
        long l0, l1, l3, l4, $l6, $l8;
        java.util.concurrent.FutureTask$WaitNode r1, r3, $r5;
        int i2, $i7;
        sun.misc.Unsafe r2;
        byte $b5;
        java.lang.InterruptedException $r4;

        r0 := @this: java.util.concurrent.FutureTask;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        if z0 == 0 goto label03;

        $l8 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = l0 + $l8;

     label01:
        r1 = null;

        z1 = 0;

     label02:
        $z2 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z2 == 0 goto label04;

        specialinvoke r0.<java.util.concurrent.FutureTask: void removeWaiter(java.util.concurrent.FutureTask$WaitNode)>(r1);

        $r4 = new java.lang.InterruptedException;

        specialinvoke $r4.<java.lang.InterruptedException: void <init>()>();

        throw $r4;

     label03:
        l1 = 0L;

        goto label01;

     label04:
        i2 = r0.<java.util.concurrent.FutureTask: int state>;

        if i2 <= 1 goto label06;

        if r1 == null goto label05;

        r1.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread> = null;

     label05:
        return i2;

     label06:
        if i2 != 1 goto label07;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label02;

     label07:
        if r1 != null goto label08;

        $r5 = new java.util.concurrent.FutureTask$WaitNode;

        specialinvoke $r5.<java.util.concurrent.FutureTask$WaitNode: void <init>()>();

        r1 = $r5;

        goto label02;

     label08:
        if z1 != 0 goto label09;

        r2 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        l4 = <java.util.concurrent.FutureTask: long waitersOffset>;

        r3 = r0.<java.util.concurrent.FutureTask: java.util.concurrent.FutureTask$WaitNode waiters>;

        r1.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next> = r3;

        z1 = virtualinvoke r2.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, l4, r3, r1);

        goto label02;

     label09:
        if z0 == 0 goto label11;

        $l6 = staticinvoke <java.lang.System: long nanoTime()>();

        l3 = l1 - $l6;

        $b5 = l3 cmp 0L;

        if $b5 > 0 goto label10;

        specialinvoke r0.<java.util.concurrent.FutureTask: void removeWaiter(java.util.concurrent.FutureTask$WaitNode)>(r1);

        $i7 = r0.<java.util.concurrent.FutureTask: int state>;

        return $i7;

     label10:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l3);

        goto label02;

     label11:
        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        goto label02;
    }

    private void finishCompletion()
    {
        java.util.concurrent.FutureTask r0;
        java.util.concurrent.FutureTask$WaitNode r1, r3;
        java.lang.Thread r2;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.FutureTask;

     label1:
        r1 = r0.<java.util.concurrent.FutureTask: java.util.concurrent.FutureTask$WaitNode waiters>;

        if r1 == null goto label4;

        $r4 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.FutureTask: long waitersOffset>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, null);

        if $z0 == 0 goto label1;

     label2:
        r2 = r1.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread>;

        if r2 == null goto label3;

        r1.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread> = null;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>(r2);

     label3:
        r3 = r1.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next>;

        if r3 != null goto label5;

     label4:
        virtualinvoke r0.<java.util.concurrent.FutureTask: void done()>();

        r0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable> = null;

        return;

     label5:
        r1.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next> = null;

        r1 = r3;

        goto label2;
    }

    private void handlePossibleCancellationInterrupt(int)
    {
        java.util.concurrent.FutureTask r0;
        int i0, $i1;

        r0 := @this: java.util.concurrent.FutureTask;

        i0 := @parameter0: int;

        if i0 != 5 goto label2;

     label1:
        $i1 = r0.<java.util.concurrent.FutureTask: int state>;

        if $i1 != 5 goto label2;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label1;

     label2:
        return;
    }

    private void removeWaiter(java.util.concurrent.FutureTask$WaitNode)
    {
        java.util.concurrent.FutureTask r0;
        java.util.concurrent.FutureTask$WaitNode r1, r2, r3, r4;
        java.lang.Thread $r5, $r7;
        long $l0;
        sun.misc.Unsafe $r6;
        boolean $z0;

        r0 := @this: java.util.concurrent.FutureTask;

        r1 := @parameter0: java.util.concurrent.FutureTask$WaitNode;

        if r1 == null goto label6;

        r1.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread> = null;

     label1:
        r2 = null;

        r3 = r0.<java.util.concurrent.FutureTask: java.util.concurrent.FutureTask$WaitNode waiters>;

     label2:
        if r3 == null goto label6;

        r4 = r3.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next>;

        $r5 = r3.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread>;

        if $r5 == null goto label4;

        r2 = r3;

     label3:
        r3 = r4;

        goto label2;

     label4:
        if r2 == null goto label5;

        r2.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next> = r4;

        $r7 = r2.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread>;

        if $r7 != null goto label3;

        goto label1;

     label5:
        $r6 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.FutureTask: long waitersOffset>;

        $z0 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r3, r4);

        if $z0 != 0 goto label3;

        goto label1;

     label6:
        return;
    }

    private java.lang.Object report(int) throws java.util.concurrent.ExecutionException
    {
        java.util.concurrent.FutureTask r0;
        int i0;
        java.lang.Object r1;
        java.util.concurrent.ExecutionException $r2;
        java.lang.Throwable $r3;
        java.util.concurrent.CancellationException $r4;

        r0 := @this: java.util.concurrent.FutureTask;

        i0 := @parameter0: int;

        r1 = r0.<java.util.concurrent.FutureTask: java.lang.Object outcome>;

        if i0 != 2 goto label1;

        return r1;

     label1:
        if i0 < 4 goto label2;

        $r4 = new java.util.concurrent.CancellationException;

        specialinvoke $r4.<java.util.concurrent.CancellationException: void <init>()>();

        throw $r4;

     label2:
        $r2 = new java.util.concurrent.ExecutionException;

        $r3 = (java.lang.Throwable) r1;

        specialinvoke $r2.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r3);

        throw $r2;
    }

    public boolean cancel(boolean)
    {
        java.util.concurrent.FutureTask r0;
        boolean z0, $z1;
        sun.misc.Unsafe r1, $r5, $r7;
        long l0, $l3, $l4;
        byte b1;
        java.lang.Throwable r2, r3, $r6, $r8;
        java.lang.Thread r4;
        int $i2;

        r0 := @this: java.util.concurrent.FutureTask;

        z0 := @parameter0: boolean;

        $i2 = r0.<java.util.concurrent.FutureTask: int state>;

        if $i2 != 0 goto label02;

        r1 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        l0 = <java.util.concurrent.FutureTask: long stateOffset>;

        if z0 == 0 goto label03;

        b1 = 5;

     label01:
        $z1 = virtualinvoke r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, l0, 0, b1);

        if $z1 != 0 goto label04;

     label02:
        return 0;

     label03:
        b1 = 4;

        goto label01;

     label04:
        if z0 == 0 goto label09;

     label05:
        r4 = r0.<java.util.concurrent.FutureTask: java.lang.Thread runner>;

     label06:
        if r4 == null goto label08;

     label07:
        virtualinvoke r4.<java.lang.Thread: void interrupt()>();

     label08:
        $r5 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l3 = <java.util.concurrent.FutureTask: long stateOffset>;

        virtualinvoke $r5.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l3, 6);

     label09:
        specialinvoke r0.<java.util.concurrent.FutureTask: void finishCompletion()>();

        return 1;

     label10:
        $r6 := @caughtexception;

        r2 = $r6;

     label11:
        $r7 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l4 = <java.util.concurrent.FutureTask: long stateOffset>;

        virtualinvoke $r7.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l4, 6);

        throw r2;

     label12:
        $r8 := @caughtexception;

        r3 = $r8;

        specialinvoke r0.<java.util.concurrent.FutureTask: void finishCompletion()>();

        throw r3;

        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    protected void done()
    {
        java.util.concurrent.FutureTask r0;

        r0 := @this: java.util.concurrent.FutureTask;

        return;
    }

    public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.FutureTask r0;
        int i0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.FutureTask;

        i0 = r0.<java.util.concurrent.FutureTask: int state>;

        if i0 > 1 goto label1;

        i0 = specialinvoke r0.<java.util.concurrent.FutureTask: int awaitDone(boolean,long)>(0, 0L);

     label1:
        $r1 = specialinvoke r0.<java.util.concurrent.FutureTask: java.lang.Object report(int)>(i0);

        return $r1;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.FutureTask r0;
        long l0, $l2;
        java.util.concurrent.TimeUnit r1;
        int i1;
        java.lang.Object $r2;
        java.util.concurrent.TimeoutException $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.FutureTask;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        i1 = r0.<java.util.concurrent.FutureTask: int state>;

        if i1 > 1 goto label2;

        $l2 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        i1 = specialinvoke r0.<java.util.concurrent.FutureTask: int awaitDone(boolean,long)>(1, $l2);

        if i1 > 1 goto label2;

        $r3 = new java.util.concurrent.TimeoutException;

        specialinvoke $r3.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r3;

     label2:
        $r2 = specialinvoke r0.<java.util.concurrent.FutureTask: java.lang.Object report(int)>(i1);

        return $r2;
    }

    public boolean isCancelled()
    {
        java.util.concurrent.FutureTask r0;
        int $i0;

        r0 := @this: java.util.concurrent.FutureTask;

        $i0 = r0.<java.util.concurrent.FutureTask: int state>;

        if $i0 < 4 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isDone()
    {
        java.util.concurrent.FutureTask r0;
        int $i0;

        r0 := @this: java.util.concurrent.FutureTask;

        $i0 = r0.<java.util.concurrent.FutureTask: int state>;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void run()
    {
        java.util.concurrent.FutureTask r0;
        java.lang.Throwable r1, r3, $r8, $r9;
        int i0, i1, i2, $i3;
        java.util.concurrent.Callable r2;
        boolean z0, $z1;
        java.lang.Object r4, r5;
        sun.misc.Unsafe $r6;
        long $l4;
        java.lang.Thread $r7;

        r0 := @this: java.util.concurrent.FutureTask;

        $i3 = r0.<java.util.concurrent.FutureTask: int state>;

        if $i3 != 0 goto label01;

        $r6 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l4 = <java.util.concurrent.FutureTask: long runnerOffset>;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l4, null, $r7);

        if $z1 != 0 goto label02;

     label01:
        return;

     label02:
        r2 = r0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable>;

     label03:
        if r2 == null goto label10;

     label04:
        i1 = r0.<java.util.concurrent.FutureTask: int state>;

     label05:
        if i1 != 0 goto label10;

     label06:
        r5 = interfaceinvoke r2.<java.util.concurrent.Callable: java.lang.Object call()>();

     label07:
        r4 = r5;

        z0 = 1;

     label08:
        if z0 == 0 goto label10;

     label09:
        virtualinvoke r0.<java.util.concurrent.FutureTask: void set(java.lang.Object)>(r4);

     label10:
        r0.<java.util.concurrent.FutureTask: java.lang.Thread runner> = null;

        i2 = r0.<java.util.concurrent.FutureTask: int state>;

        if i2 < 5 goto label01;

        specialinvoke r0.<java.util.concurrent.FutureTask: void handlePossibleCancellationInterrupt(int)>(i2);

        return;

     label11:
        $r9 := @caughtexception;

        r3 = $r9;

     label12:
        virtualinvoke r0.<java.util.concurrent.FutureTask: void setException(java.lang.Throwable)>(r3);

     label13:
        z0 = 0;

        r4 = null;

        goto label08;

     label14:
        $r8 := @caughtexception;

        r1 = $r8;

        r0.<java.util.concurrent.FutureTask: java.lang.Thread runner> = null;

        i0 = r0.<java.util.concurrent.FutureTask: int state>;

        if i0 < 5 goto label15;

        specialinvoke r0.<java.util.concurrent.FutureTask: void handlePossibleCancellationInterrupt(int)>(i0);

     label15:
        throw r1;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
    }

    protected boolean runAndReset()
    {
        java.util.concurrent.FutureTask r0;
        int i0, i1, i2, $i3;
        java.lang.Throwable r1, r3, $r7, $r8;
        java.util.concurrent.Callable r2;
        boolean z0, $z1;
        sun.misc.Unsafe $r4;
        long $l4;
        java.lang.Thread $r5;

        r0 := @this: java.util.concurrent.FutureTask;

        $i3 = r0.<java.util.concurrent.FutureTask: int state>;

        if $i3 != 0 goto label01;

        $r4 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l4 = <java.util.concurrent.FutureTask: long runnerOffset>;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l4, null, $r5);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        i0 = r0.<java.util.concurrent.FutureTask: int state>;

     label03:
        r2 = r0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable>;

     label04:
        z0 = 0;

        if r2 == null goto label07;

        z0 = 0;

        if i0 != 0 goto label07;

     label05:
        interfaceinvoke r2.<java.util.concurrent.Callable: java.lang.Object call()>();

     label06:
        z0 = 1;

     label07:
        r0.<java.util.concurrent.FutureTask: java.lang.Thread runner> = null;

        i2 = r0.<java.util.concurrent.FutureTask: int state>;

        if i2 < 5 goto label08;

        specialinvoke r0.<java.util.concurrent.FutureTask: void handlePossibleCancellationInterrupt(int)>(i2);

     label08:
        if z0 == 0 goto label14;

        if i2 != 0 goto label14;

        return 1;

     label09:
        $r7 := @caughtexception;

        r3 = $r7;

     label10:
        virtualinvoke r0.<java.util.concurrent.FutureTask: void setException(java.lang.Throwable)>(r3);

     label11:
        z0 = 0;

        goto label07;

     label12:
        $r8 := @caughtexception;

        r1 = $r8;

        r0.<java.util.concurrent.FutureTask: java.lang.Thread runner> = null;

        i1 = r0.<java.util.concurrent.FutureTask: int state>;

        if i1 < 5 goto label13;

        specialinvoke r0.<java.util.concurrent.FutureTask: void handlePossibleCancellationInterrupt(int)>(i1);

     label13:
        throw r1;

     label14:
        return 0;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    protected void set(java.lang.Object)
    {
        java.util.concurrent.FutureTask r0;
        java.lang.Object r1;
        long $l0, $l1;
        sun.misc.Unsafe $r2, $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.FutureTask;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.FutureTask: long stateOffset>;

        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l0, 0, 1);

        if $z0 == 0 goto label1;

        r0.<java.util.concurrent.FutureTask: java.lang.Object outcome> = r1;

        $r3 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l1 = <java.util.concurrent.FutureTask: long stateOffset>;

        virtualinvoke $r3.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l1, 2);

        specialinvoke r0.<java.util.concurrent.FutureTask: void finishCompletion()>();

     label1:
        return;
    }

    protected void setException(java.lang.Throwable)
    {
        java.util.concurrent.FutureTask r0;
        java.lang.Throwable r1;
        long $l0, $l1;
        sun.misc.Unsafe $r2, $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.FutureTask;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.FutureTask: long stateOffset>;

        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l0, 0, 1);

        if $z0 == 0 goto label1;

        r0.<java.util.concurrent.FutureTask: java.lang.Object outcome> = r1;

        $r3 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l1 = <java.util.concurrent.FutureTask: long stateOffset>;

        virtualinvoke $r3.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l1, 3);

        specialinvoke r0.<java.util.concurrent.FutureTask: void finishCompletion()>();

     label1:
        return;
    }
}
