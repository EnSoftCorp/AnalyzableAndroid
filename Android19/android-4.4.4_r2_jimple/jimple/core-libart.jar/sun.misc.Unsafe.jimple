public final class sun.misc.Unsafe extends java.lang.Object
{
    private static final sun.misc.Unsafe THE_ONE;
    private static final sun.misc.Unsafe theUnsafe;

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r1;

        $r0 = new sun.misc.Unsafe;

        specialinvoke $r0.<sun.misc.Unsafe: void <init>()>();

        <sun.misc.Unsafe: sun.misc.Unsafe THE_ONE> = $r0;

        $r1 = <sun.misc.Unsafe: sun.misc.Unsafe THE_ONE>;

        <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe> = $r1;

        return;
    }

    private void <init>()
    {
        sun.misc.Unsafe r0;

        r0 := @this: sun.misc.Unsafe;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static sun.misc.Unsafe getUnsafe()
    {
        java.lang.ClassLoader r0, $r3;
        sun.misc.Unsafe $r1;
        java.lang.Class $r2;
        java.lang.SecurityException $r4;

        r0 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        if r0 == null goto label1;

        $r2 = class "sun/misc/Unsafe";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r0 == $r3 goto label1;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Unsafe access denied");

        throw $r4;

     label1:
        $r1 = <sun.misc.Unsafe: sun.misc.Unsafe THE_ONE>;

        return $r1;
    }

    public native java.lang.Object allocateInstance(java.lang.Class);

    public int arrayBaseOffset(java.lang.Class)
    {
        sun.misc.Unsafe r0;
        java.lang.Class r1, r2, $r3, $r4;
        int i0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: sun.misc.Unsafe;

        r1 := @parameter0: java.lang.Class;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        if r2 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Valid for array classes only: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        i0 = 12;

        $r3 = <java.lang.Long: java.lang.Class TYPE>;

        if r2 == $r3 goto label2;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        if r2 != $r4 goto label3;

     label2:
        i0 = 16;

     label3:
        return i0;
    }

    public int arrayIndexScale(java.lang.Class)
    {
        sun.misc.Unsafe r0;
        java.lang.Class r1, r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @this: sun.misc.Unsafe;

        r1 := @parameter0: java.lang.Class;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        if r2 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Valid for array classes only: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $z0 = virtualinvoke r2.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label3;

     label2:
        return 4;

     label3:
        $r3 = <java.lang.Long: java.lang.Class TYPE>;

        if r2 == $r3 goto label4;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        if r2 != $r4 goto label5;

     label4:
        return 8;

     label5:
        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        if r2 == $r5 goto label2;

        $r6 = <java.lang.Float: java.lang.Class TYPE>;

        if r2 == $r6 goto label2;

        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        if r2 == $r7 goto label6;

        $r8 = <java.lang.Short: java.lang.Class TYPE>;

        if r2 != $r8 goto label7;

     label6:
        return 2;

     label7:
        return 1;
    }

    public native boolean compareAndSwapInt(java.lang.Object, long, int, int);

    public native boolean compareAndSwapLong(java.lang.Object, long, long, long);

    public native boolean compareAndSwapObject(java.lang.Object, long, java.lang.Object, java.lang.Object);

    public native int getInt(java.lang.Object, long);

    public native int getIntVolatile(java.lang.Object, long);

    public native long getLong(java.lang.Object, long);

    public native long getLongVolatile(java.lang.Object, long);

    public native java.lang.Object getObject(java.lang.Object, long);

    public native java.lang.Object getObjectVolatile(java.lang.Object, long);

    public long objectFieldOffset(java.lang.reflect.Field)
    {
        sun.misc.Unsafe r0;
        java.lang.reflect.Field r1;
        int $i0, $i1;
        boolean $z0;
        long $l2;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: sun.misc.Unsafe;

        r1 := @parameter0: java.lang.reflect.Field;

        $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("valid for instance fields only");

        throw $r2;

     label1:
        $i1 = virtualinvoke r1.<java.lang.reflect.Field: int getOffset()>();

        $l2 = (long) $i1;

        return $l2;
    }

    public void park(boolean, long)
    {
        sun.misc.Unsafe r0;
        boolean z0;
        long l0;
        java.lang.Thread $r1, $r2;

        r0 := @this: sun.misc.Unsafe;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        if z0 == 0 goto label1;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void parkUntil(long)>(l0);

        return;

     label1:
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void parkFor(long)>(l0);

        return;
    }

    public native void putInt(java.lang.Object, long, int);

    public native void putIntVolatile(java.lang.Object, long, int);

    public native void putLong(java.lang.Object, long, long);

    public native void putLongVolatile(java.lang.Object, long, long);

    public native void putObject(java.lang.Object, long, java.lang.Object);

    public native void putObjectVolatile(java.lang.Object, long, java.lang.Object);

    public native void putOrderedInt(java.lang.Object, long, int);

    public native void putOrderedLong(java.lang.Object, long, long);

    public native void putOrderedObject(java.lang.Object, long, java.lang.Object);

    public void unpark(java.lang.Object)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.Thread $r3;

        r0 := @this: sun.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.Thread;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Thread) r1;

        virtualinvoke $r3.<java.lang.Thread: void unpark()>();

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("valid for Threads only");

        throw $r2;
    }
}
