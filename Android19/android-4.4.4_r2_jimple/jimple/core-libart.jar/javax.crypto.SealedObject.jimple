public class javax.crypto.SealedObject extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    protected byte[] encodedParams;
    private byte[] encryptedContent;
    private java.lang.String paramsAlg;
    private java.lang.String sealAlg;

    public void <init>(java.io.Serializable, javax.crypto.Cipher) throws java.io.IOException, javax.crypto.IllegalBlockSizeException
    {
        javax.crypto.SealedObject r0;
        java.io.Serializable r1;
        javax.crypto.Cipher r2;
        java.io.ByteArrayOutputStream r3, $r10;
        java.io.ObjectOutputStream r4, $r11;
        javax.crypto.BadPaddingException r5, $r15;
        java.security.AlgorithmParameters r6;
        byte[] r7, $r13, $r14;
        java.lang.String r8, r9, $r12, $r17;
        java.lang.NullPointerException $r16;
        java.io.IOException $r18;

        r0 := @this: javax.crypto.SealedObject;

        r1 := @parameter0: java.io.Serializable;

        r2 := @parameter1: javax.crypto.Cipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r2 != null goto label01;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("c == null");

        throw $r16;

     label01:
        $r10 = new java.io.ByteArrayOutputStream;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>()>();

        r3 = $r10;

        $r11 = new java.io.ObjectOutputStream;

        specialinvoke $r11.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r3);

        r4 = $r11;

        virtualinvoke r4.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r1);

        virtualinvoke r4.<java.io.ObjectOutputStream: void flush()>();

        r6 = virtualinvoke r2.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>();

     label02:
        if r6 != null goto label07;

        r7 = null;

     label03:
        r0.<javax.crypto.SealedObject: byte[] encodedParams> = r7;

     label04:
        r8 = null;

        if r6 != null goto label09;

     label05:
        r0.<javax.crypto.SealedObject: java.lang.String paramsAlg> = r8;

        $r12 = virtualinvoke r2.<javax.crypto.Cipher: java.lang.String getAlgorithm()>();

        r0.<javax.crypto.SealedObject: java.lang.String sealAlg> = $r12;

        $r14 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r13 = virtualinvoke r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r14);

        r0.<javax.crypto.SealedObject: byte[] encryptedContent> = $r13;

     label06:
        return;

     label07:
        r7 = virtualinvoke r6.<java.security.AlgorithmParameters: byte[] getEncoded()>();

     label08:
        goto label03;

     label09:
        r9 = virtualinvoke r6.<java.security.AlgorithmParameters: java.lang.String getAlgorithm()>();

     label10:
        r8 = r9;

        goto label05;

     label11:
        $r15 := @caughtexception;

        r5 = $r15;

        $r18 = new java.io.IOException;

        $r17 = virtualinvoke r5.<javax.crypto.BadPaddingException: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r18;

        catch javax.crypto.BadPaddingException from label01 to label02 with label11;
        catch javax.crypto.BadPaddingException from label03 to label04 with label11;
        catch javax.crypto.BadPaddingException from label05 to label06 with label11;
        catch javax.crypto.BadPaddingException from label07 to label08 with label11;
        catch javax.crypto.BadPaddingException from label09 to label10 with label11;
    }

    protected void <init>(javax.crypto.SealedObject)
    {
        javax.crypto.SealedObject r0, r1;
        byte[] $r2, $r3;
        java.lang.String $r4, $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: javax.crypto.SealedObject;

        r1 := @parameter0: javax.crypto.SealedObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("so == null");

        throw $r6;

     label1:
        $r2 = r1.<javax.crypto.SealedObject: byte[] encryptedContent>;

        r0.<javax.crypto.SealedObject: byte[] encryptedContent> = $r2;

        $r3 = r1.<javax.crypto.SealedObject: byte[] encodedParams>;

        r0.<javax.crypto.SealedObject: byte[] encodedParams> = $r3;

        $r4 = r1.<javax.crypto.SealedObject: java.lang.String sealAlg>;

        r0.<javax.crypto.SealedObject: java.lang.String sealAlg> = $r4;

        $r5 = r1.<javax.crypto.SealedObject: java.lang.String paramsAlg>;

        r0.<javax.crypto.SealedObject: java.lang.String paramsAlg> = $r5;

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        javax.crypto.SealedObject r0;
        java.io.ObjectInputStream r1;
        java.lang.Object $r2, $r5, $r8, $r10;
        byte[] $r3, $r4, $r6, $r7;
        java.lang.String $r9, $r11;

        r0 := @this: javax.crypto.SealedObject;

        r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readUnshared()>();

        $r3 = (byte[]) $r2;

        $r4 = (byte[]) $r3;

        r0.<javax.crypto.SealedObject: byte[] encodedParams> = $r4;

        $r5 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readUnshared()>();

        $r6 = (byte[]) $r5;

        $r7 = (byte[]) $r6;

        r0.<javax.crypto.SealedObject: byte[] encryptedContent> = $r7;

        $r8 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r9 = (java.lang.String) $r8;

        r0.<javax.crypto.SealedObject: java.lang.String sealAlg> = $r9;

        $r10 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r11 = (java.lang.String) $r10;

        r0.<javax.crypto.SealedObject: java.lang.String paramsAlg> = $r11;

        return;
    }

    public final java.lang.String getAlgorithm()
    {
        javax.crypto.SealedObject r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.SealedObject;

        $r1 = r0.<javax.crypto.SealedObject: java.lang.String sealAlg>;

        return $r1;
    }

    public final java.lang.Object getObject(java.security.Key) throws java.io.IOException, java.lang.ClassNotFoundException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        javax.crypto.SealedObject r0;
        java.security.Key r1;
        java.lang.IllegalStateException r2, $r25;
        javax.crypto.BadPaddingException r3, $r30;
        javax.crypto.IllegalBlockSizeException r4, $r19;
        java.security.InvalidAlgorithmParameterException r5, $r24;
        javax.crypto.NoSuchPaddingException r6, $r31;
        javax.crypto.Cipher r7;
        java.security.AlgorithmParameters r8;
        java.lang.String $r9, $r10, $r15, $r17, $r21, $r26, $r27, $r29, $r34;
        java.io.ObjectInputStream $r11;
        java.io.ByteArrayInputStream $r12;
        byte[] $r13, $r14, $r18;
        java.lang.Object $r16;
        int $i0;
        java.security.InvalidKeyException $r20;
        java.security.NoSuchAlgorithmException $r22, $r23, $r28, $r32, $r33;

        r0 := @this: javax.crypto.SealedObject;

        r1 := @parameter0: java.security.Key;

        if r1 != null goto label1;

        $r20 = new java.security.InvalidKeyException;

        specialinvoke $r20.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r20;

     label1:
        $r9 = r0.<javax.crypto.SealedObject: java.lang.String sealAlg>;

        r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r9);

        $r10 = r0.<javax.crypto.SealedObject: java.lang.String paramsAlg>;

        if $r10 == null goto label3;

        $r15 = r0.<javax.crypto.SealedObject: java.lang.String paramsAlg>;

        $i0 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        $r17 = r0.<javax.crypto.SealedObject: java.lang.String paramsAlg>;

        r8 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>($r17);

        $r18 = r0.<javax.crypto.SealedObject: byte[] encodedParams>;

        virtualinvoke r8.<java.security.AlgorithmParameters: void init(byte[])>($r18);

        virtualinvoke r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(2, r1, r8);

     label2:
        $r11 = new java.io.ObjectInputStream;

        $r12 = new java.io.ByteArrayInputStream;

        $r13 = r0.<javax.crypto.SealedObject: byte[] encryptedContent>;

        $r14 = virtualinvoke r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r13);

        specialinvoke $r12.<java.io.ByteArrayInputStream: void <init>(byte[])>($r14);

        specialinvoke $r11.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r12);

        $r16 = virtualinvoke $r11.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        return $r16;

     label3:
        virtualinvoke r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, r1);

     label4:
        goto label2;

     label5:
        $r31 := @caughtexception;

        r6 = $r31;

        $r32 = new java.security.NoSuchAlgorithmException;

        $r29 = virtualinvoke r6.<javax.crypto.NoSuchPaddingException: java.lang.String toString()>();

        specialinvoke $r32.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r29);

        throw $r32;

     label6:
        $r24 := @caughtexception;

        r5 = $r24;

        $r23 = new java.security.NoSuchAlgorithmException;

        $r26 = virtualinvoke r5.<java.security.InvalidAlgorithmParameterException: java.lang.String toString()>();

        specialinvoke $r23.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r26);

        throw $r23;

     label7:
        $r19 := @caughtexception;

        r4 = $r19;

        $r22 = new java.security.NoSuchAlgorithmException;

        $r21 = virtualinvoke r4.<javax.crypto.IllegalBlockSizeException: java.lang.String toString()>();

        specialinvoke $r22.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r21);

        throw $r22;

     label8:
        $r30 := @caughtexception;

        r3 = $r30;

        $r33 = new java.security.NoSuchAlgorithmException;

        $r34 = virtualinvoke r3.<javax.crypto.BadPaddingException: java.lang.String toString()>();

        specialinvoke $r33.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label9:
        $r25 := @caughtexception;

        r2 = $r25;

        $r28 = new java.security.NoSuchAlgorithmException;

        $r27 = virtualinvoke r2.<java.lang.IllegalStateException: java.lang.String toString()>();

        specialinvoke $r28.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r27);

        throw $r28;

        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label5;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label6;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label7;
        catch javax.crypto.BadPaddingException from label1 to label2 with label8;
        catch java.lang.IllegalStateException from label1 to label2 with label9;
        catch javax.crypto.NoSuchPaddingException from label2 to label3 with label5;
        catch java.security.InvalidAlgorithmParameterException from label2 to label3 with label6;
        catch javax.crypto.IllegalBlockSizeException from label2 to label3 with label7;
        catch javax.crypto.BadPaddingException from label2 to label3 with label8;
        catch java.lang.IllegalStateException from label2 to label3 with label9;
        catch javax.crypto.NoSuchPaddingException from label3 to label4 with label5;
        catch java.security.InvalidAlgorithmParameterException from label3 to label4 with label6;
        catch javax.crypto.IllegalBlockSizeException from label3 to label4 with label7;
        catch javax.crypto.BadPaddingException from label3 to label4 with label8;
        catch java.lang.IllegalStateException from label3 to label4 with label9;
    }

    public final java.lang.Object getObject(java.security.Key, java.lang.String) throws java.io.IOException, java.lang.ClassNotFoundException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.InvalidKeyException
    {
        javax.crypto.SealedObject r0;
        java.security.Key r1;
        java.lang.String r2, $r11, $r12, $r18, $r19, $r22, $r27, $r31, $r33, $r34;
        java.lang.IllegalStateException r3, $r35;
        javax.crypto.BadPaddingException r4, $r26;
        javax.crypto.IllegalBlockSizeException r5, $r28;
        java.security.InvalidAlgorithmParameterException r6, $r25;
        javax.crypto.NoSuchPaddingException r7, $r20;
        javax.crypto.Cipher r8;
        java.security.AlgorithmParameters r9;
        java.lang.IllegalArgumentException $r10;
        boolean $z0;
        java.io.ObjectInputStream $r13;
        byte[] $r14, $r17, $r21;
        java.io.ByteArrayInputStream $r15;
        java.lang.Object $r16;
        int $i0;
        java.security.NoSuchAlgorithmException $r23, $r24, $r29, $r30, $r32;

        r0 := @this: javax.crypto.SealedObject;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.lang.String;

        if r2 == null goto label01;

        $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label02;

     label01:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider name empty or null");

        throw $r10;

     label02:
        $r11 = r0.<javax.crypto.SealedObject: java.lang.String sealAlg>;

        r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r11, r2);

        $r12 = r0.<javax.crypto.SealedObject: java.lang.String paramsAlg>;

        if $r12 == null goto label04;

        $r18 = r0.<javax.crypto.SealedObject: java.lang.String paramsAlg>;

        $i0 = virtualinvoke $r18.<java.lang.String: int length()>();

        if $i0 == 0 goto label04;

        $r19 = r0.<javax.crypto.SealedObject: java.lang.String paramsAlg>;

        r9 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>($r19);

        $r21 = r0.<javax.crypto.SealedObject: byte[] encodedParams>;

        virtualinvoke r9.<java.security.AlgorithmParameters: void init(byte[])>($r21);

        virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(2, r1, r9);

     label03:
        $r13 = new java.io.ObjectInputStream;

        $r15 = new java.io.ByteArrayInputStream;

        $r14 = r0.<javax.crypto.SealedObject: byte[] encryptedContent>;

        $r17 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r14);

        specialinvoke $r15.<java.io.ByteArrayInputStream: void <init>(byte[])>($r17);

        specialinvoke $r13.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r15);

        $r16 = virtualinvoke $r13.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        return $r16;

     label04:
        virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, r1);

     label05:
        goto label03;

     label06:
        $r20 := @caughtexception;

        r7 = $r20;

        $r23 = new java.security.NoSuchAlgorithmException;

        $r22 = virtualinvoke r7.<javax.crypto.NoSuchPaddingException: java.lang.String toString()>();

        specialinvoke $r23.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r22);

        throw $r23;

     label07:
        $r25 := @caughtexception;

        r6 = $r25;

        $r24 = new java.security.NoSuchAlgorithmException;

        $r27 = virtualinvoke r6.<java.security.InvalidAlgorithmParameterException: java.lang.String toString()>();

        specialinvoke $r24.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r27);

        throw $r24;

     label08:
        $r28 := @caughtexception;

        r5 = $r28;

        $r29 = new java.security.NoSuchAlgorithmException;

        $r34 = virtualinvoke r5.<javax.crypto.IllegalBlockSizeException: java.lang.String toString()>();

        specialinvoke $r29.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r34);

        throw $r29;

     label09:
        $r26 := @caughtexception;

        r4 = $r26;

        $r30 = new java.security.NoSuchAlgorithmException;

        $r31 = virtualinvoke r4.<javax.crypto.BadPaddingException: java.lang.String toString()>();

        specialinvoke $r30.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r31);

        throw $r30;

     label10:
        $r35 := @caughtexception;

        r3 = $r35;

        $r32 = new java.security.NoSuchAlgorithmException;

        $r33 = virtualinvoke r3.<java.lang.IllegalStateException: java.lang.String toString()>();

        specialinvoke $r32.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r33);

        throw $r32;

        catch javax.crypto.NoSuchPaddingException from label02 to label03 with label06;
        catch java.security.InvalidAlgorithmParameterException from label02 to label03 with label07;
        catch javax.crypto.IllegalBlockSizeException from label02 to label03 with label08;
        catch javax.crypto.BadPaddingException from label02 to label03 with label09;
        catch java.lang.IllegalStateException from label02 to label03 with label10;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label06;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label07;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label08;
        catch javax.crypto.BadPaddingException from label03 to label04 with label09;
        catch java.lang.IllegalStateException from label03 to label04 with label10;
        catch javax.crypto.NoSuchPaddingException from label04 to label05 with label06;
        catch java.security.InvalidAlgorithmParameterException from label04 to label05 with label07;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label08;
        catch javax.crypto.BadPaddingException from label04 to label05 with label09;
        catch java.lang.IllegalStateException from label04 to label05 with label10;
    }

    public final java.lang.Object getObject(javax.crypto.Cipher) throws java.io.IOException, java.lang.ClassNotFoundException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.SealedObject r0;
        javax.crypto.Cipher r1;
        java.io.ObjectInputStream $r2;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4, $r5;
        java.lang.Object $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: javax.crypto.SealedObject;

        r1 := @parameter0: javax.crypto.Cipher;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("c == null");

        throw $r7;

     label1:
        $r2 = new java.io.ObjectInputStream;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = r0.<javax.crypto.SealedObject: byte[] encryptedContent>;

        $r5 = virtualinvoke r1.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        specialinvoke $r2.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r3);

        $r6 = virtualinvoke $r2.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        return $r6;
    }

    public static void <clinit>()
    {
        <javax.crypto.SealedObject: long serialVersionUID> = 4482838265551344752L;

        return;
    }
}
