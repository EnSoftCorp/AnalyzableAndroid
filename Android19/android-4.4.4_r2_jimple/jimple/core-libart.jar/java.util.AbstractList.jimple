public abstract class java.util.AbstractList extends java.util.AbstractCollection implements java.util.List
{
    protected transient int modCount;

    protected void <init>()
    {
        java.util.AbstractList r0;

        r0 := @this: java.util.AbstractList;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        return;
    }

    public void add(int, java.lang.Object)
    {
        java.util.AbstractList r0;
        int i0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.AbstractList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean add(java.lang.Object)
    {
        java.util.AbstractList r0;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.util.AbstractList;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.util.AbstractList: int size()>();

        virtualinvoke r0.<java.util.AbstractList: void add(int,java.lang.Object)>($i0, r1);

        return 1;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.AbstractList r0;
        int i0, i1;
        java.util.Collection r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;

        r0 := @this: java.util.AbstractList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        i1 = i0 + 1;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<java.util.AbstractList: void add(int,java.lang.Object)>(i0, $r3);

        i0 = i1;

        goto label1;

     label2:
        $z1 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public void clear()
    {
        java.util.AbstractList r0;
        int $i0;

        r0 := @this: java.util.AbstractList;

        $i0 = virtualinvoke r0.<java.util.AbstractList: int size()>();

        virtualinvoke r0.<java.util.AbstractList: void removeRange(int,int)>(0, $i0);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.AbstractList r0;
        java.lang.Object r1, r5, r6;
        java.util.List r2;
        java.util.Iterator r3, r4;
        boolean $z0, $z1, $z2;
        int $i0, $i1;

        r0 := @this: java.util.AbstractList;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof java.util.List;

        if $z0 == 0 goto label7;

        r2 = (java.util.List) r1;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i1 = virtualinvoke r0.<java.util.AbstractList: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        r3 = virtualinvoke r0.<java.util.AbstractList: java.util.Iterator iterator()>();

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label1;

        r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        if r5 != null goto label6;

        if r6 == null goto label4;

     label5:
        return 0;

     label6:
        $z2 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z2 != 0 goto label4;

        goto label5;

     label7:
        return 0;
    }

    public abstract java.lang.Object get(int);

    public int hashCode()
    {
        java.util.AbstractList r0;
        int i0, i1, i2;
        java.util.Iterator r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: java.util.AbstractList;

        i0 = 1;

        r1 = virtualinvoke r0.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        i1 = i0 * 31;

        if r2 != null goto label3;

        i2 = 0;

     label2:
        i0 = i1 + i2;

        goto label1;

     label3:
        i2 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        goto label2;

     label4:
        return i0;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.AbstractList r0;
        java.lang.Object r1, $r3, $r4;
        java.util.ListIterator r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1;

        r0 := @this: java.util.AbstractList;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<java.util.AbstractList: java.util.ListIterator listIterator()>();

        if r1 == null goto label2;

     label1:
        $z1 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label1;

        $i1 = interfaceinvoke r2.<java.util.ListIterator: int previousIndex()>();

        return $i1;

     label2:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        if $r3 != null goto label2;

        $i0 = interfaceinvoke r2.<java.util.ListIterator: int previousIndex()>();

        return $i0;

     label3:
        return -1;
    }

    public java.util.Iterator iterator()
    {
        java.util.AbstractList r0;
        java.util.AbstractList$SimpleListIterator $r1;

        r0 := @this: java.util.AbstractList;

        $r1 = new java.util.AbstractList$SimpleListIterator;

        specialinvoke $r1.<java.util.AbstractList$SimpleListIterator: void <init>(java.util.AbstractList)>(r0);

        return $r1;
    }

    public int lastIndexOf(java.lang.Object)
    {
        java.util.AbstractList r0;
        java.lang.Object r1, $r3, $r4;
        java.util.ListIterator r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractList;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.util.AbstractList: int size()>();

        r2 = virtualinvoke r0.<java.util.AbstractList: java.util.ListIterator listIterator(int)>($i0);

        if r1 == null goto label2;

     label1:
        $z1 = interfaceinvoke r2.<java.util.ListIterator: boolean hasPrevious()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label1;

        $i2 = interfaceinvoke r2.<java.util.ListIterator: int nextIndex()>();

        return $i2;

     label2:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        if $r3 != null goto label2;

        $i1 = interfaceinvoke r2.<java.util.ListIterator: int nextIndex()>();

        return $i1;

     label3:
        return -1;
    }

    public java.util.ListIterator listIterator()
    {
        java.util.AbstractList r0;
        java.util.ListIterator $r1;

        r0 := @this: java.util.AbstractList;

        $r1 = virtualinvoke r0.<java.util.AbstractList: java.util.ListIterator listIterator(int)>(0);

        return $r1;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.util.AbstractList r0;
        int i0;
        java.util.AbstractList$FullListIterator $r1;

        r0 := @this: java.util.AbstractList;

        i0 := @parameter0: int;

        $r1 = new java.util.AbstractList$FullListIterator;

        specialinvoke $r1.<java.util.AbstractList$FullListIterator: void <init>(java.util.AbstractList,int)>(r0, i0);

        return $r1;
    }

    public java.lang.Object remove(int)
    {
        java.util.AbstractList r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.AbstractList;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    protected void removeRange(int, int)
    {
        java.util.AbstractList r0;
        int i0, i1, i2;
        java.util.ListIterator r1;

        r0 := @this: java.util.AbstractList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<java.util.AbstractList: java.util.ListIterator listIterator(int)>(i0);

        i2 = i0;

     label1:
        if i2 >= i1 goto label2;

        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.AbstractList r0;
        int i0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.AbstractList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List subList(int, int)
    {
        java.util.AbstractList r0;
        int i0, i1, $i2;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.util.AbstractList$SubAbstractList $r3;
        java.util.AbstractList$SubAbstractListRandomAccess $r4;

        r0 := @this: java.util.AbstractList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label3;

        $i2 = virtualinvoke r0.<java.util.AbstractList: int size()>();

        if i1 > $i2 goto label3;

        if i0 > i1 goto label2;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label1;

        $r4 = new java.util.AbstractList$SubAbstractListRandomAccess;

        specialinvoke $r4.<java.util.AbstractList$SubAbstractListRandomAccess: void <init>(java.util.AbstractList,int,int)>(r0, i0, i1);

        return $r4;

     label1:
        $r3 = new java.util.AbstractList$SubAbstractList;

        specialinvoke $r3.<java.util.AbstractList$SubAbstractList: void <init>(java.util.AbstractList,int,int)>(r0, i0, i1);

        return $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label3:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }
}
