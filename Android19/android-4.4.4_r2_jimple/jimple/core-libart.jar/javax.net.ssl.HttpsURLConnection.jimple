public abstract class javax.net.ssl.HttpsURLConnection extends java.net.HttpURLConnection
{
    protected javax.net.ssl.HostnameVerifier hostnameVerifier;
    private javax.net.ssl.SSLSocketFactory sslSocketFactory;

    protected void <init>(java.net.URL)
    {
        javax.net.ssl.HttpsURLConnection r0;
        java.net.URL r1;
        javax.net.ssl.HostnameVerifier $r2;
        javax.net.ssl.SSLSocketFactory $r3;

        r0 := @this: javax.net.ssl.HttpsURLConnection;

        r1 := @parameter0: java.net.URL;

        specialinvoke r0.<java.net.HttpURLConnection: void <init>(java.net.URL)>(r1);

        $r2 = <javax.net.ssl.HttpsURLConnection$NoPreloadHolder: javax.net.ssl.HostnameVerifier defaultHostnameVerifier>;

        r0.<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier hostnameVerifier> = $r2;

        $r3 = <javax.net.ssl.HttpsURLConnection$NoPreloadHolder: javax.net.ssl.SSLSocketFactory defaultSSLSocketFactory>;

        r0.<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r3;

        return;
    }

    public static javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()
    {
        javax.net.ssl.HostnameVerifier $r0;

        $r0 = <javax.net.ssl.HttpsURLConnection$NoPreloadHolder: javax.net.ssl.HostnameVerifier defaultHostnameVerifier>;

        return $r0;
    }

    public static javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()
    {
        javax.net.ssl.SSLSocketFactory $r0;

        $r0 = <javax.net.ssl.HttpsURLConnection$NoPreloadHolder: javax.net.ssl.SSLSocketFactory defaultSSLSocketFactory>;

        return $r0;
    }

    public static void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)
    {
        javax.net.ssl.HostnameVerifier r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: javax.net.ssl.HostnameVerifier;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HostnameVerifier is null");

        throw $r1;

     label1:
        <javax.net.ssl.HttpsURLConnection$NoPreloadHolder: javax.net.ssl.HostnameVerifier defaultHostnameVerifier> = r0;

        return;
    }

    public static void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)
    {
        javax.net.ssl.SSLSocketFactory r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: javax.net.ssl.SSLSocketFactory;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SSLSocketFactory is null");

        throw $r1;

     label1:
        <javax.net.ssl.HttpsURLConnection$NoPreloadHolder: javax.net.ssl.SSLSocketFactory defaultSSLSocketFactory> = r0;

        return;
    }

    public abstract java.lang.String getCipherSuite();

    public javax.net.ssl.HostnameVerifier getHostnameVerifier()
    {
        javax.net.ssl.HttpsURLConnection r0;
        javax.net.ssl.HostnameVerifier $r1;

        r0 := @this: javax.net.ssl.HttpsURLConnection;

        $r1 = r0.<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        return $r1;
    }

    public abstract java.security.cert.Certificate[] getLocalCertificates();

    public java.security.Principal getLocalPrincipal()
    {
        javax.net.ssl.HttpsURLConnection r0;
        java.security.cert.Certificate[] r1;
        int $i0;
        java.security.cert.Certificate $r2, $r3;
        boolean $z0;
        java.security.cert.X509Certificate $r4;
        javax.security.auth.x500.X500Principal $r5;

        r0 := @this: javax.net.ssl.HttpsURLConnection;

        r1 = virtualinvoke r0.<javax.net.ssl.HttpsURLConnection: java.security.cert.Certificate[] getLocalCertificates()>();

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 == 0 goto label1;

        $r2 = r1[0];

        $z0 = $r2 instanceof java.security.cert.X509Certificate;

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r3 = r1[0];

        $r4 = (java.security.cert.X509Certificate) $r3;

        $r5 = virtualinvoke $r4.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r5;
    }

    public java.security.Principal getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        javax.net.ssl.HttpsURLConnection r0;
        java.security.cert.Certificate[] r1;
        javax.net.ssl.SSLPeerUnverifiedException $r2;
        int $i0;
        java.security.cert.Certificate $r3, $r4;
        boolean $z0;
        java.security.cert.X509Certificate $r5;
        javax.security.auth.x500.X500Principal $r6;

        r0 := @this: javax.net.ssl.HttpsURLConnection;

        r1 = virtualinvoke r0.<javax.net.ssl.HttpsURLConnection: java.security.cert.Certificate[] getServerCertificates()>();

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 == 0 goto label1;

        $r3 = r1[0];

        $z0 = $r3 instanceof java.security.cert.X509Certificate;

        if $z0 != 0 goto label2;

     label1:
        $r2 = new javax.net.ssl.SSLPeerUnverifiedException;

        specialinvoke $r2.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>("No server\'s end-entity certificate");

        throw $r2;

     label2:
        $r4 = r1[0];

        $r5 = (java.security.cert.X509Certificate) $r4;

        $r6 = virtualinvoke $r5.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r6;
    }

    public javax.net.ssl.SSLSocketFactory getSSLSocketFactory()
    {
        javax.net.ssl.HttpsURLConnection r0;
        javax.net.ssl.SSLSocketFactory $r1;

        r0 := @this: javax.net.ssl.HttpsURLConnection;

        $r1 = r0.<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        return $r1;
    }

    public abstract java.security.cert.Certificate[] getServerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException;

    public void setHostnameVerifier(javax.net.ssl.HostnameVerifier)
    {
        javax.net.ssl.HttpsURLConnection r0;
        javax.net.ssl.HostnameVerifier r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: javax.net.ssl.HttpsURLConnection;

        r1 := @parameter0: javax.net.ssl.HostnameVerifier;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HostnameVerifier is null");

        throw $r2;

     label1:
        r0.<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier hostnameVerifier> = r1;

        return;
    }

    public void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)
    {
        javax.net.ssl.HttpsURLConnection r0;
        javax.net.ssl.SSLSocketFactory r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: javax.net.ssl.HttpsURLConnection;

        r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SSLSocketFactory is null");

        throw $r2;

     label1:
        r0.<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory sslSocketFactory> = r1;

        return;
    }
}
