public final class libcore.icu.ICU extends java.lang.Object
{
    private static final libcore.util.BasicLruCache CACHED_PATTERNS;
    public static final int U_BUFFER_OVERFLOW_ERROR;
    public static final int U_ILLEGAL_CHAR_FOUND;
    public static final int U_INVALID_CHAR_FOUND;
    public static final int U_TRUNCATED_CHAR_FOUND;
    public static final int U_ZERO_ERROR;
    private static java.util.Locale[] availableLocalesCache;
    private static java.lang.String[] isoCountries;
    private static java.lang.String[] isoLanguages;

    static void <clinit>()
    {
        libcore.util.BasicLruCache $r0;

        <libcore.icu.ICU: int U_TRUNCATED_CHAR_FOUND> = 11;

        <libcore.icu.ICU: int U_INVALID_CHAR_FOUND> = 10;

        <libcore.icu.ICU: int U_ILLEGAL_CHAR_FOUND> = 12;

        <libcore.icu.ICU: int U_BUFFER_OVERFLOW_ERROR> = 15;

        $r0 = new libcore.util.BasicLruCache;

        specialinvoke $r0.<libcore.util.BasicLruCache: void <init>(int)>(8);

        <libcore.icu.ICU: libcore.util.BasicLruCache CACHED_PATTERNS> = $r0;

        return;
    }

    public void <init>()
    {
        libcore.icu.ICU r0;

        r0 := @this: libcore.icu.ICU;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean U_FAILURE(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static native java.lang.String addLikelySubtags(java.lang.String);

    public static java.util.Locale[] getAvailableBreakIteratorLocales()
    {
        java.lang.String[] $r0;
        java.util.Locale[] $r1;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableBreakIteratorLocalesNative()>();

        $r1 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r0);

        return $r1;
    }

    private static native java.lang.String[] getAvailableBreakIteratorLocalesNative();

    public static java.util.Locale[] getAvailableCalendarLocales()
    {
        java.lang.String[] $r0;
        java.util.Locale[] $r1;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableCalendarLocalesNative()>();

        $r1 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r0);

        return $r1;
    }

    private static native java.lang.String[] getAvailableCalendarLocalesNative();

    public static java.util.Locale[] getAvailableCollatorLocales()
    {
        java.lang.String[] $r0;
        java.util.Locale[] $r1;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableCollatorLocalesNative()>();

        $r1 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r0);

        return $r1;
    }

    private static native java.lang.String[] getAvailableCollatorLocalesNative();

    public static native java.lang.String[] getAvailableCurrencyCodes();

    public static java.util.Locale[] getAvailableDateFormatLocales()
    {
        java.lang.String[] $r0;
        java.util.Locale[] $r1;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableDateFormatLocalesNative()>();

        $r1 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r0);

        return $r1;
    }

    private static native java.lang.String[] getAvailableDateFormatLocalesNative();

    public static java.util.Locale[] getAvailableDateFormatSymbolsLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <libcore.icu.ICU: java.util.Locale[] getAvailableDateFormatLocales()>();

        return $r0;
    }

    public static java.util.Locale[] getAvailableDecimalFormatSymbolsLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <libcore.icu.ICU: java.util.Locale[] getAvailableNumberFormatLocales()>();

        return $r0;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0, $r1, $r3, $r5;
        java.lang.Object $r2;
        java.lang.String[] $r4;

        $r0 = <libcore.icu.ICU: java.util.Locale[] availableLocalesCache>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableLocalesNative()>();

        $r5 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r4);

        <libcore.icu.ICU: java.util.Locale[] availableLocalesCache> = $r5;

     label1:
        $r1 = <libcore.icu.ICU: java.util.Locale[] availableLocalesCache>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.util.Locale[]) $r2;

        return $r3;
    }

    private static native java.lang.String[] getAvailableLocalesNative();

    public static java.util.Locale[] getAvailableNumberFormatLocales()
    {
        java.lang.String[] $r0;
        java.util.Locale[] $r1;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableNumberFormatLocalesNative()>();

        $r1 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r0);

        return $r1;
    }

    private static native java.lang.String[] getAvailableNumberFormatLocalesNative();

    public static java.lang.String getBestDateTimePattern(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, r5;
        libcore.util.BasicLruCache r3, $r10, $r13;
        java.lang.Throwable r4, $r14;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.Object $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = <libcore.icu.ICU: libcore.util.BasicLruCache CACHED_PATTERNS>;

        entermonitor r3;

     label1:
        $r10 = <libcore.icu.ICU: libcore.util.BasicLruCache CACHED_PATTERNS>;

        $r11 = virtualinvoke $r10.<libcore.util.BasicLruCache: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.lang.String) $r11;

     label2:
        if r5 != null goto label4;

     label3:
        r5 = staticinvoke <libcore.icu.ICU: java.lang.String getBestDateTimePatternNative(java.lang.String,java.lang.String)>(r0, r1);

        $r13 = <libcore.icu.ICU: libcore.util.BasicLruCache CACHED_PATTERNS>;

        virtualinvoke $r13.<libcore.util.BasicLruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5);

     label4:
        exitmonitor r3;

     label5:
        return r5;

     label6:
        $r14 := @caughtexception;

        r4 = $r14;

     label7:
        exitmonitor r3;

     label8:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private static native java.lang.String getBestDateTimePatternNative(java.lang.String, java.lang.String);

    public static native java.lang.String getCldrVersion();

    public static native java.lang.String getCurrencyCode(java.lang.String);

    public static native java.lang.String getCurrencyDisplayName(java.lang.String, java.lang.String);

    public static native int getCurrencyFractionDigits(java.lang.String);

    public static native java.lang.String getCurrencySymbol(java.lang.String, java.lang.String);

    public static char[] getDateFormatOrder(java.lang.String)
    {
        java.lang.String r0, $r5, $r13;
        char[] r1;
        int i0, i1, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i12;
        boolean z0, z1, z2;
        char c2, $c11;
        java.lang.IllegalArgumentException $r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.lang.String;

        r1 = newarray (char)[3];

        i0 = 0;

        z0 = 0;

        z1 = 0;

        z2 = 0;

        i1 = 0;

     label01:
        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 >= $i7 goto label13;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if c2 == 100 goto label02;

        if c2 == 76 goto label02;

        if c2 == 77 goto label02;

        if c2 != 121 goto label07;

     label02:
        if c2 != 100 goto label04;

        if z0 != 0 goto label04;

        i5 = i0 + 1;

        r1[i0] = 100;

        z0 = 1;

        i0 = i5;

     label03:
        i1 = i1 + 1;

        goto label01;

     label04:
        if c2 == 76 goto label05;

        if c2 != 77 goto label06;

     label05:
        if z1 != 0 goto label06;

        i4 = i0 + 1;

        r1[i0] = 77;

        z1 = 1;

        i0 = i4;

        goto label03;

     label06:
        if c2 != 121 goto label03;

        if z2 != 0 goto label03;

        i3 = i0 + 1;

        r1[i0] = 121;

        z2 = 1;

        i0 = i3;

        goto label03;

     label07:
        if c2 == 71 goto label03;

        if c2 < 97 goto label08;

        if c2 <= 122 goto label09;

     label08:
        if c2 < 65 goto label10;

        if c2 > 90 goto label10;

     label09:
        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad pattern character \'");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label10:
        if c2 != 39 goto label03;

        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        $i10 = -1 + $i8;

        if i1 >= $i10 goto label11;

        $i12 = i1 + 1;

        $c11 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i12);

        if $c11 != 39 goto label11;

        i1 = i1 + 1;

        goto label03;

     label11:
        $i9 = i1 + 1;

        i6 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(39, $i9);

        if i6 != -1 goto label12;

        $r2 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad quoting in ");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label12:
        i1 = i6 + 1;

        goto label03;

     label13:
        return r1;
    }

    public static native java.lang.String getDisplayCountryNative(java.lang.String, java.lang.String);

    public static native java.lang.String getDisplayLanguageNative(java.lang.String, java.lang.String);

    public static native java.lang.String getDisplayVariantNative(java.lang.String, java.lang.String);

    public static native java.lang.String getISO3CountryNative(java.lang.String);

    public static native java.lang.String getISO3LanguageNative(java.lang.String);

    public static java.lang.String[] getISOCountries()
    {
        java.lang.String[] $r0, $r1, $r3, $r4;
        java.lang.Object $r2;

        $r0 = <libcore.icu.ICU: java.lang.String[] isoCountries>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <libcore.icu.ICU: java.lang.String[] getISOCountriesNative()>();

        <libcore.icu.ICU: java.lang.String[] isoCountries> = $r4;

     label1:
        $r1 = <libcore.icu.ICU: java.lang.String[] isoCountries>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    private static native java.lang.String[] getISOCountriesNative();

    public static java.lang.String[] getISOLanguages()
    {
        java.lang.String[] $r0, $r1, $r3, $r4;
        java.lang.Object $r2;

        $r0 = <libcore.icu.ICU: java.lang.String[] isoLanguages>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <libcore.icu.ICU: java.lang.String[] getISOLanguagesNative()>();

        <libcore.icu.ICU: java.lang.String[] isoLanguages> = $r4;

     label1:
        $r1 = <libcore.icu.ICU: java.lang.String[] isoLanguages>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    private static native java.lang.String[] getISOLanguagesNative();

    public static native java.lang.String getIcuVersion();

    public static native java.lang.String getScript(java.lang.String);

    public static native java.lang.String getUnicodeVersion();

    static native boolean initLocaleDataNative(java.lang.String, libcore.icu.LocaleData);

    public static java.util.Locale localeFromString(java.lang.String)
    {
        java.lang.String r0, $r2, $r3, $r4, $r6, $r7;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.Locale $r1, $r5, $r8;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(95);

        $i2 = i0 + 1;

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(95, $i2);

        if i0 != -1 goto label1;

        $r8 = new java.util.Locale;

        specialinvoke $r8.<java.util.Locale: void <init>(java.lang.String)>(r0);

        return $r8;

     label1:
        if i1 != -1 goto label2;

        $r5 = new java.util.Locale;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i5 = i0 + 1;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i5);

        specialinvoke $r5.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>($r6, $r7);

        return $r5;

     label2:
        $r1 = new java.util.Locale;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i3 = i0 + 1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i3, i1);

        $i4 = i1 + 1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i4);

        specialinvoke $r1.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4);

        return $r1;
    }

    public static java.util.Locale[] localesFromStrings(java.lang.String[])
    {
        java.lang.String[] r0;
        java.util.LinkedHashSet r1, $r2;
        int i0, i1, $i2;
        java.util.Locale[] $r3, $r5;
        java.lang.Object[] $r4;
        java.lang.String $r6;
        java.util.Locale $r7;

        r0 := @parameter0: java.lang.String[];

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        r1 = $r2;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = r0[i1];

        $r7 = staticinvoke <libcore.icu.ICU: java.util.Locale localeFromString(java.lang.String)>($r6);

        virtualinvoke r1.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $i2 = virtualinvoke r1.<java.util.LinkedHashSet: int size()>();

        $r3 = newarray (java.util.Locale)[$i2];

        $r4 = virtualinvoke r1.<java.util.LinkedHashSet: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.util.Locale[]) $r4;

        return $r5;
    }

    public static native java.lang.String toLowerCase(java.lang.String, java.lang.String);

    public static native java.lang.String toUpperCase(java.lang.String, java.lang.String);
}
