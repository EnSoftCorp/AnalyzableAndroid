class java.util.Collections$CheckedMap extends java.lang.Object implements java.util.Map, java.io.Serializable
{
    private static final long serialVersionUID;
    final java.lang.Class keyType;
    final java.util.Map m;
    final java.lang.Class valueType;

    private void <init>(java.util.Map, java.lang.Class, java.lang.Class)
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map r1;
        java.lang.Class r2, r3;
        java.lang.NullPointerException $r4, $r5, $r6;

        r0 := @this: java.util.Collections$CheckedMap;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("m == null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("keyType == null");

        throw $r5;

     label2:
        if r3 != null goto label3;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("valueType == null");

        throw $r4;

     label3:
        r0.<java.util.Collections$CheckedMap: java.util.Map m> = r1;

        r0.<java.util.Collections$CheckedMap: java.lang.Class keyType> = r2;

        r0.<java.util.Collections$CheckedMap: java.lang.Class valueType> = r3;

        return;
    }

    void <init>(java.util.Map, java.lang.Class, java.lang.Class, java.util.Collections$1)
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map r1;
        java.lang.Class r2, r3;
        java.util.Collections$1 r4;

        r0 := @this: java.util.Collections$CheckedMap;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: java.util.Collections$1;

        specialinvoke r0.<java.util.Collections$CheckedMap: void <init>(java.util.Map,java.lang.Class,java.lang.Class)>(r1, r2, r3);

        return;
    }

    public void clear()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;

        r0 := @this: java.util.Collections$CheckedMap;

        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Set entrySet()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Collections$CheckedMap$CheckedEntrySet $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.lang.Class $r4;

        r0 := @this: java.util.Collections$CheckedMap;

        $r1 = new java.util.Collections$CheckedMap$CheckedEntrySet;

        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = r0.<java.util.Collections$CheckedMap: java.lang.Class valueType>;

        specialinvoke $r1.<java.util.Collections$CheckedMap$CheckedEntrySet: void <init>(java.util.Set,java.lang.Class)>($r3, $r4);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;

        r0 := @this: java.util.Collections$CheckedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public int hashCode()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: java.util.Collections$CheckedMap;

        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap;

        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: java.util.Collections$CheckedMap;

        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1, r2, $r5, $r7, $r8;
        java.lang.Class $r3, $r6;
        java.util.Map $r4;

        r0 := @this: java.util.Collections$CheckedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $r3 = r0.<java.util.Collections$CheckedMap: java.lang.Class keyType>;

        $r5 = staticinvoke <java.util.Collections: java.lang.Object checkType(java.lang.Object,java.lang.Class)>(r1, $r3);

        $r6 = r0.<java.util.Collections$CheckedMap: java.lang.Class valueType>;

        $r7 = staticinvoke <java.util.Collections: java.lang.Object checkType(java.lang.Object,java.lang.Class)>(r2, $r6);

        $r8 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

        return $r8;
    }

    public void putAll(java.util.Map)
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map r1, $r7;
        int i0, i1, i2;
        java.util.Map$Entry[] r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4, $r6, $r9;
        java.util.Set $r5;
        java.lang.Object $r8, $r11, $r12, $r13, $r17;
        java.lang.Class $r15, $r16;

        r0 := @this: java.util.Collections$CheckedMap;

        r1 := @parameter0: java.util.Map;

        i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        if i0 != 0 goto label2;

     label1:
        return;

     label2:
        r2 = newarray (java.util.Map$Entry)[i0];

        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r13;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = r0.<java.util.Collections$CheckedMap: java.lang.Class keyType>;

        staticinvoke <java.util.Collections: java.lang.Object checkType(java.lang.Object,java.lang.Class)>($r12, $r15);

        $r17 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = r0.<java.util.Collections$CheckedMap: java.lang.Class valueType>;

        staticinvoke <java.util.Collections: java.lang.Object checkType(java.lang.Object,java.lang.Class)>($r17, $r16);

        r2[i1] = r4;

        i1 = i1 + 1;

        goto label3;

     label4:
        i2 = 0;

     label5:
        if i2 >= i0 goto label1;

        $r7 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $r6 = r2[i2];

        $r8 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = r2[i2];

        $r11 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r11);

        i2 = i2 + 1;

        goto label5;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;

        r0 := @this: java.util.Collections$CheckedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;
    }

    public int size()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: java.util.Collections$CheckedMap;

        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Collections$CheckedMap;

        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public java.util.Collection values()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: java.util.Collections$CheckedMap;

        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <java.util.Collections$CheckedMap: long serialVersionUID> = 5742860141034234728L;

        return;
    }
}
