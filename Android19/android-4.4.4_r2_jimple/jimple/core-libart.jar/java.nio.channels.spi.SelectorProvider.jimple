public abstract class java.nio.channels.spi.SelectorProvider extends java.lang.Object
{
    private static java.nio.channels.spi.SelectorProvider provider;

    static void <clinit>()
    {
        <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider> = null;

        return;
    }

    protected void <init>()
    {
        java.nio.channels.spi.SelectorProvider r0;

        r0 := @this: java.nio.channels.spi.SelectorProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.nio.channels.spi.SelectorProvider loadProviderByJar()
    {
        java.util.Iterator r0;
        java.util.ServiceLoader $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.nio.channels.spi.SelectorProvider $r3;

        $r1 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "java/nio/channels/spi/SelectorProvider");

        r0 = virtualinvoke $r1.<java.util.ServiceLoader: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.nio.channels.spi.SelectorProvider) $r2;

        return $r3;

     label1:
        return null;
    }

    public static java.nio.channels.spi.SelectorProvider provider()
    {
        java.lang.Throwable r0, $r9;
        java.nio.channels.spi.SelectorProvider r1, $r2, $r4, $r5, $r6, $r8;
        java.lang.Object $r3;
        java.nio.SelectorProviderImpl $r7;

        entermonitor class "java/nio/channels/spi/SelectorProvider";

     label1:
        $r2 = <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider>;

        if $r2 != null goto label3;

        $r3 = staticinvoke <java.util.ServiceLoader: java.lang.Object loadFromSystemProperty(java.lang.Class)>(class "java/nio/channels/spi/SelectorProvider");

        $r4 = (java.nio.channels.spi.SelectorProvider) $r3;

        <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider> = $r4;

        $r5 = <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider>;

        if $r5 != null goto label2;

        $r8 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider loadProviderByJar()>();

        <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider> = $r8;

     label2:
        $r6 = <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider>;

        if $r6 != null goto label3;

        $r7 = new java.nio.SelectorProviderImpl;

        specialinvoke $r7.<java.nio.SelectorProviderImpl: void <init>()>();

        <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider> = $r7;

     label3:
        r1 = <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider>;

     label4:
        exitmonitor class "java/nio/channels/spi/SelectorProvider";

        return r1;

     label5:
        $r9 := @caughtexception;

        r0 = $r9;

        exitmonitor class "java/nio/channels/spi/SelectorProvider";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public java.nio.channels.Channel inheritedChannel() throws java.io.IOException
    {
        java.nio.channels.spi.SelectorProvider r0;

        r0 := @this: java.nio.channels.spi.SelectorProvider;

        return null;
    }

    public abstract java.nio.channels.DatagramChannel openDatagramChannel() throws java.io.IOException;

    public abstract java.nio.channels.Pipe openPipe() throws java.io.IOException;

    public abstract java.nio.channels.spi.AbstractSelector openSelector() throws java.io.IOException;

    public abstract java.nio.channels.ServerSocketChannel openServerSocketChannel() throws java.io.IOException;

    public abstract java.nio.channels.SocketChannel openSocketChannel() throws java.io.IOException;
}
