public class org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl extends java.security.SecureRandomSpi implements java.io.Serializable
{
    private static final int COUNTER_BASE;
    private static final int[] END_FLAGS;
    private static final int EXTRAFRAME_OFFSET;
    private static final int FRAME_LENGTH;
    private static final int FRAME_OFFSET;
    private static final int HASHBYTES_TO_USE;
    private static final int HASHCOPY_OFFSET;
    private static final int[] LEFT;
    private static final int[] MASK;
    private static final int MAX_BYTES;
    private static final int NEXT_BYTES;
    private static final int[] RIGHT1;
    private static final int[] RIGHT2;
    private static final int SET_SEED;
    private static final int UNDEFINED;
    private static java.io.FileInputStream devURandom;
    private static org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl myRandom;
    private static final long serialVersionUID;
    private transient int[] copies;
    private transient long counter;
    private transient int nextBIndex;
    private transient byte[] nextBytes;
    private transient int[] seed;
    private transient long seedLength;
    private transient int state;

    static void <clinit>()
    {
        java.io.IOException r0, $r8;
        java.io.FileInputStream $r1;
        java.io.File $r2;
        int[] $r3, $r4, $r5, $r6, $r7;
        java.lang.RuntimeException $r9;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long serialVersionUID> = 283736797212159675L;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int UNDEFINED> = 0;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int SET_SEED> = 1;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int NEXT_BYTES> = 2;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int MAX_BYTES> = 48;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int HASHCOPY_OFFSET> = 0;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int HASHBYTES_TO_USE> = 20;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int FRAME_OFFSET> = 21;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int FRAME_LENGTH> = 16;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int EXTRAFRAME_OFFSET> = 5;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int COUNTER_BASE> = 0;

     label1:
        $r1 = new java.io.FileInputStream;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("/dev/urandom");

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: java.io.FileInputStream devURandom> = $r1;

     label2:
        $r3 = newarray (int)[4];

        $r3[0] = -2147483648;

        $r3[1] = 8388608;

        $r3[2] = 32768;

        $r3[3] = 128;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] END_FLAGS> = $r3;

        $r4 = newarray (int)[4];

        $r4[0] = 0;

        $r4[1] = 40;

        $r4[2] = 48;

        $r4[3] = 56;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] RIGHT1> = $r4;

        $r5 = newarray (int)[4];

        $r5[0] = 0;

        $r5[1] = 8;

        $r5[2] = 16;

        $r5[3] = 24;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] RIGHT2> = $r5;

        $r6 = newarray (int)[4];

        $r6[0] = 0;

        $r6[1] = 24;

        $r6[2] = 16;

        $r6[3] = 8;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] LEFT> = $r6;

        $r7 = newarray (int)[4];

        $r7[0] = -1;

        $r7[1] = 16777215;

        $r7[2] = 65535;

        $r7[3] = 255;

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] MASK> = $r7;

        return;

     label3:
        $r8 := @caughtexception;

        r0 = $r8;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r0);

        throw $r9;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>()
    {
        org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl r0;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        byte[] $r8;

        r0 := @this: org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl;

        specialinvoke r0.<java.security.SecureRandomSpi: void <init>()>();

        $r1 = newarray (int)[87];

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed> = $r1;

        $r2 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $r2[82] = 1732584193;

        $r3 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $r3[83] = -271733879;

        $r4 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $r4[84] = -1732584194;

        $r5 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $r5[85] = 271733878;

        $r6 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $r6[86] = -1009589776;

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long seedLength> = 0L;

        $r7 = newarray (int)[37];

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies> = $r7;

        $r8 = newarray (byte)[20];

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] nextBytes> = $r8;

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex> = 20;

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long counter> = 0L;

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int state> = 0;

        return;
    }

    private static byte[] getRandomBytes(int)
    {
        int i0;
        dalvik.system.BlockGuard$Policy r0, $r4;
        java.lang.Throwable r1, $r18;
        java.lang.Exception r2, $r11;
        byte[] r3;
        java.io.FileInputStream $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r13, $r14, $r15, $r17;
        java.lang.String $r10, $r16;
        java.security.ProviderException $r12;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too few bytes requested: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        r0 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

     label2:
        $r4 = <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy LAX_POLICY>;

        staticinvoke <dalvik.system.BlockGuard: void setThreadPolicy(dalvik.system.BlockGuard$Policy)>($r4);

        r3 = newarray (byte)[i0];

        $r5 = <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: java.io.FileInputStream devURandom>;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>($r5, r3, 0, i0);

     label3:
        staticinvoke <dalvik.system.BlockGuard: void setThreadPolicy(dalvik.system.BlockGuard$Policy)>(r0);

        return r3;

     label4:
        $r11 := @caughtexception;

        r2 = $r11;

     label5:
        $r12 = new java.security.ProviderException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t read ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" random bytes");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>($r16, r2);

        throw $r12;

     label6:
        $r18 := @caughtexception;

        r1 = $r18;

        staticinvoke <dalvik.system.BlockGuard: void setThreadPolicy(dalvik.system.BlockGuard$Policy)>(r0);

        throw r1;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl r0;
        java.io.ObjectInputStream r1;
        int i0, i1, i2, i3, i4, i5, i6, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        int[] $r2, $r3, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        byte[] $r4, $r9;
        long $l7, $l8;

        r0 := @this: org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl;

        r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = newarray (int)[87];

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed> = $r2;

        $r3 = newarray (int)[37];

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies> = $r3;

        $r4 = newarray (byte)[20];

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] nextBytes> = $r4;

        $l7 = virtualinvoke r1.<java.io.ObjectInputStream: long readLong()>();

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long seedLength> = $l7;

        $l8 = virtualinvoke r1.<java.io.ObjectInputStream: long readLong()>();

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long counter> = $l8;

        $i9 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int state> = $i9;

        $r5 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i10 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r5[81] = $i10;

        $r6 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i11 = $r6[81];

        $i13 = 3 + $i11;

        i0 = $i13 >> 2;

        $i12 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int state>;

        if $i12 == 2 goto label04;

        i5 = 0;

     label01:
        if i5 >= i0 goto label02;

        $r18 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i29 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r18[i5] = $i29;

        i5 = i5 + 1;

        goto label01;

     label02:
        i6 = 0;

     label03:
        if i6 >= 5 goto label13;

        $r16 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i31 = i6 + 82;

        $i30 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r16[$i31] = $i30;

        i6 = i6 + 1;

        goto label03;

     label04:
        $r7 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i14 = $r7[81];

        if $i14 < 48 goto label05;

        $r12 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i25 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r12[16] = $i25;

        $r14 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i27 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r14[17] = $i27;

        $r15 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i26 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r15[30] = $i26;

        $r17 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i28 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r17[31] = $i28;

     label05:
        i1 = 0;

     label06:
        if i1 >= 16 goto label07;

        $r13 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i23 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r13[i1] = $i23;

        i1 = i1 + 1;

        goto label06;

     label07:
        i2 = 0;

     label08:
        if i2 >= i0 goto label09;

        $r10 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        $i21 = i2 + 21;

        $i24 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r10[$i21] = $i24;

        i2 = i2 + 1;

        goto label08;

     label09:
        i3 = 0;

     label10:
        if i3 >= 5 goto label11;

        $r11 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        $i22 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r11[i3] = $i22;

        i3 = i3 + 1;

        goto label10;

     label11:
        i4 = 0;

     label12:
        if i4 >= 5 goto label13;

        $r8 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i20 = i4 + 82;

        $i19 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r8[$i20] = $i19;

        i4 = i4 + 1;

        goto label12;

     label13:
        $i16 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex> = $i16;

        $r9 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] nextBytes>;

        $i17 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex>;

        $i15 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex>;

        $i18 = 20 - $i15;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>(r1, $r9, $i17, $i18);

        return;
    }

    private void updateSeed(byte[])
    {
        org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl r0;
        byte[] r1;
        int $i0, $i1, $i2;
        int[] $r2;
        long $l3, $l4, $l5;

        r0 := @this: org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i0 = lengthof r1;

        $i1 = -1 + $i0;

        staticinvoke <org.apache.harmony.security.provider.crypto.SHA1Impl: void updateHash(int[],byte[],int,int)>($r2, r1, 0, $i1);

        $l4 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long seedLength>;

        $i2 = lengthof r1;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long seedLength> = $l5;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl r0;
        java.io.ObjectOutputStream r1;
        int i0, i1, i2, i3, i4, i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        int[] r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r16;
        long $l6, $l7;
        byte[] $r14;

        r0 := @this: org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $l6 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long seedLength>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeLong(long)>($l6);

        $l7 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long counter>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeLong(long)>($l7);

        $i8 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int state>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i8);

        $r3 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i9 = $r3[81];

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i9);

        $r4 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i10 = $r4[81];

        $i12 = 3 + $i10;

        i0 = $i12 >> 2;

        $i11 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int state>;

        if $i11 == 2 goto label3;

        $i26 = i0 + 5;

        r2 = newarray (int)[$i26];

        $r15 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, r2, 0, i0);

        $r16 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 82, r2, i0, 5);

     label1:
        i5 = 0;

     label2:
        $i21 = lengthof r2;

        if i5 >= $i21 goto label6;

        $i22 = r2[i5];

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i22);

        i5 = i5 + 1;

        goto label2;

     label3:
        i1 = 0;

        $r5 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i13 = $r5[81];

        if $i13 >= 48 goto label5;

        $i25 = i0 + 26;

        r2 = newarray (int)[$i25];

     label4:
        $r10 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r2, i1, 16);

        i2 = i1 + 16;

        $r12 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 21, r2, i2, i0);

        i3 = i2 + i0;

        $r11 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r2, i3, 5);

        i4 = i3 + 5;

        $r13 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 82, r2, i4, 5);

        goto label1;

     label5:
        $i14 = i0 + 42;

        r2 = newarray (int)[$i14];

        $r6 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i15 = $r6[16];

        r2[0] = $i15;

        $r7 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i16 = $r7[17];

        r2[1] = $i16;

        $r8 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i17 = $r8[30];

        r2[2] = $i17;

        $r9 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i18 = $r9[31];

        r2[3] = $i18;

        i1 = 4;

        goto label4;

     label6:
        $i19 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i19);

        $r14 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] nextBytes>;

        $i24 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex>;

        $i20 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex>;

        $i23 = 20 - $i20;

        virtualinvoke r1.<java.io.ObjectOutputStream: void write(byte[],int,int)>($r14, $i24, $i23);

        return;
    }

    protected byte[] engineGenerateSeed(int)
    {
        org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl r0, $r3, $r4, $r5, $r6;
        int i0;
        byte[] r1, $r7;
        java.lang.Throwable r2, $r10;
        java.lang.NegativeArraySizeException $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl;

        i0 := @parameter0: int;

        entermonitor r0;

        if i0 >= 0 goto label3;

     label1:
        $r8 = new java.lang.NegativeArraySizeException;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r8.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label2:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r0;

        throw r2;

     label3:
        if i0 != 0 goto label6;

     label4:
        r1 = <libcore.util.EmptyArray: byte[] BYTE>;

     label5:
        exitmonitor r0;

        return r1;

     label6:
        $r3 = <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl myRandom>;

        if $r3 != null goto label7;

        $r5 = new org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl;

        specialinvoke $r5.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: void <init>()>();

        <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl myRandom> = $r5;

        $r6 = <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl myRandom>;

        $r7 = staticinvoke <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] getRandomBytes(int)>(20);

        virtualinvoke $r6.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: void engineSetSeed(byte[])>($r7);

     label7:
        r1 = newarray (byte)[i0];

        $r4 = <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl myRandom>;

        virtualinvoke $r4.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: void engineNextBytes(byte[])>(r1);

     label8:
        goto label5;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.lang.Throwable from label6 to label7 with label2;
        catch java.lang.Throwable from label7 to label8 with label2;
    }

    protected void engineNextBytes(byte[])
    {
        org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl r0;
        byte[] r1, $r18, $r19, $r20, $r22, $r25, $r40, $r43;
        int i0, i1, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i28, $i29, $i32, $i34, $i35, $i36, $i40, $i43, $i44, $i45, $i47, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i60, $i63, $i64, $i65, $i67, $i70, $i73, $i74, $i75, $i76, $i77, $i78, $i81, $i82, $i83, $i84, $i87, $i88, $i89, $i92, $i93, $i94, $i95;
        java.lang.Throwable r2, $r51;
        long l2, $l26, $l27, $l30, $l31, $l33, $l37, $l38, $l39, $l41, $l42, $l46, $l48, $l49, $l68, $l69, $l71, $l72, $l79, $l80, $l85, $l86, $l90, $l91;
        int[] r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r21, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r41, $r42, $r44, $r45, $r46, $r47, $r48, $r49;
        byte $b59, $b61, $b62, $b66;
        java.lang.NullPointerException $r50;

        r0 := @this: org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl;

        r1 := @parameter0: byte[];

        entermonitor r0;

        if r1 != null goto label03;

     label01:
        $r50 = new java.lang.NullPointerException;

        specialinvoke $r50.<java.lang.NullPointerException: void <init>(java.lang.String)>("bytes == null");

        throw $r50;

     label02:
        $r51 := @caughtexception;

        r2 = $r51;

        exitmonitor r0;

        throw r2;

     label03:
        $r4 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i12 = $r4[81];

        if $i12 != 0 goto label10;

     label04:
        i0 = 0;

     label05:
        $i14 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int state>;

        if $i14 != 0 goto label14;

        $r43 = staticinvoke <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] getRandomBytes(int)>(20);

        specialinvoke r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: void updateSeed(byte[])>($r43);

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex> = 20;

        $r48 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i93 = $r48[81];

        if $i93 != 0 goto label12;

     label06:
        i0 = 0;

     label07:
        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int state> = 2;

        i3 = lengthof r1;

     label08:
        if i3 != 0 goto label24;

     label09:
        exitmonitor r0;

        return;

     label10:
        $r5 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i13 = $r5[81];

        $i15 = 7 + $i13;

        i0 = $i15 >> 2;

     label11:
        goto label05;

     label12:
        $r49 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i94 = $r49[81];

        $i95 = 7 + $i94;

        i0 = $i95 >> 2;

     label13:
        goto label07;

     label14:
        $i17 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int state>;

        if $i17 != 1 goto label07;

        $r38 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $r39 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r38, 82, $r39, 0, 5);

     label15:
        i1 = i0 + 3;

     label16:
        if i1 >= 18 goto label19;

     label17:
        $r44 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $r44[i1] = 0;

     label18:
        i1 = i1 + 1;

        goto label16;

     label19:
        $l80 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long seedLength>;

        $l79 = $l80 << 3;

        l2 = 64L + $l79;

        $r45 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i88 = $r45[81];

        if $i88 >= 48 goto label22;

        $r41 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $l85 = l2 >>> 32;

        $i84 = (int) $l85;

        $r41[14] = $i84;

        $r42 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $l86 = -1L & l2;

        $i87 = (int) $l86;

        $r42[15] = $i87;

     label20:
        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex> = 20;

     label21:
        goto label07;

     label22:
        $r46 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        $l90 = l2 >>> 32;

        $i89 = (int) $l90;

        $r46[19] = $i89;

        $r47 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        $l91 = -1L & l2;

        $i92 = (int) $l91;

        $r47[20] = $i92;

     label23:
        goto label20;

     label24:
        $i16 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex>;

        $i21 = 20 - $i16;

        $i19 = lengthof r1;

        $i18 = $i19 - 0;

        if $i21 >= $i18 goto label38;

        $i81 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex>;

        i4 = 20 - $i81;

     label25:
        i5 = 0;

        if i4 <= 0 goto label28;

     label26:
        $r40 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] nextBytes>;

        $i74 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r40, $i74, r1, 0, i4);

        $i83 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex>;

        $i82 = i4 + $i83;

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex> = $i82;

     label27:
        i5 = 0 + i4;

     label28:
        $i22 = lengthof r1;

        if i5 >= $i22 goto label09;

        $r7 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i24 = $r7[81];

        i6 = 3 & $i24;

     label29:
        if i6 != 0 goto label40;

     label30:
        $r33 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $l71 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long counter>;

        $l72 = $l71 >>> 32;

        $i70 = (int) $l72;

        $r33[i0] = $i70;

        $r37 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i77 = i0 + 1;

        $l68 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long counter>;

        $l69 = -1L & $l68;

        $i78 = (int) $l69;

        $r37[$i77] = $i78;

        $r35 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i75 = i0 + 2;

        $r36 = <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] END_FLAGS>;

        $i76 = $r36[0];

        $r35[$i75] = $i76;

     label31:
        $r14 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i51 = $r14[81];

        if $i51 <= 48 goto label32;

        $r26 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        $r28 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i67 = $r28[16];

        $r26[5] = $i67;

        $r34 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        $r27 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i73 = $r27[17];

        $r34[6] = $i73;

     label32:
        $r15 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        staticinvoke <org.apache.harmony.security.provider.crypto.SHA1Impl: void computeHash(int[])>($r15);

        $r16 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i47 = $r16[81];

        if $i47 <= 48 goto label33;

        $r24 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $r21 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r24, 0, $r21, 21, 16);

        $r31 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        $r23 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r31, 5, $r23, 0, 16);

        $r32 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        staticinvoke <org.apache.harmony.security.provider.crypto.SHA1Impl: void computeHash(int[])>($r32);

        $r30 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        $r29 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r30, 21, $r29, 0, 16);

     label33:
        $l48 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long counter>;

        $l49 = 1L + $l48;

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long counter> = $l49;

     label34:
        i7 = 0;

        i8 = 0;

     label35:
        if i8 >= 5 goto label42;

     label36:
        $r17 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i53 = i8 + 82;

        i9 = $r17[$i53];

        $r20 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] nextBytes>;

        $i54 = i9 >>> 24;

        $b61 = (byte) $i54;

        $r20[i7] = $b61;

        $r19 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] nextBytes>;

        $i58 = i7 + 1;

        $i63 = i9 >>> 16;

        $b62 = (byte) $i63;

        $r19[$i58] = $b62;

        $r25 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] nextBytes>;

        $i64 = i7 + 2;

        $i60 = i9 >>> 8;

        $b59 = (byte) $i60;

        $r25[$i64] = $b59;

        $r22 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] nextBytes>;

        $i65 = i7 + 3;

        $b66 = (byte) i9;

        $r22[$i65] = $b66;

     label37:
        i7 = i7 + 4;

        i8 = i8 + 1;

        goto label35;

     label38:
        $i20 = lengthof r1;

        i4 = $i20 - 0;

     label39:
        goto label25;

     label40:
        r3 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i29 = r3[i0];

        $l27 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long counter>;

        $r6 = <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] RIGHT1>;

        $i23 = $r6[i6];

        $l30 = $l27 >>> $i23;

        $r8 = <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] MASK>;

        $i25 = $r8[i6];

        $l26 = (long) $i25;

        $l31 = $l30 & $l26;

        $i28 = (int) $l31;

        $i34 = $i29 | $i28;

        r3[i0] = $i34;

        $r11 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i35 = i0 + 1;

        $l33 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long counter>;

        $r9 = <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] RIGHT2>;

        $i32 = $r9[i6];

        $l38 = $l33 >>> $i32;

        $l37 = -1L & $l38;

        $i36 = (int) $l37;

        $r11[$i35] = $i36;

        $r13 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        $i44 = i0 + 2;

        $l39 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: long counter>;

        $r10 = <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] LEFT>;

        $i40 = $r10[i6];

        $l41 = $l39 << $i40;

        $r12 = <org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] END_FLAGS>;

        $i43 = $r12[i6];

        $l42 = (long) $i43;

        $l46 = $l41 | $l42;

        $i45 = (int) $l46;

        $r13[$i44] = $i45;

     label41:
        goto label31;

     label42:
        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex> = 0;

        $i50 = lengthof r1;

        $i55 = $i50 - i5;

        if 20 >= $i55 goto label50;

     label43:
        i10 = 20;

     label44:
        if i10 <= 0 goto label48;

     label45:
        $r18 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] nextBytes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, 0, r1, i5, i10);

     label46:
        i5 = i5 + i10;

     label47:
        $i57 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex>;

        $i52 = i10 + $i57;

        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int nextBIndex> = $i52;

     label48:
        $i56 = lengthof r1;

        if i5 < $i56 goto label29;

     label49:
        goto label09;

     label50:
        i11 = lengthof r1;

     label51:
        i10 = i11 - i5;

        goto label44;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label07 to label08 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
        catch java.lang.Throwable from label12 to label13 with label02;
        catch java.lang.Throwable from label14 to label15 with label02;
        catch java.lang.Throwable from label17 to label18 with label02;
        catch java.lang.Throwable from label19 to label20 with label02;
        catch java.lang.Throwable from label20 to label21 with label02;
        catch java.lang.Throwable from label22 to label23 with label02;
        catch java.lang.Throwable from label24 to label25 with label02;
        catch java.lang.Throwable from label26 to label27 with label02;
        catch java.lang.Throwable from label28 to label29 with label02;
        catch java.lang.Throwable from label30 to label31 with label02;
        catch java.lang.Throwable from label31 to label32 with label02;
        catch java.lang.Throwable from label32 to label33 with label02;
        catch java.lang.Throwable from label33 to label34 with label02;
        catch java.lang.Throwable from label36 to label37 with label02;
        catch java.lang.Throwable from label38 to label39 with label02;
        catch java.lang.Throwable from label40 to label41 with label02;
        catch java.lang.Throwable from label42 to label43 with label02;
        catch java.lang.Throwable from label45 to label46 with label02;
        catch java.lang.Throwable from label47 to label48 with label02;
        catch java.lang.Throwable from label48 to label49 with label02;
        catch java.lang.Throwable from label50 to label51 with label02;
    }

    protected void engineSetSeed(byte[])
    {
        org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl r0;
        byte[] r1;
        java.lang.Throwable r2, $r6;
        int $i0, $i1;
        int[] $r3, $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl;

        r1 := @parameter0: byte[];

        entermonitor r0;

        if r1 != null goto label3;

     label1:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("seed == null");

        throw $r5;

     label2:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

        throw r2;

     label3:
        $i0 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int state>;

        if $i0 != 2 goto label4;

        $r4 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] copies>;

        $r3 = r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int[] seed>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 82, 5);

     label4:
        r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: int state> = 1;

        $i1 = lengthof r1;

        if $i1 == 0 goto label5;

        specialinvoke r0.<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: void updateSeed(byte[])>(r1);

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }
}
