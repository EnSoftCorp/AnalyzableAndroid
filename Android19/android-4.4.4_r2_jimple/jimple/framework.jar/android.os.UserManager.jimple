public class android.os.UserManager extends java.lang.Object
{
    public static final java.lang.String DISALLOW_CONFIG_BLUETOOTH;
    public static final java.lang.String DISALLOW_CONFIG_CREDENTIALS;
    public static final java.lang.String DISALLOW_CONFIG_WIFI;
    public static final java.lang.String DISALLOW_INSTALL_APPS;
    public static final java.lang.String DISALLOW_INSTALL_UNKNOWN_SOURCES;
    public static final java.lang.String DISALLOW_MODIFY_ACCOUNTS;
    public static final java.lang.String DISALLOW_REMOVE_USER;
    public static final java.lang.String DISALLOW_SHARE_LOCATION;
    public static final java.lang.String DISALLOW_UNINSTALL_APPS;
    public static final java.lang.String DISALLOW_USB_FILE_TRANSFER;
    public static final int PIN_VERIFICATION_FAILED_INCORRECT;
    public static final int PIN_VERIFICATION_FAILED_NOT_SET;
    public static final int PIN_VERIFICATION_SUCCESS;
    private static java.lang.String TAG;
    private static android.os.UserManager sInstance;
    private final android.content.Context mContext;
    private final android.os.IUserManager mService;

    static void <clinit>()
    {
        <android.os.UserManager: int PIN_VERIFICATION_SUCCESS> = -1;

        <android.os.UserManager: int PIN_VERIFICATION_FAILED_NOT_SET> = -2;

        <android.os.UserManager: int PIN_VERIFICATION_FAILED_INCORRECT> = -3;

        <android.os.UserManager: java.lang.String DISALLOW_USB_FILE_TRANSFER> = "no_usb_file_transfer";

        <android.os.UserManager: java.lang.String DISALLOW_UNINSTALL_APPS> = "no_uninstall_apps";

        <android.os.UserManager: java.lang.String DISALLOW_SHARE_LOCATION> = "no_share_location";

        <android.os.UserManager: java.lang.String DISALLOW_REMOVE_USER> = "no_remove_user";

        <android.os.UserManager: java.lang.String DISALLOW_MODIFY_ACCOUNTS> = "no_modify_accounts";

        <android.os.UserManager: java.lang.String DISALLOW_INSTALL_UNKNOWN_SOURCES> = "no_install_unknown_sources";

        <android.os.UserManager: java.lang.String DISALLOW_INSTALL_APPS> = "no_install_apps";

        <android.os.UserManager: java.lang.String DISALLOW_CONFIG_WIFI> = "no_config_wifi";

        <android.os.UserManager: java.lang.String DISALLOW_CONFIG_CREDENTIALS> = "no_config_credentials";

        <android.os.UserManager: java.lang.String DISALLOW_CONFIG_BLUETOOTH> = "no_config_bluetooth";

        <android.os.UserManager: java.lang.String TAG> = "UserManager";

        <android.os.UserManager: android.os.UserManager sInstance> = null;

        return;
    }

    public void <init>(android.content.Context, android.os.IUserManager)
    {
        android.os.UserManager r0;
        android.content.Context r1;
        android.os.IUserManager r2;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.IUserManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.UserManager: android.os.IUserManager mService> = r2;

        r0.<android.os.UserManager: android.content.Context mContext> = r1;

        return;
    }

    public static android.os.UserManager get(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Throwable r1, $r6;
        android.os.UserManager r2, $r3, $r5;
        java.lang.Object $r4;

        r0 := @parameter0: android.content.Context;

        entermonitor class "android/os/UserManager";

     label1:
        $r3 = <android.os.UserManager: android.os.UserManager sInstance>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r5 = (android.os.UserManager) $r4;

        <android.os.UserManager: android.os.UserManager sInstance> = $r5;

     label2:
        r2 = <android.os.UserManager: android.os.UserManager sInstance>;

     label3:
        exitmonitor class "android/os/UserManager";

        return r2;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor class "android/os/UserManager";

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public static int getMaxSupportedUsers()
    {
        java.lang.String $r0;
        boolean $z0;
        android.content.res.Resources $r1;
        int $i0, $i1;

        $r0 = <android.os.Build: java.lang.String ID>;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("JVP");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getInteger(int)>(17694787);

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("fw.max_users", $i0);

        return $i1;
    }

    public static boolean supportsMultipleUsers()
    {
        int $i0;

        $i0 = staticinvoke <android.os.UserManager: int getMaxSupportedUsers()>();

        if $i0 <= 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int checkRestrictionsChallenge(java.lang.String)
    {
        android.os.UserManager r0;
        java.lang.String r1, $r5;
        int i0;
        android.os.IUserManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        i0 = interfaceinvoke $r3.<android.os.IUserManager: int checkRestrictionsChallenge(java.lang.String)>(r1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, "Could not check restrictions pin");

        return -3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.UserInfo createUser(java.lang.String, int)
    {
        android.os.UserManager r0;
        java.lang.String r1, $r6;
        int i0;
        android.os.RemoteException r2, $r5;
        android.content.pm.UserInfo r3;
        android.os.IUserManager $r4;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r4 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        r3 = interfaceinvoke $r4.<android.os.IUserManager: android.content.pm.UserInfo createUser(java.lang.String,int)>(r1, i0);

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Could not create a user", r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Bundle getApplicationRestrictions(java.lang.String)
    {
        android.os.UserManager r0;
        java.lang.String r1, $r7, $r10;
        android.os.Bundle r3;
        android.os.IUserManager $r4;
        android.os.RemoteException $r5;
        java.lang.StringBuilder $r6, $r8, $r9;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        r3 = interfaceinvoke $r4.<android.os.IUserManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>(r1);

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        $r7 = <android.os.UserManager: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get application restrictions for package ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, $r10);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Bundle getApplicationRestrictions(java.lang.String, android.os.UserHandle)
    {
        android.os.UserManager r0;
        java.lang.String r1, $r8, $r11;
        android.os.UserHandle r2;
        android.os.Bundle r4;
        android.os.IUserManager $r5;
        int $i0, $i1;
        android.os.RemoteException $r6;
        java.lang.StringBuilder $r7, $r9, $r10;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

     label1:
        $r5 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        r4 = interfaceinvoke $r5.<android.os.IUserManager: android.os.Bundle getApplicationRestrictionsForUser(java.lang.String,int)>(r1, $i0);

     label2:
        return r4;

     label3:
        $r6 := @caughtexception;

        $r8 = <android.os.UserManager: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get application restrictions for user ");

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r8, $r11);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getSerialNumberForUser(android.os.UserHandle)
    {
        android.os.UserManager r0;
        android.os.UserHandle r1;
        int $i0, $i1;
        long $l2;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: android.os.UserHandle;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $i1 = virtualinvoke r0.<android.os.UserManager: int getUserSerialNumber(int)>($i0);

        $l2 = (long) $i1;

        return $l2;
    }

    public int getUserCount()
    {
        android.os.UserManager r0;
        java.util.List r1;
        int $i0;

        r0 := @this: android.os.UserManager;

        r1 = virtualinvoke r0.<android.os.UserManager: java.util.List getUsers()>();

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        return $i0;

     label1:
        return 1;
    }

    public android.os.UserHandle getUserForSerialNumber(long)
    {
        android.os.UserManager r0;
        long l0;
        int i1, $i2;
        android.os.UserHandle $r1;

        r0 := @this: android.os.UserManager;

        l0 := @parameter0: long;

        $i2 = (int) l0;

        i1 = virtualinvoke r0.<android.os.UserManager: int getUserHandle(int)>($i2);

        if i1 < 0 goto label1;

        $r1 = new android.os.UserHandle;

        specialinvoke $r1.<android.os.UserHandle: void <init>(int)>(i1);

        return $r1;

     label1:
        return null;
    }

    public int getUserHandle()
    {
        android.os.UserManager r0;
        int $i0;

        r0 := @this: android.os.UserManager;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        return $i0;
    }

    public int getUserHandle(int)
    {
        android.os.UserManager r0;
        int i0, i1;
        android.os.IUserManager $r2;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.os.UserManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        i1 = interfaceinvoke $r2.<android.os.IUserManager: int getUserHandle(int)>(i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get userHandle for user ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, $r8);

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.graphics.Bitmap getUserIcon(int)
    {
        android.os.UserManager r0;
        int i0;
        android.os.RemoteException r1, $r4;
        android.graphics.Bitmap r2;
        android.os.IUserManager $r3;
        java.lang.String $r5;

        r0 := @this: android.os.UserManager;

        i0 := @parameter0: int;

     label1:
        $r3 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        r2 = interfaceinvoke $r3.<android.os.IUserManager: android.graphics.Bitmap getUserIcon(int)>(i0);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Could not get the user icon ", r1);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.UserInfo getUserInfo(int)
    {
        android.os.UserManager r0;
        int i0;
        android.os.RemoteException r1, $r4;
        android.content.pm.UserInfo r2;
        android.os.IUserManager $r3;
        java.lang.String $r5;

        r0 := @this: android.os.UserManager;

        i0 := @parameter0: int;

     label1:
        $r3 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        r2 = interfaceinvoke $r3.<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Could not get user info", r1);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getUserName()
    {
        android.os.UserManager r0;
        android.os.RemoteException r1, $r5;
        java.lang.String r2, $r6;
        android.os.IUserManager $r3;
        int $i0;
        android.content.pm.UserInfo $r4;

        r0 := @this: android.os.UserManager;

     label1:
        $r3 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        $i0 = virtualinvoke r0.<android.os.UserManager: int getUserHandle()>();

        $r4 = interfaceinvoke $r3.<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>($i0);

        r2 = $r4.<android.content.pm.UserInfo: java.lang.String name>;

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Could not get user name", r1);

        return "";

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Bundle getUserRestrictions()
    {
        android.os.UserManager r0;
        android.os.UserHandle $r1;
        android.os.Bundle $r2;

        r0 := @this: android.os.UserManager;

        $r1 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $r2 = virtualinvoke r0.<android.os.UserManager: android.os.Bundle getUserRestrictions(android.os.UserHandle)>($r1);

        return $r2;
    }

    public android.os.Bundle getUserRestrictions(android.os.UserHandle)
    {
        android.os.UserManager r0;
        android.os.UserHandle r1;
        android.os.RemoteException r2, $r5;
        android.os.Bundle r3, $r7;
        android.os.IUserManager $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: android.os.UserHandle;

     label1:
        $r4 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        r3 = interfaceinvoke $r4.<android.os.IUserManager: android.os.Bundle getUserRestrictions(int)>($i0);

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Could not get user restrictions", r2);

        $r7 = <android.os.Bundle: android.os.Bundle EMPTY>;

        return $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getUserSerialNumber(int)
    {
        android.os.UserManager r0;
        int i0, i1;
        android.os.IUserManager $r2;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.os.UserManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        i1 = interfaceinvoke $r2.<android.os.IUserManager: int getUserSerialNumber(int)>(i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get serial number for user ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, $r8);

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getUsers()
    {
        android.os.UserManager r0;
        android.os.RemoteException r1, $r4;
        java.util.List r2;
        android.os.IUserManager $r3;
        java.lang.String $r5;

        r0 := @this: android.os.UserManager;

     label1:
        $r3 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        r2 = interfaceinvoke $r3.<android.os.IUserManager: java.util.List getUsers(boolean)>(0);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Could not get user list", r1);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getUsers(boolean)
    {
        android.os.UserManager r0;
        boolean z0;
        android.os.RemoteException r1, $r4;
        java.util.List r2;
        android.os.IUserManager $r3;
        java.lang.String $r5;

        r0 := @this: android.os.UserManager;

        z0 := @parameter0: boolean;

     label1:
        $r3 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        r2 = interfaceinvoke $r3.<android.os.IUserManager: java.util.List getUsers(boolean)>(z0);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Could not get user list", r1);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasRestrictionsChallenge()
    {
        android.os.UserManager r0;
        boolean z0;
        android.os.IUserManager $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;

        r0 := @this: android.os.UserManager;

     label1:
        $r2 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        z0 = interfaceinvoke $r2.<android.os.IUserManager: boolean hasRestrictionsChallenge()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "Could not change restrictions pin");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasUserRestriction(java.lang.String)
    {
        android.os.UserManager r0;
        java.lang.String r1;
        android.os.UserHandle $r2;
        boolean $z0;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $z0 = virtualinvoke r0.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>(r1, $r2);

        return $z0;
    }

    public boolean hasUserRestriction(java.lang.String, android.os.UserHandle)
    {
        android.os.UserManager r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        android.os.Bundle $r3;
        boolean $z0;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = virtualinvoke r0.<android.os.UserManager: android.os.Bundle getUserRestrictions(android.os.UserHandle)>(r2);

        $z0 = virtualinvoke $r3.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(r1, 0);

        return $z0;
    }

    public boolean isGuestEnabled()
    {
        android.os.UserManager r0;
        boolean z0;
        android.os.IUserManager $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;

        r0 := @this: android.os.UserManager;

     label1:
        $r2 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        z0 = interfaceinvoke $r2.<android.os.IUserManager: boolean isGuestEnabled()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "Could not retrieve guest enabled state");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isLinkedUser()
    {
        android.os.UserManager r0;
        android.os.RemoteException r1, $r3;
        boolean z0;
        android.os.IUserManager $r2;
        java.lang.String $r4;

        r0 := @this: android.os.UserManager;

     label1:
        $r2 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        z0 = interfaceinvoke $r2.<android.os.IUserManager: boolean isRestricted()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Could not check if user is limited ", r1);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUserAGoat()
    {
        android.os.UserManager r0;

        r0 := @this: android.os.UserManager;

        return 0;
    }

    public boolean isUserRunning(android.os.UserHandle)
    {
        android.os.UserManager r0;
        android.os.UserHandle r1;
        boolean z0;
        android.app.IActivityManager $r3;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: android.os.UserHandle;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        z0 = interfaceinvoke $r3.<android.app.IActivityManager: boolean isUserRunning(int,boolean)>($i0, 0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUserRunningOrStopping(android.os.UserHandle)
    {
        android.os.UserManager r0;
        android.os.UserHandle r1;
        boolean z0;
        android.app.IActivityManager $r3;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: android.os.UserHandle;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        z0 = interfaceinvoke $r3.<android.app.IActivityManager: boolean isUserRunning(int,boolean)>($i0, 1);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeRestrictions()
    {
        android.os.UserManager r0;
        android.os.IUserManager $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;

        r0 := @this: android.os.UserManager;

     label1:
        $r2 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        interfaceinvoke $r2.<android.os.IUserManager: void removeRestrictions()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "Could not change restrictions pin");

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeUser(int)
    {
        android.os.UserManager r0;
        int i0;
        android.os.RemoteException r1, $r3;
        boolean z0;
        android.os.IUserManager $r2;
        java.lang.String $r4;

        r0 := @this: android.os.UserManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        z0 = interfaceinvoke $r2.<android.os.IUserManager: boolean removeUser(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Could not remove user ", r1);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setApplicationRestrictions(java.lang.String, android.os.Bundle, android.os.UserHandle)
    {
        android.os.UserManager r0;
        java.lang.String r1, $r8, $r11;
        android.os.Bundle r2;
        android.os.UserHandle r3;
        android.os.IUserManager $r5;
        int $i0, $i1;
        android.os.RemoteException $r6;
        java.lang.StringBuilder $r7, $r9, $r10;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: android.os.UserHandle;

     label1:
        $r5 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        $i0 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r5.<android.os.IUserManager: void setApplicationRestrictions(java.lang.String,android.os.Bundle,int)>(r1, r2, $i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r8 = <android.os.UserManager: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not set application restrictions for user ");

        $i1 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r8, $r11);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setGuestEnabled(boolean)
    {
        android.os.UserManager r0;
        boolean z0;
        android.os.IUserManager $r2;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.os.UserManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        interfaceinvoke $r2.<android.os.IUserManager: void setGuestEnabled(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not change guest account availability to ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, $r8);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setRestrictionsChallenge(java.lang.String)
    {
        android.os.UserManager r0;
        java.lang.String r1, $r5;
        boolean z0;
        android.os.IUserManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        z0 = interfaceinvoke $r3.<android.os.IUserManager: boolean setRestrictionsChallenge(java.lang.String)>(r1);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, "Could not change restrictions pin");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUserIcon(int, android.graphics.Bitmap)
    {
        android.os.UserManager r0;
        int i0;
        android.graphics.Bitmap r1;
        android.os.RemoteException r2, $r4;
        android.os.IUserManager $r3;
        java.lang.String $r5;

        r0 := @this: android.os.UserManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Bitmap;

     label1:
        $r3 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        interfaceinvoke $r3.<android.os.IUserManager: void setUserIcon(int,android.graphics.Bitmap)>(i0, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Could not set the user icon ", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUserName(int, java.lang.String)
    {
        android.os.UserManager r0;
        int i0;
        java.lang.String r1, $r5;
        android.os.RemoteException r2, $r4;
        android.os.IUserManager $r3;

        r0 := @this: android.os.UserManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        interfaceinvoke $r3.<android.os.IUserManager: void setUserName(int,java.lang.String)>(i0, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Could not set the user name ", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUserRestriction(java.lang.String, boolean)
    {
        android.os.UserManager r0;
        java.lang.String r1;
        boolean z0;
        android.os.Bundle r2;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<android.os.UserManager: android.os.Bundle getUserRestrictions()>();

        virtualinvoke r2.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>(r1, z0);

        virtualinvoke r0.<android.os.UserManager: void setUserRestrictions(android.os.Bundle)>(r2);

        return;
    }

    public void setUserRestriction(java.lang.String, boolean, android.os.UserHandle)
    {
        android.os.UserManager r0;
        java.lang.String r1;
        boolean z0;
        android.os.UserHandle r2;
        android.os.Bundle r3;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.UserHandle;

        r3 = virtualinvoke r0.<android.os.UserManager: android.os.Bundle getUserRestrictions(android.os.UserHandle)>(r2);

        virtualinvoke r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>(r1, z0);

        virtualinvoke r0.<android.os.UserManager: void setUserRestrictions(android.os.Bundle,android.os.UserHandle)>(r3, r2);

        return;
    }

    public void setUserRestrictions(android.os.Bundle)
    {
        android.os.UserManager r0;
        android.os.Bundle r1;
        android.os.UserHandle $r2;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: android.os.Bundle;

        $r2 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        virtualinvoke r0.<android.os.UserManager: void setUserRestrictions(android.os.Bundle,android.os.UserHandle)>(r1, $r2);

        return;
    }

    public void setUserRestrictions(android.os.Bundle, android.os.UserHandle)
    {
        android.os.UserManager r0;
        android.os.Bundle r1;
        android.os.UserHandle r2;
        android.os.RemoteException r3, $r5;
        android.os.IUserManager $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.os.UserManager;

        r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: android.os.UserHandle;

     label1:
        $r4 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r4.<android.os.IUserManager: void setUserRestrictions(android.os.Bundle,int)>(r1, $i0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = <android.os.UserManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Could not set user restrictions", r3);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void wipeUser(int)
    {
        android.os.UserManager r0;
        int i0;
        android.os.IUserManager $r2;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.os.UserManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.os.UserManager: android.os.IUserManager mService>;

        interfaceinvoke $r2.<android.os.IUserManager: void wipeUser(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r5 = <android.os.UserManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not wipe user ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, $r8);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
