public class android.net.EthernetDataTracker extends android.net.BaseNetworkStateTracker
{
    private static final java.lang.String NETWORKTYPE;
    private static final java.lang.String TAG;
    private static java.lang.String mIface;
    private static boolean mLinkUp;
    private static java.lang.String sIfaceMatch;
    private static android.net.EthernetDataTracker sInstance;
    private android.os.Handler mCsHandler;
    private java.util.concurrent.atomic.AtomicInteger mDefaultGatewayAddr;
    private java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet;
    private java.lang.String mHwAddr;
    private android.net.EthernetDataTracker$InterfaceObserver mInterfaceObserver;
    private android.os.INetworkManagementService mNMService;
    private java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet;
    private java.util.concurrent.atomic.AtomicBoolean mTeardownRequested;

    static void <clinit>()
    {
        <android.net.EthernetDataTracker: java.lang.String TAG> = "Ethernet";

        <android.net.EthernetDataTracker: java.lang.String NETWORKTYPE> = "ETHERNET";

        <android.net.EthernetDataTracker: java.lang.String sIfaceMatch> = "";

        <android.net.EthernetDataTracker: java.lang.String mIface> = "";

        return;
    }

    private void <init>()
    {
        android.net.EthernetDataTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1, $r2, $r4;
        java.util.concurrent.atomic.AtomicInteger $r3;
        android.net.NetworkInfo $r5;
        android.net.LinkProperties $r6;
        android.net.LinkCapabilities $r7;

        r0 := @this: android.net.EthernetDataTracker;

        specialinvoke r0.<android.net.BaseNetworkStateTracker: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicInteger mDefaultGatewayAddr> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet> = $r4;

        $r5 = new android.net.NetworkInfo;

        specialinvoke $r5.<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>(9, 0, "ETHERNET", "");

        r0.<android.net.EthernetDataTracker: android.net.NetworkInfo mNetworkInfo> = $r5;

        $r6 = new android.net.LinkProperties;

        specialinvoke $r6.<android.net.LinkProperties: void <init>()>();

        r0.<android.net.EthernetDataTracker: android.net.LinkProperties mLinkProperties> = $r6;

        $r7 = new android.net.LinkCapabilities;

        specialinvoke $r7.<android.net.LinkCapabilities: void <init>()>();

        r0.<android.net.EthernetDataTracker: android.net.LinkCapabilities mLinkCapabilities> = $r7;

        return;
    }

    static java.lang.String access$000()
    {
        java.lang.String $r0;

        $r0 = <android.net.EthernetDataTracker: java.lang.String mIface>;

        return $r0;
    }

    static boolean access$102(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <android.net.EthernetDataTracker: boolean mLinkUp> = z0;

        return z0;
    }

    static void access$200(android.net.EthernetDataTracker, java.lang.String)
    {
        android.net.EthernetDataTracker r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.EthernetDataTracker;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.net.EthernetDataTracker: void interfaceAdded(java.lang.String)>(r1);

        return;
    }

    static void access$300(android.net.EthernetDataTracker, java.lang.String)
    {
        android.net.EthernetDataTracker r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.EthernetDataTracker;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.net.EthernetDataTracker: void interfaceRemoved(java.lang.String)>(r1);

        return;
    }

    static java.lang.String access$400(android.net.EthernetDataTracker)
    {
        android.net.EthernetDataTracker r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.EthernetDataTracker;

        $r1 = r0.<android.net.EthernetDataTracker: java.lang.String mHwAddr>;

        return $r1;
    }

    static android.os.Handler access$500(android.net.EthernetDataTracker)
    {
        android.net.EthernetDataTracker r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.net.EthernetDataTracker;

        $r1 = r0.<android.net.EthernetDataTracker: android.os.Handler mCsHandler>;

        return $r1;
    }

    public static android.net.EthernetDataTracker getInstance()
    {
        java.lang.Throwable r0, $r4;
        android.net.EthernetDataTracker r1, $r2, $r3;

        entermonitor class "android/net/EthernetDataTracker";

     label1:
        $r2 = <android.net.EthernetDataTracker: android.net.EthernetDataTracker sInstance>;

        if $r2 != null goto label2;

        $r3 = new android.net.EthernetDataTracker;

        specialinvoke $r3.<android.net.EthernetDataTracker: void <init>()>();

        <android.net.EthernetDataTracker: android.net.EthernetDataTracker sInstance> = $r3;

     label2:
        r1 = <android.net.EthernetDataTracker: android.net.EthernetDataTracker sInstance>;

     label3:
        exitmonitor class "android/net/EthernetDataTracker";

        return r1;

     label4:
        $r4 := @caughtexception;

        r0 = $r4;

        exitmonitor class "android/net/EthernetDataTracker";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void interfaceAdded(java.lang.String)
    {
        android.net.EthernetDataTracker r0;
        java.lang.String r1, $r4, $r8, $r9, $r21;
        java.lang.Throwable r2, $r22;
        java.lang.Exception r3, $r15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r6, $r7, $r16, $r17, $r18, $r19, $r20;
        android.os.INetworkManagementService $r10;
        android.net.NetworkInfo $r11, $r12;
        android.os.Message $r13;
        android.os.Handler $r14;

        r0 := @this: android.net.EthernetDataTracker;

        r1 := @parameter0: java.lang.String;

        $r4 = <android.net.EthernetDataTracker: java.lang.String sIfaceMatch>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>($r4);

        if $z0 != 0 goto label01;

        return;

     label01:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Ethernet", $r8);

        entermonitor r0;

     label02:
        $r9 = <android.net.EthernetDataTracker: java.lang.String mIface>;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label07;

        exitmonitor r0;

     label03:
        return;

     label04:
        $r22 := @caughtexception;

        r2 = $r22;

     label05:
        exitmonitor r0;

     label06:
        throw r2;

     label07:
        <android.net.EthernetDataTracker: java.lang.String mIface> = r1;

        exitmonitor r0;

     label08:
        $r10 = r0.<android.net.EthernetDataTracker: android.os.INetworkManagementService mNMService>;

        interfaceinvoke $r10.<android.os.INetworkManagementService: void setInterfaceUp(java.lang.String)>(r1);

     label09:
        $r12 = r0.<android.net.EthernetDataTracker: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r12.<android.net.NetworkInfo: void setIsAvailable(boolean)>(1);

        $r14 = r0.<android.net.EthernetDataTracker: android.os.Handler mCsHandler>;

        $r11 = r0.<android.net.EthernetDataTracker: android.net.NetworkInfo mNetworkInfo>;

        $r13 = virtualinvoke $r14.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(458753, $r11);

        virtualinvoke $r13.<android.os.Message: void sendToTarget()>();

        return;

     label10:
        $r15 := @caughtexception;

        r3 = $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error upping interface ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Ethernet", $r21);

        goto label09;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    private void interfaceRemoved(java.lang.String)
    {
        android.net.EthernetDataTracker r0;
        java.lang.String r1, $r2, $r6;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: android.net.EthernetDataTracker;

        r1 := @parameter0: java.lang.String;

        $r2 = <android.net.EthernetDataTracker: java.lang.String mIface>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Ethernet", $r6);

        virtualinvoke r0.<android.net.EthernetDataTracker: void disconnect()>();

        <android.net.EthernetDataTracker: java.lang.String mIface> = "";

        return;
    }

    private void runDhcp()
    {
        android.net.EthernetDataTracker r0;
        java.lang.Thread $r1;
        android.net.EthernetDataTracker$1 $r2;

        r0 := @this: android.net.EthernetDataTracker;

        $r1 = new java.lang.Thread;

        $r2 = new android.net.EthernetDataTracker$1;

        specialinvoke $r2.<android.net.EthernetDataTracker$1: void <init>(android.net.EthernetDataTracker)>(r0);

        specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable)>($r2);

        virtualinvoke $r1.<java.lang.Thread: void start()>();

        return;
    }

    public java.lang.Object Clone() throws java.lang.CloneNotSupportedException
    {
        android.net.EthernetDataTracker r0;
        java.lang.CloneNotSupportedException $r1;

        r0 := @this: android.net.EthernetDataTracker;

        $r1 = new java.lang.CloneNotSupportedException;

        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>()>();

        throw $r1;
    }

    public void addStackedLink(android.net.LinkProperties)
    {
        android.net.EthernetDataTracker r0;
        android.net.LinkProperties r1, $r2;

        r0 := @this: android.net.EthernetDataTracker;

        r1 := @parameter0: android.net.LinkProperties;

        $r2 = r0.<android.net.EthernetDataTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r2.<android.net.LinkProperties: boolean addStackedLink(android.net.LinkProperties)>(r1);

        return;
    }

    public void captivePortalCheckComplete()
    {
        android.net.EthernetDataTracker r0;

        r0 := @this: android.net.EthernetDataTracker;

        return;
    }

    public void captivePortalCheckCompleted(boolean)
    {
        android.net.EthernetDataTracker r0;
        boolean z0;

        r0 := @this: android.net.EthernetDataTracker;

        z0 := @parameter0: boolean;

        return;
    }

    public void defaultRouteSet(boolean)
    {
        android.net.EthernetDataTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.EthernetDataTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    public void disconnect()
    {
        android.net.EthernetDataTracker r0;
        android.os.INetworkManagementService r1;
        java.lang.Exception r2, $r18;
        java.lang.String $r3, $r6, $r16, $r20;
        android.net.LinkProperties $r4;
        android.net.NetworkInfo $r5, $r8, $r9, $r12;
        android.net.NetworkInfo$DetailedState $r7;
        android.os.Handler $r10, $r13;
        android.os.Message $r11, $r15;
        android.os.IBinder $r14;
        java.lang.StringBuilder $r17, $r19, $r21;

        r0 := @this: android.net.EthernetDataTracker;

        $r3 = <android.net.EthernetDataTracker: java.lang.String mIface>;

        staticinvoke <android.net.NetworkUtils: boolean stopDhcp(java.lang.String)>($r3);

        $r4 = r0.<android.net.EthernetDataTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r4.<android.net.LinkProperties: void clear()>();

        $r5 = r0.<android.net.EthernetDataTracker: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r5.<android.net.NetworkInfo: void setIsAvailable(boolean)>(0);

        $r8 = r0.<android.net.EthernetDataTracker: android.net.NetworkInfo mNetworkInfo>;

        $r7 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        $r6 = r0.<android.net.EthernetDataTracker: java.lang.String mHwAddr>;

        virtualinvoke $r8.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r7, null, $r6);

        $r10 = r0.<android.net.EthernetDataTracker: android.os.Handler mCsHandler>;

        $r9 = r0.<android.net.EthernetDataTracker: android.net.NetworkInfo mNetworkInfo>;

        $r11 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(458753, $r9);

        virtualinvoke $r11.<android.os.Message: void sendToTarget()>();

        $r13 = r0.<android.net.EthernetDataTracker: android.os.Handler mCsHandler>;

        $r12 = r0.<android.net.EthernetDataTracker: android.net.NetworkInfo mNetworkInfo>;

        $r15 = virtualinvoke $r13.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(458752, $r12);

        virtualinvoke $r15.<android.os.Message: void sendToTarget()>();

        $r14 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("network_management");

        r1 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService asInterface(android.os.IBinder)>($r14);

     label1:
        $r16 = <android.net.EthernetDataTracker: java.lang.String mIface>;

        interfaceinvoke r1.<android.os.INetworkManagementService: void clearInterfaceAddresses(java.lang.String)>($r16);

     label2:
        return;

     label3:
        $r18 := @caughtexception;

        r2 = $r18;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to clear addresses or disable ipv6");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Ethernet", $r20);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int getDefaultGatewayAddr()
    {
        android.net.EthernetDataTracker r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: android.net.EthernetDataTracker;

        $r1 = r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicInteger mDefaultGatewayAddr>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public android.net.LinkCapabilities getLinkCapabilities()
    {
        android.net.EthernetDataTracker r0;
        android.net.LinkCapabilities $r1, $r2;

        r0 := @this: android.net.EthernetDataTracker;

        $r1 = new android.net.LinkCapabilities;

        $r2 = r0.<android.net.EthernetDataTracker: android.net.LinkCapabilities mLinkCapabilities>;

        specialinvoke $r1.<android.net.LinkCapabilities: void <init>(android.net.LinkCapabilities)>($r2);

        return $r1;
    }

    public android.net.LinkProperties getLinkProperties()
    {
        android.net.EthernetDataTracker r0;
        android.net.LinkProperties r1, $r3, $r4;
        java.lang.Throwable r2, $r5;

        r0 := @this: android.net.EthernetDataTracker;

        entermonitor r0;

     label1:
        $r3 = new android.net.LinkProperties;

        $r4 = r0.<android.net.EthernetDataTracker: android.net.LinkProperties mLinkProperties>;

        specialinvoke $r3.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r4);

        r1 = $r3;

     label2:
        exitmonitor r0;

        return r1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getNetworkInfo()
    {
        android.net.EthernetDataTracker r0;
        java.lang.Throwable r1, $r3;
        android.net.NetworkInfo r2;

        r0 := @this: android.net.EthernetDataTracker;

        entermonitor r0;

     label1:
        r2 = r0.<android.net.EthernetDataTracker: android.net.NetworkInfo mNetworkInfo>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getTcpBufferSizesPropName()
    {
        android.net.EthernetDataTracker r0;

        r0 := @this: android.net.EthernetDataTracker;

        return "net.tcp.buffersize.wifi";
    }

    public boolean isAvailable()
    {
        android.net.EthernetDataTracker r0;
        java.lang.Throwable r1, $r3;
        boolean z0;
        android.net.NetworkInfo $r2;

        r0 := @this: android.net.EthernetDataTracker;

        entermonitor r0;

     label1:
        $r2 = r0.<android.net.EthernetDataTracker: android.net.NetworkInfo mNetworkInfo>;

        z0 = virtualinvoke $r2.<android.net.NetworkInfo: boolean isAvailable()>();

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isDefaultRouteSet()
    {
        android.net.EthernetDataTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.net.EthernetDataTracker;

        $r1 = r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public boolean isPrivateDnsRouteSet()
    {
        android.net.EthernetDataTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.net.EthernetDataTracker;

        $r1 = r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public boolean isTeardownRequested()
    {
        android.net.EthernetDataTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.net.EthernetDataTracker;

        $r1 = r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public void privateDnsRouteSet(boolean)
    {
        android.net.EthernetDataTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.EthernetDataTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    public boolean reconnect()
    {
        android.net.EthernetDataTracker r0;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.EthernetDataTracker;

        $z0 = <android.net.EthernetDataTracker: boolean mLinkUp>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        specialinvoke r0.<android.net.EthernetDataTracker: void runDhcp()>();

     label1:
        $z1 = <android.net.EthernetDataTracker: boolean mLinkUp>;

        return $z1;
    }

    public void removeStackedLink(android.net.LinkProperties)
    {
        android.net.EthernetDataTracker r0;
        android.net.LinkProperties r1, $r2;

        r0 := @this: android.net.EthernetDataTracker;

        r1 := @parameter0: android.net.LinkProperties;

        $r2 = r0.<android.net.EthernetDataTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r2.<android.net.LinkProperties: boolean removeStackedLink(android.net.LinkProperties)>(r1);

        return;
    }

    public void setDependencyMet(boolean)
    {
        android.net.EthernetDataTracker r0;
        boolean z0;

        r0 := @this: android.net.EthernetDataTracker;

        z0 := @parameter0: boolean;

        return;
    }

    public void setPolicyDataEnable(boolean)
    {
        android.net.EthernetDataTracker r0;
        boolean z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.net.EthernetDataTracker;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ignoring setPolicyDataEnable(");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Ethernet", $r5);

        return;
    }

    public boolean setRadio(boolean)
    {
        android.net.EthernetDataTracker r0;
        boolean z0;

        r0 := @this: android.net.EthernetDataTracker;

        z0 := @parameter0: boolean;

        return 1;
    }

    public void setTeardownRequested(boolean)
    {
        android.net.EthernetDataTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.EthernetDataTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    public void setUserDataEnable(boolean)
    {
        android.net.EthernetDataTracker r0;
        boolean z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.net.EthernetDataTracker;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ignoring setUserDataEnable(");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Ethernet", $r5);

        return;
    }

    public void startMonitoring(android.content.Context, android.os.Handler)
    {
        android.net.EthernetDataTracker r0;
        android.content.Context r1;
        android.os.Handler r2;
        android.os.RemoteException r3, r4, $r23, $r29;
        java.lang.String[] r5;
        int i0, i1;
        java.lang.String r6, $r13, $r15, $r19, $r20, $r21, $r24, $r25, $r31, $r33;
        android.net.InterfaceConfiguration r7;
        android.os.IBinder $r8;
        android.os.INetworkManagementService $r9, $r12, $r16, $r17, $r18;
        android.content.res.Resources $r11;
        android.net.EthernetDataTracker$InterfaceObserver $r14, r35;
        boolean $z0, $z1;
        android.net.NetworkInfo $r22;
        java.lang.StringBuilder $r26, $r27, $r32, $r34, r36, r37;
        android.net.INetworkManagementEventObserver r38;

        r0 := @this: android.net.EthernetDataTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        r0.<android.net.EthernetDataTracker: android.content.Context mContext> = r1;

        r0.<android.net.EthernetDataTracker: android.os.Handler mCsHandler> = r2;

        $r8 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("network_management");

        $r9 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService asInterface(android.os.IBinder)>($r8);

        r0.<android.net.EthernetDataTracker: android.os.INetworkManagementService mNMService> = $r9;

        r35 = new android.net.EthernetDataTracker$InterfaceObserver;

        specialinvoke r35.<android.net.EthernetDataTracker$InterfaceObserver: void <init>(android.net.EthernetDataTracker)>(r0);

        r0.<android.net.EthernetDataTracker: android.net.EthernetDataTracker$InterfaceObserver mInterfaceObserver> = r35;

        $r11 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r13 = virtualinvoke $r11.<android.content.res.Resources: java.lang.String getString(int)>(17039384);

        <android.net.EthernetDataTracker: java.lang.String sIfaceMatch> = $r13;

     label01:
        $r12 = r0.<android.net.EthernetDataTracker: android.os.INetworkManagementService mNMService>;

        r5 = interfaceinvoke $r12.<android.os.INetworkManagementService: java.lang.String[] listInterfaces()>();

        i0 = lengthof r5;

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label08;

     label04:
        r6 = r5[i1];

        $r15 = <android.net.EthernetDataTracker: java.lang.String sIfaceMatch>;

        $z0 = virtualinvoke r6.<java.lang.String: boolean matches(java.lang.String)>($r15);

        if $z0 == 0 goto label10;

        <android.net.EthernetDataTracker: java.lang.String mIface> = r6;

        $r17 = r0.<android.net.EthernetDataTracker: android.os.INetworkManagementService mNMService>;

        interfaceinvoke $r17.<android.os.INetworkManagementService: void setInterfaceUp(java.lang.String)>(r6);

        $r18 = r0.<android.net.EthernetDataTracker: android.os.INetworkManagementService mNMService>;

        r7 = interfaceinvoke $r18.<android.os.INetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>(r6);

        $z1 = virtualinvoke r7.<android.net.InterfaceConfiguration: boolean hasFlag(java.lang.String)>("up");

        <android.net.EthernetDataTracker: boolean mLinkUp> = $z1;

     label05:
        if r7 == null goto label07;

     label06:
        $r21 = r0.<android.net.EthernetDataTracker: java.lang.String mHwAddr>;

        if $r21 != null goto label07;

        $r20 = virtualinvoke r7.<android.net.InterfaceConfiguration: java.lang.String getHardwareAddress()>();

        r0.<android.net.EthernetDataTracker: java.lang.String mHwAddr> = $r20;

        $r24 = r0.<android.net.EthernetDataTracker: java.lang.String mHwAddr>;

        if $r24 == null goto label07;

        $r22 = r0.<android.net.EthernetDataTracker: android.net.NetworkInfo mNetworkInfo>;

        $r25 = r0.<android.net.EthernetDataTracker: java.lang.String mHwAddr>;

        virtualinvoke $r22.<android.net.NetworkInfo: void setExtraInfo(java.lang.String)>($r25);

     label07:
        $r19 = <android.net.EthernetDataTracker: java.lang.String mIface>;

        staticinvoke <android.net.NetworkUtils: boolean stopDhcp(java.lang.String)>($r19);

        virtualinvoke r0.<android.net.EthernetDataTracker: boolean reconnect()>();

     label08:
        $r16 = r0.<android.net.EthernetDataTracker: android.os.INetworkManagementService mNMService>;

        $r14 = r0.<android.net.EthernetDataTracker: android.net.EthernetDataTracker$InterfaceObserver mInterfaceObserver>;

        r38 = (android.net.INetworkManagementEventObserver) $r14;

        interfaceinvoke $r16.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>(r38);

     label09:
        return;

     label10:
        i1 = i1 + 1;

        goto label03;

     label11:
        $r23 := @caughtexception;

        r3 = $r23;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get list of interfaces ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Ethernet", $r31);

        goto label08;

     label12:
        $r29 := @caughtexception;

        r4 = $r29;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not register InterfaceObserver ");

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Ethernet", $r33);

        return;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch android.os.RemoteException from label04 to label05 with label11;
        catch android.os.RemoteException from label06 to label07 with label11;
        catch android.os.RemoteException from label07 to label08 with label11;
        catch android.os.RemoteException from label08 to label09 with label12;
    }

    public int startUsingNetworkFeature(java.lang.String, int, int)
    {
        android.net.EthernetDataTracker r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.net.EthernetDataTracker;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return -1;
    }

    public int stopUsingNetworkFeature(java.lang.String, int, int)
    {
        android.net.EthernetDataTracker r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.net.EthernetDataTracker;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return -1;
    }

    public void supplyMessenger(android.os.Messenger)
    {
        android.net.EthernetDataTracker r0;
        android.os.Messenger r1;

        r0 := @this: android.net.EthernetDataTracker;

        r1 := @parameter0: android.os.Messenger;

        return;
    }

    public boolean teardown()
    {
        android.net.EthernetDataTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.lang.String $r2;

        r0 := @this: android.net.EthernetDataTracker;

        $r1 = r0.<android.net.EthernetDataTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r2 = <android.net.EthernetDataTracker: java.lang.String mIface>;

        staticinvoke <android.net.NetworkUtils: boolean stopDhcp(java.lang.String)>($r2);

        return 1;
    }
}
