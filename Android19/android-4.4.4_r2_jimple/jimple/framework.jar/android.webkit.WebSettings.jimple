public abstract class android.webkit.WebSettings extends java.lang.Object
{
    public static final int LOAD_CACHE_ELSE_NETWORK;
    public static final int LOAD_CACHE_ONLY;
    public static final int LOAD_DEFAULT;
    public static final int LOAD_NORMAL;
    public static final int LOAD_NO_CACHE;

    protected void <init>()
    {
        android.webkit.WebSettings r0;

        r0 := @this: android.webkit.WebSettings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getDefaultUserAgent(android.content.Context)
    {
        android.content.Context r0;
        android.webkit.WebViewFactoryProvider $r1;
        android.webkit.WebViewFactoryProvider$Statics $r2;
        java.lang.String $r3;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider getProvider()>();

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewFactoryProvider: android.webkit.WebViewFactoryProvider$Statics getStatics()>();

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewFactoryProvider$Statics: java.lang.String getDefaultUserAgent(android.content.Context)>(r0);

        return $r3;
    }

    public boolean enableSmoothTransition()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public boolean getAllowContentAccess()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public boolean getAllowFileAccess()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public abstract boolean getAllowFileAccessFromFileURLs();

    public abstract boolean getAllowUniversalAccessFromFileURLs();

    public boolean getBlockNetworkImage()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean getBlockNetworkLoads()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean getBuiltInZoomControls()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public int getCacheMode()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getCursiveFontFamily()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean getDatabaseEnabled()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public java.lang.String getDatabasePath()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public int getDefaultFixedFontSize()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public int getDefaultFontSize()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public java.lang.String getDefaultTextEncodingName()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public android.webkit.WebSettings$ZoomDensity getDefaultZoom()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public boolean getDisplayZoomControls()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public boolean getDomStorageEnabled()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public java.lang.String getFantasyFontFamily()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public java.lang.String getFixedFontFamily()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean getJavaScriptCanOpenWindowsAutomatically()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean getJavaScriptEnabled()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean getLightTouchEnabled()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public boolean getLoadWithOverviewMode()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public boolean getLoadsImagesAutomatically()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean getMediaPlaybackRequiresUserGesture()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public int getMinimumFontSize()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public int getMinimumLogicalFontSize()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean getNavDump()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public android.webkit.WebSettings$PluginState getPluginState()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean getPluginsEnabled()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public java.lang.String getPluginsPath()
    {
        android.webkit.WebSettings r0;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

        exitmonitor r0;

        return "";
    }

    public java.lang.String getSansSerifFontFamily()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean getSaveFormData()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public boolean getSavePassword()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getSerifFontFamily()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public java.lang.String getStandardFontFamily()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public android.webkit.WebSettings$TextSize getTextSize()
    {
        android.webkit.WebSettings r0;
        android.webkit.WebSettings$TextSize r1, r4;
        int i0, i1, i2, i3, i4, $i5, $i6;
        java.lang.Throwable r2, $r5;
        android.webkit.WebSettings$TextSize[] r3;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

        r1 = null;

        i0 = 2147483647;

     label01:
        i1 = virtualinvoke r0.<android.webkit.WebSettings: int getTextZoom()>();

        r3 = staticinvoke <android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize[] values()>();

        i2 = lengthof r3;

     label02:
        i3 = 0;

     label03:
        if i3 >= i2 goto label09;

     label04:
        r4 = r3[i3];

        $i5 = r4.<android.webkit.WebSettings$TextSize: int value>;

        $i6 = i1 - $i5;

        i4 = staticinvoke <java.lang.Math: int abs(int)>($i6);

     label05:
        if i4 != 0 goto label07;

     label06:
        exitmonitor r0;

        return r4;

     label07:
        if i4 >= i0 goto label08;

        i0 = i4;

        r1 = r4;

     label08:
        i3 = i3 + 1;

        goto label03;

     label09:
        if r1 == null goto label11;

     label10:
        r4 = r1;

        goto label06;

     label11:
        r1 = <android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize NORMAL>;

     label12:
        goto label10;

     label13:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public int getTextZoom()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean getUseDoubleTree()
    {
        android.webkit.WebSettings r0;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

        exitmonitor r0;

        return 0;
    }

    public boolean getUseWebViewBackgroundForOverscrollBackground()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public boolean getUseWideViewPort()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public int getUserAgent()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public java.lang.String getUserAgentString()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setAllowContentAccess(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setAllowFileAccess(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public abstract void setAllowFileAccessFromFileURLs(boolean);

    public abstract void setAllowUniversalAccessFromFileURLs(boolean);

    public void setAppCacheEnabled(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setAppCacheMaxSize(long)
    {
        android.webkit.WebSettings r0;
        long l0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        l0 := @parameter0: long;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setAppCachePath(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setBlockNetworkImage(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setBlockNetworkLoads(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setBuiltInZoomControls(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setCacheMode(int)
    {
        android.webkit.WebSettings r0;
        int i0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        i0 := @parameter0: int;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setCursiveFontFamily(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setDatabaseEnabled(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setDatabasePath(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setDefaultFixedFontSize(int)
    {
        android.webkit.WebSettings r0;
        int i0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setDefaultFontSize(int)
    {
        android.webkit.WebSettings r0;
        int i0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setDefaultTextEncodingName(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)
    {
        android.webkit.WebSettings r0;
        android.webkit.WebSettings$ZoomDensity r1;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: android.webkit.WebSettings$ZoomDensity;

        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;
    }

    public void setDisplayZoomControls(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setDomStorageEnabled(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setEnableSmoothTransition(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setFantasyFontFamily(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setFixedFontFamily(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setGeolocationDatabasePath(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setGeolocationEnabled(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setJavaScriptCanOpenWindowsAutomatically(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setJavaScriptEnabled(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)
    {
        android.webkit.WebSettings r0;
        android.webkit.WebSettings$LayoutAlgorithm r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: android.webkit.WebSettings$LayoutAlgorithm;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setLightTouchEnabled(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setLoadWithOverviewMode(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setLoadsImagesAutomatically(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setMediaPlaybackRequiresUserGesture(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setMinimumFontSize(int)
    {
        android.webkit.WebSettings r0;
        int i0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setMinimumLogicalFontSize(int)
    {
        android.webkit.WebSettings r0;
        int i0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setNavDump(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setNeedInitialFocus(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setPluginState(android.webkit.WebSettings$PluginState)
    {
        android.webkit.WebSettings r0;
        android.webkit.WebSettings$PluginState r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: android.webkit.WebSettings$PluginState;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setPluginsEnabled(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setPluginsPath(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

        exitmonitor r0;

        return;
    }

    public void setRenderPriority(android.webkit.WebSettings$RenderPriority)
    {
        android.webkit.WebSettings r0;
        android.webkit.WebSettings$RenderPriority r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: android.webkit.WebSettings$RenderPriority;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setSansSerifFontFamily(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setSaveFormData(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setSavePassword(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setSerifFontFamily(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setStandardFontFamily(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setSupportMultipleWindows(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setSupportZoom(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setTextSize(android.webkit.WebSettings$TextSize)
    {
        android.webkit.WebSettings r0;
        android.webkit.WebSettings$TextSize r1;
        java.lang.Throwable r2, $r3;
        int $i0;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: android.webkit.WebSettings$TextSize;

        entermonitor r0;

     label1:
        $i0 = r1.<android.webkit.WebSettings$TextSize: int value>;

        virtualinvoke r0.<android.webkit.WebSettings: void setTextZoom(int)>($i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setTextZoom(int)
    {
        android.webkit.WebSettings r0;
        int i0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setUseDoubleTree(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

        exitmonitor r0;

        return;
    }

    public void setUseWebViewBackgroundForOverscrollBackground(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setUseWideViewPort(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setUserAgent(int)
    {
        android.webkit.WebSettings r0;
        int i0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setUserAgentString(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean supportMultipleWindows()
    {
        android.webkit.WebSettings r0;
        java.lang.Throwable r1, $r3;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

     label1:
        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public boolean supportZoom()
    {
        android.webkit.WebSettings r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.WebSettings;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public static void <clinit>()
    {
        <android.webkit.WebSettings: int LOAD_NO_CACHE> = 2;

        <android.webkit.WebSettings: int LOAD_NORMAL> = 0;

        <android.webkit.WebSettings: int LOAD_DEFAULT> = -1;

        <android.webkit.WebSettings: int LOAD_CACHE_ONLY> = 3;

        <android.webkit.WebSettings: int LOAD_CACHE_ELSE_NETWORK> = 1;

        return;
    }
}
