public abstract class android.content.ContentResolver extends java.lang.Object
{
    public static final android.content.Intent ACTION_SYNC_CONN_STATUS_CHANGED;
    public static final java.lang.String CONTENT_SERVICE_NAME;
    public static final java.lang.String CURSOR_DIR_BASE_TYPE;
    public static final java.lang.String CURSOR_ITEM_BASE_TYPE;
    private static final boolean ENABLE_CONTENT_SAMPLE;
    public static final java.lang.String SCHEME_ANDROID_RESOURCE;
    public static final java.lang.String SCHEME_CONTENT;
    public static final java.lang.String SCHEME_FILE;
    private static final int SLOW_THRESHOLD_MILLIS;
    public static final int SYNC_ERROR_AUTHENTICATION;
    public static final int SYNC_ERROR_CONFLICT;
    public static final int SYNC_ERROR_INTERNAL;
    public static final int SYNC_ERROR_IO;
    private static final java.lang.String[] SYNC_ERROR_NAMES;
    public static final int SYNC_ERROR_PARSE;
    public static final int SYNC_ERROR_SYNC_ALREADY_IN_PROGRESS;
    public static final int SYNC_ERROR_TOO_MANY_DELETIONS;
    public static final int SYNC_ERROR_TOO_MANY_RETRIES;
    public static final java.lang.String SYNC_EXTRAS_ACCOUNT;
    public static final java.lang.String SYNC_EXTRAS_DISALLOW_METERED;
    public static final java.lang.String SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS;
    public static final java.lang.String SYNC_EXTRAS_DO_NOT_RETRY;
    public static final java.lang.String SYNC_EXTRAS_EXPECTED_DOWNLOAD;
    public static final java.lang.String SYNC_EXTRAS_EXPECTED_UPLOAD;
    public static final java.lang.String SYNC_EXTRAS_EXPEDITED;
    public static final java.lang.String SYNC_EXTRAS_FORCE;
    public static final java.lang.String SYNC_EXTRAS_IGNORE_BACKOFF;
    public static final java.lang.String SYNC_EXTRAS_IGNORE_SETTINGS;
    public static final java.lang.String SYNC_EXTRAS_INITIALIZE;
    public static final java.lang.String SYNC_EXTRAS_MANUAL;
    public static final java.lang.String SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS;
    public static final java.lang.String SYNC_EXTRAS_PRIORITY;
    public static final java.lang.String SYNC_EXTRAS_UPLOAD;
    public static final int SYNC_OBSERVER_TYPE_ACTIVE;
    public static final int SYNC_OBSERVER_TYPE_ALL;
    public static final int SYNC_OBSERVER_TYPE_PENDING;
    public static final int SYNC_OBSERVER_TYPE_SETTINGS;
    public static final int SYNC_OBSERVER_TYPE_STATUS;
    private static final java.lang.String TAG;
    private static android.content.IContentService sContentService;
    private final android.content.Context mContext;
    final java.lang.String mPackageName;
    private final java.util.Random mRandom;

    static void <clinit>()
    {
        android.content.Intent $r0;
        java.lang.String[] $r1;

        <android.content.ContentResolver: java.lang.String TAG> = "ContentResolver";

        <android.content.ContentResolver: int SYNC_OBSERVER_TYPE_STATUS> = 8;

        <android.content.ContentResolver: int SYNC_OBSERVER_TYPE_SETTINGS> = 1;

        <android.content.ContentResolver: int SYNC_OBSERVER_TYPE_PENDING> = 2;

        <android.content.ContentResolver: int SYNC_OBSERVER_TYPE_ALL> = 2147483647;

        <android.content.ContentResolver: int SYNC_OBSERVER_TYPE_ACTIVE> = 4;

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_UPLOAD> = "upload";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_PRIORITY> = "sync_priority";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS> = "deletions_override";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_MANUAL> = "force";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_INITIALIZE> = "initialize";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_IGNORE_SETTINGS> = "ignore_settings";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_IGNORE_BACKOFF> = "ignore_backoff";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_FORCE> = "force";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_EXPEDITED> = "expedited";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_EXPECTED_UPLOAD> = "expected_upload";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_EXPECTED_DOWNLOAD> = "expected_download";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_DO_NOT_RETRY> = "do_not_retry";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS> = "discard_deletions";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_DISALLOW_METERED> = "disallow_metered";

        <android.content.ContentResolver: java.lang.String SYNC_EXTRAS_ACCOUNT> = "account";

        <android.content.ContentResolver: int SYNC_ERROR_TOO_MANY_RETRIES> = 7;

        <android.content.ContentResolver: int SYNC_ERROR_TOO_MANY_DELETIONS> = 6;

        <android.content.ContentResolver: int SYNC_ERROR_SYNC_ALREADY_IN_PROGRESS> = 1;

        <android.content.ContentResolver: int SYNC_ERROR_PARSE> = 4;

        <android.content.ContentResolver: int SYNC_ERROR_IO> = 3;

        <android.content.ContentResolver: int SYNC_ERROR_INTERNAL> = 8;

        <android.content.ContentResolver: int SYNC_ERROR_CONFLICT> = 5;

        <android.content.ContentResolver: int SYNC_ERROR_AUTHENTICATION> = 2;

        <android.content.ContentResolver: int SLOW_THRESHOLD_MILLIS> = 500;

        <android.content.ContentResolver: java.lang.String SCHEME_FILE> = "file";

        <android.content.ContentResolver: java.lang.String SCHEME_CONTENT> = "content";

        <android.content.ContentResolver: java.lang.String SCHEME_ANDROID_RESOURCE> = "android.resource";

        <android.content.ContentResolver: boolean ENABLE_CONTENT_SAMPLE> = 0;

        <android.content.ContentResolver: java.lang.String CURSOR_ITEM_BASE_TYPE> = "vnd.android.cursor.item";

        <android.content.ContentResolver: java.lang.String CURSOR_DIR_BASE_TYPE> = "vnd.android.cursor.dir";

        <android.content.ContentResolver: java.lang.String CONTENT_SERVICE_NAME> = "content";

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("com.android.sync.SYNC_CONN_STATUS_CHANGED");

        <android.content.ContentResolver: android.content.Intent ACTION_SYNC_CONN_STATUS_CHANGED> = $r0;

        $r1 = newarray (java.lang.String)[8];

        $r1[0] = "already-in-progress";

        $r1[1] = "authentication-error";

        $r1[2] = "io-error";

        $r1[3] = "parse-error";

        $r1[4] = "conflict";

        $r1[5] = "too-many-deletions";

        $r1[6] = "too-many-retries";

        $r1[7] = "internal-error";

        <android.content.ContentResolver: java.lang.String[] SYNC_ERROR_NAMES> = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.content.ContentResolver r0;
        android.content.Context r1, $r3;
        java.util.Random $r2;
        java.lang.String $r4;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>()>();

        r0.<android.content.ContentResolver: java.util.Random mRandom> = $r2;

        if r1 == null goto label2;

     label1:
        r0.<android.content.ContentResolver: android.content.Context mContext> = r1;

        $r3 = r0.<android.content.ContentResolver: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        r0.<android.content.ContentResolver: java.lang.String mPackageName> = $r4;

        return;

     label2:
        r1 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

        goto label1;
    }

    public static void addPeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle, long)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        android.os.Bundle r2;
        long l0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.IllegalArgumentException $r4;
        android.content.IContentService $r5;
        android.os.RemoteException $r6;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        l0 := @parameter3: long;

        staticinvoke <android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>(r2);

        $z0 = virtualinvoke r2.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("force", 0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("do_not_retry", 0);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r2.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("ignore_backoff", 0);

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r2.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("ignore_settings", 0);

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r2.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("initialize", 0);

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke r2.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("force", 0);

        if $z5 != 0 goto label1;

        $z6 = virtualinvoke r2.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("expedited", 0);

        if $z6 == 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("illegal extras were set");

        throw $r4;

     label2:
        $r5 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        interfaceinvoke $r5.<android.content.IContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>(r0, r1, r2, l0);

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public static java.lang.Object addStatusChangeListener(int, android.content.SyncStatusObserver)
    {
        int i0;
        android.content.SyncStatusObserver r0;
        android.content.ContentResolver$1 r1, $r3;
        android.os.RemoteException r2, $r6;
        android.content.IContentService $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.RuntimeException $r7;

        i0 := @parameter0: int;

        r0 := @parameter1: android.content.SyncStatusObserver;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("you passed in a null callback");

        throw $r5;

     label1:
        $r3 = new android.content.ContentResolver$1;

        specialinvoke $r3.<android.content.ContentResolver$1: void <init>(android.content.SyncStatusObserver)>(r0);

        r1 = $r3;

        $r4 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        interfaceinvoke $r4.<android.content.IContentService: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>(i0, r1);

     label2:
        return r1;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r2);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void cancelSync(android.accounts.Account, java.lang.String)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        android.content.IContentService $r3;
        android.os.RemoteException $r4;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        interfaceinvoke $r3.<android.content.IContentService: void cancelSync(android.accounts.Account,java.lang.String)>(r0, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static android.content.IContentService getContentService()
    {
        android.content.IContentService $r0, $r2, $r3, $r4;
        android.os.IBinder $r1;

        $r0 = <android.content.ContentResolver: android.content.IContentService sContentService>;

        if $r0 == null goto label1;

        $r4 = <android.content.ContentResolver: android.content.IContentService sContentService>;

        return $r4;

     label1:
        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("content");

        $r2 = staticinvoke <android.content.IContentService$Stub: android.content.IContentService asInterface(android.os.IBinder)>($r1);

        <android.content.ContentResolver: android.content.IContentService sContentService> = $r2;

        $r3 = <android.content.ContentResolver: android.content.IContentService sContentService>;

        return $r3;
    }

    public static android.content.SyncInfo getCurrentSync()
    {
        android.os.RemoteException r0, $r5;
        java.util.List r1;
        android.content.SyncInfo r2;
        android.content.IContentService $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.RuntimeException $r6;

     label1:
        $r3 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        r1 = interfaceinvoke $r3.<android.content.IContentService: java.util.List getCurrentSyncs()>();

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        return null;

     label3:
        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (android.content.SyncInfo) $r4;

     label4:
        return r2;

     label5:
        $r5 := @caughtexception;

        r0 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r0);

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public static java.util.List getCurrentSyncs()
    {
        android.os.RemoteException r0, $r3;
        java.util.List r1;
        android.content.IContentService $r2;
        java.lang.RuntimeException $r4;

     label1:
        $r2 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        r1 = interfaceinvoke $r2.<android.content.IContentService: java.util.List getCurrentSyncs()>();

     label2:
        return r1;

     label3:
        $r3 := @caughtexception;

        r0 = $r3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r0);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static int getIsSyncable(android.accounts.Account, java.lang.String)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        int i0;
        android.content.IContentService $r3;
        java.lang.RuntimeException $r5;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        i0 = interfaceinvoke $r3.<android.content.IContentService: int getIsSyncable(android.accounts.Account,java.lang.String)>(r0, r1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r2);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static boolean getMasterSyncAutomatically()
    {
        android.os.RemoteException r0, $r2;
        boolean z0;
        android.content.IContentService $r1;
        java.lang.RuntimeException $r3;

     label1:
        $r1 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        z0 = interfaceinvoke $r1.<android.content.IContentService: boolean getMasterSyncAutomatically()>();

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        r0 = $r2;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r0);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static java.util.List getPeriodicSyncs(android.accounts.Account, java.lang.String)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r5;
        java.util.List r3;
        android.content.IContentService $r4;
        java.lang.RuntimeException $r6;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

     label1:
        $r4 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        r3 = interfaceinvoke $r4.<android.content.IContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>(r0, r1);

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r2);

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static android.content.SyncAdapterType[] getSyncAdapterTypes()
    {
        android.os.RemoteException r0, $r3;
        android.content.SyncAdapterType[] r1;
        android.content.IContentService $r2;
        java.lang.RuntimeException $r4;

     label1:
        $r2 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        r1 = interfaceinvoke $r2.<android.content.IContentService: android.content.SyncAdapterType[] getSyncAdapterTypes()>();

     label2:
        return r1;

     label3:
        $r3 := @caughtexception;

        r0 = $r3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r0);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static boolean getSyncAutomatically(android.accounts.Account, java.lang.String)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        boolean z0;
        android.content.IContentService $r3;
        java.lang.RuntimeException $r5;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        z0 = interfaceinvoke $r3.<android.content.IContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>(r0, r1);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r2);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static android.content.SyncStatusInfo getSyncStatus(android.accounts.Account, java.lang.String)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r5;
        android.content.SyncStatusInfo r3;
        android.content.IContentService $r4;
        java.lang.RuntimeException $r6;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

     label1:
        $r4 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        r3 = interfaceinvoke $r4.<android.content.IContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>(r0, r1);

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r2);

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static boolean isSyncActive(android.accounts.Account, java.lang.String)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        boolean z0;
        android.content.IContentService $r3;
        java.lang.RuntimeException $r5;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        z0 = interfaceinvoke $r3.<android.content.IContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)>(r0, r1);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r2);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static boolean isSyncPending(android.accounts.Account, java.lang.String)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        boolean z0;
        android.content.IContentService $r3;
        java.lang.RuntimeException $r5;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        z0 = interfaceinvoke $r3.<android.content.IContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)>(r0, r1);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r2);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void maybeLogQueryToEventLog(long, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String)
    {
        android.content.ContentResolver r0;
        long l0;
        android.net.Uri r1;
        java.lang.String[] r2;
        java.lang.String r3, r4;

        r0 := @this: android.content.ContentResolver;

        l0 := @parameter0: long;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        return;
    }

    private void maybeLogUpdateToEventLog(long, android.net.Uri, java.lang.String, java.lang.String)
    {
        android.content.ContentResolver r0;
        long l0;
        android.net.Uri r1;
        java.lang.String r2, r3;

        r0 := @this: android.content.ContentResolver;

        l0 := @parameter0: long;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        return;
    }

    public static void removePeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        android.os.Bundle r2;
        android.os.RemoteException r3, $r5;
        android.content.IContentService $r4;
        java.lang.RuntimeException $r6;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        staticinvoke <android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>(r2);

     label1:
        $r4 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        interfaceinvoke $r4.<android.content.IContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>(r0, r1, r2);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("the ContentService should always be reachable", r3);

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void removeStatusChangeListener(java.lang.Object)
    {
        java.lang.Object r0;
        android.content.IContentService $r2;
        android.content.ISyncStatusObserver$Stub $r3;
        java.lang.IllegalArgumentException $r4;
        android.os.RemoteException $r5;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("you passed in a null handle");

        throw $r4;

     label1:
        $r2 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        $r3 = (android.content.ISyncStatusObserver$Stub) r0;

        interfaceinvoke $r2.<android.content.IContentService: void removeStatusChangeListener(android.content.ISyncStatusObserver)>($r3);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void requestSync(android.accounts.Account, java.lang.String, android.os.Bundle)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        android.os.Bundle r2;
        android.content.SyncRequest$Builder $r3, $r4, $r5, $r6;
        android.content.SyncRequest $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        if r2 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify extras.");

        throw $r8;

     label1:
        $r3 = new android.content.SyncRequest$Builder;

        specialinvoke $r3.<android.content.SyncRequest$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setSyncAdapter(android.accounts.Account,java.lang.String)>(r0, r1);

        $r5 = virtualinvoke $r4.<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExtras(android.os.Bundle)>(r2);

        $r6 = virtualinvoke $r5.<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncOnce()>();

        $r7 = virtualinvoke $r6.<android.content.SyncRequest$Builder: android.content.SyncRequest build()>();

        staticinvoke <android.content.ContentResolver: void requestSync(android.content.SyncRequest)>($r7);

        return;
    }

    public static void requestSync(android.content.SyncRequest)
    {
        android.content.SyncRequest r0;
        android.content.IContentService $r2;
        android.os.RemoteException $r3;

        r0 := @parameter0: android.content.SyncRequest;

     label1:
        $r2 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        interfaceinvoke $r2.<android.content.IContentService: void sync(android.content.SyncRequest)>(r0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private int samplePercentForDuration(long)
    {
        android.content.ContentResolver r0;
        long l0, $l2, $l3;
        byte $b1;
        int $i4, $i5;

        r0 := @this: android.content.ContentResolver;

        l0 := @parameter0: long;

        $b1 = l0 cmp 500L;

        if $b1 < 0 goto label1;

        return 100;

     label1:
        $l2 = 100L * l0;

        $l3 = $l2 / 500L;

        $i4 = (int) $l3;

        $i5 = 1 + $i4;

        return $i5;
    }

    public static void setIsSyncable(android.accounts.Account, java.lang.String, int)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        int i0;
        android.content.IContentService $r3;
        android.os.RemoteException $r4;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        $r3 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        interfaceinvoke $r3.<android.content.IContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)>(r0, r1, i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void setMasterSyncAutomatically(boolean)
    {
        boolean z0;
        android.content.IContentService $r1;
        android.os.RemoteException $r2;

        z0 := @parameter0: boolean;

     label1:
        $r1 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        interfaceinvoke $r1.<android.content.IContentService: void setMasterSyncAutomatically(boolean)>(z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void setSyncAutomatically(android.accounts.Account, java.lang.String, boolean)
    {
        android.accounts.Account r0;
        java.lang.String r1;
        boolean z0;
        android.content.IContentService $r3;
        android.os.RemoteException $r4;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

     label1:
        $r3 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        interfaceinvoke $r3.<android.content.IContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>(r0, r1, z0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static int syncErrorStringToInt(java.lang.String)
    {
        java.lang.String r0, $r4, $r8;
        int i0, i1, i2, $i3;
        java.lang.String[] $r2, $r3;
        boolean $z0;
        java.lang.NumberFormatException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;

        r0 := @parameter0: java.lang.String;

        i0 = 0;

        $r2 = <android.content.ContentResolver: java.lang.String[] SYNC_ERROR_NAMES>;

        i1 = lengthof $r2;

     label1:
        if i0 >= i1 goto label3;

        $r3 = <android.content.ContentResolver: java.lang.String[] SYNC_ERROR_NAMES>;

        $r4 = $r3[i0];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $i3 = i0 + 1;

        return $i3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        if r0 == null goto label7;

     label4:
        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

     label5:
        return i2;

     label6:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error parsing sync error: ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ContentResolver", $r8);

     label7:
        return 0;

        catch java.lang.NumberFormatException from label4 to label5 with label6;
    }

    public static java.lang.String syncErrorToString(int)
    {
        int i0, $i1, $i2;
        java.lang.String $r0, $r3;
        java.lang.String[] $r1, $r2;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        $r1 = <android.content.ContentResolver: java.lang.String[] SYNC_ERROR_NAMES>;

        $i1 = lengthof $r1;

        if i0 <= $i1 goto label2;

     label1:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        return $r0;

     label2:
        $r2 = <android.content.ContentResolver: java.lang.String[] SYNC_ERROR_NAMES>;

        $i2 = i0 - 1;

        $r3 = $r2[$i2];

        return $r3;
    }

    public static void validateSyncExtrasBundle(android.os.Bundle)
    {
        android.os.Bundle r0;
        java.lang.RuntimeException r1, $r17;
        java.lang.IllegalArgumentException r2, $r9, $r14, $r16;
        java.util.Iterator r3;
        java.lang.Object r4, $r6;
        java.util.Set $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String $r7, $r13, $r15;
        java.lang.StringBuilder $r8, $r11, $r12;
        java.lang.Class $r10;

        r0 := @parameter0: android.os.Bundle;

     label1:
        $r5 = virtualinvoke r0.<android.os.Bundle: java.util.Set keySet()>();

        r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        r4 = virtualinvoke r0.<android.os.Bundle: java.lang.Object get(java.lang.String)>($r7);

     label3:
        if r4 == null goto label2;

     label4:
        $z1 = r4 instanceof java.lang.Long;

        if $z1 != 0 goto label2;

        $z2 = r4 instanceof java.lang.Integer;

        if $z2 != 0 goto label2;

        $z3 = r4 instanceof java.lang.Boolean;

        if $z3 != 0 goto label2;

        $z4 = r4 instanceof java.lang.Float;

        if $z4 != 0 goto label2;

        $z5 = r4 instanceof java.lang.Double;

        if $z5 != 0 goto label2;

        $z7 = r4 instanceof java.lang.String;

        if $z7 != 0 goto label2;

        $z6 = r4 instanceof android.accounts.Account;

        if $z6 != 0 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected value type: ");

        $r10 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label5:
        $r14 := @caughtexception;

        r2 = $r14;

        throw r2;

     label6:
        $r17 := @caughtexception;

        r1 = $r17;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("error unparceling Bundle", r1);

        throw $r16;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.IllegalArgumentException from label2 to label3 with label5;
        catch java.lang.RuntimeException from label2 to label3 with label6;
        catch java.lang.IllegalArgumentException from label4 to label5 with label5;
        catch java.lang.RuntimeException from label4 to label5 with label6;
    }

    public final android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.content.IContentProvider r2;
        android.content.ContentProviderClient $r3;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

        if r2 == null goto label1;

        $r3 = new android.content.ContentProviderClient;

        specialinvoke $r3.<android.content.ContentProviderClient: void <init>(android.content.ContentResolver,android.content.IContentProvider,boolean)>(r0, r2, 1);

        return $r3;

     label1:
        return null;
    }

    public final android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        android.content.IContentProvider r2;
        android.content.ContentProviderClient $r3;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r3 = new android.content.ContentProviderClient;

        specialinvoke $r3.<android.content.ContentProviderClient: void <init>(android.content.ContentResolver,android.content.IContentProvider,boolean)>(r0, r2, 1);

        return $r3;

     label1:
        return null;
    }

    protected android.content.IContentProvider acquireExistingProvider(android.content.Context, java.lang.String)
    {
        android.content.ContentResolver r0;
        android.content.Context r1;
        java.lang.String r2;
        android.content.IContentProvider $r3;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.content.Context,java.lang.String)>(r1, r2);

        return $r3;
    }

    public final android.content.IContentProvider acquireExistingProvider(android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2, $r3, $r4;
        boolean $z0;
        android.content.Context $r5;
        android.content.IContentProvider $r6;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        $r3 = "content";

        $r4 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        r2 = virtualinvoke r1.<android.net.Uri: java.lang.String getAuthority()>();

        if r2 == null goto label1;

        $r5 = r0.<android.content.ContentResolver: android.content.Context mContext>;

        $r6 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)>($r5, r2);

        return $r6;
    }

    protected abstract android.content.IContentProvider acquireProvider(android.content.Context, java.lang.String);

    public final android.content.IContentProvider acquireProvider(android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2, $r3, $r4;
        boolean $z0;
        android.content.Context $r5;
        android.content.IContentProvider $r6;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        $r3 = "content";

        $r4 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        r2 = virtualinvoke r1.<android.net.Uri: java.lang.String getAuthority()>();

        if r2 == null goto label1;

        $r5 = r0.<android.content.ContentResolver: android.content.Context mContext>;

        $r6 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.content.Context,java.lang.String)>($r5, r2);

        return $r6;
    }

    public final android.content.IContentProvider acquireProvider(java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        android.content.Context $r2;
        android.content.IContentProvider $r3;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<android.content.ContentResolver: android.content.Context mContext>;

        $r3 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.content.Context,java.lang.String)>($r2, r1);

        return $r3;
    }

    public final android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.content.IContentProvider r2;
        android.content.ContentProviderClient $r3;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(android.net.Uri)>(r1);

        if r2 == null goto label1;

        $r3 = new android.content.ContentProviderClient;

        specialinvoke $r3.<android.content.ContentProviderClient: void <init>(android.content.ContentResolver,android.content.IContentProvider,boolean)>(r0, r2, 0);

        return $r3;

     label1:
        return null;
    }

    public final android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        android.content.IContentProvider r2;
        android.content.ContentProviderClient $r3;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r3 = new android.content.ContentProviderClient;

        specialinvoke $r3.<android.content.ContentProviderClient: void <init>(android.content.ContentResolver,android.content.IContentProvider,boolean)>(r0, r2, 0);

        return $r3;

     label1:
        return null;
    }

    protected abstract android.content.IContentProvider acquireUnstableProvider(android.content.Context, java.lang.String);

    public final android.content.IContentProvider acquireUnstableProvider(android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String $r2, $r3, $r4, $r6;
        boolean $z0;
        android.content.Context $r5;
        android.content.IContentProvider $r7;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        $r2 = "content";

        $r3 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = virtualinvoke r1.<android.net.Uri: java.lang.String getAuthority()>();

        if $r4 == null goto label1;

        $r5 = r0.<android.content.ContentResolver: android.content.Context mContext>;

        $r6 = virtualinvoke r1.<android.net.Uri: java.lang.String getAuthority()>();

        $r7 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(android.content.Context,java.lang.String)>($r5, $r6);

        return $r7;
    }

    public final android.content.IContentProvider acquireUnstableProvider(java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        android.content.Context $r2;
        android.content.IContentProvider $r3;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<android.content.ContentResolver: android.content.Context mContext>;

        $r3 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(android.content.Context,java.lang.String)>($r2, r1);

        return $r3;
    }

    public void appNotRespondingViaProvider(android.content.IContentProvider)
    {
        android.content.ContentResolver r0;
        android.content.IContentProvider r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.content.IContentProvider;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("appNotRespondingViaProvider");

        throw $r2;
    }

    public android.content.ContentProviderResult[] applyBatch(java.lang.String, java.util.ArrayList) throws android.os.RemoteException, android.content.OperationApplicationException
    {
        android.content.ContentResolver r0;
        java.lang.String r1, $r10;
        java.util.ArrayList r2;
        android.content.ContentProviderClient r3;
        java.lang.Throwable r4, $r11;
        android.content.ContentProviderResult[] r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.ArrayList;

        r3 = virtualinvoke r0.<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)>(r1);

        if r3 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown authority ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        r5 = virtualinvoke r3.<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>(r2);

     label2:
        virtualinvoke r3.<android.content.ContentProviderClient: boolean release()>();

        return r5;

     label3:
        $r11 := @caughtexception;

        r4 = $r11;

        virtualinvoke r3.<android.content.ContentProviderClient: boolean release()>();

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final int bulkInsert(android.net.Uri, android.content.ContentValues[])
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.content.ContentValues[] r2;
        android.content.IContentProvider r3;
        java.lang.Throwable r4, $r13;
        long l0, $l2, $l3;
        int i1;
        java.lang.String $r6, $r12;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.IllegalArgumentException $r8;
        android.os.RemoteException $r11;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues[];

        r3 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

        if r3 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URL ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r6 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        i1 = interfaceinvoke r3.<android.content.IContentProvider: int bulkInsert(java.lang.String,android.net.Uri,android.content.ContentValues[])>($r6, r1, r2);

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l3 = $l2 - l0;

        specialinvoke r0.<android.content.ContentResolver: void maybeLogUpdateToEventLog(long,android.net.Uri,java.lang.String,java.lang.String)>($l3, r1, "bulkinsert", null);

     label2:
        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r3);

        return i1;

     label3:
        $r11 := @caughtexception;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r3);

        return 0;

     label4:
        $r13 := @caughtexception;

        r4 = $r13;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r3);

        throw r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public final android.os.Bundle call(android.net.Uri, java.lang.String, java.lang.String, android.os.Bundle)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2, r3, $r9, $r13;
        android.os.Bundle r4, r8;
        android.content.IContentProvider r5;
        java.lang.Throwable r6, $r17;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r14;
        java.lang.NullPointerException $r15, $r16;
        android.os.RemoteException $r18;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Bundle;

        if r1 != null goto label1;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("uri == null");

        throw $r15;

     label1:
        if r2 != null goto label2;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("method == null");

        throw $r16;

     label2:
        r5 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

        if r5 != null goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URI ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r10;

     label3:
        $r9 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        r8 = interfaceinvoke r5.<android.content.IContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r9, r2, r3, r4);

     label4:
        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r5);

        return r8;

     label5:
        $r18 := @caughtexception;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r5);

        return null;

     label6:
        $r17 := @caughtexception;

        r6 = $r17;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r5);

        throw r6;

        catch android.os.RemoteException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public void cancelSync(android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        if r1 == null goto label2;

        r2 = virtualinvoke r1.<android.net.Uri: java.lang.String getAuthority()>();

     label1:
        staticinvoke <android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)>(null, r2);

        return;

     label2:
        r2 = null;

        goto label1;
    }

    public final android.net.Uri canonicalize(android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1, r5;
        android.content.IContentProvider r2;
        java.lang.Throwable r3, $r8;
        java.lang.String $r6;
        android.os.RemoteException $r7;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

        if r2 != null goto label1;

        return null;

     label1:
        $r6 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        r5 = interfaceinvoke r2.<android.content.IContentProvider: android.net.Uri canonicalize(java.lang.String,android.net.Uri)>($r6, r1);

     label2:
        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r2);

        return r5;

     label3:
        $r7 := @caughtexception;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r2);

        return null;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r2);

        throw r3;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public final int delete(android.net.Uri, java.lang.String, java.lang.String[])
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2, $r7, $r11;
        java.lang.String[] r3;
        android.content.IContentProvider r4;
        java.lang.Throwable r5, $r14;
        long l0, $l2, $l3;
        int i1;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        android.os.RemoteException $r13;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        r4 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

        if r4 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URL ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r7 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        i1 = interfaceinvoke r4.<android.content.IContentProvider: int delete(java.lang.String,android.net.Uri,java.lang.String,java.lang.String[])>($r7, r1, r2, r3);

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = $l3 - l0;

        specialinvoke r0.<android.content.ContentResolver: void maybeLogUpdateToEventLog(long,android.net.Uri,java.lang.String,java.lang.String)>($l2, r1, "delete", r2);

     label2:
        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r4);

        return i1;

     label3:
        $r13 := @caughtexception;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r4);

        return -1;

     label4:
        $r14 := @caughtexception;

        r5 = $r14;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r4);

        throw r5;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public java.util.List getOutgoingPersistedUriPermissions()
    {
        android.content.ContentResolver r0;
        android.os.RemoteException r1, $r6;
        java.util.List r2;
        android.app.IActivityManager $r3;
        java.lang.String $r4;
        android.content.pm.ParceledListSlice $r5;
        java.lang.RuntimeException $r7;

        r0 := @this: android.content.ContentResolver;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r4 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        $r5 = interfaceinvoke $r3.<android.app.IActivityManager: android.content.pm.ParceledListSlice getPersistedUriPermissions(java.lang.String,boolean)>($r4, 0);

        r2 = virtualinvoke $r5.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Activity manager has died", r1);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getPackageName()
    {
        android.content.ContentResolver r0;
        java.lang.String $r1;

        r0 := @this: android.content.ContentResolver;

        $r1 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        return $r1;
    }

    public java.util.List getPersistedUriPermissions()
    {
        android.content.ContentResolver r0;
        android.os.RemoteException r1, $r6;
        java.util.List r2;
        android.app.IActivityManager $r3;
        java.lang.String $r4;
        android.content.pm.ParceledListSlice $r5;
        java.lang.RuntimeException $r7;

        r0 := @this: android.content.ContentResolver;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r4 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        $r5 = interfaceinvoke $r3.<android.app.IActivityManager: android.content.pm.ParceledListSlice getPersistedUriPermissions(java.lang.String,boolean)>($r4, 1);

        r2 = virtualinvoke $r5.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Activity manager has died", r1);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ContentResolver$OpenResourceIdResult getResourceId(android.net.Uri) throws java.io.FileNotFoundException
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2, $r15, $r17, $r18, $r24, $r26, $r33, $r34, $r45, $r46;
        android.content.res.Resources r4;
        java.util.List r5;
        int i0, i1, i2;
        android.content.ContentResolver$OpenResourceIdResult r6, $r20;
        boolean $z0;
        android.content.Context $r8;
        android.content.pm.PackageManager $r9;
        java.lang.StringBuilder $r10, $r12, $r13, $r21, $r22, $r25, $r27, $r28, $r31, $r32, $r36, $r37, $r38, $r39, $r40, $r42, $r47, $r48;
        java.io.FileNotFoundException $r11, $r19, $r29, $r30, $r41, $r43;
        java.lang.Object $r14, $r16, $r23;
        java.lang.NumberFormatException $r35;
        android.content.pm.PackageManager$NameNotFoundException $r44;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 = virtualinvoke r1.<android.net.Uri: java.lang.String getAuthority()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label01;

        $r30 = new java.io.FileNotFoundException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No authority: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r34 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r34);

        throw $r30;

     label01:
        $r8 = r0.<android.content.ContentResolver: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r4 = virtualinvoke $r9.<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>(r2);

     label02:
        r5 = virtualinvoke r1.<android.net.Uri: java.util.List getPathSegments()>();

        if r5 != null goto label04;

        $r29 = new java.io.FileNotFoundException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No path: ");

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r33);

        throw $r29;

     label03:
        $r44 := @caughtexception;

        $r43 = new java.io.FileNotFoundException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No package found for authority: ");

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r46);

        throw $r43;

     label04:
        i0 = interfaceinvoke r5.<java.util.List: int size()>();

        if i0 != 1 goto label09;

     label05:
        $r23 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        $r24 = (java.lang.String) $r23;

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24);

     label06:
        i1 = i2;

     label07:
        if i1 != 0 goto label11;

        $r19 = new java.io.FileNotFoundException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No resource found for: ");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r26);

        throw $r19;

     label08:
        $r35 := @caughtexception;

        $r41 = new java.io.FileNotFoundException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Single path segment is not a resource ID: ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r45 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r45);

        throw $r41;

     label09:
        if i0 != 2 goto label10;

        $r14 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(1);

        $r17 = (java.lang.String) $r14;

        $r16 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        $r18 = (java.lang.String) $r16;

        i1 = virtualinvoke r4.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>($r17, $r18, r2);

        goto label07;

     label10:
        $r11 = new java.io.FileNotFoundException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("More than two path segments: ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label11:
        $r20 = new android.content.ContentResolver$OpenResourceIdResult;

        specialinvoke $r20.<android.content.ContentResolver$OpenResourceIdResult: void <init>(android.content.ContentResolver)>(r0);

        r6 = $r20;

        r6.<android.content.ContentResolver$OpenResourceIdResult: android.content.res.Resources r> = r4;

        r6.<android.content.ContentResolver$OpenResourceIdResult: int id> = i1;

        return r6;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label05 to label06 with label08;
    }

    public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.content.IContentProvider r3;
        java.lang.Throwable r4, $r7;
        java.lang.String[] r6;
        android.os.RemoteException $r8;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

        if r3 != null goto label1;

        return null;

     label1:
        r6 = interfaceinvoke r3.<android.content.IContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>(r1, r2);

     label2:
        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r3);

        return r6;

     label3:
        $r8 := @caughtexception;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r3);

        return null;

     label4:
        $r7 := @caughtexception;

        r4 = $r7;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r3);

        throw r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public final java.lang.String getType(android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.content.IContentProvider r2;
        boolean z0;
        java.lang.String r3, r6, r10, $r11, $r12, $r24, $r26, $r32, $r34;
        java.lang.Exception r4, r8, $r16, $r25;
        java.lang.Throwable r7, $r15;
        android.app.IActivityManager $r13;
        int $i0;
        android.os.RemoteException $r14, $r17;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r22, $r23, $r27, $r28, $r29, $r30, $r31, $r33;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireExistingProvider(android.net.Uri)>(r1);

        if r2 == null goto label09;

     label01:
        r10 = interfaceinvoke r2.<android.content.IContentProvider: java.lang.String getType(android.net.Uri)>(r1);

     label02:
        r3 = r10;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r2);

     label03:
        return r3;

     label04:
        $r14 := @caughtexception;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r2);

        return null;

     label05:
        $r16 := @caughtexception;

        r8 = $r16;

     label06:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get type for: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r24 = virtualinvoke r8.<java.lang.Exception: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ContentResolver", $r26);

     label07:
        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r2);

        return null;

     label08:
        $r15 := @caughtexception;

        r7 = $r15;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r2);

        throw r7;

     label09:
        $r12 = "content";

        $r11 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        r3 = null;

        if z0 == 0 goto label03;

     label10:
        $r13 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r6 = interfaceinvoke $r13.<android.app.IActivityManager: java.lang.String getProviderMimeType(android.net.Uri,int)>(r1, $i0);

     label11:
        return r6;

     label12:
        $r17 := @caughtexception;

        return null;

     label13:
        $r25 := @caughtexception;

        r4 = $r25;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get type for: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r32 = virtualinvoke r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ContentResolver", $r34);

        return null;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Exception from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch java.lang.Exception from label10 to label11 with label13;
    }

    public final android.net.Uri insert(android.net.Uri, android.content.ContentValues)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1, r6;
        android.content.ContentValues r2;
        android.content.IContentProvider r3;
        java.lang.Throwable r4, $r14;
        long l0, $l1, $l2;
        java.lang.String $r7, $r13;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.IllegalArgumentException $r9;
        android.os.RemoteException $r12;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        r3 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

        if r3 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URL ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r7 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        r6 = interfaceinvoke r3.<android.content.IContentProvider: android.net.Uri insert(java.lang.String,android.net.Uri,android.content.ContentValues)>($r7, r1, r2);

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = $l1 - l0;

        specialinvoke r0.<android.content.ContentResolver: void maybeLogUpdateToEventLog(long,android.net.Uri,java.lang.String,java.lang.String)>($l2, r1, "insert", null);

     label2:
        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r3);

        return r6;

     label3:
        $r12 := @caughtexception;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r3);

        return null;

     label4:
        $r14 := @caughtexception;

        r4 = $r14;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r3);

        throw r4;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void notifyChange(android.net.Uri, android.database.ContentObserver)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.database.ContentObserver r2;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.database.ContentObserver;

        virtualinvoke r0.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>(r1, r2, 1);

        return;
    }

    public void notifyChange(android.net.Uri, android.database.ContentObserver, boolean)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.database.ContentObserver r2;
        boolean z0;
        int $i0;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.database.ContentObserver;

        z0 := @parameter2: boolean;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke r0.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean,int)>(r1, r2, z0, $i0);

        return;
    }

    public void notifyChange(android.net.Uri, android.database.ContentObserver, boolean, int)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.database.ContentObserver r2;
        boolean z0, z1, $z2;
        int i0;
        android.content.IContentService r4;
        android.database.IContentObserver r5, r6;
        android.os.RemoteException $r7;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.database.ContentObserver;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

     label01:
        r4 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

     label02:
        if r2 != null goto label08;

        r6 = null;

     label03:
        if r2 == null goto label10;

     label04:
        $z2 = virtualinvoke r2.<android.database.ContentObserver: boolean deliverSelfNotifications()>();

        if $z2 == 0 goto label10;

     label05:
        z1 = 1;

     label06:
        interfaceinvoke r4.<android.content.IContentService: void notifyChange(android.net.Uri,android.database.IContentObserver,boolean,boolean,int)>(r1, r6, z1, z0, i0);

     label07:
        return;

     label08:
        r5 = virtualinvoke r2.<android.database.ContentObserver: android.database.IContentObserver getContentObserver()>();

     label09:
        r6 = r5;

        goto label03;

     label10:
        z1 = 0;

        goto label06;

     label11:
        $r7 := @caughtexception;

        return;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch android.os.RemoteException from label04 to label05 with label11;
        catch android.os.RemoteException from label06 to label07 with label11;
        catch android.os.RemoteException from label08 to label09 with label11;
    }

    public final android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.content.res.AssetFileDescriptor $r3;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>(r1, r2, null);

        return $r3;
    }

    public final android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2, r4, $r20, $r21, $r22, $r23, $r28, $r32, $r36, $r44, $r45, $r50, $r53, $r62;
        android.os.CancellationSignal r3;
        android.content.IContentProvider r5, r6;
        android.os.ICancellationSignal r7;
        java.io.FileNotFoundException r8, $r27, $r38, $r46, $r52, $r55, $r57;
        java.lang.Throwable r9, $r47;
        android.content.res.AssetFileDescriptor r12, r13, r15, r16, r19, $r24, $r34, $r35;
        android.content.ContentResolver$ParcelFileDescriptorInner r14, $r25;
        android.content.ContentResolver$OpenResourceIdResult r18;
        boolean $z0, $z1, $z2, $z8;
        long $l0, $l1;
        android.os.ParcelFileDescriptor $r26, $r37;
        java.lang.StringBuilder $r29, $r30, $r31, $r39, $r40, $r41, $r48, $r49, $r51, $r54, $r59, $r60, $r61, $r63, $r64;
        java.io.File $r33;
        int $i2, $i3;
        android.content.res.Resources $r42;
        android.os.DeadObjectException $r43;
        android.os.RemoteException $r56;
        android.content.res.Resources$NotFoundException $r58;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.CancellationSignal;

        r4 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $r20 = "android.resource";

        $z0 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label06;

        $r36 = "r";

        $z8 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z8 != 0 goto label01;

        $r38 = new java.io.FileNotFoundException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t write resources: ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r45 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r45);

        throw $r38;

     label01:
        r18 = virtualinvoke r0.<android.content.ContentResolver: android.content.ContentResolver$OpenResourceIdResult getResourceId(android.net.Uri)>(r1);

     label02:
        $r42 = r18.<android.content.ContentResolver$OpenResourceIdResult: android.content.res.Resources r>;

        $i3 = r18.<android.content.ContentResolver$OpenResourceIdResult: int id>;

        r19 = virtualinvoke $r42.<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>($i3);

     label03:
        r15 = r19;

     label04:
        return r15;

     label05:
        $r58 := @caughtexception;

        $r57 = new java.io.FileNotFoundException;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource does not exist: ");

        $r54 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r57.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r53);

        throw $r57;

     label06:
        $r22 = "file";

        $z2 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label07;

        $r34 = new android.content.res.AssetFileDescriptor;

        $r33 = new java.io.File;

        $r32 = virtualinvoke r1.<android.net.Uri: java.lang.String getPath()>();

        specialinvoke $r33.<java.io.File: void <init>(java.lang.String)>($r32);

        $i2 = staticinvoke <android.os.ParcelFileDescriptor: int parseMode(java.lang.String)>(r2);

        $r37 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>($r33, $i2);

        specialinvoke $r34.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>($r37, 0L, -1L);

        return $r34;

     label07:
        $r21 = "r";

        $z1 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label08;

        $r35 = virtualinvoke r0.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>(r1, "*/*", null, r3);

        return $r35;

     label08:
        r5 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(android.net.Uri)>(r1);

        if r5 != null goto label09;

        $r27 = new java.io.FileNotFoundException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No content provider: ");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label09:
        r6 = null;

        r7 = null;

        if r3 == null goto label11;

     label10:
        virtualinvoke r3.<android.os.CancellationSignal: void throwIfCanceled()>();

        r7 = interfaceinvoke r5.<android.content.IContentProvider: android.os.ICancellationSignal createCancellationSignal()>();

        virtualinvoke r3.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(r7);

     label11:
        $r23 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        r16 = interfaceinvoke r5.<android.content.IContentProvider: android.content.res.AssetFileDescriptor openAssetFile(java.lang.String,android.net.Uri,java.lang.String,android.os.ICancellationSignal)>($r23, r1, r2, r7);

     label12:
        r13 = r16;

        r6 = null;

        if r13 != null goto label29;

        if r3 == null goto label13;

        virtualinvoke r3.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label13:
        goto label14;

     label14:
        r15 = null;

        if r5 == null goto label04;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r5);

        return null;

     label15:
        $r43 := @caughtexception;

     label16:
        virtualinvoke r0.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>(r5);

        r6 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

     label17:
        if r6 != null goto label25;

     label18:
        $r52 = new java.io.FileNotFoundException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No content provider: ");

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r50);

        throw $r52;

     label19:
        $r56 := @caughtexception;

     label20:
        $r55 = new java.io.FileNotFoundException;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed opening content provider: ");

        $r61 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r62);

        throw $r55;

     label21:
        $r47 := @caughtexception;

        r9 = $r47;

        if r3 == null goto label22;

        virtualinvoke r3.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label22:
        if r6 == null goto label23;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r6);

     label23:
        if r5 == null goto label24;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r5);

     label24:
        throw r9;

     label25:
        $r44 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        r12 = interfaceinvoke r6.<android.content.IContentProvider: android.content.res.AssetFileDescriptor openAssetFile(java.lang.String,android.net.Uri,java.lang.String,android.os.ICancellationSignal)>($r44, r1, r2, r7);

     label26:
        r13 = r12;

        if r13 != null goto label29;

        if r3 == null goto label27;

        virtualinvoke r3.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label27:
        if r6 == null goto label28;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r6);

     label28:
        r15 = null;

        if r5 == null goto label04;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r5);

        return null;

     label29:
        if r6 != null goto label31;

     label30:
        r6 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

     label31:
        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r5);

        $r25 = new android.content.ContentResolver$ParcelFileDescriptorInner;

        $r26 = virtualinvoke r13.<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>();

        specialinvoke $r25.<android.content.ContentResolver$ParcelFileDescriptorInner: void <init>(android.content.ContentResolver,android.os.ParcelFileDescriptor,android.content.IContentProvider)>(r0, $r26, r6);

        r14 = $r25;

     label32:
        r6 = null;

     label33:
        $r24 = new android.content.res.AssetFileDescriptor;

        $l0 = virtualinvoke r13.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l1 = virtualinvoke r13.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        specialinvoke $r24.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>(r14, $l0, $l1);

        r15 = $r24;

     label34:
        if r3 == null goto label35;

        virtualinvoke r3.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label35:
        goto label36;

     label36:
        if r5 == null goto label04;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r5);

        return r15;

     label37:
        $r46 := @caughtexception;

        r8 = $r46;

        throw r8;

        catch android.content.res.Resources$NotFoundException from label02 to label03 with label05;
        catch android.os.RemoteException from label10 to label11 with label19;
        catch java.io.FileNotFoundException from label10 to label11 with label37;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch android.os.DeadObjectException from label11 to label12 with label15;
        catch android.os.RemoteException from label11 to label12 with label19;
        catch java.io.FileNotFoundException from label11 to label12 with label37;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch android.os.RemoteException from label16 to label17 with label19;
        catch java.io.FileNotFoundException from label16 to label17 with label37;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch android.os.RemoteException from label18 to label19 with label19;
        catch java.io.FileNotFoundException from label18 to label19 with label37;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch android.os.RemoteException from label25 to label26 with label19;
        catch java.io.FileNotFoundException from label25 to label26 with label37;
        catch java.lang.Throwable from label25 to label26 with label21;
        catch android.os.RemoteException from label30 to label31 with label19;
        catch java.io.FileNotFoundException from label30 to label31 with label37;
        catch java.lang.Throwable from label30 to label31 with label21;
        catch android.os.RemoteException from label31 to label32 with label19;
        catch java.io.FileNotFoundException from label31 to label32 with label37;
        catch java.lang.Throwable from label31 to label32 with label21;
        catch android.os.RemoteException from label33 to label34 with label19;
        catch java.io.FileNotFoundException from label33 to label34 with label37;
        catch java.lang.Throwable from label33 to label34 with label21;
    }

    public final android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.ParcelFileDescriptor $r3;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>(r1, r2, null);

        return $r3;
    }

    public final android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.CancellationSignal r3;
        android.content.res.AssetFileDescriptor r4;
        long $l0;
        byte $b1;
        java.io.FileNotFoundException $r6;
        android.os.ParcelFileDescriptor $r7;
        java.io.IOException $r8;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.CancellationSignal;

        r4 = virtualinvoke r0.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>(r1, r2, r3);

        if r4 != null goto label1;

        return null;

     label1:
        $l0 = virtualinvoke r4.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $r7 = virtualinvoke r4.<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>();

        return $r7;

     label2:
        virtualinvoke r4.<android.content.res.AssetFileDescriptor: void close()>();

     label3:
        $r6 = new java.io.FileNotFoundException;

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>("Not a whole file");

        throw $r6;

     label4:
        $r8 := @caughtexception;

        goto label3;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public final java.io.InputStream openInputStream(android.net.Uri) throws java.io.FileNotFoundException
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2, $r10, $r11, $r13, $r21;
        android.content.res.AssetFileDescriptor r3;
        java.io.FileInputStream r4, r6, $r12;
        android.content.ContentResolver$OpenResourceIdResult r7;
        java.io.InputStream r9;
        boolean $z0, $z1;
        android.content.res.Resources $r14;
        int $i0;
        android.content.res.Resources$NotFoundException $r15;
        java.lang.StringBuilder $r16, $r18, $r19;
        java.io.FileNotFoundException $r17, $r22;
        java.io.IOException $r20;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $r10 = "android.resource";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        r7 = virtualinvoke r0.<android.content.ContentResolver: android.content.ContentResolver$OpenResourceIdResult getResourceId(android.net.Uri)>(r1);

     label1:
        $r14 = r7.<android.content.ContentResolver$OpenResourceIdResult: android.content.res.Resources r>;

        $i0 = r7.<android.content.ContentResolver$OpenResourceIdResult: int id>;

        r9 = virtualinvoke $r14.<android.content.res.Resources: java.io.InputStream openRawResource(int)>($i0);

     label2:
        return r9;

     label3:
        $r15 := @caughtexception;

        $r17 = new java.io.FileNotFoundException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource does not exist: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label4:
        $r11 = "file";

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label5;

        $r12 = new java.io.FileInputStream;

        $r13 = virtualinvoke r1.<android.net.Uri: java.lang.String getPath()>();

        specialinvoke $r12.<java.io.FileInputStream: void <init>(java.lang.String)>($r13);

        return $r12;

     label5:
        r3 = virtualinvoke r0.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>(r1, "r", null);

        r4 = null;

        if r3 == null goto label8;

     label6:
        r6 = virtualinvoke r3.<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>();

     label7:
        r4 = r6;

     label8:
        return r4;

     label9:
        $r20 := @caughtexception;

        $r22 = new java.io.FileNotFoundException;

        specialinvoke $r22.<java.io.FileNotFoundException: void <init>(java.lang.String)>("Unable to create stream");

        throw $r22;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label6 to label7 with label9;
    }

    public final java.io.OutputStream openOutputStream(android.net.Uri) throws java.io.FileNotFoundException
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.io.OutputStream $r2;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        $r2 = virtualinvoke r0.<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)>(r1, "w");

        return $r2;
    }

    public final java.io.OutputStream openOutputStream(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.content.res.AssetFileDescriptor r3;
        java.io.FileOutputStream r4, r6;
        java.io.IOException $r7;
        java.io.FileNotFoundException $r8;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>(r1, r2, null);

        r4 = null;

        if r3 == null goto label3;

     label1:
        r6 = virtualinvoke r3.<android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()>();

     label2:
        r4 = r6;

     label3:
        return r4;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.io.FileNotFoundException;

        specialinvoke $r8.<java.io.FileNotFoundException: void <init>(java.lang.String)>("Unable to create stream");

        throw $r8;

        catch java.io.IOException from label1 to label2 with label4;
    }

    public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle) throws java.io.FileNotFoundException
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.content.res.AssetFileDescriptor $r4;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $r4 = virtualinvoke r0.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>(r1, r2, r3, null);

        return $r4;
    }

    public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2, $r17, $r23, $r26, $r31, $r40;
        android.os.Bundle r3;
        android.os.CancellationSignal r4;
        android.content.IContentProvider r5, r6;
        android.os.ICancellationSignal r7;
        java.io.FileNotFoundException r8, $r21, $r29, $r35, $r39;
        java.lang.Throwable r9, $r30;
        android.content.res.AssetFileDescriptor r12, r13, r15, r16, $r20;
        android.content.ContentResolver$ParcelFileDescriptorInner r14, $r19;
        android.os.ParcelFileDescriptor $r18;
        long $l0, $l1;
        java.lang.StringBuilder $r22, $r24, $r25, $r28, $r32, $r33, $r36, $r37, $r38;
        android.os.DeadObjectException $r27;
        android.os.RemoteException $r34;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.os.CancellationSignal;

        r5 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(android.net.Uri)>(r1);

        if r5 != null goto label01;

        $r21 = new java.io.FileNotFoundException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No content provider: ");

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r23);

        throw $r21;

     label01:
        r6 = null;

        r7 = null;

        if r4 == null goto label03;

     label02:
        virtualinvoke r4.<android.os.CancellationSignal: void throwIfCanceled()>();

        r7 = interfaceinvoke r5.<android.content.IContentProvider: android.os.ICancellationSignal createCancellationSignal()>();

        virtualinvoke r4.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(r7);

     label03:
        $r17 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        r16 = interfaceinvoke r5.<android.content.IContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.os.ICancellationSignal)>($r17, r1, r2, r3, r7);

     label04:
        r13 = r16;

        r6 = null;

        if r13 != null goto label22;

        if r4 == null goto label05;

        virtualinvoke r4.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label05:
        goto label06;

     label06:
        r15 = null;

        if r5 == null goto label07;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r5);

     label07:
        return r15;

     label08:
        $r27 := @caughtexception;

     label09:
        virtualinvoke r0.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>(r5);

        r6 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

     label10:
        if r6 != null goto label18;

     label11:
        $r29 = new java.io.FileNotFoundException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No content provider: ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r31);

        throw $r29;

     label12:
        $r34 := @caughtexception;

     label13:
        $r39 = new java.io.FileNotFoundException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed opening content provider: ");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r40 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r40);

        throw $r39;

     label14:
        $r30 := @caughtexception;

        r9 = $r30;

        if r4 == null goto label15;

        virtualinvoke r4.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label15:
        if r6 == null goto label16;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r6);

     label16:
        if r5 == null goto label17;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r5);

     label17:
        throw r9;

     label18:
        $r26 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        r12 = interfaceinvoke r6.<android.content.IContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.os.ICancellationSignal)>($r26, r1, r2, r3, r7);

     label19:
        r13 = r12;

        if r13 != null goto label22;

        if r4 == null goto label20;

        virtualinvoke r4.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label20:
        if r6 == null goto label21;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r6);

     label21:
        r15 = null;

        if r5 == null goto label07;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r5);

        return null;

     label22:
        if r6 != null goto label24;

     label23:
        r6 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

     label24:
        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r5);

        $r19 = new android.content.ContentResolver$ParcelFileDescriptorInner;

        $r18 = virtualinvoke r13.<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>();

        specialinvoke $r19.<android.content.ContentResolver$ParcelFileDescriptorInner: void <init>(android.content.ContentResolver,android.os.ParcelFileDescriptor,android.content.IContentProvider)>(r0, $r18, r6);

        r14 = $r19;

     label25:
        r6 = null;

     label26:
        $r20 = new android.content.res.AssetFileDescriptor;

        $l0 = virtualinvoke r13.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l1 = virtualinvoke r13.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        specialinvoke $r20.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>(r14, $l0, $l1);

        r15 = $r20;

     label27:
        if r4 == null goto label28;

        virtualinvoke r4.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label28:
        goto label29;

     label29:
        if r5 == null goto label07;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r5);

        return r15;

     label30:
        $r35 := @caughtexception;

        r8 = $r35;

        throw r8;

        catch android.os.RemoteException from label02 to label03 with label12;
        catch java.io.FileNotFoundException from label02 to label03 with label30;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch android.os.DeadObjectException from label03 to label04 with label08;
        catch android.os.RemoteException from label03 to label04 with label12;
        catch java.io.FileNotFoundException from label03 to label04 with label30;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch android.os.RemoteException from label09 to label10 with label12;
        catch java.io.FileNotFoundException from label09 to label10 with label30;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch android.os.RemoteException from label11 to label12 with label12;
        catch java.io.FileNotFoundException from label11 to label12 with label30;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch android.os.RemoteException from label18 to label19 with label12;
        catch java.io.FileNotFoundException from label18 to label19 with label30;
        catch java.lang.Throwable from label18 to label19 with label14;
        catch android.os.RemoteException from label23 to label24 with label12;
        catch java.io.FileNotFoundException from label23 to label24 with label30;
        catch java.lang.Throwable from label23 to label24 with label14;
        catch android.os.RemoteException from label24 to label25 with label12;
        catch java.io.FileNotFoundException from label24 to label25 with label30;
        catch java.lang.Throwable from label24 to label25 with label14;
        catch android.os.RemoteException from label26 to label27 with label12;
        catch java.io.FileNotFoundException from label26 to label27 with label30;
        catch java.lang.Throwable from label26 to label27 with label14;
    }

    public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;
        android.database.Cursor $r6;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        $r6 = virtualinvoke r0.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(r1, r2, r3, r4, r5, null);

        return $r6;
    }

    public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5, $r17, $r21;
        android.os.CancellationSignal r6;
        android.content.IContentProvider r7, r8, r13, r14, r15;
        android.database.Cursor r9, r16;
        java.lang.Throwable r10, $r22;
        android.content.ContentResolver$CursorWrapperInner r11, $r18;
        long l0, $l1, $l2;
        android.os.ICancellationSignal r12;
        android.os.RemoteException $r19;
        android.os.DeadObjectException $r20;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.os.CancellationSignal;

        r7 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(android.net.Uri)>(r1);

        if r7 != null goto label02;

        r11 = null;

     label01:
        return r11;

     label02:
        r8 = null;

        r9 = null;

     label03:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label04:
        r12 = null;

        r8 = null;

        r9 = null;

        if r6 == null goto label06;

     label05:
        virtualinvoke r6.<android.os.CancellationSignal: void throwIfCanceled()>();

        r12 = interfaceinvoke r7.<android.content.IContentProvider: android.os.ICancellationSignal createCancellationSignal()>();

        virtualinvoke r6.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(r12);

     label06:
        $r17 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        r16 = interfaceinvoke r7.<android.content.IContentProvider: android.database.Cursor query(java.lang.String,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.ICancellationSignal)>($r17, r1, r2, r3, r4, r5, r12);

     label07:
        r9 = r16;

     label08:
        if r9 != null goto label20;

        if r9 == null goto label09;

        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label09:
        if r6 == null goto label10;

        virtualinvoke r6.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label10:
        if r7 == null goto label11;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r7);

     label11:
        r11 = null;

        if r8 == null goto label01;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r8);

        return null;

     label12:
        $r20 := @caughtexception;

     label13:
        virtualinvoke r0.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>(r7);

        r13 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

     label14:
        r8 = r13;

        if r8 != null goto label18;

        goto label15;

     label15:
        if r6 == null goto label16;

        virtualinvoke r6.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label16:
        if r7 == null goto label17;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r7);

     label17:
        r11 = null;

        if r8 == null goto label01;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r8);

        return null;

     label18:
        $r21 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        r9 = interfaceinvoke r8.<android.content.IContentProvider: android.database.Cursor query(java.lang.String,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.ICancellationSignal)>($r21, r1, r2, r3, r4, r5, r12);

     label19:
        goto label08;

     label20:
        interfaceinvoke r9.<android.database.Cursor: int getCount()>();

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = $l2 - l0;

        specialinvoke r0.<android.content.ContentResolver: void maybeLogQueryToEventLog(long,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)>($l1, r1, r2, r3, r5);

     label21:
        if r8 == null goto label27;

        r15 = r8;

     label22:
        $r18 = new android.content.ContentResolver$CursorWrapperInner;

        specialinvoke $r18.<android.content.ContentResolver$CursorWrapperInner: void <init>(android.content.ContentResolver,android.database.Cursor,android.content.IContentProvider)>(r0, r9, r15);

        r11 = $r18;

     label23:
        goto label24;

     label24:
        if r6 == null goto label25;

        virtualinvoke r6.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label25:
        if r7 == null goto label26;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r7);

     label26:
        goto label01;

     label27:
        r14 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

     label28:
        r15 = r14;

        goto label22;

     label29:
        $r19 := @caughtexception;

        if r9 == null goto label30;

        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label30:
        if r6 == null goto label31;

        virtualinvoke r6.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label31:
        if r7 == null goto label32;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r7);

     label32:
        r11 = null;

        if r8 == null goto label01;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r8);

        return null;

     label33:
        $r22 := @caughtexception;

        r10 = $r22;

        if r9 == null goto label34;

        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label34:
        if r6 == null goto label35;

        virtualinvoke r6.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(null);

     label35:
        if r7 == null goto label36;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>(r7);

     label36:
        if r8 == null goto label37;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r8);

     label37:
        throw r10;

        catch android.os.RemoteException from label03 to label04 with label29;
        catch java.lang.Throwable from label03 to label04 with label33;
        catch android.os.RemoteException from label05 to label06 with label29;
        catch java.lang.Throwable from label05 to label06 with label33;
        catch android.os.DeadObjectException from label06 to label07 with label12;
        catch android.os.RemoteException from label06 to label07 with label29;
        catch java.lang.Throwable from label06 to label07 with label33;
        catch android.os.RemoteException from label13 to label14 with label29;
        catch java.lang.Throwable from label13 to label14 with label33;
        catch android.os.RemoteException from label18 to label19 with label29;
        catch java.lang.Throwable from label18 to label19 with label33;
        catch android.os.RemoteException from label20 to label21 with label29;
        catch java.lang.Throwable from label20 to label21 with label33;
        catch android.os.RemoteException from label22 to label23 with label29;
        catch java.lang.Throwable from label22 to label23 with label33;
        catch android.os.RemoteException from label27 to label28 with label29;
        catch java.lang.Throwable from label27 to label28 with label33;
    }

    public final void registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        boolean z0;
        android.database.ContentObserver r2;
        int $i0;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.database.ContentObserver;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke r0.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>(r1, z0, r2, $i0);

        return;
    }

    public final void registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver, int)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        boolean z0;
        android.database.ContentObserver r2;
        int i0;
        android.content.IContentService $r4;
        android.database.IContentObserver $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.database.ContentObserver;

        i0 := @parameter3: int;

     label1:
        $r4 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        $r5 = virtualinvoke r2.<android.database.ContentObserver: android.database.IContentObserver getContentObserver()>();

        interfaceinvoke $r4.<android.content.IContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int)>(r1, z0, $r5, i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void releasePersistableUriPermission(android.net.Uri, int)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        int i0;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void releasePersistableUriPermission(android.net.Uri,int)>(r1, i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public abstract boolean releaseProvider(android.content.IContentProvider);

    public abstract boolean releaseUnstableProvider(android.content.IContentProvider);

    public void startSync(android.net.Uri, android.os.Bundle)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.os.Bundle r2;
        android.accounts.Account r3, $r6;
        java.lang.String r4, r5;
        boolean z0;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.Bundle;

        r3 = null;

        if r2 == null goto label2;

        r5 = virtualinvoke r2.<android.os.Bundle: java.lang.String getString(java.lang.String)>("account");

        z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        r3 = null;

        if z0 != 0 goto label1;

        $r6 = new android.accounts.Account;

        specialinvoke $r6.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>(r5, "com.google");

        r3 = $r6;

     label1:
        virtualinvoke r2.<android.os.Bundle: void remove(java.lang.String)>("account");

     label2:
        if r1 == null goto label4;

        r4 = virtualinvoke r1.<android.net.Uri: java.lang.String getAuthority()>();

     label3:
        staticinvoke <android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>(r3, r4, r2);

        return;

     label4:
        r4 = null;

        goto label3;
    }

    public void takePersistableUriPermission(android.net.Uri, int)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        int i0;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void takePersistableUriPermission(android.net.Uri,int)>(r1, i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final android.net.Uri uncanonicalize(android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1, r5;
        android.content.IContentProvider r2;
        java.lang.Throwable r3, $r8;
        java.lang.String $r6;
        android.os.RemoteException $r7;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

        if r2 != null goto label1;

        return null;

     label1:
        $r6 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        r5 = interfaceinvoke r2.<android.content.IContentProvider: android.net.Uri uncanonicalize(java.lang.String,android.net.Uri)>($r6, r1);

     label2:
        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r2);

        return r5;

     label3:
        $r7 := @caughtexception;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r2);

        return null;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r2);

        throw r3;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public final void unregisterContentObserver(android.database.ContentObserver)
    {
        android.content.ContentResolver r0;
        android.database.ContentObserver r1;
        android.database.IContentObserver r3;
        android.content.IContentService $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.database.ContentObserver;

     label1:
        r3 = virtualinvoke r1.<android.database.ContentObserver: android.database.IContentObserver releaseContentObserver()>();

     label2:
        if r3 == null goto label4;

     label3:
        $r4 = staticinvoke <android.content.ContentResolver: android.content.IContentService getContentService()>();

        interfaceinvoke $r4.<android.content.IContentService: void unregisterContentObserver(android.database.IContentObserver)>(r3);

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public abstract void unstableProviderDied(android.content.IContentProvider);

    public final int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.String r3, $r8, $r14;
        java.lang.String[] r4;
        android.content.IContentProvider r5;
        java.lang.Throwable r6, $r13;
        long l0, $l2, $l3;
        int i1;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.lang.IllegalArgumentException $r10;
        android.os.RemoteException $r15;

        r0 := @this: android.content.ContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 = virtualinvoke r0.<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>(r1);

        if r5 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URI ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r8 = r0.<android.content.ContentResolver: java.lang.String mPackageName>;

        i1 = interfaceinvoke r5.<android.content.IContentProvider: int update(java.lang.String,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r8, r1, r2, r3, r4);

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l3 = $l2 - l0;

        specialinvoke r0.<android.content.ContentResolver: void maybeLogUpdateToEventLog(long,android.net.Uri,java.lang.String,java.lang.String)>($l3, r1, "update", r3);

     label2:
        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r5);

        return i1;

     label3:
        $r15 := @caughtexception;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r5);

        return -1;

     label4:
        $r13 := @caughtexception;

        r6 = $r13;

        virtualinvoke r0.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r5);

        throw r6;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }
}
