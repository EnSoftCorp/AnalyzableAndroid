public final class android.database.sqlite.SQLiteGlobal extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static int sDefaultPageSize;
    private static final java.lang.Object sLock;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.database.sqlite.SQLiteGlobal: java.lang.String TAG> = "SQLiteGlobal";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.database.sqlite.SQLiteGlobal: java.lang.Object sLock> = $r0;

        return;
    }

    private void <init>()
    {
        android.database.sqlite.SQLiteGlobal r0;

        r0 := @this: android.database.sqlite.SQLiteGlobal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getDefaultJournalMode()
    {
        android.content.res.Resources $r0;
        java.lang.String $r1, $r2;

        $r0 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r1 = virtualinvoke $r0.<android.content.res.Resources: java.lang.String getString(int)>(17039401);

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("debug.sqlite.journalmode", $r1);

        return $r2;
    }

    public static int getDefaultPageSize()
    {
        java.lang.Object r0;
        java.lang.Throwable r1, $r3;
        int i0, $i1, $i2, $i3;
        android.os.StatFs $r2;

        r0 = <android.database.sqlite.SQLiteGlobal: java.lang.Object sLock>;

        entermonitor r0;

     label1:
        $i1 = <android.database.sqlite.SQLiteGlobal: int sDefaultPageSize>;

        if $i1 != 0 goto label2;

        $r2 = new android.os.StatFs;

        specialinvoke $r2.<android.os.StatFs: void <init>(java.lang.String)>("/data");

        $i3 = virtualinvoke $r2.<android.os.StatFs: int getBlockSize()>();

        <android.database.sqlite.SQLiteGlobal: int sDefaultPageSize> = $i3;

     label2:
        $i2 = <android.database.sqlite.SQLiteGlobal: int sDefaultPageSize>;

        i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("debug.sqlite.pagesize", $i2);

        exitmonitor r0;

     label3:
        return i0;

     label4:
        $r3 := @caughtexception;

        r1 = $r3;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static java.lang.String getDefaultSyncMode()
    {
        android.content.res.Resources $r0;
        java.lang.String $r1, $r2;

        $r0 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r1 = virtualinvoke $r0.<android.content.res.Resources: java.lang.String getString(int)>(17039402);

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("debug.sqlite.syncmode", $r1);

        return $r2;
    }

    public static int getJournalSizeLimit()
    {
        android.content.res.Resources $r0;
        int $i0, $i1;

        $r0 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $i0 = virtualinvoke $r0.<android.content.res.Resources: int getInteger(int)>(17694774);

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("debug.sqlite.journalsizelimit", $i0);

        return $i1;
    }

    public static int getWALAutoCheckpoint()
    {
        android.content.res.Resources $r0;
        int $i0, $i1, $i2;

        $r0 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $i0 = virtualinvoke $r0.<android.content.res.Resources: int getInteger(int)>(17694775);

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("debug.sqlite.wal.autocheckpoint", $i0);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i1);

        return $i2;
    }

    public static int getWALConnectionPoolSize()
    {
        android.content.res.Resources $r0;
        int $i0, $i1, $i2;

        $r0 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $i0 = virtualinvoke $r0.<android.content.res.Resources: int getInteger(int)>(17694773);

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("debug.sqlite.wal.poolsize", $i0);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i1);

        return $i2;
    }

    public static java.lang.String getWALSyncMode()
    {
        android.content.res.Resources $r0;
        java.lang.String $r1, $r2;

        $r0 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r1 = virtualinvoke $r0.<android.content.res.Resources: java.lang.String getString(int)>(17039403);

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("debug.sqlite.wal.syncmode", $r1);

        return $r2;
    }

    private static native int nativeReleaseMemory();

    public static int releaseMemory()
    {
        int $i0;

        $i0 = staticinvoke <android.database.sqlite.SQLiteGlobal: int nativeReleaseMemory()>();

        return $i0;
    }
}
