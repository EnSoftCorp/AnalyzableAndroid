public class android.net.CaptivePortalTracker extends com.android.internal.util.StateMachine
{
    public static final java.lang.String ACTION_NETWORK_CONDITIONS_MEASURED;
    private static final int CMD_CONNECTIVITY_CHANGE;
    private static final int CMD_DELAYED_CAPTIVE_CHECK;
    private static final int CMD_DETECT_PORTAL;
    private static final boolean DBG;
    private static final java.lang.String DEFAULT_SERVER;
    private static final int DELAYED_CHECK_INTERVAL_MS;
    public static final java.lang.String EXTRA_BSSID;
    public static final java.lang.String EXTRA_CELL_ID;
    public static final java.lang.String EXTRA_CONNECTIVITY_TYPE;
    public static final java.lang.String EXTRA_IS_CAPTIVE_PORTAL;
    public static final java.lang.String EXTRA_NETWORK_TYPE;
    public static final java.lang.String EXTRA_REQUEST_TIMESTAMP_MS;
    public static final java.lang.String EXTRA_RESPONSE_RECEIVED;
    public static final java.lang.String EXTRA_RESPONSE_TIMESTAMP_MS;
    public static final java.lang.String EXTRA_SSID;
    private static final java.lang.String PERMISSION_ACCESS_NETWORK_CONDITIONS;
    private static final java.lang.String SETUP_WIZARD_PACKAGE;
    private static final int SOCKET_TIMEOUT_MS;
    private static final java.lang.String TAG;
    private com.android.internal.util.State mActiveNetworkState;
    private android.net.IConnectivityManager mConnService;
    private android.content.Context mContext;
    private com.android.internal.util.State mDefaultState;
    private com.android.internal.util.State mDelayedCaptiveCheckState;
    private int mDelayedCheckToken;
    private boolean mDeviceProvisioned;
    private boolean mIsCaptivePortalCheckEnabled;
    private android.net.NetworkInfo mNetworkInfo;
    private com.android.internal.util.State mNoActiveNetworkState;
    private android.net.CaptivePortalTracker$ProvisioningObserver mProvisioningObserver;
    private final android.content.BroadcastReceiver mReceiver;
    private java.lang.String mServer;
    private android.telephony.TelephonyManager mTelephonyManager;
    private java.lang.String mUrl;
    private android.net.wifi.WifiManager mWifiManager;

    private void <init>(android.content.Context, android.net.IConnectivityManager)
    {
        android.net.CaptivePortalTracker r0;
        android.content.Context r1, $r17, $r19, $r23;
        android.net.IConnectivityManager r2;
        android.content.IntentFilter r3, $r15;
        boolean z0;
        android.net.CaptivePortalTracker$DefaultState $r4;
        android.net.CaptivePortalTracker$NoActiveNetworkState $r5;
        android.net.CaptivePortalTracker$ActiveNetworkState $r6;
        android.net.CaptivePortalTracker$DelayedCaptiveCheckState $r7;
        android.net.CaptivePortalTracker$1 $r8;
        java.lang.Object $r9, $r11;
        android.telephony.TelephonyManager $r10;
        android.net.wifi.WifiManager $r12;
        android.net.CaptivePortalTracker$ProvisioningObserver $r13;
        android.content.BroadcastReceiver $r14;
        android.content.ContentResolver $r18, $r22;
        java.lang.String $r20, $r21;
        com.android.internal.util.State $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31;
        int $i0;

        r0 := @this: android.net.CaptivePortalTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.IConnectivityManager;

        specialinvoke r0.<com.android.internal.util.StateMachine: void <init>(java.lang.String)>("CaptivePortalTracker");

        r0.<android.net.CaptivePortalTracker: boolean mIsCaptivePortalCheckEnabled> = 0;

        r0.<android.net.CaptivePortalTracker: int mDelayedCheckToken> = 0;

        $r4 = new android.net.CaptivePortalTracker$DefaultState;

        specialinvoke $r4.<android.net.CaptivePortalTracker$DefaultState: void <init>(android.net.CaptivePortalTracker,android.net.CaptivePortalTracker$1)>(r0, null);

        r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mDefaultState> = $r4;

        $r5 = new android.net.CaptivePortalTracker$NoActiveNetworkState;

        specialinvoke $r5.<android.net.CaptivePortalTracker$NoActiveNetworkState: void <init>(android.net.CaptivePortalTracker,android.net.CaptivePortalTracker$1)>(r0, null);

        r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mNoActiveNetworkState> = $r5;

        $r6 = new android.net.CaptivePortalTracker$ActiveNetworkState;

        specialinvoke $r6.<android.net.CaptivePortalTracker$ActiveNetworkState: void <init>(android.net.CaptivePortalTracker,android.net.CaptivePortalTracker$1)>(r0, null);

        r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mActiveNetworkState> = $r6;

        $r7 = new android.net.CaptivePortalTracker$DelayedCaptiveCheckState;

        specialinvoke $r7.<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: void <init>(android.net.CaptivePortalTracker,android.net.CaptivePortalTracker$1)>(r0, null);

        r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mDelayedCaptiveCheckState> = $r7;

        r0.<android.net.CaptivePortalTracker: boolean mDeviceProvisioned> = 0;

        $r8 = new android.net.CaptivePortalTracker$1;

        specialinvoke $r8.<android.net.CaptivePortalTracker$1: void <init>(android.net.CaptivePortalTracker)>(r0);

        r0.<android.net.CaptivePortalTracker: android.content.BroadcastReceiver mReceiver> = $r8;

        r0.<android.net.CaptivePortalTracker: android.content.Context mContext> = r1;

        r0.<android.net.CaptivePortalTracker: android.net.IConnectivityManager mConnService> = r2;

        $r9 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r10 = (android.telephony.TelephonyManager) $r9;

        r0.<android.net.CaptivePortalTracker: android.telephony.TelephonyManager mTelephonyManager> = $r10;

        $r11 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r12 = (android.net.wifi.WifiManager) $r11;

        r0.<android.net.CaptivePortalTracker: android.net.wifi.WifiManager mWifiManager> = $r12;

        $r13 = new android.net.CaptivePortalTracker$ProvisioningObserver;

        specialinvoke $r13.<android.net.CaptivePortalTracker$ProvisioningObserver: void <init>(android.net.CaptivePortalTracker)>(r0);

        r0.<android.net.CaptivePortalTracker: android.net.CaptivePortalTracker$ProvisioningObserver mProvisioningObserver> = $r13;

        $r15 = new android.content.IntentFilter;

        specialinvoke $r15.<android.content.IntentFilter: void <init>()>();

        r3 = $r15;

        virtualinvoke r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE");

        virtualinvoke r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE");

        $r17 = r0.<android.net.CaptivePortalTracker: android.content.Context mContext>;

        $r14 = r0.<android.net.CaptivePortalTracker: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke $r17.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r14, r3);

        $r19 = r0.<android.net.CaptivePortalTracker: android.content.Context mContext>;

        $r18 = virtualinvoke $r19.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r21 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r18, "captive_portal_server");

        r0.<android.net.CaptivePortalTracker: java.lang.String mServer> = $r21;

        $r20 = r0.<android.net.CaptivePortalTracker: java.lang.String mServer>;

        if $r20 != null goto label1;

        r0.<android.net.CaptivePortalTracker: java.lang.String mServer> = "clients3.google.com";

     label1:
        $r23 = r0.<android.net.CaptivePortalTracker: android.content.Context mContext>;

        $r22 = virtualinvoke $r23.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r22, "captive_portal_detection_enabled", 1);

        if $i0 != 1 goto label3;

        z0 = 1;

     label2:
        r0.<android.net.CaptivePortalTracker: boolean mIsCaptivePortalCheckEnabled> = z0;

        $r24 = r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void addState(com.android.internal.util.State)>($r24);

        $r25 = r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mNoActiveNetworkState>;

        $r26 = r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r25, $r26);

        $r27 = r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mActiveNetworkState>;

        $r28 = r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r27, $r28);

        $r31 = r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mDelayedCaptiveCheckState>;

        $r30 = r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mActiveNetworkState>;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r31, $r30);

        $r29 = r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mNoActiveNetworkState>;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void setInitialState(com.android.internal.util.State)>($r29);

        return;

     label3:
        z0 = 0;

        goto label2;
    }

    static android.net.NetworkInfo access$1000(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        $r1 = r0.<android.net.CaptivePortalTracker: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    static android.net.NetworkInfo access$1002(android.net.CaptivePortalTracker, android.net.NetworkInfo)
    {
        android.net.CaptivePortalTracker r0;
        android.net.NetworkInfo r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: android.net.NetworkInfo;

        r0.<android.net.CaptivePortalTracker: android.net.NetworkInfo mNetworkInfo> = r1;

        return r1;
    }

    static void access$1100(android.net.CaptivePortalTracker, java.lang.String)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>(r1);

        return;
    }

    static boolean access$1200(android.net.CaptivePortalTracker, android.net.NetworkInfo)
    {
        android.net.CaptivePortalTracker r0;
        android.net.NetworkInfo r1;
        boolean $z0;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: android.net.NetworkInfo;

        $z0 = specialinvoke r0.<android.net.CaptivePortalTracker: boolean isActiveNetwork(android.net.NetworkInfo)>(r1);

        return $z0;
    }

    static com.android.internal.util.State access$1300(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        $r1 = r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mDelayedCaptiveCheckState>;

        return $r1;
    }

    static void access$1400(android.net.CaptivePortalTracker, com.android.internal.util.IState)
    {
        android.net.CaptivePortalTracker r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$1500(android.net.CaptivePortalTracker, java.lang.String)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>(r1);

        return;
    }

    static void access$1600(android.net.CaptivePortalTracker, java.lang.String)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>(r1);

        return;
    }

    static com.android.internal.util.State access$1700(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        $r1 = r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mNoActiveNetworkState>;

        return $r1;
    }

    static void access$1800(android.net.CaptivePortalTracker, com.android.internal.util.IState)
    {
        android.net.CaptivePortalTracker r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$1900(android.net.CaptivePortalTracker, java.lang.String)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>(r1);

        return;
    }

    static void access$2000(android.net.CaptivePortalTracker, android.os.Message)
    {
        android.net.CaptivePortalTracker r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$2100(android.net.CaptivePortalTracker, com.android.internal.util.IState)
    {
        android.net.CaptivePortalTracker r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static int access$2200(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;
        int $i0;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        $i0 = r0.<android.net.CaptivePortalTracker: int mDelayedCheckToken>;

        return $i0;
    }

    static int access$2204(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;
        int i0, $i1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        $i1 = r0.<android.net.CaptivePortalTracker: int mDelayedCheckToken>;

        i0 = 1 + $i1;

        r0.<android.net.CaptivePortalTracker: int mDelayedCheckToken> = i0;

        return i0;
    }

    static void access$2300(android.net.CaptivePortalTracker, java.lang.String)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>(r1);

        return;
    }

    static java.lang.String access$2400(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        $r1 = r0.<android.net.CaptivePortalTracker: java.lang.String mServer>;

        return $r1;
    }

    static java.net.InetAddress access$2500(android.net.CaptivePortalTracker, java.lang.String)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String r1;
        java.net.InetAddress $r2;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<android.net.CaptivePortalTracker: java.net.InetAddress lookupHost(java.lang.String)>(r1);

        return $r2;
    }

    static boolean access$2600(android.net.CaptivePortalTracker, java.net.InetAddress)
    {
        android.net.CaptivePortalTracker r0;
        java.net.InetAddress r1;
        boolean $z0;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: java.net.InetAddress;

        $z0 = specialinvoke r0.<android.net.CaptivePortalTracker: boolean isCaptivePortal(java.net.InetAddress)>(r1);

        return $z0;
    }

    static void access$2700(android.net.CaptivePortalTracker, java.lang.String)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>(r1);

        return;
    }

    static void access$2800(android.net.CaptivePortalTracker, java.lang.String)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>(r1);

        return;
    }

    static void access$2900(android.net.CaptivePortalTracker, android.net.NetworkInfo, boolean)
    {
        android.net.CaptivePortalTracker r0;
        android.net.NetworkInfo r1;
        boolean z0;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: android.net.NetworkInfo;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.net.CaptivePortalTracker: void notifyPortalCheckCompleted(android.net.NetworkInfo,boolean)>(r1, z0);

        return;
    }

    static java.lang.String access$3000(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        $r1 = r0.<android.net.CaptivePortalTracker: java.lang.String mUrl>;

        return $r1;
    }

    static android.net.IConnectivityManager access$3100(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;
        android.net.IConnectivityManager $r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        $r1 = r0.<android.net.CaptivePortalTracker: android.net.IConnectivityManager mConnService>;

        return $r1;
    }

    static com.android.internal.util.State access$3200(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        $r1 = r0.<android.net.CaptivePortalTracker: com.android.internal.util.State mActiveNetworkState>;

        return $r1;
    }

    static void access$3300(android.net.CaptivePortalTracker, com.android.internal.util.IState)
    {
        android.net.CaptivePortalTracker r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static android.content.Context access$400(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;
        android.content.Context $r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        $r1 = r0.<android.net.CaptivePortalTracker: android.content.Context mContext>;

        return $r1;
    }

    static boolean access$500(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;
        boolean $z0;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        $z0 = r0.<android.net.CaptivePortalTracker: boolean mDeviceProvisioned>;

        return $z0;
    }

    static boolean access$502(android.net.CaptivePortalTracker, boolean)
    {
        android.net.CaptivePortalTracker r0;
        boolean z0;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        z0 := @parameter1: boolean;

        r0.<android.net.CaptivePortalTracker: boolean mDeviceProvisioned> = z0;

        return z0;
    }

    static void access$600(android.net.CaptivePortalTracker, java.lang.String)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>(r1);

        return;
    }

    static void access$700(android.net.CaptivePortalTracker, android.net.NetworkInfo)
    {
        android.net.CaptivePortalTracker r0;
        android.net.NetworkInfo r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: android.net.NetworkInfo;

        specialinvoke r0.<android.net.CaptivePortalTracker: void notifyPortalCheckComplete(android.net.NetworkInfo)>(r1);

        return;
    }

    static void access$800(android.net.CaptivePortalTracker, java.lang.String)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$900(android.net.CaptivePortalTracker)
    {
        android.net.CaptivePortalTracker r0;

        r0 := @parameter0: android.net.CaptivePortalTracker;

        specialinvoke r0.<android.net.CaptivePortalTracker: void setNotificationOff()>();

        return;
    }

    private boolean isActiveNetwork(android.net.NetworkInfo)
    {
        android.net.CaptivePortalTracker r0;
        android.net.NetworkInfo r1, r3;
        android.os.RemoteException r2, $r5;
        int i0, i1;
        android.net.IConnectivityManager $r4;

        r0 := @this: android.net.CaptivePortalTracker;

        r1 := @parameter0: android.net.NetworkInfo;

     label1:
        $r4 = r0.<android.net.CaptivePortalTracker: android.net.IConnectivityManager mConnService>;

        r3 = interfaceinvoke $r4.<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

     label2:
        if r3 == null goto label6;

     label3:
        i0 = virtualinvoke r3.<android.net.NetworkInfo: int getType()>();

        i1 = virtualinvoke r1.<android.net.NetworkInfo: int getType()>();

     label4:
        if i0 != i1 goto label6;

        return 1;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r2.<android.os.RemoteException: void printStackTrace()>();

     label6:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private boolean isCaptivePortal(java.net.InetAddress)
    {
        android.net.CaptivePortalTracker r0;
        java.net.InetAddress r1;
        boolean z0, $z1;
        java.net.HttpURLConnection r2;
        long l0, l1;
        java.lang.Throwable r3, $r29;
        java.io.IOException r4, $r28;
        int i2;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10, $r13, $r15, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r30;
        java.lang.String $r7, $r11, $r12, $r14, $r16, $r27, $r31;
        java.net.URL $r17;
        java.net.URLConnection $r18;
        byte $b3;

        r0 := @this: android.net.CaptivePortalTracker;

        r1 := @parameter0: java.net.InetAddress;

        z0 = 1;

        r2 = null;

        $z1 = r0.<android.net.CaptivePortalTracker: boolean mIsCaptivePortalCheckEnabled>;

        if $z1 != 0 goto label02;

        z0 = 0;

     label01:
        return z0;

     label02:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://");

        $r7 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/generate_204");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<android.net.CaptivePortalTracker: java.lang.String mUrl> = $r11;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking ");

        $r12 = r0.<android.net.CaptivePortalTracker: java.lang.String mUrl>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>($r14);

        l0 = -1L;

     label03:
        $r17 = new java.net.URL;

        $r16 = r0.<android.net.CaptivePortalTracker: java.lang.String mUrl>;

        specialinvoke $r17.<java.net.URL: void <init>(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.net.URL: java.net.URLConnection openConnection()>();

        r2 = (java.net.HttpURLConnection) $r18;

        virtualinvoke r2.<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>(0);

        virtualinvoke r2.<java.net.HttpURLConnection: void setConnectTimeout(int)>(10000);

        virtualinvoke r2.<java.net.HttpURLConnection: void setReadTimeout(int)>(10000);

        virtualinvoke r2.<java.net.HttpURLConnection: void setUseCaches(boolean)>(0);

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        virtualinvoke r2.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        i2 = virtualinvoke r2.<java.net.HttpURLConnection: int getResponseCode()>();

     label04:
        if i2 == 204 goto label07;

     label05:
        specialinvoke r0.<android.net.CaptivePortalTracker: void sendNetworkConditionsBroadcast(boolean,boolean,long,long)>(1, z0, l0, l1);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isCaptivePortal: ret=");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rspCode=");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>($r27);

     label06:
        if r2 == null goto label01;

        virtualinvoke r2.<java.net.HttpURLConnection: void disconnect()>();

        return z0;

     label07:
        z0 = 0;

        goto label05;

     label08:
        $r28 := @caughtexception;

        r4 = $r28;

     label09:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Probably not a portal: exception ");

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>($r31);

     label10:
        $b3 = l0 cmp -1L;

        if $b3 == 0 goto label12;

     label11:
        specialinvoke r0.<android.net.CaptivePortalTracker: void sendFailedCaptivePortalCheckBroadcast(long)>(l0);

     label12:
        if r2 == null goto label13;

        virtualinvoke r2.<java.net.HttpURLConnection: void disconnect()>();

     label13:
        return 0;

     label14:
        $r29 := @caughtexception;

        r3 = $r29;

        if r2 == null goto label15;

        virtualinvoke r2.<java.net.HttpURLConnection: void disconnect()>();

     label15:
        throw r3;

        catch java.io.IOException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.io.IOException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
    }

    private java.net.InetAddress lookupHost(java.lang.String)
    {
        android.net.CaptivePortalTracker r0;
        java.lang.String r1;
        java.net.InetAddress[] r3;
        int i0, i1;
        java.net.InetAddress r4;
        long $l2, $l3;
        boolean $z0;
        java.net.UnknownHostException $r5;

        r0 := @this: android.net.CaptivePortalTracker;

        r1 := @parameter0: java.lang.String;

     label1:
        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>(r1);

     label2:
        i0 = lengthof r3;

        i1 = 0;

     label3:
        if i1 >= i0 goto label6;

        r4 = r3[i1];

        $z0 = r4 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label5;

        return r4;

     label4:
        $r5 := @caughtexception;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke r0.<android.net.CaptivePortalTracker: void sendFailedCaptivePortalCheckBroadcast(long)>($l3);

        return null;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke r0.<android.net.CaptivePortalTracker: void sendFailedCaptivePortalCheckBroadcast(long)>($l2);

        return null;

        catch java.net.UnknownHostException from label1 to label2 with label4;
    }

    public static android.net.CaptivePortalTracker makeCaptivePortalTracker(android.content.Context, android.net.IConnectivityManager)
    {
        android.content.Context r0;
        android.net.IConnectivityManager r1;
        android.net.CaptivePortalTracker r2, $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.IConnectivityManager;

        $r3 = new android.net.CaptivePortalTracker;

        specialinvoke $r3.<android.net.CaptivePortalTracker: void <init>(android.content.Context,android.net.IConnectivityManager)>(r0, r1);

        r2 = $r3;

        virtualinvoke r2.<android.net.CaptivePortalTracker: void start()>();

        return r2;
    }

    private void notifyPortalCheckComplete(android.net.NetworkInfo)
    {
        android.net.CaptivePortalTracker r0;
        android.net.NetworkInfo r1;
        android.os.RemoteException r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        android.net.IConnectivityManager $r7;

        r0 := @this: android.net.CaptivePortalTracker;

        r1 := @parameter0: android.net.NetworkInfo;

        if r1 != null goto label1;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void loge(java.lang.String)>("notifyPortalCheckComplete on null");

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyPortalCheckComplete: ni=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>($r6);

        $r7 = r0.<android.net.CaptivePortalTracker: android.net.IConnectivityManager mConnService>;

        interfaceinvoke $r7.<android.net.IConnectivityManager: void captivePortalCheckComplete(android.net.NetworkInfo)>(r1);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        virtualinvoke r2.<android.os.RemoteException: void printStackTrace()>();

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void notifyPortalCheckCompleted(android.net.NetworkInfo, boolean)
    {
        android.net.CaptivePortalTracker r0;
        android.net.NetworkInfo r1;
        boolean z0;
        android.os.RemoteException r2, $r10;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        android.net.IConnectivityManager $r9;

        r0 := @this: android.net.CaptivePortalTracker;

        r1 := @parameter0: android.net.NetworkInfo;

        z0 := @parameter1: boolean;

        if r1 != null goto label1;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void loge(java.lang.String)>("notifyPortalCheckComplete on null");

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyPortalCheckCompleted: captive=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ni=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>($r8);

        $r9 = r0.<android.net.CaptivePortalTracker: android.net.IConnectivityManager mConnService>;

        interfaceinvoke $r9.<android.net.IConnectivityManager: void captivePortalCheckCompleted(android.net.NetworkInfo,boolean)>(r1, z0);

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

        virtualinvoke r2.<android.os.RemoteException: void printStackTrace()>();

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void sendFailedCaptivePortalCheckBroadcast(long)
    {
        android.net.CaptivePortalTracker r0;
        long l0;

        r0 := @this: android.net.CaptivePortalTracker;

        l0 := @parameter0: long;

        specialinvoke r0.<android.net.CaptivePortalTracker: void sendNetworkConditionsBroadcast(boolean,boolean,long,long)>(0, 0, l0, 0L);

        return;
    }

    private void sendNetworkConditionsBroadcast(boolean, boolean, long, long)
    {
        android.net.CaptivePortalTracker r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        long l0, l1;
        android.content.Intent r1, $r8;
        android.net.wifi.WifiInfo r2;
        java.util.List r3;
        int i2, $i3, $i4, $i5, $i6;
        android.telephony.CellInfo r4;
        java.util.Iterator r5;
        android.content.ContentResolver $r6;
        android.content.Context $r7, $r17;
        android.net.NetworkInfo $r9, $r16;
        android.net.wifi.WifiManager $r10;
        java.lang.String $r11, $r12;
        android.telephony.TelephonyManager $r22, $r24;
        java.lang.StringBuffer $r23;
        java.lang.Object $r26;
        android.telephony.CellIdentityWcdma $r28;
        android.telephony.CellInfoWcdma $r29;
        android.telephony.CellInfoGsm $r30;
        android.telephony.CellIdentityGsm $r31;
        android.telephony.CellInfoLte $r33;
        android.telephony.CellIdentityLte $r34;
        android.telephony.CellInfoCdma $r36;
        android.telephony.CellIdentityCdma $r37;

        r0 := @this: android.net.CaptivePortalTracker;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r7 = r0.<android.net.CaptivePortalTracker: android.content.Context mContext>;

        $r6 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i3 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r6, "wifi_scan_always_enabled", 0);

        if $i3 != 0 goto label02;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>("Don\'t send network conditions - lacking user consent.");

     label01:
        return;

     label02:
        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.NETWORK_CONDITIONS_MEASURED");

        r1 = $r8;

        $r9 = r0.<android.net.CaptivePortalTracker: android.net.NetworkInfo mNetworkInfo>;

        $i4 = virtualinvoke $r9.<android.net.NetworkInfo: int getType()>();

        tableswitch($i4)
        {
            case 0: goto label04;
            case 1: goto label06;
            default: goto label03;
        };

     label03:
        return;

     label04:
        $r22 = r0.<android.net.CaptivePortalTracker: android.telephony.TelephonyManager mTelephonyManager>;

        $i6 = virtualinvoke $r22.<android.telephony.TelephonyManager: int getNetworkType()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("extra_network_type", $i6);

        $r24 = r0.<android.net.CaptivePortalTracker: android.telephony.TelephonyManager mTelephonyManager>;

        r3 = virtualinvoke $r24.<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>();

        if r3 == null goto label01;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

        r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r26 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.telephony.CellInfo) $r26;

        $z2 = virtualinvoke r4.<android.telephony.CellInfo: boolean isRegistered()>();

        if $z2 == 0 goto label05;

        i2 = i2 + 1;

        if i2 <= 1 goto label10;

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>("more than one registered CellInfo.  Can\'t tell which is active.  Bailing.");

        return;

     label06:
        $r10 = r0.<android.net.CaptivePortalTracker: android.net.wifi.WifiManager mWifiManager>;

        r2 = virtualinvoke $r10.<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>();

        if r2 == null goto label09;

        $r11 = virtualinvoke r2.<android.net.wifi.WifiInfo: java.lang.String getSSID()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("extra_ssid", $r11);

        $r12 = virtualinvoke r2.<android.net.wifi.WifiInfo: java.lang.String getBSSID()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("extra_bssid", $r12);

     label07:
        $r16 = r0.<android.net.CaptivePortalTracker: android.net.NetworkInfo mNetworkInfo>;

        $i5 = virtualinvoke $r16.<android.net.NetworkInfo: int getType()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("extra_connectivity_type", $i5);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("extra_response_received", z0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("extra_request_timestamp_ms", l0);

        if z0 == 0 goto label08;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("extra_is_captive_portal", z1);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("extra_response_timestamp_ms", l1);

     label08:
        $r17 = r0.<android.net.CaptivePortalTracker: android.content.Context mContext>;

        virtualinvoke $r17.<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>(r1, "android.permission.ACCESS_NETWORK_CONDITIONS");

        return;

     label09:
        virtualinvoke r0.<android.net.CaptivePortalTracker: void logw(java.lang.String)>("network info is TYPE_WIFI but no ConnectionInfo found");

        return;

     label10:
        $z7 = r4 instanceof android.telephony.CellInfoCdma;

        if $z7 == 0 goto label11;

        $r36 = (android.telephony.CellInfoCdma) r4;

        $r37 = virtualinvoke $r36.<android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("extra_cellid", $r37);

        goto label05;

     label11:
        $z6 = r4 instanceof android.telephony.CellInfoGsm;

        if $z6 == 0 goto label12;

        $r30 = (android.telephony.CellInfoGsm) r4;

        $r31 = virtualinvoke $r30.<android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("extra_cellid", $r31);

        goto label05;

     label12:
        $z5 = r4 instanceof android.telephony.CellInfoLte;

        if $z5 == 0 goto label13;

        $r33 = (android.telephony.CellInfoLte) r4;

        $r34 = virtualinvoke $r33.<android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("extra_cellid", $r34);

        goto label05;

     label13:
        $z4 = r4 instanceof android.telephony.CellInfoWcdma;

        if $z4 == 0 goto label14;

        $r29 = (android.telephony.CellInfoWcdma) r4;

        $r28 = virtualinvoke $r29.<android.telephony.CellInfoWcdma: android.telephony.CellIdentityWcdma getCellIdentity()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("extra_cellid", $r28);

        goto label05;

     label14:
        virtualinvoke r0.<android.net.CaptivePortalTracker: void logw(java.lang.String)>("Registered cellinfo is unrecognized");

        return;
    }

    private void setNotificationOff()
    {
        android.net.CaptivePortalTracker r0;
        android.os.RemoteException r1, $r5;
        android.net.NetworkInfo $r2, $r3;
        android.net.IConnectivityManager $r4;
        int $i0;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: android.net.CaptivePortalTracker;

     label1:
        $r2 = r0.<android.net.CaptivePortalTracker: android.net.NetworkInfo mNetworkInfo>;

        if $r2 == null goto label2;

        $r4 = r0.<android.net.CaptivePortalTracker: android.net.IConnectivityManager mConnService>;

        $r3 = r0.<android.net.CaptivePortalTracker: android.net.NetworkInfo mNetworkInfo>;

        $i0 = virtualinvoke $r3.<android.net.NetworkInfo: int getType()>();

        interfaceinvoke $r4.<android.net.IConnectivityManager: void setProvisioningNotificationVisible(boolean,int,java.lang.String,java.lang.String)>(0, $i0, null, null);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setNotificationOff: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.CaptivePortalTracker: void log(java.lang.String)>($r9);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void detectCaptivePortal(android.net.NetworkInfo)
    {
        android.net.CaptivePortalTracker r0;
        android.net.NetworkInfo r1;
        android.os.Message $r2;

        r0 := @this: android.net.CaptivePortalTracker;

        r1 := @parameter0: android.net.NetworkInfo;

        $r2 = virtualinvoke r0.<android.net.CaptivePortalTracker: android.os.Message obtainMessage(int,java.lang.Object)>(0, r1);

        virtualinvoke r0.<android.net.CaptivePortalTracker: void sendMessage(android.os.Message)>($r2);

        return;
    }

    public static void <clinit>()
    {
        <android.net.CaptivePortalTracker: java.lang.String TAG> = "CaptivePortalTracker";

        <android.net.CaptivePortalTracker: int SOCKET_TIMEOUT_MS> = 10000;

        <android.net.CaptivePortalTracker: java.lang.String SETUP_WIZARD_PACKAGE> = "com.google.android.setupwizard";

        <android.net.CaptivePortalTracker: java.lang.String PERMISSION_ACCESS_NETWORK_CONDITIONS> = "android.permission.ACCESS_NETWORK_CONDITIONS";

        <android.net.CaptivePortalTracker: java.lang.String EXTRA_SSID> = "extra_ssid";

        <android.net.CaptivePortalTracker: java.lang.String EXTRA_RESPONSE_TIMESTAMP_MS> = "extra_response_timestamp_ms";

        <android.net.CaptivePortalTracker: java.lang.String EXTRA_RESPONSE_RECEIVED> = "extra_response_received";

        <android.net.CaptivePortalTracker: java.lang.String EXTRA_REQUEST_TIMESTAMP_MS> = "extra_request_timestamp_ms";

        <android.net.CaptivePortalTracker: java.lang.String EXTRA_NETWORK_TYPE> = "extra_network_type";

        <android.net.CaptivePortalTracker: java.lang.String EXTRA_IS_CAPTIVE_PORTAL> = "extra_is_captive_portal";

        <android.net.CaptivePortalTracker: java.lang.String EXTRA_CONNECTIVITY_TYPE> = "extra_connectivity_type";

        <android.net.CaptivePortalTracker: java.lang.String EXTRA_CELL_ID> = "extra_cellid";

        <android.net.CaptivePortalTracker: java.lang.String EXTRA_BSSID> = "extra_bssid";

        <android.net.CaptivePortalTracker: int DELAYED_CHECK_INTERVAL_MS> = 10000;

        <android.net.CaptivePortalTracker: java.lang.String DEFAULT_SERVER> = "clients3.google.com";

        <android.net.CaptivePortalTracker: boolean DBG> = 1;

        <android.net.CaptivePortalTracker: int CMD_DETECT_PORTAL> = 0;

        <android.net.CaptivePortalTracker: int CMD_DELAYED_CAPTIVE_CHECK> = 2;

        <android.net.CaptivePortalTracker: int CMD_CONNECTIVITY_CHANGE> = 1;

        <android.net.CaptivePortalTracker: java.lang.String ACTION_NETWORK_CONDITIONS_MEASURED> = "android.net.conn.NETWORK_CONDITIONS_MEASURED";

        return;
    }
}
