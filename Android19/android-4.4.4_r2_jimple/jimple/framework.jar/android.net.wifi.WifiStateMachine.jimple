public class android.net.wifi.WifiStateMachine extends com.android.internal.util.StateMachine
{
    private static final java.lang.String ACTION_DELAYED_DRIVER_STOP;
    private static final java.lang.String ACTION_REFRESH_BATCHED_SCAN;
    private static final java.lang.String ACTION_START_SCAN;
    static final int BASE;
    private static final java.lang.String BATCHED_SETTING;
    private static final java.lang.String BATCHED_WORKSOURCE;
    private static final java.lang.String BSSID_STR;
    static final int CMD_ADD_OR_UPDATE_NETWORK;
    static final int CMD_BLACKLIST_NETWORK;
    static final int CMD_BLUETOOTH_ADAPTER_STATE_CHANGE;
    public static final int CMD_BOOT_COMPLETED;
    static final int CMD_CAPTIVE_CHECK_COMPLETE;
    static final int CMD_CLEAR_BLACKLIST;
    static final int CMD_DELAYED_STOP_DRIVER;
    public static final int CMD_DISABLE_P2P_REQ;
    public static final int CMD_DISABLE_P2P_RSP;
    static final int CMD_DISCONNECT;
    static final int CMD_DRIVER_START_TIMED_OUT;
    static final int CMD_ENABLE_ALL_NETWORKS;
    static final int CMD_ENABLE_BACKGROUND_SCAN;
    static final int CMD_ENABLE_NETWORK;
    public static final int CMD_ENABLE_P2P;
    static final int CMD_ENABLE_RSSI_POLL;
    static final int CMD_ENABLE_TDLS;
    static final int CMD_GET_CONFIGURED_NETWORKS;
    static final int CMD_IP_ADDRESS_REMOVED;
    static final int CMD_IP_ADDRESS_UPDATED;
    static final int CMD_NO_NETWORKS_PERIODIC_SCAN;
    static final int CMD_PING_SUPPLICANT;
    public static final int CMD_POLL_BATCHED_SCAN;
    static final int CMD_REASSOCIATE;
    static final int CMD_RECONNECT;
    static final int CMD_RELOAD_TLS_AND_RECONNECT;
    static final int CMD_REMOVE_NETWORK;
    static final int CMD_REQUEST_AP_CONFIG;
    static final int CMD_RESET_SUPPLICANT_STATE;
    static final int CMD_RESPONSE_AP_CONFIG;
    static final int CMD_RSSI_POLL;
    static final int CMD_SAVE_CONFIG;
    static final int CMD_SET_AP_CONFIG;
    static final int CMD_SET_AP_CONFIG_COMPLETED;
    public static final int CMD_SET_BATCHED_SCAN;
    static final int CMD_SET_COUNTRY_CODE;
    static final int CMD_SET_FREQUENCY_BAND;
    static final int CMD_SET_HIGH_PERF_MODE;
    static final int CMD_SET_OPERATIONAL_MODE;
    static final int CMD_SET_SUSPEND_OPT_ENABLED;
    static final int CMD_START_AP;
    static final int CMD_START_AP_FAILURE;
    static final int CMD_START_AP_SUCCESS;
    static final int CMD_START_DRIVER;
    public static final int CMD_START_NEXT_BATCHED_SCAN;
    static final int CMD_START_PACKET_FILTERING;
    static final int CMD_START_SCAN;
    static final int CMD_START_SUPPLICANT;
    static final int CMD_STATIC_IP_FAILURE;
    static final int CMD_STATIC_IP_SUCCESS;
    static final int CMD_STOP_AP;
    static final int CMD_STOP_DRIVER;
    static final int CMD_STOP_PACKET_FILTERING;
    static final int CMD_STOP_SUPPLICANT;
    static final int CMD_STOP_SUPPLICANT_FAILED;
    static final int CMD_TETHER_NOTIFICATION_TIMED_OUT;
    static final int CMD_TETHER_STATE_CHANGE;
    public static final int CONNECT_MODE;
    private static final boolean DBG;
    private static final boolean DEBUG_PARSE;
    private static final int DEFAULT_MAX_DHCP_RETRIES;
    private static final java.lang.String DELAYED_STOP_COUNTER;
    private static final java.lang.String DELIMITER_STR;
    private static final int DRIVER_START_TIME_OUT_MSECS;
    private static final int DRIVER_STOP_REQUEST;
    private static final java.lang.String END_STR;
    private static final int FAILURE;
    private static final java.lang.String FLAGS_STR;
    private static final java.lang.String FREQ_STR;
    private static final java.lang.String ID_STR;
    private static final java.lang.String LEVEL_STR;
    private static final int MAX_RSSI;
    private static final int MIN_INTERVAL_ENABLE_ALL_NETWORKS_MS;
    private static final int MIN_RSSI;
    static final int MULTICAST_V4;
    static final int MULTICAST_V6;
    private static final java.lang.String NETWORKTYPE;
    private static final int POLL_RSSI_INTERVAL_MSECS;
    public static final int SCAN_ONLY_MODE;
    public static final int SCAN_ONLY_WITH_WIFI_OFF_MODE;
    private static final int SCAN_REQUEST;
    private static final int SCAN_RESULT_CACHE_SIZE;
    private static final java.lang.String SSID_STR;
    private static final int SUCCESS;
    private static final int SUPPLICANT_RESTART_INTERVAL_MSECS;
    private static final int SUPPLICANT_RESTART_TRIES;
    private static final int SUSPEND_DUE_TO_DHCP;
    private static final int SUSPEND_DUE_TO_HIGH_PERF;
    private static final int SUSPEND_DUE_TO_SCREEN;
    private static final int TETHER_NOTIFICATION_TIME_OUT_MSECS;
    private static final java.lang.String TSF_STR;
    private static final int UNKNOWN_SCAN_SOURCE;
    private static final java.util.regex.Pattern scanResultPattern;
    private android.app.AlarmManager mAlarmManager;
    private final boolean mBackgroundScanSupported;
    private int mBatchedScanCsph;
    private android.app.PendingIntent mBatchedScanIntervalIntent;
    private long mBatchedScanMinPollTime;
    private int mBatchedScanOwnerUid;
    private final java.util.List mBatchedScanResults;
    private android.net.wifi.BatchedScanSettings mBatchedScanSettings;
    private android.os.WorkSource mBatchedScanWorkSource;
    private final com.android.internal.app.IBatteryStats mBatteryStats;
    private boolean mBluetoothConnectionActive;
    private com.android.internal.util.State mCaptivePortalCheckState;
    private android.net.ConnectivityManager mCm;
    private com.android.internal.util.State mConnectModeState;
    private com.android.internal.util.State mConnectedState;
    private android.content.Context mContext;
    private final java.util.concurrent.atomic.AtomicInteger mCountryCodeSequence;
    private final int mDefaultFrameworkScanIntervalMs;
    private com.android.internal.util.State mDefaultState;
    private int mDelayedStopCounter;
    private boolean mDhcpActive;
    private android.net.DhcpResults mDhcpResults;
    private final java.lang.Object mDhcpResultsLock;
    private android.net.DhcpStateMachine mDhcpStateMachine;
    private com.android.internal.util.State mDisconnectedState;
    private com.android.internal.util.State mDisconnectingState;
    private int mDriverStartToken;
    private com.android.internal.util.State mDriverStartedState;
    private com.android.internal.util.State mDriverStartingState;
    private final int mDriverStopDelayMs;
    private android.app.PendingIntent mDriverStopIntent;
    private com.android.internal.util.State mDriverStoppedState;
    private com.android.internal.util.State mDriverStoppingState;
    private boolean mEnableBackgroundScan;
    private boolean mEnableRssiPolling;
    private int mExpectedBatchedScans;
    private java.util.concurrent.atomic.AtomicBoolean mFilteringMulticastV4Packets;
    private java.util.concurrent.atomic.AtomicInteger mFrequencyBand;
    private boolean mInDelayedStop;
    private com.android.internal.util.State mInitialState;
    private java.lang.String mInterfaceName;
    private android.net.wifi.WifiStateMachine$InterfaceObserver mInterfaceObserver;
    private boolean mIsRunning;
    private com.android.internal.util.State mL2ConnectedState;
    private java.lang.String mLastBssid;
    private long mLastEnableAllNetworksTime;
    private int mLastNetworkId;
    private final android.os.WorkSource mLastRunningWifiUids;
    private java.lang.String mLastSetCountryCode;
    private int mLastSignalLevel;
    private android.net.LinkProperties mLinkProperties;
    private final android.net.LinkProperties mNetlinkLinkProperties;
    private android.net.NetworkInfo mNetworkInfo;
    private int mNotedBatchedScanCsph;
    private android.os.WorkSource mNotedBatchedScanWorkSource;
    private android.os.INetworkManagementService mNwService;
    private com.android.internal.util.State mObtainingIpState;
    private int mOperationalMode;
    private final java.util.concurrent.atomic.AtomicBoolean mP2pConnected;
    private final boolean mP2pSupported;
    private int mPeriodicScanToken;
    private volatile java.lang.String mPersistedCountryCode;
    private final java.lang.String mPrimaryDeviceType;
    private int mReconnectCount;
    private com.android.internal.util.AsyncChannel mReplyChannel;
    private boolean mReportedRunning;
    private int mRssiPollToken;
    private final android.os.WorkSource mRunningWifiUids;
    private android.app.PendingIntent mScanIntent;
    private com.android.internal.util.State mScanModeState;
    private final android.util.LruCache mScanResultCache;
    private boolean mScanResultIsPending;
    private java.util.List mScanResults;
    private android.os.WorkSource mScanWorkSource;
    private java.util.concurrent.atomic.AtomicBoolean mScreenBroadcastReceived;
    private com.android.internal.util.State mSoftApStartedState;
    private com.android.internal.util.State mSoftApStartingState;
    private int mSupplicantRestartCount;
    private long mSupplicantScanIntervalMs;
    private com.android.internal.util.State mSupplicantStartedState;
    private com.android.internal.util.State mSupplicantStartingState;
    private android.net.wifi.SupplicantStateTracker mSupplicantStateTracker;
    private int mSupplicantStopFailureToken;
    private com.android.internal.util.State mSupplicantStoppingState;
    private int mSuspendOptNeedsDisabled;
    private android.os.PowerManager$WakeLock mSuspendWakeLock;
    private boolean mTemporarilyDisconnectWifi;
    private java.lang.String mTetherInterfaceName;
    private int mTetherToken;
    private com.android.internal.util.State mTetheredState;
    private com.android.internal.util.State mTetheringState;
    private com.android.internal.util.State mUntetheringState;
    private java.util.concurrent.atomic.AtomicBoolean mUserWantsSuspendOpt;
    private com.android.internal.util.State mVerifyingLinkState;
    private com.android.internal.util.State mWaitForP2pDisableState;
    private android.os.PowerManager$WakeLock mWakeLock;
    private com.android.internal.util.AsyncChannel mWifiApConfigChannel;
    private final java.util.concurrent.atomic.AtomicInteger mWifiApState;
    private android.net.wifi.WifiConfigStore mWifiConfigStore;
    private android.net.wifi.WifiInfo mWifiInfo;
    private android.net.wifi.WifiMonitor mWifiMonitor;
    private android.net.wifi.WifiNative mWifiNative;
    private com.android.internal.util.AsyncChannel mWifiP2pChannel;
    private android.net.wifi.p2p.WifiP2pManager mWifiP2pManager;
    private final java.util.concurrent.atomic.AtomicInteger mWifiState;
    private com.android.internal.util.State mWpsRunningState;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <android.net.wifi.WifiStateMachine: int UNKNOWN_SCAN_SOURCE> = -1;

        <android.net.wifi.WifiStateMachine: java.lang.String TSF_STR> = "tsf=";

        <android.net.wifi.WifiStateMachine: int TETHER_NOTIFICATION_TIME_OUT_MSECS> = 5000;

        <android.net.wifi.WifiStateMachine: int SUSPEND_DUE_TO_SCREEN> = 4;

        <android.net.wifi.WifiStateMachine: int SUSPEND_DUE_TO_HIGH_PERF> = 2;

        <android.net.wifi.WifiStateMachine: int SUSPEND_DUE_TO_DHCP> = 1;

        <android.net.wifi.WifiStateMachine: int SUPPLICANT_RESTART_TRIES> = 5;

        <android.net.wifi.WifiStateMachine: int SUPPLICANT_RESTART_INTERVAL_MSECS> = 5000;

        <android.net.wifi.WifiStateMachine: int SUCCESS> = 1;

        <android.net.wifi.WifiStateMachine: java.lang.String SSID_STR> = "ssid=";

        <android.net.wifi.WifiStateMachine: int SCAN_RESULT_CACHE_SIZE> = 80;

        <android.net.wifi.WifiStateMachine: int SCAN_REQUEST> = 0;

        <android.net.wifi.WifiStateMachine: int SCAN_ONLY_WITH_WIFI_OFF_MODE> = 3;

        <android.net.wifi.WifiStateMachine: int SCAN_ONLY_MODE> = 2;

        <android.net.wifi.WifiStateMachine: int POLL_RSSI_INTERVAL_MSECS> = 3000;

        <android.net.wifi.WifiStateMachine: java.lang.String NETWORKTYPE> = "WIFI";

        <android.net.wifi.WifiStateMachine: int MULTICAST_V6> = 1;

        <android.net.wifi.WifiStateMachine: int MULTICAST_V4> = 0;

        <android.net.wifi.WifiStateMachine: int MIN_RSSI> = -200;

        <android.net.wifi.WifiStateMachine: int MIN_INTERVAL_ENABLE_ALL_NETWORKS_MS> = 600000;

        <android.net.wifi.WifiStateMachine: int MAX_RSSI> = 256;

        <android.net.wifi.WifiStateMachine: java.lang.String LEVEL_STR> = "level=";

        <android.net.wifi.WifiStateMachine: java.lang.String ID_STR> = "id=";

        <android.net.wifi.WifiStateMachine: java.lang.String FREQ_STR> = "freq=";

        <android.net.wifi.WifiStateMachine: java.lang.String FLAGS_STR> = "flags=";

        <android.net.wifi.WifiStateMachine: int FAILURE> = -1;

        <android.net.wifi.WifiStateMachine: java.lang.String END_STR> = "####";

        <android.net.wifi.WifiStateMachine: int DRIVER_STOP_REQUEST> = 0;

        <android.net.wifi.WifiStateMachine: int DRIVER_START_TIME_OUT_MSECS> = 10000;

        <android.net.wifi.WifiStateMachine: java.lang.String DELIMITER_STR> = "====";

        <android.net.wifi.WifiStateMachine: java.lang.String DELAYED_STOP_COUNTER> = "DelayedStopCounter";

        <android.net.wifi.WifiStateMachine: int DEFAULT_MAX_DHCP_RETRIES> = 9;

        <android.net.wifi.WifiStateMachine: boolean DEBUG_PARSE> = 0;

        <android.net.wifi.WifiStateMachine: boolean DBG> = 0;

        <android.net.wifi.WifiStateMachine: int CONNECT_MODE> = 1;

        <android.net.wifi.WifiStateMachine: int CMD_TETHER_STATE_CHANGE> = 131101;

        <android.net.wifi.WifiStateMachine: int CMD_TETHER_NOTIFICATION_TIMED_OUT> = 131102;

        <android.net.wifi.WifiStateMachine: int CMD_STOP_SUPPLICANT_FAILED> = 131089;

        <android.net.wifi.WifiStateMachine: int CMD_STOP_SUPPLICANT> = 131084;

        <android.net.wifi.WifiStateMachine: int CMD_STOP_PACKET_FILTERING> = 131157;

        <android.net.wifi.WifiStateMachine: int CMD_STOP_DRIVER> = 131086;

        <android.net.wifi.WifiStateMachine: int CMD_STOP_AP> = 131096;

        <android.net.wifi.WifiStateMachine: int CMD_STATIC_IP_SUCCESS> = 131087;

        <android.net.wifi.WifiStateMachine: int CMD_STATIC_IP_FAILURE> = 131088;

        <android.net.wifi.WifiStateMachine: int CMD_START_SUPPLICANT> = 131083;

        <android.net.wifi.WifiStateMachine: int CMD_START_SCAN> = 131143;

        <android.net.wifi.WifiStateMachine: int CMD_START_PACKET_FILTERING> = 131156;

        <android.net.wifi.WifiStateMachine: int CMD_START_NEXT_BATCHED_SCAN> = 131208;

        <android.net.wifi.WifiStateMachine: int CMD_START_DRIVER> = 131085;

        <android.net.wifi.WifiStateMachine: int CMD_START_AP_SUCCESS> = 131094;

        <android.net.wifi.WifiStateMachine: int CMD_START_AP_FAILURE> = 131095;

        <android.net.wifi.WifiStateMachine: int CMD_START_AP> = 131093;

        <android.net.wifi.WifiStateMachine: int CMD_SET_SUSPEND_OPT_ENABLED> = 131158;

        <android.net.wifi.WifiStateMachine: int CMD_SET_OPERATIONAL_MODE> = 131144;

        <android.net.wifi.WifiStateMachine: int CMD_SET_HIGH_PERF_MODE> = 131149;

        <android.net.wifi.WifiStateMachine: int CMD_SET_FREQUENCY_BAND> = 131162;

        <android.net.wifi.WifiStateMachine: int CMD_SET_COUNTRY_CODE> = 131152;

        <android.net.wifi.WifiStateMachine: int CMD_SET_BATCHED_SCAN> = 131207;

        <android.net.wifi.WifiStateMachine: int CMD_SET_AP_CONFIG_COMPLETED> = 131098;

        <android.net.wifi.WifiStateMachine: int CMD_SET_AP_CONFIG> = 131097;

        <android.net.wifi.WifiStateMachine: int CMD_SAVE_CONFIG> = 131130;

        <android.net.wifi.WifiStateMachine: int CMD_RSSI_POLL> = 131155;

        <android.net.wifi.WifiStateMachine: int CMD_RESPONSE_AP_CONFIG> = 131100;

        <android.net.wifi.WifiStateMachine: int CMD_RESET_SUPPLICANT_STATE> = 131183;

        <android.net.wifi.WifiStateMachine: int CMD_REQUEST_AP_CONFIG> = 131099;

        <android.net.wifi.WifiStateMachine: int CMD_REMOVE_NETWORK> = 131125;

        <android.net.wifi.WifiStateMachine: int CMD_RELOAD_TLS_AND_RECONNECT> = 131214;

        <android.net.wifi.WifiStateMachine: int CMD_RECONNECT> = 131146;

        <android.net.wifi.WifiStateMachine: int CMD_REASSOCIATE> = 131147;

        <android.net.wifi.WifiStateMachine: int CMD_POLL_BATCHED_SCAN> = 131209;

        <android.net.wifi.WifiStateMachine: int CMD_PING_SUPPLICANT> = 131123;

        <android.net.wifi.WifiStateMachine: int CMD_NO_NETWORKS_PERIODIC_SCAN> = 131160;

        <android.net.wifi.WifiStateMachine: int CMD_IP_ADDRESS_UPDATED> = 131212;

        <android.net.wifi.WifiStateMachine: int CMD_IP_ADDRESS_REMOVED> = 131213;

        <android.net.wifi.WifiStateMachine: int CMD_GET_CONFIGURED_NETWORKS> = 131131;

        <android.net.wifi.WifiStateMachine: int CMD_ENABLE_TDLS> = 131164;

        <android.net.wifi.WifiStateMachine: int CMD_ENABLE_RSSI_POLL> = 131154;

        <android.net.wifi.WifiStateMachine: int CMD_ENABLE_P2P> = 131203;

        <android.net.wifi.WifiStateMachine: int CMD_ENABLE_NETWORK> = 131126;

        <android.net.wifi.WifiStateMachine: int CMD_ENABLE_BACKGROUND_SCAN> = 131163;

        <android.net.wifi.WifiStateMachine: int CMD_ENABLE_ALL_NETWORKS> = 131127;

        <android.net.wifi.WifiStateMachine: int CMD_DRIVER_START_TIMED_OUT> = 131091;

        <android.net.wifi.WifiStateMachine: int CMD_DISCONNECT> = 131145;

        <android.net.wifi.WifiStateMachine: int CMD_DISABLE_P2P_RSP> = 131205;

        <android.net.wifi.WifiStateMachine: int CMD_DISABLE_P2P_REQ> = 131204;

        <android.net.wifi.WifiStateMachine: int CMD_DELAYED_STOP_DRIVER> = 131090;

        <android.net.wifi.WifiStateMachine: int CMD_CLEAR_BLACKLIST> = 131129;

        <android.net.wifi.WifiStateMachine: int CMD_CAPTIVE_CHECK_COMPLETE> = 131092;

        <android.net.wifi.WifiStateMachine: int CMD_BOOT_COMPLETED> = 131206;

        <android.net.wifi.WifiStateMachine: int CMD_BLUETOOTH_ADAPTER_STATE_CHANGE> = 131103;

        <android.net.wifi.WifiStateMachine: int CMD_BLACKLIST_NETWORK> = 131128;

        <android.net.wifi.WifiStateMachine: int CMD_ADD_OR_UPDATE_NETWORK> = 131124;

        <android.net.wifi.WifiStateMachine: java.lang.String BSSID_STR> = "bssid=";

        <android.net.wifi.WifiStateMachine: java.lang.String BATCHED_WORKSOURCE> = "batched_worksource";

        <android.net.wifi.WifiStateMachine: java.lang.String BATCHED_SETTING> = "batched_settings";

        <android.net.wifi.WifiStateMachine: int BASE> = 131072;

        <android.net.wifi.WifiStateMachine: java.lang.String ACTION_START_SCAN> = "com.android.server.WifiManager.action.START_SCAN";

        <android.net.wifi.WifiStateMachine: java.lang.String ACTION_REFRESH_BATCHED_SCAN> = "com.android.server.WifiManager.action.REFRESH_BATCHED_SCAN";

        <android.net.wifi.WifiStateMachine: java.lang.String ACTION_DELAYED_DRIVER_STOP> = "com.android.server.WifiManager.action.DELAYED_DRIVER_STOP";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\t+");

        <android.net.wifi.WifiStateMachine: java.util.regex.Pattern scanResultPattern> = $r0;

        return;
    }

    public void <init>(android.content.Context, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        android.content.Context r1, $r56, $r72, $r76, $r80, $r83, $r84, $r86, $r89, $r90, $r93, $r95, $r99, $r101, $r104, $r113, $r124, $r128, $r187;
        java.lang.String r2, $r61, $r88, $r117, $r179, $r183;
        android.os.RemoteException r3, $r186;
        android.content.Intent r4, r5, r9, r236, r237, r250;
        java.util.concurrent.atomic.AtomicBoolean r6, r188, r191, r195, r197;
        boolean z0, $z1, $z2;
        android.content.IntentFilter r7, r239, r241, r242, r245, r248;
        android.os.PowerManager r8;
        android.os.INetworkManagementService $r50, $r77;
        android.os.IBinder $r51, $r53;
        com.android.internal.app.IBatteryStats $r52;
        android.content.pm.PackageManager $r55;
        android.net.wifi.WifiNative $r57, $r63, r228;
        android.net.wifi.WifiConfigStore $r60, r229;
        java.lang.Object $r65, $r79, $r130, r192;
        android.net.wifi.p2p.WifiP2pManager $r66;
        android.net.NetworkInfo $r67, r227;
        android.os.Handler $r69, $r109;
        android.app.AlarmManager $r74;
        android.app.PendingIntent $r75, $r87;
        android.net.wifi.WifiStateMachine$InterfaceObserver $r78, r235;
        int $i0, $i1, $i2;
        android.content.res.Resources $r81, $r82, $r91, $r92;
        android.content.ContentResolver $r100, $r112;
        android.net.Uri $r111;
        android.os.PowerManager$WakeLock $r116, $r118, $r119;
        com.android.internal.util.State $r120, $r121, $r122, $r123, $r131, $r132, $r133, $r134, $r135, $r136, $r137, $r138, $r139, $r140, $r141, $r142, $r143, $r144, $r145, $r146, $r147, $r148, $r149, $r150, $r151, $r152, $r153, $r154, $r155, $r156, $r157, $r158, $r159, $r160, $r161, $r162, $r163, $r164, $r165, $r166, $r169, $r170, $r171, $r172, $r173, $r174, $r175, $r176, $r177, $r178;
        java.lang.StringBuilder $r180, $r182, r251;
        android.os.UserHandle $r184;
        java.util.ArrayList r189, r190;
        java.util.concurrent.atomic.AtomicInteger r193, r194, r223, r224;
        com.android.internal.util.AsyncChannel r196;
        android.net.wifi.WifiStateMachine$DefaultState r198;
        android.net.wifi.WifiStateMachine$InitialState r199;
        android.net.wifi.WifiStateMachine$SupplicantStartingState r200;
        android.net.wifi.WifiStateMachine$SupplicantStartedState r201;
        android.net.wifi.WifiStateMachine$SupplicantStoppingState r202;
        android.net.wifi.WifiStateMachine$DriverStartingState r203;
        android.net.wifi.WifiStateMachine$DriverStartedState r204;
        android.net.wifi.WifiStateMachine$WaitForP2pDisableState r205;
        android.net.wifi.WifiStateMachine$DriverStoppingState r206;
        android.net.wifi.WifiStateMachine$DriverStoppedState r207;
        android.net.wifi.WifiStateMachine$ScanModeState r208;
        android.net.wifi.WifiStateMachine$ConnectModeState r209;
        android.net.wifi.WifiStateMachine$L2ConnectedState r210;
        android.net.wifi.WifiStateMachine$ObtainingIpState r211;
        android.net.wifi.WifiStateMachine$VerifyingLinkState r212;
        android.net.wifi.WifiStateMachine$CaptivePortalCheckState r213;
        android.net.wifi.WifiStateMachine$ConnectedState r214;
        android.net.wifi.WifiStateMachine$DisconnectingState r215;
        android.net.wifi.WifiStateMachine$DisconnectedState r216;
        android.net.wifi.WifiStateMachine$WpsRunningState r217;
        android.net.wifi.WifiStateMachine$SoftApStartingState r218;
        android.net.wifi.WifiStateMachine$SoftApStartedState r219;
        android.net.wifi.WifiStateMachine$TetheringState r220;
        android.net.wifi.WifiStateMachine$TetheredState r221;
        android.net.wifi.WifiStateMachine$UntetheringState r222;
        android.os.WorkSource r225, r226;
        android.net.wifi.WifiMonitor r230;
        android.net.wifi.WifiInfo r231;
        android.net.wifi.SupplicantStateTracker r232;
        android.net.LinkProperties r233, r234;
        android.net.wifi.WifiStateMachine$1 r238;
        android.net.wifi.WifiStateMachine$2 r240;
        android.net.wifi.WifiStateMachine$3 r243;
        android.net.wifi.WifiStateMachine$4 r244;
        android.net.wifi.WifiStateMachine$5 r246;
        android.net.wifi.WifiStateMachine$6 r247;
        android.util.LruCache r249;
        android.net.INetworkManagementEventObserver r252;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.internal.util.StateMachine: void <init>(java.lang.String)>("WifiStateMachine");

        r188 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r188.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mP2pConnected> = r188;

        r0.<android.net.wifi.WifiStateMachine: boolean mTemporarilyDisconnectWifi> = 0;

        r189 = new java.util.ArrayList;

        specialinvoke r189.<java.util.ArrayList: void <init>()>();

        r0.<android.net.wifi.WifiStateMachine: java.util.List mScanResults> = r189;

        r190 = new java.util.ArrayList;

        specialinvoke r190.<java.util.ArrayList: void <init>()>();

        r0.<android.net.wifi.WifiStateMachine: java.util.List mBatchedScanResults> = r190;

        r0.<android.net.wifi.WifiStateMachine: int mBatchedScanOwnerUid> = -1;

        r0.<android.net.wifi.WifiStateMachine: int mExpectedBatchedScans> = 0;

        r0.<android.net.wifi.WifiStateMachine: long mBatchedScanMinPollTime> = 0L;

        r0.<android.net.wifi.WifiStateMachine: int mLastSignalLevel> = -1;

        r0.<android.net.wifi.WifiStateMachine: boolean mEnableRssiPolling> = 0;

        r0.<android.net.wifi.WifiStateMachine: boolean mEnableBackgroundScan> = 0;

        r0.<android.net.wifi.WifiStateMachine: int mRssiPollToken> = 0;

        r0.<android.net.wifi.WifiStateMachine: int mReconnectCount> = 0;

        r0.<android.net.wifi.WifiStateMachine: int mOperationalMode> = 1;

        r0.<android.net.wifi.WifiStateMachine: boolean mScanResultIsPending> = 0;

        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mScanWorkSource> = null;

        r191 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r191.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mScreenBroadcastReceived> = r191;

        r0.<android.net.wifi.WifiStateMachine: boolean mBluetoothConnectionActive> = 0;

        r0.<android.net.wifi.WifiStateMachine: int mSupplicantRestartCount> = 0;

        r0.<android.net.wifi.WifiStateMachine: int mSupplicantStopFailureToken> = 0;

        r0.<android.net.wifi.WifiStateMachine: int mTetherToken> = 0;

        r0.<android.net.wifi.WifiStateMachine: int mDriverStartToken> = 0;

        r0.<android.net.wifi.WifiStateMachine: int mPeriodicScanToken> = 0;

        r192 = new java.lang.Object;

        specialinvoke r192.<java.lang.Object: void <init>()>();

        r0.<android.net.wifi.WifiStateMachine: java.lang.Object mDhcpResultsLock> = r192;

        r0.<android.net.wifi.WifiStateMachine: boolean mDhcpActive> = 0;

        r193 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r193.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mCountryCodeSequence> = r193;

        r194 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r194.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mFrequencyBand> = r194;

        r195 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r195.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mFilteringMulticastV4Packets> = r195;

        r196 = new com.android.internal.util.AsyncChannel;

        specialinvoke r196.<com.android.internal.util.AsyncChannel: void <init>()>();

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mReplyChannel> = r196;

        r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled> = 0;

        r197 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r197.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mUserWantsSuspendOpt> = r197;

        r0.<android.net.wifi.WifiStateMachine: boolean mInDelayedStop> = 0;

        r198 = new android.net.wifi.WifiStateMachine$DefaultState;

        specialinvoke r198.<android.net.wifi.WifiStateMachine$DefaultState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDefaultState> = r198;

        r199 = new android.net.wifi.WifiStateMachine$InitialState;

        specialinvoke r199.<android.net.wifi.WifiStateMachine$InitialState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mInitialState> = r199;

        r200 = new android.net.wifi.WifiStateMachine$SupplicantStartingState;

        specialinvoke r200.<android.net.wifi.WifiStateMachine$SupplicantStartingState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStartingState> = r200;

        r201 = new android.net.wifi.WifiStateMachine$SupplicantStartedState;

        specialinvoke r201.<android.net.wifi.WifiStateMachine$SupplicantStartedState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStartedState> = r201;

        r202 = new android.net.wifi.WifiStateMachine$SupplicantStoppingState;

        specialinvoke r202.<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStoppingState> = r202;

        r203 = new android.net.wifi.WifiStateMachine$DriverStartingState;

        specialinvoke r203.<android.net.wifi.WifiStateMachine$DriverStartingState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStartingState> = r203;

        r204 = new android.net.wifi.WifiStateMachine$DriverStartedState;

        specialinvoke r204.<android.net.wifi.WifiStateMachine$DriverStartedState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStartedState> = r204;

        r205 = new android.net.wifi.WifiStateMachine$WaitForP2pDisableState;

        specialinvoke r205.<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mWaitForP2pDisableState> = r205;

        r206 = new android.net.wifi.WifiStateMachine$DriverStoppingState;

        specialinvoke r206.<android.net.wifi.WifiStateMachine$DriverStoppingState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStoppingState> = r206;

        r207 = new android.net.wifi.WifiStateMachine$DriverStoppedState;

        specialinvoke r207.<android.net.wifi.WifiStateMachine$DriverStoppedState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStoppedState> = r207;

        r208 = new android.net.wifi.WifiStateMachine$ScanModeState;

        specialinvoke r208.<android.net.wifi.WifiStateMachine$ScanModeState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mScanModeState> = r208;

        r209 = new android.net.wifi.WifiStateMachine$ConnectModeState;

        specialinvoke r209.<android.net.wifi.WifiStateMachine$ConnectModeState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mConnectModeState> = r209;

        r210 = new android.net.wifi.WifiStateMachine$L2ConnectedState;

        specialinvoke r210.<android.net.wifi.WifiStateMachine$L2ConnectedState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mL2ConnectedState> = r210;

        r211 = new android.net.wifi.WifiStateMachine$ObtainingIpState;

        specialinvoke r211.<android.net.wifi.WifiStateMachine$ObtainingIpState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mObtainingIpState> = r211;

        r212 = new android.net.wifi.WifiStateMachine$VerifyingLinkState;

        specialinvoke r212.<android.net.wifi.WifiStateMachine$VerifyingLinkState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mVerifyingLinkState> = r212;

        r213 = new android.net.wifi.WifiStateMachine$CaptivePortalCheckState;

        specialinvoke r213.<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mCaptivePortalCheckState> = r213;

        r214 = new android.net.wifi.WifiStateMachine$ConnectedState;

        specialinvoke r214.<android.net.wifi.WifiStateMachine$ConnectedState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mConnectedState> = r214;

        r215 = new android.net.wifi.WifiStateMachine$DisconnectingState;

        specialinvoke r215.<android.net.wifi.WifiStateMachine$DisconnectingState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDisconnectingState> = r215;

        r216 = new android.net.wifi.WifiStateMachine$DisconnectedState;

        specialinvoke r216.<android.net.wifi.WifiStateMachine$DisconnectedState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDisconnectedState> = r216;

        r217 = new android.net.wifi.WifiStateMachine$WpsRunningState;

        specialinvoke r217.<android.net.wifi.WifiStateMachine$WpsRunningState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mWpsRunningState> = r217;

        r218 = new android.net.wifi.WifiStateMachine$SoftApStartingState;

        specialinvoke r218.<android.net.wifi.WifiStateMachine$SoftApStartingState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSoftApStartingState> = r218;

        r219 = new android.net.wifi.WifiStateMachine$SoftApStartedState;

        specialinvoke r219.<android.net.wifi.WifiStateMachine$SoftApStartedState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSoftApStartedState> = r219;

        r220 = new android.net.wifi.WifiStateMachine$TetheringState;

        specialinvoke r220.<android.net.wifi.WifiStateMachine$TetheringState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mTetheringState> = r220;

        r221 = new android.net.wifi.WifiStateMachine$TetheredState;

        specialinvoke r221.<android.net.wifi.WifiStateMachine$TetheredState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mTetheredState> = r221;

        r222 = new android.net.wifi.WifiStateMachine$UntetheringState;

        specialinvoke r222.<android.net.wifi.WifiStateMachine$UntetheringState: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mUntetheringState> = r222;

        r223 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r223.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mWifiState> = r223;

        r224 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r224.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(11);

        r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mWifiApState> = r224;

        r0.<android.net.wifi.WifiStateMachine: boolean mIsRunning> = 0;

        r0.<android.net.wifi.WifiStateMachine: boolean mReportedRunning> = 0;

        r225 = new android.os.WorkSource;

        specialinvoke r225.<android.os.WorkSource: void <init>()>();

        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mRunningWifiUids> = r225;

        r226 = new android.os.WorkSource;

        specialinvoke r226.<android.os.WorkSource: void <init>()>();

        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mLastRunningWifiUids> = r226;

        r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings> = null;

        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mBatchedScanWorkSource> = null;

        r0.<android.net.wifi.WifiStateMachine: int mBatchedScanCsph> = 0;

        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource> = null;

        r0.<android.net.wifi.WifiStateMachine: int mNotedBatchedScanCsph> = 0;

        r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext> = r1;

        r0.<android.net.wifi.WifiStateMachine: java.lang.String mInterfaceName> = r2;

        r227 = new android.net.NetworkInfo;

        specialinvoke r227.<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>(1, 0, "WIFI", "");

        r0.<android.net.wifi.WifiStateMachine: android.net.NetworkInfo mNetworkInfo> = r227;

        $r53 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("batterystats");

        $r52 = staticinvoke <com.android.internal.app.IBatteryStats$Stub: com.android.internal.app.IBatteryStats asInterface(android.os.IBinder)>($r53);

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats> = $r52;

        $r51 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("network_management");

        $r50 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService asInterface(android.os.IBinder)>($r51);

        r0.<android.net.wifi.WifiStateMachine: android.os.INetworkManagementService mNwService> = $r50;

        $r56 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r55 = virtualinvoke $r56.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r55.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.wifi.direct");

        r0.<android.net.wifi.WifiStateMachine: boolean mP2pSupported> = $z1;

        r228 = new android.net.wifi.WifiNative;

        $r61 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mInterfaceName>;

        specialinvoke r228.<android.net.wifi.WifiNative: void <init>(java.lang.String)>($r61);

        r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative> = r228;

        r229 = new android.net.wifi.WifiConfigStore;

        $r63 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        specialinvoke r229.<android.net.wifi.WifiConfigStore: void <init>(android.content.Context,android.net.wifi.WifiNative)>(r1, $r63);

        r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfigStore mWifiConfigStore> = r229;

        r230 = new android.net.wifi.WifiMonitor;

        $r57 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        specialinvoke r230.<android.net.wifi.WifiMonitor: void <init>(com.android.internal.util.StateMachine,android.net.wifi.WifiNative)>(r0, $r57);

        r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiMonitor mWifiMonitor> = r230;

        r231 = new android.net.wifi.WifiInfo;

        specialinvoke r231.<android.net.wifi.WifiInfo: void <init>()>();

        r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo> = r231;

        r232 = new android.net.wifi.SupplicantStateTracker;

        $r60 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfigStore mWifiConfigStore>;

        $r69 = virtualinvoke r0.<android.net.wifi.WifiStateMachine: android.os.Handler getHandler()>();

        specialinvoke r232.<android.net.wifi.SupplicantStateTracker: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.net.wifi.WifiConfigStore,android.os.Handler)>(r1, r0, $r60, $r69);

        r0.<android.net.wifi.WifiStateMachine: android.net.wifi.SupplicantStateTracker mSupplicantStateTracker> = r232;

        r233 = new android.net.LinkProperties;

        specialinvoke r233.<android.net.LinkProperties: void <init>()>();

        r0.<android.net.wifi.WifiStateMachine: android.net.LinkProperties mLinkProperties> = r233;

        r234 = new android.net.LinkProperties;

        specialinvoke r234.<android.net.LinkProperties: void <init>()>();

        r0.<android.net.wifi.WifiStateMachine: android.net.LinkProperties mNetlinkLinkProperties> = r234;

        $r72 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r65 = virtualinvoke $r72.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifip2p");

        $r66 = (android.net.wifi.p2p.WifiP2pManager) $r65;

        r0.<android.net.wifi.WifiStateMachine: android.net.wifi.p2p.WifiP2pManager mWifiP2pManager> = $r66;

        $r67 = r0.<android.net.wifi.WifiStateMachine: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r67.<android.net.NetworkInfo: void setIsAvailable(boolean)>(0);

        r0.<android.net.wifi.WifiStateMachine: java.lang.String mLastBssid> = null;

        r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId> = -1;

        r0.<android.net.wifi.WifiStateMachine: int mLastSignalLevel> = -1;

        r235 = new android.net.wifi.WifiStateMachine$InterfaceObserver;

        specialinvoke r235.<android.net.wifi.WifiStateMachine$InterfaceObserver: void <init>(android.net.wifi.WifiStateMachine,android.net.wifi.WifiStateMachine)>(r0, r0);

        r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiStateMachine$InterfaceObserver mInterfaceObserver> = r235;

     label1:
        $r77 = r0.<android.net.wifi.WifiStateMachine: android.os.INetworkManagementService mNwService>;

        $r78 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiStateMachine$InterfaceObserver mInterfaceObserver>;

        r252 = (android.net.INetworkManagementEventObserver) $r78;

        interfaceinvoke $r77.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>(r252);

     label2:
        $r80 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r79 = virtualinvoke $r80.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        $r74 = (android.app.AlarmManager) $r79;

        r0.<android.net.wifi.WifiStateMachine: android.app.AlarmManager mAlarmManager> = $r74;

        r236 = new android.content.Intent;

        specialinvoke r236.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("com.android.server.WifiManager.action.START_SCAN", null);

        r4 = r236;

        $r76 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r75 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r76, 0, r4, 0);

        r0.<android.net.wifi.WifiStateMachine: android.app.PendingIntent mScanIntent> = $r75;

        r237 = new android.content.Intent;

        specialinvoke r237.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("com.android.server.WifiManager.action.REFRESH_BATCHED_SCAN", null);

        r5 = r237;

        $r84 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r87 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r84, 0, r5, 0);

        r0.<android.net.wifi.WifiStateMachine: android.app.PendingIntent mBatchedScanIntervalIntent> = $r87;

        $r86 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r81 = virtualinvoke $r86.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r81.<android.content.res.Resources: int getInteger(int)>(17694737);

        r0.<android.net.wifi.WifiStateMachine: int mDefaultFrameworkScanIntervalMs> = $i0;

        $r83 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r82 = virtualinvoke $r83.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r82.<android.content.res.Resources: int getInteger(int)>(17694738);

        r0.<android.net.wifi.WifiStateMachine: int mDriverStopDelayMs> = $i1;

        $r93 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r92 = virtualinvoke $r93.<android.content.Context: android.content.res.Resources getResources()>();

        $z2 = virtualinvoke $r92.<android.content.res.Resources: boolean getBoolean(int)>(17891351);

        r0.<android.net.wifi.WifiStateMachine: boolean mBackgroundScanSupported> = $z2;

        $r90 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r91 = virtualinvoke $r90.<android.content.Context: android.content.res.Resources getResources()>();

        $r88 = virtualinvoke $r91.<android.content.res.Resources: java.lang.String getString(int)>(17039386);

        r0.<android.net.wifi.WifiStateMachine: java.lang.String mPrimaryDeviceType> = $r88;

        r6 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mUserWantsSuspendOpt>;

        $r89 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r100 = virtualinvoke $r89.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r100, "wifi_suspend_optimizations_enabled", 1);

        if $i2 != 1 goto label5;

        z0 = 1;

     label3:
        virtualinvoke r6.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        $r99 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        r238 = new android.net.wifi.WifiStateMachine$1;

        specialinvoke r238.<android.net.wifi.WifiStateMachine$1: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r239 = new android.content.IntentFilter;

        specialinvoke r239.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.conn.TETHER_STATE_CHANGED");

        virtualinvoke $r99.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(r238, r239);

        $r95 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        r240 = new android.net.wifi.WifiStateMachine$2;

        specialinvoke r240.<android.net.wifi.WifiStateMachine$2: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r241 = new android.content.IntentFilter;

        specialinvoke r241.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.WifiManager.action.START_SCAN");

        virtualinvoke $r95.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(r240, r241);

        r242 = new android.content.IntentFilter;

        specialinvoke r242.<android.content.IntentFilter: void <init>()>();

        r7 = r242;

        virtualinvoke r7.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_ON");

        virtualinvoke r7.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        virtualinvoke r7.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.server.WifiManager.action.REFRESH_BATCHED_SCAN");

        $r104 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        r243 = new android.net.wifi.WifiStateMachine$3;

        specialinvoke r243.<android.net.wifi.WifiStateMachine$3: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        virtualinvoke $r104.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(r243, r7);

        $r101 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        r244 = new android.net.wifi.WifiStateMachine$4;

        specialinvoke r244.<android.net.wifi.WifiStateMachine$4: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r245 = new android.content.IntentFilter;

        specialinvoke r245.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.WifiManager.action.DELAYED_DRIVER_STOP");

        virtualinvoke $r101.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(r244, r245);

        $r113 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r112 = virtualinvoke $r113.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r111 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("wifi_suspend_optimizations_enabled");

        r246 = new android.net.wifi.WifiStateMachine$5;

        $r109 = virtualinvoke r0.<android.net.wifi.WifiStateMachine: android.os.Handler getHandler()>();

        specialinvoke r246.<android.net.wifi.WifiStateMachine$5: void <init>(android.net.wifi.WifiStateMachine,android.os.Handler)>(r0, $r109);

        virtualinvoke $r112.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r111, 0, r246);

        $r124 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        r247 = new android.net.wifi.WifiStateMachine$6;

        specialinvoke r247.<android.net.wifi.WifiStateMachine$6: void <init>(android.net.wifi.WifiStateMachine)>(r0);

        r248 = new android.content.IntentFilter;

        specialinvoke r248.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.BOOT_COMPLETED");

        virtualinvoke $r124.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(r247, r248);

        r249 = new android.util.LruCache;

        specialinvoke r249.<android.util.LruCache: void <init>(int)>(80);

        r0.<android.net.wifi.WifiStateMachine: android.util.LruCache mScanResultCache> = r249;

        $r128 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r130 = virtualinvoke $r128.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r8 = (android.os.PowerManager) $r130;

        $r117 = virtualinvoke r0.<android.net.wifi.WifiStateMachine: java.lang.String getName()>();

        $r116 = virtualinvoke r8.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, $r117);

        r0.<android.net.wifi.WifiStateMachine: android.os.PowerManager$WakeLock mWakeLock> = $r116;

        $r119 = virtualinvoke r8.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "WifiSuspend");

        r0.<android.net.wifi.WifiStateMachine: android.os.PowerManager$WakeLock mSuspendWakeLock> = $r119;

        $r118 = r0.<android.net.wifi.WifiStateMachine: android.os.PowerManager$WakeLock mSuspendWakeLock>;

        virtualinvoke $r118.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r121 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State)>($r121);

        $r123 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mInitialState>;

        $r120 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r123, $r120);

        $r139 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStartingState>;

        $r122 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r139, $r122);

        $r141 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStartedState>;

        $r140 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r141, $r140);

        $r143 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStartingState>;

        $r142 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStartedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r143, $r142);

        $r145 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStartedState>;

        $r144 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStartedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r145, $r144);

        $r131 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mScanModeState>;

        $r146 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStartedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r131, $r146);

        $r133 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mConnectModeState>;

        $r132 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStartedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r133, $r132);

        $r135 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mL2ConnectedState>;

        $r134 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mConnectModeState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r135, $r134);

        $r137 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mObtainingIpState>;

        $r136 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mL2ConnectedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r137, $r136);

        $r158 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mVerifyingLinkState>;

        $r138 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mL2ConnectedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r158, $r138);

        $r156 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mCaptivePortalCheckState>;

        $r157 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mL2ConnectedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r156, $r157);

        $r162 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mConnectedState>;

        $r155 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mL2ConnectedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r162, $r155);

        $r160 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDisconnectingState>;

        $r161 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mConnectModeState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r160, $r161);

        $r150 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDisconnectedState>;

        $r159 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mConnectModeState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r150, $r159);

        $r148 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mWpsRunningState>;

        $r149 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mConnectModeState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r148, $r149);

        $r154 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mWaitForP2pDisableState>;

        $r147 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStartedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r154, $r147);

        $r152 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStoppingState>;

        $r153 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStartedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r152, $r153);

        $r173 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStoppedState>;

        $r151 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStartedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r173, $r151);

        $r171 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStoppingState>;

        $r174 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r171, $r174);

        $r177 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSoftApStartingState>;

        $r172 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r177, $r172);

        $r175 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSoftApStartedState>;

        $r178 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r175, $r178);

        $r165 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mTetheringState>;

        $r176 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSoftApStartedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r165, $r176);

        $r163 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mTetheredState>;

        $r166 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSoftApStartedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r163, $r166);

        $r169 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mUntetheringState>;

        $r164 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSoftApStartedState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r169, $r164);

        $r170 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mInitialState>;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void setInitialState(com.android.internal.util.State)>($r170);

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void setLogRecSize(int)>(2000);

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void setLogOnlyTransitions(boolean)>(0);

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void start()>();

        r250 = new android.content.Intent;

        specialinvoke r250.<android.content.Intent: void <init>(java.lang.String)>("wifi_scan_available");

        r9 = r250;

        virtualinvoke r9.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        virtualinvoke r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("scan_enabled", 1);

        $r187 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r184 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r187.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r9, $r184);

        return;

     label4:
        $r186 := @caughtexception;

        r3 = $r186;

        r251 = new java.lang.StringBuilder;

        specialinvoke r251.<java.lang.StringBuilder: void <init>()>();

        $r180 = virtualinvoke r251.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t register interface observer: ");

        $r183 = virtualinvoke r3.<android.os.RemoteException: java.lang.String toString()>();

        $r182 = virtualinvoke $r180.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r183);

        $r179 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r179);

        goto label2;

     label5:
        z0 = 0;

        goto label3;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    static java.lang.String access$000(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mInterfaceName>;

        return $r1;
    }

    static void access$100(android.net.wifi.WifiStateMachine, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void handleScreenStateChanged(boolean)>(z0);

        return;
    }

    static void access$1000(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$10000(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static android.os.PowerManager$WakeLock access$10100(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.os.PowerManager$WakeLock mWakeLock>;

        return $r1;
    }

    static void access$10200(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static boolean access$10302(android.net.wifi.WifiStateMachine, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        z0 := @parameter1: boolean;

        r0.<android.net.wifi.WifiStateMachine: boolean mIsRunning> = z0;

        return z0;
    }

    static boolean access$10400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean $z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mInDelayedStop>;

        return $z0;
    }

    static boolean access$10402(android.net.wifi.WifiStateMachine, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        z0 := @parameter1: boolean;

        r0.<android.net.wifi.WifiStateMachine: boolean mInDelayedStop> = z0;

        return z0;
    }

    static int access$10500(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mDelayedStopCounter>;

        return $i0;
    }

    static int access$10508(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, $i1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 = r0.<android.net.wifi.WifiStateMachine: int mDelayedStopCounter>;

        $i1 = i0 + 1;

        r0.<android.net.wifi.WifiStateMachine: int mDelayedStopCounter> = $i1;

        return i0;
    }

    static void access$10600(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setCountryCode()>();

        return;
    }

    static void access$10700(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setFrequencyBand()>();

        return;
    }

    static void access$10800(android.net.wifi.WifiStateMachine, android.net.NetworkInfo$DetailedState)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.NetworkInfo$DetailedState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.net.NetworkInfo$DetailedState;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setNetworkDetailedState(android.net.NetworkInfo$DetailedState)>(r1);

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$10900(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mFilteringMulticastV4Packets>;

        return $r1;
    }

    static boolean access$1100(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean $z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mBluetoothConnectionActive>;

        return $z0;
    }

    static boolean access$11002(android.net.wifi.WifiStateMachine, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        z0 := @parameter1: boolean;

        r0.<android.net.wifi.WifiStateMachine: boolean mDhcpActive> = z0;

        return z0;
    }

    static boolean access$1102(android.net.wifi.WifiStateMachine, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        z0 := @parameter1: boolean;

        r0.<android.net.wifi.WifiStateMachine: boolean mBluetoothConnectionActive> = z0;

        return z0;
    }

    static void access$11100(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void startBatchedScan()>();

        return;
    }

    static com.android.internal.util.State access$11200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mScanModeState>;

        return $r1;
    }

    static void access$11300(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static com.android.internal.util.State access$11400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDisconnectedState>;

        return $r1;
    }

    static void access$11500(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$11600(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mScreenBroadcastReceived>;

        return $r1;
    }

    static int access$11700(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled>;

        return $i0;
    }

    static void access$11800(android.net.wifi.WifiStateMachine, int, android.os.WorkSource)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;
        android.os.WorkSource r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.WorkSource;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void noteScanStart(int,android.os.WorkSource)>(i0, r1);

        return;
    }

    static void access$11900(android.net.wifi.WifiStateMachine, int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void startScanNative(int)>(i0);

        return;
    }

    static void access$1200(android.net.wifi.WifiStateMachine, android.os.Message, int, int)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;
        int i0, i1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void replyToMessage(android.os.Message,int,int)>(r1, i0, i1);

        return;
    }

    static android.net.wifi.BatchedScanSettings access$12000(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.BatchedScanSettings $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        return $r1;
    }

    static void access$12100(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void stopBatchedScan()>();

        return;
    }

    static java.lang.String access$12200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mLastSetCountryCode>;

        return $r1;
    }

    static java.lang.String access$12202(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        r0.<android.net.wifi.WifiStateMachine: java.lang.String mLastSetCountryCode> = r1;

        return r1;
    }

    static void access$12300(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static java.util.concurrent.atomic.AtomicInteger access$12400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mFrequencyBand>;

        return $r1;
    }

    static void access$12500(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static android.app.PendingIntent access$12600(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.app.PendingIntent $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.app.PendingIntent mDriverStopIntent>;

        return $r1;
    }

    static android.app.PendingIntent access$12602(android.net.wifi.WifiStateMachine, android.app.PendingIntent)
    {
        android.net.wifi.WifiStateMachine r0;
        android.app.PendingIntent r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.app.PendingIntent;

        r0.<android.net.wifi.WifiStateMachine: android.app.PendingIntent mDriverStopIntent> = r1;

        return r1;
    }

    static int access$12700(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mDriverStopDelayMs>;

        return $i0;
    }

    static android.app.AlarmManager access$12800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.app.AlarmManager $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.app.AlarmManager mAlarmManager>;

        return $r1;
    }

    static com.android.internal.util.IState access$12900(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = virtualinvoke r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.IState getCurrentState()>();

        return $r1;
    }

    static void access$1300(android.net.wifi.WifiStateMachine, android.os.Message, int, java.lang.Object)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;
        int i0;
        java.lang.Object r2;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.Object;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void replyToMessage(android.os.Message,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    static void access$13000(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static com.android.internal.util.State access$13100(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStoppingState>;

        return $r1;
    }

    static void access$13200(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$13300(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$13400(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$13500(android.net.wifi.WifiStateMachine, int, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setSuspendOptimizationsNative(int,boolean)>(i0, z0);

        return;
    }

    static java.util.List access$13602(android.net.wifi.WifiStateMachine, java.util.List)
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.List r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.util.List;

        r0.<android.net.wifi.WifiStateMachine: java.util.List mScanResults> = r1;

        return r1;
    }

    static void access$13700(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void noteScanEnd()>();

        return;
    }

    static android.os.Message access$13800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = virtualinvoke r0.<android.net.wifi.WifiStateMachine: android.os.Message getCurrentMessage()>();

        return $r1;
    }

    static void access$13900(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static boolean access$1400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean $z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mEnableRssiPolling>;

        return $z0;
    }

    static void access$14000(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static boolean access$1402(android.net.wifi.WifiStateMachine, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        z0 := @parameter1: boolean;

        r0.<android.net.wifi.WifiStateMachine: boolean mEnableRssiPolling> = z0;

        return z0;
    }

    static void access$14100(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$14200(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$14300(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static com.android.internal.util.State access$14400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStartingState>;

        return $r1;
    }

    static void access$14500(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$14600(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$14700(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>(r1);

        return;
    }

    static void access$14800(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$14900(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static boolean access$1500(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean $z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mEnableBackgroundScan>;

        return $z0;
    }

    static long access$15000(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        long $l0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $l0 = r0.<android.net.wifi.WifiStateMachine: long mLastEnableAllNetworksTime>;

        return $l0;
    }

    static long access$15002(android.net.wifi.WifiStateMachine, long)
    {
        android.net.wifi.WifiStateMachine r0;
        long l0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        l0 := @parameter1: long;

        r0.<android.net.wifi.WifiStateMachine: long mLastEnableAllNetworksTime> = l0;

        return l0;
    }

    static boolean access$1502(android.net.wifi.WifiStateMachine, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        z0 := @parameter1: boolean;

        r0.<android.net.wifi.WifiStateMachine: boolean mEnableBackgroundScan> = z0;

        return z0;
    }

    static void access$15100(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void logd(java.lang.String)>(r1);

        return;
    }

    static com.android.internal.util.State access$15200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDisconnectingState>;

        return $r1;
    }

    static void access$15300(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$15400(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$15500(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$15600(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$15700(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static com.android.internal.util.State access$15800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mWpsRunningState>;

        return $r1;
    }

    static void access$15900(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$1600(android.net.wifi.WifiStateMachine, int, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setSuspendOptimizations(int,boolean)>(i0, z0);

        return;
    }

    static void access$16000(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$16100(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void sendNetworkStateChangeBroadcast(java.lang.String)>(r1);

        return;
    }

    static com.android.internal.util.State access$16200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mObtainingIpState>;

        return $r1;
    }

    static void access$16300(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$16400(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static int access$16500(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mRssiPollToken>;

        return $i0;
    }

    static int access$16508(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, $i1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 = r0.<android.net.wifi.WifiStateMachine: int mRssiPollToken>;

        $i1 = i0 + 1;

        r0.<android.net.wifi.WifiStateMachine: int mRssiPollToken> = $i1;

        return i0;
    }

    static void access$16600(android.net.wifi.WifiStateMachine, android.net.DhcpResults)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.DhcpResults r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.net.DhcpResults;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void handleSuccessfulIpConfiguration(android.net.DhcpResults)>(r1);

        return;
    }

    static com.android.internal.util.State access$16700(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mVerifyingLinkState>;

        return $r1;
    }

    static void access$16800(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$16900(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void handleFailedIpConfiguration()>();

        return;
    }

    static java.lang.String access$1700(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mPersistedCountryCode>;

        return $r1;
    }

    static void access$17000(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static java.lang.String access$1702(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        r0.<android.net.wifi.WifiStateMachine: java.lang.String mPersistedCountryCode> = r1;

        return r1;
    }

    static void access$17100(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$17200(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$17300(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$17400(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$17500(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>(r1);

        return;
    }

    static void access$17600(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$17700(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>(r1);

        return;
    }

    static void access$17800(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$17900(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void fetchRssiAndLinkSpeedNative()>();

        return;
    }

    static java.util.concurrent.atomic.AtomicInteger access$1800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mCountryCodeSequence>;

        return $r1;
    }

    static void access$18000(android.net.wifi.WifiStateMachine, android.net.wifi.RssiPacketCountInfo)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.RssiPacketCountInfo r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.net.wifi.RssiPacketCountInfo;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void fetchPktcntNative(android.net.wifi.RssiPacketCountInfo)>(r1);

        return;
    }

    static void access$18100(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$18200(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$18300(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$18400(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$18500(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$18600(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$18700(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$18800(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$18900(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>(r1);

        return;
    }

    static void access$1900(android.net.wifi.WifiStateMachine, int, int, int, java.lang.Object)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, i1, i2;
        java.lang.Object r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessageAtFrontOfQueue(int,int,int,java.lang.Object)>(i0, i1, i2, r1);

        return;
    }

    static void access$19000(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>(r1);

        return;
    }

    static void access$19100(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>(r1);

        return;
    }

    static com.android.internal.util.State access$19200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mCaptivePortalCheckState>;

        return $r1;
    }

    static void access$19300(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$19400(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>(r1);

        return;
    }

    static void access$19500(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>(r1);

        return;
    }

    static void access$19600(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$19700(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static com.android.internal.util.State access$19800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mConnectedState>;

        return $r1;
    }

    static void access$19900(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void startNextBatchedScanAsync()>();

        return;
    }

    static boolean access$2000(android.net.wifi.WifiStateMachine, int, int, android.os.Bundle)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, i1;
        android.os.Bundle r1;
        boolean $z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.os.Bundle;

        $z0 = specialinvoke r0.<android.net.wifi.WifiStateMachine: boolean recordBatchedScanSettings(int,int,android.os.Bundle)>(i0, i1, r1);

        return $z0;
    }

    static void access$20000(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$20100(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$20200(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$20300(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void checkAndSetConnectivityInstance()>();

        return;
    }

    static android.net.ConnectivityManager access$20400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.ConnectivityManager $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.ConnectivityManager mCm>;

        return $r1;
    }

    static void access$20500(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$20600(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$20700(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static android.app.PendingIntent access$20800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.app.PendingIntent $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.app.PendingIntent mScanIntent>;

        return $r1;
    }

    static int access$20900(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mDefaultFrameworkScanIntervalMs>;

        return $i0;
    }

    static void access$2100(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void handleBatchedScanPollRequest()>();

        return;
    }

    static int access$21000(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mPeriodicScanToken>;

        return $i0;
    }

    static int access$21004(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, $i1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i1 = r0.<android.net.wifi.WifiStateMachine: int mPeriodicScanToken>;

        i0 = 1 + $i1;

        r0.<android.net.wifi.WifiStateMachine: int mPeriodicScanToken> = i0;

        return i0;
    }

    static void access$21100(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static android.os.Message access$21200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = virtualinvoke r0.<android.net.wifi.WifiStateMachine: android.os.Message getCurrentMessage()>();

        return $r1;
    }

    static void access$21300(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$21400(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$21500(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$21600(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$21700(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$21800(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$21900(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$2200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void startNextBatchedScan()>();

        return;
    }

    static android.os.Message access$22000(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = virtualinvoke r0.<android.net.wifi.WifiStateMachine: android.os.Message getCurrentMessage()>();

        return $r1;
    }

    static void access$22100(android.net.wifi.WifiStateMachine, android.net.wifi.WifiConfiguration)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.WifiConfiguration r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.net.wifi.WifiConfiguration;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void startSoftApWithConfig(android.net.wifi.WifiConfiguration)>(r1);

        return;
    }

    static void access$22200(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$22300(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static com.android.internal.util.State access$22400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSoftApStartedState>;

        return $r1;
    }

    static void access$22500(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$22600(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$22700(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$22800(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$22900(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static android.net.DhcpStateMachine access$2300(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.DhcpStateMachine $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpStateMachine mDhcpStateMachine>;

        return $r1;
    }

    static boolean access$23000(android.net.wifi.WifiStateMachine, java.util.ArrayList)
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.ArrayList r1;
        boolean $z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.util.ArrayList;

        $z0 = specialinvoke r0.<android.net.wifi.WifiStateMachine: boolean startTethering(java.util.ArrayList)>(r1);

        return $z0;
    }

    static android.net.DhcpStateMachine access$2302(android.net.wifi.WifiStateMachine, android.net.DhcpStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.DhcpStateMachine r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.net.DhcpStateMachine;

        r0.<android.net.wifi.WifiStateMachine: android.net.DhcpStateMachine mDhcpStateMachine> = r1;

        return r1;
    }

    static com.android.internal.util.State access$23100(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mTetheringState>;

        return $r1;
    }

    static void access$23200(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static int access$23300(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mTetherToken>;

        return $i0;
    }

    static int access$23304(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, $i1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i1 = r0.<android.net.wifi.WifiStateMachine: int mTetherToken>;

        i0 = 1 + $i1;

        r0.<android.net.wifi.WifiStateMachine: int mTetherToken> = i0;

        return i0;
    }

    static boolean access$23400(android.net.wifi.WifiStateMachine, java.util.ArrayList)
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.ArrayList r1;
        boolean $z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.util.ArrayList;

        $z0 = specialinvoke r0.<android.net.wifi.WifiStateMachine: boolean isWifiTethered(java.util.ArrayList)>(r1);

        return $z0;
    }

    static com.android.internal.util.State access$23500(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mTetheredState>;

        return $r1;
    }

    static void access$23600(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$23700(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$23800(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$23900(android.net.wifi.WifiStateMachine, int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessageAtFrontOfQueue(int)>(i0);

        return;
    }

    static android.os.PowerManager$WakeLock access$2400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.os.PowerManager$WakeLock mSuspendWakeLock>;

        return $r1;
    }

    static void access$24000(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$24100(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$24200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void stopTethering()>();

        return;
    }

    static com.android.internal.util.State access$24300(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mUntetheringState>;

        return $r1;
    }

    static void access$24400(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$24500(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$24600(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$24700(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$24800(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$24900(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$2500(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mP2pConnected>;

        return $r1;
    }

    static boolean access$2600(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean $z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mTemporarilyDisconnectWifi>;

        return $z0;
    }

    static boolean access$2602(android.net.wifi.WifiStateMachine, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        z0 := @parameter1: boolean;

        r0.<android.net.wifi.WifiStateMachine: boolean mTemporarilyDisconnectWifi> = z0;

        return z0;
    }

    static void access$2700(android.net.wifi.WifiStateMachine, android.os.Message, int)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;
        int i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        i0 := @parameter2: int;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void replyToMessage(android.os.Message,int)>(r1, i0);

        return;
    }

    static android.net.LinkProperties access$2800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.LinkProperties $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.LinkProperties mNetlinkLinkProperties>;

        return $r1;
    }

    static void access$2900(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void updateLinkProperties()>();

        return;
    }

    static android.content.Context access$300(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.content.Context $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        return $r1;
    }

    static void access$3000(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static android.net.wifi.WifiNative access$3100(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.WifiNative $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        return $r1;
    }

    static android.net.wifi.p2p.WifiP2pManager access$3200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.p2p.WifiP2pManager $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.p2p.WifiP2pManager mWifiP2pManager>;

        return $r1;
    }

    static com.android.internal.util.AsyncChannel access$3300(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.AsyncChannel $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mWifiApConfigChannel>;

        return $r1;
    }

    static com.android.internal.util.AsyncChannel access$3302(android.net.wifi.WifiStateMachine, com.android.internal.util.AsyncChannel)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.AsyncChannel r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.AsyncChannel;

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mWifiApConfigChannel> = r1;

        return r1;
    }

    static void access$3400(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$3500(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$3600(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static boolean access$3700(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean $z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mP2pSupported>;

        return $z0;
    }

    static android.net.wifi.WifiMonitor access$3800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.WifiMonitor $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiMonitor mWifiMonitor>;

        return $r1;
    }

    static void access$3900(android.net.wifi.WifiStateMachine, int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setWifiState(int)>(i0);

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mUserWantsSuspendOpt>;

        return $r1;
    }

    static com.android.internal.util.State access$4000(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStartingState>;

        return $r1;
    }

    static void access$4100(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$4200(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$4300(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$4400(android.net.wifi.WifiStateMachine, int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setWifiApState(int)>(i0);

        return;
    }

    static com.android.internal.util.State access$4500(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSoftApStartingState>;

        return $r1;
    }

    static void access$4600(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$4700(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$4800(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$4900(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static android.os.INetworkManagementService access$500(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.INetworkManagementService $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.os.INetworkManagementService mNwService>;

        return $r1;
    }

    static void access$5000(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$5100(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$5200(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$5300(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static java.lang.String access$5400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mPrimaryDeviceType>;

        return $r1;
    }

    static void access$5500(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static int access$5600(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mSupplicantRestartCount>;

        return $i0;
    }

    static int access$5602(android.net.wifi.WifiStateMachine, int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        r0.<android.net.wifi.WifiStateMachine: int mSupplicantRestartCount> = i0;

        return i0;
    }

    static int access$5604(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, $i1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i1 = r0.<android.net.wifi.WifiStateMachine: int mSupplicantRestartCount>;

        i0 = 1 + $i1;

        r0.<android.net.wifi.WifiStateMachine: int mSupplicantRestartCount> = i0;

        return i0;
    }

    static android.net.wifi.SupplicantStateTracker access$5700(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.SupplicantStateTracker $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.SupplicantStateTracker mSupplicantStateTracker>;

        return $r1;
    }

    static java.lang.String access$5800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mLastBssid>;

        return $r1;
    }

    static java.lang.String access$5802(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        r0.<android.net.wifi.WifiStateMachine: java.lang.String mLastBssid> = r1;

        return r1;
    }

    static int access$5900(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId>;

        return $i0;
    }

    static int access$5902(android.net.wifi.WifiStateMachine, int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId> = i0;

        return i0;
    }

    static void access$600(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static int access$6002(android.net.wifi.WifiStateMachine, int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        r0.<android.net.wifi.WifiStateMachine: int mLastSignalLevel> = i0;

        return i0;
    }

    static android.net.wifi.WifiInfo access$6100(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.WifiInfo $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        return $r1;
    }

    static android.net.wifi.WifiConfigStore access$6200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.WifiConfigStore $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfigStore mWifiConfigStore>;

        return $r1;
    }

    static void access$6300(android.net.wifi.WifiStateMachine, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void sendSupplicantConnectionChangedBroadcast(boolean)>(z0);

        return;
    }

    static com.android.internal.util.State access$6400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStartedState>;

        return $r1;
    }

    static void access$6500(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$6600(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static com.android.internal.util.State access$6700(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mInitialState>;

        return $r1;
    }

    static void access$6800(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$6900(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$700(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$7000(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$7100(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static android.net.NetworkInfo access$7200(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    static long access$7300(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        long $l0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $l0 = r0.<android.net.wifi.WifiStateMachine: long mSupplicantScanIntervalMs>;

        return $l0;
    }

    static long access$7302(android.net.wifi.WifiStateMachine, long)
    {
        android.net.wifi.WifiStateMachine r0;
        long l0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        l0 := @parameter1: long;

        r0.<android.net.wifi.WifiStateMachine: long mSupplicantScanIntervalMs> = l0;

        return l0;
    }

    static com.android.internal.util.State access$7400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mWaitForP2pDisableState>;

        return $r1;
    }

    static void access$7500(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static com.android.internal.util.State access$7600(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mSupplicantStoppingState>;

        return $r1;
    }

    static void access$7700(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$7800(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$7900(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void handleSupplicantConnectionLoss()>();

        return;
    }

    static com.android.internal.util.AsyncChannel access$800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.AsyncChannel $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mWifiP2pChannel>;

        return $r1;
    }

    static void access$8000(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void handleNetworkDisconnect()>();

        return;
    }

    static com.android.internal.util.AsyncChannel access$802(android.net.wifi.WifiStateMachine, com.android.internal.util.AsyncChannel)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.AsyncChannel r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.AsyncChannel;

        r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mWifiP2pChannel> = r1;

        return r1;
    }

    static void access$8100(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$8200(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$8300(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setScanResults()>();

        return;
    }

    static void access$8400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void sendScanResultsAvailableBroadcast()>();

        return;
    }

    static boolean access$8500(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean $z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mScanResultIsPending>;

        return $z0;
    }

    static boolean access$8502(android.net.wifi.WifiStateMachine, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        z0 := @parameter1: boolean;

        r0.<android.net.wifi.WifiStateMachine: boolean mScanResultIsPending> = z0;

        return z0;
    }

    static void access$8600(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static int access$8700(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mOperationalMode>;

        return $i0;
    }

    static int access$8702(android.net.wifi.WifiStateMachine, int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        i0 := @parameter1: int;

        r0.<android.net.wifi.WifiStateMachine: int mOperationalMode> = i0;

        return i0;
    }

    static int access$8800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mSupplicantStopFailureToken>;

        return $i0;
    }

    static int access$8804(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, $i1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i1 = r0.<android.net.wifi.WifiStateMachine: int mSupplicantStopFailureToken>;

        i0 = 1 + $i1;

        r0.<android.net.wifi.WifiStateMachine: int mSupplicantStopFailureToken> = i0;

        return i0;
    }

    static void access$8900(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$900(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$9000(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$9100(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$9200(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$9300(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static int access$9400(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mDriverStartToken>;

        return $i0;
    }

    static int access$9404(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, $i1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $i1 = r0.<android.net.wifi.WifiStateMachine: int mDriverStartToken>;

        i0 = 1 + $i1;

        r0.<android.net.wifi.WifiStateMachine: int mDriverStartToken> = i0;

        return i0;
    }

    static android.net.wifi.SupplicantState access$9500(android.net.wifi.WifiStateMachine, android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;
        android.net.wifi.SupplicantState $r2;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: android.os.Message;

        $r2 = specialinvoke r0.<android.net.wifi.WifiStateMachine: android.net.wifi.SupplicantState handleSupplicantStateChange(android.os.Message)>(r1);

        return $r2;
    }

    static void access$9600(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$9700(android.net.wifi.WifiStateMachine, java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>(r1);

        return;
    }

    static com.android.internal.util.State access$9800(android.net.wifi.WifiStateMachine)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.State mDriverStoppedState>;

        return $r1;
    }

    static void access$9900(android.net.wifi.WifiStateMachine, com.android.internal.util.IState)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.wifi.WifiStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    private void checkAndSetConnectivityInstance()
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.ConnectivityManager $r1, $r4;
        android.content.Context $r2;
        java.lang.Object $r3;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.ConnectivityManager mCm>;

        if $r1 != null goto label1;

        $r2 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r4 = (android.net.ConnectivityManager) $r3;

        r0.<android.net.wifi.WifiStateMachine: android.net.ConnectivityManager mCm> = $r4;

     label1:
        return;
    }

    private void clearLinkProperties()
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r11;
        int $i0, $i1;
        android.net.wifi.WifiConfigStore $r3, $r12;
        boolean $z0;
        android.net.DhcpResults $r4, $r7, $r9;
        android.net.LinkProperties $r5, $r6, $r8, $r10;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r3 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfigStore mWifiConfigStore>;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId>;

        $z0 = virtualinvoke $r3.<android.net.wifi.WifiConfigStore: boolean isUsingStaticIp(int)>($i0);

        if $z0 != 0 goto label1;

        $r12 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfigStore mWifiConfigStore>;

        $i1 = r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId>;

        virtualinvoke $r12.<android.net.wifi.WifiConfigStore: void clearLinkProperties(int)>($i1);

     label1:
        r1 = r0.<android.net.wifi.WifiStateMachine: java.lang.Object mDhcpResultsLock>;

        entermonitor r1;

     label2:
        $r4 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpResults mDhcpResults>;

        if $r4 == null goto label3;

        $r7 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpResults mDhcpResults>;

        $r8 = $r7.<android.net.DhcpResults: android.net.LinkProperties linkProperties>;

        if $r8 == null goto label3;

        $r9 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpResults mDhcpResults>;

        $r10 = $r9.<android.net.DhcpResults: android.net.LinkProperties linkProperties>;

        virtualinvoke $r10.<android.net.LinkProperties: void clear()>();

     label3:
        exitmonitor r1;

     label4:
        $r5 = r0.<android.net.wifi.WifiStateMachine: android.net.LinkProperties mNetlinkLinkProperties>;

        virtualinvoke $r5.<android.net.LinkProperties: void clear()>();

        $r6 = r0.<android.net.wifi.WifiStateMachine: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r6.<android.net.LinkProperties: void clear()>();

        return;

     label5:
        $r11 := @caughtexception;

        r2 = $r11;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void fetchPktcntNative(android.net.wifi.RssiPacketCountInfo)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.RssiPacketCountInfo r1;
        java.lang.String r2, $r7, $r8, $r9, $r10, $r11;
        java.lang.String[] r3, r4;
        int i0, i1, $i2, $i3, $i4;
        android.net.wifi.WifiNative $r6;
        boolean $z0, $z1;
        java.lang.NumberFormatException $r12;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.net.wifi.RssiPacketCountInfo;

        $r6 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        r2 = virtualinvoke $r6.<android.net.wifi.WifiNative: java.lang.String pktcntPoll()>();

        if r2 == null goto label7;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        $r7 = r3[i1];

        r4 = virtualinvoke $r7.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $i2 = lengthof r4;

        if $i2 >= 2 goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r8 = r4[0];

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("TXGOOD");

        if $z0 == 0 goto label5;

        $r11 = r4[1];

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

        r1.<android.net.wifi.RssiPacketCountInfo: int txgood> = $i4;

     label4:
        goto label2;

     label5:
        $r9 = r4[0];

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("TXBAD");

        if $z1 == 0 goto label2;

        $r10 = r4[1];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        r1.<android.net.wifi.RssiPacketCountInfo: int txbad> = $i3;

     label6:
        goto label2;

     label7:
        return;

     label8:
        $r12 := @caughtexception;

        goto label2;

        catch java.lang.NumberFormatException from label3 to label4 with label8;
        catch java.lang.NumberFormatException from label5 to label6 with label8;
    }

    private void fetchRssiAndLinkSpeedNative()
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7;
        java.lang.String r1, $r9, $r10, $r11, $r12, $r13;
        java.lang.String[] r2, r3;
        android.net.wifi.WifiNative $r5;
        android.net.wifi.WifiInfo $r6, $r7, $r8;
        boolean $z0, $z1;
        java.lang.NumberFormatException $r14;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 = -1;

        i1 = -1;

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        r1 = virtualinvoke $r5.<android.net.wifi.WifiNative: java.lang.String signalPoll()>();

        if r1 == null goto label07;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        i3 = lengthof r2;

        i4 = 0;

     label01:
        if i4 >= i3 goto label07;

        $r9 = r2[i4];

        r3 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $i7 = lengthof r3;

        if $i7 >= 2 goto label03;

     label02:
        i4 = i4 + 1;

        goto label01;

     label03:
        $r10 = r3[0];

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("RSSI");

        if $z0 == 0 goto label05;

        $r13 = r3[1];

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

     label04:
        goto label02;

     label05:
        $r11 = r3[0];

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("LINKSPEED");

        if $z1 == 0 goto label02;

        $r12 = r3[1];

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

     label06:
        i1 = i5;

        goto label02;

     label07:
        if i0 == -1 goto label12;

        if -200 >= i0 goto label12;

        if i0 >= 256 goto label12;

        if i0 <= 0 goto label08;

        i0 = i0 + -256;

     label08:
        $r8 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r8.<android.net.wifi.WifiInfo: void setRssi(int)>(i0);

        i2 = staticinvoke <android.net.wifi.WifiManager: int calculateSignalLevel(int,int)>(i0, 5);

        $i6 = r0.<android.net.wifi.WifiStateMachine: int mLastSignalLevel>;

        if i2 == $i6 goto label09;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void sendRssiChangeBroadcast(int)>(i0);

     label09:
        r0.<android.net.wifi.WifiStateMachine: int mLastSignalLevel> = i2;

     label10:
        if i1 == -1 goto label11;

        $r7 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r7.<android.net.wifi.WifiInfo: void setLinkSpeed(int)>(i1);

     label11:
        return;

     label12:
        $r6 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r6.<android.net.wifi.WifiInfo: void setRssi(int)>(-200);

        goto label10;

     label13:
        $r14 := @caughtexception;

        goto label02;

        catch java.lang.NumberFormatException from label03 to label04 with label13;
        catch java.lang.NumberFormatException from label05 to label06 with label13;
    }

    private int getMaxDhcpRetries()
    {
        android.net.wifi.WifiStateMachine r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "wifi_max_dhcp_retry_count", 9);

        return $i0;
    }

    private android.net.NetworkInfo$DetailedState getNetworkDetailedState()
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.NetworkInfo $r1;
        android.net.NetworkInfo$DetailedState $r2;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.NetworkInfo mNetworkInfo>;

        $r2 = virtualinvoke $r1.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        return $r2;
    }

    private void handleBatchedScanPollRequest()
    {
        android.net.wifi.WifiStateMachine r0;
        long $l0, $l2, $l3, $l5;
        byte $b1, $b4;
        android.net.wifi.BatchedScanSettings $r1;
        android.app.PendingIntent $r2;
        android.app.AlarmManager $r3;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $l0 = r0.<android.net.wifi.WifiStateMachine: long mBatchedScanMinPollTime>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

     label1:
        return;

     label2:
        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        if $r1 == null goto label1;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = r0.<android.net.wifi.WifiStateMachine: long mBatchedScanMinPollTime>;

        $b4 = $l2 cmp $l3;

        if $b4 <= 0 goto label3;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void startNextBatchedScan()>();

        return;

     label3:
        $r3 = r0.<android.net.wifi.WifiStateMachine: android.app.AlarmManager mAlarmManager>;

        $l5 = r0.<android.net.wifi.WifiStateMachine: long mBatchedScanMinPollTime>;

        $r2 = r0.<android.net.wifi.WifiStateMachine: android.app.PendingIntent mBatchedScanIntervalIntent>;

        virtualinvoke $r3.<android.app.AlarmManager: void setExact(int,long,android.app.PendingIntent)>(0, $l5, $r2);

        r0.<android.net.wifi.WifiStateMachine: long mBatchedScanMinPollTime> = 0L;

        return;
    }

    private void handleFailedIpConfiguration()
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.net.wifi.WifiInfo $r1, $r2;
        android.net.wifi.WifiNative $r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        android.net.wifi.WifiConfigStore $r11;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>("IP configuration failed");

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r1.<android.net.wifi.WifiInfo: void setInetAddress(java.net.InetAddress)>(null);

        $r2 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r2.<android.net.wifi.WifiInfo: void setMeteredHint(boolean)>(0);

        i0 = specialinvoke r0.<android.net.wifi.WifiStateMachine: int getMaxDhcpRetries()>();

        if i0 <= 0 goto label1;

        $i2 = r0.<android.net.wifi.WifiStateMachine: int mReconnectCount>;

        i1 = 1 + $i2;

        r0.<android.net.wifi.WifiStateMachine: int mReconnectCount> = i1;

        if i1 <= i0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed ");

        $i3 = r0.<android.net.wifi.WifiStateMachine: int mReconnectCount>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" times, Disabling ");

        $i4 = r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r10);

        $r11 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfigStore mWifiConfigStore>;

        $i5 = r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId>;

        virtualinvoke $r11.<android.net.wifi.WifiConfigStore: boolean disableNetwork(int,int)>($i5, 2);

        r0.<android.net.wifi.WifiStateMachine: int mReconnectCount> = 0;

     label1:
        $r3 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        virtualinvoke $r3.<android.net.wifi.WifiNative: boolean disconnect()>();

        $r4 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        virtualinvoke $r4.<android.net.wifi.WifiNative: boolean reconnect()>();

        return;
    }

    private void handleNetworkDisconnect()
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.Exception r1, $r18;
        java.lang.String $r2, $r4, $r15, $r21;
        android.os.INetworkManagementService $r3, $r5;
        android.net.wifi.WifiInfo $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        android.net.NetworkInfo$DetailedState $r13, $r14;
        int $i0;
        android.net.wifi.WifiConfigStore $r16;
        java.lang.StringBuilder $r17, $r19, $r20;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void stopDhcp()>();

     label1:
        $r3 = r0.<android.net.wifi.WifiStateMachine: android.os.INetworkManagementService mNwService>;

        $r2 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mInterfaceName>;

        interfaceinvoke $r3.<android.os.INetworkManagementService: void clearInterfaceAddresses(java.lang.String)>($r2);

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.os.INetworkManagementService mNwService>;

        $r4 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mInterfaceName>;

        interfaceinvoke $r5.<android.os.INetworkManagementService: void disableIpv6(java.lang.String)>($r4);

     label2:
        $r6 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r6.<android.net.wifi.WifiInfo: void setInetAddress(java.net.InetAddress)>(null);

        $r7 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r7.<android.net.wifi.WifiInfo: void setBSSID(java.lang.String)>(null);

        $r8 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r8.<android.net.wifi.WifiInfo: void setSSID(android.net.wifi.WifiSsid)>(null);

        $r9 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r9.<android.net.wifi.WifiInfo: void setNetworkId(int)>(-1);

        $r10 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r10.<android.net.wifi.WifiInfo: void setRssi(int)>(-200);

        $r11 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r11.<android.net.wifi.WifiInfo: void setLinkSpeed(int)>(-1);

        $r12 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r12.<android.net.wifi.WifiInfo: void setMeteredHint(boolean)>(0);

        $r13 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setNetworkDetailedState(android.net.NetworkInfo$DetailedState)>($r13);

        $r16 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfigStore mWifiConfigStore>;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId>;

        $r14 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        virtualinvoke $r16.<android.net.wifi.WifiConfigStore: void updateStatus(int,android.net.NetworkInfo$DetailedState)>($i0, $r14);

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void clearLinkProperties()>();

        $r15 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mLastBssid>;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void sendNetworkStateChangeBroadcast(java.lang.String)>($r15);

        r0.<android.net.wifi.WifiStateMachine: java.lang.String mLastBssid> = null;

        r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId> = -1;

        return;

     label3:
        $r18 := @caughtexception;

        r1 = $r18;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to clear addresses or disable ipv6");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r21);

        goto label2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void handleScreenStateChanged(boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0, z1, $z2, $z3;
        java.util.concurrent.atomic.AtomicBoolean $r1, $r2;
        android.os.PowerManager$WakeLock $r3;

        r0 := @this: android.net.wifi.WifiStateMachine;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void enableRssiPolling(boolean)>(z0);

        $z2 = r0.<android.net.wifi.WifiStateMachine: boolean mBackgroundScanSupported>;

        if $z2 == 0 goto label2;

        if z0 != 0 goto label5;

        z1 = 1;

     label1:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void enableBackgroundScanCommand(boolean)>(z1);

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void enableAllNetworks()>();

     label3:
        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mUserWantsSuspendOpt>;

        $z3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z3 == 0 goto label4;

        if z0 == 0 goto label6;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131158, 0, 0);

     label4:
        $r2 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mScreenBroadcastReceived>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;

     label5:
        z1 = 0;

        goto label1;

     label6:
        $r3 = r0.<android.net.wifi.WifiStateMachine: android.os.PowerManager$WakeLock mSuspendWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void acquire(long)>(2000L);

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131158, 1, 0);

        goto label4;
    }

    private void handleSuccessfulIpConfiguration(android.net.DhcpResults)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.DhcpResults r1;
        java.lang.Object r2, $r12;
        java.lang.Throwable r3, $r13;
        android.net.LinkProperties r4, $r7;
        java.util.Iterator r5;
        boolean z0, $z1;
        java.net.InetAddress r6;
        android.net.wifi.WifiConfigStore $r8;
        int $i0;
        java.util.Collection $r9;
        android.net.wifi.WifiInfo $r10, $r11;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.net.DhcpResults;

        r0.<android.net.wifi.WifiStateMachine: int mLastSignalLevel> = -1;

        r0.<android.net.wifi.WifiStateMachine: int mReconnectCount> = 0;

        r2 = r0.<android.net.wifi.WifiStateMachine: java.lang.Object mDhcpResultsLock>;

        entermonitor r2;

     label1:
        r0.<android.net.wifi.WifiStateMachine: android.net.DhcpResults mDhcpResults> = r1;

        exitmonitor r2;

     label2:
        r4 = r1.<android.net.DhcpResults: android.net.LinkProperties linkProperties>;

        $r8 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfigStore mWifiConfigStore>;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId>;

        $r7 = new android.net.LinkProperties;

        specialinvoke $r7.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>(r4);

        virtualinvoke $r8.<android.net.wifi.WifiConfigStore: void setLinkProperties(int,android.net.LinkProperties)>($i0, $r7);

        $r9 = virtualinvoke r4.<android.net.LinkProperties: java.util.Collection getAddresses()>();

        r5 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

        z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        r6 = null;

        if z0 == 0 goto label3;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.net.InetAddress) $r12;

     label3:
        $r11 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r11.<android.net.wifi.WifiInfo: void setInetAddress(java.net.InetAddress)>(r6);

        $r10 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        $z1 = virtualinvoke r1.<android.net.DhcpResults: boolean hasMeteredHint()>();

        virtualinvoke $r10.<android.net.wifi.WifiInfo: void setMeteredHint(boolean)>($z1);

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void updateLinkProperties()>();

        return;

     label4:
        $r13 := @caughtexception;

        r3 = $r13;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void handleSupplicantConnectionLoss()
    {
        android.net.wifi.WifiStateMachine r0;
        boolean $z0;
        android.net.wifi.WifiMonitor $r1;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiMonitor mWifiMonitor>;

        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mP2pSupported>;

        virtualinvoke $r1.<android.net.wifi.WifiMonitor: void killSupplicant(boolean)>($z0);

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void sendSupplicantConnectionChangedBroadcast(boolean)>(0);

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setWifiState(int)>(1);

        return;
    }

    private android.net.wifi.SupplicantState handleSupplicantStateChange(android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1, $r12;
        android.net.wifi.StateChangeResult r2;
        android.net.wifi.SupplicantState r3;
        java.lang.Object $r4;
        android.net.wifi.WifiInfo $r5, $r6, $r8, $r10, $r13;
        boolean $z0;
        java.lang.String $r7;
        android.net.wifi.WifiSsid $r9;
        android.net.wifi.SupplicantStateTracker $r11;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.os.Message;

        $r4 = r1.<android.os.Message: java.lang.Object obj>;

        r2 = (android.net.wifi.StateChangeResult) $r4;

        r3 = r2.<android.net.wifi.StateChangeResult: android.net.wifi.SupplicantState state>;

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r5.<android.net.wifi.WifiInfo: void setSupplicantState(android.net.wifi.SupplicantState)>(r3);

        $z0 = staticinvoke <android.net.wifi.SupplicantState: boolean isConnecting(android.net.wifi.SupplicantState)>(r3);

        if $z0 == 0 goto label2;

        $r13 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        $i0 = r2.<android.net.wifi.StateChangeResult: int networkId>;

        virtualinvoke $r13.<android.net.wifi.WifiInfo: void setNetworkId(int)>($i0);

     label1:
        $r8 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        $r7 = r2.<android.net.wifi.StateChangeResult: java.lang.String BSSID>;

        virtualinvoke $r8.<android.net.wifi.WifiInfo: void setBSSID(java.lang.String)>($r7);

        $r10 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        $r9 = r2.<android.net.wifi.StateChangeResult: android.net.wifi.WifiSsid wifiSsid>;

        virtualinvoke $r10.<android.net.wifi.WifiInfo: void setSSID(android.net.wifi.WifiSsid)>($r9);

        $r11 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.SupplicantStateTracker mSupplicantStateTracker>;

        $r12 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Message)>(r1);

        virtualinvoke $r11.<android.net.wifi.SupplicantStateTracker: void sendMessage(android.os.Message)>($r12);

        return r3;

     label2:
        $r6 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r6.<android.net.wifi.WifiInfo: void setNetworkId(int)>(-1);

        goto label1;
    }

    private boolean isWifiTethered(java.util.ArrayList)
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.ArrayList r1;
        java.lang.String[] r2;
        java.util.Iterator r3;
        java.lang.String r4, $r7;
        int i0, i1;
        android.net.ConnectivityManager $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: java.util.ArrayList;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void checkAndSetConnectivityInstance()>();

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.net.ConnectivityManager mCm>;

        r2 = virtualinvoke $r5.<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()>();

        r3 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r6;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label1;

        $r7 = r2[i1];

        $z1 = virtualinvoke r4.<java.lang.String: boolean matches(java.lang.String)>($r7);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    private void noteBatchedScanStart()
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.RemoteException r1, r3, $r12, $r16;
        java.lang.Throwable r2, $r13;
        android.os.WorkSource $r4, $r5, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3;
        com.android.internal.app.IBatteryStats $r6, $r11;
        boolean $z0;
        java.lang.String $r14, $r15;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r4 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource>;

        if $r4 == null goto label3;

        $r9 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource>;

        $r8 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mBatchedScanWorkSource>;

        $z0 = virtualinvoke $r9.<android.os.WorkSource: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label1;

        $i3 = r0.<android.net.wifi.WifiStateMachine: int mNotedBatchedScanCsph>;

        $i2 = r0.<android.net.wifi.WifiStateMachine: int mBatchedScanCsph>;

        if $i3 == $i2 goto label3;

     label1:
        $r11 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r10 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource>;

        interfaceinvoke $r11.<com.android.internal.app.IBatteryStats: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>($r10);

     label2:
        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource> = null;

        r0.<android.net.wifi.WifiStateMachine: int mNotedBatchedScanCsph> = 0;

     label3:
        $r6 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mBatchedScanWorkSource>;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mBatchedScanCsph>;

        interfaceinvoke $r6.<com.android.internal.app.IBatteryStats: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>($r5, $i0);

        $r7 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mBatchedScanWorkSource>;

        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource> = $r7;

        $i1 = r0.<android.net.wifi.WifiStateMachine: int mBatchedScanCsph>;

        r0.<android.net.wifi.WifiStateMachine: int mNotedBatchedScanCsph> = $i1;

     label4:
        return;

     label5:
        $r12 := @caughtexception;

        r3 = $r12;

     label6:
        $r14 = virtualinvoke r3.<android.os.RemoteException: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>($r14);

     label7:
        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource> = null;

        r0.<android.net.wifi.WifiStateMachine: int mNotedBatchedScanCsph> = 0;

        goto label3;

     label8:
        $r13 := @caughtexception;

        r2 = $r13;

        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource> = null;

        r0.<android.net.wifi.WifiStateMachine: int mNotedBatchedScanCsph> = 0;

        throw r2;

     label9:
        $r16 := @caughtexception;

        r1 = $r16;

        $r15 = virtualinvoke r1.<android.os.RemoteException: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>($r15);

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label9;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    private void noteBatchedScanStop()
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.Throwable r1, $r8;
        android.os.RemoteException r2, $r6;
        android.os.WorkSource $r3, $r4;
        com.android.internal.app.IBatteryStats $r5;
        java.lang.String $r7;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r3 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource>;

        if $r3 == null goto label3;

     label1:
        $r5 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r4 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource>;

        interfaceinvoke $r5.<com.android.internal.app.IBatteryStats: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>($r4);

     label2:
        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource> = null;

        r0.<android.net.wifi.WifiStateMachine: int mNotedBatchedScanCsph> = 0;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

     label5:
        $r7 = virtualinvoke r2.<android.os.RemoteException: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>($r7);

     label6:
        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource> = null;

        r0.<android.net.wifi.WifiStateMachine: int mNotedBatchedScanCsph> = 0;

        return;

     label7:
        $r8 := @caughtexception;

        r1 = $r8;

        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mNotedBatchedScanWorkSource> = null;

        r0.<android.net.wifi.WifiStateMachine: int mNotedBatchedScanCsph> = 0;

        throw r1;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private void noteScanEnd()
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.Throwable r1, $r8;
        android.os.RemoteException r2, $r6;
        android.os.WorkSource $r3, $r4;
        com.android.internal.app.IBatteryStats $r5;
        java.lang.String $r7;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r3 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mScanWorkSource>;

        if $r3 == null goto label3;

     label1:
        $r5 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r4 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mScanWorkSource>;

        interfaceinvoke $r5.<com.android.internal.app.IBatteryStats: void noteWifiScanStoppedFromSource(android.os.WorkSource)>($r4);

     label2:
        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mScanWorkSource> = null;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

     label5:
        $r7 = virtualinvoke r2.<android.os.RemoteException: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>($r7);

     label6:
        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mScanWorkSource> = null;

        return;

     label7:
        $r8 := @caughtexception;

        r1 = $r8;

        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mScanWorkSource> = null;

        throw r1;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private void noteScanStart(int, android.os.WorkSource)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;
        android.os.WorkSource r1, $r3, $r4, $r5;
        android.os.RemoteException r2, $r7;
        com.android.internal.app.IBatteryStats $r6;
        java.lang.String $r8;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.WorkSource;

        $r3 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mScanWorkSource>;

        if $r3 != null goto label4;

        if i0 != -1 goto label1;

        if r1 == null goto label4;

     label1:
        if r1 == null goto label5;

     label2:
        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mScanWorkSource> = r1;

     label3:
        $r6 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mScanWorkSource>;

        interfaceinvoke $r6.<com.android.internal.app.IBatteryStats: void noteWifiScanStartedFromSource(android.os.WorkSource)>($r5);

     label4:
        return;

     label5:
        $r4 = new android.os.WorkSource;

        specialinvoke $r4.<android.os.WorkSource: void <init>(int)>(i0);

        r1 = $r4;

        goto label2;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = virtualinvoke r2.<android.os.RemoteException: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>($r8);

        return;

        catch android.os.RemoteException from label3 to label4 with label6;
    }

    private android.os.Message obtainMessageWithArg2(android.os.Message)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1, r2;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.os.Message;

        r2 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        $i0 = r1.<android.os.Message: int arg2>;

        r2.<android.os.Message: int arg2> = $i0;

        return r2;
    }

    private boolean recordBatchedScanSettings(int, int, android.os.Bundle)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, i1;
        android.os.Bundle r1;
        android.net.wifi.BatchedScanSettings r2, $r6, $r8;
        android.os.WorkSource r3, $r7;
        android.os.Parcelable $r4, $r5;
        boolean $z0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.os.Bundle;

        $r4 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("batched_settings");

        r2 = (android.net.wifi.BatchedScanSettings) $r4;

        $r5 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("batched_worksource");

        r3 = (android.os.WorkSource) $r5;

        if r2 == null goto label2;

        $r8 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        $z0 = virtualinvoke r2.<android.net.wifi.BatchedScanSettings: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label3;

     label1:
        return 0;

     label2:
        $r6 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        if $r6 == null goto label1;

     label3:
        r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings> = r2;

        if r3 != null goto label4;

        $r7 = new android.os.WorkSource;

        specialinvoke $r7.<android.os.WorkSource: void <init>(int)>(i0);

        r3 = $r7;

     label4:
        r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mBatchedScanWorkSource> = r3;

        r0.<android.net.wifi.WifiStateMachine: int mBatchedScanCsph> = i1;

        return 1;
    }

    private void replyToMessage(android.os.Message, int)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1, r2;
        int i0;
        android.os.Messenger $r3;
        com.android.internal.util.AsyncChannel $r4;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.os.Message;

        i0 := @parameter1: int;

        $r3 = r1.<android.os.Message: android.os.Messenger replyTo>;

        if $r3 != null goto label1;

        return;

     label1:
        r2 = specialinvoke r0.<android.net.wifi.WifiStateMachine: android.os.Message obtainMessageWithArg2(android.os.Message)>(r1);

        r2.<android.os.Message: int what> = i0;

        $r4 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mReplyChannel>;

        virtualinvoke $r4.<com.android.internal.util.AsyncChannel: void replyToMessage(android.os.Message,android.os.Message)>(r1, r2);

        return;
    }

    private void replyToMessage(android.os.Message, int, int)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1, r2;
        int i0, i1;
        android.os.Messenger $r3;
        com.android.internal.util.AsyncChannel $r4;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.os.Message;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r1.<android.os.Message: android.os.Messenger replyTo>;

        if $r3 != null goto label1;

        return;

     label1:
        r2 = specialinvoke r0.<android.net.wifi.WifiStateMachine: android.os.Message obtainMessageWithArg2(android.os.Message)>(r1);

        r2.<android.os.Message: int what> = i0;

        r2.<android.os.Message: int arg1> = i1;

        $r4 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mReplyChannel>;

        virtualinvoke $r4.<com.android.internal.util.AsyncChannel: void replyToMessage(android.os.Message,android.os.Message)>(r1, r2);

        return;
    }

    private void replyToMessage(android.os.Message, int, java.lang.Object)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1, r3;
        int i0;
        java.lang.Object r2;
        android.os.Messenger $r4;
        com.android.internal.util.AsyncChannel $r5;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.os.Message;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r4 = r1.<android.os.Message: android.os.Messenger replyTo>;

        if $r4 != null goto label1;

        return;

     label1:
        r3 = specialinvoke r0.<android.net.wifi.WifiStateMachine: android.os.Message obtainMessageWithArg2(android.os.Message)>(r1);

        r3.<android.os.Message: int what> = i0;

        r3.<android.os.Message: java.lang.Object obj> = r2;

        $r5 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mReplyChannel>;

        virtualinvoke $r5.<com.android.internal.util.AsyncChannel: void replyToMessage(android.os.Message,android.os.Message)>(r1, r3);

        return;
    }

    private void retrieveBatchedScanData()
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1, r7, r15, $r19, $r23, $r27, $r30, $r32, $r33, $r34, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r80, $r82, $r84, $r86, $r90, $r91, $r92, $r95, $r97, $r103, $r107, $r109, $r111, $r112, $r114, $r119, $r121;
        java.lang.String[] r2;
        int i0, i1, i2, i3, i5, i6, i8, i9, i10, i11, i12, i13, i15, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        android.content.Intent r3, $r22;
        java.util.List r4, $r25, $r31, $r37, $r38, $r39, $r81;
        java.lang.Throwable r5, $r116;
        android.net.wifi.BatchedScanResult r6, $r24, $r36;
        android.net.wifi.WifiSsid r8;
        long l4, l7, l14, $l23;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z13, $z14, $z15, $z16;
        java.lang.StringBuilder $r16, $r17, $r20, $r51, $r52, $r53, $r76, $r77, $r78, $r83, $r85, $r87, $r88, $r93, $r96, $r99, $r101, $r102, $r105, $r106, $r108, $r110, $r113, $r115, $r117, $r120, $r122;
        android.net.wifi.WifiNative $r18, $r26;
        android.os.UserHandle $r28, $r74;
        android.content.Context $r29, $r75;
        android.net.wifi.ScanResult $r35;
        byte[] $r79;
        java.lang.NumberFormatException $r89, $r94, $r98, $r100, $r104, $r118;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r18 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        r1 = virtualinvoke $r18.<android.net.wifi.WifiNative: java.lang.String getBatchedScanResults()>();

        r0.<android.net.wifi.WifiStateMachine: long mBatchedScanMinPollTime> = 0L;

        if r1 == null goto label01;

        $z5 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("OK");

        if $z5 == 0 goto label02;

     label01:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected BatchedScanResults :");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r19);

        return;

     label02:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        $r23 = r2[0];

        $z6 = virtualinvoke $r23.<java.lang.String: boolean startsWith(java.lang.String)>("scancount=");

        if $z6 == 0 goto label07;

     label03:
        $r90 = r2[0];

        $r91 = "scancount=";

        $i34 = virtualinvoke $r91.<java.lang.String: int length()>();

        $r95 = virtualinvoke $r90.<java.lang.String: java.lang.String substring(int)>($i34);

        i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r95);

     label04:
        i1 = i15;

        i0 = 1;

     label05:
        if i1 != 0 goto label08;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>("scanCount==0 - aborting");

        return;

     label06:
        $r94 := @caughtexception;

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r85 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("scancount parseInt Exception from ");

        $r84 = r2[1];

        $r83 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r84);

        $r82 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r82);

        i0 = 1;

        i1 = 0;

        goto label05;

     label07:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>("scancount not found");

        i0 = 0;

        i1 = 0;

        goto label05;

     label08:
        $r22 = new android.content.Intent;

        specialinvoke $r22.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.BATCHED_RESULTS");

        r3 = $r22;

        virtualinvoke r3.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        r4 = r0.<android.net.wifi.WifiStateMachine: java.util.List mBatchedScanResults>;

        entermonitor r4;

     label09:
        $r25 = r0.<android.net.wifi.WifiStateMachine: java.util.List mBatchedScanResults>;

        interfaceinvoke $r25.<java.util.List: void clear()>();

        $r24 = new android.net.wifi.BatchedScanResult;

        specialinvoke $r24.<android.net.wifi.BatchedScanResult: void <init>()>();

        r6 = $r24;

     label10:
        r7 = null;

        r8 = null;

        i2 = 0;

        i3 = 0;

        l4 = 0L;

        i6 = -1;

        i5 = -1;

     label11:
        l7 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r27 = "bssid=";

        i9 = virtualinvoke $r27.<java.lang.String: int length()>();

     label12:
        i8 = lengthof r2;

     label13:
        if i0 >= i8 goto label72;

     label14:
        $r34 = r2[i0];

        $z10 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>("----");

        if $z10 == 0 goto label21;

        $i32 = i0 + 1;

        $i31 = lengthof r2;

        if $i32 == $i31 goto label15;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("didn\'t consume ");

        $i27 = lengthof r2;

        $i28 = $i27 - i0;

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r92 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r92);

     label15:
        $r81 = r0.<android.net.wifi.WifiStateMachine: java.util.List mBatchedScanResults>;

        $i33 = interfaceinvoke $r81.<java.util.List: int size()>();

        if $i33 <= 0 goto label16;

        $r75 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r74 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r75.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r3, $r74);

     label16:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void logd(java.lang.String)>("retrieveBatchedScanResults X");

        exitmonitor r4;

     label17:
        return;

     label18:
        $r116 := @caughtexception;

        r5 = $r116;

     label19:
        exitmonitor r4;

     label20:
        throw r5;

     label21:
        $r32 = r2[i0];

        $z7 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>("####");

        if $z7 != 0 goto label22;

        $r42 = r2[i0];

        $z14 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>("====");

        if $z14 == 0 goto label29;

     label22:
        if r7 == null goto label25;

     label23:
        $r37 = r6.<android.net.wifi.BatchedScanResult: java.util.List scanResults>;

        $r35 = new android.net.wifi.ScanResult;

        specialinvoke $r35.<android.net.wifi.ScanResult: void <init>(android.net.wifi.WifiSsid,java.lang.String,java.lang.String,int,int,long,int,int)>(r8, r7, "", i2, i3, l4, i5, i6);

        interfaceinvoke $r37.<java.util.List: boolean add(java.lang.Object)>($r35);

     label24:
        r8 = null;

        r7 = null;

        i2 = 0;

        i3 = 0;

        l4 = 0L;

        i6 = -1;

        i5 = -1;

     label25:
        $r33 = r2[i0];

        $z8 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>("####");

        if $z8 == 0 goto label81;

        $r38 = r6.<android.net.wifi.BatchedScanResult: java.util.List scanResults>;

        $i19 = interfaceinvoke $r38.<java.util.List: int size()>();

        if $i19 == 0 goto label27;

        $r39 = r0.<android.net.wifi.WifiStateMachine: java.util.List mBatchedScanResults>;

        interfaceinvoke $r39.<java.util.List: boolean add(java.lang.Object)>(r6);

        $r36 = new android.net.wifi.BatchedScanResult;

        specialinvoke $r36.<android.net.wifi.BatchedScanResult: void <init>()>();

        r6 = $r36;

     label26:
        goto label81;

     label27:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void logd(java.lang.String)>("Found empty batch");

     label28:
        goto label81;

     label29:
        $r43 = r2[i0];

        $z15 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>("trunc");

        if $z15 == 0 goto label31;

        r6.<android.net.wifi.BatchedScanResult: boolean truncated> = 1;

     label30:
        goto label81;

     label31:
        $r40 = r2[i0];

        $z13 = virtualinvoke $r40.<java.lang.String: boolean startsWith(java.lang.String)>("bssid=");

        if $z13 == 0 goto label33;

        $r69 = new java.lang.String;

        $r68 = r2[i0];

        $r79 = virtualinvoke $r68.<java.lang.String: byte[] getBytes()>();

        $r80 = r2[i0];

        $i29 = virtualinvoke $r80.<java.lang.String: int length()>();

        $i30 = $i29 - i9;

        specialinvoke $r69.<java.lang.String: void <init>(byte[],int,int)>($r79, i9, $i30);

        r7 = $r69;

     label32:
        goto label81;

     label33:
        $r41 = r2[i0];

        z1 = virtualinvoke $r41.<java.lang.String: boolean startsWith(java.lang.String)>("freq=");

     label34:
        if z1 == 0 goto label40;

     label35:
        $r66 = r2[i0];

        $r65 = "freq=";

        $i24 = virtualinvoke $r65.<java.lang.String: int length()>();

        $r67 = virtualinvoke $r66.<java.lang.String: java.lang.String substring(int)>($i24);

        i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r67);

     label36:
        i3 = i13;

        goto label81;

     label37:
        $r104 := @caughtexception;

     label38:
        $r105 = new java.lang.StringBuilder;

        specialinvoke $r105.<java.lang.StringBuilder: void <init>()>();

        $r110 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid freqency: ");

        $r111 = r2[i0];

        $r108 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r111);

        $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r109);

     label39:
        i3 = 0;

        goto label81;

     label40:
        $r47 = r2[i0];

        z0 = virtualinvoke $r47.<java.lang.String: boolean startsWith(java.lang.String)>("age=");

     label41:
        if z0 == 0 goto label47;

     label42:
        $r72 = r2[i0];

        $r71 = "age=";

        $i26 = virtualinvoke $r71.<java.lang.String: int length()>();

        $r73 = virtualinvoke $r72.<java.lang.String: java.lang.String substring(int)>($i26);

        l14 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r73);

     label43:
        $l23 = l7 - l14;

        l4 = 1000L * $l23;

        goto label81;

     label44:
        $r100 := @caughtexception;

     label45:
        $r101 = new java.lang.StringBuilder;

        specialinvoke $r101.<java.lang.StringBuilder: void <init>()>();

        $r120 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid timestamp: ");

        $r119 = r2[i0];

        $r122 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r119);

        $r121 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r121);

     label46:
        l4 = 0L;

        goto label81;

     label47:
        $r46 = r2[i0];

        $z16 = virtualinvoke $r46.<java.lang.String: boolean startsWith(java.lang.String)>("ssid=");

        if $z16 == 0 goto label49;

        $r60 = r2[i0];

        $r61 = "ssid=";

        $i25 = virtualinvoke $r61.<java.lang.String: int length()>();

        $r70 = virtualinvoke $r60.<java.lang.String: java.lang.String substring(int)>($i25);

        r8 = staticinvoke <android.net.wifi.WifiSsid: android.net.wifi.WifiSsid createFromAsciiEncoded(java.lang.String)>($r70);

     label48:
        goto label81;

     label49:
        $r45 = r2[i0];

        z3 = virtualinvoke $r45.<java.lang.String: boolean startsWith(java.lang.String)>("level=");

     label50:
        if z3 == 0 goto label56;

     label51:
        $r63 = r2[i0];

        $r64 = "level=";

        $i22 = virtualinvoke $r64.<java.lang.String: int length()>();

        $r62 = virtualinvoke $r63.<java.lang.String: java.lang.String substring(int)>($i22);

        i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r62);

     label52:
        i2 = i11;

        if i2 <= 0 goto label81;

        i2 = i2 + -256;

        goto label81;

     label53:
        $r118 := @caughtexception;

     label54:
        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid level: ");

        $r112 = r2[i0];

        $r115 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r112);

        $r114 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r114);

     label55:
        i2 = 0;

        goto label81;

     label56:
        $r44 = r2[i0];

        z2 = virtualinvoke $r44.<java.lang.String: boolean startsWith(java.lang.String)>("dist=");

     label57:
        if z2 == 0 goto label63;

     label58:
        $r56 = r2[i0];

        $r57 = "dist=";

        $i20 = virtualinvoke $r57.<java.lang.String: int length()>();

        $r55 = virtualinvoke $r56.<java.lang.String: java.lang.String substring(int)>($i20);

        i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r55);

     label59:
        i5 = i12;

        goto label81;

     label60:
        $r98 := @caughtexception;

     label61:
        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r96 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid distance: ");

        $r97 = r2[i0];

        $r102 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r97);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r103);

     label62:
        i5 = -1;

        goto label81;

     label63:
        $r54 = r2[i0];

        z4 = virtualinvoke $r54.<java.lang.String: boolean startsWith(java.lang.String)>("distSd=");

     label64:
        if z4 == 0 goto label70;

     label65:
        $r59 = r2[i0];

        $r49 = "distSd=";

        $i21 = virtualinvoke $r49.<java.lang.String: int length()>();

        $r58 = virtualinvoke $r59.<java.lang.String: java.lang.String substring(int)>($i21);

        i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r58);

     label66:
        i6 = i10;

        goto label81;

     label67:
        $r89 := @caughtexception;

     label68:
        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid distanceSd: ");

        $r86 = r2[i0];

        $r106 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r107);

     label69:
        i6 = -1;

        goto label81;

     label70:
        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse batched scan result line: ");

        $r50 = r2[i0];

        $r51 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r48 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r48);

     label71:
        goto label81;

     label72:
        $r26 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        r15 = virtualinvoke $r26.<android.net.wifi.WifiNative: java.lang.String getBatchedScanResults()>();

     label73:
        if r15 != null goto label76;

     label74:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>("Unexpected null BatchedScanResults");

        exitmonitor r4;

     label75:
        return;

     label76:
        r2 = virtualinvoke r15.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        $i17 = lengthof r2;

        if $i17 == 0 goto label77;

        $r30 = r2[0];

        $z9 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>("ok");

        if $z9 == 0 goto label80;

     label77:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>("batch scan results just ended!");

        $r31 = r0.<android.net.wifi.WifiStateMachine: java.util.List mBatchedScanResults>;

        $i18 = interfaceinvoke $r31.<java.util.List: int size()>();

        if $i18 <= 0 goto label78;

        $r29 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r28 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r29.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r3, $r28);

     label78:
        exitmonitor r4;

     label79:
        return;

     label80:
        i0 = 0;

        goto label12;

     label81:
        i0 = i0 + 1;

        goto label12;

        catch java.lang.NumberFormatException from label03 to label04 with label06;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label21 to label22 with label18;
        catch java.lang.Throwable from label23 to label24 with label18;
        catch java.lang.Throwable from label25 to label26 with label18;
        catch java.lang.Throwable from label27 to label28 with label18;
        catch java.lang.Throwable from label29 to label30 with label18;
        catch java.lang.Throwable from label31 to label32 with label18;
        catch java.lang.Throwable from label33 to label34 with label18;
        catch java.lang.NumberFormatException from label35 to label36 with label37;
        catch java.lang.Throwable from label35 to label36 with label18;
        catch java.lang.Throwable from label38 to label39 with label18;
        catch java.lang.Throwable from label40 to label41 with label18;
        catch java.lang.NumberFormatException from label42 to label43 with label44;
        catch java.lang.Throwable from label42 to label43 with label18;
        catch java.lang.Throwable from label45 to label46 with label18;
        catch java.lang.Throwable from label47 to label48 with label18;
        catch java.lang.Throwable from label49 to label50 with label18;
        catch java.lang.NumberFormatException from label51 to label52 with label53;
        catch java.lang.Throwable from label51 to label52 with label18;
        catch java.lang.Throwable from label54 to label55 with label18;
        catch java.lang.Throwable from label56 to label57 with label18;
        catch java.lang.NumberFormatException from label58 to label59 with label60;
        catch java.lang.Throwable from label58 to label59 with label18;
        catch java.lang.Throwable from label61 to label62 with label18;
        catch java.lang.Throwable from label63 to label64 with label18;
        catch java.lang.NumberFormatException from label65 to label66 with label67;
        catch java.lang.Throwable from label65 to label66 with label18;
        catch java.lang.Throwable from label68 to label69 with label18;
        catch java.lang.Throwable from label70 to label71 with label18;
        catch java.lang.Throwable from label72 to label73 with label18;
        catch java.lang.Throwable from label74 to label75 with label18;
        catch java.lang.Throwable from label76 to label77 with label18;
        catch java.lang.Throwable from label77 to label78 with label18;
        catch java.lang.Throwable from label78 to label79 with label18;
    }

    private void sendLinkConfigurationChangedBroadcast()
    {
        android.net.wifi.WifiStateMachine r0;
        android.content.Intent r1, $r2;
        android.net.LinkProperties $r4, $r5;
        android.os.UserHandle $r7;
        android.content.Context $r8;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.LINK_CONFIGURATION_CHANGED");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        $r4 = new android.net.LinkProperties;

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.net.LinkProperties mLinkProperties>;

        specialinvoke $r4.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r5);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("linkProperties", $r4);

        $r8 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r7 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r8.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r7);

        return;
    }

    private void sendNetworkStateChangeBroadcast(java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;
        android.content.Intent r2, $r3;
        android.net.NetworkInfo $r5, $r6, $r11, $r20;
        android.net.LinkProperties $r8, $r9;
        android.net.NetworkInfo$DetailedState $r12, $r13, $r19, $r22;
        android.net.wifi.WifiInfo $r14, $r15;
        android.content.Context $r17;
        android.os.UserHandle $r18;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: java.lang.String;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.STATE_CHANGE");

        r2 = $r3;

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        $r5 = new android.net.NetworkInfo;

        $r6 = r0.<android.net.wifi.WifiStateMachine: android.net.NetworkInfo mNetworkInfo>;

        specialinvoke $r5.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r6);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("networkInfo", $r5);

        $r8 = new android.net.LinkProperties;

        $r9 = r0.<android.net.wifi.WifiStateMachine: android.net.LinkProperties mLinkProperties>;

        specialinvoke $r8.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r9);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("linkProperties", $r8);

        if r1 == null goto label1;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("bssid", r1);

     label1:
        $r11 = r0.<android.net.wifi.WifiStateMachine: android.net.NetworkInfo mNetworkInfo>;

        $r12 = virtualinvoke $r11.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        $r13 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState VERIFYING_POOR_LINK>;

        if $r12 == $r13 goto label2;

        $r20 = r0.<android.net.wifi.WifiStateMachine: android.net.NetworkInfo mNetworkInfo>;

        $r19 = virtualinvoke $r20.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        $r22 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if $r19 != $r22 goto label3;

     label2:
        $r15 = new android.net.wifi.WifiInfo;

        $r14 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        specialinvoke $r15.<android.net.wifi.WifiInfo: void <init>(android.net.wifi.WifiInfo)>($r14);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("wifiInfo", $r15);

     label3:
        $r17 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r18 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r17.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r2, $r18);

        return;
    }

    private void sendRssiChangeBroadcast(int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;
        android.content.Intent r1, $r2;
        android.os.UserHandle $r5;
        android.content.Context $r6;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.RSSI_CHANGED");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("newRssi", i0);

        $r6 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r6.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

        return;
    }

    private void sendScanResultsAvailableBroadcast()
    {
        android.net.wifi.WifiStateMachine r0;
        android.content.Intent r1, $r2;
        android.os.UserHandle $r4;
        android.content.Context $r5;

        r0 := @this: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void noteScanEnd()>();

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.SCAN_RESULTS");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r4 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r4);

        return;
    }

    private void sendSupplicantConnectionChangedBroadcast(boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;
        android.content.Intent r1, $r2;
        android.os.UserHandle $r5;
        android.content.Context $r6;

        r0 := @this: android.net.wifi.WifiStateMachine;

        z0 := @parameter0: boolean;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.supplicant.CONNECTION_CHANGE");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("connected", z0);

        $r6 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r6.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

        return;
    }

    private void setCountryCode()
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        boolean $z0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r2 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r1 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r3, "wifi_country_code");

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void setCountryCode(java.lang.String,boolean)>(r1, 0);

     label1:
        return;
    }

    private void setFrequencyBand()
    {
        android.net.wifi.WifiStateMachine r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "wifi_frequency_band", 0);

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void setFrequencyBand(int,boolean)>($i0, 0);

        return;
    }

    private void setNetworkDetailedState(android.net.NetworkInfo$DetailedState)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.NetworkInfo$DetailedState r1, $r3;
        android.net.NetworkInfo $r2, $r5;
        android.net.wifi.WifiInfo $r4;
        java.lang.String $r6;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.net.NetworkInfo$DetailedState;

        $r2 = r0.<android.net.wifi.WifiStateMachine: android.net.NetworkInfo mNetworkInfo>;

        $r3 = virtualinvoke $r2.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        if r1 == $r3 goto label1;

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.net.NetworkInfo mNetworkInfo>;

        $r4 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        $r6 = virtualinvoke $r4.<android.net.wifi.WifiInfo: java.lang.String getSSID()>();

        virtualinvoke $r5.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>(r1, null, $r6);

     label1:
        return;
    }

    private void setNextBatchedAlarm(int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, i1, i2, $i4, $i5, $i8, $i9, $i11, $i12, $i13, $i14;
        android.net.wifi.BatchedScanSettings $r1, $r2, $r3, $r4, $r6, $r8;
        long $l3, $l6, $l7, $l10, $l15, $l16;
        android.app.AlarmManager $r5;
        android.app.PendingIntent $r7;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        if $r1 == null goto label1;

        if i0 >= 1 goto label2;

     label1:
        return;

     label2:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        $i4 = $r2.<android.net.wifi.BatchedScanSettings: int scanIntervalSec>;

        $i5 = 1000 * $i4;

        $l6 = (long) $i5;

        $l7 = $l3 + $l6;

        r0.<android.net.wifi.WifiStateMachine: long mBatchedScanMinPollTime> = $l7;

        $r3 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        $i8 = $r3.<android.net.wifi.BatchedScanSettings: int maxScansPerBatch>;

        if $i8 >= i0 goto label3;

        $r8 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        i0 = $r8.<android.net.wifi.BatchedScanSettings: int maxScansPerBatch>;

     label3:
        $r4 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        $i9 = $r4.<android.net.wifi.BatchedScanSettings: int scanIntervalSec>;

        i1 = i0 * $i9;

        i2 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("wifi.batchedScan.pollPeriod", 0);

        if i2 <= 0 goto label4;

        i1 = i2;

     label4:
        $r5 = r0.<android.net.wifi.WifiStateMachine: android.app.AlarmManager mAlarmManager>;

        $l10 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r6 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        $i12 = $r6.<android.net.wifi.BatchedScanSettings: int scanIntervalSec>;

        $i11 = $i12 / 2;

        $i14 = i1 - $i11;

        $i13 = 1000 * $i14;

        $l15 = (long) $i13;

        $l16 = $l10 + $l15;

        $r7 = r0.<android.net.wifi.WifiStateMachine: android.app.PendingIntent mBatchedScanIntervalIntent>;

        virtualinvoke $r5.<android.app.AlarmManager: void setExact(int,long,android.app.PendingIntent)>(0, $l16, $r7);

        return;
    }

    private void setScanResults()
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1, r2, r5, r7, r11, r12, r14, r15, $r24, $r26, $r36, $r38, $r39, $r40, $r41, $r42, $r43, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r57;
        int i0, i1, i3, i4, i5, i6, i7, i8, i10, i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        long l2, l9;
        android.net.wifi.WifiSsid r3;
        java.lang.StringBuffer r4, $r19;
        java.lang.String[] r6, r10;
        java.lang.Throwable r8, $r55;
        android.util.LruCache r9, $r29, $r34;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z11, $z12;
        android.net.wifi.ScanResult r13, $r33;
        android.net.wifi.WifiNative $r20;
        java.util.ArrayList $r25;
        java.lang.StringBuilder $r27, $r28, $r30;
        java.util.List $r31;
        java.lang.Object $r32;
        byte[] $r37, $r44;
        java.lang.NumberFormatException $r52, $r53, $r54, $r56;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 = "";

        i0 = 0;

        i1 = 0;

        l2 = 0L;

        r2 = "";

        r3 = null;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        r4 = $r19;

        i3 = 0;

     label01:
        $r20 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        r5 = virtualinvoke $r20.<android.net.wifi.WifiNative: java.lang.String scanResults(int)>(i3);

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z3 == 0 goto label03;

     label02:
        r7 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r7);

        if $z4 == 0 goto label10;

        return;

     label03:
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        i3 = -1;

        $i13 = lengthof r6;

        i4 = -1 + $i13;

     label04:
        if i4 < 0 goto label05;

        $r51 = r6[i4];

        $z12 = virtualinvoke $r51.<java.lang.String: boolean startsWith(java.lang.String)>("####");

        if $z12 == 0 goto label06;

     label05:
        if i3 != -1 goto label01;

        goto label02;

     label06:
        $r50 = r6[i4];

        $z11 = virtualinvoke $r50.<java.lang.String: boolean startsWith(java.lang.String)>("id=");

        if $z11 == 0 goto label09;

     label07:
        $r48 = r6[i4];

        $r49 = "id=";

        $i21 = virtualinvoke $r49.<java.lang.String: int length()>();

        $r57 = virtualinvoke $r48.<java.lang.String: java.lang.String substring(int)>($i21);

        i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r57);

     label08:
        i3 = i12 + 1;

        goto label05;

     label09:
        i4 = i4 + -1;

        goto label04;

     label10:
        r9 = r0.<android.net.wifi.WifiStateMachine: android.util.LruCache mScanResultCache>;

        entermonitor r9;

     label11:
        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        r0.<android.net.wifi.WifiStateMachine: java.util.List mScanResults> = $r25;

        r10 = virtualinvoke r7.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        $r24 = "bssid=";

        i5 = virtualinvoke $r24.<java.lang.String: int length()>();

        $r26 = "flags=";

        i7 = virtualinvoke $r26.<java.lang.String: int length()>();

        i6 = lengthof r10;

     label12:
        i8 = 0;

     label13:
        if i8 >= i6 goto label51;

     label14:
        r11 = r10[i8];

        $z5 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("bssid=");

        if $z5 == 0 goto label16;

        $r45 = new java.lang.String;

        $r44 = virtualinvoke r11.<java.lang.String: byte[] getBytes()>();

        $i19 = virtualinvoke r11.<java.lang.String: int length()>();

        $i22 = $i19 - i5;

        specialinvoke $r45.<java.lang.String: void <init>(byte[],int,int)>($r44, i5, $i22);

        r1 = $r45;

     label15:
        goto label54;

     label16:
        z1 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("freq=");

     label17:
        if z1 == 0 goto label21;

     label18:
        $r47 = "freq=";

        $i20 = virtualinvoke $r47.<java.lang.String: int length()>();

        $r46 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i20);

        i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r46);

     label19:
        i1 = i10;

        goto label54;

     label20:
        $r56 := @caughtexception;

        i1 = 0;

        goto label54;

     label21:
        z0 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("level=");

     label22:
        if z0 == 0 goto label26;

     label23:
        $r40 = "level=";

        $i16 = virtualinvoke $r40.<java.lang.String: int length()>();

        $r41 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i16);

        i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r41);

     label24:
        i0 = i11;

        if i0 <= 0 goto label54;

        i0 = i0 + -256;

        goto label54;

     label25:
        $r53 := @caughtexception;

        i0 = 0;

        goto label54;

     label26:
        z2 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("tsf=");

     label27:
        if z2 == 0 goto label31;

     label28:
        $r42 = "tsf=";

        $i18 = virtualinvoke $r42.<java.lang.String: int length()>();

        $r43 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i18);

        l9 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r43);

     label29:
        l2 = l9;

        goto label54;

     label30:
        $r52 := @caughtexception;

        l2 = 0L;

        goto label54;

     label31:
        $z6 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("flags=");

        if $z6 == 0 goto label33;

        $r36 = new java.lang.String;

        $r37 = virtualinvoke r11.<java.lang.String: byte[] getBytes()>();

        $i14 = virtualinvoke r11.<java.lang.String: int length()>();

        $i17 = $i14 - i7;

        specialinvoke $r36.<java.lang.String: void <init>(byte[],int,int)>($r37, i7, $i17);

        r2 = $r36;

     label32:
        goto label54;

     label33:
        $z7 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("ssid=");

        if $z7 == 0 goto label35;

        $r38 = "ssid=";

        $i15 = virtualinvoke $r38.<java.lang.String: int length()>();

        $r39 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i15);

        r3 = staticinvoke <android.net.wifi.WifiSsid: android.net.wifi.WifiSsid createFromAsciiEncoded(java.lang.String)>($r39);

     label34:
        goto label54;

     label35:
        $z8 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("====");

        if $z8 != 0 goto label36;

        $z10 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("####");

        if $z10 == 0 goto label54;

     label36:
        if r1 == null goto label55;

        if r3 == null goto label56;

     label37:
        r12 = virtualinvoke r3.<android.net.wifi.WifiSsid: java.lang.String toString()>();

     label38:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        r14 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = r0.<android.net.wifi.WifiStateMachine: android.util.LruCache mScanResultCache>;

        $r32 = virtualinvoke $r29.<android.util.LruCache: java.lang.Object get(java.lang.Object)>(r14);

        r13 = (android.net.wifi.ScanResult) $r32;

     label39:
        if r13 == null goto label46;

     label40:
        r13.<android.net.wifi.ScanResult: int level> = i0;

        r13.<android.net.wifi.ScanResult: android.net.wifi.WifiSsid wifiSsid> = r3;

     label41:
        if r3 == null goto label57;

     label42:
        r15 = virtualinvoke r3.<android.net.wifi.WifiSsid: java.lang.String toString()>();

     label43:
        r13.<android.net.wifi.ScanResult: java.lang.String SSID> = r15;

        r13.<android.net.wifi.ScanResult: java.lang.String capabilities> = r2;

        r13.<android.net.wifi.ScanResult: int frequency> = i1;

        r13.<android.net.wifi.ScanResult: long timestamp> = l2;

     label44:
        $r31 = r0.<android.net.wifi.WifiStateMachine: java.util.List mScanResults>;

        interfaceinvoke $r31.<java.util.List: boolean add(java.lang.Object)>(r13);

     label45:
        goto label55;

     label46:
        $r33 = new android.net.wifi.ScanResult;

        specialinvoke $r33.<android.net.wifi.ScanResult: void <init>(android.net.wifi.WifiSsid,java.lang.String,java.lang.String,int,int,long)>(r3, r1, r2, i0, i1, l2);

        r13 = $r33;

        $r34 = r0.<android.net.wifi.WifiStateMachine: android.util.LruCache mScanResultCache>;

        virtualinvoke $r34.<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r13);

     label47:
        goto label44;

     label48:
        $r55 := @caughtexception;

        r8 = $r55;

     label49:
        exitmonitor r9;

     label50:
        throw r8;

     label51:
        exitmonitor r9;

     label52:
        return;

     label53:
        $r54 := @caughtexception;

        goto label05;

     label54:
        i8 = i8 + 1;

        goto label13;

     label55:
        l2 = 0L;

        r2 = "";

        r3 = null;

        r1 = null;

        i0 = 0;

        i1 = 0;

        goto label54;

     label56:
        r12 = "<unknown ssid>";

        goto label38;

     label57:
        r15 = "<unknown ssid>";

        goto label43;

        catch java.lang.NumberFormatException from label07 to label08 with label53;
        catch java.lang.Throwable from label11 to label12 with label48;
        catch java.lang.Throwable from label14 to label15 with label48;
        catch java.lang.Throwable from label16 to label17 with label48;
        catch java.lang.NumberFormatException from label18 to label19 with label20;
        catch java.lang.Throwable from label18 to label19 with label48;
        catch java.lang.Throwable from label21 to label22 with label48;
        catch java.lang.NumberFormatException from label23 to label24 with label25;
        catch java.lang.Throwable from label23 to label24 with label48;
        catch java.lang.Throwable from label26 to label27 with label48;
        catch java.lang.NumberFormatException from label28 to label29 with label30;
        catch java.lang.Throwable from label28 to label29 with label48;
        catch java.lang.Throwable from label31 to label32 with label48;
        catch java.lang.Throwable from label33 to label34 with label48;
        catch java.lang.Throwable from label35 to label36 with label48;
        catch java.lang.Throwable from label37 to label38 with label48;
        catch java.lang.Throwable from label38 to label39 with label48;
        catch java.lang.Throwable from label40 to label41 with label48;
        catch java.lang.Throwable from label42 to label43 with label48;
        catch java.lang.Throwable from label43 to label44 with label48;
        catch java.lang.Throwable from label44 to label45 with label48;
        catch java.lang.Throwable from label46 to label47 with label48;
        catch java.lang.Throwable from label49 to label50 with label48;
        catch java.lang.Throwable from label51 to label52 with label48;
    }

    private void setSuspendOptimizations(int, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i4 = r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled>;

        $i3 = i0 ^ -1;

        $i5 = $i4 & $i3;

        r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled> = $i5;

        return;

     label1:
        $i1 = r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled>;

        $i2 = i0 | $i1;

        r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled> = $i2;

        return;
    }

    private void setSuspendOptimizationsNative(int, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0, $z2;
        android.net.wifi.WifiNative $r1, $r3;
        java.util.concurrent.atomic.AtomicBoolean $r2;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label2;

        $i4 = r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled>;

        $i3 = i0 ^ -1;

        $i5 = $i4 & $i3;

        r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled> = $i5;

        $i6 = r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled>;

        if $i6 != 0 goto label1;

        $r2 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mUserWantsSuspendOpt>;

        $z2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 == 0 goto label1;

        $r3 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        virtualinvoke $r3.<android.net.wifi.WifiNative: boolean setSuspendOptimizations(boolean)>(1);

     label1:
        return;

     label2:
        $i1 = r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled>;

        $i2 = i0 | $i1;

        r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled> = $i2;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        virtualinvoke $r1.<android.net.wifi.WifiNative: boolean setSuspendOptimizations(boolean)>(0);

        return;
    }

    private void setWifiApState(int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, i1;
        android.content.Intent r2, $r5;
        java.util.concurrent.atomic.AtomicInteger $r3, $r4;
        android.os.UserHandle $r9;
        android.content.Context $r10;
        com.android.internal.app.IBatteryStats $r11, $r12;
        android.os.RemoteException $r13;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        $r3 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mWifiApState>;

        i1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i0 != 13 goto label3;

     label1:
        $r12 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r12.<com.android.internal.app.IBatteryStats: void noteWifiOn()>();

     label2:
        $r4 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mWifiApState>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(i0);

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.WIFI_AP_STATE_CHANGED");

        r2 = $r5;

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("wifi_state", i0);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("previous_wifi_state", i1);

        $r10 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r9 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r10.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r2, $r9);

        return;

     label3:
        if i0 != 11 goto label2;

     label4:
        $r11 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r11.<com.android.internal.app.IBatteryStats: void noteWifiOff()>();

     label5:
        goto label2;

     label6:
        $r13 := @caughtexception;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>("Failed to note battery stats in wifi");

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private void setWifiState(int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0, i1;
        android.content.Intent r2, $r5;
        java.util.concurrent.atomic.AtomicInteger $r3, $r4;
        android.os.UserHandle $r9;
        android.content.Context $r10;
        com.android.internal.app.IBatteryStats $r11, $r12;
        android.os.RemoteException $r13;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        $r3 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mWifiState>;

        i1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i0 != 3 goto label3;

     label1:
        $r12 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r12.<com.android.internal.app.IBatteryStats: void noteWifiOn()>();

     label2:
        $r4 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mWifiState>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(i0);

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.WIFI_STATE_CHANGED");

        r2 = $r5;

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("wifi_state", i0);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("previous_wifi_state", i1);

        $r10 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r9 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r10.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r2, $r9);

        return;

     label3:
        if i0 != 1 goto label2;

     label4:
        $r11 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r11.<com.android.internal.app.IBatteryStats: void noteWifiOff()>();

     label5:
        goto label2;

     label6:
        $r13 := @caughtexception;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>("Failed to note battery stats in wifi");

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private void startBatchedScan()
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1, $r11;
        java.lang.NumberFormatException r2, $r8;
        android.net.wifi.BatchedScanSettings $r3, $r6;
        boolean $z0;
        android.app.PendingIntent $r4;
        android.app.AlarmManager $r5;
        android.net.wifi.WifiNative $r7;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r9, $r10, $r12;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r3 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        if $r3 != null goto label2;

     label1:
        return;

     label2:
        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mDhcpActive>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void retrieveBatchedScanData()>();

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.app.AlarmManager mAlarmManager>;

        $r4 = r0.<android.net.wifi.WifiStateMachine: android.app.PendingIntent mBatchedScanIntervalIntent>;

        virtualinvoke $r5.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r4);

        $r7 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        $r6 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.BatchedScanSettings mBatchedScanSettings>;

        r1 = virtualinvoke $r7.<android.net.wifi.WifiNative: java.lang.String setBatchedScanSettings(android.net.wifi.BatchedScanSettings)>($r6);

     label3:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        r0.<android.net.wifi.WifiStateMachine: int mExpectedBatchedScans> = $i0;

        $i1 = r0.<android.net.wifi.WifiStateMachine: int mExpectedBatchedScans>;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setNextBatchedAlarm(int)>($i1);

        $i2 = r0.<android.net.wifi.WifiStateMachine: int mExpectedBatchedScans>;

        if $i2 <= 0 goto label1;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void noteBatchedScanStart()>();

     label4:
        return;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void stopBatchedScan()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception parsing WifiNative.setBatchedScanSettings response ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r11);

        return;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    private void startNextBatchedScan()
    {
        android.net.wifi.WifiStateMachine r0;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void retrieveBatchedScanData()>();

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mExpectedBatchedScans>;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setNextBatchedAlarm(int)>($i0);

        return;
    }

    private void startNextBatchedScanAsync()
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131208);

        return;
    }

    private void startScanNative(int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;
        android.net.wifi.WifiNative $r1;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        virtualinvoke $r1.<android.net.wifi.WifiNative: boolean scan(int)>(i0);

        r0.<android.net.wifi.WifiStateMachine: boolean mScanResultIsPending> = 1;

        return;
    }

    private void startSoftApWithConfig(android.net.wifi.WifiConfiguration)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.WifiConfiguration r1;
        java.lang.Thread $r2;
        android.net.wifi.WifiStateMachine$7 $r3;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        $r2 = new java.lang.Thread;

        $r3 = new android.net.wifi.WifiStateMachine$7;

        specialinvoke $r3.<android.net.wifi.WifiStateMachine$7: void <init>(android.net.wifi.WifiStateMachine,android.net.wifi.WifiConfiguration)>(r0, r1);

        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable)>($r3);

        virtualinvoke $r2.<java.lang.Thread: void start()>();

        return;
    }

    private boolean startTethering(java.util.ArrayList)
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.ArrayList r1;
        java.lang.String[] r2;
        java.util.Iterator r3;
        java.lang.String r4, $r9, $r14, $r25;
        int i0, i1, $i2;
        java.lang.Exception r5, $r18;
        android.net.InterfaceConfiguration r6;
        android.net.ConnectivityManager $r7, $r11;
        boolean $z0, $z1;
        java.lang.Object $r8;
        android.os.INetworkManagementService $r10, $r19;
        java.lang.StringBuilder $r12, $r13, $r15, $r20, $r21, $r22, $r23, $r24;
        java.net.InetAddress $r16;
        android.net.LinkAddress $r17;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: java.util.ArrayList;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void checkAndSetConnectivityInstance()>();

        $r7 = r0.<android.net.wifi.WifiStateMachine: android.net.ConnectivityManager mCm>;

        r2 = virtualinvoke $r7.<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()>();

        r3 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        i0 = lengthof r2;

        i1 = 0;

     label02:
        if i1 >= i0 goto label01;

        $r9 = r2[i1];

        $z1 = virtualinvoke r4.<java.lang.String: boolean matches(java.lang.String)>($r9);

        if $z1 == 0 goto label10;

     label03:
        $r10 = r0.<android.net.wifi.WifiStateMachine: android.os.INetworkManagementService mNwService>;

        r6 = interfaceinvoke $r10.<android.os.INetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>(r4);

     label04:
        if r6 == null goto label06;

     label05:
        $r17 = new android.net.LinkAddress;

        $r16 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>("192.168.43.1");

        specialinvoke $r17.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>($r16, 24);

        virtualinvoke r6.<android.net.InterfaceConfiguration: void setLinkAddress(android.net.LinkAddress)>($r17);

        virtualinvoke r6.<android.net.InterfaceConfiguration: void setInterfaceUp()>();

        $r19 = r0.<android.net.wifi.WifiStateMachine: android.os.INetworkManagementService mNwService>;

        interfaceinvoke $r19.<android.os.INetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>(r4, r6);

     label06:
        $r11 = r0.<android.net.wifi.WifiStateMachine: android.net.ConnectivityManager mCm>;

        $i2 = virtualinvoke $r11.<android.net.ConnectivityManager: int tether(java.lang.String)>(r4);

        if $i2 == 0 goto label09;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error tethering on ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r14);

     label07:
        return 0;

     label08:
        $r18 := @caughtexception;

        r5 = $r18;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error configuring interface ");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", :");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r25);

        return 0;

     label09:
        r0.<android.net.wifi.WifiStateMachine: java.lang.String mTetherInterfaceName> = r4;

        return 1;

     label10:
        i1 = i1 + 1;

        goto label02;

        catch java.lang.Exception from label03 to label04 with label08;
        catch java.lang.Exception from label05 to label06 with label08;
    }

    private void stopBatchedScan()
    {
        android.net.wifi.WifiStateMachine r0;
        android.app.PendingIntent $r1;
        android.app.AlarmManager $r2;
        android.net.wifi.WifiNative $r3;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r2 = r0.<android.net.wifi.WifiStateMachine: android.app.AlarmManager mAlarmManager>;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.app.PendingIntent mBatchedScanIntervalIntent>;

        virtualinvoke $r2.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r1);

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void retrieveBatchedScanData()>();

        $r3 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        virtualinvoke $r3.<android.net.wifi.WifiNative: java.lang.String setBatchedScanSettings(android.net.wifi.BatchedScanSettings)>(null);

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void noteBatchedScanStop()>();

        return;
    }

    private void stopTethering()
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.Exception r1, $r11;
        android.net.InterfaceConfiguration r2;
        java.lang.String $r3, $r5, $r9, $r15, $r18;
        android.os.INetworkManagementService $r4, $r10;
        android.net.ConnectivityManager $r6;
        int $i0;
        android.net.LinkAddress $r7;
        java.net.InetAddress $r8;
        java.lang.StringBuilder $r12, $r13, $r14, $r16, $r17;

        r0 := @this: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void checkAndSetConnectivityInstance()>();

     label1:
        $r4 = r0.<android.net.wifi.WifiStateMachine: android.os.INetworkManagementService mNwService>;

        $r3 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mTetherInterfaceName>;

        r2 = interfaceinvoke $r4.<android.os.INetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>($r3);

     label2:
        if r2 == null goto label4;

     label3:
        $r7 = new android.net.LinkAddress;

        $r8 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>("0.0.0.0");

        specialinvoke $r7.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>($r8, 0);

        virtualinvoke r2.<android.net.InterfaceConfiguration: void setLinkAddress(android.net.LinkAddress)>($r7);

        $r10 = r0.<android.net.wifi.WifiStateMachine: android.os.INetworkManagementService mNwService>;

        $r9 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mTetherInterfaceName>;

        interfaceinvoke $r10.<android.os.INetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>($r9, r2);

     label4:
        $r6 = r0.<android.net.wifi.WifiStateMachine: android.net.ConnectivityManager mCm>;

        $r5 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mTetherInterfaceName>;

        $i0 = virtualinvoke $r6.<android.net.ConnectivityManager: int untether(java.lang.String)>($r5);

        if $i0 == 0 goto label5;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>("Untether initiate failed!");

     label5:
        return;

     label6:
        $r11 := @caughtexception;

        r1 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error resetting interface ");

        $r15 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mTetherInterfaceName>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", :");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>($r18);

        goto label4;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label4 with label6;
    }

    private void updateLinkProperties()
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.LinkProperties r1, r4, $r7, $r11, $r14, $r19;
        java.lang.Object r2, $r22, $r27;
        java.lang.Throwable r3, $r25;
        java.util.Iterator r5, r6;
        java.lang.String $r8, $r23;
        int $i0;
        android.net.wifi.WifiConfigStore $r9;
        android.net.ProxyProperties $r10;
        java.util.Collection $r12, $r20, $r21;
        android.net.DhcpResults $r13, $r16, $r18;
        android.net.NetworkInfo$DetailedState $r15, $r17;
        boolean $z0, $z1, $z2;
        android.net.RouteInfo $r24;
        java.net.InetAddress $r26;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r7 = new android.net.LinkProperties;

        specialinvoke $r7.<android.net.LinkProperties: void <init>()>();

        r1 = $r7;

        $r8 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mInterfaceName>;

        virtualinvoke r1.<android.net.LinkProperties: void setInterfaceName(java.lang.String)>($r8);

        $r9 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfigStore mWifiConfigStore>;

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId>;

        $r10 = virtualinvoke $r9.<android.net.wifi.WifiConfigStore: android.net.ProxyProperties getProxyProperties(int)>($i0);

        virtualinvoke r1.<android.net.LinkProperties: void setHttpProxy(android.net.ProxyProperties)>($r10);

        $r11 = r0.<android.net.wifi.WifiStateMachine: android.net.LinkProperties mNetlinkLinkProperties>;

        $r12 = virtualinvoke $r11.<android.net.LinkProperties: java.util.Collection getLinkAddresses()>();

        virtualinvoke r1.<android.net.LinkProperties: void setLinkAddresses(java.util.Collection)>($r12);

        r2 = r0.<android.net.wifi.WifiStateMachine: java.lang.Object mDhcpResultsLock>;

        entermonitor r2;

     label01:
        $r13 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpResults mDhcpResults>;

        if $r13 == null goto label11;

        $r16 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpResults mDhcpResults>;

        $r19 = $r16.<android.net.DhcpResults: android.net.LinkProperties linkProperties>;

        if $r19 == null goto label11;

        $r18 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpResults mDhcpResults>;

        r4 = $r18.<android.net.DhcpResults: android.net.LinkProperties linkProperties>;

        $r20 = virtualinvoke r4.<android.net.LinkProperties: java.util.Collection getRoutes()>();

        r5 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r27 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r24 = (android.net.RouteInfo) $r27;

        virtualinvoke r1.<android.net.LinkProperties: void addRoute(android.net.RouteInfo)>($r24);

     label03:
        goto label02;

     label04:
        $r25 := @caughtexception;

        r3 = $r25;

     label05:
        exitmonitor r2;

     label06:
        throw r3;

     label07:
        $r21 = virtualinvoke r4.<android.net.LinkProperties: java.util.Collection getDnses()>();

        r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r22 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r26 = (java.net.InetAddress) $r22;

        virtualinvoke r1.<android.net.LinkProperties: void addDns(java.net.InetAddress)>($r26);

     label09:
        goto label08;

     label10:
        $r23 = virtualinvoke r4.<android.net.LinkProperties: java.lang.String getDomains()>();

        virtualinvoke r1.<android.net.LinkProperties: void setDomains(java.lang.String)>($r23);

     label11:
        exitmonitor r2;

     label12:
        $r14 = r0.<android.net.wifi.WifiStateMachine: android.net.LinkProperties mLinkProperties>;

        $z0 = virtualinvoke r1.<android.net.LinkProperties: boolean equals(java.lang.Object)>($r14);

        if $z0 != 0 goto label13;

        r0.<android.net.wifi.WifiStateMachine: android.net.LinkProperties mLinkProperties> = r1;

        $r15 = specialinvoke r0.<android.net.wifi.WifiStateMachine: android.net.NetworkInfo$DetailedState getNetworkDetailedState()>();

        $r17 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if $r15 != $r17 goto label13;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void sendLinkConfigurationChangedBroadcast()>();

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label11 to label12 with label04;
    }

    public void addToBlacklist(java.lang.String)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,java.lang.Object)>(131128, r1);

        return;
    }

    public void captivePortalCheckComplete()
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131092);

        return;
    }

    public void clearBlacklist()
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131129);

        return;
    }

    public void disconnectCommand()
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131145);

        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.net.wifi.WifiStateMachine r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        android.net.wifi.SupplicantStateTracker $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r10, $r11, $r13, $r15, $r17, $r19, $r20, $r21, $r22, $r24, $r26, $r28, $r29, $r30, $r32, $r34, $r35, $r37, $r38, $r39, $r40, $r41, $r43, $r44, $r45, $r47, $r48, $r50, $r53, $r54, $r57, $r58, $r59, $r61, $r62, $r64, $r65, $r66, $r67, $r69, $r70, $r72;
        android.net.LinkProperties $r7;
        java.lang.String $r9, $r14, $r18, $r25, $r27, $r31, $r33, $r36, $r42, $r46, $r49, $r52, $r55, $r60, $r63, $r68, $r71, $r73, $r75;
        android.net.wifi.WifiInfo $r12;
        android.net.DhcpResults $r16;
        android.net.NetworkInfo $r23;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.concurrent.atomic.AtomicBoolean $r51;
        android.net.wifi.WifiNative $r56;
        boolean $z0;
        android.net.wifi.WifiConfigStore $r74;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        specialinvoke r0.<com.android.internal.util.StateMachine: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        $r4 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.SupplicantStateTracker mSupplicantStateTracker>;

        virtualinvoke $r4.<android.net.wifi.SupplicantStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLinkProperties ");

        $r7 = r0.<android.net.wifi.WifiStateMachine: android.net.LinkProperties mLinkProperties>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mWifiInfo ");

        $r12 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDhcpResults ");

        $r16 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpResults mDhcpResults>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mNetworkInfo ");

        $r23 = r0.<android.net.wifi.WifiStateMachine: android.net.NetworkInfo mNetworkInfo>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r25);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastSignalLevel ");

        $i0 = r0.<android.net.wifi.WifiStateMachine: int mLastSignalLevel>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastBssid ");

        $r33 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mLastBssid>;

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r31 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastNetworkId ");

        $i1 = r0.<android.net.wifi.WifiStateMachine: int mLastNetworkId>;

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r36);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mReconnectCount ");

        $i2 = r0.<android.net.wifi.WifiStateMachine: int mReconnectCount>;

        $r38 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r42);

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mOperationalMode ");

        $i3 = r0.<android.net.wifi.WifiStateMachine: int mOperationalMode>;

        $r47 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r46);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mUserWantsSuspendOpt ");

        $r51 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mUserWantsSuspendOpt>;

        $r50 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r49);

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSuspendOptNeedsDisabled ");

        $i4 = r0.<android.net.wifi.WifiStateMachine: int mSuspendOptNeedsDisabled>;

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r52);

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Supplicant status ");

        $r56 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        $r55 = virtualinvoke $r56.<android.net.wifi.WifiNative: java.lang.String status()>();

        $r62 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r63);

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mEnableBackgroundScan ");

        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mEnableBackgroundScan>;

        $r59 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r60);

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastSetCountryCode ");

        $r71 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mLastSetCountryCode>;

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r73);

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mPersistedCountryCode ");

        $r68 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mPersistedCountryCode>;

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r75 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r75);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r74 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfigStore mWifiConfigStore>;

        virtualinvoke $r74.<android.net.wifi.WifiConfigStore: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        return;
    }

    public void enableAllNetworks()
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131127);

        return;
    }

    public void enableBackgroundScanCommand(boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;
        byte b0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        b0 = 1;

     label1:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131163, b0, 0);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public void enableRssiPolling(boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;
        byte b0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        b0 = 1;

     label1:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131154, b0, 0);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public void enableTdls(java.lang.String, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;
        boolean z0;
        byte b0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label2;

        b0 = 1;

     label1:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int,java.lang.Object)>(131164, b0, 0, r1);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public java.lang.String getConfigFile()
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.WifiConfigStore $r1;
        java.lang.String $r2;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfigStore mWifiConfigStore>;

        $r2 = virtualinvoke $r1.<android.net.wifi.WifiConfigStore: java.lang.String getConfigFile()>();

        return $r2;
    }

    public int getFrequencyBand()
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mFrequencyBand>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public android.os.Messenger getMessenger()
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Messenger $r1;
        android.os.Handler $r2;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = new android.os.Messenger;

        $r2 = virtualinvoke r0.<android.net.wifi.WifiStateMachine: android.os.Handler getHandler()>();

        specialinvoke $r1.<android.os.Messenger: void <init>(android.os.Handler)>($r2);

        return $r1;
    }

    void handlePostDhcpSetup()
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.WifiNative r1, $r2;
        com.android.internal.util.AsyncChannel $r3;

        r0 := @this: android.net.wifi.WifiStateMachine;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setSuspendOptimizationsNative(int,boolean)>(1, 1);

        $r2 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        virtualinvoke $r2.<android.net.wifi.WifiNative: void setPowerSave(boolean)>(1);

        $r3 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mWifiP2pChannel>;

        virtualinvoke $r3.<com.android.internal.util.AsyncChannel: void sendMessage(int,int)>(143375, 0);

        r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        virtualinvoke r1.<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceMode(int)>(2);

        r0.<android.net.wifi.WifiStateMachine: boolean mDhcpActive> = 0;

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void startBatchedScan()>();

        return;
    }

    void handlePreDhcpSetup()
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1, $r4;
        android.net.wifi.WifiNative r2, $r3;
        boolean $z0;
        android.net.DhcpStateMachine $r5;
        com.android.internal.util.AsyncChannel $r6;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r0.<android.net.wifi.WifiStateMachine: boolean mDhcpActive> = 1;

        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mBluetoothConnectionActive>;

        if $z0 != 0 goto label1;

        r2 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        virtualinvoke r2.<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceMode(int)>(1);

     label1:
        specialinvoke r0.<android.net.wifi.WifiStateMachine: void setSuspendOptimizationsNative(int,boolean)>(1, 0);

        $r3 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiNative mWifiNative>;

        virtualinvoke $r3.<android.net.wifi.WifiNative: void setPowerSave(boolean)>(0);

        specialinvoke r0.<android.net.wifi.WifiStateMachine: void stopBatchedScan()>();

        $r4 = new android.os.Message;

        specialinvoke $r4.<android.os.Message: void <init>()>();

        r1 = $r4;

        r1.<android.os.Message: int what> = 143375;

        r1.<android.os.Message: int arg1> = 1;

        r1.<android.os.Message: int arg2> = 196615;

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpStateMachine mDhcpStateMachine>;

        r1.<android.os.Message: java.lang.Object obj> = $r5;

        $r6 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mWifiP2pChannel>;

        virtualinvoke $r6.<com.android.internal.util.AsyncChannel: void sendMessage(android.os.Message)>(r1);

        return;
    }

    public void reassociateCommand()
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131147);

        return;
    }

    public void reconnectCommand()
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131146);

        return;
    }

    public void reloadTlsNetworksAndReconnect()
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131214);

        return;
    }

    public void requestBatchedScanPoll()
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131209);

        return;
    }

    public void sendBluetoothAdapterStateChange(int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131103, i0, 0);

        return;
    }

    public void setBatchedScanSettings(android.net.wifi.BatchedScanSettings, int, int, android.os.WorkSource)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.BatchedScanSettings r1;
        int i0, i1;
        android.os.WorkSource r2;
        android.os.Bundle r3, $r4;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.net.wifi.BatchedScanSettings;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.WorkSource;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        r3 = $r4;

        virtualinvoke r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("batched_settings", r1);

        virtualinvoke r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("batched_worksource", r2);

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int,java.lang.Object)>(131207, i0, i1, r3);

        return;
    }

    public void setCountryCode(java.lang.String, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.String r1;
        boolean z0, $z1;
        int i0;
        byte b1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mCountryCodeSequence>;

        i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label1;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void log(java.lang.String)>("Ignoring resetting of country code");

        return;

     label1:
        if z0 == 0 goto label3;

        b1 = 1;

     label2:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int,java.lang.Object)>(131152, i0, b1, r1);

        return;

     label3:
        b1 = 0;

        goto label2;
    }

    public void setDriverStart(boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131085);

        return;

     label1:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131086);

        return;
    }

    public void setFrequencyBand(int, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;
        boolean z0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, "wifi_frequency_band", i0);

     label1:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131162, i0, 0);

        return;
    }

    public void setHighPerfModeEnabled(boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;
        byte b0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        b0 = 1;

     label1:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131149, b0, 0);

        return;

     label2:
        b0 = 0;

        goto label1;
    }

    public void setHostApRunning(android.net.wifi.WifiConfiguration, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.WifiConfiguration r1;
        boolean z0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,java.lang.Object)>(131093, r1);

        return;

     label1:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131096);

        return;
    }

    public void setOperationalMode(int)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131144, i0, 0);

        return;
    }

    public void setSupplicantRunning(boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        boolean z0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131083);

        return;

     label1:
        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int)>(131084);

        return;
    }

    public void setWifiApConfiguration(android.net.wifi.WifiConfiguration)
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.WifiConfiguration r1;
        com.android.internal.util.AsyncChannel $r2;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        $r2 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mWifiApConfigChannel>;

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,java.lang.Object)>(131097, r1);

        return;
    }

    void startDhcp()
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.DhcpStateMachine $r1, $r2, $r3, $r6;
        java.lang.String $r4;
        android.content.Context $r5;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpStateMachine mDhcpStateMachine>;

        if $r1 != null goto label1;

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.content.Context mContext>;

        $r4 = r0.<android.net.wifi.WifiStateMachine: java.lang.String mInterfaceName>;

        $r6 = staticinvoke <android.net.DhcpStateMachine: android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)>($r5, r0, $r4);

        r0.<android.net.wifi.WifiStateMachine: android.net.DhcpStateMachine mDhcpStateMachine> = $r6;

     label1:
        $r2 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpStateMachine mDhcpStateMachine>;

        virtualinvoke $r2.<android.net.DhcpStateMachine: void registerForPreDhcpNotification()>();

        $r3 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpStateMachine mDhcpStateMachine>;

        virtualinvoke $r3.<android.net.DhcpStateMachine: void sendMessage(int)>(196609);

        return;
    }

    public void startFilteringMulticastV4Packets()
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mFilteringMulticastV4Packets>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131156, 0, 0);

        return;
    }

    public void startFilteringMulticastV6Packets()
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131156, 1, 0);

        return;
    }

    public void startScan(int, android.os.WorkSource)
    {
        android.net.wifi.WifiStateMachine r0;
        int i0;
        android.os.WorkSource r1;

        r0 := @this: android.net.wifi.WifiStateMachine;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.WorkSource;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int,java.lang.Object)>(131143, i0, 0, r1);

        return;
    }

    void stopDhcp()
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.DhcpStateMachine $r1, $r2;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpStateMachine mDhcpStateMachine>;

        if $r1 == null goto label1;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void handlePostDhcpSetup()>();

        $r2 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpStateMachine mDhcpStateMachine>;

        virtualinvoke $r2.<android.net.DhcpStateMachine: void sendMessage(int)>(196610);

     label1:
        return;
    }

    public void stopFilteringMulticastV4Packets()
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean mFilteringMulticastV4Packets>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131157, 0, 0);

        return;
    }

    public void stopFilteringMulticastV6Packets()
    {
        android.net.wifi.WifiStateMachine r0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        virtualinvoke r0.<android.net.wifi.WifiStateMachine: void sendMessage(int,int,int)>(131157, 1, 0);

        return;
    }

    public int syncAddOrUpdateNetwork(com.android.internal.util.AsyncChannel, android.net.wifi.WifiConfiguration)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.AsyncChannel r1;
        android.net.wifi.WifiConfiguration r2;
        android.os.Message r3;
        int i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: com.android.internal.util.AsyncChannel;

        r2 := @parameter1: android.net.wifi.WifiConfiguration;

        r3 = virtualinvoke r1.<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,java.lang.Object)>(131124, r2);

        i0 = r3.<android.os.Message: int arg1>;

        virtualinvoke r3.<android.os.Message: void recycle()>();

        return i0;
    }

    public boolean syncDisableNetwork(com.android.internal.util.AsyncChannel, int)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.AsyncChannel r1;
        int i0, $i1;
        android.os.Message r2;
        boolean z0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: com.android.internal.util.AsyncChannel;

        i0 := @parameter1: int;

        r2 = virtualinvoke r1.<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int)>(151569, i0);

        $i1 = r2.<android.os.Message: int arg1>;

        if $i1 == 151570 goto label2;

        z0 = 1;

     label1:
        virtualinvoke r2.<android.os.Message: void recycle()>();

        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    public boolean syncEnableNetwork(com.android.internal.util.AsyncChannel, int, boolean)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.AsyncChannel r1;
        int i0, $i2;
        boolean z0, z1;
        byte b1;
        android.os.Message r2;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: com.android.internal.util.AsyncChannel;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label3;

        b1 = 1;

     label1:
        r2 = virtualinvoke r1.<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int)>(131126, i0, b1);

        $i2 = r2.<android.os.Message: int arg1>;

        if $i2 == -1 goto label4;

        z1 = 1;

     label2:
        virtualinvoke r2.<android.os.Message: void recycle()>();

        return z1;

     label3:
        b1 = 0;

        goto label1;

     label4:
        z1 = 0;

        goto label2;
    }

    public java.util.List syncGetBatchedScanResultsList()
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.List r1, $r6, $r7;
        java.util.ArrayList r2, $r5;
        java.lang.Throwable r3, $r11;
        java.util.Iterator r4;
        int $i0;
        boolean $z0;
        android.net.wifi.BatchedScanResult $r8, $r10;
        java.lang.Object $r9;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 = r0.<android.net.wifi.WifiStateMachine: java.util.List mBatchedScanResults>;

        entermonitor r1;

     label1:
        $r5 = new java.util.ArrayList;

        $r6 = r0.<android.net.wifi.WifiStateMachine: java.util.List mBatchedScanResults>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = $r5;

        $r7 = r0.<android.net.wifi.WifiStateMachine: java.util.List mBatchedScanResults>;

        r4 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r8 = new android.net.wifi.BatchedScanResult;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.net.wifi.BatchedScanResult) $r9;

        specialinvoke $r8.<android.net.wifi.BatchedScanResult: void <init>(android.net.wifi.BatchedScanResult)>($r10);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r8);

     label3:
        goto label2;

     label4:
        $r11 := @caughtexception;

        r3 = $r11;

     label5:
        exitmonitor r1;

     label6:
        throw r3;

     label7:
        exitmonitor r1;

     label8:
        return r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public java.util.List syncGetConfiguredNetworks(com.android.internal.util.AsyncChannel)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.AsyncChannel r1;
        android.os.Message r2;
        java.util.List r3;
        java.lang.Object $r4;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: com.android.internal.util.AsyncChannel;

        r2 = virtualinvoke r1.<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)>(131131);

        $r4 = r2.<android.os.Message: java.lang.Object obj>;

        r3 = (java.util.List) $r4;

        virtualinvoke r2.<android.os.Message: void recycle()>();

        return r3;
    }

    public android.net.DhcpResults syncGetDhcpResults()
    {
        android.net.wifi.WifiStateMachine r0;
        java.lang.Object r1;
        android.net.DhcpResults r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 = r0.<android.net.wifi.WifiStateMachine: java.lang.Object mDhcpResultsLock>;

        entermonitor r1;

     label1:
        $r4 = new android.net.DhcpResults;

        $r5 = r0.<android.net.wifi.WifiStateMachine: android.net.DhcpResults mDhcpResults>;

        specialinvoke $r4.<android.net.DhcpResults: void <init>(android.net.DhcpResults)>($r5);

        r2 = $r4;

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.List syncGetScanResultsList()
    {
        android.net.wifi.WifiStateMachine r0;
        android.util.LruCache r1;
        java.util.ArrayList r2, $r5;
        java.lang.Throwable r3, $r10;
        java.util.Iterator r4;
        java.util.List $r6;
        boolean $z0;
        android.net.wifi.ScanResult $r7, $r9;
        java.lang.Object $r8;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 = r0.<android.net.wifi.WifiStateMachine: android.util.LruCache mScanResultCache>;

        entermonitor r1;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        $r6 = r0.<android.net.wifi.WifiStateMachine: java.util.List mScanResults>;

        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = new android.net.wifi.ScanResult;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.net.wifi.ScanResult) $r8;

        specialinvoke $r7.<android.net.wifi.ScanResult: void <init>(android.net.wifi.ScanResult)>($r9);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

     label3:
        goto label2;

     label4:
        $r10 := @caughtexception;

        r3 = $r10;

     label5:
        exitmonitor r1;

     label6:
        throw r3;

     label7:
        exitmonitor r1;

     label8:
        return r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public android.net.wifi.WifiConfiguration syncGetWifiApConfiguration()
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.Message r1;
        android.net.wifi.WifiConfiguration r2;
        com.android.internal.util.AsyncChannel $r3;
        java.lang.Object $r4;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r3 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel mWifiApConfigChannel>;

        r1 = virtualinvoke $r3.<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)>(131099);

        $r4 = r1.<android.os.Message: java.lang.Object obj>;

        r2 = (android.net.wifi.WifiConfiguration) $r4;

        virtualinvoke r1.<android.os.Message: void recycle()>();

        return r2;
    }

    public int syncGetWifiApState()
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mWifiApState>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public java.lang.String syncGetWifiApStateByName()
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mWifiApState>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        tableswitch($i0)
        {
            case 10: goto label2;
            case 11: goto label3;
            case 12: goto label4;
            case 13: goto label5;
            case 14: goto label6;
            default: goto label1;
        };

     label1:
        return "[invalid state]";

     label2:
        return "disabling";

     label3:
        return "disabled";

     label4:
        return "enabling";

     label5:
        return "enabled";

     label6:
        return "failed";
    }

    public int syncGetWifiState()
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mWifiState>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public java.lang.String syncGetWifiStateByName()
    {
        android.net.wifi.WifiStateMachine r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger mWifiState>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label1;
        };

     label1:
        return "[invalid state]";

     label2:
        return "disabling";

     label3:
        return "disabled";

     label4:
        return "enabling";

     label5:
        return "enabled";

     label6:
        return "unknown state";
    }

    public boolean syncPingSupplicant(com.android.internal.util.AsyncChannel)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.AsyncChannel r1;
        android.os.Message r2;
        boolean z0;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: com.android.internal.util.AsyncChannel;

        r2 = virtualinvoke r1.<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)>(131123);

        $i0 = r2.<android.os.Message: int arg1>;

        if $i0 == -1 goto label2;

        z0 = 1;

     label1:
        virtualinvoke r2.<android.os.Message: void recycle()>();

        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    public boolean syncRemoveNetwork(com.android.internal.util.AsyncChannel, int)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.AsyncChannel r1;
        int i0, $i1;
        android.os.Message r2;
        boolean z0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: com.android.internal.util.AsyncChannel;

        i0 := @parameter1: int;

        r2 = virtualinvoke r1.<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int)>(131125, i0);

        $i1 = r2.<android.os.Message: int arg1>;

        if $i1 == -1 goto label2;

        z0 = 1;

     label1:
        virtualinvoke r2.<android.os.Message: void recycle()>();

        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    public android.net.wifi.WifiInfo syncRequestConnectionInfo()
    {
        android.net.wifi.WifiStateMachine r0;
        android.net.wifi.WifiInfo $r1;

        r0 := @this: android.net.wifi.WifiStateMachine;

        $r1 = r0.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo mWifiInfo>;

        return $r1;
    }

    public boolean syncSaveConfig(com.android.internal.util.AsyncChannel)
    {
        android.net.wifi.WifiStateMachine r0;
        com.android.internal.util.AsyncChannel r1;
        android.os.Message r2;
        boolean z0;
        int $i0;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: com.android.internal.util.AsyncChannel;

        r2 = virtualinvoke r1.<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)>(131130);

        $i0 = r2.<android.os.Message: int arg1>;

        if $i0 == -1 goto label2;

        z0 = 1;

     label1:
        virtualinvoke r2.<android.os.Message: void recycle()>();

        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    public void updateBatteryWorkSource(android.os.WorkSource)
    {
        android.net.wifi.WifiStateMachine r0;
        android.os.WorkSource r1, r2, $r6, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r21;
        java.lang.Throwable r3, $r20;
        boolean $z0, $z1, $z2, $z3;
        android.os.PowerManager$WakeLock $r5;
        com.android.internal.app.IBatteryStats $r7, $r10, $r16;
        android.os.RemoteException $r22;

        r0 := @this: android.net.wifi.WifiStateMachine;

        r1 := @parameter0: android.os.WorkSource;

        r2 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mRunningWifiUids>;

        entermonitor r2;

        if r1 == null goto label02;

     label01:
        $r21 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mRunningWifiUids>;

        virtualinvoke $r21.<android.os.WorkSource: void set(android.os.WorkSource)>(r1);

     label02:
        $z0 = r0.<android.net.wifi.WifiStateMachine: boolean mIsRunning>;

        if $z0 == 0 goto label08;

        $z2 = r0.<android.net.wifi.WifiStateMachine: boolean mReportedRunning>;

        if $z2 == 0 goto label06;

        $r13 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mLastRunningWifiUids>;

        $r14 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mRunningWifiUids>;

        $z3 = virtualinvoke $r13.<android.os.WorkSource: boolean diff(android.os.WorkSource)>($r14);

        if $z3 == 0 goto label03;

        $r16 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r17 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mLastRunningWifiUids>;

        $r15 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mRunningWifiUids>;

        interfaceinvoke $r16.<com.android.internal.app.IBatteryStats: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>($r17, $r15);

        $r18 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mLastRunningWifiUids>;

        $r19 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mRunningWifiUids>;

        virtualinvoke $r18.<android.os.WorkSource: void set(android.os.WorkSource)>($r19);

     label03:
        $r5 = r0.<android.net.wifi.WifiStateMachine: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>(r1);

     label04:
        exitmonitor r2;

     label05:
        return;

     label06:
        $r10 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r9 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mRunningWifiUids>;

        interfaceinvoke $r10.<com.android.internal.app.IBatteryStats: void noteWifiRunning(android.os.WorkSource)>($r9);

        $r11 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mLastRunningWifiUids>;

        $r12 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mRunningWifiUids>;

        virtualinvoke $r11.<android.os.WorkSource: void set(android.os.WorkSource)>($r12);

        r0.<android.net.wifi.WifiStateMachine: boolean mReportedRunning> = 1;

     label07:
        goto label03;

     label08:
        $z1 = r0.<android.net.wifi.WifiStateMachine: boolean mReportedRunning>;

        if $z1 == 0 goto label03;

        $r7 = r0.<android.net.wifi.WifiStateMachine: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r6 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mLastRunningWifiUids>;

        interfaceinvoke $r7.<com.android.internal.app.IBatteryStats: void noteWifiStopped(android.os.WorkSource)>($r6);

        $r8 = r0.<android.net.wifi.WifiStateMachine: android.os.WorkSource mLastRunningWifiUids>;

        virtualinvoke $r8.<android.os.WorkSource: void clear()>();

        r0.<android.net.wifi.WifiStateMachine: boolean mReportedRunning> = 0;

     label09:
        goto label03;

     label10:
        $r20 := @caughtexception;

        r3 = $r20;

     label11:
        exitmonitor r2;

     label12:
        throw r3;

     label13:
        $r22 := @caughtexception;

        goto label04;

        catch android.os.RemoteException from label01 to label02 with label13;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch android.os.RemoteException from label02 to label03 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch android.os.RemoteException from label03 to label04 with label13;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch android.os.RemoteException from label06 to label07 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch android.os.RemoteException from label08 to label09 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }
}
