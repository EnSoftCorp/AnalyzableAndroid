public final class android.database.sqlite.SQLiteConnectionPool extends java.lang.Object implements java.io.Closeable
{
    static final boolean $assertionsDisabled;
    public static final int CONNECTION_FLAG_INTERACTIVE;
    public static final int CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY;
    public static final int CONNECTION_FLAG_READ_ONLY;
    private static final long CONNECTION_POOL_BUSY_MILLIS;
    private static final java.lang.String TAG;
    private final java.util.WeakHashMap mAcquiredConnections;
    private final java.util.ArrayList mAvailableNonPrimaryConnections;
    private android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration;
    private final java.util.concurrent.atomic.AtomicBoolean mConnectionLeaked;
    private android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterPool;
    private android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue;
    private boolean mIsOpen;
    private final java.lang.Object mLock;
    private int mMaxConnectionPoolSize;
    private int mNextConnectionId;

    static void <clinit>()
    {
        boolean z0, $z1;
        java.lang.Class $r0;

        <android.database.sqlite.SQLiteConnectionPool: java.lang.String TAG> = "SQLiteConnectionPool";

        <android.database.sqlite.SQLiteConnectionPool: long CONNECTION_POOL_BUSY_MILLIS> = 30000L;

        <android.database.sqlite.SQLiteConnectionPool: int CONNECTION_FLAG_READ_ONLY> = 1;

        <android.database.sqlite.SQLiteConnectionPool: int CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY> = 2;

        <android.database.sqlite.SQLiteConnectionPool: int CONNECTION_FLAG_INTERACTIVE> = 4;

        $r0 = class "android/database/sqlite/SQLiteConnectionPool";

        $z1 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z1 != 0 goto label2;

        z0 = 1;

     label1:
        <android.database.sqlite.SQLiteConnectionPool: boolean $assertionsDisabled> = z0;

        return;

     label2:
        z0 = 0;

        goto label1;

        return;
    }

    private void <init>(android.database.sqlite.SQLiteDatabaseConfiguration)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteDatabaseConfiguration r1, $r7;
        dalvik.system.CloseGuard $r2;
        java.lang.Object $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.util.ArrayList $r5;
        java.util.WeakHashMap $r6;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: dalvik.system.CloseGuard mCloseGuard> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: java.util.concurrent.atomic.AtomicBoolean mConnectionLeaked> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections> = $r5;

        $r6 = new java.util.WeakHashMap;

        specialinvoke $r6.<java.util.WeakHashMap: void <init>()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections> = $r6;

        $r7 = new android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(android.database.sqlite.SQLiteDatabaseConfiguration)>(r1);

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration> = $r7;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void setMaxConnectionPoolSizeLocked()>();

        return;
    }

    static java.lang.Object access$000(android.database.sqlite.SQLiteConnectionPool)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        return $r1;
    }

    static void access$100(android.database.sqlite.SQLiteConnectionPool, android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r1;

        r0 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter1: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void cancelConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)>(r1);

        return;
    }

    private void cancelConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r1, r2, r3, $r6, $r9;
        android.database.sqlite.SQLiteConnection $r4;
        java.lang.RuntimeException $r5;
        android.os.OperationCanceledException $r7;
        java.lang.Thread $r8;
        boolean $z0;
        java.lang.AssertionError $r10;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter;

        $r4 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnection mAssignedConnection>;

        if $r4 != null goto label1;

        $r5 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.RuntimeException mException>;

        if $r5 == null goto label2;

     label1:
        return;

     label2:
        r2 = null;

        r3 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

     label3:
        if r3 == r1 goto label5;

        $z0 = <android.database.sqlite.SQLiteConnectionPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        if r3 != null goto label4;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label4:
        r2 = r3;

        r3 = r3.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        goto label3;

     label5:
        if r2 == null goto label7;

        $r9 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = $r9;

     label6:
        $r7 = new android.os.OperationCanceledException;

        specialinvoke $r7.<android.os.OperationCanceledException: void <init>()>();

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.RuntimeException mException> = $r7;

        $r8 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.Thread mThread>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r8);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

        return;

     label7:
        $r6 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue> = $r6;

        goto label6;
    }

    private void closeAvailableConnectionsAndLogExceptionsLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnection $r1, $r2;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()>();

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if $r1 == null goto label1;

        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>($r2);

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = null;

     label1:
        return;
    }

    private void closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0, i1;
        java.util.ArrayList $r1, $r2, $r3;
        java.lang.Object $r4;
        android.database.sqlite.SQLiteConnection $r5;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.database.sqlite.SQLiteConnection) $r4;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        return;
    }

    private void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnection r1;
        java.lang.RuntimeException r2, $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection;

     label1:
        virtualinvoke r1.<android.database.sqlite.SQLiteConnection: void close()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close connection, its fate is now in the hands of the merciful GC: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteConnectionPool", $r7, r2);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void closeExcessConnectionsAndLogExceptionsLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0, i1, $i2, $i3;
        java.util.ArrayList $r1, $r2;
        java.lang.Object $r3;
        android.database.sqlite.SQLiteConnection $r4;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

     label1:
        i1 = i0 - 1;

        $i2 = r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize>;

        $i3 = -1 + $i2;

        if i0 <= $i3 goto label2;

        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        $r4 = (android.database.sqlite.SQLiteConnection) $r3;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>($r4);

        i0 = i1;

        goto label1;

     label2:
        return;
    }

    private void discardAcquiredConnectionsLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus $r1;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus DISCARD>;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void markAcquiredConnectionsLocked(android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)>($r1);

        return;
    }

    private void dispose(boolean)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r17;
        int i0;
        dalvik.system.CloseGuard $r3, $r15, $r16;
        java.util.WeakHashMap $r4;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r11, $r12, $r13;
        android.database.sqlite.SQLiteDatabaseConfiguration $r7;
        java.lang.String $r8, $r14;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        z0 := @parameter0: boolean;

        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: dalvik.system.CloseGuard mCloseGuard>;

        if $r3 == null goto label02;

        if z0 == 0 goto label01;

        $r15 = r0.<android.database.sqlite.SQLiteConnectionPool: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r15.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label01:
        $r16 = r0.<android.database.sqlite.SQLiteConnectionPool: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r16.<dalvik.system.CloseGuard: void close()>();

     label02:
        if z0 != 0 goto label11;

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void throwIfClosedLocked()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen> = 0;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableConnectionsAndLogExceptionsLocked()>();

        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        i0 = virtualinvoke $r4.<java.util.WeakHashMap: int size()>();

     label04:
        if i0 == 0 goto label06;

     label05:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The connection pool for ");

        $r7 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r8 = $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been closed but there are still ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" connections in use.  They will be closed ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("as they are released back to the pool.");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SQLiteConnectionPool", $r14);

     label06:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

        exitmonitor r1;

     label07:
        return;

     label08:
        $r17 := @caughtexception;

        r2 = $r17;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnection r1;
        int i0, $i1;
        boolean z0;
        java.lang.RuntimeException r2, $r6;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus $r3;
        java.util.WeakHashMap $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection;

        i0 := @parameter1: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label3;

        z0 = 1;

     label1:
        virtualinvoke r1.<android.database.sqlite.SQLiteConnection: void setOnlyAllowReadOnlyOperations(boolean)>(z0);

        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r3 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus NORMAL>;

        virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label2:
        return;

     label3:
        z0 = 0;

        goto label1;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to prepare acquired connection for session, closing it: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", connectionFlags=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SQLiteConnectionPool", $r12);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r1);

        throw r2;

        catch java.lang.RuntimeException from label1 to label2 with label4;
    }

    private static int getPriority(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isSessionBlockingImportantConnectionWaitersLocked(boolean, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        boolean z0, $z1;
        int i0, i1, $i2;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r1;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

        if r1 == null goto label2;

        i1 = staticinvoke <android.database.sqlite.SQLiteConnectionPool: int getPriority(int)>(i0);

     label1:
        $i2 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mPriority>;

        if i1 <= $i2 goto label3;

     label2:
        return 0;

     label3:
        if z0 != 0 goto label4;

        $z1 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: boolean mWantPrimaryConnection>;

        if $z1 != 0 goto label5;

     label4:
        return 1;

     label5:
        r1 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        if r1 != null goto label1;

        goto label2;
    }

    private void logConnectionPoolBusyLocked(long, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        long l0, $l5;
        int i1, i2, i3, i4;
        java.lang.Thread r1;
        java.lang.StringBuilder r2, $r8, $r10, $r13, $r14, $r17, $r19, $r20, $r25, $r29, $r30, $r33, $r35, $r37, $r38;
        java.util.ArrayList r3, $r24, $r26;
        boolean z0, $z1, $z2, $z4;
        java.util.Iterator r4, r7;
        java.lang.String r5, r6, $r12, $r18, $r21, $r36;
        android.database.sqlite.SQLiteDatabaseConfiguration $r9;
        float $f0, $f1;
        java.util.WeakHashMap $r27, $r40;
        android.database.sqlite.SQLiteConnection $r31, $r43;
        java.lang.Object $r42, $r45;
        java.util.Set $r44;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r2 = $r8;

        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The connection pool for database \'");

        $r9 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r12 = $r9.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has been unable to grant a connection to thread ");

        $l5 = virtualinvoke r1.<java.lang.Thread: long getId()>();

        $r13 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r18 = virtualinvoke r1.<java.lang.Thread: java.lang.String getName()>();

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r17 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with flags 0x");

        $r21 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r20 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $f0 = (float) l0;

        $f1 = 0.001F * $f0;

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds.\n");

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        r3 = $r24;

        $r27 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        z0 = virtualinvoke $r27.<java.util.WeakHashMap: boolean isEmpty()>();

        i2 = 0;

        i3 = 0;

        if z0 != 0 goto label3;

        $r40 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r44 = virtualinvoke $r40.<java.util.WeakHashMap: java.util.Set keySet()>();

        r7 = interfaceinvoke $r44.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r45 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r43 = (android.database.sqlite.SQLiteConnection) $r45;

        r6 = virtualinvoke $r43.<android.database.sqlite.SQLiteConnection: java.lang.String describeCurrentOperationUnsafe()>();

        if r6 == null goto label2;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r26 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i4 = virtualinvoke $r26.<java.util.ArrayList: int size()>();

        $r31 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if $r31 == null goto label4;

        i4 = i4 + 1;

     label4:
        $r30 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connections: ");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" active, ");

        $r35 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" idle, ");

        $r33 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" available.\n");

        $z1 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label6;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nRequests in progress:\n");

        r4 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r42 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r42;

        $r37 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label5;

     label6:
        $r36 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SQLiteConnectionPool", $r36);

        return;
    }

    private void markAcquiredConnectionsLocked(android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus r1, r5, $r17;
        java.util.ArrayList r2, $r7;
        java.util.Iterator r3;
        int i0, i1, $i2;
        java.util.Map$Entry r4;
        java.util.WeakHashMap $r6, $r8, $r9, $r11;
        boolean $z0, $z1;
        java.util.Set $r10;
        java.lang.Object $r13, $r14, $r15, $r16;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus;

        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $z0 = virtualinvoke $r6.<java.util.WeakHashMap: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r7 = new java.util.ArrayList;

        $r8 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $i2 = virtualinvoke $r8.<java.util.WeakHashMap: int size()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i2);

        r2 = $r7;

        $r9 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r10 = virtualinvoke $r9.<java.util.WeakHashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r15;

        $r14 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus) $r14;

        if r1 == r5 goto label1;

        $r17 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus DISCARD>;

        if r5 == $r17 goto label1;

        $r16 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

        goto label1;

     label2:
        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r11 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r13 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        virtualinvoke $r11.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r1);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    private android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter obtainConnectionWaiterLocked(java.lang.Thread, long, int, boolean, java.lang.String, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Thread r1;
        long l0;
        int i1, i2;
        boolean z0;
        java.lang.String r2;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r3, $r4, $r5;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: java.lang.Thread;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r2 := @parameter4: java.lang.String;

        i2 := @parameter5: int;

        r3 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterPool>;

        if r3 == null goto label2;

        $r5 = r3.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterPool> = $r5;

        r3.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = null;

     label1:
        r3.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.Thread mThread> = r1;

        r3.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: long mStartTime> = l0;

        r3.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mPriority> = i1;

        r3.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: boolean mWantPrimaryConnection> = z0;

        r3.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.String mSql> = r2;

        r3.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mConnectionFlags> = i2;

        return r3;

     label2:
        $r4 = new android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter;

        specialinvoke $r4.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: void <init>(android.database.sqlite.SQLiteConnectionPool$1)>(null);

        r3 = $r4;

        goto label1;
    }

    public static android.database.sqlite.SQLiteConnectionPool open(android.database.sqlite.SQLiteDatabaseConfiguration)
    {
        android.database.sqlite.SQLiteDatabaseConfiguration r0;
        android.database.sqlite.SQLiteConnectionPool r1, $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabaseConfiguration;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("configuration must not be null.");

        throw $r3;

     label1:
        $r2 = new android.database.sqlite.SQLiteConnectionPool;

        specialinvoke $r2.<android.database.sqlite.SQLiteConnectionPool: void <init>(android.database.sqlite.SQLiteDatabaseConfiguration)>(r0);

        r1 = $r2;

        specialinvoke r1.<android.database.sqlite.SQLiteConnectionPool: void open()>();

        return r1;
    }

    private void open()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        android.database.sqlite.SQLiteConnection $r2;
        dalvik.system.CloseGuard $r3;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r2 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration,boolean)>($r1, 1);

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = $r2;

        r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen> = 1;

        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    private android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration, boolean)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteDatabaseConfiguration r1;
        boolean z0;
        int i0, $i1;
        android.database.sqlite.SQLiteConnection $r2;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabaseConfiguration;

        z0 := @parameter1: boolean;

        i0 = r0.<android.database.sqlite.SQLiteConnectionPool: int mNextConnectionId>;

        $i1 = i0 + 1;

        r0.<android.database.sqlite.SQLiteConnectionPool: int mNextConnectionId> = $i1;

        $r2 = staticinvoke <android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection open(android.database.sqlite.SQLiteConnectionPool,android.database.sqlite.SQLiteDatabaseConfiguration,int,boolean)>(r0, r1, i0, z0);

        return $r2;
    }

    private void reconfigureAllConnectionsLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0, i1, i2;
        android.database.sqlite.SQLiteConnection r1, $r5, $r13, $r21, $r23;
        java.lang.RuntimeException r2, r4, $r12, $r18;
        java.util.ArrayList r3, $r6, $r8;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus $r7;
        java.lang.Object $r9;
        android.database.sqlite.SQLiteDatabaseConfiguration $r10, $r11;
        java.lang.StringBuilder $r14, $r15, $r16, $r20, $r22, $r24;
        java.lang.String $r17, $r25;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if $r5 == null goto label2;

     label1:
        $r13 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        $r10 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke $r13.<android.database.sqlite.SQLiteConnection: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r10);

     label2:
        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i0 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i1 = 0;

     label3:
        if i1 >= i0 goto label9;

        $r8 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r1 = (android.database.sqlite.SQLiteConnection) $r9;

     label4:
        $r11 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke r1.<android.database.sqlite.SQLiteConnection: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r11);

     label5:
        i2 = i1;

     label6:
        i1 = i2 + 1;

        goto label3;

     label7:
        $r18 := @caughtexception;

        r4 = $r18;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to reconfigure available primary connection, closing it: ");

        $r21 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteConnectionPool", $r25, r4);

        $r23 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>($r23);

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = null;

        goto label2;

     label8:
        $r12 := @caughtexception;

        r2 = $r12;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to reconfigure available non-primary connection, closing it: ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteConnectionPool", $r17, r2);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r1);

        r3 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i2 = i1 - 1;

        virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        i0 = i0 + -1;

        goto label6;

     label9:
        $r7 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus RECONFIGURE>;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void markAcquiredConnectionsLocked(android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)>($r7);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label7;
        catch java.lang.RuntimeException from label4 to label5 with label8;
    }

    private boolean recycleConnectionLocked(android.database.sqlite.SQLiteConnection, android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnection r1;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus r2, $r4, $r5;
        java.lang.RuntimeException r3, $r7;
        android.database.sqlite.SQLiteDatabaseConfiguration $r6;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection;

        r2 := @parameter1: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus;

        $r4 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus RECONFIGURE>;

        if r2 != $r4 goto label2;

     label1:
        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke r1.<android.database.sqlite.SQLiteConnection: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r6);

     label2:
        $r5 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus DISCARD>;

        if r2 != $r5 goto label4;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r1);

        return 0;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to reconfigure released connection, closing it: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteConnectionPool", $r11, r3);

        r2 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus DISCARD>;

        goto label2;

     label4:
        return 1;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void recycleConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r1, $r2;
        int $i0, $i1;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter;

        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterPool>;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = $r2;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.Thread mThread> = null;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.String mSql> = null;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnection mAssignedConnection> = null;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.RuntimeException mException> = null;

        $i0 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mNonce>;

        $i1 = 1 + $i0;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mNonce> = $i1;

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterPool> = r1;

        return;
    }

    private void setMaxConnectionPoolSizeLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        int $i0, $i1, $i2;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i0 = $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = 536870912 & $i0;

        if $i1 == 0 goto label1;

        $i2 = staticinvoke <android.database.sqlite.SQLiteGlobal: int getWALConnectionPoolSize()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize> = $i2;

        return;

     label1:
        r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize> = 1;

        return;
    }

    private void throwIfClosedLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $z0 = r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot perform this operation because the connection pool has been closed.");

        throw $r1;

     label1:
        return;
    }

    private android.database.sqlite.SQLiteConnection tryAcquireNonPrimaryConnectionLocked(java.lang.String, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.String r1;
        int i0, i1, i2, i3, $i4, $i5;
        android.database.sqlite.SQLiteConnection r2, r3, r4, $r7;
        java.util.ArrayList $r5, $r10, $r12, $r13;
        java.util.WeakHashMap $r6;
        android.database.sqlite.SQLiteDatabaseConfiguration $r8;
        java.lang.Object $r9, $r11;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if i1 <= 1 goto label3;

        if r1 == null goto label3;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        $r12 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $r11 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (android.database.sqlite.SQLiteConnection) $r11;

        $z0 = virtualinvoke r4.<android.database.sqlite.SQLiteConnection: boolean isPreparedStatementInCache(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $r13 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        virtualinvoke $r13.<java.util.ArrayList: java.lang.Object remove(int)>(i3);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)>(r4, i0);

        return r4;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        if i1 <= 0 goto label4;

        $r10 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $i5 = i1 - 1;

        $r9 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object remove(int)>($i5);

        r3 = (android.database.sqlite.SQLiteConnection) $r9;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)>(r3, i0);

        return r3;

     label4:
        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        i2 = virtualinvoke $r6.<java.util.WeakHashMap: int size()>();

        $r7 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if $r7 == null goto label5;

        i2 = i2 + 1;

     label5:
        $i4 = r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize>;

        if i2 < $i4 goto label6;

        return null;

     label6:
        $r8 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        r2 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration,boolean)>($r8, 0);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)>(r2, i0);

        return r2;
    }

    private android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0;
        android.database.sqlite.SQLiteConnection r1, r3, $r8;
        java.util.Iterator r2;
        java.util.WeakHashMap $r4;
        java.util.Set $r5;
        boolean $z0, $z1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r6;
        java.lang.Object $r7;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        i0 := @parameter0: int;

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if r1 == null goto label1;

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = null;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)>(r1, i0);

        return r1;

     label1:
        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r5 = virtualinvoke $r4.<java.util.WeakHashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.database.sqlite.SQLiteConnection) $r7;

        $z1 = virtualinvoke $r8.<android.database.sqlite.SQLiteConnection: boolean isPrimaryConnection()>();

        if $z1 == 0 goto label2;

        return null;

     label3:
        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        r3 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration,boolean)>($r6, 1);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)>(r3, i0);

        return r3;
    }

    private android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String, int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.String r1;
        int i0, i1, i3, $i8, $i13;
        android.os.CancellationSignal r2;
        boolean z0, $z1;
        java.lang.Object r3, r10, r14;
        java.lang.Throwable r4, r9, r12, r15, $r19, $r20, $r21, $r22;
        android.database.sqlite.SQLiteConnection r5, r11;
        long l2, l4, l5, l6, l7, $l9, $l10, $l11;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r6, r7, r8;
        java.lang.RuntimeException r13;
        java.lang.Thread $r16;
        java.util.concurrent.atomic.AtomicBoolean $r17;
        byte $b12;
        android.database.sqlite.SQLiteConnectionPool$1 $r18;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.CancellationSignal;

        $i8 = i0 & 2;

        if $i8 == 0 goto label57;

        z0 = 1;

     label01:
        r3 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r3;

     label02:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void throwIfClosedLocked()>();

     label03:
        if r2 == null goto label05;

     label04:
        virtualinvoke r2.<android.os.CancellationSignal: void throwIfCanceled()>();

     label05:
        r5 = null;

        if z0 != 0 goto label07;

     label06:
        r5 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquireNonPrimaryConnectionLocked(java.lang.String,int)>(r1, i0);

     label07:
        if r5 != null goto label09;

     label08:
        r5 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(int)>(i0);

     label09:
        if r5 == null goto label12;

     label10:
        exitmonitor r3;

     label11:
        return r5;

     label12:
        i1 = staticinvoke <android.database.sqlite.SQLiteConnectionPool: int getPriority(int)>(i0);

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r16 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r6 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter obtainConnectionWaiterLocked(java.lang.Thread,long,int,boolean,java.lang.String,int)>($r16, l2, i1, z0, r1, i0);

     label13:
        r7 = null;

     label14:
        r8 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

     label15:
        if r8 == null goto label17;

     label16:
        $i13 = r8.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mPriority>;

        if i1 <= $i13 goto label33;

        r6.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = r8;

     label17:
        if r7 == null goto label36;

     label18:
        r7.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = r6;

     label19:
        i3 = r6.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mNonce>;

        exitmonitor r3;

     label20:
        if r2 == null goto label21;

        $r18 = new android.database.sqlite.SQLiteConnectionPool$1;

        specialinvoke $r18.<android.database.sqlite.SQLiteConnectionPool$1: void <init>(android.database.sqlite.SQLiteConnectionPool,android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter,int)>(r0, r6, i3);

        virtualinvoke r2.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>($r18);

     label21:
        l4 = 30000L;

     label22:
        $l9 = r6.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: long mStartTime>;

        l5 = 30000L + $l9;

     label23:
        $r17 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.concurrent.atomic.AtomicBoolean mConnectionLeaked>;

        $z1 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(1, 0);

        if $z1 == 0 goto label25;

        r14 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r14;

     label24:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

        exitmonitor r14;

     label25:
        l6 = 1000000L * l4;

     label26:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l6);

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        r10 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r10;

     label27:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void throwIfClosedLocked()>();

        r11 = r6.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnection mAssignedConnection>;

        r13 = r6.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.RuntimeException mException>;

     label28:
        if r11 != null goto label29;

        if r13 == null goto label50;

     label29:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void recycleConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)>(r6);

     label30:
        if r11 == null goto label46;

     label31:
        exitmonitor r10;

     label32:
        if r2 == null goto label56;

        virtualinvoke r2.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(null);

        return r11;

     label33:
        r7 = r8;

     label34:
        r8 = r8.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

     label35:
        goto label15;

     label36:
        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue> = r6;

     label37:
        goto label19;

     label38:
        $r20 := @caughtexception;

        r4 = $r20;

     label39:
        exitmonitor r3;

     label40:
        throw r4;

     label41:
        $r21 := @caughtexception;

        r15 = $r21;

     label42:
        exitmonitor r14;

     label43:
        throw r15;

     label44:
        $r22 := @caughtexception;

        r9 = $r22;

        if r2 == null goto label45;

        virtualinvoke r2.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(null);

     label45:
        throw r9;

     label46:
        throw r13;

     label47:
        $r19 := @caughtexception;

        r12 = $r19;

     label48:
        exitmonitor r10;

     label49:
        throw r12;

     label50:
        l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label51:
        $b12 = l7 cmp l5;

        if $b12 >= 0 goto label54;

        l4 = l7 - l5;

     label52:
        exitmonitor r10;

     label53:
        goto label23;

     label54:
        $l10 = r6.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: long mStartTime>;

        $l11 = l7 - $l10;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void logConnectionPoolBusyLocked(long,int)>($l11, i0);

     label55:
        l4 = 30000L;

        l5 = l7 + 30000L;

        goto label52;

     label56:
        return r11;

     label57:
        z0 = 0;

        goto label01;

        catch java.lang.Throwable from label02 to label03 with label38;
        catch java.lang.Throwable from label04 to label05 with label38;
        catch java.lang.Throwable from label06 to label07 with label38;
        catch java.lang.Throwable from label08 to label09 with label38;
        catch java.lang.Throwable from label10 to label11 with label38;
        catch java.lang.Throwable from label12 to label13 with label38;
        catch java.lang.Throwable from label14 to label15 with label38;
        catch java.lang.Throwable from label16 to label17 with label38;
        catch java.lang.Throwable from label18 to label19 with label38;
        catch java.lang.Throwable from label19 to label20 with label38;
        catch java.lang.Throwable from label22 to label23 with label44;
        catch java.lang.Throwable from label23 to label24 with label44;
        catch java.lang.Throwable from label24 to label25 with label41;
        catch java.lang.Throwable from label26 to label27 with label44;
        catch java.lang.Throwable from label27 to label28 with label47;
        catch java.lang.Throwable from label29 to label30 with label47;
        catch java.lang.Throwable from label31 to label32 with label47;
        catch java.lang.Throwable from label34 to label35 with label38;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label39 to label40 with label38;
        catch java.lang.Throwable from label42 to label43 with label41;
        catch java.lang.Throwable from label43 to label44 with label44;
        catch java.lang.Throwable from label46 to label47 with label47;
        catch java.lang.Throwable from label48 to label49 with label47;
        catch java.lang.Throwable from label49 to label50 with label44;
        catch java.lang.Throwable from label50 to label51 with label47;
        catch java.lang.Throwable from label52 to label53 with label47;
        catch java.lang.Throwable from label54 to label55 with label47;
    }

    private void wakeConnectionWaitersLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r1, r2, r4;
        boolean z0, z1, z2, z3, $z4;
        java.lang.RuntimeException r3, $r8;
        android.database.sqlite.SQLiteConnection r5;
        java.lang.Thread $r6;
        int $i0, $i1;
        java.lang.String $r7;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 = null;

        r2 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

        z0 = 0;

        z1 = 0;

     label01:
        if r2 == null goto label16;

        $z4 = r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen>;

        if $z4 != 0 goto label05;

        z2 = 1;

     label02:
        r4 = r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        if z2 == 0 goto label19;

        if r1 == null goto label18;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = r4;

     label03:
        r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = null;

        $r6 = r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.Thread mThread>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r6);

     label04:
        r2 = r4;

        goto label01;

     label05:
        z3 = r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: boolean mWantPrimaryConnection>;

     label06:
        r5 = null;

        if z3 != 0 goto label09;

        r5 = null;

        if z1 != 0 goto label09;

     label07:
        $r7 = r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.String mSql>;

        $i1 = r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mConnectionFlags>;

        r5 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquireNonPrimaryConnectionLocked(java.lang.String,int)>($r7, $i1);

     label08:
        if r5 != null goto label09;

        z1 = 1;

     label09:
        if r5 != null goto label12;

        if z0 != 0 goto label12;

     label10:
        $i0 = r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mConnectionFlags>;

        r5 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(int)>($i0);

     label11:
        if r5 != null goto label12;

        z0 = 1;

     label12:
        if r5 == null goto label15;

     label13:
        r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnection mAssignedConnection> = r5;

     label14:
        z2 = 1;

        goto label02;

     label15:
        z2 = 0;

        if z1 == 0 goto label02;

        z2 = 0;

        if z0 == 0 goto label02;

     label16:
        return;

     label17:
        $r8 := @caughtexception;

        r3 = $r8;

        r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.RuntimeException mException> = r3;

        z2 = 1;

        goto label02;

     label18:
        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue> = r4;

        goto label03;

     label19:
        r1 = r2;

        goto label04;

        catch java.lang.RuntimeException from label05 to label06 with label17;
        catch java.lang.RuntimeException from label07 to label08 with label17;
        catch java.lang.RuntimeException from label10 to label11 with label17;
        catch java.lang.RuntimeException from label13 to label14 with label17;
    }

    public android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String, int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.String r1;
        int i0;
        android.os.CancellationSignal r2;
        android.database.sqlite.SQLiteConnection $r3;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.CancellationSignal;

        $r3 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,int,android.os.CancellationSignal)>(r1, i0, r2);

        return $r3;
    }

    public void close()
    {
        android.database.sqlite.SQLiteConnectionPool r0;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void dispose(boolean)>(0);

        return;
    }

    public void collectDbStats(java.util.ArrayList)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.util.ArrayList r1, $r7;
        java.lang.Object r2, $r11, $r13;
        java.lang.Throwable r3, $r14;
        java.util.Iterator r4, r5;
        android.database.sqlite.SQLiteConnection $r6, $r10, $r12, $r15;
        boolean $z0, $z1;
        java.util.WeakHashMap $r8;
        java.util.Set $r9;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: java.util.ArrayList;

        r2 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if $r6 == null goto label02;

        $r15 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        virtualinvoke $r15.<android.database.sqlite.SQLiteConnection: void collectDbStats(java.util.ArrayList)>(r1);

     label02:
        $r7 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        r4 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (android.database.sqlite.SQLiteConnection) $r13;

        virtualinvoke $r12.<android.database.sqlite.SQLiteConnection: void collectDbStats(java.util.ArrayList)>(r1);

     label04:
        goto label03;

     label05:
        $r14 := @caughtexception;

        r3 = $r14;

     label06:
        exitmonitor r2;

     label07:
        throw r3;

     label08:
        $r8 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r9 = virtualinvoke $r8.<java.util.WeakHashMap: java.util.Set keySet()>();

        r5 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r11 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.database.sqlite.SQLiteConnection) $r11;

        virtualinvoke $r10.<android.database.sqlite.SQLiteConnection: void collectDbStatsUnsafe(java.util.ArrayList)>(r1);

     label10:
        goto label09;

     label11:
        exitmonitor r2;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label11 to label12 with label05;
    }

    public void dump(android.util.Printer, boolean)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.util.Printer r1, r2;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Object r3, $r44, $r47, $r48, $r56;
        java.lang.Throwable r4, $r53;
        int i0, i2, i3, $i4, $i7;
        long l1, $l5, $l6;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r5, $r25;
        java.util.Iterator r6;
        java.util.Map$Entry r7;
        java.lang.StringBuilder $r8, $r9, $r12, $r13, $r14, $r16, $r18, $r19, $r20, $r21, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r38, $r39, $r43, $r45, $r50;
        java.lang.String $r10, $r15, $r17, $r23, $r37, $r40, $r46;
        android.database.sqlite.SQLiteDatabaseConfiguration $r11;
        java.util.ArrayList $r22, $r54, $r55;
        android.database.sqlite.SQLiteConnection $r24, $r49, $r51, $r52;
        java.util.WeakHashMap $r26, $r42;
        float $f0, $f1;
        java.lang.Thread $r31;
        java.util.Set $r41;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.util.Printer;

        z0 := @parameter1: boolean;

        r2 = staticinvoke <android.util.PrefixPrinter: android.util.Printer create(android.util.Printer,java.lang.String)>(r1, "    ");

        r3 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection pool for ");

        $r11 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r10 = $r11.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r15);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Open: ");

        $z1 = r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r17);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Max connections: ");

        $i4 = r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r23);

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>("  Available primary connection:");

        $r24 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if $r24 == null goto label07;

        $r52 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        virtualinvoke $r52.<android.database.sqlite.SQLiteConnection: void dump(android.util.Printer,boolean)>(r2, z0);

     label02:
        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>("  Available non-primary connections:");

        $r22 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $z2 = virtualinvoke $r22.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 != 0 goto label12;

        $r54 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i2 = virtualinvoke $r54.<java.util.ArrayList: int size()>();

     label03:
        i3 = 0;

     label04:
        if i3 >= i2 goto label13;

     label05:
        $r55 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $r56 = virtualinvoke $r55.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r51 = (android.database.sqlite.SQLiteConnection) $r56;

        virtualinvoke $r51.<android.database.sqlite.SQLiteConnection: void dump(android.util.Printer,boolean)>(r2, z0);

     label06:
        i3 = i3 + 1;

        goto label04;

     label07:
        interfaceinvoke r2.<android.util.Printer: void println(java.lang.String)>("<none>");

     label08:
        goto label02;

     label09:
        $r53 := @caughtexception;

        r4 = $r53;

     label10:
        exitmonitor r3;

     label11:
        throw r4;

     label12:
        interfaceinvoke r2.<android.util.Printer: void println(java.lang.String)>("<none>");

     label13:
        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>("  Acquired connections:");

        $r26 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $z3 = virtualinvoke $r26.<java.util.WeakHashMap: boolean isEmpty()>();

        if $z3 != 0 goto label16;

        $r42 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r41 = virtualinvoke $r42.<java.util.WeakHashMap: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r41.<java.util.Set: java.util.Iterator iterator()>();

     label14:
        $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label17;

        $r47 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r47;

        $r48 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r49 = (android.database.sqlite.SQLiteConnection) $r48;

        virtualinvoke $r49.<android.database.sqlite.SQLiteConnection: void dumpUnsafe(android.util.Printer,boolean)>(r2, z0);

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Status: ");

        $r44 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<android.util.Printer: void println(java.lang.String)>($r46);

     label15:
        goto label14;

     label16:
        interfaceinvoke r2.<android.util.Printer: void println(java.lang.String)>("<none>");

     label17:
        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>("  Connection waiters:");

        $r25 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

        if $r25 == null goto label23;

     label18:
        i0 = 0;

     label19:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r5 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

     label20:
        if r5 == null goto label24;

     label21:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": waited for ");

        $l5 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: long mStartTime>;

        $l6 = l1 - $l5;

        $f0 = (float) $l6;

        $f1 = 0.001F * $f0;

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms - thread=");

        $r31 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.Thread mThread>;

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", priority=");

        $i7 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mPriority>;

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", sql=\'");

        $r40 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.String mSql>;

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<android.util.Printer: void println(java.lang.String)>($r37);

        r5 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

     label22:
        i0 = i0 + 1;

        goto label20;

     label23:
        interfaceinvoke r2.<android.util.Printer: void println(java.lang.String)>("<none>");

     label24:
        exitmonitor r3;

     label25:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
        catch java.lang.Throwable from label14 to label15 with label09;
        catch java.lang.Throwable from label16 to label17 with label09;
        catch java.lang.Throwable from label17 to label18 with label09;
        catch java.lang.Throwable from label19 to label20 with label09;
        catch java.lang.Throwable from label21 to label22 with label09;
        catch java.lang.Throwable from label23 to label24 with label09;
        catch java.lang.Throwable from label24 to label25 with label09;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void dispose(boolean)>(1);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void onConnectionLeaked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r7, $r8;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        java.lang.String $r4, $r9;
        java.util.concurrent.atomic.AtomicBoolean $r10;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A SQLiteConnection object for database \'");

        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was leaked!  Please fix your application ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("to end transactions in progress properly and to close the database ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("when it is no longer needed.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SQLiteConnectionPool", $r9);

        $r10 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.concurrent.atomic.AtomicBoolean mConnectionLeaked>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }

    public void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteDatabaseConfiguration r1, $r5, $r6, $r7, $r8, $r10;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object r2;
        java.lang.Throwable r3, $r15;
        android.database.sqlite.SQLiteConnection r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.WeakHashMap $r9, $r12;
        java.lang.IllegalStateException $r11, $r16;
        java.util.ArrayList $r13;
        java.lang.AssertionError $r14;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabaseConfiguration;

        z0 = 1;

        if r1 != null goto label01;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("configuration must not be null.");

        throw $r17;

     label01:
        r2 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void throwIfClosedLocked()>();

        $i1 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i0 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i2 = $i1 ^ $i0;

        $i3 = 536870912 & $i2;

        if $i3 == 0 goto label09;

     label03:
        z1 = 1;

     label04:
        if z1 == 0 goto label11;

     label05:
        $r12 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $z5 = virtualinvoke $r12.<java.util.WeakHashMap: boolean isEmpty()>();

        if $z5 != 0 goto label10;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Write Ahead Logging (WAL) mode cannot be enabled or disabled while there are transactions in progress.  Finish all transactions and release all active database connections first.");

        throw $r16;

     label06:
        $r15 := @caughtexception;

        r3 = $r15;

     label07:
        exitmonitor r2;

     label08:
        throw r3;

     label09:
        z1 = 0;

        goto label04;

     label10:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()>();

        $z6 = <android.database.sqlite.SQLiteConnectionPool: boolean $assertionsDisabled>;

        if $z6 != 0 goto label11;

        $r13 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $z7 = virtualinvoke $r13.<java.util.ArrayList: boolean isEmpty()>();

        if $z7 != 0 goto label11;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label11:
        $z3 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z2 = $r6.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        if $z3 == $z2 goto label22;

     label12:
        if z0 == 0 goto label14;

     label13:
        $r9 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $z4 = virtualinvoke $r9.<java.util.WeakHashMap: boolean isEmpty()>();

        if $z4 != 0 goto label14;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Foreign Key Constraints cannot be enabled or disabled while there are transactions in progress.  Finish all transactions and release all active database connections first.");

        throw $r11;

     label14:
        $r7 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i5 = $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i4 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        if $i5 == $i4 goto label20;

     label15:
        if z1 == 0 goto label17;

     label16:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableConnectionsAndLogExceptionsLocked()>();

     label17:
        r4 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration,boolean)>(r1, 1);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableConnectionsAndLogExceptionsLocked()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void discardAcquiredConnectionsLocked()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = r4;

        $r10 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke $r10.<android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(android.database.sqlite.SQLiteDatabaseConfiguration)>(r1);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void setMaxConnectionPoolSizeLocked()>();

     label18:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

        exitmonitor r2;

     label19:
        return;

     label20:
        $r8 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(android.database.sqlite.SQLiteDatabaseConfiguration)>(r1);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void setMaxConnectionPoolSizeLocked()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeExcessConnectionsAndLogExceptionsLocked()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void reconfigureAllConnectionsLocked()>();

     label21:
        goto label18;

     label22:
        z0 = 0;

        goto label12;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label06;
        catch java.lang.Throwable from label11 to label12 with label06;
        catch java.lang.Throwable from label13 to label14 with label06;
        catch java.lang.Throwable from label14 to label15 with label06;
        catch java.lang.Throwable from label16 to label17 with label06;
        catch java.lang.Throwable from label17 to label18 with label06;
        catch java.lang.Throwable from label18 to label19 with label06;
        catch java.lang.Throwable from label20 to label21 with label06;
    }

    public void releaseConnection(android.database.sqlite.SQLiteConnection)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnection r1, $r10;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r11;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus r4;
        java.util.WeakHashMap $r5;
        boolean $z0, $z1, $z2, $z4, $z5;
        java.util.ArrayList $r7, $r8;
        int $i0, $i1, $i2;
        java.lang.AssertionError $r9;
        java.lang.IllegalStateException $r12;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection;

        r2 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r6 = virtualinvoke $r5.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus) $r6;

     label02:
        if r4 != null goto label07;

     label03:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot perform this operation because the specified connection was not acquired from this pool or has already been released.");

        throw $r12;

     label04:
        $r11 := @caughtexception;

        r3 = $r11;

     label05:
        exitmonitor r2;

     label06:
        throw r3;

     label07:
        $z0 = r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen>;

        if $z0 != 0 goto label10;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r1);

     label08:
        exitmonitor r2;

     label09:
        return;

     label10:
        $z1 = virtualinvoke r1.<android.database.sqlite.SQLiteConnection: boolean isPrimaryConnection()>();

        if $z1 == 0 goto label14;

        $z5 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: boolean recycleConnectionLocked(android.database.sqlite.SQLiteConnection,android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)>(r1, r4);

        if $z5 == 0 goto label12;

        $z4 = <android.database.sqlite.SQLiteConnectionPool: boolean $assertionsDisabled>;

        if $z4 != 0 goto label11;

        $r10 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if $r10 == null goto label11;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label11:
        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = r1;

     label12:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

     label13:
        goto label08;

     label14:
        $r7 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        $i1 = r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize>;

        $i2 = -1 + $i1;

        if $i0 < $i2 goto label16;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r1);

     label15:
        goto label08;

     label16:
        $z2 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: boolean recycleConnectionLocked(android.database.sqlite.SQLiteConnection,android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)>(r1, r4);

        if $z2 == 0 goto label17;

        $r8 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label17:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

     label18:
        goto label08;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label11 to label12 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch java.lang.Throwable from label14 to label15 with label04;
        catch java.lang.Throwable from label16 to label17 with label04;
        catch java.lang.Throwable from label17 to label18 with label04;
    }

    public boolean shouldYieldConnection(android.database.sqlite.SQLiteConnection, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnection r1;
        int i0;
        java.lang.Object r2;
        java.lang.Throwable r3, $r6;
        boolean z0, $z1, $z2, $z3;
        java.util.WeakHashMap $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection;

        i0 := @parameter1: int;

        r2 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $z1 = virtualinvoke $r4.<java.util.WeakHashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label5;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot perform this operation because the specified connection was not acquired from this pool or has already been released.");

        throw $r5;

     label2:
        $r6 := @caughtexception;

        r3 = $r6;

     label3:
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $z2 = r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen>;

        if $z2 != 0 goto label7;

        exitmonitor r2;

     label6:
        return 0;

     label7:
        $z3 = virtualinvoke r1.<android.database.sqlite.SQLiteConnection: boolean isPrimaryConnection()>();

        z0 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: boolean isSessionBlockingImportantConnectionWaitersLocked(boolean,int)>($z3, i0);

        exitmonitor r2;

     label8:
        return z0;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
        catch java.lang.Throwable from label7 to label8 with label2;
    }

    public java.lang.String toString()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        java.lang.String $r4, $r6;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQLiteConnectionPool: ");

        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
