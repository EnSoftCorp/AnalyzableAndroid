public final class android.media.RemoteController extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final int MAX_BITMAP_DIMENSION;
    private static final int MSG_CLIENT_CHANGE;
    private static final int MSG_DISPLAY_ENABLE;
    private static final int MSG_NEW_METADATA;
    private static final int MSG_NEW_PENDING_INTENT;
    private static final int MSG_NEW_PLAYBACK_INFO;
    private static final int MSG_NEW_TRANSPORT_INFO;
    public static final int POSITION_SYNCHRONIZATION_CHECK;
    public static final int POSITION_SYNCHRONIZATION_NONE;
    private static final int SENDMSG_NOOP;
    private static final int SENDMSG_QUEUE;
    private static final int SENDMSG_REPLACE;
    private static final java.lang.String TAG;
    private static final int TRANSPORT_UNKNOWN;
    private static final java.lang.Object mGenLock;
    private static final java.lang.Object mInfoLock;
    private int mArtworkHeight;
    private int mArtworkWidth;
    private final android.media.AudioManager mAudioManager;
    private int mClientGenerationIdCurrent;
    private android.app.PendingIntent mClientPendingIntentCurrent;
    private final android.content.Context mContext;
    private boolean mEnabled;
    private final android.media.RemoteController$EventHandler mEventHandler;
    private boolean mIsRegistered;
    private android.media.RemoteController$PlaybackInfo mLastPlaybackInfo;
    private final int mMaxBitmapDimension;
    private android.media.RemoteController$MetadataEditor mMetadataEditor;
    private android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener;
    private final android.media.RemoteController$RcDisplay mRcd;

    static void <clinit>()
    {
        java.lang.Object $r0, $r1;

        <android.media.RemoteController: java.lang.String TAG> = "RemoteController";

        <android.media.RemoteController: int SENDMSG_REPLACE> = 0;

        <android.media.RemoteController: int SENDMSG_QUEUE> = 2;

        <android.media.RemoteController: int SENDMSG_NOOP> = 1;

        <android.media.RemoteController: int POSITION_SYNCHRONIZATION_NONE> = 0;

        <android.media.RemoteController: int POSITION_SYNCHRONIZATION_CHECK> = 1;

        <android.media.RemoteController: int MSG_NEW_TRANSPORT_INFO> = 2;

        <android.media.RemoteController: int MSG_NEW_PLAYBACK_INFO> = 1;

        <android.media.RemoteController: int MSG_NEW_PENDING_INTENT> = 0;

        <android.media.RemoteController: int MSG_NEW_METADATA> = 3;

        <android.media.RemoteController: int MSG_DISPLAY_ENABLE> = 5;

        <android.media.RemoteController: int MSG_CLIENT_CHANGE> = 4;

        <android.media.RemoteController: int MAX_BITMAP_DIMENSION> = 512;

        <android.media.RemoteController: boolean DEBUG> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.media.RemoteController: java.lang.Object mGenLock> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.media.RemoteController: java.lang.Object mInfoLock> = $r1;

        return;
    }

    public void <init>(android.content.Context, android.media.RemoteController$OnClientUpdateListener) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        android.content.Context r1;
        android.media.RemoteController$OnClientUpdateListener r2;

        r0 := @this: android.media.RemoteController;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.media.RemoteController$OnClientUpdateListener;

        specialinvoke r0.<android.media.RemoteController: void <init>(android.content.Context,android.media.RemoteController$OnClientUpdateListener,android.os.Looper)>(r1, r2, null);

        return;
    }

    public void <init>(android.content.Context, android.media.RemoteController$OnClientUpdateListener, android.os.Looper) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        android.content.Context r1;
        android.media.RemoteController$OnClientUpdateListener r2;
        android.os.Looper r3, r4;
        android.util.DisplayMetrics r5;
        java.lang.IllegalArgumentException $r6, $r12, $r14;
        android.media.RemoteController$EventHandler $r7, $r13;
        android.media.RemoteController$RcDisplay $r8;
        java.lang.Object $r9;
        android.media.AudioManager $r10;
        boolean $z0;
        android.content.res.Resources $r11;
        int $i0, $i1, $i2;

        r0 := @this: android.media.RemoteController;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.media.RemoteController$OnClientUpdateListener;

        r3 := @parameter2: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.RemoteController: int mClientGenerationIdCurrent> = 0;

        r0.<android.media.RemoteController: boolean mIsRegistered> = 0;

        r0.<android.media.RemoteController: int mArtworkWidth> = -1;

        r0.<android.media.RemoteController: int mArtworkHeight> = -1;

        r0.<android.media.RemoteController: boolean mEnabled> = 1;

        if r1 != null goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid null Context");

        throw $r14;

     label1:
        if r2 != null goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid null OnClientUpdateListener");

        throw $r12;

     label2:
        if r3 == null goto label4;

        $r13 = new android.media.RemoteController$EventHandler;

        specialinvoke $r13.<android.media.RemoteController$EventHandler: void <init>(android.media.RemoteController,android.media.RemoteController,android.os.Looper)>(r0, r0, r3);

        r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler> = $r13;

     label3:
        r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener> = r2;

        r0.<android.media.RemoteController: android.content.Context mContext> = r1;

        $r8 = new android.media.RemoteController$RcDisplay;

        specialinvoke $r8.<android.media.RemoteController$RcDisplay: void <init>(android.media.RemoteController)>(r0);

        r0.<android.media.RemoteController: android.media.RemoteController$RcDisplay mRcd> = $r8;

        $r9 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r10 = (android.media.AudioManager) $r9;

        r0.<android.media.RemoteController: android.media.AudioManager mAudioManager> = $r10;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if $z0 == 0 goto label6;

        r0.<android.media.RemoteController: int mMaxBitmapDimension> = 512;

        return;

     label4:
        r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r4 == null goto label5;

        $r7 = new android.media.RemoteController$EventHandler;

        specialinvoke $r7.<android.media.RemoteController$EventHandler: void <init>(android.media.RemoteController,android.media.RemoteController,android.os.Looper)>(r0, r0, r4);

        r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler> = $r7;

        goto label3;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Calling thread not associated with a looper");

        throw $r6;

     label6:
        $r11 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r5 = virtualinvoke $r11.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i2 = r5.<android.util.DisplayMetrics: int widthPixels>;

        $i0 = r5.<android.util.DisplayMetrics: int heightPixels>;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i0);

        r0.<android.media.RemoteController: int mMaxBitmapDimension> = $i1;

        return;
    }

    static java.lang.Object access$000()
    {
        java.lang.Object $r0;

        $r0 = <android.media.RemoteController: java.lang.Object mGenLock>;

        return $r0;
    }

    static int access$100(android.media.RemoteController)
    {
        android.media.RemoteController r0;
        int $i0;

        r0 := @parameter0: android.media.RemoteController;

        $i0 = r0.<android.media.RemoteController: int mClientGenerationIdCurrent>;

        return $i0;
    }

    static void access$1000(android.media.RemoteController, int, boolean)
    {
        android.media.RemoteController r0;
        int i0;
        boolean z0;

        r0 := @parameter0: android.media.RemoteController;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.media.RemoteController: void onClientChange(int,boolean)>(i0, z0);

        return;
    }

    static int access$102(android.media.RemoteController, int)
    {
        android.media.RemoteController r0;
        int i0;

        r0 := @parameter0: android.media.RemoteController;

        i0 := @parameter1: int;

        r0.<android.media.RemoteController: int mClientGenerationIdCurrent> = i0;

        return i0;
    }

    static void access$1100(android.media.RemoteController, boolean)
    {
        android.media.RemoteController r0;
        boolean z0;

        r0 := @parameter0: android.media.RemoteController;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.media.RemoteController: void onDisplayEnable(boolean)>(z0);

        return;
    }

    static java.lang.Object access$200()
    {
        java.lang.Object $r0;

        $r0 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        return $r0;
    }

    static android.media.AudioManager access$300(android.media.RemoteController)
    {
        android.media.RemoteController r0;
        android.media.AudioManager $r1;

        r0 := @parameter0: android.media.RemoteController;

        $r1 = r0.<android.media.RemoteController: android.media.AudioManager mAudioManager>;

        return $r1;
    }

    static android.media.RemoteController$EventHandler access$400(android.media.RemoteController)
    {
        android.media.RemoteController r0;
        android.media.RemoteController$EventHandler $r1;

        r0 := @parameter0: android.media.RemoteController;

        $r1 = r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler>;

        return $r1;
    }

    static void access$500(android.os.Handler, int, int, int, int, java.lang.Object, int)
    {
        android.os.Handler r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object r1;

        r0 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        i4 := @parameter6: int;

        staticinvoke <android.media.RemoteController: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r0, i0, i1, i2, i3, r1, i4);

        return;
    }

    static void access$600(android.media.RemoteController, int, android.app.PendingIntent)
    {
        android.media.RemoteController r0;
        int i0;
        android.app.PendingIntent r1;

        r0 := @parameter0: android.media.RemoteController;

        i0 := @parameter1: int;

        r1 := @parameter2: android.app.PendingIntent;

        specialinvoke r0.<android.media.RemoteController: void onNewPendingIntent(int,android.app.PendingIntent)>(i0, r1);

        return;
    }

    static void access$700(android.media.RemoteController, int, android.media.RemoteController$PlaybackInfo)
    {
        android.media.RemoteController r0;
        int i0;
        android.media.RemoteController$PlaybackInfo r1;

        r0 := @parameter0: android.media.RemoteController;

        i0 := @parameter1: int;

        r1 := @parameter2: android.media.RemoteController$PlaybackInfo;

        specialinvoke r0.<android.media.RemoteController: void onNewPlaybackInfo(int,android.media.RemoteController$PlaybackInfo)>(i0, r1);

        return;
    }

    static void access$800(android.media.RemoteController, int, int)
    {
        android.media.RemoteController r0;
        int i0, i1;

        r0 := @parameter0: android.media.RemoteController;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.media.RemoteController: void onNewTransportInfo(int,int)>(i0, i1);

        return;
    }

    static void access$900(android.media.RemoteController, int, android.os.Bundle)
    {
        android.media.RemoteController r0;
        int i0;
        android.os.Bundle r1;

        r0 := @parameter0: android.media.RemoteController;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Bundle;

        specialinvoke r0.<android.media.RemoteController: void onNewMetadata(int,android.os.Bundle)>(i0, r1);

        return;
    }

    private void onClientChange(int, boolean)
    {
        android.media.RemoteController r0;
        int i0, $i1;
        boolean z0;
        java.lang.Object r1, r3;
        java.lang.Throwable r2, r4, $r6, $r7;
        android.media.RemoteController$OnClientUpdateListener r5;

        r0 := @this: android.media.RemoteController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = <android.media.RemoteController: java.lang.Object mGenLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<android.media.RemoteController: int mClientGenerationIdCurrent>;

        if $i1 == i0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        exitmonitor r1;

     label04:
        r3 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r3;

     label05:
        r5 = r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener>;

        r0.<android.media.RemoteController: android.media.RemoteController$MetadataEditor mMetadataEditor> = null;

        exitmonitor r3;

     label06:
        if r5 == null goto label13;

        interfaceinvoke r5.<android.media.RemoteController$OnClientUpdateListener: void onClientChange(boolean)>(z0);

        return;

     label07:
        $r6 := @caughtexception;

        r2 = $r6;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        $r7 := @caughtexception;

        r4 = $r7;

     label11:
        exitmonitor r3;

     label12:
        throw r4;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void onDisplayEnable(boolean)
    {
        android.media.RemoteController r0;
        boolean z0;
        java.lang.Object r1, r3;
        java.lang.Throwable r2, r4, $r15, $r17;
        int i0;
        android.media.RemoteController$PlaybackInfo r5, $r8;
        android.os.Bundle r6, $r12;
        long $l1;
        android.media.RemoteController$EventHandler $r9, $r10, $r16;
        java.lang.String $r11, $r13, $r14;

        r0 := @this: android.media.RemoteController;

        z0 := @parameter0: boolean;

        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

     label01:
        r0.<android.media.RemoteController: boolean mEnabled> = z0;

        exitmonitor r1;

     label02:
        if z0 != 0 goto label05;

        r3 = <android.media.RemoteController: java.lang.Object mGenLock>;

        entermonitor r3;

     label03:
        i0 = r0.<android.media.RemoteController: int mClientGenerationIdCurrent>;

        exitmonitor r3;

     label04:
        $r8 = new android.media.RemoteController$PlaybackInfo;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke $r8.<android.media.RemoteController$PlaybackInfo: void <init>(int,long,long,float)>(1, $l1, 0L, 0.0F);

        r5 = $r8;

        $r10 = r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler>;

        staticinvoke <android.media.RemoteController: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r10, 1, 0, i0, 0, r5, 0);

        $r9 = r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler>;

        staticinvoke <android.media.RemoteController: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r9, 2, 0, i0, 0, null, 0);

        $r12 = new android.os.Bundle;

        specialinvoke $r12.<android.os.Bundle: void <init>(int)>(3);

        r6 = $r12;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(7);

        virtualinvoke r6.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>($r11, "");

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(2);

        virtualinvoke r6.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>($r14, "");

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(9);

        virtualinvoke r6.<android.os.Bundle: void putLong(java.lang.String,long)>($r13, 0L);

        $r16 = r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler>;

        staticinvoke <android.media.RemoteController: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r16, 3, 2, i0, 0, r6, 0);

     label05:
        return;

     label06:
        $r17 := @caughtexception;

        r2 = $r17;

     label07:
        exitmonitor r1;

     label08:
        throw r2;

     label09:
        $r15 := @caughtexception;

        r4 = $r15;

     label10:
        exitmonitor r3;

     label11:
        throw r4;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void onNewMetadata(int, android.os.Bundle)
    {
        android.media.RemoteController r0;
        int i0, $i2;
        android.os.Bundle r1, $r13, $r15, $r23;
        java.lang.Object r2, r4;
        java.lang.Throwable r3, r5, $r24, $r25;
        long l1;
        android.media.RemoteController$OnClientUpdateListener r6;
        android.media.RemoteController$MetadataEditor r7, $r9, $r10, $r11, $r12, $r14, $r19, $r22;
        java.lang.String $r8, $r16, $r21;
        byte $b3;
        android.graphics.Bitmap $r17;
        android.os.Parcelable $r18;

        r0 := @this: android.media.RemoteController;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        r2 = <android.media.RemoteController: java.lang.Object mGenLock>;

        entermonitor r2;

     label01:
        $i2 = r0.<android.media.RemoteController: int mClientGenerationIdCurrent>;

        if $i2 == i0 goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        exitmonitor r2;

     label04:
        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(536870911);

        l1 = virtualinvoke r1.<android.os.Bundle: long getLong(java.lang.String,long)>($r8, 0L);

        $b3 = l1 cmp 0L;

        if $b3 == 0 goto label05;

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(536870911);

        virtualinvoke r1.<android.os.Bundle: void remove(java.lang.String)>($r21);

     label05:
        r4 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r4;

     label06:
        r6 = r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener>;

        $r10 = r0.<android.media.RemoteController: android.media.RemoteController$MetadataEditor mMetadataEditor>;

        if $r10 == null goto label13;

        $r11 = r0.<android.media.RemoteController: android.media.RemoteController$MetadataEditor mMetadataEditor>;

        $r13 = $r11.<android.media.RemoteController$MetadataEditor: android.os.Bundle mEditorMetadata>;

        if $r13 == null goto label13;

        $r12 = r0.<android.media.RemoteController: android.media.RemoteController$MetadataEditor mMetadataEditor>;

        $r15 = $r12.<android.media.RemoteController$MetadataEditor: android.os.Bundle mEditorMetadata>;

        if $r15 == r1 goto label07;

        $r22 = r0.<android.media.RemoteController: android.media.RemoteController$MetadataEditor mMetadataEditor>;

        $r23 = $r22.<android.media.RemoteController$MetadataEditor: android.os.Bundle mEditorMetadata>;

        virtualinvoke $r23.<android.os.Bundle: void putAll(android.os.Bundle)>(r1);

     label07:
        $r14 = r0.<android.media.RemoteController: android.media.RemoteController$MetadataEditor mMetadataEditor>;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(100);

        $r18 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>($r16);

        $r17 = (android.graphics.Bitmap) $r18;

        virtualinvoke $r14.<android.media.RemoteController$MetadataEditor: android.media.MediaMetadataEditor putBitmap(int,android.graphics.Bitmap)>(100, $r17);

        $r19 = r0.<android.media.RemoteController: android.media.RemoteController$MetadataEditor mMetadataEditor>;

        staticinvoke <android.media.RemoteController$MetadataEditor: void access$1200(android.media.RemoteController$MetadataEditor,int)>($r19, 100);

     label08:
        r7 = r0.<android.media.RemoteController: android.media.RemoteController$MetadataEditor mMetadataEditor>;

        exitmonitor r4;

     label09:
        if r6 == null goto label18;

        interfaceinvoke r6.<android.media.RemoteController$OnClientUpdateListener: void onClientMetadataUpdate(android.media.RemoteController$MetadataEditor)>(r7);

        return;

     label10:
        $r25 := @caughtexception;

        r3 = $r25;

     label11:
        exitmonitor r2;

     label12:
        throw r3;

     label13:
        $r9 = new android.media.RemoteController$MetadataEditor;

        specialinvoke $r9.<android.media.RemoteController$MetadataEditor: void <init>(android.media.RemoteController,android.os.Bundle,long)>(r0, r1, l1);

        r0.<android.media.RemoteController: android.media.RemoteController$MetadataEditor mMetadataEditor> = $r9;

     label14:
        goto label08;

     label15:
        $r24 := @caughtexception;

        r5 = $r24;

     label16:
        exitmonitor r4;

     label17:
        throw r5;

     label18:
        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private void onNewPendingIntent(int, android.app.PendingIntent)
    {
        android.media.RemoteController r0;
        int i0, $i1;
        android.app.PendingIntent r1;
        java.lang.Object r2, r4;
        java.lang.Throwable r3, r5, $r6, $r7;

        r0 := @this: android.media.RemoteController;

        i0 := @parameter0: int;

        r1 := @parameter1: android.app.PendingIntent;

        r2 = <android.media.RemoteController: java.lang.Object mGenLock>;

        entermonitor r2;

     label01:
        $i1 = r0.<android.media.RemoteController: int mClientGenerationIdCurrent>;

        if $i1 == i0 goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        exitmonitor r2;

     label04:
        r4 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r4;

     label05:
        r0.<android.media.RemoteController: android.app.PendingIntent mClientPendingIntentCurrent> = r1;

        exitmonitor r4;

     label06:
        return;

     label07:
        $r7 := @caughtexception;

        r5 = $r7;

     label08:
        exitmonitor r4;

     label09:
        throw r5;

     label10:
        $r6 := @caughtexception;

        r3 = $r6;

     label11:
        exitmonitor r2;

     label12:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void onNewPlaybackInfo(int, android.media.RemoteController$PlaybackInfo)
    {
        android.media.RemoteController r0;
        int i0, $i1, $i6, $i7;
        android.media.RemoteController$PlaybackInfo r1;
        java.lang.Object r2, r4;
        java.lang.Throwable r3, r5, $r7, $r8;
        android.media.RemoteController$OnClientUpdateListener r6;
        long $l2, $l4, $l5;
        byte $b3;
        float $f0;

        r0 := @this: android.media.RemoteController;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.RemoteController$PlaybackInfo;

        r2 = <android.media.RemoteController: java.lang.Object mGenLock>;

        entermonitor r2;

     label01:
        $i1 = r0.<android.media.RemoteController: int mClientGenerationIdCurrent>;

        if $i1 == i0 goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        exitmonitor r2;

     label04:
        r4 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r4;

     label05:
        r6 = r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener>;

        r0.<android.media.RemoteController: android.media.RemoteController$PlaybackInfo mLastPlaybackInfo> = r1;

        exitmonitor r4;

     label06:
        if r6 == null goto label14;

        $l2 = r1.<android.media.RemoteController$PlaybackInfo: long mCurrentPosMs>;

        $b3 = $l2 cmp -9216204211029966080L;

        if $b3 != 0 goto label13;

        $i6 = r1.<android.media.RemoteController$PlaybackInfo: int mState>;

        interfaceinvoke r6.<android.media.RemoteController$OnClientUpdateListener: void onClientPlaybackStateUpdate(int)>($i6);

        return;

     label07:
        $r8 := @caughtexception;

        r3 = $r8;

     label08:
        exitmonitor r2;

     label09:
        throw r3;

     label10:
        $r7 := @caughtexception;

        r5 = $r7;

     label11:
        exitmonitor r4;

     label12:
        throw r5;

     label13:
        $i7 = r1.<android.media.RemoteController$PlaybackInfo: int mState>;

        $l4 = r1.<android.media.RemoteController$PlaybackInfo: long mStateChangeTimeMs>;

        $l5 = r1.<android.media.RemoteController$PlaybackInfo: long mCurrentPosMs>;

        $f0 = r1.<android.media.RemoteController$PlaybackInfo: float mSpeed>;

        interfaceinvoke r6.<android.media.RemoteController$OnClientUpdateListener: void onClientPlaybackStateUpdate(int,long,long,float)>($i7, $l4, $l5, $f0);

     label14:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void onNewTransportInfo(int, int)
    {
        android.media.RemoteController r0;
        int i0, i1, $i2;
        java.lang.Object r1, r3;
        java.lang.Throwable r2, r4, $r6, $r7;
        android.media.RemoteController$OnClientUpdateListener r5;

        r0 := @this: android.media.RemoteController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = <android.media.RemoteController: java.lang.Object mGenLock>;

        entermonitor r1;

     label01:
        $i2 = r0.<android.media.RemoteController: int mClientGenerationIdCurrent>;

        if $i2 == i0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        exitmonitor r1;

     label04:
        r3 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r3;

     label05:
        r5 = r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener>;

        exitmonitor r3;

     label06:
        if r5 == null goto label13;

        interfaceinvoke r5.<android.media.RemoteController$OnClientUpdateListener: void onClientTransportControlUpdate(int)>(i1);

        return;

     label07:
        $r6 := @caughtexception;

        r2 = $r6;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        $r7 := @caughtexception;

        r4 = $r7;

     label11:
        exitmonitor r3;

     label12:
        throw r4;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private static void sendMsg(android.os.Handler, int, int, int, int, java.lang.Object, int)
    {
        android.os.Handler r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object r1;
        android.os.Message $r2;
        long $l5;
        boolean $z1;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        i4 := @parameter6: int;

        if r0 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null event handler, will not deliver message ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RemoteController", $r6);

        return;

     label1:
        if i1 != 0 goto label3;

        virtualinvoke r0.<android.os.Handler: void removeMessages(int)>(i0);

     label2:
        $r2 = virtualinvoke r0.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i2, i3, r1);

        $l5 = (long) i4;

        virtualinvoke r0.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r2, $l5);

        return;

     label3:
        if i1 != 1 goto label2;

        $z1 = virtualinvoke r0.<android.os.Handler: boolean hasMessages(int)>(i0);

        if $z1 == 0 goto label2;

        return;
    }

    public boolean clearArtworkConfiguration()
    {
        android.media.RemoteController r0;
        boolean $z0;

        r0 := @this: android.media.RemoteController;

        $z0 = virtualinvoke r0.<android.media.RemoteController: boolean setArtworkConfiguration(boolean,int,int)>(0, -1, -1);

        return $z0;
    }

    public android.media.RemoteController$MetadataEditor editMetadata()
    {
        android.media.RemoteController r0;
        android.media.RemoteController$MetadataEditor r1, $r2;
        android.os.Bundle $r3;

        r0 := @this: android.media.RemoteController;

        $r2 = new android.media.RemoteController$MetadataEditor;

        specialinvoke $r2.<android.media.RemoteController$MetadataEditor: void <init>(android.media.RemoteController)>(r0);

        r1 = $r2;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        r1.<android.media.RemoteController$MetadataEditor: android.os.Bundle mEditorMetadata> = $r3;

        r1.<android.media.RemoteController$MetadataEditor: android.graphics.Bitmap mEditorArtwork> = null;

        r1.<android.media.RemoteController$MetadataEditor: boolean mMetadataChanged> = 1;

        r1.<android.media.RemoteController$MetadataEditor: boolean mArtworkChanged> = 1;

        r1.<android.media.RemoteController$MetadataEditor: long mEditableKeys> = 0L;

        return r1;
    }

    int[] getArtworkSize()
    {
        android.media.RemoteController r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        int[] r3;
        int $i0, $i1;

        r0 := @this: android.media.RemoteController;

        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

     label1:
        r3 = newarray (int)[2];

        $i0 = r0.<android.media.RemoteController: int mArtworkWidth>;

        r3[0] = $i0;

        $i1 = r0.<android.media.RemoteController: int mArtworkHeight>;

        r3[1] = $i1;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public long getEstimatedMediaPosition()
    {
        android.media.RemoteController r0;
        long l0, l1, $l4, $l5, $l6, $l7, $l8;
        android.media.RemoteController$PlaybackInfo $r1, $r2, $r3, $r4, $r5, $r6;
        int $i2;
        boolean $z0;
        byte $b3;
        float $f0, $f1, $f2;

        r0 := @this: android.media.RemoteController;

        l0 = -1L;

        $r1 = r0.<android.media.RemoteController: android.media.RemoteController$PlaybackInfo mLastPlaybackInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.media.RemoteController: android.media.RemoteController$PlaybackInfo mLastPlaybackInfo>;

        $i2 = $r2.<android.media.RemoteController$PlaybackInfo: int mState>;

        $z0 = staticinvoke <android.media.RemoteControlClient: boolean playbackPositionShouldMove(int)>($i2);

        if $z0 != 0 goto label2;

        $r6 = r0.<android.media.RemoteController: android.media.RemoteController$PlaybackInfo mLastPlaybackInfo>;

        l0 = $r6.<android.media.RemoteController$PlaybackInfo: long mCurrentPosMs>;

     label1:
        return l0;

     label2:
        $r3 = r0.<android.media.RemoteController: android.media.RemoteController$PlaybackInfo mLastPlaybackInfo>;

        l1 = $r3.<android.media.RemoteController$PlaybackInfo: long mCurrentPosMs>;

        $b3 = l1 cmp 0L;

        if $b3 < 0 goto label1;

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r4 = r0.<android.media.RemoteController: android.media.RemoteController$PlaybackInfo mLastPlaybackInfo>;

        $l5 = $r4.<android.media.RemoteController$PlaybackInfo: long mStateChangeTimeMs>;

        $l6 = $l4 - $l5;

        $f0 = (float) $l6;

        $r5 = r0.<android.media.RemoteController: android.media.RemoteController$PlaybackInfo mLastPlaybackInfo>;

        $f1 = $r5.<android.media.RemoteController$PlaybackInfo: float mSpeed>;

        $f2 = $f0 * $f1;

        $l7 = (long) $f2;

        $l8 = l1 + $l7;

        return $l8;
    }

    android.media.RemoteController$RcDisplay getRcDisplay()
    {
        android.media.RemoteController r0;
        android.media.RemoteController$RcDisplay $r1;

        r0 := @this: android.media.RemoteController;

        $r1 = r0.<android.media.RemoteController: android.media.RemoteController$RcDisplay mRcd>;

        return $r1;
    }

    public java.lang.String getRemoteControlClientPackageName()
    {
        android.media.RemoteController r0;
        android.app.PendingIntent $r1, $r2;
        java.lang.String $r3;

        r0 := @this: android.media.RemoteController;

        $r1 = r0.<android.media.RemoteController: android.app.PendingIntent mClientPendingIntentCurrent>;

        if $r1 == null goto label1;

        $r2 = r0.<android.media.RemoteController: android.app.PendingIntent mClientPendingIntentCurrent>;

        $r3 = virtualinvoke $r2.<android.app.PendingIntent: java.lang.String getCreatorPackage()>();

        return $r3;

     label1:
        return null;
    }

    android.media.RemoteController$OnClientUpdateListener getUpdateListener()
    {
        android.media.RemoteController r0;
        android.media.RemoteController$OnClientUpdateListener $r1;

        r0 := @this: android.media.RemoteController;

        $r1 = r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener>;

        return $r1;
    }

    public boolean seekTo(long) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        long l0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        int i1;
        boolean $z0;
        byte $b2;
        android.media.AudioManager $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.media.RemoteController;

        l0 := @parameter0: long;

        $z0 = r0.<android.media.RemoteController: boolean mEnabled>;

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RemoteController", "Cannot use seekTo() from a disabled RemoteController");

        return 0;

     label1:
        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("illegal negative time value");

        throw $r4;

     label2:
        r1 = <android.media.RemoteController: java.lang.Object mGenLock>;

        entermonitor r1;

     label3:
        i1 = r0.<android.media.RemoteController: int mClientGenerationIdCurrent>;

        exitmonitor r1;

     label4:
        $r3 = r0.<android.media.RemoteController: android.media.AudioManager mAudioManager>;

        virtualinvoke $r3.<android.media.AudioManager: void setRemoteControlClientPlaybackPosition(int,long)>(i1, l0);

        return 1;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean sendMediaKeyEvent(android.view.KeyEvent) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        android.view.KeyEvent r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r12;
        android.app.PendingIntent r4;
        android.content.Intent r5, $r7;
        android.app.PendingIntent$CanceledException r6, $r10;
        int $i0;
        boolean $z0, $z1, $z2;
        android.content.Context $r8;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: android.media.RemoteController;

        r1 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z0 = staticinvoke <android.media.MediaFocusControl: boolean isMediaKeyCode(int)>($i0);

        if $z0 != 0 goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not a media key event");

        throw $r11;

     label01:
        r2 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r2;

     label02:
        $z1 = r0.<android.media.RemoteController: boolean mIsRegistered>;

        if $z1 != 0 goto label04;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RemoteController", "Cannot use sendMediaKeyEvent() from an unregistered RemoteController");

        exitmonitor r2;

     label03:
        return 0;

     label04:
        $z2 = r0.<android.media.RemoteController: boolean mEnabled>;

        if $z2 != 0 goto label09;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RemoteController", "Cannot use sendMediaKeyEvent() from a disabled RemoteController");

        exitmonitor r2;

     label05:
        return 0;

     label06:
        $r12 := @caughtexception;

        r3 = $r12;

     label07:
        exitmonitor r2;

     label08:
        throw r3;

     label09:
        r4 = r0.<android.media.RemoteController: android.app.PendingIntent mClientPendingIntentCurrent>;

        exitmonitor r2;

     label10:
        if r4 == null goto label14;

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MEDIA_BUTTON");

        r5 = $r7;

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.KEY_EVENT", r1);

     label11:
        $r8 = r0.<android.media.RemoteController: android.content.Context mContext>;

        virtualinvoke r4.<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>($r8, 0, r5);

     label12:
        return 1;

     label13:
        $r10 := @caughtexception;

        r6 = $r10;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RemoteController", "Error sending intent for media button down: ", r6);

        return 0;

     label14:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RemoteController", "No-op when sending key click, no receiver right now");

        return 0;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch android.app.PendingIntent$CanceledException from label11 to label12 with label13;
    }

    public boolean setArtworkConfiguration(int, int) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: android.media.RemoteController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.media.RemoteController: boolean setArtworkConfiguration(boolean,int,int)>(1, i0, i1);

        return $z0;
    }

    public boolean setArtworkConfiguration(boolean, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        boolean z0, $z1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1;
        java.lang.Throwable r2, $r6;
        android.media.RemoteController$RcDisplay $r3;
        android.media.AudioManager $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.media.RemoteController;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

        if z0 == 0 goto label11;

        if i0 <= 0 goto label07;

        if i1 <= 0 goto label07;

     label01:
        $i4 = r0.<android.media.RemoteController: int mMaxBitmapDimension>;

        if i0 <= $i4 goto label02;

        i0 = r0.<android.media.RemoteController: int mMaxBitmapDimension>;

     label02:
        $i5 = r0.<android.media.RemoteController: int mMaxBitmapDimension>;

        if i1 <= $i5 goto label03;

        i1 = r0.<android.media.RemoteController: int mMaxBitmapDimension>;

     label03:
        r0.<android.media.RemoteController: int mArtworkWidth> = i0;

        r0.<android.media.RemoteController: int mArtworkHeight> = i1;

     label04:
        $z1 = r0.<android.media.RemoteController: boolean mIsRegistered>;

        if $z1 == 0 goto label05;

        $r4 = r0.<android.media.RemoteController: android.media.AudioManager mAudioManager>;

        $r3 = r0.<android.media.RemoteController: android.media.RemoteController$RcDisplay mRcd>;

        $i3 = r0.<android.media.RemoteController: int mArtworkWidth>;

        $i2 = r0.<android.media.RemoteController: int mArtworkHeight>;

        virtualinvoke $r4.<android.media.AudioManager: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)>($r3, $i3, $i2);

     label05:
        exitmonitor r1;

     label06:
        return 1;

     label07:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid dimensions");

        throw $r5;

     label08:
        $r6 := @caughtexception;

        r2 = $r6;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

     label11:
        r0.<android.media.RemoteController: int mArtworkWidth> = -1;

        r0.<android.media.RemoteController: int mArtworkHeight> = -1;

     label12:
        goto label04;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label11 to label12 with label08;
    }

    void setIsRegistered(boolean)
    {
        android.media.RemoteController r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: android.media.RemoteController;

        z0 := @parameter0: boolean;

        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

     label1:
        r0.<android.media.RemoteController: boolean mIsRegistered> = z0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean setSynchronizationMode(int) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        int i0;
        android.media.AudioManager r1;
        android.media.RemoteController$RcDisplay r2;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: android.media.RemoteController;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown synchronization mode ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $z1 = r0.<android.media.RemoteController: boolean mIsRegistered>;

        if $z1 != 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RemoteController", "Cannot set synchronization mode on an unregistered RemoteController");

        return 0;

     label2:
        r1 = r0.<android.media.RemoteController: android.media.AudioManager mAudioManager>;

        r2 = r0.<android.media.RemoteController: android.media.RemoteController$RcDisplay mRcd>;

        z0 = 0;

        if 1 != i0 goto label3;

        z0 = 1;

     label3:
        virtualinvoke r1.<android.media.AudioManager: void remoteControlDisplayWantsPlaybackPositionSync(android.media.IRemoteControlDisplay,boolean)>(r2, z0);

        return 1;
    }
}
