public abstract class android.filterfw.core.Filter extends java.lang.Object
{
    static final int STATUS_ERROR;
    static final int STATUS_FINISHED;
    static final int STATUS_PREINIT;
    static final int STATUS_PREPARED;
    static final int STATUS_PROCESSING;
    static final int STATUS_RELEASED;
    static final int STATUS_SLEEPING;
    static final int STATUS_UNPREPARED;
    private static final java.lang.String TAG;
    private long mCurrentTimestamp;
    private java.util.HashSet mFramesToRelease;
    private java.util.HashMap mFramesToSet;
    private int mInputCount;
    private java.util.HashMap mInputPorts;
    private boolean mIsOpen;
    private boolean mLogVerbose;
    private java.lang.String mName;
    private int mOutputCount;
    private java.util.HashMap mOutputPorts;
    private int mSleepDelay;
    private int mStatus;

    public void <init>(java.lang.String)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        java.util.HashSet $r2;
        java.util.HashMap $r3;
        boolean $z0;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.filterfw.core.Filter: int mInputCount> = -1;

        r0.<android.filterfw.core.Filter: int mOutputCount> = -1;

        r0.<android.filterfw.core.Filter: int mStatus> = 0;

        r0.<android.filterfw.core.Filter: boolean mIsOpen> = 0;

        r0.<android.filterfw.core.Filter: java.lang.String mName> = r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<android.filterfw.core.Filter: java.util.HashSet mFramesToRelease> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.filterfw.core.Filter: java.util.HashMap mFramesToSet> = $r3;

        r0.<android.filterfw.core.Filter: int mStatus> = 0;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Filter", 2);

        r0.<android.filterfw.core.Filter: boolean mLogVerbose> = $z0;

        return;
    }

    private final void addAndSetFinalPorts(android.filterfw.core.KeyValueMap)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.KeyValueMap r1;
        java.lang.reflect.Field[] r2;
        int i0, i1;
        java.lang.reflect.Field r3;
        java.lang.annotation.Annotation r4;
        android.filterfw.core.GenerateFinalPort r5;
        java.lang.String r6, $r8, $r15;
        java.lang.Class $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r16;
        java.lang.RuntimeException $r10;
        java.lang.Object $r18;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.KeyValueMap;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r3 = r2[i1];

        r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "android/filterfw/core/GenerateFinalPort");

        if r4 == null goto label3;

        r5 = (android.filterfw.core.GenerateFinalPort) r4;

        $r8 = interfaceinvoke r5.<android.filterfw.core.GenerateFinalPort: java.lang.String name()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        r6 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

     label2:
        $z1 = interfaceinvoke r5.<android.filterfw.core.GenerateFinalPort: boolean hasDefault()>();

        virtualinvoke r0.<android.filterfw.core.Filter: void addFieldPort(java.lang.String,java.lang.reflect.Field,boolean,boolean)>(r6, r3, $z1, 1);

        $z3 = virtualinvoke r1.<android.filterfw.core.KeyValueMap: boolean containsKey(java.lang.Object)>(r6);

        if $z3 == 0 goto label5;

        $r18 = virtualinvoke r1.<android.filterfw.core.KeyValueMap: java.lang.Object get(java.lang.Object)>(r6);

        specialinvoke r0.<android.filterfw.core.Filter: void setImmediateInputValue(java.lang.String,java.lang.Object)>(r6, $r18);

        virtualinvoke r1.<android.filterfw.core.KeyValueMap: java.lang.Object remove(java.lang.Object)>(r6);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        r6 = interfaceinvoke r5.<android.filterfw.core.GenerateFinalPort: java.lang.String name()>();

        goto label2;

     label5:
        $z2 = interfaceinvoke r5.<android.filterfw.core.GenerateFinalPort: boolean hasDefault()>();

        if $z2 != 0 goto label3;

        $r10 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No value specified for final input port \'");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of filter ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label6:
        return;
    }

    private final void addAnnotatedPorts()
    {
        android.filterfw.core.Filter r0;
        java.lang.reflect.Field[] r1;
        int i0, i1, i2, i3;
        java.lang.reflect.Field r2;
        java.lang.annotation.Annotation r3, r4, r5;
        android.filterfw.core.GenerateProgramPort[] r6;
        java.lang.Class $r7;
        android.filterfw.core.GenerateProgramPorts $r8;
        android.filterfw.core.GenerateProgramPort $r9, $r10;
        android.filterfw.core.GenerateFieldPort $r11;

        r0 := @this: android.filterfw.core.Filter;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r2 = r1[i1];

        r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "android/filterfw/core/GenerateFieldPort");

        if r3 == null goto label3;

        $r11 = (android.filterfw.core.GenerateFieldPort) r3;

        specialinvoke r0.<android.filterfw.core.Filter: void addFieldGenerator(android.filterfw.core.GenerateFieldPort,java.lang.reflect.Field)>($r11, r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r4 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "android/filterfw/core/GenerateProgramPort");

        if r4 == null goto label4;

        $r9 = (android.filterfw.core.GenerateProgramPort) r4;

        specialinvoke r0.<android.filterfw.core.Filter: void addProgramGenerator(android.filterfw.core.GenerateProgramPort,java.lang.reflect.Field)>($r9, r2);

        goto label2;

     label4:
        r5 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "android/filterfw/core/GenerateProgramPorts");

        if r5 == null goto label2;

        $r8 = (android.filterfw.core.GenerateProgramPorts) r5;

        r6 = interfaceinvoke $r8.<android.filterfw.core.GenerateProgramPorts: android.filterfw.core.GenerateProgramPort[] value()>();

        i2 = lengthof r6;

        i3 = 0;

     label5:
        if i3 >= i2 goto label2;

        $r10 = r6[i3];

        specialinvoke r0.<android.filterfw.core.Filter: void addProgramGenerator(android.filterfw.core.GenerateProgramPort,java.lang.reflect.Field)>($r10, r2);

        i3 = i3 + 1;

        goto label5;

     label6:
        return;
    }

    private final void addFieldGenerator(android.filterfw.core.GenerateFieldPort, java.lang.reflect.Field)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.GenerateFieldPort r1;
        java.lang.reflect.Field r2;
        java.lang.String r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.GenerateFieldPort;

        r2 := @parameter1: java.lang.reflect.Field;

        $r4 = interfaceinvoke r1.<android.filterfw.core.GenerateFieldPort: java.lang.String name()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

     label1:
        $z1 = interfaceinvoke r1.<android.filterfw.core.GenerateFieldPort: boolean hasDefault()>();

        virtualinvoke r0.<android.filterfw.core.Filter: void addFieldPort(java.lang.String,java.lang.reflect.Field,boolean,boolean)>(r3, r2, $z1, 0);

        return;

     label2:
        r3 = interfaceinvoke r1.<android.filterfw.core.GenerateFieldPort: java.lang.String name()>();

        goto label1;
    }

    private final void addProgramGenerator(android.filterfw.core.GenerateProgramPort, java.lang.reflect.Field)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.GenerateProgramPort r1;
        java.lang.reflect.Field r2;
        java.lang.String r3, r4, $r5;
        boolean $z0, $z1;
        java.lang.Class $r6;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.GenerateProgramPort;

        r2 := @parameter1: java.lang.reflect.Field;

        r3 = interfaceinvoke r1.<android.filterfw.core.GenerateProgramPort: java.lang.String name()>();

        $r5 = interfaceinvoke r1.<android.filterfw.core.GenerateProgramPort: java.lang.String variableName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        r4 = r3;

     label1:
        $r6 = interfaceinvoke r1.<android.filterfw.core.GenerateProgramPort: java.lang.Class type()>();

        $z1 = interfaceinvoke r1.<android.filterfw.core.GenerateProgramPort: boolean hasDefault()>();

        virtualinvoke r0.<android.filterfw.core.Filter: void addProgramPort(java.lang.String,java.lang.String,java.lang.reflect.Field,java.lang.Class,boolean)>(r3, r4, r2, $r6, $z1);

        return;

     label2:
        r4 = interfaceinvoke r1.<android.filterfw.core.GenerateProgramPort: java.lang.String variableName()>();

        goto label1;
    }

    private final void closePorts()
    {
        android.filterfw.core.Filter r0;
        java.util.Iterator r1, r2;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r3, $r5;
        java.util.Collection $r4, $r6;
        java.lang.Object $r7, $r9;
        android.filterfw.core.OutputPort $r8;
        android.filterfw.core.InputPort $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r15;
        java.lang.String $r14;

        r0 := @this: android.filterfw.core.Filter;

        $z0 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing all ports on ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r14);

     label1:
        $r3 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.filterfw.core.InputPort) $r9;

        virtualinvoke $r10.<android.filterfw.core.InputPort: void close()>();

        goto label2;

     label3:
        $r5 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.filterfw.core.OutputPort) $r7;

        virtualinvoke $r8.<android.filterfw.core.OutputPort: void close()>();

        goto label4;

     label5:
        return;
    }

    private final boolean filterMustClose()
    {
        android.filterfw.core.Filter r0;
        java.util.Iterator r1, r2;
        android.filterfw.core.OutputPort r3;
        android.filterfw.core.InputPort r4;
        java.util.HashMap $r5, $r7;
        java.util.Collection $r6, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r9, $r16;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15, $r17, $r18, $r19, $r21, $r22;
        java.lang.String $r14, $r20;

        r0 := @this: android.filterfw.core.Filter;

        $r5 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r16 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.filterfw.core.InputPort) $r16;

        $z5 = virtualinvoke r4.<android.filterfw.core.InputPort: boolean filterMustClose()>();

        if $z5 == 0 goto label1;

        $z4 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z4 == 0 goto label2;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must close due to port ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r20);

     label2:
        return 1;

     label3:
        $r7 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.filterfw.core.OutputPort) $r9;

        $z2 = virtualinvoke r3.<android.filterfw.core.OutputPort: boolean filterMustClose()>();

        if $z2 == 0 goto label4;

        $z3 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z3 == 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must close due to port ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r14);

        return 1;

     label5:
        return 0;
    }

    private final void initFinalPorts(android.filterfw.core.KeyValueMap)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.KeyValueMap r1;
        java.util.HashMap $r2, $r3;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.KeyValueMap;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts> = $r3;

        specialinvoke r0.<android.filterfw.core.Filter: void addAndSetFinalPorts(android.filterfw.core.KeyValueMap)>(r1);

        return;
    }

    private final void initRemainingPorts(android.filterfw.core.KeyValueMap)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.KeyValueMap r1;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.KeyValueMap;

        specialinvoke r0.<android.filterfw.core.Filter: void addAnnotatedPorts()>();

        virtualinvoke r0.<android.filterfw.core.Filter: void setupPorts()>();

        specialinvoke r0.<android.filterfw.core.Filter: void setInitialInputValues(android.filterfw.core.KeyValueMap)>(r1);

        return;
    }

    private final boolean inputConditionsMet()
    {
        android.filterfw.core.Filter r0;
        java.util.Iterator r1;
        android.filterfw.core.InputPort r2;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: android.filterfw.core.Filter;

        $r3 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.filterfw.core.InputPort) $r5;

        $z1 = virtualinvoke r2.<android.filterfw.core.FilterPort: boolean isReady()>();

        if $z1 != 0 goto label1;

        $z2 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z2 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input condition not met: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r10);

     label2:
        return 0;

     label3:
        return 1;
    }

    public static final boolean isAvailable(java.lang.String)
    {
        java.lang.String r0;
        java.lang.ClassLoader r1;
        java.lang.Class r3;
        java.lang.Thread $r5;
        java.lang.ClassCastException $r7;
        java.lang.ClassNotFoundException $r8;

        r0 := @parameter0: java.lang.String;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r5.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label1:
        r3 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

     label2:
        virtualinvoke r3.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "android/filterfw/core/Filter");

     label3:
        return 1;

     label4:
        $r8 := @caughtexception;

        return 0;

     label5:
        $r7 := @caughtexception;

        return 0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
        catch java.lang.ClassCastException from label2 to label3 with label5;
    }

    private final boolean outputConditionsMet()
    {
        android.filterfw.core.Filter r0;
        java.util.Iterator r1;
        android.filterfw.core.OutputPort r2;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: android.filterfw.core.Filter;

        $r3 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.filterfw.core.OutputPort) $r5;

        $z1 = virtualinvoke r2.<android.filterfw.core.FilterPort: boolean isReady()>();

        if $z1 != 0 goto label1;

        $z2 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z2 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output condition not met: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r10);

     label2:
        return 0;

     label3:
        return 1;
    }

    private final void releasePulledFrames(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.FilterContext r1;
        java.util.Iterator r2;
        android.filterfw.core.Frame r3;
        java.util.HashSet $r4, $r5;
        boolean $z0;
        java.lang.Object $r6;
        android.filterfw.core.FrameManager $r7;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r4 = r0.<android.filterfw.core.Filter: java.util.HashSet mFramesToRelease>;

        r2 = virtualinvoke $r4.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.filterfw.core.Frame) $r6;

        $r7 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        virtualinvoke $r7.<android.filterfw.core.FrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)>(r3);

        goto label1;

     label2:
        $r5 = r0.<android.filterfw.core.Filter: java.util.HashSet mFramesToRelease>;

        virtualinvoke $r5.<java.util.HashSet: void clear()>();

        return;
    }

    private final void setImmediateInputValue(java.lang.String, java.lang.Object)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1, $r11;
        java.lang.Object r2;
        android.filterfw.core.InputPort r3;
        boolean $z0;
        android.filterfw.core.SimpleFrame $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting immediate value ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for port ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r11);

     label1:
        r3 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>(r1);

        virtualinvoke r3.<android.filterfw.core.FilterPort: void open()>();

        $r4 = staticinvoke <android.filterfw.core.SimpleFrame: android.filterfw.core.SimpleFrame wrapObject(java.lang.Object,android.filterfw.core.FrameManager)>(r2, null);

        virtualinvoke r3.<android.filterfw.core.FilterPort: void setFrame(android.filterfw.core.Frame)>($r4);

        return;
    }

    private final void setInitialInputValues(android.filterfw.core.KeyValueMap)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.KeyValueMap r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r8;
        java.lang.String $r7;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.KeyValueMap;

        $r4 = virtualinvoke r1.<android.filterfw.core.KeyValueMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<android.filterfw.core.Filter: void setInputValue(java.lang.String,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        return;
    }

    private final void transferInputFrames(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.FilterContext r1;
        java.util.Iterator r2;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        boolean $z0;
        java.lang.Object $r5;
        android.filterfw.core.InputPort $r6;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r3 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.filterfw.core.InputPort) $r5;

        virtualinvoke $r6.<android.filterfw.core.InputPort: void transfer(android.filterfw.core.FilterContext)>(r1);

        goto label1;

     label2:
        return;
    }

    private final android.filterfw.core.Frame wrapInputValue(java.lang.String, java.lang.Object)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        java.lang.Object r2;
        byte b0;
        android.filterfw.core.MutableFrameFormat r3;
        android.filterfw.core.Frame r4;
        android.filterfw.core.FrameFormat r5;
        java.lang.Class r6;
        boolean $z0, $z1, $z2, $z3;
        android.filterfw.core.SimpleFrame $r7;
        android.filterfw.core.SerializedFrame $r8;
        android.filterfw.core.InputPort $r9;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        b0 = 1;

        r3 = staticinvoke <android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromObject(java.lang.Object,int)>(r2, 1);

        if r2 != null goto label2;

        $r9 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>(r1);

        r5 = virtualinvoke $r9.<android.filterfw.core.InputPort: android.filterfw.core.FrameFormat getPortFormat()>();

        if r5 != null goto label5;

        r6 = null;

     label1:
        virtualinvoke r3.<android.filterfw.core.MutableFrameFormat: void setObjectClass(java.lang.Class)>(r6);

     label2:
        $z0 = r2 instanceof java.lang.Number;

        if $z0 != 0 goto label6;

        $z1 = r2 instanceof java.lang.Boolean;

        if $z1 != 0 goto label6;

        $z2 = r2 instanceof java.lang.String;

        if $z2 != 0 goto label6;

        $z3 = r2 instanceof java.io.Serializable;

        if $z3 == 0 goto label6;

     label3:
        if b0 == 0 goto label7;

        $r8 = new android.filterfw.core.SerializedFrame;

        specialinvoke $r8.<android.filterfw.core.SerializedFrame: void <init>(android.filterfw.core.FrameFormat,android.filterfw.core.FrameManager)>(r3, null);

        r4 = $r8;

     label4:
        virtualinvoke r4.<android.filterfw.core.Frame: void setObjectValue(java.lang.Object)>(r2);

        return r4;

     label5:
        r6 = virtualinvoke r5.<android.filterfw.core.FrameFormat: java.lang.Class getObjectClass()>();

        goto label1;

     label6:
        b0 = 0;

        goto label3;

     label7:
        $r7 = new android.filterfw.core.SimpleFrame;

        specialinvoke $r7.<android.filterfw.core.SimpleFrame: void <init>(android.filterfw.core.FrameFormat,android.filterfw.core.FrameManager)>(r3, null);

        r4 = $r7;

        goto label4;
    }

    protected void addFieldPort(java.lang.String, java.lang.reflect.Field, boolean, boolean)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1, $r14;
        java.lang.reflect.Field r2;
        boolean z0, z1, $z2;
        android.filterfw.core.FieldPort r3, $r4;
        java.lang.Class $r5;
        android.filterfw.core.MutableFrameFormat $r6;
        java.util.HashMap $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;
        android.filterfw.core.FinalPort $r15;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.reflect.Field;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        if z1 == 0 goto label3;

        $r15 = new android.filterfw.core.FinalPort;

        specialinvoke $r15.<android.filterfw.core.FinalPort: void <init>(android.filterfw.core.Filter,java.lang.String,java.lang.reflect.Field,boolean)>(r0, r1, r2, z0);

        r3 = $r15;

     label1:
        $z2 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z2 == 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" adding ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r14);

     label2:
        $r5 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r6 = staticinvoke <android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int)>($r5, 1);

        virtualinvoke r3.<android.filterfw.core.InputPort: void setPortFormat(android.filterfw.core.FrameFormat)>($r6);

        $r7 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        return;

     label3:
        $r4 = new android.filterfw.core.FieldPort;

        specialinvoke $r4.<android.filterfw.core.FieldPort: void <init>(android.filterfw.core.Filter,java.lang.String,java.lang.reflect.Field,boolean)>(r0, r1, r2, z0);

        r3 = $r4;

        goto label1;
    }

    protected void addInputPort(java.lang.String)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.filterfw.core.Filter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>(r1, null);

        return;
    }

    protected void addMaskedInputPort(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1, $r12;
        android.filterfw.core.FrameFormat r2;
        android.filterfw.core.StreamPort r3, $r4;
        boolean $z0;
        java.util.HashMap $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        $r4 = new android.filterfw.core.StreamPort;

        specialinvoke $r4.<android.filterfw.core.StreamPort: void <init>(android.filterfw.core.Filter,java.lang.String)>(r0, r1);

        r3 = $r4;

        $z0 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" adding ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r12);

     label1:
        $r5 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        virtualinvoke r3.<android.filterfw.core.InputPort: void setPortFormat(android.filterfw.core.FrameFormat)>(r2);

        return;
    }

    protected void addOutputBasedOnInput(java.lang.String, java.lang.String)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1, r2, $r13;
        android.filterfw.core.OutputPort r3, $r4;
        boolean $z0;
        android.filterfw.core.InputPort $r5;
        java.util.HashMap $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = new android.filterfw.core.OutputPort;

        specialinvoke $r4.<android.filterfw.core.OutputPort: void <init>(android.filterfw.core.Filter,java.lang.String)>(r0, r1);

        r3 = $r4;

        $z0 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" adding ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r13);

     label1:
        $r5 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>(r2);

        virtualinvoke r3.<android.filterfw.core.OutputPort: void setBasePort(android.filterfw.core.InputPort)>($r5);

        $r6 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        return;
    }

    protected void addOutputPort(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1, $r12;
        android.filterfw.core.FrameFormat r2;
        android.filterfw.core.OutputPort r3, $r4;
        boolean $z0;
        java.util.HashMap $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        $r4 = new android.filterfw.core.OutputPort;

        specialinvoke $r4.<android.filterfw.core.OutputPort: void <init>(android.filterfw.core.Filter,java.lang.String)>(r0, r1);

        r3 = $r4;

        $z0 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" adding ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r12);

     label1:
        virtualinvoke r3.<android.filterfw.core.OutputPort: void setPortFormat(android.filterfw.core.FrameFormat)>(r2);

        $r5 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        return;
    }

    protected void addProgramPort(java.lang.String, java.lang.String, java.lang.reflect.Field, java.lang.Class, boolean)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1, r2, $r15;
        java.lang.reflect.Field r3;
        java.lang.Class r4;
        boolean z0, $z1;
        android.filterfw.core.ProgramPort r5, $r6;
        android.filterfw.core.MutableFrameFormat $r7;
        java.util.HashMap $r8;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.reflect.Field;

        r4 := @parameter3: java.lang.Class;

        z0 := @parameter4: boolean;

        virtualinvoke r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r6 = new android.filterfw.core.ProgramPort;

        specialinvoke $r6.<android.filterfw.core.ProgramPort: void <init>(android.filterfw.core.Filter,java.lang.String,java.lang.String,java.lang.reflect.Field,boolean)>(r0, r1, r2, r3, z0);

        r5 = $r6;

        $z1 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z1 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" adding ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r15);

     label1:
        $r7 = staticinvoke <android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int)>(r4, 1);

        virtualinvoke r5.<android.filterfw.core.InputPort: void setPortFormat(android.filterfw.core.FrameFormat)>($r7);

        $r8 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

        return;
    }

    final boolean canProcess()
    {
        android.filterfw.core.Filter r0;
        java.lang.Throwable r1, $r9;
        int i0, $i1;
        boolean z0, z1, z2, $z3;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r8;
        java.lang.String $r7;

        r0 := @this: android.filterfw.core.Filter;

        entermonitor r0;

     label1:
        $z3 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z3 == 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking if can process: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i1 = r0.<android.filterfw.core.Filter: int mStatus>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r7);

     label2:
        i0 = r0.<android.filterfw.core.Filter: int mStatus>;

     label3:
        z0 = 0;

        if i0 > 3 goto label8;

     label4:
        z1 = specialinvoke r0.<android.filterfw.core.Filter: boolean inputConditionsMet()>();

     label5:
        z0 = 0;

        if z1 == 0 goto label8;

     label6:
        z2 = specialinvoke r0.<android.filterfw.core.Filter: boolean outputConditionsMet()>();

     label7:
        z0 = 0;

        if z2 == 0 goto label8;

        z0 = 1;

     label8:
        exitmonitor r0;

        return z0;

     label9:
        $r9 := @caughtexception;

        r1 = $r9;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    final void clearInputs()
    {
        android.filterfw.core.Filter r0;
        java.util.Iterator r1;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.filterfw.core.InputPort $r5;

        r0 := @this: android.filterfw.core.Filter;

        $r2 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.filterfw.core.InputPort) $r4;

        virtualinvoke $r5.<android.filterfw.core.InputPort: void clear()>();

        goto label1;

     label2:
        return;
    }

    final void clearOutputs()
    {
        android.filterfw.core.Filter r0;
        java.util.Iterator r1;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.filterfw.core.OutputPort $r5;

        r0 := @this: android.filterfw.core.Filter;

        $r2 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.filterfw.core.OutputPort) $r4;

        virtualinvoke $r5.<android.filterfw.core.OutputPort: void clear()>();

        goto label1;

     label2:
        return;
    }

    public void close(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.FilterContext r1;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        return;
    }

    protected void closeOutputPort(java.lang.String)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        android.filterfw.core.OutputPort $r2;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.OutputPort getOutputPort(java.lang.String)>(r1);

        virtualinvoke $r2.<android.filterfw.core.OutputPort: void close()>();

        return;
    }

    protected void delayNextProcess(int)
    {
        android.filterfw.core.Filter r0;
        int i0;

        r0 := @this: android.filterfw.core.Filter;

        i0 := @parameter0: int;

        r0.<android.filterfw.core.Filter: int mSleepDelay> = i0;

        r0.<android.filterfw.core.Filter: int mStatus> = 4;

        return;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        android.filterfw.core.FilterContext r2;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        return;
    }

    public java.lang.String getFilterClassName()
    {
        android.filterfw.core.Filter r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: android.filterfw.core.Filter;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        return $r2;
    }

    public final android.filterfw.core.FrameFormat getInputFormat(java.lang.String)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        android.filterfw.core.InputPort $r2;
        android.filterfw.core.FrameFormat $r3;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<android.filterfw.core.InputPort: android.filterfw.core.FrameFormat getSourceFormat()>();

        return $r3;
    }

    public final android.filterfw.core.InputPort getInputPort(java.lang.String)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1, $r13, $r20;
        android.filterfw.core.InputPort r2;
        java.util.HashMap $r3, $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r21;
        java.lang.NullPointerException $r14;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        if $r3 != null goto label1;

        $r14 = new java.lang.NullPointerException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to access input port \'");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" before Filter has been initialized!");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label1:
        $r4 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.filterfw.core.InputPort) $r5;

        if r2 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown input port \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on filter ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label2:
        return r2;
    }

    final java.util.Collection getInputPorts()
    {
        android.filterfw.core.Filter r0;
        java.util.HashMap $r1;
        java.util.Collection $r2;

        r0 := @this: android.filterfw.core.Filter;

        $r1 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Collection values()>();

        return $r2;
    }

    public final java.lang.String getName()
    {
        android.filterfw.core.Filter r0;
        java.lang.String $r1;

        r0 := @this: android.filterfw.core.Filter;

        $r1 = r0.<android.filterfw.core.Filter: java.lang.String mName>;

        return $r1;
    }

    public final int getNumberOfConnectedInputs()
    {
        android.filterfw.core.Filter r0;
        int i0;
        java.util.Iterator r1;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        android.filterfw.core.InputPort $r5;

        r0 := @this: android.filterfw.core.Filter;

        i0 = 0;

        $r2 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.filterfw.core.InputPort) $r4;

        $z1 = virtualinvoke $r5.<android.filterfw.core.InputPort: boolean isConnected()>();

        if $z1 == 0 goto label1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    public final int getNumberOfConnectedOutputs()
    {
        android.filterfw.core.Filter r0;
        int i0;
        java.util.Iterator r1;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        android.filterfw.core.OutputPort $r5;

        r0 := @this: android.filterfw.core.Filter;

        i0 = 0;

        $r2 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.filterfw.core.OutputPort) $r4;

        $z1 = virtualinvoke $r5.<android.filterfw.core.OutputPort: boolean isConnected()>();

        if $z1 == 0 goto label1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    public final int getNumberOfInputs()
    {
        android.filterfw.core.Filter r0;
        java.util.HashMap $r1, $r2;
        int $i0;

        r0 := @this: android.filterfw.core.Filter;

        $r1 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        $i0 = virtualinvoke $r2.<java.util.HashMap: int size()>();

        return $i0;
    }

    public final int getNumberOfOutputs()
    {
        android.filterfw.core.Filter r0;
        java.util.HashMap $r1, $r2;
        int $i0;

        r0 := @this: android.filterfw.core.Filter;

        $r1 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        $i0 = virtualinvoke $r2.<java.util.HashMap: int size()>();

        return $i0;
    }

    public android.filterfw.core.FrameFormat getOutputFormat(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        android.filterfw.core.FrameFormat r2;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        return null;
    }

    public final android.filterfw.core.OutputPort getOutputPort(java.lang.String)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1, $r13, $r20;
        android.filterfw.core.OutputPort r2;
        java.util.HashMap $r3, $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r21;
        java.lang.NullPointerException $r14;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        if $r3 != null goto label1;

        $r14 = new java.lang.NullPointerException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to access output port \'");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" before Filter has been initialized!");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label1:
        $r4 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.filterfw.core.OutputPort) $r5;

        if r2 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown output port \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on filter ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label2:
        return r2;
    }

    final java.util.Collection getOutputPorts()
    {
        android.filterfw.core.Filter r0;
        java.util.HashMap $r1;
        java.util.Collection $r2;

        r0 := @this: android.filterfw.core.Filter;

        $r1 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Collection values()>();

        return $r2;
    }

    public final int getSleepDelay()
    {
        android.filterfw.core.Filter r0;

        r0 := @this: android.filterfw.core.Filter;

        return 250;
    }

    final int getStatus()
    {
        android.filterfw.core.Filter r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: android.filterfw.core.Filter;

        entermonitor r0;

     label1:
        i0 = r0.<android.filterfw.core.Filter: int mStatus>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void init() throws android.filterfw.core.ProtocolException
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.KeyValueMap $r1;

        r0 := @this: android.filterfw.core.Filter;

        $r1 = new android.filterfw.core.KeyValueMap;

        specialinvoke $r1.<android.filterfw.core.KeyValueMap: void <init>()>();

        virtualinvoke r0.<android.filterfw.core.Filter: void initWithValueMap(android.filterfw.core.KeyValueMap)>($r1);

        return;
    }

    protected void initProgramInputs(android.filterfw.core.Program, android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.Program r1;
        android.filterfw.core.FilterContext r2;
        java.util.Iterator r3;
        android.filterfw.core.InputPort r4;
        java.util.HashMap $r5;
        java.util.Collection $r6;
        boolean $z0;
        java.lang.Object $r7, $r8;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.Program;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        if r1 == null goto label2;

        $r5 = r0.<android.filterfw.core.Filter: java.util.HashMap mInputPorts>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.filterfw.core.InputPort) $r7;

        $r8 = virtualinvoke r4.<android.filterfw.core.InputPort: java.lang.Object getTarget()>();

        if $r8 != r1 goto label1;

        virtualinvoke r4.<android.filterfw.core.InputPort: void transfer(android.filterfw.core.FilterContext)>(r2);

        goto label1;

     label2:
        return;
    }

    public final transient void initWithAssignmentList(java.lang.Object[])
    {
        android.filterfw.core.Filter r0;
        java.lang.Object[] r1;
        android.filterfw.core.KeyValueMap r2, $r3;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.Object[];

        $r3 = new android.filterfw.core.KeyValueMap;

        specialinvoke $r3.<android.filterfw.core.KeyValueMap: void <init>()>();

        r2 = $r3;

        virtualinvoke r2.<android.filterfw.core.KeyValueMap: void setKeyValues(java.lang.Object[])>(r1);

        virtualinvoke r0.<android.filterfw.core.Filter: void initWithValueMap(android.filterfw.core.KeyValueMap)>(r2);

        return;
    }

    public final void initWithAssignmentString(java.lang.String)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1, $r7;
        android.filterfw.io.GraphIOException r2, $r5;
        android.filterfw.io.TextGraphReader $r3;
        android.filterfw.core.KeyValueMap $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = new android.filterfw.io.TextGraphReader;

        specialinvoke $r3.<android.filterfw.io.TextGraphReader: void <init>()>();

        $r4 = virtualinvoke $r3.<android.filterfw.io.TextGraphReader: android.filterfw.core.KeyValueMap readKeyValueAssignments(java.lang.String)>(r1);

        virtualinvoke r0.<android.filterfw.core.Filter: void initWithValueMap(android.filterfw.core.KeyValueMap)>($r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke r2.<android.filterfw.io.GraphIOException: java.lang.String getMessage()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch android.filterfw.io.GraphIOException from label1 to label2 with label3;
    }

    public final void initWithValueMap(android.filterfw.core.KeyValueMap)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.KeyValueMap r1;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.KeyValueMap;

        specialinvoke r0.<android.filterfw.core.Filter: void initFinalPorts(android.filterfw.core.KeyValueMap)>(r1);

        specialinvoke r0.<android.filterfw.core.Filter: void initRemainingPorts(android.filterfw.core.KeyValueMap)>(r1);

        r0.<android.filterfw.core.Filter: int mStatus> = 1;

        return;
    }

    public boolean isOpen()
    {
        android.filterfw.core.Filter r0;
        boolean $z0;

        r0 := @this: android.filterfw.core.Filter;

        $z0 = r0.<android.filterfw.core.Filter: boolean mIsOpen>;

        return $z0;
    }

    final void notifyFieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        android.filterfw.core.FilterContext r2;
        int $i0, $i1;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        $i0 = r0.<android.filterfw.core.Filter: int mStatus>;

        if $i0 == 3 goto label1;

        $i1 = r0.<android.filterfw.core.Filter: int mStatus>;

        if $i1 != 2 goto label2;

     label1:
        virtualinvoke r0.<android.filterfw.core.Filter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)>(r1, r2);

     label2:
        return;
    }

    public void open(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.FilterContext r1;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        return;
    }

    final void openOutputs()
    {
        android.filterfw.core.Filter r0;
        java.util.Iterator r1;
        android.filterfw.core.OutputPort r2;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: android.filterfw.core.Filter;

        $z0 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opening all output ports on ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r10);

     label1:
        $r3 = r0.<android.filterfw.core.Filter: java.util.HashMap mOutputPorts>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.filterfw.core.OutputPort) $r5;

        $z2 = virtualinvoke r2.<android.filterfw.core.OutputPort: boolean isOpen()>();

        if $z2 != 0 goto label2;

        virtualinvoke r2.<android.filterfw.core.OutputPort: void open()>();

        goto label2;

     label3:
        return;
    }

    protected void parametersUpdated(java.util.Set)
    {
        android.filterfw.core.Filter r0;
        java.util.Set r1;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.util.Set;

        return;
    }

    final void performClose(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.FilterContext r1;
        java.lang.Throwable r2, $r7;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        entermonitor r0;

     label1:
        $z0 = r0.<android.filterfw.core.Filter: boolean mIsOpen>;

        if $z0 == 0 goto label3;

        $z1 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z1 == 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r6);

     label2:
        r0.<android.filterfw.core.Filter: boolean mIsOpen> = 0;

        r0.<android.filterfw.core.Filter: int mStatus> = 2;

        virtualinvoke r0.<android.filterfw.core.Filter: void close(android.filterfw.core.FilterContext)>(r1);

        specialinvoke r0.<android.filterfw.core.Filter: void closePorts()>();

     label3:
        exitmonitor r0;

        return;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    final void performOpen(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.FilterContext r1;
        java.lang.Throwable r2, $r20;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r19;
        java.lang.String $r11, $r15, $r18;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        entermonitor r0;

     label1:
        $z0 = r0.<android.filterfw.core.Filter: boolean mIsOpen>;

        if $z0 != 0 goto label8;

        $i0 = r0.<android.filterfw.core.Filter: int mStatus>;

        if $i0 != 1 goto label3;

        $z2 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z2 == 0 goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Preparing ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r18);

     label2:
        virtualinvoke r0.<android.filterfw.core.Filter: void prepare(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterfw.core.Filter: int mStatus> = 2;

     label3:
        $i1 = r0.<android.filterfw.core.Filter: int mStatus>;

        if $i1 != 2 goto label5;

        $z1 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z1 == 0 goto label4;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opening ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r15);

     label4:
        virtualinvoke r0.<android.filterfw.core.Filter: void open(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterfw.core.Filter: int mStatus> = 3;

     label5:
        $i2 = r0.<android.filterfw.core.Filter: int mStatus>;

        if $i2 == 3 goto label7;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was brought into invalid state during ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("opening (state: ");

        $i3 = r0.<android.filterfw.core.Filter: int mStatus>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")!");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label6:
        $r20 := @caughtexception;

        r2 = $r20;

        exitmonitor r0;

        throw r2;

     label7:
        r0.<android.filterfw.core.Filter: boolean mIsOpen> = 1;

     label8:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    final void performProcess(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.FilterContext r1;
        java.lang.Throwable r2, $r12;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10, $r11;
        java.lang.String $r6, $r13;
        java.lang.RuntimeException $r7;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        entermonitor r0;

     label1:
        $i0 = r0.<android.filterfw.core.Filter: int mStatus>;

        if $i0 != 7 goto label3;

        $r7 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already torn down!");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label2:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r0;

        throw r2;

     label3:
        specialinvoke r0.<android.filterfw.core.Filter: void transferInputFrames(android.filterfw.core.FilterContext)>(r1);

        $i1 = r0.<android.filterfw.core.Filter: int mStatus>;

        if $i1 >= 3 goto label4;

        virtualinvoke r0.<android.filterfw.core.Filter: void performOpen(android.filterfw.core.FilterContext)>(r1);

     label4:
        $z0 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z0 == 0 goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r6);

     label5:
        r0.<android.filterfw.core.Filter: long mCurrentTimestamp> = -1L;

        virtualinvoke r0.<android.filterfw.core.Filter: void process(android.filterfw.core.FilterContext)>(r1);

        specialinvoke r0.<android.filterfw.core.Filter: void releasePulledFrames(android.filterfw.core.FilterContext)>(r1);

        $z1 = specialinvoke r0.<android.filterfw.core.Filter: boolean filterMustClose()>();

        if $z1 == 0 goto label6;

        virtualinvoke r0.<android.filterfw.core.Filter: void performClose(android.filterfw.core.FilterContext)>(r1);

     label6:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
    }

    final void performTearDown(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.FilterContext r1;
        java.lang.Throwable r2, $r3;
        int $i0;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        entermonitor r0;

     label1:
        virtualinvoke r0.<android.filterfw.core.Filter: void performClose(android.filterfw.core.FilterContext)>(r1);

        $i0 = r0.<android.filterfw.core.Filter: int mStatus>;

        if $i0 == 7 goto label2;

        virtualinvoke r0.<android.filterfw.core.Filter: void tearDown(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterfw.core.Filter: int mStatus> = 7;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void prepare(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.FilterContext r1;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        return;
    }

    public abstract void process(android.filterfw.core.FilterContext);

    protected final android.filterfw.core.Frame pullInput(java.lang.String)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1, $r10;
        android.filterfw.core.Frame r2;
        android.filterfw.core.InputPort $r3;
        long $l0, $l2, $l3;
        byte $b1;
        java.util.HashSet $r4;
        boolean $z1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>(r1);

        r2 = virtualinvoke $r3.<android.filterfw.core.InputPort: android.filterfw.core.Frame pullFrame()>();

        $l0 = r0.<android.filterfw.core.Filter: long mCurrentTimestamp>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $l2 = virtualinvoke r2.<android.filterfw.core.Frame: long getTimestamp()>();

        r0.<android.filterfw.core.Filter: long mCurrentTimestamp> = $l2;

        $z1 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z1 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default-setting current timestamp from input port ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $l3 = r0.<android.filterfw.core.Filter: long mCurrentTimestamp>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r10);

     label1:
        $r4 = r0.<android.filterfw.core.Filter: java.util.HashSet mFramesToRelease>;

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>(r2);

        return r2;
    }

    final void pushInputFrame(java.lang.String, android.filterfw.core.Frame)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        android.filterfw.core.Frame r2;
        java.lang.Throwable r3, $r5;
        android.filterfw.core.InputPort r4;
        boolean $z0;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.Frame;

        entermonitor r0;

     label1:
        r4 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>(r1);

        $z0 = virtualinvoke r4.<android.filterfw.core.FilterPort: boolean isOpen()>();

        if $z0 != 0 goto label2;

        virtualinvoke r4.<android.filterfw.core.FilterPort: void open()>();

     label2:
        virtualinvoke r4.<android.filterfw.core.FilterPort: void pushFrame(android.filterfw.core.Frame)>(r2);

     label3:
        exitmonitor r0;

        return;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r0;

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    final void pushInputValue(java.lang.String, java.lang.Object)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;
        android.filterfw.core.Frame $r4;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        entermonitor r0;

     label1:
        $r4 = specialinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.Frame wrapInputValue(java.lang.String,java.lang.Object)>(r1, r2);

        virtualinvoke r0.<android.filterfw.core.Filter: void pushInputFrame(java.lang.String,android.filterfw.core.Frame)>(r1, $r4);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r0;

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected final void pushOutput(java.lang.String, android.filterfw.core.Frame)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1, $r9;
        android.filterfw.core.Frame r2;
        long $l0, $l2, $l3;
        byte $b1;
        android.filterfw.core.OutputPort $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.Frame;

        $l0 = virtualinvoke r2.<android.filterfw.core.Frame: long getTimestamp()>();

        $b1 = $l0 cmp -2L;

        if $b1 != 0 goto label2;

        $z0 = r0.<android.filterfw.core.Filter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default-setting output Frame timestamp on port ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $l3 = r0.<android.filterfw.core.Filter: long mCurrentTimestamp>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Filter", $r9);

     label1:
        $l2 = r0.<android.filterfw.core.Filter: long mCurrentTimestamp>;

        virtualinvoke r2.<android.filterfw.core.Frame: void setTimestamp(long)>($l2);

     label2:
        $r3 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.OutputPort getOutputPort(java.lang.String)>(r1);

        virtualinvoke $r3.<android.filterfw.core.OutputPort: void pushFrame(android.filterfw.core.Frame)>(r2);

        return;
    }

    public void setInputFrame(java.lang.String, android.filterfw.core.Frame)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        android.filterfw.core.Frame r2;
        android.filterfw.core.InputPort r3;
        boolean $z0;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.Frame;

        r3 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>(r1);

        $z0 = virtualinvoke r3.<android.filterfw.core.FilterPort: boolean isOpen()>();

        if $z0 != 0 goto label1;

        virtualinvoke r3.<android.filterfw.core.FilterPort: void open()>();

     label1:
        virtualinvoke r3.<android.filterfw.core.FilterPort: void setFrame(android.filterfw.core.Frame)>(r2);

        return;
    }

    public final void setInputValue(java.lang.String, java.lang.Object)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        java.lang.Object r2;
        android.filterfw.core.Frame $r3;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.Frame wrapInputValue(java.lang.String,java.lang.Object)>(r1, r2);

        virtualinvoke r0.<android.filterfw.core.Filter: void setInputFrame(java.lang.String,android.filterfw.core.Frame)>(r1, $r3);

        return;
    }

    protected void setWaitsOnInputPort(java.lang.String, boolean)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        boolean z0;
        android.filterfw.core.InputPort $r2;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>(r1);

        virtualinvoke $r2.<android.filterfw.core.InputPort: void setBlocking(boolean)>(z0);

        return;
    }

    protected void setWaitsOnOutputPort(java.lang.String, boolean)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        boolean z0;
        android.filterfw.core.OutputPort $r2;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.OutputPort getOutputPort(java.lang.String)>(r1);

        virtualinvoke $r2.<android.filterfw.core.OutputPort: void setBlocking(boolean)>(z0);

        return;
    }

    public abstract void setupPorts();

    public void tearDown(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        android.filterfw.core.FilterContext r1;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        return;
    }

    public java.lang.String toString()
    {
        android.filterfw.core.Filter r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8;
        java.lang.String $r3, $r6, $r9;

        r0 := @this: android.filterfw.core.Filter;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke r0.<android.filterfw.core.Filter: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (");

        $r6 = virtualinvoke r0.<android.filterfw.core.Filter: java.lang.String getFilterClassName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    protected void transferInputPortFrame(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterfw.core.Filter r0;
        java.lang.String r1;
        android.filterfw.core.FilterContext r2;
        android.filterfw.core.InputPort $r3;

        r0 := @this: android.filterfw.core.Filter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        $r3 = virtualinvoke r0.<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>(r1);

        virtualinvoke $r3.<android.filterfw.core.InputPort: void transfer(android.filterfw.core.FilterContext)>(r2);

        return;
    }

    final void unsetStatus(int)
    {
        android.filterfw.core.Filter r0;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.filterfw.core.Filter;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $i2 = r0.<android.filterfw.core.Filter: int mStatus>;

        $i1 = i0 ^ -1;

        $i3 = $i2 & $i1;

        r0.<android.filterfw.core.Filter: int mStatus> = $i3;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.filterfw.core.Filter: java.lang.String TAG> = "Filter";

        <android.filterfw.core.Filter: int STATUS_UNPREPARED> = 1;

        <android.filterfw.core.Filter: int STATUS_SLEEPING> = 4;

        <android.filterfw.core.Filter: int STATUS_RELEASED> = 7;

        <android.filterfw.core.Filter: int STATUS_PROCESSING> = 3;

        <android.filterfw.core.Filter: int STATUS_PREPARED> = 2;

        <android.filterfw.core.Filter: int STATUS_PREINIT> = 0;

        <android.filterfw.core.Filter: int STATUS_FINISHED> = 5;

        <android.filterfw.core.Filter: int STATUS_ERROR> = 6;

        return;
    }
}
