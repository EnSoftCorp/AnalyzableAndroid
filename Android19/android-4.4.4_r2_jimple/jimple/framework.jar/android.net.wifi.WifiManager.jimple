public class android.net.wifi.WifiManager extends java.lang.Object
{
    public static final java.lang.String ACTION_PICK_WIFI_NETWORK;
    public static final java.lang.String ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE;
    private static final int BASE;
    public static final java.lang.String BATCHED_SCAN_RESULTS_AVAILABLE_ACTION;
    public static final int BUSY;
    public static final int CANCEL_WPS;
    public static final int CANCEL_WPS_FAILED;
    public static final int CANCEL_WPS_SUCCEDED;
    public static final int CHANGE_REASON_ADDED;
    public static final int CHANGE_REASON_CONFIG_CHANGE;
    public static final int CHANGE_REASON_REMOVED;
    public static final java.lang.String CONFIGURED_NETWORKS_CHANGED_ACTION;
    public static final int CONNECT_NETWORK;
    public static final int CONNECT_NETWORK_FAILED;
    public static final int CONNECT_NETWORK_SUCCEEDED;
    public static final int DATA_ACTIVITY_IN;
    public static final int DATA_ACTIVITY_INOUT;
    public static final int DATA_ACTIVITY_NONE;
    public static final int DATA_ACTIVITY_NOTIFICATION;
    public static final int DATA_ACTIVITY_OUT;
    public static final int DISABLE_NETWORK;
    public static final int DISABLE_NETWORK_FAILED;
    public static final int DISABLE_NETWORK_SUCCEEDED;
    public static final int ERROR;
    public static final int ERROR_AUTHENTICATING;
    public static final java.lang.String EXTRA_BSSID;
    public static final java.lang.String EXTRA_CHANGE_REASON;
    public static final java.lang.String EXTRA_LINK_CAPABILITIES;
    public static final java.lang.String EXTRA_LINK_PROPERTIES;
    public static final java.lang.String EXTRA_MULTIPLE_NETWORKS_CHANGED;
    public static final java.lang.String EXTRA_NETWORK_INFO;
    public static final java.lang.String EXTRA_NEW_RSSI;
    public static final java.lang.String EXTRA_NEW_STATE;
    public static final java.lang.String EXTRA_PREVIOUS_WIFI_AP_STATE;
    public static final java.lang.String EXTRA_PREVIOUS_WIFI_STATE;
    public static final java.lang.String EXTRA_SCAN_AVAILABLE;
    public static final java.lang.String EXTRA_SUPPLICANT_CONNECTED;
    public static final java.lang.String EXTRA_SUPPLICANT_ERROR;
    public static final java.lang.String EXTRA_WIFI_AP_STATE;
    public static final java.lang.String EXTRA_WIFI_CONFIGURATION;
    public static final java.lang.String EXTRA_WIFI_INFO;
    public static final java.lang.String EXTRA_WIFI_STATE;
    public static final int FORGET_NETWORK;
    public static final int FORGET_NETWORK_FAILED;
    public static final int FORGET_NETWORK_SUCCEEDED;
    public static final int INVALID_ARGS;
    private static final int INVALID_KEY;
    public static final int IN_PROGRESS;
    public static final java.lang.String LINK_CONFIGURATION_CHANGED_ACTION;
    private static final int MAX_ACTIVE_LOCKS;
    private static final int MAX_RSSI;
    private static final int MIN_RSSI;
    public static final java.lang.String NETWORK_IDS_CHANGED_ACTION;
    public static final java.lang.String NETWORK_STATE_CHANGED_ACTION;
    public static final java.lang.String RSSI_CHANGED_ACTION;
    public static final int RSSI_LEVELS;
    public static final int RSSI_PKTCNT_FETCH;
    public static final int RSSI_PKTCNT_FETCH_FAILED;
    public static final int RSSI_PKTCNT_FETCH_SUCCEEDED;
    public static final int SAVE_NETWORK;
    public static final int SAVE_NETWORK_FAILED;
    public static final int SAVE_NETWORK_SUCCEEDED;
    public static final java.lang.String SCAN_RESULTS_AVAILABLE_ACTION;
    public static final int START_WPS;
    public static final int START_WPS_SUCCEEDED;
    public static final java.lang.String SUPPLICANT_CONNECTION_CHANGE_ACTION;
    public static final java.lang.String SUPPLICANT_STATE_CHANGED_ACTION;
    private static final java.lang.String TAG;
    public static final java.lang.String WIFI_AP_STATE_CHANGED_ACTION;
    public static final int WIFI_AP_STATE_DISABLED;
    public static final int WIFI_AP_STATE_DISABLING;
    public static final int WIFI_AP_STATE_ENABLED;
    public static final int WIFI_AP_STATE_ENABLING;
    public static final int WIFI_AP_STATE_FAILED;
    public static final int WIFI_FREQUENCY_BAND_2GHZ;
    public static final int WIFI_FREQUENCY_BAND_5GHZ;
    public static final int WIFI_FREQUENCY_BAND_AUTO;
    public static final int WIFI_MODE_FULL;
    public static final int WIFI_MODE_FULL_HIGH_PERF;
    public static final int WIFI_MODE_SCAN_ONLY;
    public static final java.lang.String WIFI_SCAN_AVAILABLE;
    public static final java.lang.String WIFI_STATE_CHANGED_ACTION;
    public static final int WIFI_STATE_DISABLED;
    public static final int WIFI_STATE_DISABLING;
    public static final int WIFI_STATE_ENABLED;
    public static final int WIFI_STATE_ENABLING;
    public static final int WIFI_STATE_UNKNOWN;
    public static final int WPS_AUTH_FAILURE;
    public static final int WPS_COMPLETED;
    public static final int WPS_FAILED;
    public static final int WPS_OVERLAP_ERROR;
    public static final int WPS_TIMED_OUT;
    public static final int WPS_TKIP_ONLY_PROHIBITED;
    public static final int WPS_WEP_PROHIBITED;
    private static com.android.internal.util.AsyncChannel sAsyncChannel;
    private static java.util.concurrent.CountDownLatch sConnected;
    private static android.os.HandlerThread sHandlerThread;
    private static int sListenerKey;
    private static final android.util.SparseArray sListenerMap;
    private static final java.lang.Object sListenerMapLock;
    private static int sThreadRefCount;
    private static final java.lang.Object sThreadRefLock;
    private int mActiveLockCount;
    private android.content.Context mContext;
    android.net.wifi.IWifiManager mService;

    static void <clinit>()
    {
        android.util.SparseArray $r0;
        java.lang.Object $r1, $r2;

        <android.net.wifi.WifiManager: int WPS_WEP_PROHIBITED> = 4;

        <android.net.wifi.WifiManager: int WPS_TKIP_ONLY_PROHIBITED> = 5;

        <android.net.wifi.WifiManager: int WPS_TIMED_OUT> = 7;

        <android.net.wifi.WifiManager: int WPS_OVERLAP_ERROR> = 3;

        <android.net.wifi.WifiManager: int WPS_FAILED> = 151564;

        <android.net.wifi.WifiManager: int WPS_COMPLETED> = 151565;

        <android.net.wifi.WifiManager: int WPS_AUTH_FAILURE> = 6;

        <android.net.wifi.WifiManager: int WIFI_STATE_UNKNOWN> = 4;

        <android.net.wifi.WifiManager: int WIFI_STATE_ENABLING> = 2;

        <android.net.wifi.WifiManager: int WIFI_STATE_ENABLED> = 3;

        <android.net.wifi.WifiManager: int WIFI_STATE_DISABLING> = 0;

        <android.net.wifi.WifiManager: int WIFI_STATE_DISABLED> = 1;

        <android.net.wifi.WifiManager: java.lang.String WIFI_STATE_CHANGED_ACTION> = "android.net.wifi.WIFI_STATE_CHANGED";

        <android.net.wifi.WifiManager: java.lang.String WIFI_SCAN_AVAILABLE> = "wifi_scan_available";

        <android.net.wifi.WifiManager: int WIFI_MODE_SCAN_ONLY> = 2;

        <android.net.wifi.WifiManager: int WIFI_MODE_FULL_HIGH_PERF> = 3;

        <android.net.wifi.WifiManager: int WIFI_MODE_FULL> = 1;

        <android.net.wifi.WifiManager: int WIFI_FREQUENCY_BAND_AUTO> = 0;

        <android.net.wifi.WifiManager: int WIFI_FREQUENCY_BAND_5GHZ> = 1;

        <android.net.wifi.WifiManager: int WIFI_FREQUENCY_BAND_2GHZ> = 2;

        <android.net.wifi.WifiManager: int WIFI_AP_STATE_FAILED> = 14;

        <android.net.wifi.WifiManager: int WIFI_AP_STATE_ENABLING> = 12;

        <android.net.wifi.WifiManager: int WIFI_AP_STATE_ENABLED> = 13;

        <android.net.wifi.WifiManager: int WIFI_AP_STATE_DISABLING> = 10;

        <android.net.wifi.WifiManager: int WIFI_AP_STATE_DISABLED> = 11;

        <android.net.wifi.WifiManager: java.lang.String WIFI_AP_STATE_CHANGED_ACTION> = "android.net.wifi.WIFI_AP_STATE_CHANGED";

        <android.net.wifi.WifiManager: java.lang.String TAG> = "WifiManager";

        <android.net.wifi.WifiManager: java.lang.String SUPPLICANT_STATE_CHANGED_ACTION> = "android.net.wifi.supplicant.STATE_CHANGE";

        <android.net.wifi.WifiManager: java.lang.String SUPPLICANT_CONNECTION_CHANGE_ACTION> = "android.net.wifi.supplicant.CONNECTION_CHANGE";

        <android.net.wifi.WifiManager: int START_WPS_SUCCEEDED> = 151563;

        <android.net.wifi.WifiManager: int START_WPS> = 151562;

        <android.net.wifi.WifiManager: java.lang.String SCAN_RESULTS_AVAILABLE_ACTION> = "android.net.wifi.SCAN_RESULTS";

        <android.net.wifi.WifiManager: int SAVE_NETWORK_SUCCEEDED> = 151561;

        <android.net.wifi.WifiManager: int SAVE_NETWORK_FAILED> = 151560;

        <android.net.wifi.WifiManager: int SAVE_NETWORK> = 151559;

        <android.net.wifi.WifiManager: int RSSI_PKTCNT_FETCH_SUCCEEDED> = 151573;

        <android.net.wifi.WifiManager: int RSSI_PKTCNT_FETCH_FAILED> = 151574;

        <android.net.wifi.WifiManager: int RSSI_PKTCNT_FETCH> = 151572;

        <android.net.wifi.WifiManager: int RSSI_LEVELS> = 5;

        <android.net.wifi.WifiManager: java.lang.String RSSI_CHANGED_ACTION> = "android.net.wifi.RSSI_CHANGED";

        <android.net.wifi.WifiManager: java.lang.String NETWORK_STATE_CHANGED_ACTION> = "android.net.wifi.STATE_CHANGE";

        <android.net.wifi.WifiManager: java.lang.String NETWORK_IDS_CHANGED_ACTION> = "android.net.wifi.NETWORK_IDS_CHANGED";

        <android.net.wifi.WifiManager: int MIN_RSSI> = -100;

        <android.net.wifi.WifiManager: int MAX_RSSI> = -55;

        <android.net.wifi.WifiManager: int MAX_ACTIVE_LOCKS> = 50;

        <android.net.wifi.WifiManager: java.lang.String LINK_CONFIGURATION_CHANGED_ACTION> = "android.net.wifi.LINK_CONFIGURATION_CHANGED";

        <android.net.wifi.WifiManager: int IN_PROGRESS> = 1;

        <android.net.wifi.WifiManager: int INVALID_KEY> = 0;

        <android.net.wifi.WifiManager: int INVALID_ARGS> = 8;

        <android.net.wifi.WifiManager: int FORGET_NETWORK_SUCCEEDED> = 151558;

        <android.net.wifi.WifiManager: int FORGET_NETWORK_FAILED> = 151557;

        <android.net.wifi.WifiManager: int FORGET_NETWORK> = 151556;

        <android.net.wifi.WifiManager: java.lang.String EXTRA_WIFI_STATE> = "wifi_state";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_WIFI_INFO> = "wifiInfo";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_WIFI_CONFIGURATION> = "wifiConfiguration";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_WIFI_AP_STATE> = "wifi_state";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_SUPPLICANT_ERROR> = "supplicantError";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_SUPPLICANT_CONNECTED> = "connected";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_SCAN_AVAILABLE> = "scan_enabled";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_PREVIOUS_WIFI_STATE> = "previous_wifi_state";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_PREVIOUS_WIFI_AP_STATE> = "previous_wifi_state";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_NEW_STATE> = "newState";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_NEW_RSSI> = "newRssi";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_NETWORK_INFO> = "networkInfo";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_MULTIPLE_NETWORKS_CHANGED> = "multipleChanges";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_LINK_PROPERTIES> = "linkProperties";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_LINK_CAPABILITIES> = "linkCapabilities";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_CHANGE_REASON> = "changeReason";

        <android.net.wifi.WifiManager: java.lang.String EXTRA_BSSID> = "bssid";

        <android.net.wifi.WifiManager: int ERROR_AUTHENTICATING> = 1;

        <android.net.wifi.WifiManager: int ERROR> = 0;

        <android.net.wifi.WifiManager: int DISABLE_NETWORK_SUCCEEDED> = 151571;

        <android.net.wifi.WifiManager: int DISABLE_NETWORK_FAILED> = 151570;

        <android.net.wifi.WifiManager: int DISABLE_NETWORK> = 151569;

        <android.net.wifi.WifiManager: int DATA_ACTIVITY_OUT> = 2;

        <android.net.wifi.WifiManager: int DATA_ACTIVITY_NOTIFICATION> = 1;

        <android.net.wifi.WifiManager: int DATA_ACTIVITY_NONE> = 0;

        <android.net.wifi.WifiManager: int DATA_ACTIVITY_INOUT> = 3;

        <android.net.wifi.WifiManager: int DATA_ACTIVITY_IN> = 1;

        <android.net.wifi.WifiManager: int CONNECT_NETWORK_SUCCEEDED> = 151555;

        <android.net.wifi.WifiManager: int CONNECT_NETWORK_FAILED> = 151554;

        <android.net.wifi.WifiManager: int CONNECT_NETWORK> = 151553;

        <android.net.wifi.WifiManager: java.lang.String CONFIGURED_NETWORKS_CHANGED_ACTION> = "android.net.wifi.CONFIGURED_NETWORKS_CHANGE";

        <android.net.wifi.WifiManager: int CHANGE_REASON_REMOVED> = 1;

        <android.net.wifi.WifiManager: int CHANGE_REASON_CONFIG_CHANGE> = 2;

        <android.net.wifi.WifiManager: int CHANGE_REASON_ADDED> = 0;

        <android.net.wifi.WifiManager: int CANCEL_WPS_SUCCEDED> = 151568;

        <android.net.wifi.WifiManager: int CANCEL_WPS_FAILED> = 151567;

        <android.net.wifi.WifiManager: int CANCEL_WPS> = 151566;

        <android.net.wifi.WifiManager: int BUSY> = 2;

        <android.net.wifi.WifiManager: java.lang.String BATCHED_SCAN_RESULTS_AVAILABLE_ACTION> = "android.net.wifi.BATCHED_RESULTS";

        <android.net.wifi.WifiManager: int BASE> = 151552;

        <android.net.wifi.WifiManager: java.lang.String ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE> = "android.net.wifi.action.REQUEST_SCAN_ALWAYS_AVAILABLE";

        <android.net.wifi.WifiManager: java.lang.String ACTION_PICK_WIFI_NETWORK> = "android.net.wifi.PICK_WIFI_NETWORK";

        <android.net.wifi.WifiManager: int sListenerKey> = 1;

        $r0 = new android.util.SparseArray;

        specialinvoke $r0.<android.util.SparseArray: void <init>()>();

        <android.net.wifi.WifiManager: android.util.SparseArray sListenerMap> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.net.wifi.WifiManager: java.lang.Object sListenerMapLock> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <android.net.wifi.WifiManager: java.lang.Object sThreadRefLock> = $r2;

        return;
    }

    public void <init>(android.content.Context, android.net.wifi.IWifiManager)
    {
        android.net.wifi.WifiManager r0;
        android.content.Context r1;
        android.net.wifi.IWifiManager r2;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.wifi.IWifiManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.wifi.WifiManager: android.content.Context mContext> = r1;

        r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService> = r2;

        specialinvoke r0.<android.net.wifi.WifiManager: void init()>();

        return;
    }

    static java.lang.Object access$000(int)
    {
        int i0;
        java.lang.Object $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.net.wifi.WifiManager: java.lang.Object removeListener(int)>(i0);

        return $r0;
    }

    static com.android.internal.util.AsyncChannel access$100()
    {
        com.android.internal.util.AsyncChannel $r0;

        $r0 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        return $r0;
    }

    static com.android.internal.util.AsyncChannel access$102(com.android.internal.util.AsyncChannel)
    {
        com.android.internal.util.AsyncChannel r0;

        r0 := @parameter0: com.android.internal.util.AsyncChannel;

        <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel> = r0;

        return r0;
    }

    static java.util.concurrent.CountDownLatch access$200()
    {
        java.util.concurrent.CountDownLatch $r0;

        $r0 = <android.net.wifi.WifiManager: java.util.concurrent.CountDownLatch sConnected>;

        return $r0;
    }

    static java.lang.Object access$300()
    {
        java.lang.Object $r0;

        $r0 = <android.net.wifi.WifiManager: java.lang.Object sListenerMapLock>;

        return $r0;
    }

    static android.util.SparseArray access$400()
    {
        android.util.SparseArray $r0;

        $r0 = <android.net.wifi.WifiManager: android.util.SparseArray sListenerMap>;

        return $r0;
    }

    static int access$500(android.net.wifi.WifiManager)
    {
        android.net.wifi.WifiManager r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiManager;

        $i0 = r0.<android.net.wifi.WifiManager: int mActiveLockCount>;

        return $i0;
    }

    static int access$508(android.net.wifi.WifiManager)
    {
        android.net.wifi.WifiManager r0;
        int i0, $i1;

        r0 := @parameter0: android.net.wifi.WifiManager;

        i0 = r0.<android.net.wifi.WifiManager: int mActiveLockCount>;

        $i1 = i0 + 1;

        r0.<android.net.wifi.WifiManager: int mActiveLockCount> = $i1;

        return i0;
    }

    static int access$510(android.net.wifi.WifiManager)
    {
        android.net.wifi.WifiManager r0;
        int i0, $i1;

        r0 := @parameter0: android.net.wifi.WifiManager;

        i0 = r0.<android.net.wifi.WifiManager: int mActiveLockCount>;

        $i1 = i0 - 1;

        r0.<android.net.wifi.WifiManager: int mActiveLockCount> = $i1;

        return i0;
    }

    private int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WifiConfiguration r1;
        int i0;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        i0 = interfaceinvoke $r3.<android.net.wifi.IWifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)>(r1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static int calculateSignalLevel(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;
        float $f0, $f1, $f2, $f3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > -100 goto label1;

        return 0;

     label1:
        if i0 < -55 goto label2;

        $i5 = i1 - 1;

        return $i5;

     label2:
        $i2 = i1 - 1;

        $f1 = (float) $i2;

        $i3 = i0 + 100;

        $f0 = (float) $i3;

        $f2 = $f1 * $f0;

        $f3 = $f2 / 45.0F;

        $i4 = (int) $f3;

        return $i4;
    }

    public static int compareSignalLevel(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 - i1;

        return $i2;
    }

    private void init()
    {
        android.net.wifi.WifiManager r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r17;
        int i0, $i1;
        android.os.Messenger r3;
        android.net.wifi.WifiManager$ServiceHandler r4, $r10;
        android.os.HandlerThread $r6, $r9, $r12;
        com.android.internal.util.AsyncChannel $r7, $r13;
        java.util.concurrent.CountDownLatch $r8, $r15;
        android.os.Looper $r11;
        android.content.Context $r14;
        java.lang.InterruptedException $r16;

        r0 := @this: android.net.wifi.WifiManager;

        r1 = <android.net.wifi.WifiManager: java.lang.Object sThreadRefLock>;

        entermonitor r1;

     label01:
        $i1 = <android.net.wifi.WifiManager: int sThreadRefCount>;

        i0 = 1 + $i1;

        <android.net.wifi.WifiManager: int sThreadRefCount> = i0;

     label02:
        if i0 != 1 goto label09;

     label03:
        r3 = virtualinvoke r0.<android.net.wifi.WifiManager: android.os.Messenger getWifiServiceMessenger()>();

     label04:
        if r3 != null goto label07;

     label05:
        <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel> = null;

        exitmonitor r1;

     label06:
        return;

     label07:
        $r6 = new android.os.HandlerThread;

        specialinvoke $r6.<android.os.HandlerThread: void <init>(java.lang.String)>("WifiManager");

        <android.net.wifi.WifiManager: android.os.HandlerThread sHandlerThread> = $r6;

        $r7 = new com.android.internal.util.AsyncChannel;

        specialinvoke $r7.<com.android.internal.util.AsyncChannel: void <init>()>();

        <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel> = $r7;

        $r8 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r8.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        <android.net.wifi.WifiManager: java.util.concurrent.CountDownLatch sConnected> = $r8;

        $r9 = <android.net.wifi.WifiManager: android.os.HandlerThread sHandlerThread>;

        virtualinvoke $r9.<android.os.HandlerThread: void start()>();

        $r10 = new android.net.wifi.WifiManager$ServiceHandler;

        $r12 = <android.net.wifi.WifiManager: android.os.HandlerThread sHandlerThread>;

        $r11 = virtualinvoke $r12.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r10.<android.net.wifi.WifiManager$ServiceHandler: void <init>(android.os.Looper)>($r11);

        r4 = $r10;

        $r13 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $r14 = r0.<android.net.wifi.WifiManager: android.content.Context mContext>;

        virtualinvoke $r13.<com.android.internal.util.AsyncChannel: void connect(android.content.Context,android.os.Handler,android.os.Messenger)>($r14, r4, r3);

     label08:
        $r15 = <android.net.wifi.WifiManager: java.util.concurrent.CountDownLatch sConnected>;

        virtualinvoke $r15.<java.util.concurrent.CountDownLatch: void await()>();

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r17 := @caughtexception;

        r2 = $r17;

     label12:
        exitmonitor r1;

     label13:
        throw r2;

     label14:
        $r16 := @caughtexception;

     label15:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiManager", "interrupted wait at init");

     label16:
        goto label09;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.InterruptedException from label08 to label09 with label14;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label15 to label16 with label11;
    }

    private static int putListener(java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.lang.Throwable r2, $r4;
        int i0, $i1;
        android.util.SparseArray $r3;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        r1 = <android.net.wifi.WifiManager: java.lang.Object sListenerMapLock>;

        entermonitor r1;

     label2:
        i0 = <android.net.wifi.WifiManager: int sListenerKey>;

        $i1 = i0 + 1;

        <android.net.wifi.WifiManager: int sListenerKey> = $i1;

     label3:
        if i0 == 0 goto label2;

     label4:
        $r3 = <android.net.wifi.WifiManager: android.util.SparseArray sListenerMap>;

        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r0);

        exitmonitor r1;

     label5:
        return i0;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private static java.lang.Object removeListener(int)
    {
        int i0;
        java.lang.Object r0, r2;
        java.lang.Throwable r1, $r5;
        android.util.SparseArray $r3, $r4;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return null;

     label1:
        r0 = <android.net.wifi.WifiManager: java.lang.Object sListenerMapLock>;

        entermonitor r0;

     label2:
        $r3 = <android.net.wifi.WifiManager: android.util.SparseArray sListenerMap>;

        r2 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r4 = <android.net.wifi.WifiManager: android.util.SparseArray sListenerMap>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r0;

     label3:
        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void validateChannel()
    {
        android.net.wifi.WifiManager r0;
        com.android.internal.util.AsyncChannel $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.net.wifi.WifiManager;

        $r1 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No permission to access and change wifi or a bad initialization");

        throw $r2;

     label1:
        return;
    }

    public int addNetwork(android.net.wifi.WifiConfiguration)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WifiConfiguration r1;
        int $i0;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        if r1 != null goto label1;

        return -1;

     label1:
        r1.<android.net.wifi.WifiConfiguration: int networkId> = -1;

        $i0 = specialinvoke r0.<android.net.wifi.WifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)>(r1);

        return $i0;
    }

    public boolean addToBlacklist(java.lang.String)
    {
        android.net.wifi.WifiManager r0;
        java.lang.String r1;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r3.<android.net.wifi.IWifiManager: void addToBlacklist(java.lang.String)>(r1);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void cancelWps(android.net.wifi.WifiManager$ActionListener)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WifiManager$ActionListener r1;
        com.android.internal.util.AsyncChannel $r2;
        int $i0;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.WifiManager$ActionListener;

        specialinvoke r0.<android.net.wifi.WifiManager: void validateChannel()>();

        $r2 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i0 = staticinvoke <android.net.wifi.WifiManager: int putListener(java.lang.Object)>(r1);

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>(151566, 0, $i0);

        return;
    }

    public void captivePortalCheckComplete()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r2.<android.net.wifi.IWifiManager: void captivePortalCheckComplete()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean clearBlacklist()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r2.<android.net.wifi.IWifiManager: void clearBlacklist()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void connect(int, android.net.wifi.WifiManager$ActionListener)
    {
        android.net.wifi.WifiManager r0;
        int i0, $i1;
        android.net.wifi.WifiManager$ActionListener r1;
        com.android.internal.util.AsyncChannel $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.net.wifi.WifiManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.wifi.WifiManager$ActionListener;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Network id cannot be negative");

        throw $r3;

     label1:
        specialinvoke r0.<android.net.wifi.WifiManager: void validateChannel()>();

        $r2 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i1 = staticinvoke <android.net.wifi.WifiManager: int putListener(java.lang.Object)>(r1);

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>(151553, i0, $i1);

        return;
    }

    public void connect(android.net.wifi.WifiConfiguration, android.net.wifi.WifiManager$ActionListener)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WifiConfiguration r1;
        android.net.wifi.WifiManager$ActionListener r2;
        com.android.internal.util.AsyncChannel $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        r2 := @parameter1: android.net.wifi.WifiManager$ActionListener;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("config cannot be null");

        throw $r4;

     label1:
        specialinvoke r0.<android.net.wifi.WifiManager: void validateChannel()>();

        $r3 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i0 = staticinvoke <android.net.wifi.WifiManager: int putListener(java.lang.Object)>(r2);

        virtualinvoke $r3.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(151553, -1, $i0, r1);

        return;
    }

    public android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String)
    {
        android.net.wifi.WifiManager r0;
        java.lang.String r1;
        android.net.wifi.WifiManager$MulticastLock $r2;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new android.net.wifi.WifiManager$MulticastLock;

        specialinvoke $r2.<android.net.wifi.WifiManager$MulticastLock: void <init>(android.net.wifi.WifiManager,java.lang.String,android.net.wifi.WifiManager$1)>(r0, r1, null);

        return $r2;
    }

    public android.net.wifi.WifiManager$WifiLock createWifiLock(int, java.lang.String)
    {
        android.net.wifi.WifiManager r0;
        int i0;
        java.lang.String r1;
        android.net.wifi.WifiManager$WifiLock $r2;

        r0 := @this: android.net.wifi.WifiManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = new android.net.wifi.WifiManager$WifiLock;

        specialinvoke $r2.<android.net.wifi.WifiManager$WifiLock: void <init>(android.net.wifi.WifiManager,int,java.lang.String,android.net.wifi.WifiManager$1)>(r0, i0, r1, null);

        return $r2;
    }

    public android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String)
    {
        android.net.wifi.WifiManager r0;
        java.lang.String r1;
        android.net.wifi.WifiManager$WifiLock $r2;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new android.net.wifi.WifiManager$WifiLock;

        specialinvoke $r2.<android.net.wifi.WifiManager$WifiLock: void <init>(android.net.wifi.WifiManager,int,java.lang.String,android.net.wifi.WifiManager$1)>(r0, 1, r1, null);

        return $r2;
    }

    public void disable(int, android.net.wifi.WifiManager$ActionListener)
    {
        android.net.wifi.WifiManager r0;
        int i0, $i1;
        android.net.wifi.WifiManager$ActionListener r1;
        com.android.internal.util.AsyncChannel $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.net.wifi.WifiManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.wifi.WifiManager$ActionListener;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Network id cannot be negative");

        throw $r3;

     label1:
        specialinvoke r0.<android.net.wifi.WifiManager: void validateChannel()>();

        $r2 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i1 = staticinvoke <android.net.wifi.WifiManager: int putListener(java.lang.Object)>(r1);

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>(151569, i0, $i1);

        return;
    }

    public boolean disableNetwork(int)
    {
        android.net.wifi.WifiManager r0;
        int i0;
        boolean z0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        z0 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: boolean disableNetwork(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean disconnect()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r2.<android.net.wifi.IWifiManager: void disconnect()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean enableNetwork(int, boolean)
    {
        android.net.wifi.WifiManager r0;
        int i0;
        boolean z0, z1;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        z1 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: boolean enableNetwork(int,boolean)>(i0, z0);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.net.wifi.WifiManager r0;
        java.lang.Throwable r1, r3, $r6, $r7;
        java.lang.Object r2;
        int i0, $i1;
        com.android.internal.util.AsyncChannel $r4, $r5;

        r0 := @this: android.net.wifi.WifiManager;

     label01:
        r2 = <android.net.wifi.WifiManager: java.lang.Object sThreadRefLock>;

        entermonitor r2;

     label02:
        $i1 = <android.net.wifi.WifiManager: int sThreadRefCount>;

        i0 = -1 + $i1;

        <android.net.wifi.WifiManager: int sThreadRefCount> = i0;

     label03:
        if i0 != 0 goto label05;

     label04:
        $r4 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        if $r4 == null goto label05;

        $r5 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        virtualinvoke $r5.<com.android.internal.util.AsyncChannel: void disconnect()>();

     label05:
        exitmonitor r2;

     label06:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label07:
        $r6 := @caughtexception;

        r3 = $r6;

     label08:
        exitmonitor r2;

     label09:
        throw r3;

     label10:
        $r7 := @caughtexception;

        r1 = $r7;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    public void forget(int, android.net.wifi.WifiManager$ActionListener)
    {
        android.net.wifi.WifiManager r0;
        int i0, $i1;
        android.net.wifi.WifiManager$ActionListener r1;
        com.android.internal.util.AsyncChannel $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.net.wifi.WifiManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.wifi.WifiManager$ActionListener;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Network id cannot be negative");

        throw $r3;

     label1:
        specialinvoke r0.<android.net.wifi.WifiManager: void validateChannel()>();

        $r2 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i1 = staticinvoke <android.net.wifi.WifiManager: int putListener(java.lang.Object)>(r1);

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>(151556, i0, $i1);

        return;
    }

    public java.util.List getBatchedScanResults()
    {
        android.net.wifi.WifiManager r0;
        java.util.List r2;
        android.content.Context $r3;
        android.net.wifi.IWifiManager $r4;
        java.lang.String $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r4 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        $r3 = r0.<android.net.wifi.WifiManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        r2 = interfaceinvoke $r4.<android.net.wifi.IWifiManager: java.util.List getBatchedScanResults(java.lang.String)>($r5);

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getConfigFile()
    {
        android.net.wifi.WifiManager r0;
        java.lang.String r2;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        r2 = interfaceinvoke $r3.<android.net.wifi.IWifiManager: java.lang.String getConfigFile()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getConfiguredNetworks()
    {
        android.net.wifi.WifiManager r0;
        java.util.List r2;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        r2 = interfaceinvoke $r3.<android.net.wifi.IWifiManager: java.util.List getConfiguredNetworks()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.wifi.WifiInfo getConnectionInfo()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WifiInfo r2;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        r2 = interfaceinvoke $r3.<android.net.wifi.IWifiManager: android.net.wifi.WifiInfo getConnectionInfo()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.DhcpInfo getDhcpInfo()
    {
        android.net.wifi.WifiManager r0;
        android.net.DhcpInfo r2;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        r2 = interfaceinvoke $r3.<android.net.wifi.IWifiManager: android.net.DhcpInfo getDhcpInfo()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getFrequencyBand()
    {
        android.net.wifi.WifiManager r0;
        int i0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        i0 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: int getFrequencyBand()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getScanResults()
    {
        android.net.wifi.WifiManager r0;
        java.util.List r2;
        android.content.Context $r3;
        android.net.wifi.IWifiManager $r4;
        java.lang.String $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r4 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        $r3 = r0.<android.net.wifi.WifiManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        r2 = interfaceinvoke $r4.<android.net.wifi.IWifiManager: java.util.List getScanResults(java.lang.String)>($r5);

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void getTxPacketCount(android.net.wifi.WifiManager$TxPacketCountListener)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WifiManager$TxPacketCountListener r1;
        com.android.internal.util.AsyncChannel $r2;
        int $i0;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.WifiManager$TxPacketCountListener;

        specialinvoke r0.<android.net.wifi.WifiManager: void validateChannel()>();

        $r2 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i0 = staticinvoke <android.net.wifi.WifiManager: int putListener(java.lang.Object)>(r1);

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>(151572, 0, $i0);

        return;
    }

    public android.net.wifi.WifiConfiguration getWifiApConfiguration()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WifiConfiguration r2;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        r2 = interfaceinvoke $r3.<android.net.wifi.IWifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getWifiApState()
    {
        android.net.wifi.WifiManager r0;
        int i0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        i0 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: int getWifiApEnabledState()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        return 14;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Messenger getWifiServiceMessenger()
    {
        android.net.wifi.WifiManager r0;
        android.os.Messenger r3;
        android.net.wifi.IWifiManager $r4;
        android.os.RemoteException $r5;
        java.lang.SecurityException $r6;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r4 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        r3 = interfaceinvoke $r4.<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger()>();

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        return null;

     label4:
        $r6 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.SecurityException from label1 to label2 with label4;
    }

    public int getWifiState()
    {
        android.net.wifi.WifiManager r0;
        int i0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        i0 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: int getWifiEnabledState()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        return 4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Messenger getWifiStateMachineMessenger()
    {
        android.net.wifi.WifiManager r0;
        android.os.Messenger r2;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        r2 = interfaceinvoke $r3.<android.net.wifi.IWifiManager: android.os.Messenger getWifiStateMachineMessenger()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean initializeMulticastFiltering()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r2.<android.net.wifi.IWifiManager: void initializeMulticastFiltering()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isBatchedScanSupported()
    {
        android.net.wifi.WifiManager r0;
        boolean z0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        z0 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: boolean isBatchedScanSupported()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDualBandSupported()
    {
        android.net.wifi.WifiManager r0;
        boolean z0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        z0 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: boolean isDualBandSupported()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMulticastEnabled()
    {
        android.net.wifi.WifiManager r0;
        boolean z0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        z0 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: boolean isMulticastEnabled()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isScanAlwaysAvailable()
    {
        android.net.wifi.WifiManager r0;
        boolean z0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        z0 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: boolean isScanAlwaysAvailable()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isWifiApEnabled()
    {
        android.net.wifi.WifiManager r0;
        int $i0;

        r0 := @this: android.net.wifi.WifiManager;

        $i0 = virtualinvoke r0.<android.net.wifi.WifiManager: int getWifiApState()>();

        if $i0 != 13 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isWifiEnabled()
    {
        android.net.wifi.WifiManager r0;
        int $i0;

        r0 := @this: android.net.wifi.WifiManager;

        $i0 = virtualinvoke r0.<android.net.wifi.WifiManager: int getWifiState()>();

        if $i0 != 3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean pingSupplicant()
    {
        android.net.wifi.WifiManager r0;
        boolean z0;
        android.net.wifi.IWifiManager $r2, $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        z0 = interfaceinvoke $r3.<android.net.wifi.IWifiManager: boolean pingSupplicant()>();

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void pollBatchedScan()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r2.<android.net.wifi.IWifiManager: void pollBatchedScan()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean reassociate()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r2.<android.net.wifi.IWifiManager: void reassociate()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean reconnect()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r2.<android.net.wifi.IWifiManager: void reconnect()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeNetwork(int)
    {
        android.net.wifi.WifiManager r0;
        int i0;
        boolean z0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        z0 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: boolean removeNetwork(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean requestBatchedScan(android.net.wifi.BatchedScanSettings)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.BatchedScanSettings r1;
        boolean z0;
        android.os.Binder $r3;
        android.net.wifi.IWifiManager $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.BatchedScanSettings;

     label1:
        $r4 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        $r3 = new android.os.Binder;

        specialinvoke $r3.<android.os.Binder: void <init>()>();

        z0 = interfaceinvoke $r4.<android.net.wifi.IWifiManager: boolean requestBatchedScan(android.net.wifi.BatchedScanSettings,android.os.IBinder,android.os.WorkSource)>(r1, $r3, null);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean requestBatchedScan(android.net.wifi.BatchedScanSettings, android.os.WorkSource)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.BatchedScanSettings r1;
        android.os.WorkSource r2;
        boolean z0;
        android.os.Binder $r4;
        android.net.wifi.IWifiManager $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.BatchedScanSettings;

        r2 := @parameter1: android.os.WorkSource;

     label1:
        $r5 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        $r4 = new android.os.Binder;

        specialinvoke $r4.<android.os.Binder: void <init>()>();

        z0 = interfaceinvoke $r5.<android.net.wifi.IWifiManager: boolean requestBatchedScan(android.net.wifi.BatchedScanSettings,android.os.IBinder,android.os.WorkSource)>(r1, $r4, r2);

     label2:
        return z0;

     label3:
        $r6 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void save(android.net.wifi.WifiConfiguration, android.net.wifi.WifiManager$ActionListener)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WifiConfiguration r1;
        android.net.wifi.WifiManager$ActionListener r2;
        com.android.internal.util.AsyncChannel $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        r2 := @parameter1: android.net.wifi.WifiManager$ActionListener;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("config cannot be null");

        throw $r4;

     label1:
        specialinvoke r0.<android.net.wifi.WifiManager: void validateChannel()>();

        $r3 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i0 = staticinvoke <android.net.wifi.WifiManager: int putListener(java.lang.Object)>(r2);

        virtualinvoke $r3.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(151559, 0, $i0, r1);

        return;
    }

    public boolean saveConfiguration()
    {
        android.net.wifi.WifiManager r0;
        boolean z0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        z0 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: boolean saveConfiguration()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCountryCode(java.lang.String, boolean)
    {
        android.net.wifi.WifiManager r0;
        java.lang.String r1;
        boolean z0;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r3.<android.net.wifi.IWifiManager: void setCountryCode(java.lang.String,boolean)>(r1, z0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setFrequencyBand(int, boolean)
    {
        android.net.wifi.WifiManager r0;
        int i0;
        boolean z0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r2.<android.net.wifi.IWifiManager: void setFrequencyBand(int,boolean)>(i0, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTdlsEnabled(java.net.InetAddress, boolean)
    {
        android.net.wifi.WifiManager r0;
        java.net.InetAddress r1;
        boolean z0;
        android.net.wifi.IWifiManager $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: java.net.InetAddress;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        $r4 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        interfaceinvoke $r3.<android.net.wifi.IWifiManager: void enableTdls(java.lang.String,boolean)>($r4, z0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTdlsEnabledWithMacAddress(java.lang.String, boolean)
    {
        android.net.wifi.WifiManager r0;
        java.lang.String r1;
        boolean z0;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r3.<android.net.wifi.IWifiManager: void enableTdlsWithMacAddress(java.lang.String,boolean)>(r1, z0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WifiConfiguration r1;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r3.<android.net.wifi.IWifiManager: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>(r1);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setWifiApEnabled(android.net.wifi.WifiConfiguration, boolean)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WifiConfiguration r1;
        boolean z0;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r3.<android.net.wifi.IWifiManager: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>(r1, z0);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setWifiEnabled(boolean)
    {
        android.net.wifi.WifiManager r0;
        boolean z0, z1;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        z1 = interfaceinvoke $r2.<android.net.wifi.IWifiManager: boolean setWifiEnabled(boolean)>(z0);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean startScan()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r2.<android.net.wifi.IWifiManager: void startScan(android.os.WorkSource)>(null);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean startScan(android.os.WorkSource)
    {
        android.net.wifi.WifiManager r0;
        android.os.WorkSource r1;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.os.WorkSource;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r3.<android.net.wifi.IWifiManager: void startScan(android.os.WorkSource)>(r1);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean startWifi()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r2.<android.net.wifi.IWifiManager: void startWifi()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startWps(android.net.wifi.WpsInfo, android.net.wifi.WifiManager$WpsListener)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WpsInfo r1;
        android.net.wifi.WifiManager$WpsListener r2;
        com.android.internal.util.AsyncChannel $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.WpsInfo;

        r2 := @parameter1: android.net.wifi.WifiManager$WpsListener;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("config cannot be null");

        throw $r4;

     label1:
        specialinvoke r0.<android.net.wifi.WifiManager: void validateChannel()>();

        $r3 = <android.net.wifi.WifiManager: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i0 = staticinvoke <android.net.wifi.WifiManager: int putListener(java.lang.Object)>(r2);

        virtualinvoke $r3.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(151562, 0, $i0, r1);

        return;
    }

    public void stopBatchedScan(android.net.wifi.BatchedScanSettings)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.BatchedScanSettings r1;
        android.net.wifi.IWifiManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.BatchedScanSettings;

     label1:
        $r3 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r3.<android.net.wifi.IWifiManager: void stopBatchedScan(android.net.wifi.BatchedScanSettings)>(r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean stopWifi()
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.IWifiManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.wifi.WifiManager;

     label1:
        $r2 = r0.<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>;

        interfaceinvoke $r2.<android.net.wifi.IWifiManager: void stopWifi()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int updateNetwork(android.net.wifi.WifiConfiguration)
    {
        android.net.wifi.WifiManager r0;
        android.net.wifi.WifiConfiguration r1;
        int $i0, $i1;

        r0 := @this: android.net.wifi.WifiManager;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        if r1 == null goto label1;

        $i0 = r1.<android.net.wifi.WifiConfiguration: int networkId>;

        if $i0 >= 0 goto label2;

     label1:
        return -1;

     label2:
        $i1 = specialinvoke r0.<android.net.wifi.WifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)>(r1);

        return $i1;
    }
}
