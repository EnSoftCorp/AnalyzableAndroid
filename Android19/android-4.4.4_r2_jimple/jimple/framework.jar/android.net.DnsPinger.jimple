public final class android.net.DnsPinger extends android.os.Handler
{
    private static final int ACTION_CANCEL_ALL_PINGS;
    private static final int ACTION_LISTEN_FOR_RESPONSE;
    private static final int ACTION_PING_DNS;
    private static final int BASE;
    private static final boolean DBG;
    public static final int DNS_PING_RESULT;
    private static final int DNS_PORT;
    private static final int RECEIVE_POLL_INTERVAL_MS;
    public static final int SOCKET_EXCEPTION;
    private static final int SOCKET_TIMEOUT_MS;
    public static final int TIMEOUT;
    private static final byte[] mDnsQuery;
    private static final java.util.concurrent.atomic.AtomicInteger sCounter;
    private static final java.util.Random sRandom;
    private java.lang.String TAG;
    private java.util.List mActivePings;
    private final int mConnectionType;
    private android.net.ConnectivityManager mConnectivityManager;
    private final android.content.Context mContext;
    private java.util.concurrent.atomic.AtomicInteger mCurrentToken;
    private final java.util.ArrayList mDefaultDns;
    private int mEventCounter;
    private final android.os.Handler mTarget;

    static void <clinit>()
    {
        java.util.Random $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        byte[] $r2;

        <android.net.DnsPinger: int TIMEOUT> = -1;

        <android.net.DnsPinger: int SOCKET_TIMEOUT_MS> = 1;

        <android.net.DnsPinger: int SOCKET_EXCEPTION> = -2;

        <android.net.DnsPinger: int RECEIVE_POLL_INTERVAL_MS> = 200;

        <android.net.DnsPinger: int DNS_PORT> = 53;

        <android.net.DnsPinger: int DNS_PING_RESULT> = 327680;

        <android.net.DnsPinger: boolean DBG> = 0;

        <android.net.DnsPinger: int BASE> = 327680;

        <android.net.DnsPinger: int ACTION_PING_DNS> = 327681;

        <android.net.DnsPinger: int ACTION_LISTEN_FOR_RESPONSE> = 327682;

        <android.net.DnsPinger: int ACTION_CANCEL_ALL_PINGS> = 327683;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        <android.net.DnsPinger: java.util.Random sRandom> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <android.net.DnsPinger: java.util.concurrent.atomic.AtomicInteger sCounter> = $r1;

        $r2 = newarray (byte)[32];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 1;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 1;

        $r2[6] = 0;

        $r2[7] = 0;

        $r2[8] = 0;

        $r2[9] = 0;

        $r2[10] = 0;

        $r2[11] = 0;

        $r2[12] = 3;

        $r2[13] = 119;

        $r2[14] = 119;

        $r2[15] = 119;

        $r2[16] = 6;

        $r2[17] = 103;

        $r2[18] = 111;

        $r2[19] = 111;

        $r2[20] = 103;

        $r2[21] = 108;

        $r2[22] = 101;

        $r2[23] = 3;

        $r2[24] = 99;

        $r2[25] = 111;

        $r2[26] = 109;

        $r2[27] = 0;

        $r2[28] = 0;

        $r2[29] = 1;

        $r2[30] = 0;

        $r2[31] = 1;

        <android.net.DnsPinger: byte[] mDnsQuery> = $r2;

        return;
    }

    public void <init>(android.content.Context, java.lang.String, android.os.Looper, android.os.Handler, int)
    {
        android.net.DnsPinger r0;
        android.content.Context r1;
        java.lang.String r2, $r13;
        android.os.Looper r3;
        android.os.Handler r4;
        int i0;
        java.util.concurrent.atomic.AtomicInteger $r5;
        java.util.ArrayList $r6, $r7, $r8;
        boolean $z0;
        java.net.InetAddress $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r14;

        r0 := @this: android.net.DnsPinger;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Looper;

        r4 := @parameter3: android.os.Handler;

        i0 := @parameter4: int;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r3);

        r0.<android.net.DnsPinger: android.net.ConnectivityManager mConnectivityManager> = null;

        $r5 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<android.net.DnsPinger: java.util.concurrent.atomic.AtomicInteger mCurrentToken> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<android.net.DnsPinger: java.util.List mActivePings> = $r6;

        r0.<android.net.DnsPinger: java.lang.String TAG> = r2;

        r0.<android.net.DnsPinger: android.content.Context mContext> = r1;

        r0.<android.net.DnsPinger: android.os.Handler mTarget> = r4;

        r0.<android.net.DnsPinger: int mConnectionType> = i0;

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z0 != 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid connectionType in constructor: ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r10;

     label1:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<android.net.DnsPinger: java.util.ArrayList mDefaultDns> = $r7;

        $r8 = r0.<android.net.DnsPinger: java.util.ArrayList mDefaultDns>;

        $r9 = specialinvoke r0.<android.net.DnsPinger: java.net.InetAddress getDefaultDns()>();

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        r0.<android.net.DnsPinger: int mEventCounter> = 0;

        return;
    }

    private android.net.LinkProperties getCurrentLinkProperties()
    {
        android.net.DnsPinger r0;
        android.net.ConnectivityManager $r1, $r2, $r6;
        int $i0;
        android.net.LinkProperties $r3;
        android.content.Context $r4;
        java.lang.Object $r5;

        r0 := @this: android.net.DnsPinger;

        $r1 = r0.<android.net.DnsPinger: android.net.ConnectivityManager mConnectivityManager>;

        if $r1 != null goto label1;

        $r4 = r0.<android.net.DnsPinger: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r6 = (android.net.ConnectivityManager) $r5;

        r0.<android.net.DnsPinger: android.net.ConnectivityManager mConnectivityManager> = $r6;

     label1:
        $r2 = r0.<android.net.DnsPinger: android.net.ConnectivityManager mConnectivityManager>;

        $i0 = r0.<android.net.DnsPinger: int mConnectionType>;

        $r3 = virtualinvoke $r2.<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)>($i0);

        return $r3;
    }

    private java.net.InetAddress getDefaultDns()
    {
        android.net.DnsPinger r0;
        java.lang.String r1;
        java.net.InetAddress r3;
        android.content.Context $r4, $r6;
        android.content.ContentResolver $r5;
        android.content.res.Resources $r7;
        int $i0;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: android.net.DnsPinger;

        $r4 = r0.<android.net.DnsPinger: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r1 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r5, "default_dns_server");

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r6 = r0.<android.net.DnsPinger: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(17039396);

     label2:
        r3 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>(r1);

     label3:
        return r3;

     label4:
        $r8 := @caughtexception;

        specialinvoke r0.<android.net.DnsPinger: void loge(java.lang.String)>("getDefaultDns::malformed default dns address");

        return null;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    private void log(java.lang.String)
    {
        android.net.DnsPinger r0;
        java.lang.String r1, $r2;

        r0 := @this: android.net.DnsPinger;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.DnsPinger: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    private void loge(java.lang.String)
    {
        android.net.DnsPinger r0;
        java.lang.String r1, $r2;

        r0 := @this: android.net.DnsPinger;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.DnsPinger: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    private void sendResponse(int, int, int)
    {
        android.net.DnsPinger r0;
        int i0, i1, i2;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: android.net.DnsPinger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<android.net.DnsPinger: android.os.Handler mTarget>;

        $r2 = virtualinvoke r0.<android.net.DnsPinger: android.os.Message obtainMessage(int,int,int)>(327680, i0, i2);

        virtualinvoke $r1.<android.os.Handler: boolean sendMessage(android.os.Message)>($r2);

        return;
    }

    public void cancelPings()
    {
        android.net.DnsPinger r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        android.os.Message $r2;

        r0 := @this: android.net.DnsPinger;

        $r1 = r0.<android.net.DnsPinger: java.util.concurrent.atomic.AtomicInteger mCurrentToken>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r2 = virtualinvoke r0.<android.net.DnsPinger: android.os.Message obtainMessage(int)>(327683);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public java.util.List getDnsList()
    {
        android.net.DnsPinger r0;
        android.net.LinkProperties r1;
        java.util.Collection r2;
        java.util.ArrayList $r3, $r4, $r10;
        int $i0, $i1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: android.net.DnsPinger;

        r1 = specialinvoke r0.<android.net.DnsPinger: android.net.LinkProperties getCurrentLinkProperties()>();

        if r1 != null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCurLinkProperties:: LP for type");

        $i1 = r0.<android.net.DnsPinger: int mConnectionType>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is null!");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.DnsPinger: void loge(java.lang.String)>($r9);

        $r10 = r0.<android.net.DnsPinger: java.util.ArrayList mDefaultDns>;

        return $r10;

     label1:
        r2 = virtualinvoke r1.<android.net.LinkProperties: java.util.Collection getDnses()>();

        if r2 == null goto label2;

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        if $i0 != 0 goto label3;

     label2:
        specialinvoke r0.<android.net.DnsPinger: void loge(java.lang.String)>("getDns::LinkProps has null dns - returning default");

        $r3 = r0.<android.net.DnsPinger: java.util.ArrayList mDefaultDns>;

        return $r3;

     label3:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        return $r4;
    }

    public void handleMessage(android.os.Message)
    {
        android.net.DnsPinger r0;
        android.os.Message r1, $r26, $r49;
        java.util.Iterator r2, r3, r4;
        android.net.DnsPinger$ActivePing r5, r6, r12, $r20, $r40;
        byte[] r9, r15, $r42;
        java.net.DatagramPacket r10, r17, $r33, $r47;
        android.net.DnsPinger$DnsArg r11;
        java.net.InetAddress r14;
        java.lang.Exception r16, $r56, $r60;
        int $i0, $i1, $i2, $i3, $i5, $i10, $i12, $i14, $i21, $i26, $i27, $i28, $i29, $i30, $i34, $i38, $i39, $i40, $i41;
        java.util.List $r18, $r19, $r23, $r24, $r25, $r51;
        boolean $z0, $z1, $z2, $z4;
        java.lang.Object $r21, $r27, $r34, $r36, $r48;
        java.net.DatagramSocket $r22, $r30, $r31, $r32, $r37, $r38, $r44, $r50;
        long $l4, $l6, $l8, $l9, $l20, $l24, $l25;
        java.lang.Integer $r28, $r29, $r35, $r59;
        byte $b7, $b17, $b18, $b22, $b23, $b32, $b36;
        short $s11, $s13, $s15, $s16, $s19, $s31, $s33, $s35, $s37;
        java.util.concurrent.atomic.AtomicInteger $r39;
        java.util.Random $r41;
        android.net.LinkProperties $r43;
        java.net.NetworkInterface $r45;
        java.lang.String $r46, $r52;
        java.net.SocketTimeoutException $r53;
        java.lang.StringBuilder $r54, $r55, $r57;
        java.io.IOException $r58;

        r0 := @this: android.net.DnsPinger;

        r1 := @parameter0: android.os.Message;

        $i0 = r1.<android.os.Message: int what>;

        tableswitch($i0)
        {
            case 327681: goto label02;
            case 327682: goto label11;
            case 327683: goto label21;
            default: goto label01;
        };

     label01:
        return;

     label02:
        $r36 = r1.<android.os.Message: java.lang.Object obj>;

        r11 = (android.net.DnsPinger$DnsArg) $r36;

        $i28 = r11.<android.net.DnsPinger$DnsArg: int seq>;

        $r39 = r0.<android.net.DnsPinger: java.util.concurrent.atomic.AtomicInteger mCurrentToken>;

        $i29 = virtualinvoke $r39.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i28 != $i29 goto label01;

     label03:
        $r40 = new android.net.DnsPinger$ActivePing;

        specialinvoke $r40.<android.net.DnsPinger$ActivePing: void <init>(android.net.DnsPinger,android.net.DnsPinger$1)>(r0, null);

        r12 = $r40;

        r14 = r11.<android.net.DnsPinger$DnsArg: java.net.InetAddress dns>;

        $i26 = r1.<android.os.Message: int arg1>;

        r12.<android.net.DnsPinger$ActivePing: int internalId> = $i26;

        $i27 = r1.<android.os.Message: int arg2>;

        r12.<android.net.DnsPinger$ActivePing: int timeout> = $i27;

        $r37 = new java.net.DatagramSocket;

        specialinvoke $r37.<java.net.DatagramSocket: void <init>()>();

        r12.<android.net.DnsPinger$ActivePing: java.net.DatagramSocket socket> = $r37;

        $r38 = r12.<android.net.DnsPinger$ActivePing: java.net.DatagramSocket socket>;

        virtualinvoke $r38.<java.net.DatagramSocket: void setSoTimeout(int)>(1);

     label04:
        $r44 = r12.<android.net.DnsPinger$ActivePing: java.net.DatagramSocket socket>;

        $r43 = specialinvoke r0.<android.net.DnsPinger: android.net.LinkProperties getCurrentLinkProperties()>();

        $r46 = virtualinvoke $r43.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $r45 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>($r46);

        virtualinvoke $r44.<java.net.DatagramSocket: void setNetworkInterface(java.net.NetworkInterface)>($r45);

     label05:
        $r41 = <android.net.DnsPinger: java.util.Random sRandom>;

        $i30 = virtualinvoke $r41.<java.util.Random: int nextInt()>();

        $s31 = (short) $i30;

        r12.<android.net.DnsPinger$ActivePing: short packetId> = $s31;

        $r42 = <android.net.DnsPinger: byte[] mDnsQuery>;

        $r48 = virtualinvoke $r42.<java.lang.Object: java.lang.Object clone()>();

        r15 = (byte[]) $r48;

        $s35 = r12.<android.net.DnsPinger$ActivePing: short packetId>;

        $s37 = $s35 >> 8;

        $b36 = (byte) $s37;

        r15[0] = $b36;

        $s33 = r12.<android.net.DnsPinger$ActivePing: short packetId>;

        $b32 = (byte) $s33;

        r15[1] = $b32;

        $r47 = new java.net.DatagramPacket;

        $i34 = lengthof r15;

        specialinvoke $r47.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>(r15, $i34, r14, 53);

        r17 = $r47;

        $r50 = r12.<android.net.DnsPinger$ActivePing: java.net.DatagramSocket socket>;

        virtualinvoke $r50.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>(r17);

        $r51 = r0.<android.net.DnsPinger: java.util.List mActivePings>;

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>(r12);

        $i40 = r0.<android.net.DnsPinger: int mEventCounter>;

        $i38 = 1 + $i40;

        r0.<android.net.DnsPinger: int mEventCounter> = $i38;

        $i39 = r0.<android.net.DnsPinger: int mEventCounter>;

        $r49 = virtualinvoke r0.<android.net.DnsPinger: android.os.Message obtainMessage(int,int,int)>(327682, $i39, 0);

        virtualinvoke r0.<android.net.DnsPinger: boolean sendMessageDelayed(android.os.Message,long)>($r49, 200L);

     label06:
        return;

     label07:
        $r58 := @caughtexception;

        $i41 = r1.<android.os.Message: int arg1>;

        specialinvoke r0.<android.net.DnsPinger: void sendResponse(int,int,int)>($i41, -9999, -2);

        return;

     label08:
        $r56 := @caughtexception;

        r16 = $r56;

     label09:
        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendDnsPing::Error binding to socket ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r52 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.DnsPinger: void loge(java.lang.String)>($r52);

     label10:
        goto label05;

     label11:
        $i2 = r1.<android.os.Message: int arg1>;

        $i1 = r0.<android.net.DnsPinger: int mEventCounter>;

        if $i2 != $i1 goto label01;

        $r23 = r0.<android.net.DnsPinger: java.util.List mActivePings>;

        r3 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $r34 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.net.DnsPinger$ActivePing) $r34;

     label13:
        r9 = newarray (byte)[2];

        $r33 = new java.net.DatagramPacket;

        specialinvoke $r33.<java.net.DatagramPacket: void <init>(byte[],int)>(r9, 2);

        r10 = $r33;

        $r32 = r6.<android.net.DnsPinger$ActivePing: java.net.DatagramSocket socket>;

        virtualinvoke $r32.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>(r10);

        $b17 = r9[0];

        $s15 = r6.<android.net.DnsPinger$ActivePing: short packetId>;

        $s19 = $s15 >> 8;

        $b18 = (byte) $s19;

        if $b17 != $b18 goto label12;

        $b23 = r9[1];

        $s16 = r6.<android.net.DnsPinger$ActivePing: short packetId>;

        $b22 = (byte) $s16;

        if $b23 != $b22 goto label12;

        $l24 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l25 = r6.<android.net.DnsPinger$ActivePing: long start>;

        $l20 = $l24 - $l25;

        $i21 = (int) $l20;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21);

        r6.<android.net.DnsPinger$ActivePing: java.lang.Integer result> = $r35;

     label14:
        goto label12;

     label15:
        $r53 := @caughtexception;

        goto label12;

     label16:
        $r60 := @caughtexception;

        $r59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2);

        r6.<android.net.DnsPinger$ActivePing: java.lang.Integer result> = $r59;

        goto label12;

     label17:
        $r25 = r0.<android.net.DnsPinger: java.util.List mActivePings>;

        r4 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label20;

        $r27 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.net.DnsPinger$ActivePing) $r27;

        $r28 = r5.<android.net.DnsPinger$ActivePing: java.lang.Integer result>;

        if $r28 == null goto label19;

        $i14 = r5.<android.net.DnsPinger$ActivePing: int internalId>;

        $s13 = r5.<android.net.DnsPinger$ActivePing: short packetId>;

        $r29 = r5.<android.net.DnsPinger$ActivePing: java.lang.Integer result>;

        $i12 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<android.net.DnsPinger: void sendResponse(int,int,int)>($i14, $s13, $i12);

        $r31 = r5.<android.net.DnsPinger$ActivePing: java.net.DatagramSocket socket>;

        virtualinvoke $r31.<java.net.DatagramSocket: void close()>();

        interfaceinvoke r4.<java.util.Iterator: void remove()>();

        goto label18;

     label19:
        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l9 = r5.<android.net.DnsPinger$ActivePing: long start>;

        $i5 = r5.<android.net.DnsPinger$ActivePing: int timeout>;

        $l8 = (long) $i5;

        $l6 = $l9 + $l8;

        $b7 = $l4 cmp $l6;

        if $b7 <= 0 goto label18;

        $i10 = r5.<android.net.DnsPinger$ActivePing: int internalId>;

        $s11 = r5.<android.net.DnsPinger$ActivePing: short packetId>;

        specialinvoke r0.<android.net.DnsPinger: void sendResponse(int,int,int)>($i10, $s11, -1);

        $r30 = r5.<android.net.DnsPinger$ActivePing: java.net.DatagramSocket socket>;

        virtualinvoke $r30.<java.net.DatagramSocket: void close()>();

        interfaceinvoke r4.<java.util.Iterator: void remove()>();

        goto label18;

     label20:
        $r24 = r0.<android.net.DnsPinger: java.util.List mActivePings>;

        $z4 = interfaceinvoke $r24.<java.util.List: boolean isEmpty()>();

        if $z4 != 0 goto label01;

        $i3 = r0.<android.net.DnsPinger: int mEventCounter>;

        $r26 = virtualinvoke r0.<android.net.DnsPinger: android.os.Message obtainMessage(int,int,int)>(327682, $i3, 0);

        virtualinvoke r0.<android.net.DnsPinger: boolean sendMessageDelayed(android.os.Message,long)>($r26, 200L);

        return;

     label21:
        $r18 = r0.<android.net.DnsPinger: java.util.List mActivePings>;

        r2 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label23;

        $r21 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (android.net.DnsPinger$ActivePing) $r21;

        $r22 = $r20.<android.net.DnsPinger$ActivePing: java.net.DatagramSocket socket>;

        virtualinvoke $r22.<java.net.DatagramSocket: void close()>();

        goto label22;

     label23:
        $r19 = r0.<android.net.DnsPinger: java.util.List mActivePings>;

        interfaceinvoke $r19.<java.util.List: void clear()>();

        return;

        catch java.io.IOException from label03 to label04 with label07;
        catch java.lang.Exception from label04 to label05 with label08;
        catch java.io.IOException from label04 to label05 with label07;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label09 to label10 with label07;
        catch java.net.SocketTimeoutException from label13 to label14 with label15;
        catch java.lang.Exception from label13 to label14 with label16;
    }

    public int pingDnsAsync(java.net.InetAddress, int, int)
    {
        android.net.DnsPinger r0;
        java.net.InetAddress r1;
        int i0, i1, i2, $i3;
        java.util.concurrent.atomic.AtomicInteger $r2, $r4;
        android.net.DnsPinger$DnsArg $r3;
        android.os.Message $r5;
        long $l4;

        r0 := @this: android.net.DnsPinger;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = <android.net.DnsPinger: java.util.concurrent.atomic.AtomicInteger sCounter>;

        i2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r3 = new android.net.DnsPinger$DnsArg;

        $r4 = r0.<android.net.DnsPinger: java.util.concurrent.atomic.AtomicInteger mCurrentToken>;

        $i3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        specialinvoke $r3.<android.net.DnsPinger$DnsArg: void <init>(android.net.DnsPinger,java.net.InetAddress,int)>(r0, r1, $i3);

        $r5 = virtualinvoke r0.<android.net.DnsPinger: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(327681, i2, i0, $r3);

        $l4 = (long) i1;

        virtualinvoke r0.<android.net.DnsPinger: boolean sendMessageDelayed(android.os.Message,long)>($r5, $l4);

        return i2;
    }
}
